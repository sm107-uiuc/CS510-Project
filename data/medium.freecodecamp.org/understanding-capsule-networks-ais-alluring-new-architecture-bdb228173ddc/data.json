{"url": "https://medium.freecodecamp.org/understanding-capsule-networks-ais-alluring-new-architecture-bdb228173ddc", "time": 1682988313.2322712, "path": "medium.freecodecamp.org/understanding-capsule-networks-ais-alluring-new-architecture-bdb228173ddc/", "webpage": {"metadata": {"title": "Understanding Capsule Networks \u2014 AI\u2019s Alluring New Architecture", "h1": "Understanding Capsule Networks \u2014 AI\u2019s Alluring New Architecture", "description": "by Nick Bourdakos Understanding Capsule Networks \u2014 AI\u2019s Alluring New Architecture \u201cScience [https://www.instagram.com/p/BaIocBQl-H_/?taken-by=areynolds_illo]\u201d by Alex Reynolds [https://alex-reynolds-art.squarespace.com]Convolutional neural networks have done an amazing job, but are rooted in problems. It\u2019s time we started thinking about new solutions or improvements \u2014 and now, enter capsules. Previously, I briefly discussed how"}, "outgoing_paragraph_urls": [{"url": "https://hackernoon.com/capsule-networks-are-shaking-up-ai-heres-how-to-use-them-c233a0971952", "anchor_text": "capsule networks", "paragraph_index": 1}, {"url": "https://github.com/bourdakos1/CapsNet-Visualization", "anchor_text": "here", "paragraph_index": 2}, {"url": "https://www.youtube.com/watch?v=pPN8d0E3900", "anchor_text": "this excellent video", "paragraph_index": 67}, {"url": "https://www.linkedin.com/in/nicholasbourdakos", "anchor_text": "LinkedIn", "paragraph_index": 99}, {"url": "https://medium.com/@bourdakos1", "anchor_text": "Medium", "paragraph_index": 99}, {"url": "https://twitter.com/bourdakos1", "anchor_text": "Twitter", "paragraph_index": 99}, {"url": "https://www.freecodecamp.org/learn/", "anchor_text": "Get started", "paragraph_index": 102}, {"url": "https://www.freecodecamp.org/donate/", "anchor_text": "make a tax-deductible donation here", "paragraph_index": 105}], "all_paragraphs": ["Convolutional neural networks have done an amazing job, but are rooted in problems. It\u2019s time we started thinking about new solutions or improvements \u2014 and now, enter capsules.", "Previously, I briefly discussed how capsule networks combat some of these traditional problems. For the past for few months, I\u2019ve been submerging myself in all things capsules. I think it\u2019s time we all try to get a deeper understanding of how capsules actually work.", "In order to make it easier to follow along, I have built a visualization tool that allows you to see what is happening at each layer. This is paired with a simple implementation of the network. All of it can be found on GitHub here.", "This is the CapsNet architecture. Don\u2019t worry if you don\u2019t understand what any of it means yet. I\u2019ll be going through it layer by layer, with as much detail as I can possibly conjure up.", "The input into CapsNet is the actual image supplied to the neural net. In this example the input image is 28 pixels high and 28 pixels wide. But images are actually 3 dimensions, and the 3rd dimension contains the color channels.", "The image in our example only has one color channel, because it\u2019s black and white. Most images you are familiar with have 3 or 4 channels, for Red-Green-Blue and possibly an additional channel for Alpha, or transparency.", "Each one of these pixels is represented as a value from 0 to 255 and stored in a 28x28x1 matrix [28, 28, 1]. The brighter the pixel, the larger the value.", "The first part of CapsNet is a traditional convolutional layer. What is a convolutional layer, how does it work, and what is its purpose?", "The goal is to extract some extremely basic features from the input image, like edges or curves.", "If we look at a few points on the image, we can start to pick up a pattern. Focus on the colors to the left and right of the point we are looking at:", "You might notice that they have a larger difference if the point is an edge:", "What if we went through each pixel in the image and replaced its value with the value of the difference of the pixels to the left and right of it? In theory, the image should become all black except for the edges.", "We could do this by looping through every pixel in the image:", "But this isn\u2019t very efficient. We can instead use something called a \u201cconvolution.\u201d Technically speaking, it\u2019s a \u201ccross-correlation,\u201d but everyone likes to call them convolutions.", "A convolution is essentially doing the same thing as our loop, but it takes advantage of matrix math.", "A convolution is done by lining up a small \u201cwindow\u201d in the corner of the image that only lets us see the pixels in that area. We then slide the window across all the pixels in the image, multiplying each pixel by a set of weights and then adding up all the values that are in that window.", "This window is a matrix of weights, called a \u201ckernel.\u201d", "We only care about 2 pixels, but when we wrap the window around them it will encapsulate the pixel between them.", "Can you think of a set of weights that we can multiply these pixels by so that their sum adds up to the value we are looking for?", "We can do something like this:", "With these weights, our kernel will look like this:", "However, kernels are generally square \u2014 so we can pad it with more zeros to look like this:", "Here\u2019s a nice gif to see a convolution in action:", "Note: The dimension of the output is reduced by the size of the kernel plus 1. For example:(7 \u2014 3) + 1 = 5 (more on this in the next section)", "Here\u2019s what the original image looks like after doing a convolution with the kernel we crafted:", "You might notice that a couple edges are missing. Specifically, the horizontal ones. In order to highlight those, we would need another kernel that looks at pixels above and below. Like this:", "Also, both of these kernels won\u2019t work well with edges of other angles or edges that are blurred. For that reason, we use many kernels (in our CapsNet implementation, we use 256 kernels). And the kernels are normally larger to allow for more wiggle room (our kernels will be 9x9).", "This is what one of the kernels looked like after training the model. It\u2019s not very obvious, but this is just a larger version of our edge detector that is more robust and only finds edges that go from bright to dark.", "Note: I\u2019ve rounded the values because they are quite large, for example 0.01783941", "Luckily, we don\u2019t have to hand-pick this collection of kernels. That is what training does. The kernels all start off empty (or in a random state) and keep getting tweaked in the direction that makes the output closer to what we want.", "This is what the 256 kernels ended up looking like (I colored them as pixels so it\u2019s easier to digest). The more negative the numbers, the bluer they are. 0 is green and positive is yellow:", "After we filter the image with all of these kernels, we end up with a fat stack of 256 output images.", "ReLU (formally known as Rectified Linear Unit) may sound complicated, but it\u2019s actually quite simple. ReLU is an activation function that takes in a value. If it\u2019s negative it becomes zero, and if it\u2019s positive it stays the same.", "We apply this function to all of the outputs of our convolutions.", "Why do we do this? If we don\u2019t apply some sort of activation function to the output of our layers, then the entire neural net could be described as a linear function. This would mean that all this stuff we are doing is kind of pointless.", "Adding a non-linearity allows us to describe all kinds of functions. There are many different types of function we could apply, but ReLU is the most popular because it\u2019s very cheap to perform.", "Here are the outputs of ReLU Conv1 layer:", "The PrimaryCaps layer starts off as a normal convolution layer, but this time we are convolving over the stack of 256 outputs from the previous convolutions. So instead of having a 9x9 kernel, we have a 9x9x256 kernel.", "So what exactly are we looking for?", "In the first layer of convolutions we were looking for simple edges and curves. Now we are looking for slightly more complex shapes from the edges we found earlier.", "This time our \u201cstride\u201d is 2. That means instead of moving 1 pixel at a time, we take steps of 2. A larger stride is chosen so that we can reduce the size of our input more rapidly:", "Note: The dimension of the output would normally be 12, but we divide it by 2, because of the stride. For example: ((20 \u2014 9) + 1) / 2 = 6", "We will convolve over the outputs another 256 times. So we will end up with a stack of 256 6x6 outputs.", "But this time we aren\u2019t satisfied with just some lousy plain old numbers.", "We\u2019re going to cut the stack up into 32 decks with 8 cards each deck.", "We can call this deck a \u201ccapsule layer.\u201d", "Each capsule layer has 36 \u201ccapsules.\u201d", "If you\u2019re keeping up (and are a math wiz), that means each capsule has an array of 8 values. This is what we can call a \u201cvector.\u201d", "These \u201ccapsules\u201d are our new pixel.", "With a single pixel, we could only store the confidence of whether or not we found an edge in that spot. The higher the number, the higher the confidence.", "With a capsule we can store 8 values per location! That gives us the opportunity to store more information than just whether or not we found a shape in that spot. But what other kinds of information would we want to store?", "When looking at the shape below, what can you tell me about it? If you had to tell someone else how to redraw it, and they couldn\u2019t look at it, what would you say?", "This image is extremely basic, so there are only a few details we need to describe the shape:", "We can call these \u201cinstantiation parameters.\u201d With more complex images we will end up needing more details. They can include pose (position, size, orientation), deformation, velocity, albedo, hue, texture, and so on.", "You might remember that when we made a kernel for edge detection, it only worked on a specific angle. We needed a kernel for each angle. We could get away with it when dealing with edges because there are very few ways to describe an edge. Once we get up to the level of shapes, we don\u2019t want to have a kernel for every angle of rectangles, ovals, triangles, and so on. It would get unwieldy, and would become even worse when dealing with more complicated shapes that have 3 dimensional rotations and features like lighting.", "That\u2019s one of the reasons why traditional neural nets don\u2019t handle unseen rotations very well:", "As we go from edges to shapes and from shapes to objects, it would be nice if we had more room to store this extra useful information.", "Here is a simplified comparison of 2 capsule layers (one for rectangles and the other for triangles) vs 2 traditional pixel outputs:", "Like a traditional 2D or 3D vector, this vector has an angle and a length. The length describes the probability, and the angle describes the instantiation parameters. In the example above, the angle actually matches the angle of the shape, but that\u2019s not normally the case.", "In reality it\u2019s not really feasible (or at least easy) to visualize the vectors like above, because these vectors are 8 dimensional.", "Since we have all this extra information in a capsule, the idea is that we should be able to recreate the image from them.", "Sounds great, but how do we coax the network into actually wanting to learn these things?", "When training a traditional CNN, we only care about whether or not the model predicts the right classification. With a capsule network, we have something called a \u201creconstruction.\u201d A reconstruction takes the vector we created and tries to recreate the original input image, given only this vector. We then grade the model based on how close the reconstruction matches the original image.", "I will go into more detail on this in the coming sections, but here is a simple example:", "After we have our capsules, we are going to perform another non-linearity function on it (like ReLU), but this time the equation is a bit more involved. The function scales the values of the vector so that only the length of the vector changes, not the angle. This way we can make the vector between 0 and 1 so it\u2019s an actual probability.", "This is what lengths of the capsule vectors look like after squashing. At this point it\u2019s almost impossible to guess what each capsule is looking for.", "The next step is to decide what information to send to the next level. In traditional networks, we would probably do something like \u201cmax pooling.\u201d Max pooling is a way to reduce size by only passing on the highest activated pixel in the region to the next layer.", "However, with capsule networks we are going to do something called routing by agreement. The best example of this is the boat and house example illustrated by Aur\u00e9lien G\u00e9ron in this excellent video. Each capsule tries to predict the next layer\u2019s activations based on itself:", "Looking at these predictions, which object would you choose to pass on to the next layer (not knowing the input)? Probably the boat, right? both the rectangle capsule and the triangle capsule agree on what the boat would look like. But they don\u2019t agree on how the house would look, so it\u2019s not very likely that the object is a house.", "With routing by agreement, we only pass on the useful information and throw away the data that would just add noise to the results. This gives us a much smarter selection than just choosing the largest number, like in max pooling.", "With traditional networks, misplaced features don\u2019t faze it:", "With capsule networks, the features wouldn\u2019t agree with each other:", "Hopefully, that works intuitively. However, how does the math work?", "We have 10 different digit classes that we are predicting:", "Note: In the boat and house example we were predicting 2 objects, but now we are predicting 10.", "Unlike in the boat and the house example, the predictions aren\u2019t actually images. Instead, we are trying to predict the vector that describes the image.", "The capsule\u2019s predictions for each class are made by multiplying it\u2019s vector by a matrix of weights for each class that we are trying to predict.", "Remember that we have 32 capsule layers, and each capsule layer has 36 capsules. That means we have a total of 1,152 capsules.", "You will end up with a list of 11,520 predictions.", "Each weight is actually a 16x8 matrix, so each prediction is a matrix multiplication between the capsule vector and this weight matrix:", "As you can see, our prediction is a 16 degree vector.", "Where does the 16 come from? It\u2019s an arbitrary choice, just like 8 was for our original capsules.", "But it should be noted that we want to increase the number of dimensions of our capsules the deeper we get into the network. This should make sense intuitively, because the deeper we go the more complex our features become and the more parameters we need to recreate them. For example, you will need more information to describe an entire face than just a person\u2019s eye.", "The next step is to figure out which of these 11,520 predictions agree with each other the most.", "It can be difficult to visualize a solution to this when we think in terms of high dimensional vectors. For the sake of sanity, let\u2019s start off by pretending our vectors are just points in 2 dimensional space:", "We start off by calculating the mean of all of the points. Each point starts out with equal importance:", "We then can measure the distance between every point from the mean. The further the point is away from the mean, the less important that point becomes:", "We then recalculate the mean, this time taking into account the point\u2019s importance:", "We end up going through this cycle 3 times:", "As you can see, as we go through this cycle, the points that don\u2019t agree with the others start to disappear. The highest agreeing points end up getting passed on to the next layer with the highest activations.", "After agreement, we end up with ten 16 dimensional vectors, one vector for each digit. This matrix is our final prediction. The length of the vector is the confidence of the digit being found \u2014 the longer the better. The vector can also be used to generate a reconstruction of the input image.", "This is what the lengths of the vectors look like with the input of 4:", "The fifth block is the brightest, which means high confidence. Remember that 0 is the first class, meaning 4 is our predicted class.", "The reconstruction portion of the implementation isn\u2019t very interesting. It\u2019s just a few fully connected layers. But the reconstruction itself is very cool and fun to play around with.", "If we reconstruct our 4 input from its vector, this is what we get:", "If we manipulate the sliders (the vector), we can see how each dimension affects the 4:", "I recommend cloning the visualization repo to play around with different inputs and see how the sliders affect the reconstruction:", "I think that the reconstructions from capsule networks are stunning. Even though the current model is only trained on simple digits, it makes my mind run with the possibilities that a matured architecture trained on a larger dataset could achieve.", "I\u2019m very curious to see how manipulating the reconstruction vectors of a more complicated image would affect it. For that reason, my next project is to get capsule networks to work with the CIFAR and smallNORB datasets.", "Thanks for reading! If you have any questions, feel free to reach out at bourdakos1@gmail.com, connect with me on LinkedIn, or follow me on Medium and Twitter.", "If you found this article helpful, it would mean a lot if you gave it some applause? and shared to help others find it! And feel free to leave a comment below.", "\n    If this article was helpful, tweet it.\n", "\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n", "Our mission: to help people learn to code for free. We accomplish this by creating thousands of videos, articles, and interactive coding lessons - all freely available to the public. We also have thousands of freeCodeCamp study groups around the world.", "Donations to freeCodeCamp go toward our education initiatives, and help pay for servers, services, and staff.", "\n                    You can make a tax-deductible donation here.\n                "], "all_outgoing_urls": [{"url": "https://www.freecodecamp.org/news", "anchor_text": ""}, {"url": "https://forum.freecodecamp.org/", "anchor_text": "Forum"}, {"url": "https://www.freecodecamp.org/donate/", "anchor_text": "Donate"}, {"url": "https://medium.freecodecamp.org/news/tag/machine-learning/", "anchor_text": "#Machine Learning"}, {"url": "https://www.instagram.com/p/BaIocBQl-H_/?taken-by=areynolds_illo", "anchor_text": "Science"}, {"url": "https://alex-reynolds-art.squarespace.com", "anchor_text": "Alex Reynolds"}, {"url": "https://hackernoon.com/capsule-networks-are-shaking-up-ai-heres-how-to-use-them-c233a0971952", "anchor_text": "capsule networks"}, {"url": "https://github.com/bourdakos1/CapsNet-Visualization", "anchor_text": "here"}, {"url": "https://www.youtube.com/watch?v=pPN8d0E3900", "anchor_text": "this excellent video"}, {"url": "http://localhost:5000/", "anchor_text": "http://localhost:5000"}, {"url": "https://www.linkedin.com/in/nicholasbourdakos", "anchor_text": "LinkedIn"}, {"url": "https://medium.com/@bourdakos1", "anchor_text": "Medium"}, {"url": "https://twitter.com/bourdakos1", "anchor_text": "Twitter"}, {"url": "https://www.freecodecamp.org/learn/", "anchor_text": "Get started"}, {"url": "https://www.freecodecamp.org/donate/", "anchor_text": "make a tax-deductible donation here"}, {"url": "https://www.freecodecamp.org/news/what-is-a-framework-software-frameworks-definition/", "anchor_text": "What is a Framework?"}, {"url": "https://www.freecodecamp.org/news/what-is-a-computer-scientist-what-exactly-do-cs-majors-do/", "anchor_text": "What Do CS Majors Do?"}, {"url": "https://www.freecodecamp.org/news/discord-update-failed-how-to-fix-the-error-on-a-windows-10-pc/", "anchor_text": "Discord Update Failed"}, {"url": "https://www.freecodecamp.org/news/how-to-center-an-image-in-a-div-css/", "anchor_text": "Center an Image in CSS"}, {"url": "https://www.freecodecamp.org/news/what-does-mvc-mean-in-computer-science/", "anchor_text": "What is the MVC Model?"}, {"url": "https://www.freecodecamp.org/news/javascript-replaceall-replace-all-instances-of-a-string-in-js/", "anchor_text": "JavaScript replaceAll()"}, {"url": "https://www.freecodecamp.org/news/python-switch-statement-switch-case-example/", "anchor_text": "Python Switch Statement"}, {"url": "https://www.freecodecamp.org/news/python-string-replace-how-to-replace-a-character-in-a-string/", "anchor_text": "Python string.replace()"}, {"url": "https://www.freecodecamp.org/news/what-is-a-relational-database-rdbms-definition/", "anchor_text": "What is a Relational DB?"}, {"url": "https://www.freecodecamp.org/news/how-to-split-a-string-in-python/", "anchor_text": "Split a String in Python"}, {"url": "https://www.freecodecamp.org/news/sql-having-how-to-group-and-count-with-a-having-statement/", "anchor_text": "SQL HAVING"}, {"url": "https://www.freecodecamp.org/news/what-is-object-oriented-programming/", "anchor_text": "What is OOP?"}, {"url": "https://www.freecodecamp.org/news/html-textarea-how-to-add-text-box-to-your-website/", "anchor_text": "HTML textarea"}, {"url": "https://www.freecodecamp.org/news/nvm-for-windows-how-to-download-and-install-node-version-manager-in-windows-10/", "anchor_text": "NVM for Windows"}, {"url": "https://www.freecodecamp.org/news/git-revert-file-reverting-a-file-to-a-previous-commit/", "anchor_text": "Git Revert File"}, {"url": "https://www.freecodecamp.org/news/sql-aggregate-functions-how-to-group-by-in-mysql-and-postgresql/", "anchor_text": "GROUP BY in SQL"}, {"url": "https://www.freecodecamp.org/news/2d-array-in-java-two-dimensional-and-nested-arrays/", "anchor_text": "2D Array in Java"}, {"url": "https://www.freecodecamp.org/news/node-version-manager-nvm-install-guide/", "anchor_text": "How to Install NVM"}, {"url": "https://www.freecodecamp.org/news/how-to-calculate-percentage-in-excel-formula-for-percentages/", "anchor_text": "Percentages in Excel"}, {"url": "https://www.freecodecamp.org/news/javascript-timestamp-how-to-use-gettime-to-generate-timestamps-in-js/", "anchor_text": "JavaScript Timestamp"}, {"url": "https://www.freecodecamp.org/news/git-list-remote-branches/", "anchor_text": "Git List Remote Branches"}, {"url": "https://www.freecodecamp.org/news/git-delete-remote-branch/", "anchor_text": "Git Delete Remote Branch"}, {"url": "https://www.freecodecamp.org/news/what-does-a-software-developer-do-software-engineer-career-overview/", "anchor_text": "Software Developer Career"}, {"url": "https://www.freecodecamp.org/news/three-dots-operator-in-javascript/", "anchor_text": "Three Dots Operator in JS"}, {"url": "https://www.freecodecamp.org/news/javascript-date-format-how-to-format-a-date-in-js/", "anchor_text": "How to Format Dates in JS"}, {"url": "https://www.freecodecamp.org/news/how-to-remove-an-element-from-a-javascript-array-removing-a-specific-item-in-js/", "anchor_text": "Remove Item from Array JS"}, {"url": "https://www.freecodecamp.org/news/how-to-dual-boot-windows-10-and-ubuntu-linux-dual-booting-tutorial/", "anchor_text": "Dual Boot Windows + Ubuntu"}, {"url": "https://www.freecodecamp.org/news/how-to-round-to-2-decimal-places-in-python/", "anchor_text": "Python Round to 2 Decimals"}, {"url": "https://www.freecodecamp.org/news/string-to-number-in-javascript-convert-a-string-to-an-int-in-js/", "anchor_text": "String to Int in JavaScript"}, {"url": "https://www.freecodecamp.org/news/gitignore-file-how-to-ignore-files-and-folders-in-git/", "anchor_text": "What\u2019s the .gitignore File?"}, {"url": "https://www.freecodecamp.org/news/about/", "anchor_text": "About"}, {"url": "https://www.linkedin.com/school/free-code-camp/people/", "anchor_text": "Alumni Network"}, {"url": "https://github.com/freeCodeCamp/", "anchor_text": "Open Source"}, {"url": "https://www.freecodecamp.org/news/shop/", "anchor_text": "Shop"}, {"url": "https://www.freecodecamp.org/news/support/", "anchor_text": "Support"}, {"url": "https://www.freecodecamp.org/news/sponsors/", "anchor_text": "Sponsors"}, {"url": "https://www.freecodecamp.org/news/academic-honesty-policy/", "anchor_text": "Academic Honesty"}, {"url": "https://www.freecodecamp.org/news/code-of-conduct/", "anchor_text": "Code of Conduct"}, {"url": "https://www.freecodecamp.org/news/privacy-policy/", "anchor_text": "Privacy Policy"}, {"url": "https://www.freecodecamp.org/news/terms-of-service/", "anchor_text": "Terms of Service"}, {"url": "https://www.freecodecamp.org/news/copyright-policy/", "anchor_text": "Copyright Policy"}]}, "scrape_status": {"code": "1"}}