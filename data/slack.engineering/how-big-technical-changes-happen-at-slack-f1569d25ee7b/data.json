{"url": "https://slack.engineering/how-big-technical-changes-happen-at-slack-f1569d25ee7b", "time": 1682993118.009176, "path": "slack.engineering/how-big-technical-changes-happen-at-slack-f1569d25ee7b/", "webpage": {"metadata": {"title": "How Big Technical Changes Happen at Slack - Slack Engineering", "h1": "How Big Technical Changes Happen at Slack", "description": "Most new things in technology turn out to be fads: patterns of talking and doing that come and go without leaving a permanent mark. Microkernels; EPIC architectures like IA-64; object request brokers; and 1990s\u2019-style neural nets are gone, and will not return. Sorry for the deep throwbacks; only time proves which things are fads, so for uncontroversial examples we have to reach pretty far back."}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/beyond-accuracy-precision-and-recall-3da06bea9f6c", "anchor_text": "precision and recall", "paragraph_index": 4}, {"url": "https://en.wikipedia.org/wiki/Sigmoid_function", "anchor_text": "sigmoid", "paragraph_index": 6}, {"url": "https://books.google.ca/books?id=9U1K5LjUOwEC&redir_esc=y", "anchor_text": "diffusion of innovation", "paragraph_index": 7}, {"url": "https://reactjs.org/", "anchor_text": "React library", "paragraph_index": 9}, {"url": "https://slack.engineering/taking-php-seriously", "anchor_text": "migrating from PHP to Hack since 2016", "paragraph_index": 10}, {"url": "https://docs.hhvm.com/hack/types/introduction", "anchor_text": "types", "paragraph_index": 10}, {"url": "https://vitess.io/", "anchor_text": "Vitess", "paragraph_index": 11}, {"url": "https://www.cncf.io/case-study/slack/", "anchor_text": "turned to as we evolve our data sharding strategy", "paragraph_index": 11}, {"url": "https://slack.engineering/libslack-the-c-library-at-the-foundation-of-our-client-application-architecture", "anchor_text": "our cross-platform C++ client library", "paragraph_index": 12}, {"url": "https://slack.engineering/client-consistency-at-slack-beyond-libslack", "anchor_text": "We took what we learned from the LibSlack effort", "paragraph_index": 13}, {"url": "https://elixir-lang.org/getting-started/introduction.html", "anchor_text": "Elixir", "paragraph_index": 16}, {"url": "http://cassandra.apache.org/", "anchor_text": "Cassandra", "paragraph_index": 16}, {"url": "https://webassembly.org/", "anchor_text": "WebAssembly", "paragraph_index": 16}, {"url": "https://medium.com/@kentbeck_7670/test-commit-revert-870bbd756864", "anchor_text": "TCR", "paragraph_index": 16}, {"url": "https://link.medium.com/cdlBfnncc1", "anchor_text": "product-market fit", "paragraph_index": 18}, {"url": "https://lethain.com/migrations/", "anchor_text": "Different tactics are appropriate for different obstacles", "paragraph_index": 25}, {"url": "https://slack.com/careers/location/all-locations/dept/engineering", "anchor_text": "We\u2019re hiring", "paragraph_index": 29}], "all_paragraphs": ["Most new things in technology turn out to be\u00a0fads:\u00a0patterns of talking and doing that come and go without leaving a permanent mark. Microkernels; EPIC architectures like IA-64; object request brokers; and 1990s\u2019-style neural nets are gone, and will not return. Sorry for the deep throwbacks; only time proves which things are fads, so for uncontroversial examples we have to reach pretty far back.", "While it is hard to imagine today \u2014 at their height \u2014 all of these defunct technologies were wildly popular, with charismatic, sincere, and smart advocates. They were supported by plausible first-principles arguments that showed why their chosen tech would inevitably triumph. The fads spawned movements, manifestos, conferences, and companies. To be clear, these fads are not to be confused with deliberate\u00a0frauds,\u00a0which are much more rare. The motivations behind these technologies were heartfelt. Things just turned out differently, despite all available appearances at the time.", "On the other hand, a crucial few new techniques are\u00a0revolutions: potent, enduring changes that confer long-term advantages to their adopters. Object-oriented programming, hardware virtualization, the world wide web, public cloud, CI/CD, and 2010s-style neural nets (reborn as deep learning) are now permanent parts of the world of computing that were once indistinguishable from fads. We are, already, surrounded by concrete technical successes that we did not know how to achieve before these things came along.", "Like all technology companies,\u00a0Slack wants to make sure we catch revolutions at the right time, while limiting the energy we spend chasing fads. What strategy can we follow to ensure this? This post outlines our approach to this problem, which we continue to refine and apply through our practice at Slack.", "We can\u2019t rely on individual leaders\u2019 intuitions to pick winners; both\u00a0precision and recall\u00a0will be too low. Instead we strive to actively\u00a0invest in exploring new things, knowing that most of these investments will return nothing. To bias our investment towards useful new things and away from fads,\u00a0we are ruthless in killing experiments early\u00a0that do not prove valuable. We hope to try a little bit of everything, accepting that this means dabbling with a lot of fads; and we hope to end up riding some waves all the way to shore because our experiences with them keep providing positive returns.", "This is enough philosophy to build a minimal, descriptive model of our adoption of new technology.", "This curve is a typical\u00a0sigmoid\u00a0describing technology adoption over time. The\u00a0S\u00a0shape comes from changes in the rate of adoption. At first, when only a few experimenters are playing around, we have no choice but to adopt it\u00a0slowly; later on, as it becomes clear what the benefits are, more hands pitch in to capture those benefits, and we\u00a0quickly\u00a0adopt the new technology into production use cases during the steeply upward-sloping section in the middle. As the majority of fruitful use cases get eaten up, fewer cases are left, and the ones that remain are the tough ones, so adoption\u00a0slows down\u00a0again towards the end of the cycle.", "We\u2019re not the first to observe that technology adoption follows this sigmoid pattern. Everett Rogers proposed this model in his \u201cdiffusion of innovation\u201d theory in 1962. Rogers wasn\u2019t describing Erlang or MongoDB; he was a rural sociologist observing patterns in the adoption of farming techniques. It turns out computing practice is not so different from other fields of human activity.", "To ground this abstract view in something more concrete, let\u2019s consider some of the technologies that have traversed the phases of Exploration, Expansion, and Migration at Slack.", "The\u00a0React library\u00a0has swept frontend development since its first stable release in 2015. Its utilization of the virtual DOM for rendering elements and its approach to unidirectional data flow made it a compelling technology for Slack\u2019s desktop UI.", "Server-side, we\u2019ve been\u00a0migrating from PHP to Hack since 2016. A key part of that migration has been a gradual introduction of\u00a0types\u00a0to our PHP code:", "Vitess\u00a0is a database clustering system for horizontal scaling of MySQL that we have\u00a0turned to as we evolve our data sharding strategy.", "In contrast to these technologies that have graduated through the phases of adoption,\u00a0our cross-platform C++ client library\u00a0did not move beyond Phase 2, and was eventually discontinued.", "In the end, the runway to a full migration never appeared.\u00a0We took what we learned from the LibSlack effort\u00a0and applied it to our mobile and desktop clients in various valuable ways. The code artifact did not achieve enduring adoption but the project informed how we build our clients and organize our engineering teams.", "Note that these phases are a descriptive model, not prescriptive.\u00a0We\u2019re not\u00a0forcing\u00a0adoption to follow this sigmoid curve; it just naturally must, no matter how we wish things were. There is no way for early exploration to proceed as quickly as midlife adoption, and there is no way for the final push to get to full adoption to go as quickly as the middle phase went. The three phases are not consequences of any milestones, processes, tools, or people at Slack. They are part of the fabric of technical change, and they would be there whether we noticed them or not.", "But now we\u2019ve noticed them, and we can use them to make our efforts more successful. The tactics and strategy for each phase are different.", "Phase 1 is frictionless to enter. When an engineer first starts messing around with a technology they\u2019re excited about,\u00a0no permission-granting process or ceremony is needed. It probably happens dozens of times a day at Slack: someone reads about or invents something new, and commences fiddling around with it. Perhaps they have read a blog post about\u00a0Elixir, or\u00a0Cassandra, or\u00a0WebAssembly, or\u00a0TCR. They download some software, build it, poke around a little, work through some introductory material, and maybe take a stab at applying it to their day job.", "Most exploration efforts sputter out here. This is good! Giving up here is one of the important ways we resist spending too much energy on fads. However, some things do make it out into our real workflows and codebases. Sometimes, an engineer can just apply this solution in place, because it solves a problem local to their team\u2019s work. Sometimes, though, the situation is even more exciting: this new widget is useful for an entire\u00a0class\u00a0of problems that other teams face. Our intrepid engineer now\u00a0believes they know\u00a0something consequential that the rest of us in Slack Engineering do not: that there is a better way for us to do things.\u00a0Once work starts to affect others\u2019 work, you\u2019ve entered Phase 2.", "Let\u2019s take a moment to pity the poor engineer entering Phase 2! For they are now trying to modify other engineers\u2019 behavior. This is going to involve communication, persuasion, and \u2014 if it is going at all right \u2014 substantial technical work. For most projects, Phase 2 is the most difficult, time-consuming, and discouraging phase. It is the \u201cproduct-market fit\u201d phase of the technology cycle, and many of the projects that enter it will not successfully complete it.", "At Slack, client teams are free to choose not to depend on your system,\u00a0with few exceptions. This may surprise you if you have a lot of experience at an \u201cinfrastructure-driven\u201d engineering company. At some companies, leaders pick winners and losers before the product-market fit negotiation at Phase 2 has reached its conclusion. The goal of having a winner selected before it has been widely deployed is to provide clarity (\u201cWhat does the future hold? Which system should I build on?\u201d) and to economize on the expensive period in Phase 2 where more than one way of doing things needs to be supported.", "While those are reasonable goals, it is not how Slack chooses to approach the adoption of new systems. We prioritize fad-resilience over speed of adoption. And so, we (intentionally) place the burden of getting other teams to adopt new technology mostly on the change agent. While this can be frustrating for the advocate of a new system, we know of no better substitute. Clearing this hurdle forces selection of Stuff that Works. If the new thing\u00a0really\u00a0is as wonderful as we hope it is, it should help the teams that depend on it get things done; this success can move them to adopt it and advocate it.", "Some of the work of Phase 2 is fundamentally more like product work than like what-you-might-think-is-engineering. You need to do\u00a0user research\u00a0to figure out what problems matter. You need to\u00a0communicate\u00a0the value of your solution relative to previous practices, in ways your users are prepared to hear. You need to\u00a0build\u00a0things that close the gap between current practice and the change you\u2019re making, to grease the skids for your busy and distracted clients.", "Successful execution in Phase 2 eventually leads to some\u00a0self-propelled adoption, where people you did not explicitly sell\u00a0on the new tech are freely choosing to use it. The end of Phase 2 is close at hand when the new system is a\u00a0de facto\u00a0standard, the default practice for new projects. It is unusual to\u00a0accidentally\u00a0achieve this kind of adoption.\u00a0It\u2019s really hard, and draws on skills that are not part of every engineer\u2019s professional experience.", "The self-propelled adoption phase eventually starts to taper off. We are left with a residue of holdouts: use cases that seem especially resistant to the new way of doing things. Some systems that have been quietly working in the background are especially unmotivated to change just because they are not being actively developed. In some cases we are discovering late in the game some ways in which the previous system really worked better. Finally, there are always a few stubborn users who are overly invested in their muscle memory of the old way.", "While we\u2019ve been talking about \u201cthe\u201d technology adoption curve, there is actually a fork in the road at Phase 3.\u00a0Even very successful projects might not migrate\u00a0every last\u00a0use case\u00a0to the new way of doing things. For instance, at Slack we have very widely adopted gRPC as an internal API technology. It is solidly in late Phase 3. However, we are unlikely to build a new version of memcached that uses gRPC; memcached\u2019s custom protocol works well, and is well-supported in the clients we care about. The existence of exceptions like this doesn\u2019t make gRPC adoption a failure.", "In other cases, the costs of having More Than One Way (cognitive burden on engineers; operational burden from running the Olde Systeme) are high enough that we\u00a0will\u00a0migrate everything to the new way. For such projects, we need a plan to tackle the hold-outs.\u00a0Different tactics are appropriate for different obstacles. The systems that just haven\u2019t changed in a long time might need the change agent to adopt them and start moving them into the future. If the holdouts are functionally motivated, by real capabilities the new system lacks, you may need to enhance the new system, or wrap it in code that emulates the old system\u2019s capabilities.", "In the occasional case of emotional attachment to the old system, person-to-person outreach is usually a lot more effective than public, high-stakes debate. And please be gentle; your beautiful, new system will be the Old Way some day, too \u2014 if it is successful enough to live that long.", "OK, that is a lot of description. What about prescriptions? What do we expect of one another as engineers and engineering leaders at Slack to smooth our progress?", "When in doubt, remember: you\u2019re accountable for your team\u2019s technical success, and your team\u2019s technical success is\u2013in the long run\u2013judged by the people using your stuff.", "Want to help us catch the next revolution and eliminate some fads along the way?\u00a0We\u2019re hiring."], "all_outgoing_urls": [{"url": "https://slack.engineering/", "anchor_text": ""}, {"url": "https://twitter.com/intent/tweet?text=%E2%80%9CHow%20Big%20Technical%20Changes%20Happen%20at%20Slack%E2%80%9D%20from%20%40SlackEng%20https%3A%2F%2Fslack.engineering%2Fhow-big-technical-changes-happen-at-slack%2F", "anchor_text": ""}, {"url": "https://www.facebook.com/sharer/sharer.php?u=https://slack.engineering/how-big-technical-changes-happen-at-slack/", "anchor_text": ""}, {"url": "https://www.linkedin.com/shareArticle?mini=true&url=https://slack.engineering/how-big-technical-changes-happen-at-slack/", "anchor_text": ""}, {"url": "https://towardsdatascience.com/beyond-accuracy-precision-and-recall-3da06bea9f6c", "anchor_text": "precision and recall"}, {"url": "https://en.wikipedia.org/wiki/Sigmoid_function", "anchor_text": "sigmoid"}, {"url": "https://books.google.ca/books?id=9U1K5LjUOwEC&redir_esc=y", "anchor_text": "diffusion of innovation"}, {"url": "https://reactjs.org/", "anchor_text": "React library"}, {"url": "https://slack.engineering/rebuilding-slacks-emoji-picker-in-react", "anchor_text": "rebuilding our emoji picker"}, {"url": "https://slack.engineering/rebuilding-slack-on-the-desktop", "anchor_text": "shipped a React-only version of Slack on desktop"}, {"url": "https://slack.engineering/taking-php-seriously", "anchor_text": "migrating from PHP to Hack since 2016"}, {"url": "https://docs.hhvm.com/hack/types/introduction", "anchor_text": "types"}, {"url": "https://martinfowler.com/bliki/DynamicTyping.html", "anchor_text": "a canonical static vs. dynamic typing debate"}, {"url": "https://vitess.io/", "anchor_text": "Vitess"}, {"url": "https://www.cncf.io/case-study/slack/", "anchor_text": "turned to as we evolve our data sharding strategy"}, {"url": "https://slack.engineering/libslack-the-c-library-at-the-foundation-of-our-client-application-architecture", "anchor_text": "our cross-platform C++ client library"}, {"url": "https://slack.engineering/client-consistency-at-slack-beyond-libslack", "anchor_text": "We took what we learned from the LibSlack effort"}, {"url": "https://elixir-lang.org/getting-started/introduction.html", "anchor_text": "Elixir"}, {"url": "http://cassandra.apache.org/", "anchor_text": "Cassandra"}, {"url": "https://webassembly.org/", "anchor_text": "WebAssembly"}, {"url": "https://medium.com/@kentbeck_7670/test-commit-revert-870bbd756864", "anchor_text": "TCR"}, {"url": "https://link.medium.com/cdlBfnncc1", "anchor_text": "product-market fit"}, {"url": "https://lethain.com/migrations/", "anchor_text": "Different tactics are appropriate for different obstacles"}, {"url": "https://slack.com/careers/location/all-locations/dept/engineering", "anchor_text": "We\u2019re hiring"}, {"url": "https://slack.engineering/tags/innovation", "anchor_text": "innovation"}, {"url": "https://slack.engineering/tags/migration", "anchor_text": "migration"}, {"url": "https://slack.engineering/tags/trends", "anchor_text": "trends"}, {"url": "https://slack.engineering/real-time-messaging/", "anchor_text": "Real-time Messaging"}, {"url": "https://slack.engineering/tracing-notifications/", "anchor_text": "Tracing Notifications"}, {"url": "https://slack.engineering/technology-lifecycle/", "anchor_text": "Technology Lifecycle"}, {"url": "https://slack.engineering/hakana-taking-hack-seriously/", "anchor_text": "Hakana: Taking Hack Seriously"}, {"url": "https://twitter.com/SlackEng", "anchor_text": "@SlackEng how can I stay up-to-date on what's happening over there? Follow us on Twitter"}, {"url": "https://slack.engineering/a-day-in-the-life-of-a-frontend-product-engineer-at-slack/", "anchor_text": "Previous post Previous post: A Day in the Life of a Frontend Product Engineer at Slack"}, {"url": "https://slack.engineering/deploys-at-slack/", "anchor_text": "Next post Next post: Deploys at Slack"}, {"url": "https://slack.engineering/technology-lifecycle/", "anchor_text": "Technology Lifecycle@Tricia Bogen"}, {"url": "https://slack.engineering/autotransform-efficient-codebase-modification/", "anchor_text": "Photo by Alex Knight on Unsplash AutoTransform: Efficient Codebase Modification@Nathan Rockenbach"}, {"url": "https://slack.com/", "anchor_text": ""}, {"url": "https://twitter.com/slackhq", "anchor_text": ""}, {"url": "https://github.com/slackhq", "anchor_text": ""}, {"url": "https://www.youtube.com/channel/UCY3YECgeBcLCzIrFLP4gblw", "anchor_text": ""}, {"url": "https://www.linkedin.com/company/tiny-spec-inc/", "anchor_text": ""}]}, "scrape_status": {"code": "1"}}