{"url": "https://towardsdatascience.com/all-about-pythonic-class-the-life-cycle-5d2deae1ad8d", "time": 1683015873.809702, "path": "towardsdatascience.com/all-about-pythonic-class-the-life-cycle-5d2deae1ad8d/", "webpage": {"metadata": {"title": "All about Pythonic Class: The Life Cycle\u00ae | by Farhad Naeem | Towards Data Science", "h1": "All about Pythonic Class: The Life Cycle\u00ae", "description": "In the previous chapter, we have shown How to write a basic class, What is the relation between class and object, and the differences between new-style and old-style class. We will start this chapter\u2026"}, "outgoing_paragraph_urls": [], "all_paragraphs": ["This is the second part of \u201cAll about Pythonic Class\u201d. Now, our \u201cPython Data Model\u201d series \u2014", "In the previous chapter, we have shown How to write a basic class, What is the relation between class and object, and the differences between new-style and old-style class. We will start this chapter from where we left the previous one-", "So what happens when we declare a class? How does the Python interpreter interpret it?", "Two special methods are called under the hood when we call a class to form an object.", "It is an intricate process that creates a class behind the scene. It will also need in-depth knowledge of the design of the Python interpreter and the implementation of the language at its core. For the sake of simplicity, we will describe the process from a high-level point of view and write hypothetical or pseudo-codes of the backend process.", "When we call a class to form an object, the interpreter calls type. It takes three parameters--type(classname, superclass, attribs) ortype(\"\", (), {})", "where the class name is the string representation of the declared class, the superclass is the tuple representation of class(es) from which our class will inherit properties and attributes is the dictionary representation of the class.__dict__.Let's declare a class normally", "Now we will write the same type of class using type metaclass", "Aha! we have just made a regular user-defined class using type metaclass!! What actually is going on here?When type is called, its __call__ method is executed that runs two more special methods--", "__new__(cls, [...) Special method __new__ is the very first method that is called when an object is created. Its first argument is the class itself following other arguments needed to form it. This function is rarely used and by default called by the interpreter during object creation.__init__(self, [...) The initializer special method initializes a class and gives the default attributes of an object. This method takes an object as the first parameter following other arguments for it. This is the most frequently used special method in the Python world.", "The following pseudo-code shows how the Python interpreter creates an object from a class. Remember we have omitted the low-level things done by the interpreter for the sake of a basic understanding. Have a look at the self-explanatory code instructions", "The Obj is behaving as we expected [1]. But, when we createdtmpVar by calling Bar.__new__ and trying to access obVar, it throws an error [2]. Thus, we need to initialize with the __init__ and after that, it will work nicely as the previous variable [3] .", "P.S.- The method with double underscores on both sides of his name is known as special methods or magic methods. The special method is an \u201cimplementation detail\u201d or low-level detail of CPython. Why do we call them magic methods? Because these methods add \u201cmagic\u201d to our class. We will have two separate chapters for magic methods.", "So far we have discussed almost every basic concept of a Python class. What we are going to discuss in this segment may be counted as a repetition of the previous segment, we are going to discuss more subtle details of a class.", "When we run a Python programme, it spawns objects either from the built-in or user-defined classes in runtime. Each object needs memory once it is created. Python does not need the object when it accomplishes its assigned task. It becomes a piece of unwanted information or garbage.", "On the other hand, the Python interpreter needs to free up memory periodically for further computation, space for new objects, programme efficiency, and memory security. When a piece of \u2018garbage object\u2019 is disposed it ceases to exist in the memory. The question is how long does a Python class exist and when does it cease to exist? The simplest answer is an object or class exists as long it", "When neither of the two criteria is met, an object or class ceases to exist. The answer is the simplest one but a lot of things go on behind the scene. We are going to put light on a few of them.", "The following class is designed to connect to a web server and print the status code, server info and then we will close the connection. We will \u2018pack\u2019 attributes into Response class from another namespace which will be a metaclass of type; as expected.", "__del__(self) Special method __del__ can be termed the terminator or destructor responsible for the termination of an object or class.__del__ is a finalizer that is called during the garbage collection process of an object. This process takes place at some point when all the references to an object have been deleted.", "In the above piece of code, we have omitted the low-level things done by the interpreter for the sake of a basic understanding. When we deleted the response object del resp the __del__ special method or the de-constructor is executed to wipe out the object from RAM.", "The method is useful in special cases that require extra cleanup upon deletion, e.g. sockets and file objects. However, keep in mind the fact that __del__ is not guaranteed whether it will be executed even if the target object is still alive when the interpreter exits. So, it is a good practice to close any file or connection manually or by using a wrapper.", "A class gives birth to an object. When an object ceases to exist in a namespace, hypothetically a class also needs not to exist in the space. A class can also be deleted like an ordinary object because a class itself is an object. The garbage collection process disposes of unnecessary objects for the sake of memory safety and efficient pieces of code.", "Python has adopted two garbage collection mechanisms in CPython*", "Between the two, the first one is used most often because the freedom of destroying an object in userspace might bring a disaster if implemented carelessly, e.g. any strong references to a destroyed object may become orphan/dangling ones and leak the memory.Reference counting is easy to implement but it cannot handle reference cycles which makes it more prone to a memory leak.", "A class gets a type and reference count by default when it is created. Each time when we create an object by calling it, the interpreter increases its reference count. The reference count of an object or class increases when it is", "When this count reaches zero, the class ceases to exist in the memory which can be treated as the \u2018death of a class\u2019. In other words, the reference count of an object increases when it is referenced anywhere and decreases whenever it is dereferenced. The high-level codes we write cannot affect this low-level implementation although it is possible to handle garbage collection by hand using generational garbage collection or the gc module. Observe the following codes", "A reference cycle occurs when one or more Python objects refer to each other. So, in these cases deleting an object merely using del only decreases its reference counts and makes it inaccessible to a programme. It actually remains in the memory.For example", "In the above example, we have created a reference cycle by assigning the object obj itself to its property obj.var. Only decreasing obj's reference count will not destroy it from the memory rather it needs generational garbage collection to be cleaned permanently. This implementation can be handled by the gc module in the high-level coding space.This is another way to 'kill a class'.", "From these two parts, we tried to show 6 important facts about the Pythonic class. It is expected that now we have at least some basic ideas about how a Python class works and gets cleaned up from the memory behind the scene.", "To cover up the Pythonic Data Model, we will have separate and more detailed articles on Magic Methods, Decorators, Metaprogramming, Pythonic inheritance, etc. A good understanding of the process enables a developer to utilize cent percent of the hidden power of Python and debugging complex issues when things get more Pythonic.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Enjoying simple thoughts in a simple world"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F5d2deae1ad8d&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fall-about-pythonic-class-the-life-cycle-5d2deae1ad8d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fall-about-pythonic-class-the-life-cycle-5d2deae1ad8d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fall-about-pythonic-class-the-life-cycle-5d2deae1ad8d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fall-about-pythonic-class-the-life-cycle-5d2deae1ad8d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----5d2deae1ad8d--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----5d2deae1ad8d--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://farhadnaeem.medium.com/?source=post_page-----5d2deae1ad8d--------------------------------", "anchor_text": ""}, {"url": "https://farhadnaeem.medium.com/?source=post_page-----5d2deae1ad8d--------------------------------", "anchor_text": "Farhad Naeem"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6afd139d1845&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fall-about-pythonic-class-the-life-cycle-5d2deae1ad8d&user=Farhad+Naeem&userId=6afd139d1845&source=post_page-6afd139d1845----5d2deae1ad8d---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5d2deae1ad8d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fall-about-pythonic-class-the-life-cycle-5d2deae1ad8d&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5d2deae1ad8d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fall-about-pythonic-class-the-life-cycle-5d2deae1ad8d&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.pxfuel.com/en/free-photo-ernyb", "anchor_text": "source"}, {"url": "https://towardsdatascience.com/python-data-model-part-1-objects-types-and-values-cb9316f57e8", "anchor_text": "Objects, Types, and Values; Python Data Model \u2014 Part 1"}, {"url": "https://farhadnaeem.medium.com/all-about-pythonic-class-the-birth-and-style-36002e28d035", "anchor_text": "All about Pythonic Class: The Birth and Style; Python Data Model \u2014 Part 2[a]"}, {"url": "https://docs.python.org/3/reference/datamodel.html", "anchor_text": "https://docs.python.org/3/reference/datamodel.html"}, {"url": "https://stackify.com/python-garbage-collection/", "anchor_text": "https://stackify.com/python-garbage-collection/"}, {"url": "https://medium.com/tag/python?source=post_page-----5d2deae1ad8d---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/class?source=post_page-----5d2deae1ad8d---------------class-----------------", "anchor_text": "Class"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5d2deae1ad8d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fall-about-pythonic-class-the-life-cycle-5d2deae1ad8d&user=Farhad+Naeem&userId=6afd139d1845&source=-----5d2deae1ad8d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5d2deae1ad8d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fall-about-pythonic-class-the-life-cycle-5d2deae1ad8d&user=Farhad+Naeem&userId=6afd139d1845&source=-----5d2deae1ad8d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5d2deae1ad8d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fall-about-pythonic-class-the-life-cycle-5d2deae1ad8d&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----5d2deae1ad8d--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F5d2deae1ad8d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fall-about-pythonic-class-the-life-cycle-5d2deae1ad8d&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----5d2deae1ad8d---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----5d2deae1ad8d--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----5d2deae1ad8d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----5d2deae1ad8d--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----5d2deae1ad8d--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----5d2deae1ad8d--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----5d2deae1ad8d--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----5d2deae1ad8d--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----5d2deae1ad8d--------------------------------", "anchor_text": ""}, {"url": "https://farhadnaeem.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://farhadnaeem.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Farhad Naeem"}, {"url": "https://farhadnaeem.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "106 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6afd139d1845&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fall-about-pythonic-class-the-life-cycle-5d2deae1ad8d&user=Farhad+Naeem&userId=6afd139d1845&source=post_page-6afd139d1845--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2F6afd139d1845%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fall-about-pythonic-class-the-life-cycle-5d2deae1ad8d&user=Farhad+Naeem&userId=6afd139d1845&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}