{"url": "https://towardsdatascience.com/soup-of-the-day-97d71e6c07ec", "time": 1682997431.246298, "path": "towardsdatascience.com/soup-of-the-day-97d71e6c07ec/", "webpage": {"metadata": {"title": "Soup of the Day. Webscraping With Beautiful Soup \u2014 A\u2026 | by Callum Ballard | Towards Data Science", "h1": "Soup of the Day", "description": "Though there are many thousands of lovely clean datasets available out there for a data scientist\u2019s delectation (mostly on Kaggle), you\u2019re always going to have those pesky hypotheses that stay out of\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.kaggle.com/", "anchor_text": "Kaggle", "paragraph_index": 0}, {"url": "https://en.wikipedia.org/wiki/HTML", "anchor_text": "HyperText Markup Language", "paragraph_index": 3}, {"url": "https://en.wikipedia.org/wiki/Cascading_Style_Sheets", "anchor_text": "Cascading Style Sheets", "paragraph_index": 3}, {"url": "https://2.python-requests.org/en/master/", "anchor_text": "Requests", "paragraph_index": 12}, {"url": "https://en.wikipedia.org/wiki/List_of_HTTP_status_codes", "anchor_text": "status code", "paragraph_index": 14}, {"url": "https://en.wikipedia.org/wiki/List_of_HTTP_status_codes", "anchor_text": "status codes", "paragraph_index": 15}, {"url": "https://www.crummy.com/software/BeautifulSoup/bs4/doc/", "anchor_text": "Beautiful Soup", "paragraph_index": 16}, {"url": "https://docs.python.org/3/library/re.html", "anchor_text": "regex method", "paragraph_index": 29}, {"url": "https://www.crummy.com/software/BeautifulSoup/bs4/doc/", "anchor_text": "Beautiful Soup documentation", "paragraph_index": 33}], "all_paragraphs": ["Though there are many thousands of lovely clean datasets available out there for a data scientist\u2019s delectation (mostly on Kaggle), you\u2019re always going to have those pesky hypotheses that stay out of their scope. Creating the dataset you do need from scratch is a potentially daunting prospect \u2014 even if you are able to see the data on a webpage, actually getting this into a format ready for analysis could involve a lot of manual work.", "Happily, webscraping automates the process of retrieving information from webpages, and by using the right tools, we can create reliable stores of this data, which we can then analyse.", "Note \u2014 this is the first in a series of posts. Here, we will cover the mechanics of webscraping Metacritic with the Beautiful Soup library, step by step. Subsequent blogs will dive into the analysis we conduct off the back of it.", "HyperText Markup Language (HTML) is the code that tells a web browser what information to display on the page. Importantly, it does not say much about how that information should be displayed (websites typically combine two sets of code, HTML and Cascading Style Sheets (CSS) to render a page, with CSS responsible for its look and feel).", "This is important, because it\u2019s the webpage\u2019s information that we are interested in, and we know that this information is going to be stored somewhere in the HTML code.", "Helpfully, most browsers provide an easy way to see which bit of the HTML code refers to specific elements on the page.", "The HTML code itself might look intimidating, but the structure is simpler than it seems. Content is typically contained within \u2018tags\u2019, tags being the things inside the <> brackets. For example, when declaring a paragraph of text, the HTML code might look like this:", "HTML has different types of tags that do different things \u2014 the most common ones (as you can see in the screenshots above) tend to be:", "Note \u2014 Semantic Elements are a bit of a catch-all category, and \u2018div\u2019 is a term you\u2019ll see a lot in many blocks of HTML. A typical use of these \u2018div\u2019 tags is to create \u2018Sub-Elements\u2019, which can contain lists, other headers, and further sub-elements.", "It\u2019s like the folder tree structure in your computer\u2019s file explorer \u2014 the root \u2018My Documents\u2019 folder might contain documents and files, but it might also contain other folders. These folders may contain further folders in turn.", "So if we want to isolate the \u2018release date\u2019 for a particular album on this Metacritic page, we can see that this is contained within several nested sub-elements. Ultimately, we can find the release date in the code itself.", "As we can see, many tags also have other attributes to further differentiate themselves. These are typically labelled as the element\u2019s \u2018id\u2019 or \u2018class\u2019. These will be crucial later, when we come to extract data from the HTML code.", "We can see the HTML in the browser \u2014 now we need to get it into a Jupyter Notebook (or equivalent), so that we can analyse it. To do this, we use the python \u2018Requests\u2019 library.", "The syntax for Requests is quite straight forward. Let\u2019s say we want to get the HTML from Metacritic that we looked at above. We can use the .get( ) method:", "There are a few other useful methods we can now call on the \u2018page\u2019 variable. For example, we can check the status code.", "If this returns \u2018200\u2019, then we\u2019re all good, though other status codes can indicate that we need to modify the initial \u2018request\u2019.", "Once we have the \u2018request\u2019 object (\u2018page\u2019), we can use the html.parser feature in the Beautiful Soup library to make sense of its contents.", "If we actually call the \u2018soup\u2019 variable, however, we see that things are still a bit messy (certainly far from beautiful).", "This is where the browser\u2019s inspector comes in handy. Since we probably have a good idea as to what information we want to get from the page, we are able to find the corresponding HTML in the inspector.", "So if I want to create a list of all the artist names on this page, I can \u2018inspect element\u2019 on the first such name, and see how the information is stored in the HTML.", "We can see that the artist name \u2018A Camp\u2019, is stored in an \u2018ordered list\u2019 (denoted by <li> tags), with the class \u201cstat product_artist\u201d. Given the structure of the site, we can guess that all the artist names are going to be stored in the same way (though we can of course check this by inspecting elements, as we did with \u2018A Camp\u2019).", "We use Beautiful Soup\u2019s .findAll( ) method to find all instances of ordered lists, with the class \u201cstat product_artist\u201d, specifying these two characteristics as separate arguments.", "That this gives us an object that is of type \u2018bs4.element.ResultSet\u2019. Looking at this object more closely, we can see that this looks a little bit like a python list.", "In particular, we can index this ResultSet object to isolate the different artist names (we can use the \u2018len\u2019 function to check how many we have, in this case 99).", "Note that these elements in the \u2018bs4.element.ResultSet\u2019 object, are themselves objects with type \u2018bs4.element.tag\u2019.", "This means that they come with a some new methods, which can help us extract the information that we need.", "We should note at this point \u2014 this was not the only way to get at the artist name information. We could have also gone a layer deeper in the HTML, and tried soup.findAll(\u2018span\u2019, class_= \u201cdata\u201d). However, this method adds a layer of complexity \u2014 it turns out that there are three different types of information about each album stored using such tags; artist name, release date, and metascore. This is manageable, but the approach described will probably turn out to be more straight forward.", "Getting at information stored in the tags (and ensuring that it\u2019s returned to us in the right format) is not always the most straight forward task, and can require a bit of trial and error. There are a few different methods I tend to go to first.", ".get_text( ) tends to be the most reliable. Sometimes we will need to make edits to the strings that it outputs to get them into the desired form. We should therefore try the method over different elements to ensure that we can make the same edit across all of them.", "We can see here that we need to get rid of the substrings either side of the artist name. We could use a regex method for this, however, we can be lazy and chain a couple of .replace( ) methods instead:", "We can now iterate through the different elements in artistHTML, extract the artist names, and put them into a list. We can either do this using a loop:", "\u2026 or a list comprehension, which I find to be much tidier:", "These lists can then be stored as they are, or one can, for example, put them into a Pandas dataframe.", "As mentioned previously, there are many, many different methods for extracting data from the soup. As with most things \u2018coding\u2019, there is rarely one right way to do something \u2014 the Beautiful Soup documentation is a good place to see the different element methods in action.", "Once we have extracted all the data we want from a webpage. The next task, depending on the structure of the site, is to extract data from a new page.", "If we wanted all of the artist names from Metacritic, for example, we would need to go to page 2, then page 3, and so on (and that\u2019s just for the artists beginning with \u2018A\u2019!). Obviously, we would want such a process to be automated with code. There are a couple of ways of going about this.", "The URL we just scraped was:", "The if we follow the link to page 2, then to page 3, we see the URLs are:", "Clearly, we have a pattern \u2014 the number at the end of the URL is the page number minus one. This means that we can quite simply loop through the URLs, scraping each in turn.", "First, we need to establish how many pages there are for a given letter (there are 11 pages for artists beginning with \u2018A\u2019, but clearly there\u2019ll be more or less for artists beginning with other letters).", "Given that this number is displayed on the page itself, we can find it in the HTML. We can use the process described in steps 2, 3, and 4 to isolate this number, and assign it to a variable in python (let\u2019s call it \u2018pages\u2019).", "2. Finding the next URL in the HTML itself", "Second guessing the URL is sufficient on sites that are nicely organised (like Metacritic), however for other less tidy sites this approach may not work. However, given that we have a \u2018next\u2019 page button on the page, we can find it, and its corresponding hyperlink, in the HTML.", "Given we\u2019re after a hyperlink, we should be on the lookout for <a> tags. We can use the soup.findAll( ) method as in step 3. Note, even if there is only one such element, the findAll method is still a list-like object, which we need to index.", "Given that the URL is in the tag itself, it is unlikely that our trusty .get_text( ) method is going to work here. Instead, we can look at at the element\u2019s attributes, using the \u2018.attrs\u2019 property.", "Note how the attrs object looks a lot like a dictionary. We can hence look up the desired value by using the \u2018href\u2019 key. We can then use an f string to output the full URL.", "This URL can be passed into requests (see step 1), and the resulting page can be scraped. By including these lines of code as part of a loop, we can get our scraping code to go automatically through each page in turn.", "Webscraping is an incredibly powerful technique, and a great string to any data scientist\u2019s bow. The above guide is written to be a starting point, though there are many other complimentary techniques (and, indeed, other scraping libraries other than Beautiful Soup) out there.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Analysis Lead at Cleo AI, McKinsey & LSE Alumni, previously published in The Economist. Typically found listening to Japanese Math Rock..."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F97d71e6c07ec&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsoup-of-the-day-97d71e6c07ec&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsoup-of-the-day-97d71e6c07ec&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsoup-of-the-day-97d71e6c07ec&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsoup-of-the-day-97d71e6c07ec&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----97d71e6c07ec--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----97d71e6c07ec--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@callumballard?source=post_page-----97d71e6c07ec--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@callumballard?source=post_page-----97d71e6c07ec--------------------------------", "anchor_text": "Callum Ballard"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3bcc53c95269&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsoup-of-the-day-97d71e6c07ec&user=Callum+Ballard&userId=3bcc53c95269&source=post_page-3bcc53c95269----97d71e6c07ec---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F97d71e6c07ec&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsoup-of-the-day-97d71e6c07ec&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F97d71e6c07ec&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsoup-of-the-day-97d71e6c07ec&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.kaggle.com/", "anchor_text": "Kaggle"}, {"url": "https://en.wikipedia.org/wiki/HTML", "anchor_text": "HyperText Markup Language"}, {"url": "https://en.wikipedia.org/wiki/Cascading_Style_Sheets", "anchor_text": "Cascading Style Sheets"}, {"url": "https://www.w3schools.com/tags/tag_span.asp", "anchor_text": "identify substrings within paragraphs"}, {"url": "https://2.python-requests.org/en/master/", "anchor_text": "Requests"}, {"url": "https://www.metacritic.com/browse/albums/artist/a?num_items=100", "anchor_text": "https://www.metacritic.com/browse/albums/artist/a?num_items=100"}, {"url": "https://en.wikipedia.org/wiki/List_of_HTTP_status_codes", "anchor_text": "status code"}, {"url": "https://en.wikipedia.org/wiki/List_of_HTTP_status_codes", "anchor_text": "status codes"}, {"url": "https://www.crummy.com/software/BeautifulSoup/bs4/doc/", "anchor_text": "Beautiful Soup"}, {"url": "https://docs.python.org/3/library/re.html", "anchor_text": "regex method"}, {"url": "https://www.crummy.com/software/BeautifulSoup/bs4/doc/", "anchor_text": "Beautiful Soup documentation"}, {"url": "https://www.metacritic.com/browse/albums/artist/a?num_items=100", "anchor_text": "https://www.metacritic.com/browse/albums/artist/a?num_items=100"}, {"url": "https://www.metacritic.com/browse/albums/artist/a?num_items=100&page=1", "anchor_text": "&page=0"}, {"url": "https://www.metacritic.com/browse/albums/artist/a?num_items=100&page=1", "anchor_text": "https://www.metacritic.com/browse/albums/artist/a?num_items=100&page=1"}, {"url": "https://www.metacritic.com/browse/albums/artist/a?num_items=100&page=2", "anchor_text": "https://www.metacritic.com/browse/albums/artist/a?num_items=100&page=2"}, {"url": "https://medium.com/tag/web-scraping?source=post_page-----97d71e6c07ec---------------web_scraping-----------------", "anchor_text": "Web Scraping"}, {"url": "https://medium.com/tag/python?source=post_page-----97d71e6c07ec---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/data-science?source=post_page-----97d71e6c07ec---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/html?source=post_page-----97d71e6c07ec---------------html-----------------", "anchor_text": "HTML"}, {"url": "https://medium.com/tag/music-by-numbers?source=post_page-----97d71e6c07ec---------------music_by_numbers-----------------", "anchor_text": "Music By Numbers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F97d71e6c07ec&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsoup-of-the-day-97d71e6c07ec&user=Callum+Ballard&userId=3bcc53c95269&source=-----97d71e6c07ec---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F97d71e6c07ec&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsoup-of-the-day-97d71e6c07ec&user=Callum+Ballard&userId=3bcc53c95269&source=-----97d71e6c07ec---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F97d71e6c07ec&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsoup-of-the-day-97d71e6c07ec&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----97d71e6c07ec--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F97d71e6c07ec&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsoup-of-the-day-97d71e6c07ec&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----97d71e6c07ec---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----97d71e6c07ec--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----97d71e6c07ec--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----97d71e6c07ec--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----97d71e6c07ec--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----97d71e6c07ec--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----97d71e6c07ec--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----97d71e6c07ec--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----97d71e6c07ec--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@callumballard?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@callumballard?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Callum Ballard"}, {"url": "https://medium.com/@callumballard/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "1K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3bcc53c95269&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsoup-of-the-day-97d71e6c07ec&user=Callum+Ballard&userId=3bcc53c95269&source=post_page-3bcc53c95269--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F107151aaecd0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsoup-of-the-day-97d71e6c07ec&newsletterV3=3bcc53c95269&newsletterV3Id=107151aaecd0&user=Callum+Ballard&userId=3bcc53c95269&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}