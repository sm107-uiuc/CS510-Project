{"url": "https://towardsdatascience.com/formula-one-extracting-and-analysing-historical-results-19c950cda1d1", "time": 1683011137.5261939, "path": "towardsdatascience.com/formula-one-extracting-and-analysing-historical-results-19c950cda1d1/", "webpage": {"metadata": {"title": "Formula One: Extracting and analysing historical results | by Ciar\u00e1n Cooney | Towards Data Science", "h1": "Formula One: Extracting and analysing historical results", "description": "Sometimes as a data scientist, you won\u2019t have the data you require at your fingertips, or there is no existing pipeline feeding you the data you need. At other times, you might simply be interested\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.formula1.com/", "anchor_text": "formula 1 website", "paragraph_index": 2}, {"url": "https://www.formula1.com/en/results.html/1990/races.html", "anchor_text": "here", "paragraph_index": 7}, {"url": "https://en.wikipedia.org/wiki/1990_Formula_One_World_Championship", "anchor_text": "wiki", "paragraph_index": 18}, {"url": "https://github.com/cfcooney/medium_posts", "anchor_text": "here", "paragraph_index": 26}, {"url": "http://linkedin.com/in/ciaran-cooney-42b031117/", "anchor_text": "linkedin.com/in/ciaran-cooney-42b031117/", "paragraph_index": 28}], "all_paragraphs": ["Sometimes as a data scientist, you won\u2019t have the data you require at your fingertips, or there is no existing pipeline feeding you the data you need. At other times, you might simply be interested in exploring an area that doesn\u2019t have a freshly scrubbed dataset available. Fortunately, the internet has an intergalactic ocean of data (in case you didn\u2019t already know) on virtually any subject you could wish to analyse, and Python has all the tools you need to scrape and format that data for your chosen project.", "For me, the subject I\u2019m going to explore here, and in some future posts, is historical Formula One results. For the uninitiated, F1 is the elite motorsport category in the world in which legends like Aryton Senna and Michael Schumacher wrestled their 200mph steeds in wheel-to-wheel combat!", "Luckily for me, the official formula 1 website contains archived data from F1 championships, beginning in 1950, up to the present day. Races results, qualifying times, championship positions and many other results are there in the archive (see below) and it is easy to navigate the website to find any information you\u2019re interested in.", "Before I get you revved up too high on all this F1 stuff, let\u2019s use Python to extract some information from the archive and display it with Pandas.", "Beautiful Soup is a great package for parsing the HTML data making up a webage into a more readable and useable format. I used Beautiful Soup, urllib and Pandas to scrape data from the F1 archive and present it in a DataFrame. Some of the historical data is a little sparse if we go further back in time circa 1950, so for the moment I am going to begin in 1990 \u2014that is, with modern era F1 and comprehensive data on results.", "Starting with something simple, I decided to scrape the overall championship placings from 1990 and plot the results. First, I used urllib.request.urlopen() to open the webpage containing the 1990 driver\u2019s championship results (you can navigate to the relevant webpage and copy the link). Then I used the find_all() method with the \u2018table\u2019 argument to search for tables contained in the webpage (here there is only one). Finally, I used the Pandas method read_html() to transform the data into a DataFrame. This is a really useful method for anyone scraping data from a webpage for subsequent analysis as it makes it simple to begin working with Pandas functions immediately.", "Okay, so I successfully extracted some data from a website, and although we can see that Aryton Senna beat Alain Prost to the 1990 F1 world title, there is nothing terribly interesting here!", "Rather than taking the final championship standings as above, I thought it might be more interesting to extract results from each individual race and build my own championship table showing all results and then plot the drivers\u2019 progress over the year. Before doing this I wanted to see how data for each race was stored on the webpage, so I navigated to the 1990s race results page here.", "You can see from the screenshot above that the first race of 1990 was in the USA, and I used this race to view the race results format, using similar code to the previous example.", "The resulting DataFrame contains some useful columns, some less useful columns and also some unreadable columns. For the purposes of constructing my own championship table, I only really required \u2018Driver\u2019, \u2018Car\u2019, \u2018No\u2019 and \u2018PTS\u2019 columns for the moment. Rather than manually clicking through webpages to extract data or find links to all the race results, it is much better to automate this process using a web crawler.", "To do this I had to implement a search through all links in the 1990 race results webpage (the page from the screenshot above) and extract only those I wanted to retain, based on certain conditions. I wanted to apply some conditions to the list of race urls because I didn\u2019t want unrelated information or duplicate links which are often contained in webpages. To figure out which conditions to use, I looked through the source file for the webpage (ctrl + u) and found that each race result link contained the year and the string \u2018race-result\u2019 \u2014 red arrows point towards these below. This would allow me to iteratively search for links and only retain those that matched these conditions.", "To extract all race results, I created a function which takes the relevant year as an argument and returns a list of urls. Urls are added to the list when they meet the conditions (\u20181990\u2019 and \u2018race-result\u2019) and are not already contained in the list. Note: \u2018a\u2019 tags \u2014 as in soup.find_all(\u2018a\u2019) \u2014 are links, and tell the browser to render a link to another web page.", "That returned a list of urls, each corresponding to a single set of race results. I was then able to use this list to iteratively load each race result into a DataFrame and combine all the season\u2019s results into a single DataFrame containing all classified drivers and all points scored.", "On the first iteration, after loading race results into a DataFrame, I created a new DataFrame for storing results for the entire season, containing driver and car numbers for those classified in the first race (season_results_df = pd.DataFrame(df[[\u2018Driver\u2019,\u2019Car\u2019]], columns=[\u2018Driver\u2019,\u2019Car\u2019], index=df.index)). For each subsequent iteration, I added new drivers to the DataFrame if they have not previously been classified (lines 25\u201326, below). Points scored by each driver are then extracted from each race and added to the season_results_df DataFrame (lines 28\u201330, below). Finally, I formatted the DataFrame by sorting by driver number (\u2018No\u2019), filling any NAN values with zeros and reformatting the car manufacturers\u2019 names to a three-letter version by applying lambda and map functions.", "As you can see, this returned a DataFrame containing the points scored by each driver at each race. Note that the DataFrame is currently sorted according to the driver numbers (Prost as reigning world champion was number 1). I could have added a \u2018total\u2019 columns and summed each driver\u2019s points for the entire season but that would have provided me with much the same information as I had in the beginning.", "Instead, I decided to create a DataFrame tracking each driver\u2019s cumulative total over the course of the season using the cumsum() method available in Pandas. I also rearranged the DataFrame to show the final championship positions from Senna down. One of the reasons for plotting my own championship table with cumulative results was to make it easy to see if rivalries fluctuated throughout the season. For the purpose of tidying up the figure legend, I transformed the driver names to the first 3 letters of their last name only.", "Now I can see the accumulation of points over the season and results from the final race of the year in Australia indicate the final championship standings. However, it is not easy to get a general sense of how the season progressed from looking at the DataFrame, so I plotted the data as well.", "Now, you can see without having to look too hard that in 1990 there were only ever really two drivers in contention for the title (Senna and Prost) and that Prost did actually get in front of Senna around the midpoint of the season before the lead was stretched again. It is also clear from looking at this that the total points scored is dominated by a relatively small number of drivers \u2014 out of 36 drivers, only 9 scored more than 10 points. Another thing I was able to notice from looking at the cumulative graph was the form of Jean Alesi (gold). He started the season in great form with 13 points from the first 4 races but then completely flatlined for the remainder of the season.", "You might have noticed that the final scores differed for some of the drivers in comparison with the final championship standings I plotted above. This wasn\u2019t something I had anticipated so I had to do a bit of digging around to find out what was going on. It turns out that F1 1990 employed a \u2018best 11\u2019 rule that saw championship standings based on the accumulation of drivers\u2019 best 11 results from the 16 races (wiki). Due to this I decided to look at the data using this formulation and created the function below to calculate cumulative scores based on the best 11.", "The best_11_cumsum() function simply computes the cumulative scores for the first 11 races. From the 12th race onwards, it checks whether the points scored at that race were greater than the minimum value from the previous best 11 scores. If this evaluated to true, the previous minimum is removed, the new point score added and a revised cumulative score calculated.", "You can see now that the points scores match the final championship standings above and from the plot below that the overall effect of the \u2018best 11\u2019 scoring system was minimal. One of its only real effects was that it reduced Nelson Piquet\u2019s final score by one point, this taking him from outright third into a tie with Gerhard Berger.", "Form is ephemeral but it can nevertheless be analysed. I wanted to look at the fluctuations in performances across the season, particularly that of Senna and Prost as they fought for the championship. Plotting a rolling average is a rudimentary way of tracking data points over time and I decided to use a 3 race rolling average to see how the drivers\u2019 form differed.", "This plot is a little noisier at first glance but it does show that there were some fairly substantial shifts in momentum between the two title contenders. You can see that the point at which Prost\u2019s form peaked, Senna\u2019s reached its nadir and vice-versa. At the point at which Prost\u2019s form peaked and he subsequently took over the championship lead, it must have appeared that he was on an inexorable roll. That, of course, didn\u2019t last and Prost\u2019s demise coincided with a clear resurgence in Senna\u2019s form, finally sealing the title.", "You may have noticed from the DataFrames and plots that grand prix winners received 9 points in 1990. When I began watching F1 later in the \u201990s, driver\u2019s were awarded 10 for the win, and now it is 25 (albeit with an overhauled points structure \u2014 I guess this is sort of my domain knowledge). I\u2019ve often wondered whether these points differences actually change who comes out on top in the championship fight. I did a quick test of this for 1990 with a simple if statement: if pts ==9: pts = 10. Anyway, it wasn\u2019t an issue that year as Senna would have gained 6 points and Prost 5, and everything would have remained the same.", "What I have shown here is a fairly basic intro to web scraping and some exploratory data analysis over a single F1 season, but there is much more that can be done. I could look at how the form of drivers and teams varies over the course of seasons and even decades. I could attempt to wrangle some information out of qualifying times to make some assertions about who were the fastest drivers in different eras. I can map the different points systems onto different seasons to see how they actually affect final outcomes and I could perhaps look at longer term effects such as how competitive the series has been during different epochs. I could even look at building a predictive machine learning model that could perhaps use qualifying times and previous race results to make forward predictions about race results.", "You might even like to have a go at some of these things yourself.", "All the code I used for this post is available in the form of a Jupyter Notebook here.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "PhD in brain-computer interfaces | data science, machine learning, linguistics @ AflacNI| bikes and books | LinkedIn: linkedin.com/in/ciaran-cooney-42b031117/"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F19c950cda1d1&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fformula-one-extracting-and-analysing-historical-results-19c950cda1d1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fformula-one-extracting-and-analysing-historical-results-19c950cda1d1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fformula-one-extracting-and-analysing-historical-results-19c950cda1d1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fformula-one-extracting-and-analysing-historical-results-19c950cda1d1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----19c950cda1d1--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----19c950cda1d1--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://ciaranfcooney.medium.com/?source=post_page-----19c950cda1d1--------------------------------", "anchor_text": ""}, {"url": "https://ciaranfcooney.medium.com/?source=post_page-----19c950cda1d1--------------------------------", "anchor_text": "Ciar\u00e1n Cooney"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc6421cc0e5d6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fformula-one-extracting-and-analysing-historical-results-19c950cda1d1&user=Ciar%C3%A1n+Cooney&userId=c6421cc0e5d6&source=post_page-c6421cc0e5d6----19c950cda1d1---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F19c950cda1d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fformula-one-extracting-and-analysing-historical-results-19c950cda1d1&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F19c950cda1d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fformula-one-extracting-and-analysing-historical-results-19c950cda1d1&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.formula1.com/", "anchor_text": "formula 1 website"}, {"url": "https://www.formula1.com/en/results.html/1990/races.html", "anchor_text": "here"}, {"url": "https://en.wikipedia.org/wiki/1990_Formula_One_World_Championship", "anchor_text": "wiki"}, {"url": "https://github.com/cfcooney/medium_posts", "anchor_text": "here"}, {"url": "https://medium.com/tag/python?source=post_page-----19c950cda1d1---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/data-science?source=post_page-----19c950cda1d1---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/web-scraping?source=post_page-----19c950cda1d1---------------web_scraping-----------------", "anchor_text": "Web Scraping"}, {"url": "https://medium.com/tag/formula-1?source=post_page-----19c950cda1d1---------------formula_1-----------------", "anchor_text": "Formula 1"}, {"url": "https://medium.com/tag/beautifulsoup?source=post_page-----19c950cda1d1---------------beautifulsoup-----------------", "anchor_text": "Beautifulsoup"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F19c950cda1d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fformula-one-extracting-and-analysing-historical-results-19c950cda1d1&user=Ciar%C3%A1n+Cooney&userId=c6421cc0e5d6&source=-----19c950cda1d1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F19c950cda1d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fformula-one-extracting-and-analysing-historical-results-19c950cda1d1&user=Ciar%C3%A1n+Cooney&userId=c6421cc0e5d6&source=-----19c950cda1d1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F19c950cda1d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fformula-one-extracting-and-analysing-historical-results-19c950cda1d1&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----19c950cda1d1--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F19c950cda1d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fformula-one-extracting-and-analysing-historical-results-19c950cda1d1&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----19c950cda1d1---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----19c950cda1d1--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----19c950cda1d1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----19c950cda1d1--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----19c950cda1d1--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----19c950cda1d1--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----19c950cda1d1--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----19c950cda1d1--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----19c950cda1d1--------------------------------", "anchor_text": ""}, {"url": "https://ciaranfcooney.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://ciaranfcooney.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Ciar\u00e1n Cooney"}, {"url": "https://ciaranfcooney.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "44 Followers"}, {"url": "http://linkedin.com/in/ciaran-cooney-42b031117/", "anchor_text": "linkedin.com/in/ciaran-cooney-42b031117/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc6421cc0e5d6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fformula-one-extracting-and-analysing-historical-results-19c950cda1d1&user=Ciar%C3%A1n+Cooney&userId=c6421cc0e5d6&source=post_page-c6421cc0e5d6--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F25b2f20393ab&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fformula-one-extracting-and-analysing-historical-results-19c950cda1d1&newsletterV3=c6421cc0e5d6&newsletterV3Id=25b2f20393ab&user=Ciar%C3%A1n+Cooney&userId=c6421cc0e5d6&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}