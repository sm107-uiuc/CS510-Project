{"url": "https://towardsdatascience.com/building-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae", "time": 1683006349.9241862, "path": "towardsdatascience.com/building-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae/", "webpage": {"metadata": {"title": "Building your own object detector \u2014 PyTorch vs TensorFlow and how to even get started? | by Maximilian Beckers | Towards Data Science", "h1": "Building your own object detector \u2014 PyTorch vs TensorFlow and how to even get started?", "description": "Short \"how-to\" article on training your own object detection algorithms based on pre-trained networks with TensorFlow vs. PyTorch (transfer learning)."}, "outgoing_paragraph_urls": [{"url": "https://www.coursera.org/learn/convolutional-neural-networks?specialization=deep-learning#syllabus", "anchor_text": "Convolutional Neural Nets", "paragraph_index": 5}, {"url": "https://github.com/experiencor/raccoon_dataset", "anchor_text": "https://github.com/experiencor/raccoon_dataset", "paragraph_index": 5}, {"url": "https://github.com/tensorflow/models/tree/master/research/object_detection", "anchor_text": "TensorFlow\u2019s object detection API", "paragraph_index": 6}, {"url": "https://pytorch.org/docs/stable/torchvision/models.html#object-detection-instance-segmentation-and-person-keypoint-detection", "anchor_text": "torchvision", "paragraph_index": 6}, {"url": "http://colab.research.google.com", "anchor_text": "Google Colab", "paragraph_index": 7}, {"url": "https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md", "anchor_text": "installation guide", "paragraph_index": 14}, {"url": "https://github.com/tensorflow/models/blob/d4eedbb9a7ceccfbcf08ec843abcc38d7f7dc4d7/research/object_detection/g3doc/detection_model_zoo.md", "anchor_text": "detection model zoo", "paragraph_index": 24}, {"url": "https://medium.com/@smallfishbigsea/faster-r-cnn-explained-864d4fb7e3f8", "anchor_text": "this one", "paragraph_index": 24}, {"url": "https://medium.com/u/8b44cbadef3a?source=post_page-----1d314691d4ae--------------------------------", "anchor_text": "Hao Gao", "paragraph_index": 24}, {"url": "https://www.tensorflow.org/versions/r1.15/api_docs/python/tf/estimator/Estimator", "anchor_text": "estimator API", "paragraph_index": 28}, {"url": "https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/running_locally.md", "anchor_text": "command-line job", "paragraph_index": 38}, {"url": "https://www.tensorflow.org/versions/r1.15/api_docs/python/tf/estimator/Estimator", "anchor_text": "tf\u2019s estimator API", "paragraph_index": 38}, {"url": "https://www.tensorflow.org/tensorboard", "anchor_text": "tensorboard", "paragraph_index": 38}, {"url": "http://cocodataset.org/#detection-eval", "anchor_text": "evaluation metrics", "paragraph_index": 45}, {"url": "https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/exporting_models.md", "anchor_text": "export", "paragraph_index": 48}, {"url": "https://github.com/tensorflow/models/blob/master/research/object_detection/object_detection_tutorial.ipynb", "anchor_text": "notebook", "paragraph_index": 52}, {"url": "https://github.com/tensorflow/models/blob/guptapriya-patch-1/research/object_detection/object_detection_tutorial.ipynb", "anchor_text": "here", "paragraph_index": 57}, {"url": "https://pytorch.org/docs/stable/torchvision/index.html", "anchor_text": "torchvision", "paragraph_index": 58}, {"url": "https://pytorch.org/tutorials/intermediate/torchvision_tutorial.html", "anchor_text": "tutorial", "paragraph_index": 58}, {"url": "https://pytorch.org/docs/stable/torchvision/models.html#object-detection-instance-segmentation-and-person-keypoint-detection", "anchor_text": "website", "paragraph_index": 66}, {"url": "https://arxiv.org/abs/1506.01497", "anchor_text": "Faster R-CNN ResNet-50 FPN", "paragraph_index": 66}, {"url": "https://arxiv.org/abs/1703.06870", "anchor_text": "Mask R-CNN ResNet-50 FPN", "paragraph_index": 66}], "all_paragraphs": ["Having experienced some of the difficulties and headaches of implementing AI systems for object detection, I wanted to share some of the knowledge I gained on how to get started. The first step is always the hardest which is why this very practical approach is designed to ease people into the world of TensorFlow\u2019s as well as PyTorch\u2019s object detection frameworks.", "As I already was an experienced data scientist and had developed a few productive machine learning software components in the past years, I thought it should be a fairly easy job to get online, find a pre-trained CNN and train it further on an unseen data set to enable it to detect some previously unknown objects. Up until about a a year ago I had mostly worked with tree-based models, a lot of scikit-learn as well xgboost and of course tons and tons of pandas. As with many AI tasks, my first approach with this one turned out to be a classic version of a: \u201cNot so fast!\u201c There are a few stepping stones on the way that you have to know of, that however not many articles and blogs seem to mention. After having spent many hours on this topic and having read a lot of TensorFlow source code I know the answers to questions like:", "\u201cWhy the heck is my example code from the official GitHub repos not working?\u201d", "So I thought why not share my experience juggling with these tools with others and describe how I went about solving the issues I faced.", "So simply said, my goal was to develop my own object detector \u2014 a neural network that can classify and detect objects in an image, not just an off-the-shelf object detection algorithm, but one that would specifically be good at detecting images from my own data set \u2014 meaning I would have to do transfer learning.", "First of all, I went online, and freshened up my knowledge on how some of these algorithms work mathematically (I can really recommend Andrew Ng\u2019s deeplearning.ai course on Convolutional Neural Nets on coursera. It has a full week dedicated to Object Detection that gets you up and running on the key concepts and nicely describes the math behind everything). So with the theory in mind, I had a look at some of the open-source data sets I could use for my task and stumbled across the following Raccoon data set by experiencor on GitHub https://github.com/experiencor/raccoon_dataset that I then decided to use. It already has annotations as well as images stored away neatly in respective folders and only a single class (raccoon) to detect and therefore makes a nice starting point.", "That being done, I had a look at two widely known deep learning frameworks, that let you use pre-trained networks for transfer learning (further training these networks to tailor them to your specific data set), TensorFlow\u2019s object detection API as well as PyTorch\u2019s torchvision package. And one thing I can say right away: I was able to complete my work in PyTorch in about half a day whereas figuring everything I wanted out in TensorFlow took me a few days! The fact that the tf object detection API was built on TensorFlow 1.x and we now already have version 2.x gave me so many compatibility problems that made it practically impossible to get stuff done without extensively going through their source code as some of the examples on their repo were based on 2.x whereas the core training code was still based on 1.x.", "I did my coding on Google Colab since they offer you a neat notebook experience and access to free CPU and GPU on their cloud as well as free storage in the form of google drive, that can easily be mounted to your Colab space.", "Getting the data was rather easy as I just had to navigate into a different folder (in my mounted google drive storage) and run", "Inspecting the data then works easily like such:", "When it comes to the labels for this image, we have to look inside the annotations folder. In case of object detection, a class for each object (in our case just the one for raccoon) and 4 coordinates per object that represent the bounding box make up the label. To have a quick look you can simply download the raccoon-1.xml file to your laptop and open it up with an editor (I used Atom). You then see the following:", "which tells you that this annotation file corresponds with the raccoon-1.jpg file, the class of the object is \u201craccoon\u201d and the bounding box edges are represented by xmin, xmax, ymin and ymax. A very natural reaction would be to first check whether this is correct by simply drawing the box into the image.", "So we don\u2019t have to go through every file in the folder and collect the correct labels on each image there\u2019s already a csv file containing all this info. Having a quick look at it can be done like this:", "This is the starting point for both the TensorFlow as well as the PyTorch libraries and also where things are starting to differ between the two.", "Starting with TensorFlow object detection, is basically supposed to work like this: You clone their repo and install the API according to their installation guide. In practice what you have to do with Google Colab is in some parts easier and in some harder:", "2. COCO API installation \u2014 is already preinstalled and can be checked with", "4. Navigate to the models/research folder", "6. Now to test your installation simply run:", "7. Super important: every bash command you do in Colab is like starting a new terminal session so it is very important that, every time you use the CLI for tf\u2019s object detection, you MUST include", "at the top of your cell!", "Since every interaction with the API is in command line fashion (to train a model you call something like):", "and I wanted to look under the hood of this CLI (plus a notebook environment isn\u2019t really built for command-line executions) I added one key thing into my installation on Colab:", "8. Enable the python kernel to find all imports made in the model_main.py file (called in the CLI above).", "9. Make sure you have numpy==1.17 installed, otherwise the evaluation scripts won\u2019t work.", "Having installed the necessary software and downloaded the training data we can finally think about AI. Which convolutional neural network architecture can we use? Which data set is it trained on? In TensorFlow\u2019s object detection API we can choose from a variety of models available in their detection model zoo (love the name for this by the way :) ) trained on different industry and research standard image datasets. Perhaps the most famous one is the so-called COCO data set (common objects in context) that has many different images with labeled classes, bounding boxes, and even masks available as annotations. The data set is used for many competitions and is, quote \u201cdesigned to push the state of the art in object detection forward\u201d. Cool thing and pretty much what I was looking for. I picked a network called \u201cFaster R-CNN\u201d. I picked it because it is available in both the TensorFlow model zoo as well as the torchvision package and that way I could compare the two a little easier. Faster R-CNN is a region-proposal network (hence the R) that uses the technique of \u201canchor boxes\u201d to localize objects and predict them. In a nutshell it\u2019s a combination of two networks, one that detects regions within the image that have a high probability of containing an object, and the other predicting the bounding boxes as well as class probabilities in these regions. There\u2019s plenty of more detailed explanations online. I personally like this one by Hao Gao.", "Once you made a choice on the model you first have to download it, meaning you download the network architecture and pre-trained weights. I chose the \u201cfaster_rcnn_inception_v2_coco_2018_01_28\u201d model. This is done by running the following command from the models/research folder:", "You can now find a folder containing all the model files:", "There you can find checkpointing information which lets you reconstruct the model with the pre-trained weights, thus a model that is ready to do transfer learning. You also have a saved_model folder with an exported version of the downloaded model as well as a frozen_inference graph \u2014 just as the name proposes a tf graph that you can use for inference. Last but not least you find an example for a pipeline.config file. In this file you can specify exactly how you want your network to be trained, what training data to use, how many object classes you have, and so on. In here we can customize the pre-trained model to our specific needs.", "In TensorFlow\u2019s object detection, the estimator API is used to handle the training and evaluation (and some more stuff like checkpointing etc.) process. This API expects the data in a tf.record format which you need to create first.", "Luckily this has already been done by the creator of the raccoon data set. Otherwise we could have transformed it ourselves as well:", "We have a train.record and a test.record data set which will be used to feed data in batches to the tf.estimator object during training.", "In the pipeline.config file we have to adjust 5 areas. The fine_tune_checkpoint, the train_config, the valid_config, the num_classes and the second_stage_post_processing. Everything else can just stay the way it is. The fine_tune_checkpoint is the path to the pre-trained weights contained in the downloaded checkpoint files. All we do here is set it equal to", "Don\u2019t worry in case you find that there is no file exactly called model.ckpt, trust me it does work this way ;) The model can be rebuilt and the weights are inserted into the correct layers. The num_classes field is set to 1 (1 class only: raccoon).", "In the train_config section we can adjust all things concerning the training phase. I left everything at its default and only changed the necessary parts like the train_input_reader, where you have to set the input path to your train.record training data set as well as the label_map_path to a pbtxt file containing info on the labels. I first changed the label_map file to", "then I set the train_input_reader to", "Next I changed the valid config section. Again the name explains it all here. I just set the eval_input_reader to my label_map file as well as the test.record test data set to", "Lastly I adjusted the second_stage_postprocessing. Here you can define what the model does with the output. Generally a detection model outputs a number of possible combinations of class probabilities and bounding box coordinates (e.g. one set per anchor) that is not equal to the number of objects in the image. As users we then have to use techniques such as non-max suppression to get the best-fit bounding boxes (Andrew Ngs Coursera course as mentioned above gives a really nice introduction to this!) to every object in the image. I picked the following here:", "meaning I will only allow 5 detections per image (ideally 5 different detections of different raccoons if existent in the image). The IoU (intersection over union) threshold, as well as the score threshold, are tailor towards only having a single bounding box per object.", "Once the pipeline.config file is good to go we can start the training. TensorFlow suggests doing this with a command-line job calling their model_main.py file with a variety of input parameters. However, as I wanted to look under the hood a little bit, I hopped into this file and ran the commands myself. For the training and evaluation of the model the object detection API is making use of tf\u2019s estimator API. It takes care of training and evaluation for us nicely and integrates automatic checkpointing as well as model exporting. It also allows for transfer learning from a given checkpoint (which is exactly what we are doing) and writes automatic summaries during training that we can visualize with tensorboard to monitor performance.", "The estimator will need training and evaluation specs that incorporate and define all the things just mentioned and takes care of batching the data for us. tf\u2019s object detection has predefined functions to instantiate these objects from our pipline.config file:", "Before we can start we need to import all the necessary libraries (just as it is done in the model_main.py file):", "Now we can start by specifying a model directory:", "The API will write its log files as well as checkpoints and exported models to this directory. Then after specifying a run config, the path to our pipeline.config file, as well as the number of steps (one step is one run through a single batch of data) to train for:", "we can instantiate all the objects and finally create the train and eval specs using the appropriate pre-built function.", "Estimator, train_spec and eval_spec are then used for training:", "A few things happen now that are worth mentioning. First of all the model gets trained using the appropriate optimizer settings from our pipeline.config file. Every config.save_checkpoints_secs the model writes checkpoints (a set of weights) to the model_dir. Then every eval_specs[0].throttle_secs we pause the training to run evaluation on the test set. In order for this to work we need to have a checkpoint available first. The eval_spec is configured to use the evaluation metrics of the COCO challenge (using the pycocotools library). Every config.save_summary_steps the estimator API writes out event files for visualization in tensorboard.", "I ran the model for 10.000 steps and got a final mAP of 0.65 on the test set. This already outputs some pretty decent bounding boxes when making predictions for the naked eye. But in order to see that, we first need to figure out how to do inference with this trained model.", "This is perhaps the hardest part to figure out in the whole object detection pipeline. In TensorFlow\u2019s object detection repo there are some examples on how to do inference on pre-built models, however, the code relies on TensorFlow version 2.x. Using a saved model or a frozen inference Graph with TensorFlow 1.x code is (relative to tf 2.x) a lot more complicated since you have to work directly with the tf graph and session.", "Either way we first have to export the model in the correct fashion. It took me some experimenting to find out why the exporter that was already in the eval_specs and exports a saved model at the end of tf.estimator.train_and_evaluate doesn\u2019t do the job. Essentially this is due to the serving function used in this automatic exporter. It is tailored towards using tf.example type data (e.g. test.record data), however, we are trying to input a 3D tensor representing an image. This is why we have to run an export job where we specify the input type.", "we have to provide an output directory, our pipeline.config file, the input type as well as a checkpoint from which we would like to export the model (just use the latest one)", "and now we can run the exporter", "For TensorFlow 2.x all we have to do is reload the runtime and select 2.x as version", "and pretty much just follow along their example notebook. You can then load the model with two lines of code:", "All we have to do now is load up an image from the test set (e.g raccoon-14.jpg)", "and run the inference (as suggested by the tf inference scripts)", "Now we can draw the learned bounding box(es) in red and the true labels in green:", "and we can see a pretty cool little raccoon doing some major housekeeping. Also the bounding boxes and probabilities are pretty good considering we only trained the network for 10.000 steps.", "Note: If you want to do this with tf version 1.x you can follow the scripts located here.", "PyTorch has a package called torchvision that includes model architectures, data sets, and other helpful functions for computer vision. Torchvision also has a subpackage on object detection which we will be using in this section. A lot of the following setup and code is modeled according to torchvision\u2019s object detection tutorial.", "4. Change to a PyTorch object detection directory you created", "3. Clone the PyTorch vision repo and copy some python files", "4. Now we can do all the necessary imports", "As opposed to having to create a new type of data file for our training data (as with the training.record file in TensorFlow) we only have to write a data set python class that is later used by the model to parse the images and corresponding annotations. The class needs to inherit from torch.utils.data.Dataset and implement the __getitem__ and __len__ methods. As we are just going to use the same raccoon data set as earlier and the data folder in the repo already contains a raccoon_labels.csv file containing all the parsed annotations, all we have to do is write a little helper function:", "which we can then use to write our RaccoonDataset class:", "We can run a quick check to see if everything is implemented correctly. Instantiate a RaccoonDataset object and run __getitem__", "and the output should look like this", "Since we used a faster R-CNN earlier for TensorFlow we will also use one here. Also it\u2019s not like torchvision gives us a big choice. They only have 2 pre-trained (on coco) models for object detection available on their website. A Faster R-CNN ResNet-50 FPN and a Mask R-CNN ResNet-50 FPN.", "In order to download the pre-trained faster r-cnn we can write a little get_model function that adjusts the last layer of the model to output a number of classes that suits our raccoon data set:", "We can also add a little transformer function that enhances our training set by doing some basic data augmentation (horizontal flip of images)", "Now we can instantiate our training and testing data classes and assign them to data_loaders that control how images are loaded during training and testing (batch size etc).", "First, we can use the following command to check whether the correct GPU settings are in place:", "If you are running on Google Colab just switch the runtime time to GPU.", "Now we can set up the model using our get_model function. Also we have to specify an optimizer and a learning rate scheduler, that adjusts the learning rate over time.", "In order to do the training we now must write our own for loop over the number of epochs we wish to train on, then call PyTorch\u2019s train_one_epoch function, adjust the learning rate and finally evaluate once per epoch.", "In order to save the trained model (there is no automatic checkpointing) we can run the following command once we are done training:", "We first have to load the model, which works by instantiating the same \u201cempty\u201d model with our get_model function from earlier and then loading the saved weights into the network architecture.", "Now we can use our dataset_test class to get test images and their ground truth and run them through the predictor.", "All in all, it is safe to say that for people that are used to imperative style coding (code gets executed when written) and have been working with scikit-learn type ML frameworks a lot, PyTorch is most likely going to be easier for them to start with (this might also change once TensorFlow upgrades the object detection API to tf version 2.x). In this article I am only focusing on the \u201cease of use\u201d side of things, not looking at performance speed, variability, or portability of the model. A lot of these features however are needed when trying to deploy such models into productive software environments. Here the higher-level API used in TensorFlow with the config.py file incorporates a lot more flexibility from the get-go within the framework, where the lower-level torchvision is held more open, meaning it is easier to look \u201cbehind the curtain\u201d (you don\u2019t have to work through a ton of TensorFlow source code), however only the standards are displayed in their tutorial. Anything outside of the standard must be written from scratch, whereas TensorFlow might have a section in the config file to address it. Also the TensorFlow model zoo just has way more pre-trained models available for people to use. Overall my experience resembles a very typical sentiment in the data science community, which is that PyTorche\u2019s object detection framework might be better for research purposes and \u201cunderstanding every detail\u201d of an implementation, while TensorFlow\u2019s API is a better choice for building productive models.", "I hope you guys got some valuable information out of this. Now it\u2019s time to try it out yourselves. Happy coding :)", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Scientist / ML Engineer - Developing real-world machine learning software @MercedesBenz"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F1d314691d4ae&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----1d314691d4ae--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----1d314691d4ae--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@mbeckers26?source=post_page-----1d314691d4ae--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@mbeckers26?source=post_page-----1d314691d4ae--------------------------------", "anchor_text": "Maximilian Beckers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F72c725523da0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae&user=Maximilian+Beckers&userId=72c725523da0&source=post_page-72c725523da0----1d314691d4ae---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1d314691d4ae&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1d314691d4ae&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@grakozy?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Greg Rakozy"}, {"url": "https://unsplash.com/s/photos/stars?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://www.coursera.org/learn/convolutional-neural-networks?specialization=deep-learning#syllabus", "anchor_text": "Convolutional Neural Nets"}, {"url": "https://github.com/experiencor/raccoon_dataset", "anchor_text": "https://github.com/experiencor/raccoon_dataset"}, {"url": "https://github.com/tensorflow/models/tree/master/research/object_detection", "anchor_text": "TensorFlow\u2019s object detection API"}, {"url": "https://pytorch.org/docs/stable/torchvision/models.html#object-detection-instance-segmentation-and-person-keypoint-detection", "anchor_text": "torchvision"}, {"url": "http://colab.research.google.com", "anchor_text": "Google Colab"}, {"url": "https://github.com/experiencor/raccoon_dataset.git", "anchor_text": "https://github.com/experiencor/raccoon_dataset.git"}, {"url": "https://github.com/experiencor/raccoon_dataset", "anchor_text": "https://github.com/experiencor/raccoon_dataset"}, {"url": "https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md", "anchor_text": "installation guide"}, {"url": "https://github.com/tensorflow/models.git", "anchor_text": "https://github.com/tensorflow/models.git"}, {"url": "https://github.com/tensorflow/models/blob/d4eedbb9a7ceccfbcf08ec843abcc38d7f7dc4d7/research/object_detection/g3doc/detection_model_zoo.md", "anchor_text": "detection model zoo"}, {"url": "https://medium.com/@smallfishbigsea/faster-r-cnn-explained-864d4fb7e3f8", "anchor_text": "this one"}, {"url": "https://medium.com/u/8b44cbadef3a?source=post_page-----1d314691d4ae--------------------------------", "anchor_text": "Hao Gao"}, {"url": "http://download.tensorflow.org/models/object_detection/faster_rcnn_inception_v2_coco_2018_01_28.tar.gz", "anchor_text": "http://download.tensorflow.org/models/object_detection/faster_rcnn_inception_v2_coco_2018_01_28.tar.gz"}, {"url": "https://www.tensorflow.org/versions/r1.15/api_docs/python/tf/estimator/Estimator", "anchor_text": "estimator API"}, {"url": "https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/running_locally.md", "anchor_text": "command-line job"}, {"url": "https://www.tensorflow.org/versions/r1.15/api_docs/python/tf/estimator/Estimator", "anchor_text": "tf\u2019s estimator API"}, {"url": "https://www.tensorflow.org/tensorboard", "anchor_text": "tensorboard"}, {"url": "http://cocodataset.org/#detection-eval", "anchor_text": "evaluation metrics"}, {"url": "https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/exporting_models.md", "anchor_text": "export"}, {"url": "https://github.com/tensorflow/models/blob/master/research/object_detection/object_detection_tutorial.ipynb", "anchor_text": "notebook"}, {"url": "https://github.com/tensorflow/models/blob/guptapriya-patch-1/research/object_detection/object_detection_tutorial.ipynb", "anchor_text": "here"}, {"url": "https://pytorch.org/docs/stable/torchvision/index.html", "anchor_text": "torchvision"}, {"url": "https://pytorch.org/tutorials/intermediate/torchvision_tutorial.html", "anchor_text": "tutorial"}, {"url": "https://github.com/pytorch/vision.git", "anchor_text": "https://github.com/pytorch/vision.git"}, {"url": "https://pytorch.org/docs/stable/torchvision/models.html#object-detection-instance-segmentation-and-person-keypoint-detection", "anchor_text": "website"}, {"url": "https://arxiv.org/abs/1506.01497", "anchor_text": "Faster R-CNN ResNet-50 FPN"}, {"url": "https://arxiv.org/abs/1703.06870", "anchor_text": "Mask R-CNN ResNet-50 FPN"}, {"url": "https://github.com/tensorflow/models/tree/master/research/object_detection", "anchor_text": "tensorflow/modelsCreating accurate machine learning models capable of localizing and identifying multiple objects in a single image\u2026github.com"}, {"url": "https://pytorch.org/tutorials/intermediate/torchvision_tutorial.html", "anchor_text": "TorchVision Object Detection Finetuning Tutorial \u2014 PyTorch Tutorials 1.5.0 documentationTip To get the most of this tutorial, we suggest using this Colab Version. This will allow you to experiment with the\u2026pytorch.org"}, {"url": "https://www.coursera.org/learn/convolutional-neural-networks?specialization=deep-learning", "anchor_text": "Convolutional Neural Networks | CourseraThis course will teach you how to build convolutional neural networks and apply it to image data. Thanks to deep\u2026www.coursera.org"}, {"url": "https://medium.com/tag/object-detection?source=post_page-----1d314691d4ae---------------object_detection-----------------", "anchor_text": "Object Detection"}, {"url": "https://medium.com/tag/tensorflow?source=post_page-----1d314691d4ae---------------tensorflow-----------------", "anchor_text": "TensorFlow"}, {"url": "https://medium.com/tag/pytorch?source=post_page-----1d314691d4ae---------------pytorch-----------------", "anchor_text": "Pytorch"}, {"url": "https://medium.com/tag/torchvision?source=post_page-----1d314691d4ae---------------torchvision-----------------", "anchor_text": "Torchvision"}, {"url": "https://medium.com/tag/transfer-learning?source=post_page-----1d314691d4ae---------------transfer_learning-----------------", "anchor_text": "Transfer Learning"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1d314691d4ae&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae&user=Maximilian+Beckers&userId=72c725523da0&source=-----1d314691d4ae---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1d314691d4ae&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae&user=Maximilian+Beckers&userId=72c725523da0&source=-----1d314691d4ae---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1d314691d4ae&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----1d314691d4ae--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F1d314691d4ae&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----1d314691d4ae---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----1d314691d4ae--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----1d314691d4ae--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----1d314691d4ae--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----1d314691d4ae--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----1d314691d4ae--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----1d314691d4ae--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----1d314691d4ae--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----1d314691d4ae--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@mbeckers26?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@mbeckers26?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Maximilian Beckers"}, {"url": "https://medium.com/@mbeckers26/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "181 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F72c725523da0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae&user=Maximilian+Beckers&userId=72c725523da0&source=post_page-72c725523da0--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F52ef4eda85d9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae&newsletterV3=72c725523da0&newsletterV3Id=52ef4eda85d9&user=Maximilian+Beckers&userId=72c725523da0&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}