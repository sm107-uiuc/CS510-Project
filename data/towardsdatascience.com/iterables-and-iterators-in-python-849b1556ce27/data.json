{"url": "https://towardsdatascience.com/iterables-and-iterators-in-python-849b1556ce27", "time": 1683016081.3154, "path": "towardsdatascience.com/iterables-and-iterators-in-python-849b1556ce27/", "webpage": {"metadata": {"title": "Iterables and Iterators in Python | by Luay Matalka | Towards Data Science", "h1": "Iterables and Iterators in Python", "description": "In this article, we will learn the differences between iteration, iterables, and iterators, how to identify iterables and iterators, and why it can be useful to be able to do so. Broadly speaking, an\u2026"}, "outgoing_paragraph_urls": [{"url": "https://lmatalka90.medium.com/membership", "anchor_text": "link", "paragraph_index": 21}], "all_paragraphs": ["In this article, we will learn the differences between iteration, iterables, and iterators, how to identify iterables and iterators, and why it can be useful to be able to do so.", "Broadly speaking, an iterable is something that can be looped over. The process of looping over something, or taking each item of it, one after another, is iteration. For example, when we use a for loop to loop over a list, the process of looping over this list is iteration (or we are iterating over this list), and the list is the iterable. Tuples, dictionaries, strings, files, and generators are also iterables, as they can also be iterated over.", "For example, we can use a for loop to loop over or iterate over a list as follows:", "In other words, what makes something capable of being iterated over, such as in a for loop? To be an iterable, an object will have an iter() method. So if an object has an iter() method, then it is an iterable, and thus we can use a for loop to loop over it.", "Technically, if an object has a getitem() method it can also be an iterable. However, we will focus on the iter() method here as that is the newer protocol for iteration in python.", "If we use the dir() function on num_list which will show us all the methods and attributes of that list object:", "Notice how the list object, num_list, has an __iter__() method, which makes it an iterable. Methods that have double leading and trailing underscores are hence called dunder methods (also known as magic methods or special methods). These methods are intended to be invoked indirectly, as most python operators have an associated magic method.", "An __iter__() method will return an iterator object. To loop over an iterable, such as a list, we don\u2019t usually do that manually. For example, a for loop first calls the __iter__() method on our object which returns an iterator object. The for loop then loops over this iterator. All of this is done in the background.", "So this brings us to iterators.", "A list is an iterable. But it is not an iterator. If we run the __iter__() method on our list, it will return an iterator. An iterator is an object with a state that remembers where it is during iteration. Iterators also know how to get their next value. They get their next value with a __next__() method. Thus, to know if an object is an iterator, we can check if it has a __next__() method.", "We can first call the iter() function on num_list (the iter() function calls the __iter__() method on the object passed in), which returns an iterator, and then we will use the dir() function on the iterator to view its attributes and methods:", "Notice how our iterator, num_list_iterator, has a __next__() method. A list object is not an iterator because it does not have a __next__() method. Thus calling the next() function (which would call the __next__() method on an object if it has one) on a list would result in a TypeError, since our list object is not an iterator and thus does not have a __next__() method. However, a list object is an iterable because it has an __iter__() method, which when called, returns an iterator that will have a __next__() method.", "Notice how num_list_iterator also has an __iter__() method. As a result, iterators are also iterables, or self-iterables, since calling the __iter__() method on an iterator returns self.", "Calling the __next__() method on an iterator will return the next value in the iteration. Thus, calling the __next__() method on the iterator we created from num_list, or num_list_iterator, will return the first value in our iterator. Calling the __next__() method on that same iterator will then return the second value in our iterator (remember that iterators have a state which remembers where it is during iteration). Once we\u2019ve went through all the values of our iterator, calling the __next__() method again on our iterator will result in a StopIteration error, since our iterator has now been exhausted. Once an iterator is exhausted, we must make a new iterator via the __iter__() method of the iterable.", "Note: Iterators can only go forward. Meaning we can only get the next value in an iterator via the __next__() method. To start from scratch, we would have to create a new iterator object by calling the __iter__() method on the iterable we would like to iterate over.", "A for loop works by doing the above in the background. Using a for loop to loop over a list (or other iterable) begins with it first creating an iterator object via the __iter__() method, then calling the __next__() method on that iterator, returning the values until it returns a StopIteration error (that it does not show to us), which lets it know that the iterator has been exhausted since there are no more values left in the iterator. This can be seen below:", "Notice how instead of typing out the dunder methods, we can use the built-in iter() and next() functions, which call the __iter__() and __next__() methods for us. However, we could have also called the methods as follows:", "If you are familiar with while loops and try/except statements, then the above for loop is analogous to the following while loop:", "Knowing whether an object is an iterable (or can be iterated over) can be very helpful while coding in python. For example, knowing if an object is an iterable would tell us if an object can be used in a for loop.", "In the above example, we used a for loop to loop over num_list, which was a list of integers starting at 1 and ending at 5, or [1,2,3,4,5]. Well, instead of creating num_list as we did above and looping through it, we could check to see if we can use the range() function to create a range object that we can loop over using a for loop, giving us the same sequence of numbers to iterate over:", "As we can see, the range object is an iterable since it has the __iter__() method! Therefore, it can be iterated over using a for loop, since the for loop will first create the iterator object, and then iterate over that iterator object using the __next__() method.", "If you enjoy reading stories like these and want to support me as a writer, consider signing up to become a Medium member. It\u2019s $5 a month, giving you unlimited access to stories on Medium. If you sign up using my link, I\u2019ll earn a small commission.", "In this tutorial, we discussed what iteration, iterables, and iterators all mean. We learned how an iterable is an object that has an __iter__() method, which will create an iterator object. We also learned that an iterator is an object that has a state which remembers where it is during iteration, and that they know how to get their next value via their __next__() method. Finally, we saw how being able to identify an object as an iterable helped us write more pythonic code.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Cloud Data Engineer with a passion for teaching."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F849b1556ce27&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fiterables-and-iterators-in-python-849b1556ce27&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fiterables-and-iterators-in-python-849b1556ce27&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fiterables-and-iterators-in-python-849b1556ce27&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fiterables-and-iterators-in-python-849b1556ce27&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----849b1556ce27--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----849b1556ce27--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://lmatalka90.medium.com/?source=post_page-----849b1556ce27--------------------------------", "anchor_text": ""}, {"url": "https://lmatalka90.medium.com/?source=post_page-----849b1556ce27--------------------------------", "anchor_text": "Luay Matalka"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F58bd20ab66d4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fiterables-and-iterators-in-python-849b1556ce27&user=Luay+Matalka&userId=58bd20ab66d4&source=post_page-58bd20ab66d4----849b1556ce27---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F849b1556ce27&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fiterables-and-iterators-in-python-849b1556ce27&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F849b1556ce27&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fiterables-and-iterators-in-python-849b1556ce27&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@ikukevk?utm_source=medium&utm_medium=referral", "anchor_text": "Kevin Ku"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://towardsdatascience.com/list-comprehensions-in-python-28d54c9286ca", "anchor_text": "List Comprehensions in PythonA more elegant and concise way to create lists in pythontowardsdatascience.com"}, {"url": "https://towardsdatascience.com/args-and-kwargs-in-python-6d991a3c1b5e", "anchor_text": "*args and **kwargs in PythonUnderstanding what *args and **kwargs are and how to use themtowardsdatascience.com"}, {"url": "https://lmatalka90.medium.com/membership", "anchor_text": "link"}, {"url": "https://lmatalka90.medium.com/membership", "anchor_text": "Join Medium with my referral link \u2014 Luay MatalkaRead every story from Luay Matalka (and thousands of other writers on Medium). Your membership fee directly supports\u2026lmatalka90.medium.com"}, {"url": "https://medium.com/tag/data-science?source=post_page-----849b1556ce27---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/programming?source=post_page-----849b1556ce27---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/software-development?source=post_page-----849b1556ce27---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/technology?source=post_page-----849b1556ce27---------------technology-----------------", "anchor_text": "Technology"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----849b1556ce27---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F849b1556ce27&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fiterables-and-iterators-in-python-849b1556ce27&user=Luay+Matalka&userId=58bd20ab66d4&source=-----849b1556ce27---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F849b1556ce27&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fiterables-and-iterators-in-python-849b1556ce27&user=Luay+Matalka&userId=58bd20ab66d4&source=-----849b1556ce27---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F849b1556ce27&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fiterables-and-iterators-in-python-849b1556ce27&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----849b1556ce27--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F849b1556ce27&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fiterables-and-iterators-in-python-849b1556ce27&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----849b1556ce27---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----849b1556ce27--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----849b1556ce27--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----849b1556ce27--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----849b1556ce27--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----849b1556ce27--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----849b1556ce27--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----849b1556ce27--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----849b1556ce27--------------------------------", "anchor_text": ""}, {"url": "https://lmatalka90.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://lmatalka90.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Luay Matalka"}, {"url": "https://lmatalka90.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "1K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F58bd20ab66d4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fiterables-and-iterators-in-python-849b1556ce27&user=Luay+Matalka&userId=58bd20ab66d4&source=post_page-58bd20ab66d4--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Feb71491826a1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fiterables-and-iterators-in-python-849b1556ce27&newsletterV3=58bd20ab66d4&newsletterV3Id=eb71491826a1&user=Luay+Matalka&userId=58bd20ab66d4&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}