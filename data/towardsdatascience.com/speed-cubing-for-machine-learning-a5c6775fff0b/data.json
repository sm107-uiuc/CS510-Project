{"url": "https://towardsdatascience.com/speed-cubing-for-machine-learning-a5c6775fff0b", "time": 1683013949.8037062, "path": "towardsdatascience.com/speed-cubing-for-machine-learning-a5c6775fff0b/", "webpage": {"metadata": {"title": "Speed Cubing for Machine Learning | by Nicolas Morizet | Towards Data Science", "h1": "Speed Cubing for Machine Learning", "description": "At some point in a machine learning project, you will want to overcome the limitations of your local machine (number of cores, memory, etc.), whether you want to generate a large amount of data to\u2026"}, "outgoing_paragraph_urls": [{"url": "https://95ba6910-ffb9-46f0-bab4-8431d2e31772.filesusr.com/ugd/dcd9aa_6ca686087fd04f04bd20b5f71a1f5ceb.pdf", "anchor_text": "here", "paragraph_index": 1}, {"url": "https://www.thispersondoesnotexist.com", "anchor_text": "thispersondoesnotexist.com", "paragraph_index": 2}, {"url": "https://parquet.apache.org/documentation/latest/", "anchor_text": "here", "paragraph_index": 8}, {"url": "https://docs.python.org/3/library/multiprocessing.html", "anchor_text": "parallelization in Python", "paragraph_index": 20}, {"url": "https://nathangrigg.com/2015/04/python-threading-vs-processes", "anchor_text": "blog post", "paragraph_index": 22}, {"url": "https://95ba6910-ffb9-46f0-bab4-8431d2e31772.filesusr.com/ugd/dcd9aa_6ca686087fd04f04bd20b5f71a1f5ceb.pdf", "anchor_text": "N. Morizet, Introduction to Generative Adversarial Networks (2020), Advestis Tech Report", "paragraph_index": 36}, {"url": "https://research.nvidia.com/publication/2019-12_Analyzing-and-Improving", "anchor_text": "T. Karras et al., Analyzing and Improving the Image Quality of StyleGAN (2019), NVIDIA Research", "paragraph_index": 37}, {"url": "https://docs.python.org/3/library/multiprocessing.html", "anchor_text": "Multiprocessing \u2014 Process-based parallelism (2020), The Python Standard Library", "paragraph_index": 38}, {"url": "https://nathangrigg.com/2015/04/python-threading-vs-processes", "anchor_text": "N. Grigg, Illustrating Python multithreading vs multiprocessing (2015), blog post from nathangrigg.com", "paragraph_index": 39}, {"url": "https://www.advestis.com/", "anchor_text": "Advestis", "paragraph_index": 40}, {"url": "https://www.linkedin.com/company/advestis/", "anchor_text": "https://www.linkedin.com/company/advestis/", "paragraph_index": 40}], "all_paragraphs": ["At some point in a machine learning project, you will want to overcome the limitations of your local machine (number of cores, memory, etc.), whether you want to generate a large amount of data to feed deep learning networks or train your algorithms as fast as possible. In this article, we will take you on a journey, sharing the difficulties and the solutions we found, from naive implementation to more advanced techniques, taking advantage of the various computational resources that may be found in the Cloud. We hope this will help you to efficiently manage and improve your productivity for your machine learning projects.", "For our experiment, we want to be able to generate a large amount (let\u2019s say 1,000,000) of chunks of data, in a few minutes, to serve as inputs for some Generative Adversarial Networks (GANs). If you have never heard of GANs, you can read my introductory article here [1].", "The chunks we are talking about will be cubes of dimension n=100 (i.e. 1,000,000 of data points). This specific number of 1 megavoxels (data points for volumes) has been chosen to match the current state of the art of generating fake faces, that can be seen on the website thispersondoesnotexist.com. The technique used there is called StyleGAN2 [2] (a variant of GANs), where generated images are of size 1024 x 1024, thus on the order of magnitude of 1 megapixels.", "In order to reflect some data preparation from the real world, additional constraints will apply to build our cubes. They will be derived from dataframes and will be the result of stacking numpy arrays. For the sake of simplicity, those dataframes will have random values.", "The objective here is to create cubes as fast as possible !", "The first steps will be done on our local machine, which specs are described in Table 1. As you can see, this is already a pretty nice setup.", "We first generate 100 dataframes of size 1000 x 1000, containing random floats (rounded to 10 decimals), thanks to the numpy.random.rand\u00a0function. The dataframes are then saved to disk using the pandas.DataFrame.to_csv\u00a0function. Each csv file is about 13 Mo.", "For each cube, we will have to use all the dataframes to extract a random subset from them. Using the pandas.read_csv function, it takes 20.87s to read all the dataframes, hence 4.79 files/s. This is very slow. For the record, if we wanted to build 1,000,000 cubes, at this pace, it would take more than 240 days !", "Instead of using the csv format, let\u2019s consider the parquet file format to save our dataframes. Using the fastparquet engine [3], each saved parquet file is now only 8 Mo. If you want to learn more about the parquet file format, you can check the official website here [4]. This time, reading all the 100 dataframes only takes 6.57s (or 15.21 files/s)! This represents a 3.2x speedup. Those first results are gathered in Table 2.", "Using some constraints, the following steps will apply to build one cube:", "The total time to get a batch of 100 cubes is about 661s (almost 11 minutes), hence a rate of 0.15 cubes/s.", "I\u2019m sure you already spotted the mistake here. Indeed, for each cube, we read the same 100 parquet files every time! In practice, you surely don\u2019t want to loop over those files. The next improvement regarding the data structure is going to fix this.", "Since we don\u2019t want to read the parquet files inside the loop for each cube, it could be a good idea to perform this task only once and upfront. So, we can build a dictionary df_dict, having files names as keys and dataframes as values. This operation is pretty fast and the dictionary is built in 7.33s only.", "Now, we are going to write a function to create a cube, taking advantage of that dictionary already having dataframes read and stored as its own values.", "This time, creating 100 cubes only took 6.61s for a rate of 15.13 cubes/s. This represents a 100x speedup compared to the previous version not using the dictionary of dataframes. Creating our batch of 1,000,000 cubes would now only take nearly 20 hours instead of the initial 240 days.", "Now, we still use dataframes to build our cubes, maybe it\u2019s time to go full NumPy to increase our speed.", "The previous idea of using a dictionary of dataframes was interesting but may be improved by building, from the very beginning, a numpy.ndarray derived from the parquet files, from which we will sub-sample along the columns to create our cubes. Let\u2019s first create this big boy:", "Then, we have to modify our create_cube function accordingly and implement a full vectorization:", "Using this new version, we are able to create 100 cubes in just 1.31s, hence a nice rate of 76.26 cubes/s.", "Now, we can move on to the next step to go even faster. You guessed it, time for parallelization!", "There are several ways to perform parallelization in Python [5][6]. Here, we will use the native multiprocessing Python package along with the imap_unordered function to perform asynchronous jobs. We plan to take advantage of the 12 cores from our local machine.", "The ThreadPool package is imported here (instead of the usual Pool package) because we want to ensure the following:", "You can learn more about the difference between multiprocessing and multithreading in Python in this nice blog post [7].", "Using this multithreading approach, we only need 0.28s to create one batch of 100 cubes. We reach a very good rate of 355.50 cubes/s, hence a 2370x speedup compared to the very first version (Table 3). Regarding our 1,000,000 cubes, the generation time has dropped under an hour.", "Now, it\u2019s time to fly by using virtual machine instances in the Cloud!", "If we talk about Machine Learning as a Service (MLaaS), the top 4 cloud solutions are: Microsoft Azure, Amazon AWS, IBM Watson and Google Cloud Platform (GCP). In this study, we chose GCP but any other provider would do the job. You can select or customize your own configuration among a lot of different virtual machine instances, where you will be able to execute your code inside a Notebook.", "The first question you want to ask yourself is the following one:", "\u201cWhat kind of instance do I want to create that matches my computation needs ?\u201d", "Basically, you can find three types of machines: general purpose, memory-optimized or compute-optimized (Table 4).", "To compute the numpy.ndarray from Step 2, parquet files are first stored into a bucket in the Cloud. Then, several tests are conducted on different VM instances (Table 5), keeping the same multithreading code as in Step 3, and progressively increasing the number of vCPUs (workers). An example of results for one virtual machine is presented in Table 6.", "In a terminal connected to your virtual machine, you can also visualize the activity of your vCPUs, using the htop linux command (Figure 1).", "Looking at Figure 2, except for the m1-ultramem-160 instance (which is the most expensive), all the other instances perform pretty well, but follow the same pattern. The rate is increasing almost linearly with the number of workers and reaches a peak at 60 vCPUs. Beyond that limit, the rate drops drastically, most probably because of the overhead of the multithreading.", "Among our selection, the winner is the n2-highcpu-80 instance (the second cheapest), reaching a rate of 2026.62 cubes/s, almost 2 billion data points per second. At this pace, we can generate 1,000,000 cubes in only 8 minutes.", "Our initial objective was successfully achieved !", "This whole experiment demonstrates that not only code matters but hardware too. We began with a rate of 0.15 cubes/s on our local machine to reach a very quick rate of 2027 cubes/s, using the Cloud. This is more than a 13,500x speedup\u00a0!", "And this is just the beginning\u2026 We can level up by using more advanced technologies and infrastructures. This would be for Episode 2.", "[1] N. Morizet, Introduction to Generative Adversarial Networks (2020), Advestis Tech Report.", "[2] T. Karras et al., Analyzing and Improving the Image Quality of StyleGAN (2019), NVIDIA Research.", "[5] Multiprocessing \u2014 Process-based parallelism (2020), The Python Standard Library.", "[7] N. Grigg, Illustrating Python multithreading vs multiprocessing (2015), blog post from nathangrigg.com.", "Advestis is a European Contract Research Organization (CRO) with a deep understanding and practice of statistics, and interpretable machine learning techniques. The expertise of Advestis covers the modeling of complex systems and predictive analysis for temporal phenomena.LinkedIn: https://www.linkedin.com/company/advestis/", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "PhD, Senior AI Research Scientist at Advestis."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fa5c6775fff0b&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-cubing-for-machine-learning-a5c6775fff0b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-cubing-for-machine-learning-a5c6775fff0b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-cubing-for-machine-learning-a5c6775fff0b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-cubing-for-machine-learning-a5c6775fff0b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----a5c6775fff0b--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a5c6775fff0b--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@nicolas.morizet?source=post_page-----a5c6775fff0b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@nicolas.morizet?source=post_page-----a5c6775fff0b--------------------------------", "anchor_text": "Nicolas Morizet"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8f408c864b3d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-cubing-for-machine-learning-a5c6775fff0b&user=Nicolas+Morizet&userId=8f408c864b3d&source=post_page-8f408c864b3d----a5c6775fff0b---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa5c6775fff0b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-cubing-for-machine-learning-a5c6775fff0b&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa5c6775fff0b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-cubing-for-machine-learning-a5c6775fff0b&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@linusekenstam?utm_source=medium&utm_medium=referral", "anchor_text": "Linus Ekenstam"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://95ba6910-ffb9-46f0-bab4-8431d2e31772.filesusr.com/ugd/dcd9aa_6ca686087fd04f04bd20b5f71a1f5ceb.pdf", "anchor_text": "here"}, {"url": "https://www.thispersondoesnotexist.com", "anchor_text": "thispersondoesnotexist.com"}, {"url": "https://parquet.apache.org/documentation/latest/", "anchor_text": "here"}, {"url": "https://unsplash.com/@henkiboy?utm_source=medium&utm_medium=referral", "anchor_text": "Max Henk"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://unsplash.com/@fezbot2000?utm_source=medium&utm_medium=referral", "anchor_text": "Fezbot2000"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://unsplash.com/@hansonluu?utm_source=medium&utm_medium=referral", "anchor_text": "Hanson Lu"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://unsplash.com/@marcojodoin?utm_source=medium&utm_medium=referral", "anchor_text": "Marc-Olivier Jodoin"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://docs.python.org/3/library/multiprocessing.html", "anchor_text": "parallelization in Python"}, {"url": "https://nathangrigg.com/2015/04/python-threading-vs-processes", "anchor_text": "blog post"}, {"url": "https://unsplash.com/@spacex?utm_source=medium&utm_medium=referral", "anchor_text": "SpaceX"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://95ba6910-ffb9-46f0-bab4-8431d2e31772.filesusr.com/ugd/dcd9aa_6ca686087fd04f04bd20b5f71a1f5ceb.pdf", "anchor_text": "N. Morizet, Introduction to Generative Adversarial Networks (2020), Advestis Tech Report"}, {"url": "https://research.nvidia.com/publication/2019-12_Analyzing-and-Improving", "anchor_text": "T. Karras et al., Analyzing and Improving the Image Quality of StyleGAN (2019), NVIDIA Research"}, {"url": "https://fastparquet.readthedocs.io/en/latest/", "anchor_text": "fastparquet\u201d official documentation (2020)"}, {"url": "https://parquet.apache.org/documentation/latest/", "anchor_text": "Apache parquet\u201d official documentation (2020)"}, {"url": "https://docs.python.org/3/library/multiprocessing.html", "anchor_text": "Multiprocessing \u2014 Process-based parallelism (2020), The Python Standard Library"}, {"url": "https://docs.ray.io/en/latest/index.html", "anchor_text": "Ray\u201d framework official documentation (2020)"}, {"url": "https://nathangrigg.com/2015/04/python-threading-vs-processes", "anchor_text": "N. Grigg, Illustrating Python multithreading vs multiprocessing (2015), blog post from nathangrigg.com"}, {"url": "https://www.advestis.com/", "anchor_text": "Advestis"}, {"url": "https://www.linkedin.com/company/advestis/", "anchor_text": "https://www.linkedin.com/company/advestis/"}, {"url": "https://medium.com/tag/python?source=post_page-----a5c6775fff0b---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----a5c6775fff0b---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/cloud?source=post_page-----a5c6775fff0b---------------cloud-----------------", "anchor_text": "Cloud"}, {"url": "https://medium.com/tag/data-science?source=post_page-----a5c6775fff0b---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/hpc?source=post_page-----a5c6775fff0b---------------hpc-----------------", "anchor_text": "Hpc"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa5c6775fff0b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-cubing-for-machine-learning-a5c6775fff0b&user=Nicolas+Morizet&userId=8f408c864b3d&source=-----a5c6775fff0b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa5c6775fff0b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-cubing-for-machine-learning-a5c6775fff0b&user=Nicolas+Morizet&userId=8f408c864b3d&source=-----a5c6775fff0b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa5c6775fff0b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-cubing-for-machine-learning-a5c6775fff0b&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a5c6775fff0b--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fa5c6775fff0b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-cubing-for-machine-learning-a5c6775fff0b&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----a5c6775fff0b---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----a5c6775fff0b--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----a5c6775fff0b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----a5c6775fff0b--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----a5c6775fff0b--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----a5c6775fff0b--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----a5c6775fff0b--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----a5c6775fff0b--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----a5c6775fff0b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@nicolas.morizet?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@nicolas.morizet?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Nicolas Morizet"}, {"url": "https://medium.com/@nicolas.morizet/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "16 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8f408c864b3d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-cubing-for-machine-learning-a5c6775fff0b&user=Nicolas+Morizet&userId=8f408c864b3d&source=post_page-8f408c864b3d--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2F8f408c864b3d%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-cubing-for-machine-learning-a5c6775fff0b&user=Nicolas+Morizet&userId=8f408c864b3d&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}