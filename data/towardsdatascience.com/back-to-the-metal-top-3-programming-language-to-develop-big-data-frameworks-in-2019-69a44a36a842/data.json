{"url": "https://towardsdatascience.com/back-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842", "time": 1682994789.377509, "path": "towardsdatascience.com/back-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842/", "webpage": {"metadata": {"title": "Back to the metal: Top 3 Programming language to develop Big Data frameworks | by Md Kamaruzzaman | Towards Data Science", "h1": "Back to the metal: Top 3 Programming language to develop Big Data frameworks", "description": "In a previous blog post: Programming language that rules the Data Intensive (Big Data, Fast Data) frameworks, I have briefly discussed some of the most popular Big Data frameworks and showed that\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/programming-language-that-rules-the-data-intensive-big-data-fast-data-frameworks-6cd7d5f754b0", "anchor_text": "Programming language that rules the Data Intensive (Big Data, Fast Data) frameworks", "paragraph_index": 0}, {"url": "https://akka.io/", "anchor_text": "Akka", "paragraph_index": 6}, {"url": "https://www.infoworld.com/article/3275924/java/oracle-plans-to-dump-risky-java-serialization.html", "anchor_text": "horrible mistake", "paragraph_index": 7}, {"url": "https://en.wikipedia.org/wiki/Dennis_Ritchie", "anchor_text": "Dennis Ritchie", "paragraph_index": 8}, {"url": "https://web.archive.org/web/20150806093859/http://www.w3cook.com/os/summary/", "anchor_text": "Linux with around 97% market share", "paragraph_index": 10}, {"url": "https://www.graalvm.org/", "anchor_text": "Virtual Machine GraalVM", "paragraph_index": 13}, {"url": "https://wiki.openjdk.java.net/display/zgc/Main", "anchor_text": "Garbage Collector ZGC", "paragraph_index": 13}, {"url": "https://en.wikipedia.org/wiki/Bjarne_Stroustrup", "anchor_text": "Bjarne Stroustrup", "paragraph_index": 14}, {"url": "https://en.wikipedia.org/wiki/C%2B%2B17", "anchor_text": "C++17", "paragraph_index": 16}, {"url": "https://en.cppreference.com/w/cpp/language/raii", "anchor_text": "Resource Acquisition Is Initialization (RAII)", "paragraph_index": 16}, {"url": "https://en.wikipedia.org/wiki/C%2B%2B20", "anchor_text": "C++20", "paragraph_index": 16}, {"url": "https://www.scylladb.com/product/benchmarks/", "anchor_text": "4 node ScyllaDB (written in C++) which outperforms the 40 node Cassandra (written in Java)", "paragraph_index": 17}, {"url": "https://www.haskell.org/", "anchor_text": "Haskell", "paragraph_index": 18}, {"url": "https://www.python.org/", "anchor_text": "Python", "paragraph_index": 18}, {"url": "https://cyclone.thelanguage.org/", "anchor_text": "Cyclone (safer C)", "paragraph_index": 18}, {"url": "https://github.com/graydon", "anchor_text": "Graydon Hoare", "paragraph_index": 18}, {"url": "https://en.wikipedia.org/wiki/Brendan_Eich", "anchor_text": "Brendan Eich", "paragraph_index": 18}, {"url": "https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html", "anchor_text": "Ownership", "paragraph_index": 19}, {"url": "https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html", "anchor_text": "Borrowing", "paragraph_index": 19}, {"url": "https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization", "anchor_text": "RAII", "paragraph_index": 19}, {"url": "https://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html", "anchor_text": "Fearless Concurrency in Rust", "paragraph_index": 19}, {"url": "https://doc.rust-lang.org/book/ch16-02-message-passing.html", "anchor_text": "Message Passing Concurrency (via Channel)", "paragraph_index": 19}, {"url": "https://webassembly.org/", "anchor_text": "Web Assembly (the next big thing in Browser)", "paragraph_index": 20}, {"url": "https://web.archive.org/web/20140815054745/http://blog.mozilla.org/graydon/2010/1", "anchor_text": "self-hosted Compiler", "paragraph_index": 20}, {"url": "https://linkerd.io/", "anchor_text": "Linkered", "paragraph_index": 20}, {"url": "https://www.weld.rs/", "anchor_text": "Weld", "paragraph_index": 20}, {"url": "https://en.wikipedia.org/wiki/Rob_Pike", "anchor_text": "Rob Pike", "paragraph_index": 21}, {"url": "https://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs", "anchor_text": "Plan 9", "paragraph_index": 21}, {"url": "https://en.wikipedia.org/wiki/UTF-8", "anchor_text": "UTF-8", "paragraph_index": 21}, {"url": "https://en.wikipedia.org/wiki/Ken_Thompson", "anchor_text": "Ken Thompson", "paragraph_index": 21}, {"url": "https://talks.golang.org/2012/splash.article", "anchor_text": "here", "paragraph_index": 21}, {"url": "https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf", "anchor_text": "paper", "paragraph_index": 22}, {"url": "https://golang.org/ref/mem", "anchor_text": "goroutine (lightweight green threads) and channel", "paragraph_index": 23}, {"url": "https://blog.golang.org/share-memory-by-communicating", "anchor_text": "Do not communicate by sharing memory; instead, share memory by communicating", "paragraph_index": 24}, {"url": "https://twitter.com/KamaruzzMd", "anchor_text": "https://twitter.com/KamaruzzMd", "paragraph_index": 28}], "all_paragraphs": ["In a previous blog post: Programming language that rules the Data Intensive (Big Data, Fast Data) frameworks, I have briefly discussed some of the most popular Big Data frameworks and showed that Java is the de-facto programming language in Data Intensive frameworks. Java had significant advantages (e.g. Platform Independence, Productivity, JVM) over other languages during the timeframe 2004\u20132014 when most of the dominant Big Data frameworks were developed.", "In the last 10 years, lots of changes happened in the programming language landscape. Some classic languages have gone through major overhauls and modernizations. Also some very promising, modern programming languages appeared with elegant features. Computer Hardware has gone through major changes (rise of Multi-Core processors, GPU, TPU) as well. Containerization with Docker, Kubernetes came to existence and became mainstream.", "If someone or some company wants to develop the next disruptive Big Data framework in 2019 (e.g. next Hadoop, Kafka, Spark), what programming language will be the best fit? The Big Data domain vintage language Java or any other language? First I will discuss the limitations of Java and then I will propose better alternatives in the context of Data Intensive framework development. Most of the points are also valid to develop Cloud Native, IoT and Machine Learning frameworks.", "Every programming language has its limitations. Also Java, the most dominant Programming Language in the Data Intensive domain, has its fair share of limitations. Here I will discuss the main limitations of Java in the context of Data Intensive framework development.", "JVM: JVM plays a huge role for Java being widely adopted and becoming one the most popular programming language. But like many things in life, sometimes the biggest strength is also the biggest weakness. The main limitations of JVM are listed below:", "Developer Productivity: When Java first appeared in 1995, it was a very productive language at that time with its lean size and simplicity. With time, Java has added lots of features, increasing language specification size/complexity and can no more be considered among the most productive languages. In fact, Java is often criticized for its verbose nature needing lots of boilerplate code in the last decade.", "Concurrency: Although Java was released in the pre Multi-Core era, Java offers excellent Shared Memory based Concurrency support via Thread, Lock, deterministic Memory Model and other high-level abstractions. Shared Memory based Concurrency is difficult to program and prone to Data Race. Java does not offer any language level Message Passing based Concurrency (easier to program correctly) or Asynchronous event loop based Concurrency (better choice for I/O heavy tasks). Akka or other high-performance libraries can offer Message Passing or Asynchronous Concurrency in Java. But without the in-built support from JVM, they will not be as performant as languages which have native support (e.g. Go, Erlang, Node.js). In today\u2019s world of Multi-Core processors, this is a huge drawback of Java.", "Serialization: Java\u2019s default serialization is very slow and has security vulnerabilities. As a result, Java serialization is another thorny issue in the Data Intensive landscape which Oracle has labeled as a horrible mistake and plans to drop in future Java versions.", "Once declared obsolete and destined to demise during the heydeys of Java, the Close-to-the-Metal languages are gaining lots of interest in recent years and for good reasons. The C programming language was developed by Dennis Ritchie in Bell Labs during a time (1969\u20131973) when every cycle of CPU and every Byte of memory was very expensive. For this reason, C (and later C++) was designed to churn out the maximum performance from the hardware with the expense of language complexity.", "There is a misconception that in Big Data domain, one does not need to care too much about CPU/Memory. If someone needs more performance or need to handle more data, all is needed to add more Machines in Big Data Custer. But adding more Machines/Nodes will also increase Cloud provider bill. Also, with the rise of Machine learning/Deep learning, hardware architecture will change rapidly in the coming years. So, programming languages that give full control over hardware will only be more and more important in coming days.", "Near Metal languages had another drawback to be used in Data Intensive frameworks: Platform dependency. Currently, Web Server Operating System is overwhelmingly dominated by Linux with around 97% market share:", "The public Cloud is dominated by Linux as well with more than 90% market share:", "The meteoric rise of Containerization with Docker, Kubernetes gives freedom to develop in any platform (e.g. Windows) targeting any other platform (e.g. Linux). Thus, Platform dependency is no more a critical factor to choose Programming Language for Data Intensive framework development.", "Don\u2019t get me wrong, Java is still a formidable language to develop Data Intensive frameworks. With Java\u2019s new Virtual Machine GraalVM and new Garbage Collector ZGC, Java will be even more attractive language in almost any domain. But I am convinced that Close-to-the-Metal languages will be more dominant than Java/Scala in coming years to develop Data Intensive frameworks. Here I will pick three Close-to-the-Metal languages as a potential candidate to develop Data Intensive frameworks in 2019 over Java/Scala.", "Like the pioneer near-Metal language C, C++ also has its root in Bell Lab. During his time in Bell Labs, Bjarne Stroustrup has initially implemented C++ as \u201cObject Oriented C\u201d with first commercial release in 1985. C++ is a general-purpose, statically typed, compiled programming language which supports multiple programming paradigm (functional, imperative, object-oriented). Like C, it is also a near Metal language which gives full control over hardware without Memory safety or Concurrency safety. Similar to C, C++ also believes in the following Moto:", "i.e. C++ will give the developers a very powerful language but it the responsibility of the developers to make the program Memory safe or Data Race free. C++ also has lots of features and functionality (Feature Hell) and probably one of the most difficult programming languages to master. Since 2000, C++ has added many features (Memory Model, Shared Memory based Concurrency, lambda) to make the language simpler, safer and Concurrency friendly. But these changes have come with a price, C++ language specification has become bigger and even more complex.", "Another issue of C++ is its long build time (I remember building a CORBA library taking 30 minutes). However, with modern C++ (e.g. C++17) and using principles like Resource Acquisition Is Initialization (RAII), it is comparatively easier to develop Memory safe, Data Race free programming in C++ in comparison to the older version of C++ (e.g. C++98). C++ still lacks language-level support for Message Passing Concurrency (will come in C++20) and Asynchronous event loop based Concurrency.", "Although there are many C++ libraries which supports Message Passing and Asynchronous event loop based Concurrency (legendary Node.js Asynchronous event loop based Concurrency was developed in C++). Learning C++ is difficult. Mastering C++ is even more difficult. But if there is a group of niche, experienced C++ developer, they can build unbeatable frameworks (in any domain including Data Intensive domain). There is the example of a 4 node ScyllaDB (written in C++) which outperforms the 40 node Cassandra (written in Java).", "There was always a search for a dream Programming Language which will give the Performance/Control of near-Metal languages (C, C++) and safety of Runtime languages (Haskell/Python). Finally, Rust looks like \u201cThe Language that Promised\u201d i.e. it gives the Performance/Control like C/C++ with the Safety of Haskell/Python. Inspired by the research programming language Cyclone (safer C), Graydon Hoare first developed Rust as a personal project which was later sponsored by Mozilla with active contribution from David Herman, Brendan Eich (creator of JavaScript) and many others. Rust is a statically typed, compiled System Programming language which supports Functional and Imperative programming paradigm.", "First announced in 2010, its first stable version is released in 2015. With the concept of Ownership and Borrowing, it offers the RAII from language level support and enables memory, thread-safe programming with the speed of C++ without any Garbage Collector or Virtual Machine. What really sets apart RUST from other near Metal languages (e.g. C/C++, Go) is that it gives the compile time safety i.e. if a Code compiles, it will run thread safe and memory safe as discussed in \u201cFearless Concurrency in Rust\u201d. It also offers language level concurrency support for both Shared Memory Concurrency and Message Passing Concurrency (via Channel) although it still lacks Asynchronous event-loop based Concurrency (in development). Here is an excellent talk by Alex Crichton from Mozilla explaining Rust Concurrency:", "Rust also has expressive types and numeric types like ML languages/Haskell and has immutable data structure by default. As a result, it offers excellent functional Concurrency and data Concurrency like ML languages/Haskell. As both Rust and Web Assembly (the next big thing in Browser) are developed by Mozilla, high performant and fast Rust code can directly be converted to Web Assembly to run on Browser. Another very interesting feature is that Rust has self-hosted Compiler i.e. Compiler of Rust is written in Rust (After 23 years, Java not yet has self-hosted Compiler). Rust is also a great language in the Data Intensive domain due to its memory safe, data race free, zero cost abstraction, concurrency features. The Service Mesh platform Linkered is migrated from Scala+Netty+Finagle Stack to Rust and achieved much better performance and resource utilization. The Data Intensive runtime Weld which is written in Rust can give up to 30x performance gain for Data Intensive frameworks (e.g. Spark).", "Go is the second language in this list which has its roots in Bell Labs. Two of the three co-creators of the language: Rob Pike (Plan 9, UTF-8) and Ken Thompson (creator of Unix) worked in Bell labs during the time when Unix, C, C++ was originated there. In the middle of 2000, Google had a huge problem of Scalability: Developer Scalability (1000 of developers can not work on the same codebase efficiently) and Application Scalability (Application cannot be deployed in a Scalable way on 1000 machines). Google also had the issue of integrating fresh graduates with existing multi-million lines complex C++ codebase, high compile time of C++ codebase and some other issues discussed in detail here.", "Finding existing languages (C++, Java) not sufficient to tackle those issues, Google has employed two of the best person in the software industry: Rob Pike and Ken Thompson to create a new language. Go was first announced in 2010 with the first official version released in 2012. Go designers have taken C as their basis and created a simple, productive yet powerful statically typed, compiled, garbage collected System Programming language. Another key feature of Go is that its compile time is very fast and it creates a single executable binary file which also contains Go Runtime and Garbage Collector (few MB) and requires no separate VM. Go also offers CSP based Message Passing Concurrency (Communicating Sequential Processes, originated from Tony Hoare paper) almost like the same way as Erlang.", "Although instead of using Actor and Channel (used by Erlang), Go uses goroutine (lightweight green threads) and channel for Message Passing. Another difference is Erlang uses point-to-point communication between Actors whereas Go uses flexible, indirect communication between goroutines. As a result, Go offers very simple yet extremely scalable Concurrency Model to take advantage of modern Multi-Core processors. Here is an excellent talk about Go\u2019s Concurrency Model by Rob Pike:", "To keep the language simple and productive, Go lacks lots of features like Shared Memory based Concurrency (although Go offers sharing memory between channel with the Moto: \u201cDo not communicate by sharing memory; instead, share memory by communicating\u201d) and many high-level abstractions (e.g. Generics). Backed by Google, Go has been well accepted by the community/industry and has excellent toolings/libraries. Some of the best Infrastructure frameworks (Docker, Kubernetes), as well as Data Intensive frameworks, are developed using Go.", "If you found this helpful, please share it on your favorite forums (Twitter, Facebook, LinkedIn). Comments and constructive criticisms are highly appreciated. Thanks for reading!", "If you are interested in Programming languages, you can also read my following articles:", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Enterprise Architect | Certified AWS/AZURE/GCP Architect | Full-stack | Cloud | Big Data | Follow Me On Twitter: https://twitter.com/KamaruzzMd"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F69a44a36a842&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fback-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fback-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fback-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fback-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----69a44a36a842--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----69a44a36a842--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://md-kamaruzzaman.medium.com/?source=post_page-----69a44a36a842--------------------------------", "anchor_text": ""}, {"url": "https://md-kamaruzzaman.medium.com/?source=post_page-----69a44a36a842--------------------------------", "anchor_text": "Md Kamaruzzaman"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdf4b39a6f082&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fback-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842&user=Md+Kamaruzzaman&userId=df4b39a6f082&source=post_page-df4b39a6f082----69a44a36a842---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F69a44a36a842&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fback-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F69a44a36a842&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fback-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@roblambertjr?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Rob Lambert"}, {"url": "https://unsplash.com/s/photos/metal?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://towardsdatascience.com/programming-language-that-rules-the-data-intensive-big-data-fast-data-frameworks-6cd7d5f754b0", "anchor_text": "Programming language that rules the Data Intensive (Big Data, Fast Data) frameworks"}, {"url": "https://flink.apache.org/news/2015/09/16/off-heap-memory.html", "anchor_text": "Off-Heap memory management"}, {"url": "https://databricks.com/blog/2015/04/28/project-tungsten-bringing-spark-closer-to-bare-metal.html", "anchor_text": "Project Tungsten"}, {"url": "https://github.com/linkerd/linkerd2", "anchor_text": "Linkerd"}, {"url": "https://akka.io/", "anchor_text": "Akka"}, {"url": "https://www.infoworld.com/article/3275924/java/oracle-plans-to-dump-risky-java-serialization.html", "anchor_text": "horrible mistake"}, {"url": "https://en.wikipedia.org/wiki/Dennis_Ritchie", "anchor_text": "Dennis Ritchie"}, {"url": "https://web.archive.org/web/20150806093859/http://www.w3cook.com/os/summary/", "anchor_text": "Linux with around 97% market share"}, {"url": "https://web.archive.org/web/20150806093859/http://www.w3cook.com/os/summary/", "anchor_text": "https://web.archive.org/web/20150806093859/http://www.w3cook.com/os/summary/"}, {"url": "https://thecloudmarket.com/stats#/totals", "anchor_text": "https://thecloudmarket.com/stats#/totals"}, {"url": "https://www.graalvm.org/", "anchor_text": "Virtual Machine GraalVM"}, {"url": "https://wiki.openjdk.java.net/display/zgc/Main", "anchor_text": "Garbage Collector ZGC"}, {"url": "https://en.wikipedia.org/wiki/Bjarne_Stroustrup", "anchor_text": "Bjarne Stroustrup"}, {"url": "https://en.wikipedia.org/wiki/C%2B%2B17", "anchor_text": "C++17"}, {"url": "https://en.cppreference.com/w/cpp/language/raii", "anchor_text": "Resource Acquisition Is Initialization (RAII)"}, {"url": "https://en.wikipedia.org/wiki/C%2B%2B20", "anchor_text": "C++20"}, {"url": "https://www.scylladb.com/product/benchmarks/", "anchor_text": "4 node ScyllaDB (written in C++) which outperforms the 40 node Cassandra (written in Java)"}, {"url": "https://www.infoworld.com/article/3044727/application-development/qa-bjarne-stroustrup-previews-c-17.html", "anchor_text": "Bjarne Stroustrup on C++17"}, {"url": "https://en.wikipedia.org/wiki/C%2B%2B17", "anchor_text": "C++17"}, {"url": "https://www.mongodb.com/", "anchor_text": "MongoDB"}, {"url": "https://www.scylladb.com/", "anchor_text": "ScyllaDB"}, {"url": "https://www.memsql.com/", "anchor_text": "MemSQL"}, {"url": "https://rocksdb.org/", "anchor_text": "RocksDB"}, {"url": "https://www.beegfs.io/content/", "anchor_text": "BeeGFS"}, {"url": "https://thoughtram.io/rust-and-nickel/#/11", "anchor_text": "https://thoughtram.io/rust-and-nickel/#/11"}, {"url": "https://www.haskell.org/", "anchor_text": "Haskell"}, {"url": "https://www.python.org/", "anchor_text": "Python"}, {"url": "https://cyclone.thelanguage.org/", "anchor_text": "Cyclone (safer C)"}, {"url": "https://github.com/graydon", "anchor_text": "Graydon Hoare"}, {"url": "https://en.wikipedia.org/wiki/Brendan_Eich", "anchor_text": "Brendan Eich"}, {"url": "https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html", "anchor_text": "Ownership"}, {"url": "https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html", "anchor_text": "Borrowing"}, {"url": "https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization", "anchor_text": "RAII"}, {"url": "https://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html", "anchor_text": "Fearless Concurrency in Rust"}, {"url": "https://doc.rust-lang.org/book/ch16-02-message-passing.html", "anchor_text": "Message Passing Concurrency (via Channel)"}, {"url": "https://webassembly.org/", "anchor_text": "Web Assembly (the next big thing in Browser)"}, {"url": "https://web.archive.org/web/20140815054745/http://blog.mozilla.org/graydon/2010/1", "anchor_text": "self-hosted Compiler"}, {"url": "https://linkerd.io/", "anchor_text": "Linkered"}, {"url": "https://www.weld.rs/", "anchor_text": "Weld"}, {"url": "https://insights.stackoverflow.com/survey/2016#technology-most-loved-dreaded-and-wanted", "anchor_text": "2016"}, {"url": "https://insights.stackoverflow.com/survey/2017#technology-most-loved-dreaded-and-wanted-languages", "anchor_text": "2017"}, {"url": "https://insights.stackoverflow.com/survey/2018/#most-loved-dreaded-and-wanted", "anchor_text": "2018"}, {"url": "https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/rust-gpp.html", "anchor_text": "Benchmark game"}, {"url": "https://github.com/rust-lang/rfcs/blob/master/text/2394-async_await.md", "anchor_text": "RFC 2394"}, {"url": "https://linkerd.io/", "anchor_text": "Linkerd 2"}, {"url": "https://www.weld.rs/", "anchor_text": "Weld"}, {"url": "https://holochain.org/", "anchor_text": "Holochain"}, {"url": "https://github.com/andygrove/datafusion", "anchor_text": "DataFusion"}, {"url": "https://ceph.com/ceph-storage/file-system/", "anchor_text": "CephFS"}, {"url": "https://en.wikipedia.org/wiki/Rob_Pike", "anchor_text": "Rob Pike"}, {"url": "https://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs", "anchor_text": "Plan 9"}, {"url": "https://en.wikipedia.org/wiki/UTF-8", "anchor_text": "UTF-8"}, {"url": "https://en.wikipedia.org/wiki/Ken_Thompson", "anchor_text": "Ken Thompson"}, {"url": "https://talks.golang.org/2012/splash.article", "anchor_text": "here"}, {"url": "https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf", "anchor_text": "paper"}, {"url": "https://golang.org/ref/mem", "anchor_text": "goroutine (lightweight green threads) and channel"}, {"url": "https://blog.golang.org/share-memory-by-communicating", "anchor_text": "Do not communicate by sharing memory; instead, share memory by communicating"}, {"url": "https://linkerd.io/", "anchor_text": "NATS"}, {"url": "https://github.com/etcd-io/etcd", "anchor_text": "etcd"}, {"url": "https://www.cockroachlabs.com/", "anchor_text": "CockroachDB"}, {"url": "https://www.pachyderm.io/", "anchor_text": "Pachyderm"}, {"url": "https://www.influxdata.com/time-series-platform/influxdb/", "anchor_text": "influxDB"}, {"url": "https://towardsdatascience.com/top-10-in-demand-programming-languages-to-learn-in-2020-4462eb7d8d3e", "anchor_text": "Top 10 In-Demand programming languages to learn in 2020In-depth analysis and ranking of the top programming languages for job seekers and new developerstowardsdatascience.com"}, {"url": "https://md-kamaruzzaman.medium.com/top-10-databases-to-use-in-2021-d7e6a85402ba", "anchor_text": "Top 10 Databases to Use in 2021MySQL, Oracle, PostgreSQL, Microsoft SQL Server, MongoDB, Redis, Elasticsearch, Cassandra, MariaDB, IBM Db2md-kamaruzzaman.medium.com"}, {"url": "https://towardsdatascience.com/programming-language-that-rules-the-data-intensive-big-data-fast-data-frameworks-6cd7d5f754b0", "anchor_text": "Programming language that rules the Data Intensive (Big Data+Fast Data) frameworks.A brief overview on Big Data frameworkstowardsdatascience.com"}, {"url": "https://medium.com/tag/big-data?source=post_page-----69a44a36a842---------------big_data-----------------", "anchor_text": "Big Data"}, {"url": "https://medium.com/tag/golang?source=post_page-----69a44a36a842---------------golang-----------------", "anchor_text": "Golang"}, {"url": "https://medium.com/tag/nosql?source=post_page-----69a44a36a842---------------nosql-----------------", "anchor_text": "NoSQL"}, {"url": "https://medium.com/tag/cplusplus?source=post_page-----69a44a36a842---------------cplusplus-----------------", "anchor_text": "Cplusplus"}, {"url": "https://medium.com/tag/rust?source=post_page-----69a44a36a842---------------rust-----------------", "anchor_text": "Rust"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F69a44a36a842&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fback-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842&user=Md+Kamaruzzaman&userId=df4b39a6f082&source=-----69a44a36a842---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F69a44a36a842&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fback-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842&user=Md+Kamaruzzaman&userId=df4b39a6f082&source=-----69a44a36a842---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F69a44a36a842&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fback-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----69a44a36a842--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F69a44a36a842&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fback-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----69a44a36a842---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----69a44a36a842--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----69a44a36a842--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----69a44a36a842--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----69a44a36a842--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----69a44a36a842--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----69a44a36a842--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----69a44a36a842--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----69a44a36a842--------------------------------", "anchor_text": ""}, {"url": "https://md-kamaruzzaman.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://md-kamaruzzaman.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Md Kamaruzzaman"}, {"url": "https://md-kamaruzzaman.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "3.6K Followers"}, {"url": "https://twitter.com/KamaruzzMd", "anchor_text": "https://twitter.com/KamaruzzMd"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdf4b39a6f082&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fback-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842&user=Md+Kamaruzzaman&userId=df4b39a6f082&source=post_page-df4b39a6f082--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F4535c0a58a17&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fback-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842&newsletterV3=df4b39a6f082&newsletterV3Id=4535c0a58a17&user=Md+Kamaruzzaman&userId=df4b39a6f082&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}