{"url": "https://towardsdatascience.com/deploy-a-pre-trained-tensorflow-js-model-using-node-in-cloud-run-91875693911", "time": 1683017220.6238458, "path": "towardsdatascience.com/deploy-a-pre-trained-tensorflow-js-model-using-node-in-cloud-run-91875693911/", "webpage": {"metadata": {"title": "Deploy a pre-trained TensorFlow.js model using Node in Cloud Run | by Juan De Dios Santos | Towards Data Science", "h1": "Deploy a pre-trained TensorFlow.js model using Node in Cloud Run", "description": "Like a broken record, I often find myself repeating the phrase \u201ca deployed machine learning model is a happy model.\u201d While a bit inaccurate (because models don\u2019t have feelings yet), the idea behind\u2026"}, "outgoing_paragraph_urls": [{"url": "https://nodejs.org/en/download/.", "anchor_text": "https://nodejs.org/en/download/.", "paragraph_index": 8}, {"url": "https://cloud.google.com/run/docs/reference/container-contract#env-vars", "anchor_text": "Cloud Run exposes that port", "paragraph_index": 11}, {"url": "https://expressjs.com/en/api.html#express.json", "anchor_text": "here", "paragraph_index": 12}, {"url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise", "anchor_text": "Promise", "paragraph_index": 13}, {"url": "http://localhost:8080/prediction", "anchor_text": "http://localhost:8080/prediction", "paragraph_index": 16}, {"url": "https://hub.docker.com/_/node", "anchor_text": "Node", "paragraph_index": 19}, {"url": "https://cloud.google.com/sdk/gcloud", "anchor_text": "https://cloud.google.com/sdk/gcloud", "paragraph_index": 20}, {"url": "https://node-toxic-service-sfy7qphkba-ue.a.run.app", "anchor_text": "https://node-toxic-service-sfy7qphkba-ue.a.run.app", "paragraph_index": 21}, {"url": "https://github.com/juandes/tf-js-examples/tree/main/node-od-service", "anchor_text": "https://github.com/juandes/tf-js-examples/tree/main/node-od-service", "paragraph_index": 25}, {"url": "https://www.apress.com/us/book/9781484262726", "anchor_text": "Practical TensorFlow.js", "paragraph_index": 27}, {"url": "https://juandes.com", "anchor_text": "https://juandes.com", "paragraph_index": 29}], "all_paragraphs": ["Like a broken record, I often find myself repeating the phrase \u201ca deployed machine learning model is a happy model.\u201d While a bit inaccurate (because models don\u2019t have feelings yet), the idea behind this thought is that \u2014 and this is my opinion \u2014 an ML model shines when it is accessible and deployed out there.", "This article shows how to deploy a pre-trained toxicity detection model in TensorFlow.js using Node.js and Google Cloud\u2019s Cloud Run. But before getting there, let me describe the tools we will use.", "TensorFlow.js is TensorFlow JavaScript\u2019s counterpart library for the training, execution, and deployment of machine learning models. Being a JavaScript library allows us not just to execute it in the browser but also as a backend application using Node.js, which is the example we\u2019ll see here today.", "TensorFlow.js comes with several pre-trained models that function out of the box. These models support a range of use cases, including object detection, image classification, word embedding, and the one we will use, the text toxicity detection model.", "The toxicity detection model is a pre-trained model that detects six types of toxicity content, plus an overall toxicity class, from a string. The six types are identity attack, insult, obscene, severe toxicity, sexually explicit, and threat. For example, according to the model, the line \u201cyou suck\u201d is an insult and overall toxic.", "Cloud Run is Google Cloud\u2019s service for developing scalable containerized applications on a managed serverless platform. Its major feature \u2014 I would say \u2014 is how it simplifies the container creation process (they describe it as \u201ccontainer to production in seconds\u201d) and how it automatically manages the infrastructure and management of the container.", "The service is not free. However, Google Cloud\u2019s free tier offers 180,000 vCPU-seconds free per month, 2 million requests and 1 GiB of networking (within North America). So more than enough for a prototype project. Another cost to consider is that of the Container Registry you need to upload the Docker image. The prices start at $0.020 per GB per month.", "The application we will build is a web service on Node.js that serves the toxicity detection model. Exposing the model will allow the user to make predictions via a POST call to the service. After writing the app, we will deploy it on Cloud Run.", "Let\u2019s start the tutorial by installing Node.js into our machines \u2014 you can find the instructions at https://nodejs.org/en/download/. Once downloaded, create a working directory at your preferred location. Then in that location, create a package.json file \u2014 a document containing metadata about the project \u2014 and copy:", "The first three keys are the project\u2019s name, version, and description. Following them is the scripts property, a dictionary of commands. In our case, we have the key serve whose value is node index.js, meaning that executing npm run serve will run node index.js; you can see it as an alias. Here, the aliased command is shorter than npm run serve but if you would have a longer command instead, then you will appreciate having the shortcut. Last, we have the project's dependencies. These are tensorflow/tfjs-node (the Node.js variant of TensorFlow.js), tensorflow-models/toxicity (the toxicity model), express, a framework for making web applications. After defining the file, run npm i to install the dependencies.", "Next, create a new file and name it index.js \u2014 we will write the service here. The code below is the complete program:", "The first three lines load the required libraries. Then, we define two constant variables, threshold, the model's minimum prediction confidence, and port, the port we will use to listen for the requests, whose value is that of the environmental variable PORT or 8080. Why are we reading PORT? That's because, by default, Cloud Run exposes that port.", "After the variables, we have the program\u2019s main and only function, runServer(). At the start of it, we are loading the toxicity model (with only one line!) with an argument threshold. Following it, we create the web server with express and use the method app.use(express.json()) to parse incoming JSON requests (you can find the documentation here). Below this line, we create the service's only (POST) endpoint /prediction and its handler function.", "Inside the handler function, we use the model\u2019s classify() method with an argument that's a list containing the request's sentence property; you can name the property however you want, just make sure that your request JSON has the same. Now you might ask? Why is the argument a list and not a string? (I also wondered the same). That's because the model can predict the toxicity of more than one sentence at a time. But for simplicity, I'm using one. Speaking of simplicity, note that we are not doing any form of pre-check of the string. In a real or production setting, we should at least make sure the field (sentence, here) exists and that its value is not an empty string (unless you consider that something toxic :)). Right after classify(), we're using the method then() (which returns a Promise) with a callback function that uses the returned predictions object from classify() to send the requested prediction to the user.", "The JSON returned by classify() has a key prediction, with a list of the labels (the toxicity types) and another key results whose values are the probabilities of the sentence having that label and match, a boolean that's true if the probability of the sentence belonging to the label is above the threshold. Below is the model's output after predicting with the phrase \"you are awful.\"", "Back in the runServer() function, after app.post(), we have the method app.listen() to listen on the established port. Then, at the very end of the script, we call runServer(). And that's the service!", "To test it, go to the terminal and in the project\u2019s directory, execute npm run serve to launch the service. When it starts, wait a few seconds while the program downloads the model, and then execute the following cURL command curl -X POST \"http://localhost:8080/prediction\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d '{\"sentence\":\"you are awful\"}' to predict (please make sure the port is the same one from the code). The response should be like the JSON above.", "Did it work? Great! Now that we have the system running on our local environment let\u2019s take a flight and put it up in the cloud. (I haven\u2019t been on an airplane in months, and I kinda miss it, so sorry for the silly joke).", "Deploying the service in Cloud Run is \u2014 in my opinion \u2014 a straightforward process that requires a few steps. The first is creating the Dockerfile that dockerizes the application. Mine looks like this:", "In the first line, we are selecting the base image, and that\u2019s Node. Following this, we set the working directory, copy the package.json and package-lock.json file, and run the command npm install to install the dependencies (just like we did before). Last, we copy the rest of the directory and execute the command node index.js to start the service. Here are two things that you may find strange. First is copying the package.json(s) files and, second, running node index.js instead of npm run serve; the former one is because I prefer first installing the dependencies before copying the rest, and the latter is to make the Dockerfile more readable\u2014it is easier to understand what node index.js is than npm run serve. Besides this, I'm using a .dockerignore file to avoid copying the Dockerfile and node_modules/ directory.", "The second step is building the container using Google\u2019s Cloud Build and adding it to the Container Registry (the \u201cplace\u201d where your store Docker images). You can do so with the instruction gcloud builds submit --tag gcr.io/your-gcp-project/node-toxic-service, where your-gcp-project is your Google Cloud's project. Keep in mind you need to have installed Google Cloud's Command Line Tool (gcloud). For a \"how-to,\" please see the following resource: https://cloud.google.com/sdk/gcloud.", "Last, we deploy to Cloud Run using gcloud run deploy --image gcr.io/your-gcp-project/node-toxic-service --platform managed. After running it, the tool will ask you to specify the Google Cloud location of choice and whether you want to allow unauthenticated invocations to the service. I selected no. When done, it will print out the address where the service is. Mine is https://node-toxic-service-sfy7qphkba-ue.a.run.app, and yes, the service is up in case you want to try it (please don't abuse it!). And with that, we finish!", "To test the service, use the same cURL command from before but replacing the localhost address with yours and removing the port number. Like this:", "If you try mine and it is inactive (because it has received no requests), the response might be \u201cService Unavailable.\u201d If so, give it a few seconds or a minute before trying again.", "A deployed ML model is a happy model. Or so I believe. Therefore, I like to try alternative ways of deploying and serving my models. This article explains how we can deploy a Node.js service that uses TensorFlow.js and its pre-trained toxicity detector model in Google Cloud. First, we built the service, which uses the express library for the web service layer. Then, we wrote a Dockerfile for containerizing the application before adding it to Cloud Run.", "You can the complete source code on my GitHub at https://github.com/juandes/tf-js-examples/tree/main/node-od-service.", "What will you build with it? Please share it with me!", "Shameless plug: For more TensorFlow.js, check out my book about TensorFlow.js, named Practical TensorFlow.js (Apress, 2020).", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data storyteller, Trust and Safety Software Engineer, and fan of quantifying my life. Also, I like Pokemon. https://juandes.com, @jdiossantos."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F91875693911&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-a-pre-trained-tensorflow-js-model-using-node-in-cloud-run-91875693911&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-a-pre-trained-tensorflow-js-model-using-node-in-cloud-run-91875693911&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-a-pre-trained-tensorflow-js-model-using-node-in-cloud-run-91875693911&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-a-pre-trained-tensorflow-js-model-using-node-in-cloud-run-91875693911&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----91875693911--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----91875693911--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@juandes?source=post_page-----91875693911--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@juandes?source=post_page-----91875693911--------------------------------", "anchor_text": "Juan De Dios Santos"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9b9998a144da&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-a-pre-trained-tensorflow-js-model-using-node-in-cloud-run-91875693911&user=Juan+De+Dios+Santos&userId=9b9998a144da&source=post_page-9b9998a144da----91875693911---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F91875693911&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-a-pre-trained-tensorflow-js-model-using-node-in-cloud-run-91875693911&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F91875693911&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-a-pre-trained-tensorflow-js-model-using-node-in-cloud-run-91875693911&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@benwhitephotography?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Ben White"}, {"url": "https://unsplash.com/s/photos/giving?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://unsplash.com/@bthjnr?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Beth Jnr"}, {"url": "https://unsplash.com/s/photos/toxic?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://nodejs.org/en/download/.", "anchor_text": "https://nodejs.org/en/download/."}, {"url": "https://cloud.google.com/run/docs/reference/container-contract#env-vars", "anchor_text": "Cloud Run exposes that port"}, {"url": "https://expressjs.com/en/api.html#express.json", "anchor_text": "here"}, {"url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise", "anchor_text": "Promise"}, {"url": "http://localhost:8080/prediction", "anchor_text": "http://localhost:8080/prediction"}, {"url": "https://unsplash.com/@dpascoa?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Daniel P\u00e1scoa"}, {"url": "https://unsplash.com/s/photos/clouds?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://hub.docker.com/_/node", "anchor_text": "Node"}, {"url": "https://cloud.google.com/sdk/gcloud", "anchor_text": "https://cloud.google.com/sdk/gcloud"}, {"url": "https://node-toxic-service-sfy7qphkba-ue.a.run.app", "anchor_text": "https://node-toxic-service-sfy7qphkba-ue.a.run.app"}, {"url": "https://node-toxic-service-sfy7qphkba-ue.a.run.app/prediction", "anchor_text": "https://node-toxic-service-sfy7qphkba-ue.a.run.app/prediction"}, {"url": "https://github.com/juandes/tf-js-examples/tree/main/node-od-service", "anchor_text": "https://github.com/juandes/tf-js-examples/tree/main/node-od-service"}, {"url": "https://www.apress.com/us/book/9781484262726", "anchor_text": "Practical TensorFlow.js"}, {"url": "https://medium.com/tag/programming?source=post_page-----91875693911---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-science?source=post_page-----91875693911---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/javascript?source=post_page-----91875693911---------------javascript-----------------", "anchor_text": "JavaScript"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----91875693911---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/tag/tensorflow?source=post_page-----91875693911---------------tensorflow-----------------", "anchor_text": "TensorFlow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F91875693911&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-a-pre-trained-tensorflow-js-model-using-node-in-cloud-run-91875693911&user=Juan+De+Dios+Santos&userId=9b9998a144da&source=-----91875693911---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F91875693911&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-a-pre-trained-tensorflow-js-model-using-node-in-cloud-run-91875693911&user=Juan+De+Dios+Santos&userId=9b9998a144da&source=-----91875693911---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F91875693911&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-a-pre-trained-tensorflow-js-model-using-node-in-cloud-run-91875693911&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----91875693911--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F91875693911&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-a-pre-trained-tensorflow-js-model-using-node-in-cloud-run-91875693911&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----91875693911---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----91875693911--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----91875693911--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----91875693911--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----91875693911--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----91875693911--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----91875693911--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----91875693911--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----91875693911--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@juandes?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@juandes?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Juan De Dios Santos"}, {"url": "https://medium.com/@juandes/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "882 Followers"}, {"url": "https://juandes.com", "anchor_text": "https://juandes.com"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9b9998a144da&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-a-pre-trained-tensorflow-js-model-using-node-in-cloud-run-91875693911&user=Juan+De+Dios+Santos&userId=9b9998a144da&source=post_page-9b9998a144da--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F8e4ad12e7160&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-a-pre-trained-tensorflow-js-model-using-node-in-cloud-run-91875693911&newsletterV3=9b9998a144da&newsletterV3Id=8e4ad12e7160&user=Juan+De+Dios+Santos&userId=9b9998a144da&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}