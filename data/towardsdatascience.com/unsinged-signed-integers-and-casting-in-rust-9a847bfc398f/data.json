{"url": "https://towardsdatascience.com/unsinged-signed-integers-and-casting-in-rust-9a847bfc398f", "time": 1683011494.15347, "path": "towardsdatascience.com/unsinged-signed-integers-and-casting-in-rust-9a847bfc398f/", "webpage": {"metadata": {"title": "What You Should Know About Unsigned, Signed Integers and Casting in Rust | by Shinichi Okada | Jul, 2020 | Towards Data Science | Towards Data Science", "h1": "What You Should Know About Unsigned, Signed Integers and Casting in Rust", "description": "Rust has two data type subsets, scalar, and compound. The scalar types are integers, floating numbers, Booleans, and characters. The compound types are arrays and tuples. To understand better about the casting, we need to review about Signed, Ones' Complement and Two's Complement."}, "outgoing_paragraph_urls": [{"url": "https://doc.rust-lang.org/book/ch03-02-data-types.html", "anchor_text": "data type subsets", "paragraph_index": 0}, {"url": "https://doc.rust-lang.org/reference/expressions/operator-expr.html", "anchor_text": "unary operators", "paragraph_index": 8}, {"url": "https://www.wikiwand.com/en/Signed_number_representations#Sign-and-magnitude_method", "anchor_text": "sign-and-magnitude", "paragraph_index": 10}, {"url": "https://www.wikiwand.com/en/Signed_number_representations#Ones%27_complement", "anchor_text": "ones\u2019 complement", "paragraph_index": 10}, {"url": "https://www.wikiwand.com/en/Signed_number_representations#Two%27s_complement", "anchor_text": "two\u2019s complement", "paragraph_index": 10}, {"url": "https://doc.rust-lang.org/rust-by-example/types/cast.html", "anchor_text": "Casting", "paragraph_index": 24}, {"url": "https://doc.rust-lang.org/std/keyword.as.html", "anchor_text": "as", "paragraph_index": 25}, {"url": "https://doc.rust-lang.org/std/keyword.as.html", "anchor_text": "keyword", "paragraph_index": 25}, {"url": "https://blog.codewithshin.com/membership", "anchor_text": "becoming a member", "paragraph_index": 38}], "all_paragraphs": ["Rust has two data type subsets, scalar, and compound. The scalar types are integers, floating numbers, Booleans, and characters. The compound types are arrays and tuples.", "In this article we are going to see why the following code fails:", "To understand better about the casting, we need to review Signed, Ones\u2019 Complement, and Two\u2019s Complement.", "We will also cover adding a negative number, bitwise negation, and converting a binary to an unsigned and signed decimal.", "Let\u2019s start with Rust integer types first.", "Unsigned integer types in Rust start with u and it has 8, 16, 32, 64, and 128-bit. The minimum and maximum values are from 0 to 2\u207f-1.", "For example u8 has 0 to 2\u2078-1, which is 255. The following table shows all the details for unsigned integers.", "If you try to assign a negative number to an unsigned type, it will fail.", "- is one of Rust's unary operators and it is the negation operator for signed integer types and floating-point types.", "The default integer type in Rust is i32. Signed integer types in Rust start with i and it has 8, 16, 32, 64, and 128-bit. The minimum and maximum values are from -(2\u207f\u207b\u00b9) to 2\u207f\u207b\u00b9-1. The -1 in the n-1 is the sign bit (positive or negative), which we cover in the next section.", "In computing, signed number representations are required to encode negative numbers in binary number systems. Let\u2019s examine sign-and-magnitude, ones\u2019 complement, and two\u2019s complement.", "Sign-and-Magnitude is also called Signed Magnitude. The first bit (called the most significant bit or MSB) tells if it is positive by 0 or a negative by 1. The rest is called magnitude bits.", "As I mentioned it before that signed integer types have the min and the max from -(2\u207f\u207b\u00b9) to 2\u207f\u207b\u00b9-1 where n stands for the number of bits. Since we use the first bit for the positive and negative signs we have n-1 in the 2\u207f\u207b\u00b9.", "As you see in the diagram above, the positive and the negative have the same digits except for the sign bit.", "The problem of the signed magnitude is that there are two zeros, 0000 and 1000.", "The first bit (MSB) is the same as the signed magnitude. It tells a positive by 0 or negative by 1. The rest of the bits will take the compliment, which means if it is 1 the complement is 0 and if it is 0, then the complement is 1.", "The signed ones\u2019 complement has the same problem as the signed magnitude. There are two zeros, 0000 and 1111.", "In the binary numbering system, the radix (base) is two. That\u2019s why the radix complement is called two\u2019s complement and the diminished radix complement is called ones\u2019 complement.", "Two\u2019s complement can avoid multiple representations of 0, and it avoids keeping track of carrying bits in case of overflow.", "We again use the first bit (MSB) for the + and - signs. We take the complement of the number and we add 1 to get the opposite number. This works from positive to negative and vice versa.", "For zero that is 0000 in the binary, the complement is 1111 and adding 1 results in 1 0000. The 1 is called an \"overflow\" bit. Overflow occurs when the sum of the most significant (left-most) column produces a carry forward. This overflow or carry bit can be ignored.", "The following table shows the comparison of three signed number representations.", "Now let\u2019s compare negative numbers of signed two\u2019s complement from the above table (from -1 to -7) to Rust\u2019s signed integers.", "They are exactly the same except Rust uses the default 32-bit. Rust\u2019s signed integer types are called the signed two\u2019s complement integer types.", "Casting means changing the data type of a piece of data from one type to another.", "as keyword turns primitive types into other primitive types. We can use as keyword to solve the code in the introduction.", "When you cast from a small length to a larger length, for example from 8-bit to 16-bit, there won\u2019t be any problem but when you cast down, you may have a problem.", "When you cast to an unsigned type, T, T::MAX + 1 is added or subtracted until the value fits into the new type.", "This is the same as above but you need to be aware that the min/max number of the data type.", "i8's min and max numbers are -128 and 127. So the number needs to be between them.", "When the MSB within 8-bit is 0, it is a positive number. Then take the first 8 least significant bits (LSB).", "Rust uses ! for the Bitwise Negation (Bitwise NOT). This produces different results depends on the type.", "As you see !2 with the unsigned type returns 4294967293 and with the signed type returns -3.", "The bitwise negation on a signed integer returns the two\u2019s complement as we saw previously in Rust signed two\u2019s complement integer types.", "The subtraction is the same as adding a negative number.", "This applies to binary as well.", "We covered Rust integer types, three types of signed binary numbers, casting to an unsigned type and a signed type. I hope you have a better idea of what\u2019s going on when you are dealing with Rust integers and casting.", "Please stay tuned for the next post.", "Get full access to every story on Medium by becoming a member.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "A programmer and technology enthusiast with a passion for sharing my knowledge and experience."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F9a847bfc398f&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funsinged-signed-integers-and-casting-in-rust-9a847bfc398f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funsinged-signed-integers-and-casting-in-rust-9a847bfc398f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funsinged-signed-integers-and-casting-in-rust-9a847bfc398f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funsinged-signed-integers-and-casting-in-rust-9a847bfc398f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://me.dm/@shinichiokada", "anchor_text": "Mastodon"}, {"url": "https://towardsdatascience.com/?source=post_page-----9a847bfc398f--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9a847bfc398f--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://blog.codewithshin.com/?source=post_page-----9a847bfc398f--------------------------------", "anchor_text": ""}, {"url": "https://blog.codewithshin.com/?source=post_page-----9a847bfc398f--------------------------------", "anchor_text": "Shinichi Okada"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa262a804b78f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funsinged-signed-integers-and-casting-in-rust-9a847bfc398f&user=Shinichi+Okada&userId=a262a804b78f&source=post_page-a262a804b78f----9a847bfc398f---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9a847bfc398f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funsinged-signed-integers-and-casting-in-rust-9a847bfc398f&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9a847bfc398f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funsinged-signed-integers-and-casting-in-rust-9a847bfc398f&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "http://www.freepik.com", "anchor_text": "Freepik"}, {"url": "https://doc.rust-lang.org/book/ch03-02-data-types.html", "anchor_text": "data type subsets"}, {"url": "https://tech.io/snippet/TlBrkrg", "anchor_text": "Try this Rust lang code online."}, {"url": "https://towardsdatascience.com/learning-rust-by-converting-python-to-rust-259e735591c6", "anchor_text": "Learning Rust by Converting Python to RustBeginners Tutorial for Rust Basicstowardsdatascience.com"}, {"url": "https://tech.io/snippet/wZSxuY6", "anchor_text": "Try this Rust lang code online."}, {"url": "https://doc.rust-lang.org/reference/expressions/operator-expr.html", "anchor_text": "unary operators"}, {"url": "https://tech.io/snippet/TkY8QAO", "anchor_text": "Try this Rust lang code online."}, {"url": "https://www.wikiwand.com/en/Signed_number_representations#Sign-and-magnitude_method", "anchor_text": "sign-and-magnitude"}, {"url": "https://www.wikiwand.com/en/Signed_number_representations#Ones%27_complement", "anchor_text": "ones\u2019 complement"}, {"url": "https://www.wikiwand.com/en/Signed_number_representations#Two%27s_complement", "anchor_text": "two\u2019s complement"}, {"url": "https://tech.io/snippet/mI3rvun", "anchor_text": "Try this Rust lang code online."}, {"url": "https://doc.rust-lang.org/rust-by-example/types/cast.html", "anchor_text": "Casting"}, {"url": "https://doc.rust-lang.org/std/keyword.as.html", "anchor_text": "as"}, {"url": "https://doc.rust-lang.org/std/keyword.as.html", "anchor_text": "keyword"}, {"url": "https://tech.io/snippet/Fy9iH89", "anchor_text": "Try this Rust lang code online."}, {"url": "https://tech.io/snippet/Ln7SgIv", "anchor_text": "Try this Rust lang code online."}, {"url": "https://tech.io/snippet/Rmafm8K", "anchor_text": "Try this Rust lang code online."}, {"url": "https://tech.io/snippet/sefhUMo", "anchor_text": "Try this Rust lang code online."}, {"url": "https://tech.io/snippet/9d6KeRo", "anchor_text": "Try this Rust lang code online."}, {"url": "https://blog.codewithshin.com/membership", "anchor_text": "becoming a member"}, {"url": "https://blog.codewithshin.com/subscribe", "anchor_text": "https://blog.codewithshin.com/subscribe"}, {"url": "https://towardsdatascience.com/you-want-to-learn-rust-but-you-dont-know-where-to-start-fc826402d5ba", "anchor_text": "You Want to Learn Rust but You Don\u2019t Know Where to StartA Complete Resource for Rust Beginnerstowardsdatascience.com"}, {"url": "https://medium.com/tag/rust?source=post_page-----9a847bfc398f---------------rust-----------------", "anchor_text": "Rust"}, {"url": "https://medium.com/tag/programming?source=post_page-----9a847bfc398f---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/rustlang?source=post_page-----9a847bfc398f---------------rustlang-----------------", "anchor_text": "Rustlang"}, {"url": "https://medium.com/tag/software-development?source=post_page-----9a847bfc398f---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/data-type?source=post_page-----9a847bfc398f---------------data_type-----------------", "anchor_text": "Data Type"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9a847bfc398f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funsinged-signed-integers-and-casting-in-rust-9a847bfc398f&user=Shinichi+Okada&userId=a262a804b78f&source=-----9a847bfc398f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9a847bfc398f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funsinged-signed-integers-and-casting-in-rust-9a847bfc398f&user=Shinichi+Okada&userId=a262a804b78f&source=-----9a847bfc398f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9a847bfc398f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funsinged-signed-integers-and-casting-in-rust-9a847bfc398f&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9a847bfc398f--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F9a847bfc398f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funsinged-signed-integers-and-casting-in-rust-9a847bfc398f&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----9a847bfc398f---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----9a847bfc398f--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----9a847bfc398f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----9a847bfc398f--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----9a847bfc398f--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----9a847bfc398f--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----9a847bfc398f--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----9a847bfc398f--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----9a847bfc398f--------------------------------", "anchor_text": ""}, {"url": "https://blog.codewithshin.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://blog.codewithshin.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Shinichi Okada"}, {"url": "https://blog.codewithshin.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "3.3K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa262a804b78f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funsinged-signed-integers-and-casting-in-rust-9a847bfc398f&user=Shinichi+Okada&userId=a262a804b78f&source=post_page-a262a804b78f--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fbea6b9a08c54&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funsinged-signed-integers-and-casting-in-rust-9a847bfc398f&newsletterV3=a262a804b78f&newsletterV3Id=bea6b9a08c54&user=Shinichi+Okada&userId=a262a804b78f&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}