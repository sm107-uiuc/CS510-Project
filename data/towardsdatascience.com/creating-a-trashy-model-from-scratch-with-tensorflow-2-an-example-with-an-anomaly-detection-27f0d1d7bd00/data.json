{"url": "https://towardsdatascience.com/creating-a-trashy-model-from-scratch-with-tensorflow-2-an-example-with-an-anomaly-detection-27f0d1d7bd00", "time": 1683004153.0503712, "path": "towardsdatascience.com/creating-a-trashy-model-from-scratch-with-tensorflow-2-an-example-with-an-anomaly-detection-27f0d1d7bd00/", "webpage": {"metadata": {"title": "How to create a TensorFlow 2 model from scratch \u2014 A \u201ctrashy\u201d example. | by Daniel Wiczew | Towards Data Science", "h1": "How to create a TensorFlow 2 model from scratch \u2014 A \u201ctrashy\u201d example.", "description": "The TensorFlow 2 (TF2) framework allows for creating complicated models that could be used easily in your project. So let\u2019s take the required stuff with us (TF2 and Python 3) and move into the depths\u2026"}, "outgoing_paragraph_urls": [{"url": "https://en.wikipedia.org/wiki/Autoencoder", "anchor_text": "here", "paragraph_index": 1}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/layers/Lambda", "anchor_text": "here", "paragraph_index": 4}, {"url": "https://en.wikipedia.org/wiki/Anomaly_detection", "anchor_text": "here", "paragraph_index": 7}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator", "anchor_text": "here", "paragraph_index": 9}, {"url": "https://www.quora.com/How-exactly-do-data-augmentation-techniques-like-mirroring-and-cropping-reduce-overfitting/answer/Shehroz-Khan-2", "anchor_text": "here", "paragraph_index": 9}, {"url": "https://github.com/DanielWicz/trashanomaly", "anchor_text": "which is here", "paragraph_index": 10}, {"url": "https://www.tensorflow.org/tutorials/customization/custom_training_walkthrough", "anchor_text": "here", "paragraph_index": 19}, {"url": "https://scikit-learn.org/stable/modules/mixture.html", "anchor_text": "here", "paragraph_index": 23}], "all_paragraphs": ["The TensorFlow 2 (TF2) framework allows for creating complicated models that could be used easily in your project. So let\u2019s take the required stuff with us (TF2 and Python 3) and move into the depths of the topic.", "In TF2 the model is built using the Model class in the Keras wrapper of the framework. But before writing the code, try to divide your model into usable pieces. Let\u2019s take as an example in the article an Auto-encoder, if you don\u2019t know what is this read the Wikipedia article here. Going back to the model, you could build your model as a whole auto-encoder, yet most probably you won\u2019t use it like that. You will use most probably the encoder part or decoder part alone. So let\u2019s divide the model into two parts, Encoder and Decoder, the same names are going to be used further in the code.", "The best way is to divide the model into the functional parts that serve some specific functions, for example, one encodes something while another predicts or decodes. It does not make a problem during the model training that consists of few pieces (defined as Model\u2019s class in objects) using a custom training loop (you will see further in the article).", "Building a model is quite simple, you just inherit the Model class from the tf.keras library. The class two necessary methods \u2014 __init__ and call (why not __call__ is explained at the end of the story).", "The __init__ method contains all the layers and operations that are going to be performed in the call method. For example all the neural network layers for the auto-encoder, or some constants that are going to be initiated before performing any operations. The important note here is that all the layers must be inherited from the Layer class, thus if you want to make some TensorFlow operation (like tf.math.reduce_sum()), you must use the Lambda layer (more here). Another solution is to perform the operation inside the call method. Also remember that if you define something in the __init__ method, then you should point to the instance of the model\u2019s class \u2014 i.e. self keyword. Otherwise, they won\u2019t be available in the call method, e.g. self.layer_1 = tf.keras.layers.Dense(5).", "Regarding the call method, there you define all the operations that are performed on the input data using objects defined in the __init__ method. In the call`s arguments list, you can define as many arguments as you need. The most basic one is input which for feeding data into the model. The other argument which is not always mandatory but makes life complicated if you\u2019re not aware of him is training. The argument should be further passed to layers like BatchNormalization and Dropout after their creation because their behavior is far different in the training phase and test/validation phase.", "After creating your model you simply create it as a Python object, like model = ExampleModel(). If there are some parameters, i.e. number of neurons or layers, you pass them while creating the model object as specified in the __init__ method. You will that in a case study below. Then if you want to make a prediction, you simply call the model i.e. model(input) and it outputs the processed input as defined in the call method.", "So let\u2019s make an example together to extend your knowledge. Imagine that you\u2019re in a plastic recycling company, most of the time you\u2019re doing a boring job of detecting non-plastic-bottle trash on the production line. But you found an article about detecting images with machine learning, you started learning it to solve the problem. Since the non-plastic-bottle items are quite diverse it is hard to classify them \u2014 you could have a bottle, but also a foil or can, maybe some vegetables or something unspecified. So you focus on detecting everything which is not a plastic bottle. Thus you decided to use anomaly detection (more here), and you want to detect non-plastic-bottle trash as an anomaly. You learned after few weeks TF2 and started thinking about the model. First, you gathered some plastic bottle trash images from the internet. You took 908 plastic bottle images and divided them into a train (827) and a test (81) dataset. Also. you found some non-plastic trash images and marked them as a negative test (also 81).", "To summarize the problem, we have to detect if the trash image is a plastic bottle or not. To do so we have collected to this point 908 plastic-bottle images and 81 non-plastic for a test. The images you can find in my Github repository, created especially for the article, you can open is for example in the Google Collab.", "Also, it is important to note that you have only 827 training images which are rather a small number, so you are going to apply an image augmentation to these images \u2014 a technique that perturbate the images a bit to make them a bit different for neural network, but I won\u2019t go into detail here you can read more here and here.", "Before that it would be best if you open the Jupyter notebook from my Github repository (which is here), yet if you\u2019re reading it from a phone \u2014 still there are code snippets to understand the problem. Nevertheless, first let\u2019s define the model on the paper:", "As you can see there are two parts \u2014 encoder and decoder (see at the left), but let\u2019s move to the code, and see how the model is constructed. It is a bit long due to stacking several layers, so you will be forced to move to Github\u2019s website for the gist or better \u2014 open the Jupyter notebook.", "The code follows the same scheme as with the ExampleModel, inheritance of tf.keras.Model, __init__ method and __call__ method. As you can see all the layer\u2019s parameters are defined inside the __init__ method. Regarding the call method, take a look at the training=False, and that the argument\u2019s value is further passed to the BatchNormalization layers. It ensures that the layer is in the training mode during training and in the evaluation mode during testing/validation. Further, I always set its default value to False to ensure that after training won\u2019t mistakenly pass True to the BatchNorm or Dropout layers (which are not in the model).", "Let\u2019s also analyse the decoder\u2019s model code:", "It looks almost the same but reversed. Take look at the default parameters in the __init__ method that are reverse of the auto-encoder except for the last layer which reconstructs the image.", "Now it is time to create the model, it is really simple \u2014 just as with the example you just create an instance of the model\u2019s class:", "At the moment you can try to use the encoder and decoder with an image( just like: encode(image_variable)). the results should be random noise because weights are initialized as a random. Nevertheless, the image should have the same size as the one which is going to be used during the training, because the weights\u2019 shape is initialized based on the dimension of the first pass. I will get deep into it at the end of the article.", "To train the model we will use a custom training loop. Let\u2019s throw the code on the table first:", "The code literally iterates through all the epochs (first loop) and then through all batches, where each batch is passed to the train_step functions, which is shown below.", "And the train_step function passes one batch of images to the encoder, then the latent variable from the encoder is passed to the decoder and loss is calculated. Then the gradient is evaluated with the gradient and applied with the apply_gradient. The whole process is in the context of the GradientTape which records all the operations during the forward pass and performs backpropagation after applying the gradient method. I won\u2019t go into detail much here More about building custom training loops in TF2 you can at Google\u2019s Tensorflow 2 website here. Yet pay attention to the training=True, if you won\u2019t define it, the batch normalization layers won\u2019t train. Furthermore, it is really hard to detect if it is not set to True, there is no error nor any specific behavior. So you have to be careful with the one argument. If you want to play with the code, check the Jupyter notebook that I mentioned earlier.", "Okay, but where is the anomaly detection \u2026? We\u2019re still bored watching all the plastic bottles on the line. It starts here!", "Since auto-encoder clusters similar data in the latent space, you can use the latent vector (the one generated from the encoder) for anomaly detection. Let\u2019s perform PCA (Principal Component Analysis) on the test examples (plastic bottles \u2014 81 images) and the negative test examples (some trash with plastic bottles excluded \u2014 also 81 images).", "About half of the positive examples cluster around one point in the PCA plot, thus it gives as a clue that the data are actually clustered somehow, but is not intended to work as an anomaly detector (it does not perform well here).", "I decided to use a non-linear clustering model- The Gaussian Mixture Model (GMM in short \u2014 you can find more here). I won\u2019t go much into detail here, yet it allows for describing multi-dimensional clusters of data with a Gaussian (normal) distributions and used to score how the test example is far from the cluster or clusters. In our case, it allows for describing clusters of plastic bottles\u2019 latent vector (output of the encoder). Then using the training set (the 827 plastic-bottle images) a score is calculated using the GMM model, the score describes how far an example is from the cluster. Further, the score is set as a threshold if the example is a plastic-bottle (so lower than the threshold) or another trash (above the threshold).", "The GMM model is used in the provided Jupyter notebook, so if you\u2019re curious how it performs.", "Saving the model is a bit tricky in comparison to Keras or PyTorch\u2019s framework. Saving the model with model.save() from Keras does not work entirely, thus you have to work it around. Furthermore, to_json() also does not work for non-sequential (such as in Keras) models, thus there is a bit of gymnastics.", "First, to save the model you have to save the weights, this is simple \u2014 you just call the save_weights(filepath='path_to_file') method on the model\u2019s object.", "Yet it does not contain the model architecture, so you have to save it in another way. The easiest is to create a dictionary with the models config and save it as a JSON file as below.", "Then loading the model becomes trivial, since with the dictionary you can just use the unpacking operator (** for dictionaries). The unpacking operator converts the dictionary into the method\u2019s arguments. For example, using the dictionary from the config will be converted a_method(**encoder_dict) will be converted into series of arguments a_method(fillters = [32, 64, 128, 196, 256, 1024], kernel sizes = \u2026) .", "The loading of the saved model is performed in three steps. The first step is creating an instance of the models\u2019 class. While talking about unpacking we were one foot in the door with loading the model. Since you have to load the serialized dictionary in the JSON format using json standard library and unpack it with ** while calling Encoder and Decoder.", "The same code as above is performed for the decoder. But stop here for a moment \u2014 why at the beginning of the article we were dividing the auto-encoder into two? We don\u2019t need to load decoder actually if we want to perform the anomaly detection and detect non-plastic-bottle trash! That\u2019s why it is really useful to divide the model into smaller parts. Nevertheless, to make the model workable, three steps are left.", "The second step is to initialize weight shapes. The easiest way is to pass input with shapes the same as in the original model. Since the image is of shape (batch_size, x_dimension, y_dimension, channel dimension) then I just create a zero vector using np.zeros or tf.zeros (assuming that np is NumPy and tf is TensorFlow) with shape e.g. (1, 127, 127, 1) and pass it through the encoder. After such a simple trick, the shapes are initialized and you can load the saved weights, which is shown below.", "Now you have your model that detects non-plastic-bottle trash and you can happily something more interesting than observing trash on the line \u2014 e.g. learning machine learning! If you have any questions, just write them in the comment section, I\u2019ll respond to them in 1\u20132 days.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F27f0d1d7bd00&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-trashy-model-from-scratch-with-tensorflow-2-an-example-with-an-anomaly-detection-27f0d1d7bd00&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-trashy-model-from-scratch-with-tensorflow-2-an-example-with-an-anomaly-detection-27f0d1d7bd00&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-trashy-model-from-scratch-with-tensorflow-2-an-example-with-an-anomaly-detection-27f0d1d7bd00&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-trashy-model-from-scratch-with-tensorflow-2-an-example-with-an-anomaly-detection-27f0d1d7bd00&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----27f0d1d7bd00--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----27f0d1d7bd00--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://daniel-wiczew.medium.com/?source=post_page-----27f0d1d7bd00--------------------------------", "anchor_text": ""}, {"url": "https://daniel-wiczew.medium.com/?source=post_page-----27f0d1d7bd00--------------------------------", "anchor_text": "Daniel Wiczew"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9ecdedb7ac9b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-trashy-model-from-scratch-with-tensorflow-2-an-example-with-an-anomaly-detection-27f0d1d7bd00&user=Daniel+Wiczew&userId=9ecdedb7ac9b&source=post_page-9ecdedb7ac9b----27f0d1d7bd00---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F27f0d1d7bd00&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-trashy-model-from-scratch-with-tensorflow-2-an-example-with-an-anomaly-detection-27f0d1d7bd00&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F27f0d1d7bd00&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-trashy-model-from-scratch-with-tensorflow-2-an-example-with-an-anomaly-detection-27f0d1d7bd00&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://en.wikipedia.org/wiki/Autoencoder", "anchor_text": "here"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/layers/Lambda", "anchor_text": "here"}, {"url": "https://en.wikipedia.org/wiki/Anomaly_detection", "anchor_text": "here"}, {"url": "https://github.com/DanielWicz/trashanomaly", "anchor_text": "DanielWicz/trashanomalyTrash anomaly detection using an autoencoder Purpose of the repository is the tutorial at the Toward Data Science\u2026github.com"}, {"url": "https://colab.research.google.com/github/DanielWicz/trashanomaly/blob/master/tutorial_notebook.ipynb", "anchor_text": "DanielWicz/trashanomaly Google ColaboratoryTrash anomaly detection using an autoencodercolab.research.google.com"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator", "anchor_text": "here"}, {"url": "https://www.quora.com/How-exactly-do-data-augmentation-techniques-like-mirroring-and-cropping-reduce-overfitting/answer/Shehroz-Khan-2", "anchor_text": "here"}, {"url": "https://github.com/DanielWicz/trashanomaly", "anchor_text": "which is here"}, {"url": "https://www.tensorflow.org/tutorials/customization/performance", "anchor_text": "here"}, {"url": "https://www.tensorflow.org/tutorials/customization/custom_training_walkthrough", "anchor_text": "here"}, {"url": "https://scikit-learn.org/stable/modules/mixture.html", "anchor_text": "here"}, {"url": "https://github.com/DanielWicz/trashanomaly", "anchor_text": "here"}, {"url": "https://www.tensorflow.org/guide/keras/custom_layers_and_models", "anchor_text": "here"}, {"url": "https://www.tensorflow.org/tutorials/customization/custom_training_walkthrough", "anchor_text": "here"}, {"url": "https://medium.com/tag/tensorflow?source=post_page-----27f0d1d7bd00---------------tensorflow-----------------", "anchor_text": "TensorFlow"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----27f0d1d7bd00---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/data-science?source=post_page-----27f0d1d7bd00---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/machine-learning-models?source=post_page-----27f0d1d7bd00---------------machine_learning_models-----------------", "anchor_text": "Machine Learning Models"}, {"url": "https://medium.com/tag/tensorflow2?source=post_page-----27f0d1d7bd00---------------tensorflow2-----------------", "anchor_text": "Tensorflow2"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F27f0d1d7bd00&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-trashy-model-from-scratch-with-tensorflow-2-an-example-with-an-anomaly-detection-27f0d1d7bd00&user=Daniel+Wiczew&userId=9ecdedb7ac9b&source=-----27f0d1d7bd00---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F27f0d1d7bd00&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-trashy-model-from-scratch-with-tensorflow-2-an-example-with-an-anomaly-detection-27f0d1d7bd00&user=Daniel+Wiczew&userId=9ecdedb7ac9b&source=-----27f0d1d7bd00---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F27f0d1d7bd00&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-trashy-model-from-scratch-with-tensorflow-2-an-example-with-an-anomaly-detection-27f0d1d7bd00&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----27f0d1d7bd00--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F27f0d1d7bd00&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-trashy-model-from-scratch-with-tensorflow-2-an-example-with-an-anomaly-detection-27f0d1d7bd00&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----27f0d1d7bd00---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----27f0d1d7bd00--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----27f0d1d7bd00--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----27f0d1d7bd00--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----27f0d1d7bd00--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----27f0d1d7bd00--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----27f0d1d7bd00--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----27f0d1d7bd00--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----27f0d1d7bd00--------------------------------", "anchor_text": ""}, {"url": "https://daniel-wiczew.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://daniel-wiczew.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Daniel Wiczew"}, {"url": "https://daniel-wiczew.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "33 Followers"}, {"url": "https://www.linkedin.com/in/daniel-wiczew", "anchor_text": "https://www.linkedin.com/in/daniel-wiczew"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9ecdedb7ac9b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-trashy-model-from-scratch-with-tensorflow-2-an-example-with-an-anomaly-detection-27f0d1d7bd00&user=Daniel+Wiczew&userId=9ecdedb7ac9b&source=post_page-9ecdedb7ac9b--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2F9ecdedb7ac9b%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-trashy-model-from-scratch-with-tensorflow-2-an-example-with-an-anomaly-detection-27f0d1d7bd00&user=Daniel+Wiczew&userId=9ecdedb7ac9b&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}