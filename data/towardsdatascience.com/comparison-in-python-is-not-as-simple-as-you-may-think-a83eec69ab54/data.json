{"url": "https://towardsdatascience.com/comparison-in-python-is-not-as-simple-as-you-may-think-a83eec69ab54", "time": 1683016734.4662468, "path": "towardsdatascience.com/comparison-in-python-is-not-as-simple-as-you-may-think-a83eec69ab54/", "webpage": {"metadata": {"title": "Comparison in Python is Not as Simple as You May Think | by Xiaoxu Gao | Towards Data Science", "h1": "Comparison in Python is Not as Simple as You May Think", "description": "Comparison is one of the most basic operations in any programming language. However, such seemly simple operation can trigger a lot of interesting discussions. When you hear people say \u201cthese 2\u2026"}, "outgoing_paragraph_urls": [{"url": "https://docs.python.org/3.7/reference/datamodel.html", "anchor_text": "Python doc", "paragraph_index": 15}, {"url": "https://towardsdatascience.com/understand-how-to-use-namedtuple-and-dataclass-in-python-e82e535c3691", "anchor_text": "int, float, bool, str, tuple and unicode", "paragraph_index": 17}, {"url": "http://www.pythontutor.com/", "anchor_text": "Python Tutor", "paragraph_index": 19}, {"url": "https://docs.python.org/3.7/reference/datamodel.html", "anchor_text": "Python doc", "paragraph_index": 20}, {"url": "https://docs.google.com/document/d/13_Bc-l2FKMgwPx4dZb0sv7eMfYMHhRVgBRShha8kgbU/edit#heading=h.xcx3s6405a87", "anchor_text": "its limitation", "paragraph_index": 26}, {"url": "http://pythontutor.com/visualize.html#code=%23%20%5Bofficial%20Python%20Tutor%20example%5D%0Ax%20%3D%201000%0Ay%20%3D%201000%0A%23%20True%20here%3B%20may%20be%20False%20in%20CPython%20REPL,%20but%20True%20in%20scripts%0A%23%20%28behavior%20also%20differs%20if%20x%20and%20y%20are%20*small*%20numbers%29%0A%23%20lesson%3A%20do%20*not*%20rely%20on%20is%28%29%20or%20id%28%29%20behaving%20identically%20across%20settings%0Aprint%28x%20is%20y%29&cumulative=false&heapPrimitives=nevernest&mode=edit&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false", "anchor_text": "example", "paragraph_index": 27}, {"url": "https://docs.python.org/3.8/reference/expressions.html#value-comparisons", "anchor_text": "Python documentation", "paragraph_index": 30}, {"url": "https://docs.python.org/3.5/library/collections.html#collections.Counter", "anchor_text": "collections.Counter", "paragraph_index": 33}, {"url": "https://towardsdatascience.com/understand-how-to-use-namedtuple-and-dataclass-in-python-e82e535c3691?source=your_stories_page-------------------------------------", "anchor_text": "NamedTuple", "paragraph_index": 35}, {"url": "https://bugs.python.org/issue31239", "anchor_text": "here", "paragraph_index": 36}, {"url": "https://bugs.python.org/issue16279", "anchor_text": "there", "paragraph_index": 36}, {"url": "https://rszalski.github.io/magicmethods/", "anchor_text": "magic methods", "paragraph_index": 37}, {"url": "https://stackoverflow.com/questions/8276983/why-cant-i-use-the-method-cmp-in-python-3-as-for-python-2", "anchor_text": "__cmp__", "paragraph_index": 38}, {"url": "https://stackoverflow.com/questions/8276983/why-cant-i-use-the-method-cmp-in-python-3-as-for-python-2", "anchor_text": "is no longer used", "paragraph_index": 38}, {"url": "http://linkedin.com/in/xiaoxugao/", "anchor_text": "linkedin.com/in/xiaoxugao/", "paragraph_index": 46}], "all_paragraphs": ["Comparison is one of the most basic operations in any programming language. However, such seemly simple operation can trigger a lot of interesting discussions. When you hear people say \u201cthese 2 things are the same\u201d, do they mean they look the same or they are the same thing?", "Before showing the code, we should understand the difference between 2 concepts: equality and identity. Imagine that there are 2 cars in front of you, they come from the same brand with the same size and same colour. Technically speaking, they are equal, but not identical.", "Then I take two pictures of the same car at the same time and compare them, they also look the same. But this time, they are identical and also equal.", "In short, if objects are identical, they are also equal. But objects can be equal without being identical. Remember this, we will use it a lot later.", "All data in a Python program is represented by objects or by relations between objects. Every object has an identity, a type and a value.", "== and is are two ways to compare objects in Python. == compares 2 objects for equality, and is compares 2 objects for identity. Let\u2019s look at the code.", "Let\u2019s compare some more complex data types.", "In terms of how Python determines if 2 objects are equal or identical will be explained in the next sections. But the take away from this section is that == and is can lead to different results.", "The simple rule is that if you want to know whether object A and B are the same \u201ccar\u201d , then use is, otherwise use ==.", "So how does Python identify if they are the same \u201ccar\u201d? The principle under the hood is pretty straightforward. Every object in Python has an identity, thus has an id and this id can\u2019t be changed. You can check the id of any object using the built-in function id().", "An object\u2019s identity never changes once it has been created; you may think of it as the object\u2019s address in memory.", "Let\u2019s check out the id of objects in the previous examples. We would find that 2 strings in example 1 and 2 lists in example 2 have the same id.", "But objects in example 3,4,5 have completely different ids. Now, you may ask: Why is that?", "Note: Everytime you run the code, the object will be assigned to a different id. So when you reproduce the code, don\u2019t be surprised if you get different id numbers.", "Identity of mutable objects and immutable objects", "To answer this question, let\u2019s read Python doc again. According to the doc,", "For immutable types, operations that compute new values may actually return a reference to any existing object with the same type and value, while for mutable objects this is not allowed.", "Any object in Python can either be mutable or immutable depending on its type. An immutable object can\u2019t be modified after it\u2019s created, while a mutable object allows modification. Immutable types include int, float, bool, str, tuple and unicode.", "The explanation from Python doc means that if we create 2 mutable objects independently, they will definitely end up in different memory addresses, thus have different ids. That\u2019s why objects in example 3 (list) and 5 (customized class) have different ids. Objects in example 2 (list), however, have the same id is because it uses b=a instead of creating b independently.", "The graphs below visualize the objects from example 2\u20135. They are generated from Python Tutor, a very nice website that visualizes code execution.", "On the other hand, Python doc\u2019s explanation on immutable objects is a bit vague as it says \u201cmay actually return a reference to any existing object with the same type and value\u201d. If you continue reading the doc, you will find this example:", "After a = 1; b = 1, a and b may or may not refer to the same object with the value one, depending on the implementation.", "After some research, I find the following interesting behaviours when running the same code in a python file and in shell.", "This is the result from a shell.", "Then we put the same code in a python file and run it like python3 test.py. The results for number 257 are different! How strange is that!", "It turns out that the difference is due to different implementations of interpreters. Python shell uses REPL (read, evaluate, print, loop) which behaves differently than the interpreter in IDE. I will not go into details, but just warn you that the differences exist. Basically, Python interpreter keeps an array of integers (size of the array can be different in each interpreter). When you create an integer within that range, you just get a reference to the existing object. If it\u2019s not in that range, then you create a new object each time.", "Simultaneously, Python Tutor also notes down its limitations due to this unpredictable behaviour.", "For strings and numbers, you can\u2019t rely on id() or is behaving identically to CPython on your computer (example); when teaching beginners, never rely on these since they\u2019re implementation-specific and differ between REPL and scripts", "In general, I find this quite confusing and I don\u2019t really find a use case where I have to compare the identity of 2 immutable objects. Therefore, I would say using == to compare all the immutable objects whenever you can. (e.g. use \"stringa\" == \"stringa\" instead of \"stringa\" is \"stringa\").", "Python assumes that identical objects are equal to themselves, so an equality check will be skipped for identical objects to improve performance. All types are subtypes of object, so by default, they inherit the default comparison behaviour from object.", "When comparing 2 sequences (tuple or list) using ==, the order of elements is taken into consideration. According to Python documentation,", "Sequences compare lexicographically using comparison of corresponding elements.", "Basically, it means that if the first 2 elements are not the same, it would immediately return False instead of going through the rest of elements.", "But if you want to compare sequences without considering order, then you can try collections.Counter. It converts a list into a dictionary where the key is an element and the value is the frequency of that element.", "On the other hand, when comparing 2 dictionaries, order is not important anymore. == just works for dictionaries.", "NamedTuple is extended from the built-in tuple, but it has some interesting behaviors. Check out this code. It looks a bit confusing and also dangerous. The reason for it is that it completely inherits the comparison behavior from the built-in tuple which only considers the value and ignores names and types.", "I found some discussions here and there, looks like it\u2019s mainly for backward compatibility reasons. But if you know more, please tell us in the comment!", "Last but not least, let\u2019s talk about the equality checking of 2 customized objects. What makes it interesting is that it can change the default behaviour by overwriting some magic methods which are dedicated to the comparison.", "The most generic method for comparison is __cmp__. It returns a negative integer if self < other, zero if self == other, a positive integer if self > other. However, __cmp__ is no longer used since Python3. A recommended way is to overwrite different methods for different purposes.", "Let\u2019s look at the last example in this article. In this code, I created a class Citizen and 2 instances: xiaoxu27 and xiaoxu28. When I compare them, it returns False. But actually xiaoxu27 is from the year 2020, xiaoxu28 is from the year 2021. They are the same citizen.", "We can change it by implementing __eq__ method where we only check the equality of first name and last name.", "Then I want to use > or < or \u2264 or \u2265 to compare xiaoxu27 and xiaoxu28. As you can see, it doesn\u2019t allow me to do so because > operation is not supported in customized objects.", "What we need to do is implementing more methods which can look like this:", "After seeing all these examples, I hope you now agree that comparing objects in Python is not an easy task. These small details can sometimes have a huge impact on your program.", "I hope you enjoy this article. If you have any questions or feedback, please leave your comments below!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "I\u2019m a Developer with a focus on Python and Data Engineering. I write stuff to talk to myself and the world. You can find me on linkedin.com/in/xiaoxugao/."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fa83eec69ab54&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparison-in-python-is-not-as-simple-as-you-may-think-a83eec69ab54&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparison-in-python-is-not-as-simple-as-you-may-think-a83eec69ab54&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparison-in-python-is-not-as-simple-as-you-may-think-a83eec69ab54&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparison-in-python-is-not-as-simple-as-you-may-think-a83eec69ab54&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----a83eec69ab54--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a83eec69ab54--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@xiaoxugao?source=post_page-----a83eec69ab54--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@xiaoxugao?source=post_page-----a83eec69ab54--------------------------------", "anchor_text": "Xiaoxu Gao"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2adc5a07e772&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparison-in-python-is-not-as-simple-as-you-may-think-a83eec69ab54&user=Xiaoxu+Gao&userId=2adc5a07e772&source=post_page-2adc5a07e772----a83eec69ab54---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa83eec69ab54&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparison-in-python-is-not-as-simple-as-you-may-think-a83eec69ab54&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa83eec69ab54&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparison-in-python-is-not-as-simple-as-you-may-think-a83eec69ab54&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@tingeyinjurylawfirm", "anchor_text": "Tingey Injury Law Firm"}, {"url": "https://unsplash.com/", "anchor_text": "Unsplash"}, {"url": "https://docs.python.org/3.7/reference/datamodel.html", "anchor_text": "Python doc"}, {"url": "https://docs.python.org/3.7/reference/datamodel.html", "anchor_text": "Python doc"}, {"url": "https://towardsdatascience.com/understand-how-to-use-namedtuple-and-dataclass-in-python-e82e535c3691", "anchor_text": "int, float, bool, str, tuple and unicode"}, {"url": "http://www.pythontutor.com/", "anchor_text": "Python Tutor"}, {"url": "http://www.pythontutor.com/", "anchor_text": "http://www.pythontutor.com/"}, {"url": "http://www.pythontutor.com/", "anchor_text": "http://www.pythontutor.com/"}, {"url": "https://docs.python.org/3.7/reference/datamodel.html", "anchor_text": "Python doc"}, {"url": "https://docs.google.com/document/d/13_Bc-l2FKMgwPx4dZb0sv7eMfYMHhRVgBRShha8kgbU/edit#heading=h.xcx3s6405a87", "anchor_text": "its limitation"}, {"url": "http://pythontutor.com/visualize.html#code=%23%20%5Bofficial%20Python%20Tutor%20example%5D%0Ax%20%3D%201000%0Ay%20%3D%201000%0A%23%20True%20here%3B%20may%20be%20False%20in%20CPython%20REPL,%20but%20True%20in%20scripts%0A%23%20%28behavior%20also%20differs%20if%20x%20and%20y%20are%20*small*%20numbers%29%0A%23%20lesson%3A%20do%20*not*%20rely%20on%20is%28%29%20or%20id%28%29%20behaving%20identically%20across%20settings%0Aprint%28x%20is%20y%29&cumulative=false&heapPrimitives=nevernest&mode=edit&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false", "anchor_text": "example"}, {"url": "https://docs.python.org/3.8/reference/expressions.html#value-comparisons", "anchor_text": "Python documentation"}, {"url": "https://docs.python.org/3.5/library/collections.html#collections.Counter", "anchor_text": "collections.Counter"}, {"url": "https://towardsdatascience.com/understand-how-to-use-namedtuple-and-dataclass-in-python-e82e535c3691?source=your_stories_page-------------------------------------", "anchor_text": "NamedTuple"}, {"url": "https://bugs.python.org/issue31239", "anchor_text": "here"}, {"url": "https://bugs.python.org/issue16279", "anchor_text": "there"}, {"url": "https://rszalski.github.io/magicmethods/", "anchor_text": "magic methods"}, {"url": "https://stackoverflow.com/questions/8276983/why-cant-i-use-the-method-cmp-in-python-3-as-for-python-2", "anchor_text": "__cmp__"}, {"url": "https://stackoverflow.com/questions/8276983/why-cant-i-use-the-method-cmp-in-python-3-as-for-python-2", "anchor_text": "is no longer used"}, {"url": "https://stackoverflow.com/questions/1227121/compare-object-instances-for-equality-by-their-attributes", "anchor_text": "Compare object instances for equality by their attributesIf you\u2019re dealing with one or more classes which you can\u2019t change from the inside, there are generic and simple ways to\u2026stackoverflow.com"}, {"url": "https://rszalski.github.io/magicmethods/", "anchor_text": "A Guide to Python's Magic MethodsCopyright \u00a9 2012 Rafe Kettler Version 1.17 A PDF version of this guide can be obtained from my site or Github. The\u2026rszalski.github.io"}, {"url": "https://medium.com/tag/python?source=post_page-----a83eec69ab54---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/software-development?source=post_page-----a83eec69ab54---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/data-science?source=post_page-----a83eec69ab54---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/coding?source=post_page-----a83eec69ab54---------------coding-----------------", "anchor_text": "Coding"}, {"url": "https://medium.com/tag/programming?source=post_page-----a83eec69ab54---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa83eec69ab54&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparison-in-python-is-not-as-simple-as-you-may-think-a83eec69ab54&user=Xiaoxu+Gao&userId=2adc5a07e772&source=-----a83eec69ab54---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa83eec69ab54&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparison-in-python-is-not-as-simple-as-you-may-think-a83eec69ab54&user=Xiaoxu+Gao&userId=2adc5a07e772&source=-----a83eec69ab54---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa83eec69ab54&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparison-in-python-is-not-as-simple-as-you-may-think-a83eec69ab54&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a83eec69ab54--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fa83eec69ab54&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparison-in-python-is-not-as-simple-as-you-may-think-a83eec69ab54&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----a83eec69ab54---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----a83eec69ab54--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----a83eec69ab54--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----a83eec69ab54--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----a83eec69ab54--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----a83eec69ab54--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----a83eec69ab54--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----a83eec69ab54--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----a83eec69ab54--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@xiaoxugao?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@xiaoxugao?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Xiaoxu Gao"}, {"url": "https://medium.com/@xiaoxugao/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "9.6K Followers"}, {"url": "http://linkedin.com/in/xiaoxugao/", "anchor_text": "linkedin.com/in/xiaoxugao/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2adc5a07e772&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparison-in-python-is-not-as-simple-as-you-may-think-a83eec69ab54&user=Xiaoxu+Gao&userId=2adc5a07e772&source=post_page-2adc5a07e772--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F45d7754eac8c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparison-in-python-is-not-as-simple-as-you-may-think-a83eec69ab54&newsletterV3=2adc5a07e772&newsletterV3Id=45d7754eac8c&user=Xiaoxu+Gao&userId=2adc5a07e772&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}