{"url": "https://towardsdatascience.com/a-non-volatile-indirect-alternative-in-excel-using-the-pub-sub-pattern-15cea21272a3", "time": 1683010963.651724, "path": "towardsdatascience.com/a-non-volatile-indirect-alternative-in-excel-using-the-pub-sub-pattern-15cea21272a3/", "webpage": {"metadata": {"title": "A Non-Volatile INDIRECT Alternative in Excel using the Pub/Sub Pattern | by Tony Roberts | Towards Data Science", "h1": "A Non-Volatile INDIRECT Alternative in Excel using the Pub/Sub Pattern", "description": "The INDIRECT function in Excel is a tricky beast. One the one hand it can be incredibly useful, but on the other hand, it is responsible for crippling the performance of many spreadsheets. In this\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.pyxll.com?utm_source=medium", "anchor_text": "PyXLL", "paragraph_index": 15}, {"url": "https://www.pyxll.com", "anchor_text": "https://www.pyxll.com", "paragraph_index": 16}, {"url": "https://excel-dna.net/", "anchor_text": "Excel-DNA", "paragraph_index": 16}, {"url": "https://exceljava.com?utm_source=medium", "anchor_text": "Jinx", "paragraph_index": 16}, {"url": "https://kafka.apache.org/", "anchor_text": "Kafka,", "paragraph_index": 17}, {"url": "https://www.rabbitmq.com/", "anchor_text": "RabbitMQ", "paragraph_index": 17}, {"url": "https://activemq.apache.org/", "anchor_text": "ApacheMQ", "paragraph_index": 17}, {"url": "https://github.com/pyxll/pyxll-examples", "anchor_text": "PyXLL Examples repo on github", "paragraph_index": 21}, {"url": "https://www.pyxll.com?utm_source=medium", "anchor_text": "https://www.pyxll.com", "paragraph_index": 24}, {"url": "https://github.com/pyxll/pyxll-examples", "anchor_text": "PyXLL Examples repo on github", "paragraph_index": 28}, {"url": "https://www.pyxll.com/docs/userguide/rtd.html?utm_source=medium", "anchor_text": "user guide", "paragraph_index": 30}, {"url": "https://www.pyxll.com/docs/userguide/udfs/cached-objects.html?utm_source=medium", "anchor_text": "We can return complete Python objects from Excel functions", "paragraph_index": 36}], "all_paragraphs": ["The INDIRECT function in Excel is a tricky beast. One the one hand it can be incredibly useful, but on the other hand, it is responsible for crippling the performance of many spreadsheets.", "In this article, we\u2019ll look at what the INDIRECT function is, why it is so bad for performance and an interesting alternative that is superior in almost every way.", "The INDIRECT function takes a cell address and returns the value contained within the cell.", "When designing a spreadsheet or set of spreadsheets it pays off to plan ahead and keep them well organized. Conceptually, using INDIRECT combined with Named Ranges can seem like a great way to do that. You can keep one area of functionality in one workbook and share key results with other dependent workbooks by looking up those values with INDIRECT.", "Using named ranges avoids hard-coding explicit address references and allows us to refactor or restructure the referenced workbook later.", "The INDIRECT function is a volatile function. This means that every time anything in your workbook changes or any time you press F9 to calculate, the INDIRECT function will be called. On its own this may not be such a big deal, but because the INDIRECT function is called repeatedly and calculations that take the result of that as an input will also be called repeatedly.", "If the result of the INDIRECT call is an input to some complex calculation or slow function then your spreadsheet will crawl. Every time you change anything the entire calculation will be re-done, even when the change you\u2019ve made has nothing to do with that part of the spreadsheet.", "Excel maintains a dependency graph which enables it to know what cells need recalculating after any changes have been made. This allows it to do the minimal number of computations when recalculating a worksheet after a change has been made. This is a very efficient way of minimizing the work that needs to be done so that spreadsheets can update quickly. Using INDIRECT ruins this as anything that is dependent (directly or indirectly) will end up be recalculated every time Excel recalculates.", "The developers of Excel have not done this by accident. The INDIRECT function retrieves the value of the address specified, but it is not dependent on the cell pointed to by that address. You can see this if you use Trace Precedents from the Formula tab in Excel. This means that it is not sensitive to the referenced cell changing. It doesn\u2019t know whether the referenced cell has changed or not and so it has to be recalculated every time, and this is why it is a volatile function.", "Using INDIRECT as above is a common solution to the problem of referencing values in one spreadsheet from another. It decouples the two spreadsheets so that calculations from one (we\u2019ll call it the producer) can be used by the other (the consumer). There doesn\u2019t have to be just one consumer, there can be multiple consumers for a single producer.", "This problem of needing to decouple producers from consumers is not unique to spreadsheets. In fact, in software engineering it is very well known and there are patterns for doing exactly that.", "The pub/sub or publisher/subscriber pattern is one such pattern that is commonly used to decouple producers from consumers. In this pattern, messages are published and subscribers are notified of those messages. The delivery of messages between publishers and subscribers is handled by a message broker.", "So that a single message broker can be used for different types of messages it is usual to split messages into topics. A topic is just a string that is known to both the publisher and the subscriber. Messages are published on a specific topic and subscribers subscribe to a topic. The subscribers will only receive messages published to the topic they are subscribed to.", "In our spreadsheet rather than using INDIRECT to pull values from another workbook we can use this pub/sub pattern. The producer workbook will publish values to the message broker whenever a change is made, and the consumer workbook will subscribe to those messages and update only when a message is received.", "We will implement this in the next section.", "We will use Python to implement the pub/sub pattern. Later we will call use this from Excel using PyXLL, the Python Excel Add-In. PyXLL is a commercial product that enables us to use Python code in Excel instead of VBA. Crucially for this article it can also be used to write RTD, or Real Time Data, functions. We will use an RTD function in the consumer workbook to update the value whenever a message is published from the producer workbook.", "PyXLL can be downloaded from https://www.pyxll.com and there is a free 30 day trial. The same technique presented here could be achieved in another language so long as it is possible to write Excel worksheet functions and RTD functions in that language (for example, using Excel-DNA and C# or Jinx and Java, Scala, Kotlin or Clojure).", "Often when using the Pub/Sub pattern some messaging middleware like Kafka, RabbitMQ or ApacheMQ is used. This is really useful in situations where we are messaging between applications or even between servers. In our case everything will be running inside Excel in a single application so using a messaging service like these is overkill. All we need is a way to pass messages from producers to consumers that are all in the same process.", "We\u2019ll start with a MessageBroker class with three methods: publish, subscribe and unsubscribe. Our producer will publish messages using the publish method, and our consumers will subscribe using the subscribe method. When they are no longer interested they can use the unsubscribe method. The messages themselves will simply be Python objects, and the consumers will be Python functions accepting these Python object messages as a single argument. Our MessageBroker will maintain a dictionary of topics to subscribers.", "There we have it! Using this we can subscribe to a topic and receive a call-back whenever a message is published to that topic. Hopefully this shows that the pub/sub pattern doesn\u2019t need to be complicated in order to be useful :)", "There are a few more things we can do to improve on this. In our case of passing values between Excel sheets it would be useful if when subscribing we got the last published value. That way if the consumer subscribes after the producer has already published something it will get the latest value, rather than have to wait until the next one. Additionally Excel functions can (optionally) be called from multiple threads and so if that is something we would want to do then we need to be careful about multiple threads accessing the MessageBroker at the same time.", "The complete code with these additional improvements can be found in the \u201cpubsub\u201d folder of the PyXLL Examples repo on github.", "As a reminder, the reason we went down this pub/sub path was to find an alternative to INDIRECT in Excel and now we\u2019ll get back to that!", "We need two new Excel functions, \u201cpublish\u201d and \u201csubscribe\u201d. The publish function will be called from our producer workbook with a topic name and the value we want to publish. The subscribe function will be called from the consumer workbook where we want to receive the value. The subscribe method will be an RTD, or Real Time Data, function. That\u2019s a special type of function that can update its value even after it\u2019s been called.", "If you\u2019ve not already downloaded PyXLL then you\u2019ll need to now, as that\u2019s what we\u2019re going to use to call our MessageBroker class from the previous section from Excel. You can download a 30 day trial of PyXLL from https://www.pyxll.com.", "We\u2019ll use the MessageBroker class from above and create a single global instance of it. We\u2019ll also add some convenience functions so we can call publish, subscribe and unsubscribe on our global MessageBroker instance.", "Next, using PyXLL we can write the \u201cpublish\u201d Excel function so it can be called from an Excel workbook.", "If you\u2019ve not used PyXLL before you might be surprised at how easy this is! We write a normal Python function and simply add the @xl_func decorator to it. This is what tells PyXLL to expose our Python function as an Excel function.", "To keep things clean I\u2019ve put the MessageBroker class and the publish, subscribe and unsubscribe functions into a single module, pubsub.py. The function above is in a new module \u201cpubsub_example.py\u201d and imports the pubsub module as well as the @xl_func decorator. You can find the complete code in the \u201cpubsub\u201d folder of the PyXLL Examples repo on github.", "To call this function from Excel you will need to install the PyXLL add-in if you\u2019ve not done so already, and add your new pubsub_example.py module to the PyXLL config file, pyxll.cfg", "Now we\u2019re ready to add the \u201csubscribe\u201d function. To write an RTD function using PyXLL we create a class derived from PyXLL\u2019s RTD class. You can read more about this in the user guide.", "The RTD class has two methods, connect and disconnect. These are called when Excel is ready to start receiving updates and when it no longer needs them, respectively. We will override these in our class to subscribe to and unsubscribe from the message broker. When a new message is received we set the \u201cvalue\u201d property on the RTD object which updates the value in Excel.", "To create the \u201csubscribe\u201d function in Excel we use the @xl_func decorator as before, except this time we return a SubscriberRTD object. We also need to provide a bit more information to PyXLL when calling the @xl_func decorator so it knows to treat the returned value as an RTD object.", "And that\u2019s all there is to writing an RTD function in Python with PyXLL! We can now call this new subscribe function from another workbook with the same topic, and each time the producer sheet publishes a value it will be updated in the consumer sheet.", "We can have multiple consumers subscribing to the same topic, and we can have multiple producers publishing on different topics. Whenever a published value updates, the \u201cpublish\u201d Excel function will be called with the topic and that new value. That will cause all of the results of the \u201csubscribe\u201d function subscribed to the same topic to update automatically.", "As the RTD \u201csubscribe\u201d function is non-volatile any dependencies will only be calculated when the value actually changes.", "Using PyXLL we\u2019re not just limited to passing numbers or strings between sheets. We can return complete Python objects from Excel functions and publish those in exactly the same way.", "We started off looking for an alternative to Excel\u2019s INDIRECT function without the performance implications of using a volatile function.", "The reason for using the INDIRECT function was to decouple results produced in one spreadsheet that were used as inputs in another. Named ranges were identified as a way to avoid hard-coding specific cell references.", "Using the pub/sub pattern we can now publish results from any workbook and subscribe to those results in another. Using topic strings we can have publish and subscribe to multiple named values at the same time.", "Using an RTD function for subscribing to a topic allows us to update values in Excel as new values are published without having to resort to making our function volatile.", "We have achieved our aim of decoupling multiple spreadsheets, and by using named topics we protect ourselves from referencing cells in another workbook directly. By not using a volatile function we have ensured that our workbooks only need to calculate the minimum required when values change.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Professional software developer living and working in London. Creator of the Excel add-ins PyXLL and Jinx."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F15cea21272a3&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-non-volatile-indirect-alternative-in-excel-using-the-pub-sub-pattern-15cea21272a3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-non-volatile-indirect-alternative-in-excel-using-the-pub-sub-pattern-15cea21272a3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-non-volatile-indirect-alternative-in-excel-using-the-pub-sub-pattern-15cea21272a3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-non-volatile-indirect-alternative-in-excel-using-the-pub-sub-pattern-15cea21272a3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----15cea21272a3--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----15cea21272a3--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://pyxll.medium.com/?source=post_page-----15cea21272a3--------------------------------", "anchor_text": ""}, {"url": "https://pyxll.medium.com/?source=post_page-----15cea21272a3--------------------------------", "anchor_text": "Tony Roberts"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fcb8b1793a383&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-non-volatile-indirect-alternative-in-excel-using-the-pub-sub-pattern-15cea21272a3&user=Tony+Roberts&userId=cb8b1793a383&source=post_page-cb8b1793a383----15cea21272a3---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F15cea21272a3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-non-volatile-indirect-alternative-in-excel-using-the-pub-sub-pattern-15cea21272a3&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F15cea21272a3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-non-volatile-indirect-alternative-in-excel-using-the-pub-sub-pattern-15cea21272a3&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Sandwich_%281%29.jpg/1200px-Sandwich_%281%29.jpg", "anchor_text": "Image Source"}, {"url": "https://www.pyxll.com?utm_source=medium", "anchor_text": "PyXLL"}, {"url": "https://www.pyxll.com", "anchor_text": "https://www.pyxll.com"}, {"url": "https://excel-dna.net/", "anchor_text": "Excel-DNA"}, {"url": "https://exceljava.com?utm_source=medium", "anchor_text": "Jinx"}, {"url": "https://kafka.apache.org/", "anchor_text": "Kafka,"}, {"url": "https://www.rabbitmq.com/", "anchor_text": "RabbitMQ"}, {"url": "https://activemq.apache.org/", "anchor_text": "ApacheMQ"}, {"url": "https://github.com/pyxll/pyxll-examples", "anchor_text": "PyXLL Examples repo on github"}, {"url": "https://www.pyxll.com?utm_source=medium", "anchor_text": "https://www.pyxll.com"}, {"url": "https://github.com/pyxll/pyxll-examples", "anchor_text": "PyXLL Examples repo on github"}, {"url": "https://www.pyxll.com/docs/userguide/rtd.html?utm_source=medium", "anchor_text": "user guide"}, {"url": "https://www.pyxll.com/docs/userguide/udfs/cached-objects.html?utm_source=medium", "anchor_text": "We can return complete Python objects from Excel functions"}, {"url": "https://www.pyxll.com?utm_source=medium", "anchor_text": "PyXLL, the Excel Python Add-In"}, {"url": "https://www.pyxll.com/docs/userguide/rtd.html?utm_source=medium", "anchor_text": "Real Time Data (from the PyXLL user guide)"}, {"url": "https://github.com/pyxll/pyxll-examples", "anchor_text": "Full code on GitHub (see the \u201cpubsub\u201d folder)"}, {"url": "https://medium.com/tag/excel?source=post_page-----15cea21272a3---------------excel-----------------", "anchor_text": "Excel"}, {"url": "https://medium.com/tag/python?source=post_page-----15cea21272a3---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/computer-science?source=post_page-----15cea21272a3---------------computer_science-----------------", "anchor_text": "Computer Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F15cea21272a3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-non-volatile-indirect-alternative-in-excel-using-the-pub-sub-pattern-15cea21272a3&user=Tony+Roberts&userId=cb8b1793a383&source=-----15cea21272a3---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F15cea21272a3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-non-volatile-indirect-alternative-in-excel-using-the-pub-sub-pattern-15cea21272a3&user=Tony+Roberts&userId=cb8b1793a383&source=-----15cea21272a3---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F15cea21272a3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-non-volatile-indirect-alternative-in-excel-using-the-pub-sub-pattern-15cea21272a3&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----15cea21272a3--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F15cea21272a3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-non-volatile-indirect-alternative-in-excel-using-the-pub-sub-pattern-15cea21272a3&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----15cea21272a3---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----15cea21272a3--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----15cea21272a3--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----15cea21272a3--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----15cea21272a3--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----15cea21272a3--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----15cea21272a3--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----15cea21272a3--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----15cea21272a3--------------------------------", "anchor_text": ""}, {"url": "https://pyxll.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://pyxll.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Tony Roberts"}, {"url": "https://pyxll.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "325 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fcb8b1793a383&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-non-volatile-indirect-alternative-in-excel-using-the-pub-sub-pattern-15cea21272a3&user=Tony+Roberts&userId=cb8b1793a383&source=post_page-cb8b1793a383--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fb5c61785bea5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-non-volatile-indirect-alternative-in-excel-using-the-pub-sub-pattern-15cea21272a3&newsletterV3=cb8b1793a383&newsletterV3Id=b5c61785bea5&user=Tony+Roberts&userId=cb8b1793a383&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}