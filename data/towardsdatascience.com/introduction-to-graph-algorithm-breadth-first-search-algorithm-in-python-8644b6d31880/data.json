{"url": "https://towardsdatascience.com/introduction-to-graph-algorithm-breadth-first-search-algorithm-in-python-8644b6d31880", "time": 1683016121.383822, "path": "towardsdatascience.com/introduction-to-graph-algorithm-breadth-first-search-algorithm-in-python-8644b6d31880/", "webpage": {"metadata": {"title": "Introduction to Graph Algorithm: Breadth-First Search Algorithm in Python | by Rashida Nasrin Sucky | Towards Data Science", "h1": "Introduction to Graph Algorithm: Breadth-First Search Algorithm in Python", "description": "Graph form data is present in many popular and widely used applications. Web crawlers, computer networks, relational databases, and social networks are some good examples. The graph search algorithms\u2026"}, "outgoing_paragraph_urls": [{"url": "https://twitter.com/rashida048", "anchor_text": "Twitter", "paragraph_index": 42}, {"url": "https://www.facebook.com/rashida.smith.161", "anchor_text": "Facebook", "paragraph_index": 42}, {"url": "https://regenerativetoday.com/", "anchor_text": "https://regenerativetoday.com/", "paragraph_index": 44}], "all_paragraphs": ["Graph form data is present in many popular and widely used applications. Web crawlers, computer networks, relational databases, and social networks are some good examples. The graph search algorithms are important for any section of computer science. Also, it is important and useful for many coding interviews.", "There are a couple of different graph search algorithms available. This is one of the simplest algorithms for graph search and also a type of prototype for many other graph algorithms. Today I will explain the Breadth-first search algorithm in detail and also show a use case of the Breadth-first search algorithm. Here are the elements of this article:", "A graph has two elements. Vertices and edges.", "where V is the vertices and E is the edges.", "The breadth-first search algorithm systematically explores the edges level by level to discover each vertex that is reachable from the given source vertex s.", "Here are the steps to a Breadth-first search process:", "Here is a visual demonstration of the steps:", "Consider the vertex u as the source or start vertex. Now see how they open level by level in the pictures below.", "The source vertex is u is level 1. We check where can we go from L1. From the picture, you can see that \u2018u\u2019 has a direct path to v and x. So, they are level 2.", "Now, we are in nodes x and v. Both x and v have direct access only to y. So, y is the level3. From both x and v, we can go to u also. But we ignore the already visited nodes.", "y has direct access to w only. So, w is the level4. We can go to v and x as well from y. But they are already visited. So, we do not need to worry about them anymore.", "At last, w can go to z and z is level5.", "Before we can dive into the algorithm let\u2019s make an adjacency list. That is to make a dictionary where each node will be a key and the nodes that are linked to it will be the values stored in a list.", "For example, node u is linked to nodes v and x. So, it will be expressed as:", "We need to do the same with all the other nodes as well. The adjacency list will look like:", "Next, We need to initialize a few variables:", "\u2018visited\u2019 variable to keep track of the node that we already visited,", "\u2018level\u2019 variable to keep track of which level we are currently in,", "\u2018parent\u2019 variable to store the parents of the nodes.", "\u2018traversal_output\u2019 to list the nodes traveled.", "Finally, we will use a queue to develop this algorithm. Python has a built-in queue that we can import and use.", "In the beginning, set \u2018False\u2019 to all the nodes in the \u2018visited\u2019 dictionary and \u2018None\u2019 to all the nodes in the \u2018parents\u2019 dictionary and -1 in the level.", "As in the picture, assume that the source is \u2018u\u2019. To start with, use visited[s] = True, use level 0 and add \u2018u\u2019 in the Queue.", "At this stage, we need to visit the nodes that are linked to the source node \u2018u\u2019. We have it listed in the adjacency list above. For each of them, set them as visited, upgrade their levels as one level above the source node\u2019s level, set their parent as \u2018u\u2019, and finally add them in the Queue.", "Then do repeat the same with their child nodes. Here is the complete loop:", "Traversal_output shows that we traversed through all the nodes.", "For each node, visited is true in the second row.", "In the third row, we have the level for all the nodes. Please check with the pictures above.", "In the fourth row, we have the parents of all the nodes. \u2018u\u2019 is the source node. So, \u2018u\u2019 does not have a parent.", "Combining all the code and putting them in a function:", "Calling the function and pass the adjacency list \u2018adj\u2019 will gives you the same output.", "This algorithm can be used to find the shortest path from the source to any other node. How?", "Look, we know the parent of each node. From any node, we keep going back through the parents, it will eventually go back to the source node. Right?", "For example, say, I want to find the shortest path of \u2018w\u2019 from the source node \u2018u\u2019. Let\u2019s see, who is w\u2019s parent. it\u2019s \u2018y\u2019. y\u2019s parent is \u2018v\u2019 and then v\u2019s parent is \u2018u\u2019. So, the shortest path is u, v, y, w.", "Check in the picture to see if you think this is the shortest path.", "We can find the parents of each node from the function we defined above.", "Here is the code to find the shortest path", "We have only two elements here. Vertices and edges.", "Notice, carefully. We visit each vertex only one time. In the for loop, we ignore the already visited vertices. Consider, V as the set of vertices.", "We used an undirected graph here. For an undirected graph, we can visit both ways. The way we can go from \u2018u\u2019 to \u2018v\u2019, we can go from \u2018v\u2019 to \u2018u\u2019 as well. In the adjacency list \u2018adj\u2019 above, you can see that one node can come up more than once. At most, we will traverse one edge twice. Let E be the set of edges, it will traverse the edges 2E times in the worst case. Som the total time in worst case V+2E.", "The time complexity can be expressed as O(V+E) as the coefficient is subsumed by the O.", "I tried to explain, how the Breadth_first_search algorithm works using visuals, developed the algorithm in Python, How to find the shortest path using the Breadth_first_search algorithm, and the time complexity of this algorithm. I hope it is clear to you now.", "Feel free to follow me on Twitter and like my Facebook page.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "MS in Applied Data Analytics from Boston University. Read my blog: https://regenerativetoday.com/"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F8644b6d31880&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-graph-algorithm-breadth-first-search-algorithm-in-python-8644b6d31880&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-graph-algorithm-breadth-first-search-algorithm-in-python-8644b6d31880&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-graph-algorithm-breadth-first-search-algorithm-in-python-8644b6d31880&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-graph-algorithm-breadth-first-search-algorithm-in-python-8644b6d31880&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----8644b6d31880--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8644b6d31880--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://rashida00.medium.com/?source=post_page-----8644b6d31880--------------------------------", "anchor_text": ""}, {"url": "https://rashida00.medium.com/?source=post_page-----8644b6d31880--------------------------------", "anchor_text": "Rashida Nasrin Sucky"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8a36b941a136&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-graph-algorithm-breadth-first-search-algorithm-in-python-8644b6d31880&user=Rashida+Nasrin+Sucky&userId=8a36b941a136&source=post_page-8a36b941a136----8644b6d31880---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8644b6d31880&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-graph-algorithm-breadth-first-search-algorithm-in-python-8644b6d31880&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8644b6d31880&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-graph-algorithm-breadth-first-search-algorithm-in-python-8644b6d31880&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@gkumar2175?utm_source=medium&utm_medium=referral", "anchor_text": "Ganapathy Kumar"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://towardsdatascience.com/tagged/getting-started", "anchor_text": "Getting Started"}, {"url": "https://twitter.com/rashida048", "anchor_text": "Twitter"}, {"url": "https://www.facebook.com/rashida.smith.161", "anchor_text": "Facebook"}, {"url": "https://towardsdatascience.com/clear-understanding-of-depth-first-search-algorithm-and-its-python-implementation-graph-algorithm-3e87d8f1a9ea", "anchor_text": "Clear Understanding of Depth-First Search Algorithm and Its Python Implementation: Graph AlgorithmLearn with Clear Visuals. Also learn a common mistake that people make in Depth-first search algorithmtowardsdatascience.com"}, {"url": "https://towardsdatascience.com/an-ultimate-cheat-sheet-for-numpy-bb1112b0488f", "anchor_text": "An Ultimate Cheat Sheet for NumpyGood for Learning as Welltowardsdatascience.com"}, {"url": "https://towardsdatascience.com/an-ultimate-cheat-sheet-for-data-visualization-in-pandas-4010e1b16b5c", "anchor_text": "An Ultimate Cheat Sheet for Data Visualization in PandasAll the Basic Types of Visualization That Is Available in Pandas and Some Advanced Visualization That Is Extremely\u2026towardsdatascience.com"}, {"url": "https://towardsdatascience.com/a-complete-anomaly-detection-algorithm-from-scratch-in-python-step-by-step-guide-e1daf870336e", "anchor_text": "A Complete Anomaly Detection Algorithm From Scratch in Python: Step by Step GuideAnomaly Detection Algorithm Using the Probabilitiestowardsdatascience.com"}, {"url": "https://towardsdatascience.com/great-quality-free-courses-to-learn-machine-learning-and-deep-learning-1029048fd0fc", "anchor_text": "Great Quality Free Courses to Learn Machine Learning and Deep LearningLinks to Super-Quality Free Courses from Top Universitiestowardsdatascience.com"}, {"url": "https://towardsdatascience.com/efficient-python-programming-with-lambda-map-filter-and-sorted-cfdf536afc36", "anchor_text": "Efficient Python Programming with Lambda, Map, Filter, and SortedHappy programming using lists of numbers, strings, and dictionariestowardsdatascience.com"}, {"url": "https://towardsdatascience.com/a-complete-guide-to-confidence-interval-and-examples-in-python-ff417c5cb593", "anchor_text": "A Complete Guide to Confidence Interval, and Examples in PythonDeep Understanding of Confidence Interval and Its Calculation, a Very Popular Parameter in Statisticstowardsdatascience.com"}, {"url": "https://medium.com/tag/programming?source=post_page-----8644b6d31880---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/python?source=post_page-----8644b6d31880---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----8644b6d31880---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/technology?source=post_page-----8644b6d31880---------------technology-----------------", "anchor_text": "Technology"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----8644b6d31880---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8644b6d31880&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-graph-algorithm-breadth-first-search-algorithm-in-python-8644b6d31880&user=Rashida+Nasrin+Sucky&userId=8a36b941a136&source=-----8644b6d31880---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8644b6d31880&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-graph-algorithm-breadth-first-search-algorithm-in-python-8644b6d31880&user=Rashida+Nasrin+Sucky&userId=8a36b941a136&source=-----8644b6d31880---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8644b6d31880&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-graph-algorithm-breadth-first-search-algorithm-in-python-8644b6d31880&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8644b6d31880--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F8644b6d31880&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-graph-algorithm-breadth-first-search-algorithm-in-python-8644b6d31880&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----8644b6d31880---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----8644b6d31880--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----8644b6d31880--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----8644b6d31880--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----8644b6d31880--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----8644b6d31880--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----8644b6d31880--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----8644b6d31880--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----8644b6d31880--------------------------------", "anchor_text": ""}, {"url": "https://rashida00.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://rashida00.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Rashida Nasrin Sucky"}, {"url": "https://rashida00.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "5.8K Followers"}, {"url": "https://regenerativetoday.com/", "anchor_text": "https://regenerativetoday.com/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8a36b941a136&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-graph-algorithm-breadth-first-search-algorithm-in-python-8644b6d31880&user=Rashida+Nasrin+Sucky&userId=8a36b941a136&source=post_page-8a36b941a136--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fb3691be13a18&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-graph-algorithm-breadth-first-search-algorithm-in-python-8644b6d31880&newsletterV3=8a36b941a136&newsletterV3Id=b3691be13a18&user=Rashida+Nasrin+Sucky&userId=8a36b941a136&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}