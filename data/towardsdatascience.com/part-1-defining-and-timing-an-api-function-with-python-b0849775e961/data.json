{"url": "https://towardsdatascience.com/part-1-defining-and-timing-an-api-function-with-python-b0849775e961", "time": 1683010779.0046139, "path": "towardsdatascience.com/part-1-defining-and-timing-an-api-function-with-python-b0849775e961/", "webpage": {"metadata": {"title": "Part 1: Defining and timing an API function in Python | by Derek Mortensen | Towards Data Science", "h1": "Part 1: Defining and timing an API function in Python", "description": "When using APIs most of the time is spent waiting for a response. When collecting information in bulk from an external service this can result in a lot of wasted time. This article explores how to go\u2026"}, "outgoing_paragraph_urls": [{"url": "https://levelup.gitconnected.com/jira-api-with-python-and-pandas-c1226fd41219", "anchor_text": "previous article", "paragraph_index": 1}, {"url": "http://B.Sc", "anchor_text": "B.Sc", "paragraph_index": 23}, {"url": "http://M.Sc", "anchor_text": "M.Sc", "paragraph_index": 23}], "all_paragraphs": ["When using APIs most of the time is spent waiting for a response. When collecting information in bulk from an external service this can result in a lot of wasted time. This article explores how to go from sequential requests to concurrent requests using Python\u2019s Multiprocessing, Threading, and Async features.", "In a previous article, we wrote a simple function that worked around the Jira API limit for the number of issues returned by a single query. This solved the problem but even with only a few thousand results the time to retrieve all the issues can creep into being measured in minutes.", "A JQL query returning 1334 issues with 50 issues per request (27 requests) takes 31 seconds. Using concurrency by changing 7 lines of code, we can reduce this to 2.5 seconds.", "A quick profile using the built-in %time magic in Jupyter shows why there\u2019s so much room for improvement.", "Doing the requests sequentially only uses our CPU for 797 milliseconds out of 31.4 seconds of elapsed time. So of the 31 seconds, more than 97% of the time is spent waiting for the network call.", "There are essentially two categories of performance problems:", "As shown in the%time example above, API calls are firmly in the first category. This is an important point to keep in mind:", "We aren\u2019t trying to make each request go faster.", "Instead we are trying to \u201cwait in parallel\u201d so the whole set of requests finishes faster.", "Since our CPU is doing very little work, to make a single request go faster we\u2019d need to look at the network layer and upgrade the connection. Instead, we can make the whole set of requests faster by kicking them off in batches and combining the results.", "In this series, we will start with the slowest case, sequential requests, and then experiment with three ways to speed things up:", "Note: the timings throughout this series are representative of the average for each approach on the test setup, not benchmarks in the strict sense. We\u2019re more interested in the comparison between techniques that absolute performance", "We\u2019re using the Jira API as an example but these solutions could easily be extended to work with other use cases where your application spends a lot of time waiting for some other computer/network /disk/process to do some work and return a result.", "There are two functions we will be dealing with through this series.", "Sidebar: Timing the function with perf_counter_ns() Throughout this series we\u2019ll use the time.perf_counter_ns() function to record start and end times. This returns the current time in nanoseconds from a system dependant reference time. From the docs:", "The reference point of the returned value is undefined, so that only the difference between the results of consecutive calls is valid.", "So, we can\u2019t compare times across systems, or system reboots, but even if requests happen on different processes / threads we can compare the relative start and end times with a high level of precision. This helps visualize what\u2019s happening in the different concurency modules.", "The function below uses jira_query() to build up a list of results given a Jira URL, JQL query (e.g. Project = CAE ORDER BY key Asc ) and the number of results to return with each request.", "Calling this function returns a list of the dictionaries the jira_query() returns. Typically we would be interested in the actual resulting issues but here we\u2019re more interested in the metadata about how many issues were retrieved and how long it took so the actual issue lists are nested in the issue_list key.", "The resulting DataFrame shows the start and end times relative to t_0 (the time that the first request started). As you can see we end up with 27 requests retrieving 1334 issues, with a maximum of 50 at a time.", "Plotting the results really illustrates the sequential behaviour. Remember during each of the blue bars the CPU is only working ~ 2\u20133% of the time. The rest is spent waiting for the network request to come back.", "In the next section, we leave jira_query() untouched but tweak the coordinating function to use multiprocessing.Pool() which speeds things up significantly.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "I write about programming, statistics and tech. Studied electrical engineering (B.Sc., M.Sc.) and I work in software."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fb0849775e961&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpart-1-defining-and-timing-an-api-function-with-python-b0849775e961&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpart-1-defining-and-timing-an-api-function-with-python-b0849775e961&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpart-1-defining-and-timing-an-api-function-with-python-b0849775e961&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpart-1-defining-and-timing-an-api-function-with-python-b0849775e961&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----b0849775e961--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----b0849775e961--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://dmort-ca.medium.com/?source=post_page-----b0849775e961--------------------------------", "anchor_text": ""}, {"url": "https://dmort-ca.medium.com/?source=post_page-----b0849775e961--------------------------------", "anchor_text": "Derek Mortensen"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9f21e01f17e4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpart-1-defining-and-timing-an-api-function-with-python-b0849775e961&user=Derek+Mortensen&userId=9f21e01f17e4&source=post_page-9f21e01f17e4----b0849775e961---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb0849775e961&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpart-1-defining-and-timing-an-api-function-with-python-b0849775e961&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb0849775e961&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpart-1-defining-and-timing-an-api-function-with-python-b0849775e961&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://levelup.gitconnected.com/jira-api-with-python-and-pandas-c1226fd41219", "anchor_text": "previous article"}, {"url": "https://medium.com/@dmort.ca/part-1-defining-and-timing-an-api-function-with-python-b0849775e961", "anchor_text": "Part 1: Defining and timing an API function in Python (you are here)"}, {"url": "https://medium.com/@dmort.ca/part-2-multiprocessing-api-requests-with-python-19e593bd7904", "anchor_text": "Part 2: Multiprocessing API requests with Python"}, {"url": "https://medium.com/@dmort.ca/part-3-threading-api-requests-with-python-10b2117cd805", "anchor_text": "Part 3: Threading API requests with Python"}, {"url": "https://medium.com/@dmort.ca/part-4-async-api-requests-with-python-and-httpx-9dcd630bc9b5", "anchor_text": "Part 4: Async API requests with Python and httpx"}, {"url": "https://medium.com/@dmort.ca/part-5-api-request-timing-comparison-sequential-multiprocessing-threading-and-async-c4f699552ab3", "anchor_text": "Part 5: API request timing comparison \u2014 Sequential, Multiprocessing, Threading, and Async"}, {"url": "https://medium.com/tag/python?source=post_page-----b0849775e961---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/concurrent-programming?source=post_page-----b0849775e961---------------concurrent_programming-----------------", "anchor_text": "Concurrent Programming"}, {"url": "https://medium.com/tag/api?source=post_page-----b0849775e961---------------api-----------------", "anchor_text": "API"}, {"url": "https://medium.com/tag/jira?source=post_page-----b0849775e961---------------jira-----------------", "anchor_text": "Jira"}, {"url": "https://medium.com/tag/api-concurrency-python?source=post_page-----b0849775e961---------------api_concurrency_python-----------------", "anchor_text": "Api Concurrency Python"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb0849775e961&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpart-1-defining-and-timing-an-api-function-with-python-b0849775e961&user=Derek+Mortensen&userId=9f21e01f17e4&source=-----b0849775e961---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb0849775e961&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpart-1-defining-and-timing-an-api-function-with-python-b0849775e961&user=Derek+Mortensen&userId=9f21e01f17e4&source=-----b0849775e961---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb0849775e961&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpart-1-defining-and-timing-an-api-function-with-python-b0849775e961&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----b0849775e961--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fb0849775e961&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpart-1-defining-and-timing-an-api-function-with-python-b0849775e961&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----b0849775e961---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----b0849775e961--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----b0849775e961--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----b0849775e961--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----b0849775e961--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----b0849775e961--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----b0849775e961--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----b0849775e961--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----b0849775e961--------------------------------", "anchor_text": ""}, {"url": "https://dmort-ca.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://dmort-ca.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Derek Mortensen"}, {"url": "https://dmort-ca.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "182 Followers"}, {"url": "http://B.Sc", "anchor_text": "B.Sc"}, {"url": "http://M.Sc", "anchor_text": "M.Sc"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9f21e01f17e4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpart-1-defining-and-timing-an-api-function-with-python-b0849775e961&user=Derek+Mortensen&userId=9f21e01f17e4&source=post_page-9f21e01f17e4--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff897068b4be1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpart-1-defining-and-timing-an-api-function-with-python-b0849775e961&newsletterV3=9f21e01f17e4&newsletterV3Id=f897068b4be1&user=Derek+Mortensen&userId=9f21e01f17e4&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}