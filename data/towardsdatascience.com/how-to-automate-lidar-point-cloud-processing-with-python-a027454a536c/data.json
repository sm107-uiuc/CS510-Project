{"url": "https://towardsdatascience.com/how-to-automate-lidar-point-cloud-processing-with-python-a027454a536c", "time": 1683016806.712627, "path": "towardsdatascience.com/how-to-automate-lidar-point-cloud-processing-with-python-a027454a536c/", "webpage": {"metadata": {"title": "3D Point Cloud processing tutorial by F. Poux | Towards Data Science", "h1": "How to automate LiDAR point cloud sub-sampling with Python", "description": "How to subsample a point cloud from scratch, with Python. Ultimate guide that covers LiDAR I/O, 3D voxel grid processing, visualisation & automation."}, "outgoing_paragraph_urls": [{"url": "https://learngeodata.eu", "anchor_text": "photogrammetry", "paragraph_index": 10}, {"url": "https://drive.google.com/drive/folders/1Ih_Zz9a6UcbUlaA-puEB_is7DYvXrb4w?usp=sharing", "anchor_text": "this repository", "paragraph_index": 10}, {"url": "https://www.opentopography.org/", "anchor_text": "Open Topography.", "paragraph_index": 11}, {"url": "https://drive.google.com/file/d/12Iy4fkJ1i1Xh-dzGvsf_M66e8eVa1vyx/view?usp=sharing", "anchor_text": "this repository", "paragraph_index": 13}, {"url": "https://www.flyvast.com/flyvast/app/page-snapshot-viewer.html#/358/1377563e-a899-850a-5047-da4904ed443f", "anchor_text": "webGL version", "paragraph_index": 13}, {"url": "https://towardsdatascience.com/discover-3d-point-cloud-processing-with-python-6112d9ee38e7", "anchor_text": "the previous article", "paragraph_index": 35}, {"url": "https://colab.research.google.com/drive/1addhGqN3ZE1mIn4L6jQnnkVs7_y__qSE?usp=sharing", "anchor_text": "Google Colab notebook", "paragraph_index": 44}, {"url": "https://learngeodata.eu/", "anchor_text": "Geodata Academy", "paragraph_index": 47}, {"url": "https://learngeodata.eu", "anchor_text": "https://learngeodata.eu", "paragraph_index": 50}], "all_paragraphs": ["In this article, I will give you my two favourite 3D processes for quickly structuring and sub-sampling point cloud data with python. You will also be able to automate, export, visualize and integrate results into your favourite 3D software, without any coding experience. I will focus on code optimization while using a minimum number of libraries (mainly NumPy) so that you can extend what you learnt with very high flexibility! Ready \ud83d\ude01?", "Point cloud datasets are marvellous! You can get a geometric description of world entities by discretizing them through a bunch of points, which, aggregated together, resemble the shape \u2014 the environment \u2014 of interest.", "But a major problem with 3D point clouds is that the data density may be more than necessary for a given application. This often leads to higher computational cost in subsequent data processing or visualisation. To make the dense point clouds more manageable, their data density can be reduced. This article provides you with the knowledge and actual scripts to implement sub-sampling methods for reducing point cloud data density.", "Ha, I tricked you \ud83d\ude43. Before directly diving to the implementation of sampling strategies, let us first review the typical sub-sampling methods for point cloud data thinning. These include the random, the minimal distance and the grid (often tagged as uniform) methods. The random method is the simplest for reducing data density, in which a specified number of data points is selected randomly.", "In the minimal distance method, the data point selection is constrained by a minimum distance so that no data point in the selected subset is closer to another data point than the minimum distance specified.", "In the grid method (which can be uniform), a grid structure \u2014 the handier being a voxel grid structure \u2014 is created and a representative data point is selected.", "The latter two methods can achieve a more homogeneous spatial distribution of data points in the reduced point cloud. In such cases, the average data spacing is determined by the minimal distance or the voxel edge length specified. If you want extended details, you can follow the eLearning Formation below:", "Okay for the theory, let us put it into action \ud83e\udd20!", "In the previous article below, we saw how to set-up an environment easily with Anaconda and how to use the IDE Spyder for managing your code. I recommend continuing in this fashion if you set yourself up to becoming a fully-fledge python app developer \ud83d\ude06.", "But hey, if you prefer to do everything from scratch in the next 5 minutes, I also give you access to a Google Colab notebook that you will find at the end of the article. There is nothing to install; you can just save it to your google drive and start working with it, also using the free datasets from Step 2 \ud83d\udc47.", "In previous tutorials, I illustrated point cloud processing and meshing over a 3D dataset obtained by using photogrammetry: the jaguar, that you can freely download from this repository.", "In this tutorial, we will extend the scope, and test on a point cloud obtained through an aerial LiDAR survey. This is an excellent opportunity to introduce you to the great Open Data platform: Open Topography. It is a collaborative data repository for LiDAR users. Through a web map, you can select a region of interest, and download the related point cloud dataset with its metadata in different file formats (.laz, .las or as an ASCII file).", "At this phase, what is important to know is that you can easily process both the ASCII file and the .las file with python (the .laz is more tricky). The .las file is far more compressed than the ASCII file (355 Mo vs 1026 Mo for the example in this guide), but it will necessitate that you use a library called LasPy. So now, if you need 3D point cloud datasets over a large region, you know where you can find great datasets easily \ud83d\uddfa\ufe0f.", "\ud83e\udd13 Note: For this how-to guide, you can use the point cloud in this repository, that I already filtered, colourized and translated so that you are in the optimal conditions. If you want to visualize and play with it beforehand without installing anything, you can check out the webGL version.", "Okay, now that we are set-up, let us write some code \ud83d\udcbb. First, we install the library package that is missing to read .las files. If you are with anaconda, I suggest you run the following command by looking up the conda-forge channel:", "Else, in general, you can use the pip package installer for Python by typing:", "Then, let us import necessary libraries within the script (NumPy and LasPy), and load the .las file in a variable called point_cloud.", "Nice, we are almost ready! What is great, is that the LasPy library also give a structure to the point_cloud variable, and we can use straightforward methods to get, for example, X, Y, Z, Red, Blue and Green fields. Let us do this to separate coordinates from colours, and put them in NumPy arrays:", "\ud83e\udd13 Note: We use a vertical stack method from NumPy, and we have to transpose it to get from (n x 3) to a (3 x n) matrix of the point cloud.", "And we are set up! Moving on to step 3 \ud83d\udc47.", "We will focus on decimation and voxel grid sampling. Now is the time to pick a side \ud83d\ude42", "\ud83d\udca1 Hint: I will give you code scripts that actually maximize the use of NumPy, but know that you can achieve similar results with widely different implementations (or through importing other packages). The main difference is often the execution time. The goal is to have the best execution runtime while having a readable script.", "If we define a point cloud as a matrix (m x n), then the decimated cloud is obtained by keeping one row out of n of this matrix :", "Slicing a list in python is pretty simple with the command l[start:end:step]. To shorten and parametrize the expression, you can just write the lines:", "\ud83e\udd13 Note: Running this will keep 1 row every 160 rows, thus diving the size of the original point cloud by 160. It goes from 13 993 118 points to 87 457 points.", "The grid subsampling strategy will be based on the division of the 3D space in regular cubic cells called voxels. For each cell of this grid, we will only keep one representative point. This point, the representant of the cell, can be chosen in different ways. For example, it can be the barycenter of the points in that cell, or the closest point to it.", "We will work in two sub-steps.", "1. First, we create a grid structure over the points. For this, we actually want to initially compute the bounding box of the point cloud (i.e. the box dimensions that englobe all the points). Then, we can discretize the bounding box into small cubic grids: the voxels. These are obtained by setting the length, width and height of the voxel (which is equal), but it could also be set by giving the number of desired voxels in the three directions of the bounding box.", "\ud83e\udd13 Note: You can see the little axis=0 that is actually fundamental if you want to be sure you apply the max method \u201cper column\u201d. The ceil then will make sure to keep the ceiling of the difference (element-wise), and thus, when divided by the voxel_size, it returns the number of empty voxels in each direction. With a cubic size of 6 m, we get 254 voxels along X, 154 voxels along Y and 51 along Z: 1 994 916 empty voxels.", "2. For each small voxel, we test if it contains one or more points. If it does, we keep it, and we take note of the points indexes that we will have to link to each voxel.", "\ud83e\udd13 Note: We want to work with indices rather than coordinates for simplicity and efficiency. The little script above is a super-compact way to return the \u201cdesignation\u201d of each non-empty voxel. On top, we want to access the points that are linked to each non_empty_voxel through idx_pts_vox_sorted, and how many there are (nb_pts_per_voxel). This is done by first looking out unique values based on the integer \u201cindices\u201d gathered for each point. The argsort method is actually returning the index of the points that we can later link to the voxel index.", "3. Finally, we compute the representant of the voxel. I will illustrate this for both the barycenter (grid_barycenter) and the closest point to the barycenter (grid_candidate_center).", "\ud83d\udca1 Hint: The use of python dictionaries to keep the points in each voxel is my recommendation. This sparse structure is more adapted than full arrays which will use all your memory on bigger point clouds. A dictionary cannot take a [i, j, k] vector of coordinates as key if it is a list, but converting it to a tuple (i, j, k) will make it work.", "\ud83e\udd13 Note: Most of my M.Sc. students will accomplish the task with a bunch of imbricated \u201cfor\u201d or \u201cwhile\u201d loop. It does work, but it is not the most efficient. You have to know Python is not very optimized with loops. Thus, when processing point clouds (which are often massive), you should aim at a minimal amount of loops, and a maximum amount of \u201cvectorization\u201d. With NumPy, this is by \u201cbroadcasting\u201d, a mean of vectorizing array operations so that looping occurs in C instead of Python (more efficient). Take the time to digest what I do in this third step (especially the details of playing with indexes and voxels), or check out the Google Colab script for more in-depth information.", "This voxel sampling strategy is usually very efficient, relatively uniform, and useful for downward processes (but this extend the scope of the current tutorial). However, you should know that while the point spacing can be controlled by the size of the grid, we cannot \u201caccurately\u201d control the number of sampling points.", "To simply visualize in-line your results (or within Python), you can use the matplotlib library, with its 3D toolkit (see the previous article for understanding what happens under the hood). Run the following command, illustrated over the decimated point cloud :", "\ud83e\udd13 Note: Looking at the number of possible points, I would not recommend in-line visualisation with classical libraries such as matplotlib if your subsampled results exceed the million mark.", "In the very likely event your point cloud is too heavy for visualizing this way, you can export the data in an eatable file format for your software of choice. To get an ASCII file, you can use the command:", "\ud83e\udd13 Note: A \u201c;\u201d delimited ASCII file is created, ending with .poux \ud83e\udd2d. The \u201cfmt\u201d command is to make sure the writing is most standard, for example as a string.", "\ud83d\udca1 Hint: If you also want to make operations to retrieve the colour of voxels representatives, be careful with the NumPy dtype of the sum of colours. The colour type \u201cuint16\u201d can take values from 0 to 65535. Change the type when summing and go to uint16 (or uint8) after the final division.", "Now that you addressed steps 1 to 4, it is time to create functions and put them together in an automated fashion \ud83e\udd16. Basically, we want (a) to load the data and libraries, (b) set parameters value, (c) declare functions, (d) call them when needed, (e) return some kind of results. This can be to show in-line the results and/or to export a sampled point cloud file to be used in your 3D software, outside of Python.", "You already know how to do a, b and e, so let us focus on b and c \ud83c\udfaf. To create a function, you can just follow the provided template below:", "\ud83e\udd13 Note: The function created is called cloud_decimation, and eats two arguments which are points and factor. It will execute the desired code written inside and return the variable decimated_points when it is called. and to call a function, nothing more straightforward: simply write cloud_decimation(point_cloud, 6) (the same way you would use the function print(), but here you have two arguments to fill by the values/variables that you want to pass to the function).", "By creating a suite of functions, you can then use your script directly, just changing the set parameters at the beginning.", "The full code is accessible here: Google Colab notebook.", "Additionally, you can check out the follow-up article if you want to extend your capabilities using the library Open3D, and learn specific commands related to 3D point clouds and 3D mesh processing.", "You just learned how to import, sub-sample, export and visualize a point cloud composed of millions of points, with different strategies! Well done! But the path does not end here, and future posts will dive deeper in point cloud spatial analysis, file formats, data structures, visualization, animation and meshing. We will especially look into how to manage big point cloud data as defined in the article below.", "My contributions aim to condense actionable information so you can start from scratch to build 3D automation systems for your projects. You can get started today by taking a formation at the Geodata Academy.", "Other advanced sampling methods for point cloud exist. For example, you could follow a uniform sampling method such as the Farthest Point method, a more advanced geometric sampling [1] or even semantic sampling. Also, the voxelisation algorithm given here can be used for advanced processing such as 3D semantic modelling [2] or semantic segmentation, as shown in [3].", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Code and Ideas for 3D Data Science & Research | Director of Innovation | Award-winning Senior Researcher & Engineer | Online course at: https://learngeodata.eu"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fa027454a536c&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-automate-lidar-point-cloud-processing-with-python-a027454a536c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-automate-lidar-point-cloud-processing-with-python-a027454a536c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-automate-lidar-point-cloud-processing-with-python-a027454a536c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-automate-lidar-point-cloud-processing-with-python-a027454a536c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----a027454a536c--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a027454a536c--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@florentpoux?source=post_page-----a027454a536c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@florentpoux?source=post_page-----a027454a536c--------------------------------", "anchor_text": "Florent Poux, Ph.D."}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8ba7bf4ad784&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-automate-lidar-point-cloud-processing-with-python-a027454a536c&user=Florent+Poux%2C+Ph.D.&userId=8ba7bf4ad784&source=post_page-8ba7bf4ad784----a027454a536c---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa027454a536c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-automate-lidar-point-cloud-processing-with-python-a027454a536c&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa027454a536c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-automate-lidar-point-cloud-processing-with-python-a027454a536c&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/tagged/hands-on-tutorials", "anchor_text": "Hands-on Tutorials"}, {"url": "https://learngeodata.eu", "anchor_text": "Geodata Academy"}, {"url": "https://learngeodata.eu/point-cloud-processor-formation/", "anchor_text": "Point Cloud Processing Online Course - 3D Geodata AcademyFormation to learn advanced point cloud processing and 3D automation. Develop new python geodata skills and open-source\u2026learngeodata.eu"}, {"url": "https://towardsdatascience.com/discover-3d-point-cloud-processing-with-python-6112d9ee38e7", "anchor_text": "Discover 3D Point Cloud Processing with PythonTutorial to simply set up your python environment, start processing and visualize 3D point cloud data.towardsdatascience.com"}, {"url": "https://learngeodata.eu", "anchor_text": "photogrammetry"}, {"url": "https://drive.google.com/drive/folders/1Ih_Zz9a6UcbUlaA-puEB_is7DYvXrb4w?usp=sharing", "anchor_text": "this repository"}, {"url": "https://www.opentopography.org/", "anchor_text": "Open Topography."}, {"url": "https://drive.google.com/file/d/12Iy4fkJ1i1Xh-dzGvsf_M66e8eVa1vyx/view?usp=sharing", "anchor_text": "this repository"}, {"url": "https://www.flyvast.com/flyvast/app/page-snapshot-viewer.html#/358/1377563e-a899-850a-5047-da4904ed443f", "anchor_text": "webGL version"}, {"url": "https://towardsdatascience.com/discover-3d-point-cloud-processing-with-python-6112d9ee38e7", "anchor_text": "the previous article"}, {"url": "https://colab.research.google.com/drive/1addhGqN3ZE1mIn4L6jQnnkVs7_y__qSE?usp=sharing", "anchor_text": "Google Colab notebook"}, {"url": "https://towardsdatascience.com/5-step-guide-to-generate-3d-meshes-from-point-clouds-with-python-36bad397d8ba", "anchor_text": "5-Step Guide to generate 3D meshes from point clouds with PythonTutorial to generate 3D meshes (.obj, .ply, .stl, .gltf) automatically from 3D point clouds using python. (Bonus)\u2026towardsdatascience.com"}, {"url": "https://towardsdatascience.com/the-future-of-3d-point-clouds-a-new-perspective-125b35b558b9", "anchor_text": "The Future of 3D Point Clouds: a new perspectiveDiscrete spatial datasets known as point clouds often lay the groundwork for decision-making applications. But can they\u2026towardsdatascience.com"}, {"url": "https://learngeodata.eu/", "anchor_text": "Geodata Academy"}, {"url": "https://learngeodata.eu/point-cloud-processor-formation/", "anchor_text": "Point Cloud Processing Online Course - 3D Geodata AcademyFormation to learn advanced point cloud processing and 3D automation. Develop new python geodata skills and open-source\u2026learngeodata.eu"}, {"url": "https://doi.org/10.1007/978-3-642-14746-3_31", "anchor_text": "https://doi.org/10.1007/978-3-642-14746-3_31"}, {"url": "https://doi.org/10.3390/rs10091412", "anchor_text": "https://doi.org/10.3390/rs10091412"}, {"url": "https://doi.org/10.3390/ijgi8050213", "anchor_text": "https://doi.org/10.3390/ijgi8050213"}, {"url": "https://medium.com/tag/point-cloud?source=post_page-----a027454a536c---------------point_cloud-----------------", "anchor_text": "Point Cloud"}, {"url": "https://medium.com/tag/voxel?source=post_page-----a027454a536c---------------voxel-----------------", "anchor_text": "Voxel"}, {"url": "https://medium.com/tag/python?source=post_page-----a027454a536c---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/editors-pick?source=post_page-----a027454a536c---------------editors_pick-----------------", "anchor_text": "Editors Pick"}, {"url": "https://medium.com/tag/hands-on-tutorials?source=post_page-----a027454a536c---------------hands_on_tutorials-----------------", "anchor_text": "Hands On Tutorials"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa027454a536c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-automate-lidar-point-cloud-processing-with-python-a027454a536c&user=Florent+Poux%2C+Ph.D.&userId=8ba7bf4ad784&source=-----a027454a536c---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa027454a536c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-automate-lidar-point-cloud-processing-with-python-a027454a536c&user=Florent+Poux%2C+Ph.D.&userId=8ba7bf4ad784&source=-----a027454a536c---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa027454a536c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-automate-lidar-point-cloud-processing-with-python-a027454a536c&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a027454a536c--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fa027454a536c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-automate-lidar-point-cloud-processing-with-python-a027454a536c&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----a027454a536c---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----a027454a536c--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----a027454a536c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----a027454a536c--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----a027454a536c--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----a027454a536c--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----a027454a536c--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----a027454a536c--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----a027454a536c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@florentpoux?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@florentpoux?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Florent Poux, Ph.D."}, {"url": "https://medium.com/@florentpoux/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "1.96K Followers"}, {"url": "https://learngeodata.eu", "anchor_text": "https://learngeodata.eu"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8ba7bf4ad784&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-automate-lidar-point-cloud-processing-with-python-a027454a536c&user=Florent+Poux%2C+Ph.D.&userId=8ba7bf4ad784&source=post_page-8ba7bf4ad784--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fdb0ca324740e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-automate-lidar-point-cloud-processing-with-python-a027454a536c&newsletterV3=8ba7bf4ad784&newsletterV3Id=db0ca324740e&user=Florent+Poux%2C+Ph.D.&userId=8ba7bf4ad784&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}