{"url": "https://towardsdatascience.com/how-to-extract-data-from-pdf-forms-using-python-10b5e5f26f70", "time": 1683005269.6066089, "path": "towardsdatascience.com/how-to-extract-data-from-pdf-forms-using-python-10b5e5f26f70/", "webpage": {"metadata": {"title": "How to Extract Data from PDF Forms Using Python | by ankur garg | Towards Data Science", "h1": "How to Extract Data from PDF Forms Using Python", "description": "PDF or Portable Document File format is one of the most common file formats in use today. It is widely used across enterprises, in government offices, healthcare and other industries. As a result\u2026"}, "outgoing_paragraph_urls": [{"url": "https://pypi.org/project/PyPDF2/", "anchor_text": "PyPDF2", "paragraph_index": 2}], "all_paragraphs": ["PDF or Portable Document File format is one of the most common file formats in use today. It is widely used across enterprises, in government offices, healthcare and other industries. As a result, there is a large body of unstructured data that exists in PDF format and to extract and analyse this data to generate meaningful insights is a common task among data scientists.", "I work for a financial institution and recently came across a situation where we had to extract data from a large volume of PDF forms. While there is a good body of work available to describe simple text extraction from PDF documents, I struggled to find a comprehensive guide to extract data from PDF forms. My objective to write this article is to develop such a guide.", "There are several Python libraries dedicated to working with PDF documents, some more popular than the others. I will be using PyPDF2 for the purpose of this article. PyPDF2 is a Pure-Python library built as a PDF toolkit. Being Pure-Python, it can run on any Python platform without any dependencies or external libraries. You can use pip to install this library by executing the code below.", "Once you have installed PyPDF2, you should be all set to follow along. We will take a quick look at the structure of PDF files as it will help us to better understand the programmatic basis of extracting data from PDF forms. I will briefly discuss the 2 types of PDF forms that are widely used. We will then jump right into the examples to extract data from each of the 2 types of PDF forms.", "Instead of looking at PDF document as a monolith, it should be looked at as a collection of objects. All of these objects are arranged in a set pattern. If you open a PDF file in a text editor such as notepad, the content may not make much sense and appear to be junk. However, if you use a tool that provides low level access to PDF objects, you could see and appreciate the underlying structure. For example, please look at Figure 1 below. I used iText RUPS to open a simple PDF document.The image on the left is of a simple PDF document I opened in a reader application(Acrobat Reader). The middle image displays the low level object model of this document as rendered by iText RUPS. The image on the Right shows the data stream that captures the content of the PDF on its first page. As you could see, the object model(middle image) has a set pattern and encapsulates all of the meta data that is needed to render the document independent of the software, hardware, operating system etc. This structure is what makes PDF so versatile and popular.", "There are 2 primary types of PDF forms.", "Adobe(the company that developed PDF format) has an application called AEM (Adobe Experience Manager) Forms Designer, which is aimed at enabling customers to create and publish PDF forms. Adobe uses the term PDF form to refer to the interactive and dynamic forms created with AEM Forms Designer. These PDF forms are based on Adobe\u2019s XML Forms Architecture (XFA), which is based on XML. These forms can be dynamic in nature and can reflow PDF content based on user input.", "There\u2019s another type of PDF form, called an Acroform. Acroform is Adobe\u2019s older and original interactive form technology introduced in 1996 as a part of PDF 1.2 specification. Acroforms are a combination of a traditional PDF that defines the static layout with Interactive form fields that are bolted on top. First, you design the form layout using Microsoft Word, Adobe InDesign, or Adobe Illustrator, etc. Then you add the form elements \u2014 fields, dropdown controls, checkboxes, script logic etc.", "Figure 2 below shows a screenshot of the XFA based PDF form that we will be using as an example for this exercise. This is a Currency Transactions Report form used by the banks and other institutions to report certain financial transactions to the regulatory agency. This is a dynamic form where you could add and remove sections based on the amount of information that needs to be reported. I have partially filled this form with some dummy data.", "Figure 3 shows the object model of this form. The XML document, shown on the right side of the image is what makes up the XFA, which is stored as the value of the XFA key inside the AcroForm dictionary(look at the object model on the left side of the image). The Acroform dictionary is a child element of the Catalog dictionary, which in turn is housed inside the Root of this PDF file. All we need to do is use PyPDF2 to access the XML document from the object structure of this file. Once we have access to the XML, it is a simple exercise of parsing out the XML document to access values for various form elements, which could then be stored into a Python list, Numpy array, Pandas dataframe etc. for the purpose of analysis.", "Below is the code to extract the XML that makes up this form.", "In the first line, I am simply importing the PyPDF2 library and providing it an alias \u2014 pypdf. The second line is the beginning of function definition to find elements of a dictionary by providing the dictionary key. You would recall from our discussion above, that our XML is embedded inside a dictionary referenced by the key \u2018/XFA\u2019. This function helps me to navigate the complicated object model of the PDF file, which is basically a set of dictionaries embedded inside multiple sets of dictionaries. In the line following the function definition, I am reading in the PDF form and creating a PdfFileReader object. The resolvedObjects method of this class unravels the PDF object model as a set of Python dictionaries. I then invoke the findInDict function to extract the elements of the \u2018/XFA\u2019 dictionary, which is an array as shown in figure 4 below.", "The seventh element of this array is the actual XML content that makes up the form. It is an IndirectObject. An IndirectObject is an alias that points to an actual object. This reference helps to reduce the size of the file when same object appears at multiple places. The getObject() method used in the last line of the code retrieves the actual object. If the object is a text object, using str() function should give you the actual text. Otherwise, the getData() method needs to be used to render the data from the object. Below is a snapshot of a portion of the XML retrieved in the last line of the code above. You could see some of the dummy address data I entered into the sample form. You could easily parse out this data from the XML and use it for further analysis.", "This one will be relatively easy as we have already discussed most of the concepts related with the PDF object model in the sections above. Below is a sample income tax form that I will be using as an example. I have put some dummy data in it.", "Figure 7 below shows the object model of this form.", "The values of individual form fields are referenced by the key \u2018/V\u2019, which is embedded inside \u2018/Fields\u2019, which in turn is embedded inside \u2018/AcroForm\u2019. \u2018/AcroFrom\u2019 is a child of the root Catalog dictionary of this PDF file. We could use the approach we used in the case of XFA form and use the \u2018findInDict\u2019 function to retrieve the \u2018/Fields\u2019 dictionary and then retrieve values of the individual fields. Fortunately, PyPDF2 provides a more direct way to do this. The PdfFileReader class provides a getFormTextFields() method that returns a dictionary of all form values. Below is the short code. Figure 8 shows the output. The dictionary object could be easily converted into a list or a Pandas dataframe for further procecssing.", "Extracting data from PDF forms is easy once you understand the underlying object model and PyPDF2 is a powerful library that enables you to access it. Have fun with your data!", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F10b5e5f26f70&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-extract-data-from-pdf-forms-using-python-10b5e5f26f70&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-extract-data-from-pdf-forms-using-python-10b5e5f26f70&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-extract-data-from-pdf-forms-using-python-10b5e5f26f70&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-extract-data-from-pdf-forms-using-python-10b5e5f26f70&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----10b5e5f26f70--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----10b5e5f26f70--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@garg.dce?source=post_page-----10b5e5f26f70--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@garg.dce?source=post_page-----10b5e5f26f70--------------------------------", "anchor_text": "ankur garg"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fbc80964753c7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-extract-data-from-pdf-forms-using-python-10b5e5f26f70&user=ankur+garg&userId=bc80964753c7&source=post_page-bc80964753c7----10b5e5f26f70---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F10b5e5f26f70&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-extract-data-from-pdf-forms-using-python-10b5e5f26f70&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F10b5e5f26f70&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-extract-data-from-pdf-forms-using-python-10b5e5f26f70&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@elodiso?utm_source=medium&utm_medium=referral", "anchor_text": "Leon Dewiwje"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://pypi.org/project/PyPDF2/", "anchor_text": "PyPDF2"}, {"url": "https://medium.com/tag/pdf?source=post_page-----10b5e5f26f70---------------pdf-----------------", "anchor_text": "Pdf"}, {"url": "https://medium.com/tag/python?source=post_page-----10b5e5f26f70---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/data-mining?source=post_page-----10b5e5f26f70---------------data_mining-----------------", "anchor_text": "Data Mining"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----10b5e5f26f70---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----10b5e5f26f70---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F10b5e5f26f70&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-extract-data-from-pdf-forms-using-python-10b5e5f26f70&user=ankur+garg&userId=bc80964753c7&source=-----10b5e5f26f70---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F10b5e5f26f70&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-extract-data-from-pdf-forms-using-python-10b5e5f26f70&user=ankur+garg&userId=bc80964753c7&source=-----10b5e5f26f70---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F10b5e5f26f70&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-extract-data-from-pdf-forms-using-python-10b5e5f26f70&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----10b5e5f26f70--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F10b5e5f26f70&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-extract-data-from-pdf-forms-using-python-10b5e5f26f70&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----10b5e5f26f70---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----10b5e5f26f70--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----10b5e5f26f70--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----10b5e5f26f70--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----10b5e5f26f70--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----10b5e5f26f70--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----10b5e5f26f70--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----10b5e5f26f70--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----10b5e5f26f70--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@garg.dce?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@garg.dce?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "ankur garg"}, {"url": "https://medium.com/@garg.dce/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "75 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fbc80964753c7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-extract-data-from-pdf-forms-using-python-10b5e5f26f70&user=ankur+garg&userId=bc80964753c7&source=post_page-bc80964753c7--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fd327358473d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-extract-data-from-pdf-forms-using-python-10b5e5f26f70&newsletterV3=bc80964753c7&newsletterV3Id=d327358473d8&user=ankur+garg&userId=bc80964753c7&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}