{"url": "https://towardsdatascience.com/deploying-a-custom-docker-model-with-sagemaker-to-a-serverless-front-end-with-s3-8ee07edc24e6", "time": 1683013143.313181, "path": "towardsdatascience.com/deploying-a-custom-docker-model-with-sagemaker-to-a-serverless-front-end-with-s3-8ee07edc24e6/", "webpage": {"metadata": {"title": "Deploying a Custom Docker Model with SageMaker to a Serverless Front-end with S3 | by Max Brenner | Towards Data Science", "h1": "Deploying a Custom Docker Model with SageMaker to a Serverless Front-end with S3", "description": "Deploying a model with AWS SageMaker is a great way to allow users or customers to interact with it. While you can use the many algorithms and models that come with SageMaker\u2019s Python SDK, there are\u2026"}, "outgoing_paragraph_urls": [{"url": "https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html", "anchor_text": "algorithms", "paragraph_index": 0}, {"url": "https://github.com/maxbren/aws-custom-docker-model-deploy-front-end", "anchor_text": "here", "paragraph_index": 4}, {"url": "https://sagemaker.readthedocs.io/en/stable/api/training/estimators.html", "anchor_text": "SageMaker\u2019s Estimator class", "paragraph_index": 5}, {"url": "https://medium.com/swlh/what-exactly-is-docker-1dd62e1fde38", "anchor_text": "post", "paragraph_index": 6}, {"url": "https://docs.docker.com/docker-for-mac/install/", "anchor_text": "Mac,", "paragraph_index": 7}, {"url": "https://docs.docker.com/engine/install/ubuntu/", "anchor_text": "Ubuntu", "paragraph_index": 7}, {"url": "https://docs.docker.com/docker-for-windows/install/", "anchor_text": "Windows", "paragraph_index": 7}, {"url": "https://docs.docker.com/docker-for-windows/install-windows-home/", "anchor_text": "steps", "paragraph_index": 7}, {"url": "https://docs.microsoft.com/en-us/windows/wsl/wsl2-index", "anchor_text": "WSL 2", "paragraph_index": 8}, {"url": "https://docs.microsoft.com/en-us/windows/wsl/install-win10", "anchor_text": "these directions", "paragraph_index": 9}, {"url": "https://towardsdatascience.com/brewing-up-custom-ml-models-on-aws-sagemaker-e09b64627722", "anchor_text": "This tutorial", "paragraph_index": 10}, {"url": "https://github.com/maxbren/aws-custom-docker-model-deploy-front-end/blob/master/docker-image-code/Dockerfile", "anchor_text": "Dockerfile,", "paragraph_index": 11}, {"url": "http://aws.amazon.com/ecr", "anchor_text": "AWS ECR", "paragraph_index": 19}, {"url": "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html", "anchor_text": "instructions", "paragraph_index": 22}, {"url": "https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth", "anchor_text": "this", "paragraph_index": 22}, {"url": "http://aws.amazon.com/sagemaker/", "anchor_text": "SageMaker", "paragraph_index": 27}, {"url": "https://github.com/maxbren/aws-custom-docker-model-deploy-front-end/blob/master/deploy-custom-model.ipynb", "anchor_text": "notebook", "paragraph_index": 28}, {"url": "https://aws.amazon.com/sagemaker/pricing/instance-types/", "anchor_text": "here", "paragraph_index": 31}, {"url": "https://aws.amazon.com/sagemaker/pricing/", "anchor_text": "Here", "paragraph_index": 34}, {"url": "https://aws.amazon.com/aws-cost-management/", "anchor_text": "AWS Cost Management", "paragraph_index": 34}, {"url": "http://aws.amazon.com/lambda/", "anchor_text": "AWS Lambda", "paragraph_index": 36}, {"url": "https://console.aws.amazon.com/iam/", "anchor_text": "AWS IAM", "paragraph_index": 37}, {"url": "https://github.com/maxbren/aws-custom-docker-model-deploy-front-end/blob/master/lambda-code.py", "anchor_text": "this code", "paragraph_index": 41}, {"url": "http://aws.amazon.com/api-gateway/", "anchor_text": "AWS API Gatway", "paragraph_index": 46}, {"url": "https://www.postman.com/", "anchor_text": "Postman", "paragraph_index": 56}, {"url": "http://console.aws.amazon.com/cloudwatch/", "anchor_text": "AWS CloudWatch", "paragraph_index": 63}, {"url": "https://medium.com/@kyle.galbraith/how-to-host-a-website-on-s3-without-getting-lost-in-the-sea-e2b82aa6cd38", "anchor_text": "This Medium article", "paragraph_index": 68}, {"url": "https://towardsdatascience.com/dbscan-clustering-explained-97556a2ad556", "anchor_text": "DBSCAN", "paragraph_index": 75}, {"url": "http://www.gardner.fyi/blog/STL-Part-II/", "anchor_text": "STL", "paragraph_index": 76}, {"url": "https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm", "anchor_text": "Generalized Extreme Studentized Deviate (GESD)", "paragraph_index": 76}, {"url": "http://www.google-trends-anomaly-detection.com.s3-website.us-east-2.amazonaws.com/", "anchor_text": "here", "paragraph_index": 77}, {"url": "https://trends.google.com/trends/?geo=US", "anchor_text": "google trends", "paragraph_index": 77}, {"url": "https://github.com/maxbren/aws-custom-docker-model-deploy-front-end", "anchor_text": "here", "paragraph_index": 81}], "all_paragraphs": ["Deploying a model with AWS SageMaker is a great way to allow users or customers to interact with it. While you can use the many algorithms and models that come with SageMaker\u2019s Python SDK, there are also many cases where you might want to create your own algorithm. This requires the use of Docker.", "The easiest way to let people interact with your model is by employing AWS Lambda and API Gateway to setup an API POST request to the model.", "Finally, having an API for sending requests and receiving inference responses from the model is great, but a simple and nice looking web app for users to interact with the data is even better. This is where hosting a static website with S3 and accessing the endpoint with AJAX comes into play.", "All of these components of AWS working in unison allows for a sleek development and inference serving framework. This tutorial also covers using AWS CloudWatch to understand ambiguous errors such as 500 Internal Server Errors from the custom model.", "Check out the repo for the some of the code mentioned below, here.", "To deploy a custom model with SageMaker it must be wrapped by SageMaker\u2019s Estimator class. This can be done by creating a Docker image that interfaces with this class.", "Also, check out this post, if you don\u2019t know what Docker is and why it's so important nowadays.", "Install Docker for your respective OS with these links: Mac, Ubuntu and Windows. Windows Home edition is a bit more difficult so I will cover some of the steps here, since Windows is the OS I use. Follow these steps first and see how far you get. Refer to the steps below if you get stuck.", "WSL 2 is required in Windows Home edition to run Docker Desktop.", "First, you must update to Windows 2004, do this by manually checking for updates and installing any that appear (warning: this will take a lot of memory and time). Then you can install WSL 2 using these directions.", "This tutorial does a great job of explaining each step to setting up a Docker image for our custom model. So follow that tutorial, but first keep these issues in mind:", "A problem I ran into with the template provided is with installing gevent. As you can see in my Dockerfile, I use easy_install instead of pip.", "Important: If you create the image code on Windows then you have to make the files Unix compatible, as the endline symbols are different. This can be done with the command dos2unix:", "Where /some/directory is the directory of the image code.", "Also, make sure to allow files such as model/serve and model/train to be executed with:", "Now follow the steps of the other tutorial until you get to the AWS ECR section. Make sure to create the image and locally test your model as described.", "Sometimes you may not need to actually train your model before inference. This was my case with my application I will show at the end of this article. Unfortunately, SageMaker still requires that the model must be fit before deploying. However, you can setup a dummy training script in the Docker image very easily. For example, you can just open the model path and write a dummy string as training.", "Here is (some of) my training script: docker-image-code/anomaly-model/train", "Once your model image has been created and it works locally, for SageMaker to be able to access it, it must be stored in AWS Elastic Container Registry (ECR).", "Go to AWS ECR and click \u201cGet Started\u201d. Click \u201cCreate repository\u201d in orange.", "Enter a name that represents your model under \u201cRepository name\u201d. And then \u201cCreate repository\u201d again. You don\u2019t need to change any of the other options.", "Then select the new repo and click \u201cView push commands\u201d", "Follow the \u201cmacOS / Linux\u201d commands that are shown on your page. If this is your first time doing something like this you will need AWS Command Line Interface (CLI). Follow these instructions. And authenticate Docker with this. Once CLI and authentication is setup you won\u2019t have to do it again.", "Whenever you want to update your model: update the image code, re-create the image, test it locally, and follow the push commands again.", "Phew, that probably took a while and some googling, especially if you are on Windows but hopefully I got you through it successfully. If not, let me know in the comments where the problem resides. At this point, you should have a working Docker image for your model and have stored it in the registry.", "Now we get into using other parts of AWS. First, we have to deploy the model with SageMaker, then use AWS Lambda and API Gateway to set up an API for posting data to your model and receiving an inference response.", "In a little more detail, the client calls the API created with API Gateway and passes in data for inference. API Gateway then passes this data to the Lambda function. Here it is parsed and sent to the SageMaker model endpoint (known as \u201cinvoking\u201d). The model performs prediction with this data and the output is sent back through lambda and API Gateway which responds to the client with the predicted value.", "First, we are going to deploy our model with SageMaker.", "Create a new notebook instance (or use an existing one). You can use the default settings, and set a name. Upload this notebook from my repo. The only thing that needs to be set is the docker_image_name variable, to the name of your registered docker image. It can be found in ECR under \u201crepositories\u201d as the URI:", "Let me explain the code for the notebook below:", "First install SageMaker version 1.72 (I could not get this to work with the most recent version but it might work now). The session, client and execution role are grabbed to create a bucket for the model output. The docker image name is the repo URI for your uploaded image.", "Create the estimator which takes many arguments. The one that can be changed based on your needs is train_instance_type. This is the AWS cloud compute instance that will be used to train the model when fit is called. Note: m1.m4.xlarge seems to be the least expensive one allowed for training. More instance types that may or may not work for training are listed here. If you need more memory for training or just want it to be faster try more expensive instances.", "Next, we call fit to train the model. This runs the train script in the docker image model directory. You will need to call fit even if the model\u2019s only purpose is inference. This was the case for my project.", "Finally, we make the endpoint by deploying the model. endpoint_name should be something recognizable. The instance types for inference can be even less intensive than for training such as m1.t2.medium which is the cheapest.", "Here is more about the price of SageMaker. Use AWS Cost Management to track training and deployment cost of your model (costs can quickly get out of hand if you are not careful about this).", "Now we have the model deployed! Lets figure out how to actually allow people to interact with it.", "We have to create a lambda function to invoke the endpoint. Go to AWS Lambda and create a new function. Name it something helpful, change the runtime to Python 3.6 and then select an existing execution role that has permission to invoke a model endpoint or create a new execution role.", "To give permission to invoke model endpoints to your role go to AWS IAM and then \u201cRoles\u201d on the sidebar:", "Click on the role which for the above example would be \u201cmyLambdaFunction-role-\u2026.\u201d. In the open \u201cPermissions\u201d tab, click the only policy.", "A JSON description of the policy should come up. Click \u201cEdit policy\u201d and then the \u201cJSON\u201d tabg and add the line \u201csagemaker:InvokeEndpoint\u201d like so:", "Which allows the role to interact with SageMaker endpoints. Click \u201cReview policy\u201d and \u201cSave changes\u201d in blue at the bottom.", "Back to lambda, in the \u201clambda_function\u201d code panel replace existing code with this code.", "First you will notice the ENDPOINT_NAME variable. This links our model\u2019s endpoint to this function. Which in my case is anomaly-detection-endpoint:", "Edit the \u201cEnvironment variables\u201d below the function code:", "Add an environment variable with the key as ENDPOINT_NAME and the value as the endpoint name from SageMaker. In my case it would be anomaly-detection-endpoint. And save it.", "Looking back at the lambda function code the next important thing is ContentType=\u2019application/json\u2019 in invoking the endpoint. In my case the input data is a JSON because I included some hyperparameters for inference, not just the input data for the model. However, if you don\u2019t need inference hyperparameters then you can make the type \u2018text/csv\u2019 and the steps are all pretty much the same.", "The last step of accessing the deployed model with a POST request is setting up an API. Go to AWS API Gatway and click \u201cCreate API\u201d in the top right after logging in. Then choose \u201cHTTP API\u201d as the type and click \u201cBuild\u201d. Add a Lambda Integration and choose the correct AWS Region and the name of the lambda function you just made. Then name the gateway. Something like this:", "Click \u201cNext\u201d and add a route. Select \u201cPOST\u201d for the method. In \u201cResource path\u201d input the lambda name again like /myLambdaFunction. And under \u201cIntegration target\u201d put the lambda function name yet again.", "For stages, add a stage called something like test and click the switch so that this stage is auto-deployed. This will be a part of the POST URI.", "Finally, hit \u201cCreate\u201d at the bottom.", "If you go back to your lambda function you will see API Gateway in the diagram at the top. Click it and then show the details. \u201cAPI endpoint\u201d is the URL for the POST request that people can use to get predictions from your model. It follows the format:", "Finally, you will probably want to allow all origins and headers in the CORS configuration for this API Gateway, otherwise you are going to run into CORS issues while trying to make a POST request in your static S3 website with AJAX.", "Go back to API Gateway and click on your API. Then go to \u201cCORS\u201d under \u201cDevelop\u201d in the sidebar.", "Click \u201cConfigure\u201d and add * for \u201cAccess-Control-Allow-Origins\u201d, * for \u201cAccess-Control-Allow-Headers\u201d and POST for \u201cAccess-Control-Allow-Methods\u201d. Then save it.", "You may wish to be more specific with these options as the wildcard * allows all possible options such as all possible origins accessing this API.", "Well that was another big section completed! Now the API is setup to receive predictions from your model. In the next section I will describe how to test the calls with Postman and use AWS CloudWatch to fix any ambiguous errors.", "Lets test the inference code of the model with Postman which is an API development platform and helpful for easily checking our new API. Install Postman for your OS if you haven\u2019t already. Then create a new request and select POST as the type. In the URL tab set the URL I mentioned above.", "You can change certain things about the request such as authorization or headers, although I did not change any of that from the default.", "Next, we are have to actually input the body of the request. This will contain the data we want the model to use to make a prediction. I\u2019ve found that the easiest way to do this is use the \u201craw\u201d tab under \u201cBody\u201d for both JSON and CSV data. This will avoid any encoding of the data (unless you need that).", "For a CSV body, paste the CSV data itself as a raw string. In the format of:", "For a JSON body, write the JSON string. If the actual model input itself is still in CSV format then you can add a key such as \u201cdata\u201d with the same value as above. Something like:", "Then click \u201cSend\u201d! Chances are something probably didn\u2019t work. Make sure your endpoint is still up from SageMaker (the notebook itself does NOT need to be running). Lambda is connected to the proper endpoint (from the env variables). And API Gateway is connected to Lambda, with the proper URL for the request. If you get a \u201c500 internal server error\u201d or \u201cModelError\u201d then something is amiss in your Docker image code OR lambda function code. This is where AWS CloudWatch comes in handy.", "The best way to figure out exactly what line of code is triggering an ambiguous error is to use AWS CloudWatch. I\u2019m not gonna go into a lot of detail on CloudWatch but I will mention some helpful things. AWS CloudWatch allows you to monitor running AWS processes that are recorded in logs. For example SageMaker training jobs, notebook instances or endpoints can be tracked.", "To figure out what is triggering an error go to AWS CloudWatch and on the left sidebar go to \u201cLog groups\u201d under \u201cLogs\u201d. You should have some log groups created. First check your lambda function logs. Click on it and you will see a bunch of log streams.", "The top most one is the most recent so click that and check out the specific messages. If there are issues from this log group then your lambda function is to blame.", "The other log group to check is the one attached to your endpoint. Any issue raised here indicates that something is incorrect in your Docker image code. Even if it ran fine locally there can be issues running it in AWS. Also there will be a lot of pings shown here, ignore them or try to filter through them.", "Hopefully, its running smoothly now and you get your expected output, if not leave a comment and I will help fix it.", "Finally, we have a working and accessible model. You can definitely stop there if all you need is the POST URL. However, another useful thing to do might be to make a nice looking front-end for people to input their own data into the model. An easy way to do this is to use S3 to create a static website to access the POST URL.", "This Medium article does a great job at describing step-by-step how to create a static website with S3. So instead of recreating this myself, check it out and go through all of its steps (Note: you don\u2019t need to set up a CNAME record).", "Once you are done with that the only thing I would recommend doing is adding a CORS policy by going to \u201cPermissions\u201d -> \u201cCORS configuration\u201d and pasting this:", "which will deal with CORS issues the same way we dealt with it in API Gateway.", "Lastly, lets hook up the API call with AJAX in our website. The call is simple and will look something like this:", "Note: Set the content type as text/plain to avoid it encoding your request data just like with Postman (unless you want that).", "That about wraps up the end-to-end development chain of deploying a custom model with AWS and setting it up with a nice user-facing front-end. If you want to make changes to your model code then re-make the Docker image and push it back to the ECR. Then redeploy. Also, delete the model endpoint when you don\u2019t want it deployed either from the SageMaker console or from the notebook code.", "I created a custom model that takes google trends data (CSV) and analyses the plot for anomalies with the algorithm Density-Based Clustering for Applications with Noise (DBSCAN) or Seasonal-Trend decomposition with Loess (STL).", "Briefly, DBSCAN is a machine learning clustering algorithm but can be used for anomaly detection given that unlike K-means it does not cluster all points. These leftover or unclustered points can be considered outliers/anomalies.", "STL is a statistical decomposition of time-series data for the purpose of detecting anomalies or exploring elements of the data. It decomposes the data into its seasonal pattern, trend and then residual. You can then use tests for outlier detection on the residual such as the Generalized Extreme Studentized Deviate (GESD) test. STL tends to work better than DBSCAN for data with a seasonal pattern, however if there is no seasonal pattern then STL cannot effectively be used.", "Check out my deployed model front-end here. Search a term on google trends and download the CSV:", "Then upload it on the website and fill in the hyperparameters given if there is seasonality to the data.", "Plot it, and it will look something like this:", "Note: The website may not be up all the time", "Let me know if it's not up and you would like to check it out or if you have any problems with these steps in the comments! And check out the accompanying code here.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Interested in all things machine learning, procedural and generative"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F8ee07edc24e6&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploying-a-custom-docker-model-with-sagemaker-to-a-serverless-front-end-with-s3-8ee07edc24e6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploying-a-custom-docker-model-with-sagemaker-to-a-serverless-front-end-with-s3-8ee07edc24e6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploying-a-custom-docker-model-with-sagemaker-to-a-serverless-front-end-with-s3-8ee07edc24e6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploying-a-custom-docker-model-with-sagemaker-to-a-serverless-front-end-with-s3-8ee07edc24e6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----8ee07edc24e6--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8ee07edc24e6--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@maxbrenner110?source=post_page-----8ee07edc24e6--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@maxbrenner110?source=post_page-----8ee07edc24e6--------------------------------", "anchor_text": "Max Brenner"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe83c3988e008&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploying-a-custom-docker-model-with-sagemaker-to-a-serverless-front-end-with-s3-8ee07edc24e6&user=Max+Brenner&userId=e83c3988e008&source=post_page-e83c3988e008----8ee07edc24e6---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8ee07edc24e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploying-a-custom-docker-model-with-sagemaker-to-a-serverless-front-end-with-s3-8ee07edc24e6&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8ee07edc24e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploying-a-custom-docker-model-with-sagemaker-to-a-serverless-front-end-with-s3-8ee07edc24e6&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@jjying?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "JJ Ying"}, {"url": "https://unsplash.com/s/photos/pipeline?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html", "anchor_text": "algorithms"}, {"url": "https://github.com/maxbren/aws-custom-docker-model-deploy-front-end", "anchor_text": "here"}, {"url": "https://sagemaker.readthedocs.io/en/stable/api/training/estimators.html", "anchor_text": "SageMaker\u2019s Estimator class"}, {"url": "https://medium.com/swlh/what-exactly-is-docker-1dd62e1fde38", "anchor_text": "post"}, {"url": "https://docs.docker.com/docker-for-mac/install/", "anchor_text": "Mac,"}, {"url": "https://docs.docker.com/engine/install/ubuntu/", "anchor_text": "Ubuntu"}, {"url": "https://docs.docker.com/docker-for-windows/install/", "anchor_text": "Windows"}, {"url": "https://docs.docker.com/docker-for-windows/install-windows-home/", "anchor_text": "steps"}, {"url": "https://docs.microsoft.com/en-us/windows/wsl/wsl2-index", "anchor_text": "WSL 2"}, {"url": "https://docs.microsoft.com/en-us/windows/wsl/install-win10", "anchor_text": "these directions"}, {"url": "https://towardsdatascience.com/brewing-up-custom-ml-models-on-aws-sagemaker-e09b64627722", "anchor_text": "This tutorial"}, {"url": "https://github.com/maxbren/aws-custom-docker-model-deploy-front-end/blob/master/docker-image-code/Dockerfile", "anchor_text": "Dockerfile,"}, {"url": "http://aws.amazon.com/ecr", "anchor_text": "AWS ECR"}, {"url": "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html", "anchor_text": "instructions"}, {"url": "https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth", "anchor_text": "this"}, {"url": "https://aws.amazon.com/blogs/machine-learning/call-an-amazon-sagemaker-model-endpoint-using-amazon-api-gateway-and-aws-lambda/", "anchor_text": "this"}, {"url": "http://aws.amazon.com/sagemaker/", "anchor_text": "SageMaker"}, {"url": "https://github.com/maxbren/aws-custom-docker-model-deploy-front-end/blob/master/deploy-custom-model.ipynb", "anchor_text": "notebook"}, {"url": "https://aws.amazon.com/sagemaker/pricing/instance-types/", "anchor_text": "here"}, {"url": "https://aws.amazon.com/sagemaker/pricing/", "anchor_text": "Here"}, {"url": "https://aws.amazon.com/aws-cost-management/", "anchor_text": "AWS Cost Management"}, {"url": "http://aws.amazon.com/lambda/", "anchor_text": "AWS Lambda"}, {"url": "https://console.aws.amazon.com/iam/", "anchor_text": "AWS IAM"}, {"url": "https://github.com/maxbren/aws-custom-docker-model-deploy-front-end/blob/master/lambda-code.py", "anchor_text": "this code"}, {"url": "http://aws.amazon.com/api-gateway/", "anchor_text": "AWS API Gatway"}, {"url": "https://www.postman.com/", "anchor_text": "Postman"}, {"url": "http://console.aws.amazon.com/cloudwatch/", "anchor_text": "AWS CloudWatch"}, {"url": "https://medium.com/@kyle.galbraith/how-to-host-a-website-on-s3-without-getting-lost-in-the-sea-e2b82aa6cd38", "anchor_text": "This Medium article"}, {"url": "http://s3.amazonaws.com/doc/2006-03-01/", "anchor_text": "http://s3.amazonaws.com/doc/2006-03-01/"}, {"url": "https://en.wikipedia.org/wiki/DBSCAN", "anchor_text": "Wikipedia"}, {"url": "https://towardsdatascience.com/dbscan-clustering-explained-97556a2ad556", "anchor_text": "DBSCAN"}, {"url": "https://machinelearningmastery.com/decompose-time-series-data-trend-seasonality/", "anchor_text": "machinelearningmastery"}, {"url": "http://www.gardner.fyi/blog/STL-Part-II/", "anchor_text": "STL"}, {"url": "https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm", "anchor_text": "Generalized Extreme Studentized Deviate (GESD)"}, {"url": "http://www.google-trends-anomaly-detection.com.s3-website.us-east-2.amazonaws.com/", "anchor_text": "here"}, {"url": "https://trends.google.com/trends/?geo=US", "anchor_text": "google trends"}, {"url": "https://github.com/maxbren/aws-custom-docker-model-deploy-front-end", "anchor_text": "here"}, {"url": "https://medium.com/tag/aws?source=post_page-----8ee07edc24e6---------------aws-----------------", "anchor_text": "AWS"}, {"url": "https://medium.com/tag/docker?source=post_page-----8ee07edc24e6---------------docker-----------------", "anchor_text": "Docker"}, {"url": "https://medium.com/tag/sagemaker?source=post_page-----8ee07edc24e6---------------sagemaker-----------------", "anchor_text": "Sagemaker"}, {"url": "https://medium.com/tag/s3?source=post_page-----8ee07edc24e6---------------s3-----------------", "anchor_text": "S3"}, {"url": "https://medium.com/tag/anomaly-detection?source=post_page-----8ee07edc24e6---------------anomaly_detection-----------------", "anchor_text": "Anomaly Detection"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8ee07edc24e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploying-a-custom-docker-model-with-sagemaker-to-a-serverless-front-end-with-s3-8ee07edc24e6&user=Max+Brenner&userId=e83c3988e008&source=-----8ee07edc24e6---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8ee07edc24e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploying-a-custom-docker-model-with-sagemaker-to-a-serverless-front-end-with-s3-8ee07edc24e6&user=Max+Brenner&userId=e83c3988e008&source=-----8ee07edc24e6---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8ee07edc24e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploying-a-custom-docker-model-with-sagemaker-to-a-serverless-front-end-with-s3-8ee07edc24e6&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8ee07edc24e6--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F8ee07edc24e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploying-a-custom-docker-model-with-sagemaker-to-a-serverless-front-end-with-s3-8ee07edc24e6&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----8ee07edc24e6---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----8ee07edc24e6--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----8ee07edc24e6--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----8ee07edc24e6--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----8ee07edc24e6--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----8ee07edc24e6--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----8ee07edc24e6--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----8ee07edc24e6--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----8ee07edc24e6--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@maxbrenner110?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@maxbrenner110?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Max Brenner"}, {"url": "https://medium.com/@maxbrenner110/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "238 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe83c3988e008&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploying-a-custom-docker-model-with-sagemaker-to-a-serverless-front-end-with-s3-8ee07edc24e6&user=Max+Brenner&userId=e83c3988e008&source=post_page-e83c3988e008--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ffb2cbe1972e0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploying-a-custom-docker-model-with-sagemaker-to-a-serverless-front-end-with-s3-8ee07edc24e6&newsletterV3=e83c3988e008&newsletterV3Id=fb2cbe1972e0&user=Max+Brenner&userId=e83c3988e008&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}