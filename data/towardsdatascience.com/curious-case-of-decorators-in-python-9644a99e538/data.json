{"url": "https://towardsdatascience.com/curious-case-of-decorators-in-python-9644a99e538", "time": 1683014544.291338, "path": "towardsdatascience.com/curious-case-of-decorators-in-python-9644a99e538/", "webpage": {"metadata": {"title": "Curious Case of Decorators in Python | by Anurag Pandey | Towards Data Science", "h1": "Curious Case of Decorators in Python", "description": "A decorator in Python is a function that accepts another function as parameter, and it usually modifies or enhances the function it accepted and returns the modified function."}, "outgoing_paragraph_urls": [{"url": "https://www.programiz.com/python-programming/closure", "anchor_text": "Closure", "paragraph_index": 23}], "all_paragraphs": ["The first time I came across the decorators in Python was when I was deploying my model using Flask. I was going through the Flask documentation and came across a decorator function, which reads like @app.route(\u201c/\u201d) . I was intrigued and started reading more about it and realized that concept of decorators is very interesting and useful.", "If you also came across a something like @some_function written over some other function, and you are curious to know about it then you should go through this article. The concept of decorators is considered a little bit hard to crack and this article attempts to simplify the understanding of decorators.", "Let us quickly go through the foundations and the building blocks to understand the concepts.", "To master the concept of decorators we should first know and be comfortable in using functions as an object.", "In Python, everything is an object and calling some object a first class object is just a fancy adjective used for an object having following privileges.", "In short, a first class object is like a football, which can be passed and thrown anywhere in a program. Let us take all the above mentioned characteristics of a first class object and look at them one by one.", "Functions can be stored in data structures such as list, tuples and dictionaries:", "Let\u2019s create few simple functions and store them as a collection in a list.", "Firstly, we defined two functions \u2018add\u2019 and \u2018multiply\u2019.", "Secondly, added these two functions to a list and then called the functions by accessing the functions through the list.", "Therefore, from this, we can easily see that the functions can be stored into a collection type data structure.", "Variables can be assigned to a function:", "We can assign a variable to a function, and then call the function using the assigned variable name. The code given below shows the same.", "In the code, we have assigned a variable \u2018var_add\u2019 to the function \u2018add\u2019 . Finally, the assigned variable has been used to call the function successfully.", "Functions can be passed as an argument to other functions:", "In Python a function is an object so it can also be passed as an argument to other functions.", "One important thing to note here is that when we are passing function as an object we never use functions with the brackets. The reason is simple, functions along with brackets are used to make a function call.", "The below mentioned code shows the difference. As we know the type() function returns the type of object/class, thus we have applied type function over the function name with and without brackets to know the difference between the two.", "A function can be returned from a function:", "As mentioned above, we know that a function is an object therefore a function can return a function object. The code below shows the same.", "There is a one very important feature of the nested functions that we need to know to understand Decorators, we will discuss that feature in brief here.", "In the code below, we have defined an outer function with an inner function nested inside the outer function. The interesting thing to note here is that the inner nested function can access the parameters/arguments of the outer function.", "Note: Parameters refers to the variables when we are defining a function whereas the arguments are the values assigned to those parameters while calling a function.", "A nested function can access parameters/variables of the enclosing scope. This feature of a nested functions is called Closure. This feature is extensively used in decorators.", "So now, we know some of the most important features of the function object. Thus, we have the perfect foundation to build the concept of decorators.", "First let us go through the definition of decorator function.", "A decorator in Python is a function that accepts another function as parameter, and it usually modifies or enhances the function it accepted and returns the modified function.", "To understand this definition of decorator lets go through the code given below, step by step.", "Firstly, we have defined a decorator function with function name \u2018decorator\u2019. This function accepts another function \u2018func\u2019 as a parameter.", "Secondly, the decorator function is an outer function and it also has an inner function named as \u2018wrapper\u2019 defined inside decorator function. This wrapper function calls the function func(a,b) and returns the square of the value returned by the function func(a,b).", "Thirdly, This decorator function accepts \u2018func\u2019 as a parameter and returns the wrapper function.", "Fourthly, we have also defined a function add separately. The intent of defining this function is to pass this function to the decorator function and check , how it has been modified.", "We can see that the function behavior of the \u2018add\u2019 function has been completely modified after the application of decorator function over it.", "If we go deeper and check the name of the underlying function then we see that it is the wrapper function, which is running underneath the name \u2018add\u2019. Therefore \u2018add\u2019 is just a variable name assigned to the wrapper function.", "That is the reason why original function \u2018add\u2019 is not adding number but squaring the sum of the numbers after the application of decorator.", "To make the decorators more readable, we use @ along with the decorator function name.", "Both ways (with or without \u2018@\u2019) we can assign a decorator function. However, using \u2018@\u2019 generally accepted and clean way of assigning decorators to python functions.", "Decorators are generally defined before the function it modifies. However, in the decorator defined above, the wrapper function uses the same number of parameters as in the function on which the decorator is being applied. That was just a simple example to show how decorator works.", "In contrast to the decorator defined above, if we want to create a decorator which can be applied to any function then we need a flexibility in assigning number of parameters. That flexibility is achieved by *args and **kwargs. *args and **kwargs allow us to pass multiple arguments or keyword based arguments to a function.", "From the code below we can see that we have passed multiple arguments while calling function xyz.", "The multiple arguments are stored in the the variable args and * is used to unpack these arguments and thus we are able achieve the flexibility in number of arguments in a function.", "We can call the same xyz function with 2 arguments and it works fine.", "Similarly, we can understand functioning of **kwargs as mentioned in the code below . Here again ** act as an unpacking operator and kwargs acts like a dictionary of key value pairs.", "Now after knowing *args and **kwargs we can create a generalized decorator which is independent of number of arguments.", "The below mentioned code shows how we can use *args ,**kwargs as per the requirements in the wrapper function because ultimately its the wrapper function which is going the replace the original function (add_num(x,y)) by using the arguments of the original function.", "After the application of the decorator function over original function add_num, it got modified and instead of adding the arguments it started returning the sum of the squares of the arguments.", "We can apply this decorator on function with any number of arguments (refer code below). So we can create a decorator once and use it anywhere it is required.", "The intent of this article was to give you enough information that it becomes easier for the reader to understand, work, and build upon the basics of decorators.", "For data enthusiasts, there are several places where you will come across decorators in Python:", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F9644a99e538&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcurious-case-of-decorators-in-python-9644a99e538&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcurious-case-of-decorators-in-python-9644a99e538&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcurious-case-of-decorators-in-python-9644a99e538&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcurious-case-of-decorators-in-python-9644a99e538&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----9644a99e538--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9644a99e538--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://anunitb.medium.com/?source=post_page-----9644a99e538--------------------------------", "anchor_text": ""}, {"url": "https://anunitb.medium.com/?source=post_page-----9644a99e538--------------------------------", "anchor_text": "Anurag Pandey"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F7389704abd15&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcurious-case-of-decorators-in-python-9644a99e538&user=Anurag+Pandey&userId=7389704abd15&source=post_page-7389704abd15----9644a99e538---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9644a99e538&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcurious-case-of-decorators-in-python-9644a99e538&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9644a99e538&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcurious-case-of-decorators-in-python-9644a99e538&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.programiz.com/python-programming/closure", "anchor_text": "Closure"}, {"url": "https://wiki.python.org/moin/PythonDecoratorLibrary", "anchor_text": "https://wiki.python.org/moin/PythonDecoratorLibrary"}, {"url": "https://realpython.com/primer-on-python-decorators/#:~:text=Decorators%20provide%20a%20simple%20syntax,function%20without%20explicitly%20modifying%20it.", "anchor_text": "Primer on Python Decorators by Geir Arne Hjelle"}, {"url": "https://python101.pythonlibrary.org/chapter25_decorators.html", "anchor_text": "https://python101.pythonlibrary.org/chapter25_decorators.html"}, {"url": "https://www.programiz.com/python-programming/closure", "anchor_text": "https://www.programiz.com/python-programming/closure"}, {"url": "https://www.datacamp.com/community/tutorials/decorators-python", "anchor_text": "Article on Decorator by Derrick Mwiti"}, {"url": "https://medium.com/tag/data-science?source=post_page-----9644a99e538---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----9644a99e538---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/python?source=post_page-----9644a99e538---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/python-programming?source=post_page-----9644a99e538---------------python_programming-----------------", "anchor_text": "Python Programming"}, {"url": "https://medium.com/tag/functional-programming?source=post_page-----9644a99e538---------------functional_programming-----------------", "anchor_text": "Functional Programming"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9644a99e538&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcurious-case-of-decorators-in-python-9644a99e538&user=Anurag+Pandey&userId=7389704abd15&source=-----9644a99e538---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9644a99e538&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcurious-case-of-decorators-in-python-9644a99e538&user=Anurag+Pandey&userId=7389704abd15&source=-----9644a99e538---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9644a99e538&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcurious-case-of-decorators-in-python-9644a99e538&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9644a99e538--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F9644a99e538&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcurious-case-of-decorators-in-python-9644a99e538&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----9644a99e538---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----9644a99e538--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----9644a99e538--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----9644a99e538--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----9644a99e538--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----9644a99e538--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----9644a99e538--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----9644a99e538--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----9644a99e538--------------------------------", "anchor_text": ""}, {"url": "https://anunitb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://anunitb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Anurag Pandey"}, {"url": "https://anunitb.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "264 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F7389704abd15&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcurious-case-of-decorators-in-python-9644a99e538&user=Anurag+Pandey&userId=7389704abd15&source=post_page-7389704abd15--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F8221d7be6714&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcurious-case-of-decorators-in-python-9644a99e538&newsletterV3=7389704abd15&newsletterV3Id=8221d7be6714&user=Anurag+Pandey&userId=7389704abd15&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}