{"url": "https://towardsdatascience.com/using-columntransformer-to-combine-data-processing-steps-af383f7d5260", "time": 1683004124.113733, "path": "towardsdatascience.com/using-columntransformer-to-combine-data-processing-steps-af383f7d5260/", "webpage": {"metadata": {"title": "Using ColumnTransformer to combine data processing steps | by Allison Stafford | Towards Data Science", "h1": "Using ColumnTransformer to combine data processing steps", "description": "This scikit-learn tool comes in extremely handy, but also has some quirks of its own. Today we\u2019ll be using it to transform data on ferry wait time for the Edmonds-Kingston route of the Washington\u2026"}, "outgoing_paragraph_urls": [{"url": "https://scikit-learn.org/stable/modules/generated/sklearn.compose.ColumnTransformer.html#sklearn.compose.ColumnTransformer", "anchor_text": "compose.ColumnTransformer", "paragraph_index": 1}, {"url": "https://github.com/allisonhonold/column_transformer_ferry_wait_blog", "anchor_text": "GitHub repo", "paragraph_index": 27}], "all_paragraphs": ["This scikit-learn tool comes in extremely handy, but also has some quirks of its own. Today we\u2019ll be using it to transform data on ferry wait time for the Edmonds-Kingston route of the Washington State Ferries. (Thank you WSF for the data!). Full disclosure: we\u2019re just going to use a small portion of the data set today.", "More full disclosure \u2014 a warning from scikit-learn: \u201cWarning: The compose.ColumnTransformer class is experimental and the API is subject to change.\u201d", "ColumnTransformers come in handy when you are creating a data pipeline where different columns need different transformations. Perhaps you have a combination of categorical and numeric features. Perhaps you want to use different imputation strategies to fill NaNs in different numeric columns. You could transform each column separately and then stitch them together, or you can use ColumnTransformer to do that work for you.", "Here\u2019s a basic example. In this case, our input features are weekday (0\u20136 Monday-Sunday), hour (0\u201323), and maximum, average, and minimum daily temperature. I want to standard scale the temperature features and one hot encode the date features.", "Assuming I have my input and target DataFrames (X_train, y_train) already loaded:", "We are then ready to transform!", "More likely, you\u2019ll add the ColumnTransformer as a step in your Pipeline:", "And now your pipe is ready to make predictions! Or to be used in cross validation without leaking information across slices.", "Note that we need to indicate the column in the format expected by the transformer. If the transformer expects a 2D array, pass a list of string columns (even if it is only one column \u2014 eg. [\u2018col1']). If the transformer expects a 1D array, pass just the string column name \u2014 eg. 'col1'.", "But things aren\u2019t always this easy \u2014 maybe your data set has null values and needs multiple transformations on the same column, you want a custom transformer, or you want to dig deeper into feature importances, maybe not all OneHotEncoder categories are practically guaranteed to be present in all data slices.", "The first time I used ColumnTransformer, I thought that it would perform the transformations in order, and that I could start with SimpleImputing my NaNs on whatever columns, then StandardScale(r) an overlapping subset of columns, then OneHotEncode another overlapping subset of columns, etc, etc. I was wrong. If you want multiple transformations on the same column, you need a pipeline. That means a pipeline for each set of columns that are getting the same treatment, for example:", "From the scikit-learn docs: \u201cThe order of the columns in the transformed feature matrix follows the order of how the columns are specified in the transformers list. Columns of the original feature matrix that are not specified are dropped from the resulting transformed feature matrix, unless specified in the passthrough keyword. Those columns specified with passthrough are added at the right to the output of the transformers.\u201d", "So for the examples above, the preprocessed array columns are:", "This is pretty tedious to do by hand. For transformations that provide feature names, you can access them like this:", "Here, \u2018ohe\u2019 is the name of my transformer in the first example. Unfortunately, transformers that don\u2019t create more features/columns don\u2019t typically have this method, and ColumnTransformer relies on this attribute of its interior transformers. If you are using only transformers that have this method, then you can call col_transformer.get_feature_names() to easily get them all. I haven\u2019t had this opportunity yet, but we might at some point. Or maybe this column tracking functionality will be added to a future ColumnTransformer release.", "Note: If you are using pipelines (like in tip #1), you\u2019ll need to dig a little deeper, and use the Pipeline attribute named_steps. In this case:", "ColumnTransformer works with any transformer, so feel free to create your own. We\u2019re not going to go too deep into custom transformers today, but there is a caveat when using custom transformers with ColumnTransformer that I wanted to point out.", "For our ferry project, we can extract the date features with a custom transformer:", "Note that ColumnTransformer \u201csends\u201d the columns as a numpy array. To convert these timestamps from strings, I cast them as a pandas DataFrame (maybe not the most elegant solution).", "Note that ColumnTransformer \u201csends\u201d all of the specified columns to our transformer together. This means that you need to design your transformer to take and transform multiple columns at the same time, or make sure to send each column in a separate line of the ColumnTransformer. Since our custom transformer is only designed for process a single column, we would need to tailor our ColumnTransformer like this (assuming we want to re-use it in a situation with two datetime columns that we want to expand):", "The key here is that your model is expecting the same number of features in the training set, the testing set, and your production inputs.", "If we have any rare categorical features that end up not present in each of these groups, the default OneHotEncoding settings are going to produce different numbers of columns for the different input sets.", "Similarly, SimpleImputer only creates a \u201cflag\u201d column if there are any NaNs to impute. If one or more of the input sets happens to not have any NaNs, then the number of columns will again be different after the preprocessing stage.", "This can raise a couple of different errors including:", "For the OneHotEncoding issue, you can list the categories when you initialize the ohe. If you had two categorical features with the first having categories 'one\u2019 and 'two\u2019, and the second having 'March\u2019, 'April\u2019, you could indicate this way: OneHotEncoder(categories=[['one', 'two'], ['March', 'April]]).", "For the SimpleImputer, you can not use a flag, drop the columns with NaN (if it is so few), adjust your train-test split (and ensure that your production inputs account for this difference), or create your own transformer that builds on SimpleImputer by adding a flag column regardless of the presence of NaNs.", "This data prep step feels a little unsatisfying today, as we don\u2019t have any conclusions or fun facts derived from our data set (yet). But as you all know, this is an essential step on our way to predicting the ferry wait time (or whatever else you want to predict/classify/etc).", "As always, check out the GitHub repo for the full code. Happy coding!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data scientist with a background in business, education, and environmental science."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Faf383f7d5260&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-columntransformer-to-combine-data-processing-steps-af383f7d5260&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-columntransformer-to-combine-data-processing-steps-af383f7d5260&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-columntransformer-to-combine-data-processing-steps-af383f7d5260&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-columntransformer-to-combine-data-processing-steps-af383f7d5260&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----af383f7d5260--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----af383f7d5260--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@allison.stafford?source=post_page-----af383f7d5260--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@allison.stafford?source=post_page-----af383f7d5260--------------------------------", "anchor_text": "Allison Stafford"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F87b1f621568d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-columntransformer-to-combine-data-processing-steps-af383f7d5260&user=Allison+Stafford&userId=87b1f621568d&source=post_page-87b1f621568d----af383f7d5260---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Faf383f7d5260&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-columntransformer-to-combine-data-processing-steps-af383f7d5260&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Faf383f7d5260&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-columntransformer-to-combine-data-processing-steps-af383f7d5260&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://scikit-learn.org/stable/modules/generated/sklearn.compose.ColumnTransformer.html#sklearn.compose.ColumnTransformer", "anchor_text": "compose.ColumnTransformer"}, {"url": "https://unsplash.com/@bryanhanson?utm_source=medium&utm_medium=referral", "anchor_text": "Bryan Hanson"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://github.com/allisonhonold/column_transformer_ferry_wait_blog", "anchor_text": "GitHub repo"}, {"url": "https://unsplash.com/@patrickrobinson?utm_source=medium&utm_medium=referral", "anchor_text": "Patrick Robinson"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://medium.com/tag/columntransformer?source=post_page-----af383f7d5260---------------columntransformer-----------------", "anchor_text": "Columntransformer"}, {"url": "https://medium.com/tag/python?source=post_page-----af383f7d5260---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/data-preparation?source=post_page-----af383f7d5260---------------data_preparation-----------------", "anchor_text": "Data Preparation"}, {"url": "https://medium.com/tag/pipeline?source=post_page-----af383f7d5260---------------pipeline-----------------", "anchor_text": "Pipeline"}, {"url": "https://medium.com/tag/one-hot-encoder?source=post_page-----af383f7d5260---------------one_hot_encoder-----------------", "anchor_text": "One Hot Encoder"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Faf383f7d5260&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-columntransformer-to-combine-data-processing-steps-af383f7d5260&user=Allison+Stafford&userId=87b1f621568d&source=-----af383f7d5260---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Faf383f7d5260&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-columntransformer-to-combine-data-processing-steps-af383f7d5260&user=Allison+Stafford&userId=87b1f621568d&source=-----af383f7d5260---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Faf383f7d5260&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-columntransformer-to-combine-data-processing-steps-af383f7d5260&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----af383f7d5260--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Faf383f7d5260&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-columntransformer-to-combine-data-processing-steps-af383f7d5260&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----af383f7d5260---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----af383f7d5260--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----af383f7d5260--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----af383f7d5260--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----af383f7d5260--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----af383f7d5260--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----af383f7d5260--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----af383f7d5260--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----af383f7d5260--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@allison.stafford?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@allison.stafford?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Allison Stafford"}, {"url": "https://medium.com/@allison.stafford/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "386 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F87b1f621568d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-columntransformer-to-combine-data-processing-steps-af383f7d5260&user=Allison+Stafford&userId=87b1f621568d&source=post_page-87b1f621568d--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fb4bbbb8c248&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-columntransformer-to-combine-data-processing-steps-af383f7d5260&newsletterV3=87b1f621568d&newsletterV3Id=b4bbbb8c248&user=Allison+Stafford&userId=87b1f621568d&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}