{"url": "https://towardsdatascience.com/encoders-how-to-write-them-how-to-use-them-d8dd70f45e39", "time": 1683013055.007891, "path": "towardsdatascience.com/encoders-how-to-write-them-how-to-use-them-d8dd70f45e39/", "webpage": {"metadata": {"title": "Encoders \u2014 How To Write Them, How To Use Them | by Emma Boudreau | Towards Data Science", "h1": "Encoders \u2014 How To Write Them, How To Use Them", "description": "In a perfect world, all programmers, scientists, data-engineers, analysts, and machine-learning engineers alike dream that all data could arrive at their doorstep in the cleanest form possible\u2026"}, "outgoing_paragraph_urls": [], "all_paragraphs": ["In a perfect world, all programmers, scientists, data-engineers, analysts, and machine-learning engineers alike dream that all data could arrive at their doorstep in the cleanest form possible. Unfortunately, humans went and developed the phonetic alphabet before they started talking in binary, or \u201c beep boop\u201d speech. As a result, it is unfortunately incredibly common to come across words (or \u201c strings\u201d in \u201c beep boop\u201d language) rather than numbers when working with data-sets, and this is even true of the cleanest data-sets available today.", "The problem with the combination of data and strings and words is that words cannot directly be analyzed by an artificial brain. Computers speak quantitatively, rather than qualitatively. Asking a computer to interpret words, especially sentences with subjective meaning or emotion is like having the Cookie monster eat celery;", "it\u2019s just not going to happen.", "Fortunately, there is a solution to this problem \u2014 there are many different ways that you can approach turning words into numbers for analysis! Though doing so might not allow a computer to analyze certain things about words, it can certainly help with solving common machine-learning problems that you may encounter in the educational grind that is Data-Science. Typically, whenever machine-learning is being done with strings, a Data-Scientist will be working with an encoder. Without further ado, let\u2019s look at some encoders!", "If you\u2019re new to machine-learning, one trick you should definitely snatch up as soon as possible is the ability to One-Hot-Encode a Data-Frame. One-Hot-Encoding, also called One-Hot, or Dummy-Encoding takes a very radical approach to dealing with categorical variables. Typically, I use One-Hot in situations where I have as few categories as possible. This is because first and foremost, One-Hot-Encoded data takes up a lot of memory and disk space compared to the other algorithms available. Additionally, One-Hot really shines in this exact light.", "When working with large sets of categorical features, One-Hot can turn a 5 column dataframe into a 50 column dataframe, which is incredibly hard to work with! On top of that, typically with higher stakes in categories, One-Hot\u2019s effectiveness may drop dramatically. To understand why this may happen, let\u2019s write a One-Hot-Encoder, and see what happens when we use it. We\u2019ll start by defining the function. When working with data-altering and data-destructive methods, it\u2019s a good idea to at the very least do an assertion or shallow copy. Since we are working with dataframes, it would probably be a great idea to use a library like copy, especially in Python. For this example, I am not going to do so \u2014 as my intention is to add the columns onto my dataframe, and my data itself is extremely unimportant and only for demonstration purposes.", "Next, we are going to need to loop through the unique values in our dataframe:", "Next, we\u2019ll use a little bit of clever iterative syntax to create a one-line One-Hot algorithm in this loop:", "Basically what this does is loops through all of the values on the \u201c symb\u201d column of copy. Symb in this example of course represents the column that is the key for our dictionary. We are adding a new key with copy[!, Symbol(c)] and then setting it equal to a condition. The .== operand in Julia is the same thing as the == operand, just for an entire array. As a result, this will fill the new column with booleans, true or false values, that correspond with whether or not the value in our original column corresponds with our new column\u2019s value. Now we will return the copy dataframe and end our function.", "What does this look like in practice?", "As you can see, we now have four boolean columns. There is one column for each unique string inside of the Weather column.", "An entirely different approach to take to making categorical features numeric is Ordinal Encoding. Rather than taking the One-Hot approach of using booleans to represent values, an ordinal encoder instead uses integers \u2014", "Ordinal Encoding is far less CPU and more importantly memory intensive than One-Hot. Ordinal Encoding really outshines One-Hot whenever the categories are very high. At a certain point, One-Hot just can\u2019t keep up and Ordinal Encoding is the way to go. How exactly does an ordinal encoder turn strings into integers?", "Let\u2019s look at some code to find out!", "As I explained prior to the One-Hot example, it would be wise to copy your variables here. It\u2019s much better to add a simple copy than have to backtrack or restart your work because of some messed up data, and this is especially true if you\u2019re working in a REPL. The first thing I\u2019m going to do in this function is create a set.", "A set is a fantastic type that is available in both Julia and Python that will make getting unique values far quicker and simpler than it would be otherwise. After we get our set, we\u2019ll create a new dictionary:", "This is not only a dictionary in the \u201c type\u201d sense, but also a very real dictionary that is used to look up values that correspond to keys. Before we can go searching for our favorite words in the dictionary, however, we are going to need to populate it. We can do this by enumerating our set iteratively and adding those keys and corresponding values to our dictionary:", "Next, we will create a new array:", "And then iteratively we will append our values back to it after checking to see which key it corresponds with in our dictionary:", "Then i\u2019m going to add my predict() function and return a type to facilitate the use of it.", "Here is the function as a whole:", "Fortunately, this function can also be simplified to a painful degree. Check this out:", "Now let\u2019s test it out on that data-set.", "As you can see, the Ordinal Encoder simply enumerates all of the unique values in the dataframe and then reapplies that value across all of the observations in the column. Pretty simple, but easily the most versatile and effective of the three encoders I am going over today. The great thing about this encoder is that it is for the most part a \u201c one size fits all\u201d experience. This is because performance isn\u2019t necessarily of great concern and it works well with large categories as well as small categories, though it may lose some accuracy depending on the situation it is found in.", "What is a Label Encoder? Chances are that anyone reading this article knows exactly what a Label Encoder is \u2014 because we just created one from scratch! That\u2019s right, the Label Encoder is the same exact thing as the Ordinal Encoder \u2014 at least in function. No, this is not quite the same situation that we have seen with Dummy Encoding VS. One-Hot Encoding. The entire reason that both of these terms exist is because of the way Sklearn built their pre-processing package. In order to have both the Label Encoder and the Ordinal Encoder work very effectively at their tasks, they needed to be separate. The big difference between these two is that the Label Encoder is typically used for targets, whereas the Ordinal Encoder is typically used to encode features \u2014 that\u2019s it! So if you\u2019re wondering what the code looks like, just cover up the function definition here and pretend it says \u201c LabelEncoder.\u201d", "An ASCII Encoder, also known as a Float Encoder (why do all encoders need two names?) uses the ASCII system of numbering the phonetic alphabet and symbols to create unique categories based on the chars contained inside of a string. This is both effective, and versatile, as this system can not only apply to standard categorical problems, but also natural language processing! On top of that, it is also incredibly easy to do, and can be very effective, especially when working with a data-set with many different values.", "The first step in creating an ASCII encoder is to split up your strings into chars. This can be done with the split() method, or an iterative loop over the string. While the latter is more intensive it is what I usually prefer.", "Next, you have a manipulative decision to make. If we were attempting to perform some sort of natural language processing on these chars, or if we had an absolutely enormous number of categories, it might be wise to go char-by-char and create a new integer that is a series of numbers to represent individual characters in the string. However, since we are just trying to categorize a very small data-set, instead I would advise adding the numbers, like so:", "Then we\u2019ll append it to our new list of numbers and create our predict function just like before, and here we go:", "As you can see, you get a dramatically different result, and the algorithm can also be manipulated to achieve a lot more goals than just categorical encoding.", "Encoders. Are. Awesome! Learning to read data and use the correct encoder is likely the biggest problem associated with using each encoder. Fortunately, understanding how they work and being able to write them makes it far easier to imagine what encoder might work really well in your particular situation. No matter what situation you might find yourself in with that regard, you will always learn from it and be able to apply your newly found skill in a new way. Thank you for reading my article, and have a great rest of your day (or night!)", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fd8dd70f45e39&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fencoders-how-to-write-them-how-to-use-them-d8dd70f45e39&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fencoders-how-to-write-them-how-to-use-them-d8dd70f45e39&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fencoders-how-to-write-them-how-to-use-them-d8dd70f45e39&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fencoders-how-to-write-them-how-to-use-them-d8dd70f45e39&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----d8dd70f45e39--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----d8dd70f45e39--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://emmettgb.medium.com/?source=post_page-----d8dd70f45e39--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=post_page-----d8dd70f45e39--------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fencoders-how-to-write-them-how-to-use-them-d8dd70f45e39&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c----d8dd70f45e39---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd8dd70f45e39&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fencoders-how-to-write-them-how-to-use-them-d8dd70f45e39&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd8dd70f45e39&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fencoders-how-to-write-them-how-to-use-them-d8dd70f45e39&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/emmettgb/Emmetts-DS-NoteBooks/blob/master/Julia/ordinal1hotfloatencoders.ipynb", "anchor_text": "notebook"}, {"url": "https://medium.com/tag/programming?source=post_page-----d8dd70f45e39---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----d8dd70f45e39---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/data-science?source=post_page-----d8dd70f45e39---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/julia?source=post_page-----d8dd70f45e39---------------julia-----------------", "anchor_text": "Julia"}, {"url": "https://medium.com/tag/python?source=post_page-----d8dd70f45e39---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd8dd70f45e39&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fencoders-how-to-write-them-how-to-use-them-d8dd70f45e39&user=Emma+Boudreau&userId=ea170050148c&source=-----d8dd70f45e39---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd8dd70f45e39&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fencoders-how-to-write-them-how-to-use-them-d8dd70f45e39&user=Emma+Boudreau&userId=ea170050148c&source=-----d8dd70f45e39---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd8dd70f45e39&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fencoders-how-to-write-them-how-to-use-them-d8dd70f45e39&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----d8dd70f45e39--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fd8dd70f45e39&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fencoders-how-to-write-them-how-to-use-them-d8dd70f45e39&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----d8dd70f45e39---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----d8dd70f45e39--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----d8dd70f45e39--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----d8dd70f45e39--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----d8dd70f45e39--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----d8dd70f45e39--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----d8dd70f45e39--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----d8dd70f45e39--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----d8dd70f45e39--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://emmettgb.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "4.6K Followers"}, {"url": "https://twitter.com/emmettboudgie", "anchor_text": "https://twitter.com/emmettboudgie"}, {"url": "https://github.com/emmettgb", "anchor_text": "https://github.com/emmettgb"}, {"url": "https://ems.computer/", "anchor_text": "https://ems.computer/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fencoders-how-to-write-them-how-to-use-them-d8dd70f45e39&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff16bf42bb45f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fencoders-how-to-write-them-how-to-use-them-d8dd70f45e39&newsletterV3=ea170050148c&newsletterV3Id=f16bf42bb45f&user=Emma+Boudreau&userId=ea170050148c&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}