{"url": "https://towardsdatascience.com/training-two-agents-to-play-tennis-8285ebfaec5f", "time": 1682995137.3269272, "path": "towardsdatascience.com/training-two-agents-to-play-tennis-8285ebfaec5f/", "webpage": {"metadata": {"title": "Training Bots to Play Tennis. Deep Reinforcement Learning for\u2026 | by Thomas Tracey | Towards Data Science", "h1": "Training Bots to Play Tennis", "description": "This post explores my work on the final project for Udacity\u2019s Deep Reinforcement Learning Nanodegree. My goal is to help other machine learning (ML) students and professionals who are in the early\u2026"}, "outgoing_paragraph_urls": [{"url": "https://ttracey.com/", "anchor_text": "Thomas Tracey", "paragraph_index": 0}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/README.md", "anchor_text": "posted on Github", "paragraph_index": 0}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition", "anchor_text": "final project", "paragraph_index": 1}, {"url": "https://www.udacity.com/course/deep-reinforcement-learning-nanodegree--nd893", "anchor_text": "Deep Reinforcement Learning Nanodegree", "paragraph_index": 1}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition", "anchor_text": "here", "paragraph_index": 3}, {"url": "https://github.com/udacity/deep-reinforcement-learning/tree/master/p3_collab-compet", "anchor_text": "here", "paragraph_index": 3}, {"url": "https://skymind.ai/wiki/deep-reinforcement-learning", "anchor_text": "Reinforcement learning (RL)", "paragraph_index": 5}, {"url": "https://gym.openai.com/envs/#atari", "anchor_text": "large set of virtual environments", "paragraph_index": 6}, {"url": "https://papers.nips.cc/paper/7217-multi-agent-actor-critic-for-mixed-cooperative-competitive-environments.pdf", "anchor_text": "Multi-Agent Actor-Critic for Mixed Cooperative-Competitive Environments", "paragraph_index": 8}, {"url": "https://openai.com/five/", "anchor_text": "OpenAI Five", "paragraph_index": 10}, {"url": "https://deepmind.com/blog/alphastar-mastering-real-time-strategy-game-starcraft-ii/", "anchor_text": "DeepMind AlphaStar", "paragraph_index": 10}, {"url": "https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Learning-Environment-Examples.md#tennis", "anchor_text": "Tennis environment", "paragraph_index": 12}, {"url": "https://en.wikipedia.org/wiki/Hyperparameter_optimization#Approaches", "anchor_text": "systematic approach to hyperparameter tuning", "paragraph_index": 18}, {"url": "https://github.com/tommytracey/DeepRL-P1-Navigation", "anchor_text": "first project in Udacity\u2019s Deep RL program", "paragraph_index": 22}, {"url": "https://arxiv.org/pdf/1509.02971.pdf", "anchor_text": "this paper", "paragraph_index": 25}, {"url": "https://github.com/udacity/deep-reinforcement-learning/tree/master/ddpg-pendulum", "anchor_text": "this vanilla, single-agent DDPG", "paragraph_index": 26}, {"url": "https://papers.nips.cc/paper/7217-multi-agent-actor-critic-for-mixed-cooperative-competitive-environments.pdf", "anchor_text": "this paper", "paragraph_index": 26}, {"url": "https://papers.nips.cc/paper/7217-multi-agent-actor-critic-for-mixed-cooperative-competitive-environments.pdf", "anchor_text": "the paper by Lowe and Wu", "paragraph_index": 30}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/maddpg_agent.py#L110", "anchor_text": "here", "paragraph_index": 31}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/model.py#L12", "anchor_text": "here", "paragraph_index": 31}, {"url": "https://github.com/tommytracey/DeepRL-P2-Continuous-Control", "anchor_text": "Continuous Control: Training a Set of Robotic Arms", "paragraph_index": 32}, {"url": "https://github.com/tommytracey/DeepRL-P1-Navigation", "anchor_text": "Navigation project", "paragraph_index": 34}, {"url": "https://github.com/tommytracey/DeepRL-P1-Navigation/blob/master/agent.py#L80", "anchor_text": "\ud835\udec6-greedy algorithm", "paragraph_index": 34}, {"url": "https://arxiv.org/pdf/1509.02971.pdf", "anchor_text": "previously mentioned paper by Google DeepMind", "paragraph_index": 36}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/maddpg_agent.py#L167", "anchor_text": "here", "paragraph_index": 37}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/maddpg_agent.py#L79", "anchor_text": "here", "paragraph_index": 42}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/maddpg_agent.py#L150", "anchor_text": "here", "paragraph_index": 42}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/maddpg_agent.py#L67", "anchor_text": "here", "paragraph_index": 46}, {"url": "https://machinelearningmastery.com/exploding-gradients-in-neural-networks", "anchor_text": "this post by Jason Brownlee", "paragraph_index": 49}, {"url": "https://pytorch.org/docs/stable/_modules/torch/nn/utils/clip_grad.html", "anchor_text": "torch.nn.utils.clip_grad_norm", "paragraph_index": 50}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/maddpg_agent.py#L128", "anchor_text": "here", "paragraph_index": 51}, {"url": "https://github.com/tommytracey/DeepRL-P2-Continuous-Control", "anchor_text": "previous project", "paragraph_index": 54}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/maddpg_agent.py#L196", "anchor_text": "here", "paragraph_index": 57}, {"url": "https://youtu.be/jOWWzygOi1A", "anchor_text": "Here", "paragraph_index": 59}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/Tennis.ipynb", "anchor_text": "Tennis.ipynb", "paragraph_index": 60}, {"url": "https://linkedin.com/in/thomastracey", "anchor_text": "here on LinkedIn", "paragraph_index": 62}, {"url": "https://ttracey.com", "anchor_text": "my portfolio here", "paragraph_index": 62}], "all_paragraphs": ["Dec 26, 2018 by Thomas Tracey, originally posted on Github", "This post explores my work on the final project for Udacity\u2019s Deep Reinforcement Learning Nanodegree. My goal is to help other machine learning (ML) students and professionals who are in the early phases of building their intuition in reinforcement learning (RL).", "With that said, please keep in mind that I am a product manager by trade (not an engineer or data scientist). So, what follows is meant to be a semi-technical yet approachable explanation of the RL concepts and algorithms in this project. If anything covered below is inaccurate, or if you have constructive feedback, I\u2019d love to hear it.", "My Github repo for this project can be found here. The original Udacity source repo for this project is located here.", "For artificial intelligence (AI) to reach its full potential, AI systems need to interact effectively with humans and with other agents. There are already environments where this type of agent-human and agent-agent interaction is happening on a massive scale, such as the stock market. And more environments are just around the corner, such as our roadways once fully autonomous vehicles are introduced.", "One step along this path is to train AI agents to interact with other agents in both cooperative and competitive settings. Reinforcement learning (RL) is a subfield of AI that\u2019s shown promise. RL is distinct from other types of machine learning approaches in that RL agents are goal-oriented. That is, RL algorithms use a reward function (aka an objective function) to \u201creinforce\u201d certain behaviors. For example, a Pac-Man agent may earn a reward of +1 points for each pellet it eats and -100 points if it collides with a ghost. By trying to maximize its cumulative reward, the Pac-Man agent ultimately learns \u2014 through repeated trial-and-error \u2014 how to distinguish good actions from bad actions.", "OpenAI has made a large set of virtual environments publicly available for training and benchmarking RL agents. This has spurred lots of research and innovation in RL. However, much of the initial progress was in single-agent domains, where building models that predict the behavior of other actors isn\u2019t necessary. As a result, traditional RL approaches (such as Q-Learning) are not well-suited for the complexity that accompanies environments where multiple agents are continuously interacting and evolving their policies.", "Unfortunately, traditional reinforcement learning approaches such as Q-Learning or policy gradient are poorly suited to multi-agent environments. One issue is that each agent\u2019s policy is changing as training progresses, and the environment becomes non-stationary from the perspective of any individual agent in a way that is not explainable by changes in the agent\u2019s own policy. This presents learning stability challenges and prevents the straightforward use of past experience replay, which is crucial for stabilizing deep Q-learning. Policy gradient methods, on the other hand, usually exhibit very high variance when coordination of multiple agents is required. Alternatively, one can use model-based policy optimization which can learn optimal policies via back-propagation, but this requires a differentiable model of the world dynamics and assumptions about the interactions between agents. Applying these methods to competitive environments is also challenging from an optimization perspective, as evidenced by the notorious instability of adversarial training methods.", "\u2014 Lowe and Wu et al, Multi-Agent Actor-Critic for Mixed Cooperative-Competitive Environments", "Wow, that\u2019s a mouthful. Essentially, what\u2019s needed (and what\u2019s explored in this project) is a general framework that allows multiple agents to learn from their own observations in both cooperative and competitive environments. This is without any communication between the agents or modeling of other agents\u2019 behaviors. However, each agent in this project does learn by observing its own actions and the actions of the other agent. Each observation includes: the prior game state, the agent\u2019s action, the reward, and the subsequent game state (s, a, r, s\u02b9).", "New approaches for cooperative and competitive environments are advancing quickly. I won\u2019t explore them further in this post, but I recommend checking out OpenAI Five and DeepMind AlphaStar.", "The goal of this project is to train two RL agents to play tennis. As in real tennis, the goal of each player is to keep the ball in play. And, when you have two equally matched opponents, you tend to see fairly long exchanges where the players hit the ball back and forth over the net.", "We\u2019ll work with an environment that is similar, but not identical to the Tennis environment on the Unity ML-Agents GitHub page.", "In this environment, two agents control rackets to bounce a ball over a net. If an agent hits the ball over the net, it receives a reward of +0.1. If an agent lets a ball hit the ground or hits the ball out of bounds, it receives a reward of -0.01. Thus, the goal of each agent is to keep the ball in play.", "The observation space consists of 8 variables corresponding to the position and velocity of the ball and racket. Each agent receives its own, local observation. Two continuous actions are available, corresponding to moves toward (or away from) the net, and jumping.", "The task is episodic, and in order to solve the environment, the agents must get an average score of +0.5 (over 100 consecutive episodes, after taking the maximum over both agents).", "Here is an example of two semi-trained agents interacting in this environment.", "Here are the high-level steps that were taken in building an agent that solves this environment.", "DISCLAIMER: I ultimately reached a good solution; however, the results were not consistent. My \u201cbest\u201d results were only reproducible if I reran the model numerous times (>10). If you just run the model once (or even 3\u20135 times), it might not converge. And, during the initial implementation, I ran the model at least 30 times while searching for a reliable set of hyperparameters. If you want to experiment with different approaches, I strongly recommend implementing a more systematic approach to hyperparameter tuning (which I did not do, but wish I had).", "Before building agents that learn, I started by testing ones that select actions (uniformly) at random at each time step.", "Running the random agents a few times resulted in scores from 0 to 0.02. Obviously, if these agents need to achieve an average score of 0.5 over 100 consecutive episodes, then choosing actions at random won\u2019t work. However, when you watch the agents acting randomly, it becomes clear that these types of sporadic actions can be useful early in the training process. That is, they can help the agents explore the action space to find some signal of good vs. bad actions. This insight will come into play later when we implement the Ornstein-Uhlenbeck process and epsilon noise decay.", "To get started, there are a few high-level architecture decisions we need to make. First, we need to determine which types of algorithms are most suitable for the Tennis environment.", "There are two key differences in the Tennis environment compared to the \u2018Navigation\u2019 environment from the first project in Udacity\u2019s Deep RL program:", "Given the additional complexity of this environment, the value-based method we used for the Navigation project is not suitable \u2014 i.e., the Deep Q-Network (DQN) algorithm. Most importantly, we need an algorithm that allows the tennis agent to utilize its full range and power of movement. For this, we\u2019ll need to explore a different class of algorithms called policy-based methods.", "Here are some advantages of policy-based methods:", "The original DDPG algorithm, which I extended to create the MADDPG version, is outlined in this paper, Continuous Control with Deep Reinforcement Learning, by researchers at Google Deepmind. In this paper, the authors present \u201ca model-free, off-policy actor-critic algorithm using deep function approximators that can learn policies in high-dimensional, continuous action spaces.\u201d They highlight that DDPG can be viewed as an extension of Deep Q-learning to continuous tasks.", "For the DDPG foundation, I used this vanilla, single-agent DDPG as a template. Then, to make this algorithm suitable for the multiple competitive agents in the Tennis environment, I implemented components discussed in this paper, Multi-Agent Actor-Critic for Mixed Cooperative-Competitive Environments, by Lowe and Wu, along with other researchers from OpenAI, UC Berkeley, and McGill University. Most notably, I implemented their variation of the actor-critic method (see Figure 1), which I discuss in the following section.", "Lastly, I further experimented with components of the DDPG algorithm based on other concepts covered in Udacity\u2019s classroom and lessons. My implementation of this algorithm (including various customizations) is discussed below.", "Actor-critic methods leverage the strengths of both policy-based and value-based methods.", "Using a policy-based approach, the agent (actor) learns how to act by directly estimating the optimal policy and maximizing reward through gradient ascent. Meanwhile, employing a value-based approach, the agent (critic) learns how to estimate the value (i.e., the future cumulative reward) of different state-action pairs. Actor-critic methods combine these two approaches in order to accelerate the learning process. Actor-critic agents are also more stable than value-based agents, while requiring fewer training samples than policy-based agents.", "What makes this implementation unique is the decentralized actor with centralized critic approach from the paper by Lowe and Wu. Whereas traditional actor-critic methods have a separate critic for each agent, this approach utilizes a single critic that receives as input the actions and state observations from all agents. This extra information makes training easier and allows for centralized training with decentralized execution. Each agent still takes actions based on its own unique observations of the environment.", "You can find the actor-critic logic implemented as part of the Agent() class here in maddpg_agent.py of the source code. The actor-critic models can be found via their respective Actor() and Critic() classes here in models.py.", "Note: As we did with Double Q-Learning in the last project, Continuous Control: Training a Set of Robotic Arms, we\u2019re again leveraging local and target networks to improve stability. This is where one set of parameters w is used to select the best action, and another set of parameters w\u02b9 is used to evaluate that action. In this project, local and target networks are implemented separately for both the actor and the critic.", "One challenge is choosing which action to take while the agent is still learning the optimal policy. Should the agent choose an action based on the rewards observed thus far? Or, should the agent try a new action in hopes of earning a higher reward? This is known as the exploration vs. exploitation dilemma.", "In the previous Navigation project, I addressed this by implementing an \ud835\udec6-greedy algorithm. This algorithm allows the agent to systematically manage the exploration vs. exploitation trade-off. The agent \u201cexplores\u201d by picking a random action with some probability epsilon \ud835\udedc. Meanwhile, the agent continues to \u201cexploit\u201d its knowledge of the environment by choosing actions based on the deterministic policy with probability (1-\ud835\udedc).", "However, this approach won\u2019t work for controlling the tennis agents. The reason is that the actions are no longer a discrete set of simple directions (i.e., up, down, left, right). The actions driving the movement of the arm are forces with different magnitudes and directions. If we base our exploration mechanism on random uniform sampling, the direction actions would have a mean of zero, in turn canceling each other out. This can cause the system to oscillate without making much progress.", "Instead, we\u2019ll use the Ornstein-Uhlenbeck process, as suggested in the previously mentioned paper by Google DeepMind (see bottom of page 4). The Ornstein-Uhlenbeck process adds a certain amount of noise to the action values at each timestep. This noise is correlated to previous noise and therefore tends to stay in the same direction for longer durations without canceling itself out. This allows the agent to maintain velocity and explore the action space with more continuity.", "You can find the Ornstein-Uhlenbeck process implemented here in the OUNoise() class in maddpg_agent.py of the source code.", "In total, there are five hyperparameters related to this noise process.", "The Ornstein-Uhlenbeck process itself has three hyperparameters that determine the noise characteristics and magnitude:", "Of these, I only tuned sigma. After running a few experiments, I reduced sigma from 0.3 to 0.2. The reduced noise volatility seemed to help the model converge.", "Notice also there\u2019s an epsilon parameter used to decay the noise level over time. This decay mechanism ensures that more noise is introduced earlier in the training process (i.e., higher exploration), and the noise decreases over time as the agent gains more experience (i.e., higher exploitation). The starting value for epsilon and its decay rate are two hyperparameters that were tuned during experimentation.", "You can find the epsilon decay process implemented here in the Agent.act() method in maddpg_agent.py of the source code. While the epsilon decay is performed here as part of the learning step.", "The final noise parameters were set as follows:", "IMPORTANT NOTE: Notice that the EPS_START parameter is set at 5.0. For dozens of experiments, I had this parameter set to 1.0, as I had in previous projects. But, I had a difficult time getting the model to converge, and if it did, it converged very slowly (>1500 episodes). After much trial and error, I realized that the agents had some difficulty discovering signal early in the process (i.e., most episode scores equaled zero). By boosting the noise output from the Ornstein-Uhlenbeck (OU) process, it encouraged aggressive exploration of the action space and therefore improved the chances that signal would be detected (i.e., making contact with the ball). This extra signal seemed to improve learning later in training once the noise decayed to zero.", "In the first few versions of my implementation, the agent only performed a single learning iteration per episode. Although the best model had this setting, this seemed to be a stroke of luck. In general, I found that performing multiple learning passes per episode yielded faster convergence and higher scores. This did make training slower, but it was a worthwhile trade-off. In the end, I implemented an interval in which the learning step is performed every episode. As part of each learning step, the algorithm then samples experiences from the buffer and runs the Agent.learn() method 10 times.", "You can find the learning interval implemented here in the Agent.step() method in maddpg_agent.py of the source code.", "In early versions of my implementation, I had trouble getting my agent to learn. Or, rather, it would start to learn but then become very unstable and either plateau or collapse.", "I suspect that one of the causes was outsized gradients. Unfortunately, I couldn\u2019t find an easy way to investigate this, although I\u2019m sure there\u2019s some way of doing this in PyTorch. Absent this investigation, I hypothesize that many of the weights from my critic model were becoming quite large after just 50\u2013100 episodes of training. And since I was running the learning process multiple times per episode, it only made the problem worse.", "The issue of exploding gradients is described in layman\u2019s terms in this post by Jason Brownlee. Essentially, each layer of your net amplifies the gradient it receives. This becomes a problem when the lower layers of the network accumulate huge gradients, making their respective weight updates too large to allow the model to learn anything.", "To combat this, I implemented gradient clipping using the torch.nn.utils.clip_grad_norm function. I set the function to \u201cclip\u201d the norm of the gradients at 1, therefore placing an upper limit on the size of the parameter updates, and preventing them from growing exponentially. Once this change was implemented, my model became much more stable and my agent started learning at a much faster rate.", "You can find gradient clipping implemented here in the \u201cupdate critic\u201d section of the Agent.learn() method, within ddpg_agent.py of the source code.", "Note that this function is applied after the backward pass but before the optimization step.", "Experience replay allows the RL agent to learn from past experience.", "As with the previous project, the algorithm employs a replay buffer to gather experiences. Experiences are stored in a single replay buffer as each agent interacts with the environment. These experiences are then utilized by the central critic, therefore allowing the agents to learn from each others\u2019 experiences.", "The replay buffer contains a collection of experience tuples with the state, action, reward, and next state (s, a, r, s\u02b9). The critic samples from this buffer as part of the learning step. Experiences are sampled randomly so that the data is uncorrelated. This prevents action values from oscillating or diverging catastrophically since a naive algorithm could otherwise become biased by correlations between sequential experience tuples.", "Also, experience replay improves learning through repetition. By doing multiple passes over the data, our agents have multiple opportunities to learn from a single experience tuple. This is particularly useful for state-action pairs that occur infrequently within the environment.", "The implementation of the replay buffer can be found here in the maddpg_agent.py file of the source code.", "Once all of the above components were in place, the agents were able to solve the Tennis environment. Again, the performance goal is an average reward of at least +0.5 over 100 episodes, taking the best score from either agent for a given episode.", "Here is a video showing the trained agents playing a few points.", "The graph below shows the final training results. The best-performing agents were able to solve the environment in 607 episodes, with a top score of 5.2 and a top moving average of 0.927. The complete set of results and steps can be found in the Tennis.ipynb Jupyter notebook.", "I hope you found this useful. Again, if you have any feedback, I\u2019d love to hear it. Feel free to post in the comments.", "If you\u2019d like to discuss other collaboration or career opportunities you can find me here on LinkedIn or view my portfolio here.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F8285ebfaec5f&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-two-agents-to-play-tennis-8285ebfaec5f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-two-agents-to-play-tennis-8285ebfaec5f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-two-agents-to-play-tennis-8285ebfaec5f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-two-agents-to-play-tennis-8285ebfaec5f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----8285ebfaec5f--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8285ebfaec5f--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@thomastracey?source=post_page-----8285ebfaec5f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@thomastracey?source=post_page-----8285ebfaec5f--------------------------------", "anchor_text": "Thomas Tracey"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F49cc733eeb2e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-two-agents-to-play-tennis-8285ebfaec5f&user=Thomas+Tracey&userId=49cc733eeb2e&source=post_page-49cc733eeb2e----8285ebfaec5f---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8285ebfaec5f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-two-agents-to-play-tennis-8285ebfaec5f&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8285ebfaec5f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-two-agents-to-play-tennis-8285ebfaec5f&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://ttracey.com/", "anchor_text": "Thomas Tracey"}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/README.md", "anchor_text": "posted on Github"}, {"url": "https://www.youtube.com/watch?v=imVNg9j7rvU", "anchor_text": "Ulf Hoffmann"}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition", "anchor_text": "final project"}, {"url": "https://www.udacity.com/course/deep-reinforcement-learning-nanodegree--nd893", "anchor_text": "Deep Reinforcement Learning Nanodegree"}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition", "anchor_text": "here"}, {"url": "https://github.com/udacity/deep-reinforcement-learning/tree/master/p3_collab-compet", "anchor_text": "here"}, {"url": "https://skymind.ai/wiki/deep-reinforcement-learning", "anchor_text": "Reinforcement learning (RL)"}, {"url": "https://www.pixilart.com/art/pacman-gif-dae813cd8dfeede", "anchor_text": "pixelart.com"}, {"url": "https://gym.openai.com/envs/#atari", "anchor_text": "large set of virtual environments"}, {"url": "https://papers.nips.cc/paper/7217-multi-agent-actor-critic-for-mixed-cooperative-competitive-environments.pdf", "anchor_text": "Multi-Agent Actor-Critic for Mixed Cooperative-Competitive Environments"}, {"url": "https://openai.com/five/", "anchor_text": "OpenAI Five"}, {"url": "https://deepmind.com/blog/alphastar-mastering-real-time-strategy-game-starcraft-ii/", "anchor_text": "DeepMind AlphaStar"}, {"url": "https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Learning-Environment-Examples.md#tennis", "anchor_text": "Tennis environment"}, {"url": "https://en.wikipedia.org/wiki/Hyperparameter_optimization#Approaches", "anchor_text": "systematic approach to hyperparameter tuning"}, {"url": "https://github.com/tommytracey/DeepRL-P1-Navigation", "anchor_text": "first project in Udacity\u2019s Deep RL program"}, {"url": "https://github.com/tommytracey/DeepRL-P1-Navigation", "anchor_text": "Navigation project"}, {"url": "https://arxiv.org/pdf/1509.02971.pdf", "anchor_text": "this paper"}, {"url": "https://github.com/udacity/deep-reinforcement-learning/tree/master/ddpg-pendulum", "anchor_text": "this vanilla, single-agent DDPG"}, {"url": "https://papers.nips.cc/paper/7217-multi-agent-actor-critic-for-mixed-cooperative-competitive-environments.pdf", "anchor_text": "this paper"}, {"url": "https://papers.nips.cc/paper/7217-multi-agent-actor-critic-for-mixed-cooperative-competitive-environments.pdf", "anchor_text": "Lowe and Wu et al"}, {"url": "https://papers.nips.cc/paper/7217-multi-agent-actor-critic-for-mixed-cooperative-competitive-environments.pdf", "anchor_text": "the paper by Lowe and Wu"}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/maddpg_agent.py#L110", "anchor_text": "here"}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/model.py#L12", "anchor_text": "here"}, {"url": "https://github.com/tommytracey/DeepRL-P2-Continuous-Control", "anchor_text": "Continuous Control: Training a Set of Robotic Arms"}, {"url": "https://github.com/tommytracey/DeepRL-P1-Navigation", "anchor_text": "Navigation project"}, {"url": "https://github.com/tommytracey/DeepRL-P1-Navigation/blob/master/agent.py#L80", "anchor_text": "\ud835\udec6-greedy algorithm"}, {"url": "https://arxiv.org/pdf/1509.02971.pdf", "anchor_text": "previously mentioned paper by Google DeepMind"}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/maddpg_agent.py#L167", "anchor_text": "here"}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/maddpg_agent.py#L79", "anchor_text": "here"}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/maddpg_agent.py#L150", "anchor_text": "here"}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/maddpg_agent.py#L67", "anchor_text": "here"}, {"url": "https://machinelearningmastery.com/exploding-gradients-in-neural-networks", "anchor_text": "this post by Jason Brownlee"}, {"url": "https://pytorch.org/docs/stable/_modules/torch/nn/utils/clip_grad.html", "anchor_text": "torch.nn.utils.clip_grad_norm"}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/maddpg_agent.py#L128", "anchor_text": "here"}, {"url": "https://github.com/tommytracey/DeepRL-P2-Continuous-Control", "anchor_text": "previous project"}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/maddpg_agent.py#L196", "anchor_text": "here"}, {"url": "https://youtu.be/jOWWzygOi1A", "anchor_text": "Here"}, {"url": "https://github.com/tommytracey/DeepRL-P3-Collaboration-Competition/blob/master/Tennis.ipynb", "anchor_text": "Tennis.ipynb"}, {"url": "https://arxiv.org/pdf/1509.02971.pdf", "anchor_text": "Google DeepMind paper"}, {"url": "https://github.com/tommytracey/DeepRL-P2-Continuous-Control/blob/master/model.py#L41", "anchor_text": "here"}, {"url": "https://github.com/tommytracey/DeepRL-P2-Continuous-Control/blob/master/model.py#L75", "anchor_text": "here"}, {"url": "https://github.com/tommytracey/DeepRL-P2-Continuous-Control/", "anchor_text": "Training Robotic Arms with Continuous Control"}, {"url": "https://linkedin.com/in/thomastracey", "anchor_text": "here on LinkedIn"}, {"url": "https://ttracey.com", "anchor_text": "my portfolio here"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----8285ebfaec5f---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/reinforcement-learning?source=post_page-----8285ebfaec5f---------------reinforcement_learning-----------------", "anchor_text": "Reinforcement Learning"}, {"url": "https://medium.com/tag/udacity?source=post_page-----8285ebfaec5f---------------udacity-----------------", "anchor_text": "Udacity"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----8285ebfaec5f---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8285ebfaec5f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-two-agents-to-play-tennis-8285ebfaec5f&user=Thomas+Tracey&userId=49cc733eeb2e&source=-----8285ebfaec5f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8285ebfaec5f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-two-agents-to-play-tennis-8285ebfaec5f&user=Thomas+Tracey&userId=49cc733eeb2e&source=-----8285ebfaec5f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8285ebfaec5f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-two-agents-to-play-tennis-8285ebfaec5f&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8285ebfaec5f--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F8285ebfaec5f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-two-agents-to-play-tennis-8285ebfaec5f&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----8285ebfaec5f---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----8285ebfaec5f--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----8285ebfaec5f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----8285ebfaec5f--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----8285ebfaec5f--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----8285ebfaec5f--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----8285ebfaec5f--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----8285ebfaec5f--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----8285ebfaec5f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@thomastracey?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@thomastracey?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Thomas Tracey"}, {"url": "https://medium.com/@thomastracey/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "183 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F49cc733eeb2e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-two-agents-to-play-tennis-8285ebfaec5f&user=Thomas+Tracey&userId=49cc733eeb2e&source=post_page-49cc733eeb2e--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fee46c6a88c92&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-two-agents-to-play-tennis-8285ebfaec5f&newsletterV3=49cc733eeb2e&newsletterV3Id=ee46c6a88c92&user=Thomas+Tracey&userId=49cc733eeb2e&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}