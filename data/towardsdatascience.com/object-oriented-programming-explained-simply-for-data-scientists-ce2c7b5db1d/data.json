{"url": "https://towardsdatascience.com/object-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d", "time": 1683016937.997911, "path": "towardsdatascience.com/object-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d/", "webpage": {"metadata": {"title": "Object-Oriented Programming Explained Simply for Data Scientists | by Rahul Agarwal | Towards Data Science", "h1": "Object-Oriented Programming Explained Simply for Data Scientists", "description": "Object-Oriented Programming or OOP can be a tough concept to understand for beginners. And that\u2019s mainly because it is not really explained in the right way in a lot of places. Normally a lot of\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/tagged/python-shorts", "anchor_text": "Python Shorts", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)", "anchor_text": "Wikipedia", "paragraph_index": 10}, {"url": "https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)", "anchor_text": "Wikipedia", "paragraph_index": 28}, {"url": "https://mlwhiz.com/blog/2020/09/09/pytorch_guide/", "anchor_text": "PyTorch", "paragraph_index": 31}, {"url": "https://amzn.to/2XPSiiG", "anchor_text": "Python", "paragraph_index": 44}, {"url": "https://coursera.pxf.io/0JMOOY", "anchor_text": "Intermediate level Python", "paragraph_index": 44}, {"url": "https://medium.com/@rahul_agarwal", "anchor_text": "Medium", "paragraph_index": 45}, {"url": "http://eepurl.com/dbQnuX", "anchor_text": "blog", "paragraph_index": 45}, {"url": "https://twitter.com/MLWhiz", "anchor_text": "@mlwhiz", "paragraph_index": 45}, {"url": "http://ko-fi.com/rahulagarwal", "anchor_text": "ko-fi.com/rahulagarwal", "paragraph_index": 48}], "all_paragraphs": ["Object-Oriented Programming or OOP can be a tough concept to understand for beginners. And that\u2019s mainly because it is not really explained in the right way in a lot of places. Normally a lot of books start by explaining OOP by talking about the three big terms \u2014 Encapsulation, Inheritance and Polymorphism. But the time the book can explain these topics, anyone who is just starting would already feel lost.", "So, I thought of making the concept a little easier for fellow programmers, Data Scientists and Pythonistas. The way I intend to do is by removing all the Jargon and going through some examples. I would start by explaining classes and objects. Then I would explain why classes are important in various situations and how they solve some fundamental problems. In this way, the reader would also be able to understand the three big terms by the end of the post.", "In this series of posts named Python Shorts, I will explain some simple but very useful constructs provided by Python, some essential tips, and some use cases I come up with regularly in my Data Science work.", "This post is about explaining OOP the laymen way.", "Put simply, everything in Python is an object and classes are a blueprint of objects. So when we write:", "We are creating an object a of class int holding the value 2 And and object b of class str holding the value \u201cHello!\u201d. In a way, these two particular classes are provided to us by default when we use numbers or strings.", "Apart from these a lot of us end up working with classes and objects without even realizing it. For example, you are actually using a class when you use any scikit Learn Model.", "Here your classifier clf is an object and fit is a method defined in the class RandomForestClassifier", "So, we use them a lot when we are working with Python. But why really. What is it with classes? I could do the same with functions?", "Yes, you can. But classes really provide you with a lot of power compared to functions. To quote an example, the str class has a lot of functions defined for the object which we can access just by pressing tab. One could also write all these functions, but that way, they would not be available to use just by pressing the tab button.", "This property of classes is called encapsulation. From Wikipedia \u2014 encapsulation refers to the bundling of data with the methods that operate on that data, or the restricting of direct access to some of an object\u2019s components.", "So here the str class bundles the data(\u201cHello!\u201d) with all the methods that would operate on our data. I would explain the second part of that statement by the end of the post. In the same way, theRandomForestClassifier class bundles all the classifier methods(fit, predict etc.)", "Apart from this, Class usage can also help us to make the code much more modular and easy to maintain. So say we were to create a library like Scikit-Learn. We need to create many models, and each model will have a fit and predict method. If we don\u2019t use classes, we will end up with a lot of functions for each of our different models like:", "This sort of a code structure is just a nightmare to work with, and hence Scikit-Learn defines each of the models as a class having the fit and predict methods.", "So, now we understand why to use classes and how they are so important, how do we really go about using them? So, creating a class is pretty simple. Below is a boilerplate code for any class you will end up writing:", "We see a lot of new keywords here. The main ones are class,__init__ and self. So what are these? Again, it is easily explained by some example.", "Suppose you are working at a bank that has many accounts. We can create a class named account that would be used to work with any account. For example, below I create an elementary toy class Account which stores data for a user \u2014 namely account_name and balance. It also provides us with two methods to deposit/withdraw money to/from the bank account. Do read through it. It follows the same structure as the code above.", "We can create an account with a name Rahul and having an amount of 100 using:", "We can access the data for this account using:", "But, how are these attributes balance and account_name already set to 100, and \u201cRahul\u201d respectively? We never did call the __init__ method, so why did the object gets these attribute? The answer here is that __init__ is a magic method(There are a lot of other magic methods which I would expand on in my next post on Magic Methods), which gets run whenever we create the object. So when we create myAccount , it automatically also runs the function __init__", "So now we understand __init__, let us try to deposit some money into our account. We can do this by:", "And our balance rose to 200. But did you notice that our function deposit needed two arguments namely self and amount, yet we only provided one, and still, it works.", "So, what is this self? The way I like to explain self is by calling the same function in an albeit different way. Below, I call the same function deposit belonging to the class account and provide it with the myAccount object and the amount. And now the function takes two arguments as it should.", "And our myAccount balance increases by 100 as expected. So it is the same function we have called. Now, that could only happen if self and myAccount are exactly the same object. When I call myAccount.deposit(100) Python provides the same object myAccount to the function call as the argument self. And that is why self.balance in the function definition really refers to myAccount.balance.", "We know how to create classes, but still, there is another important problem that I haven\u2019t touched upon yet.", "So, suppose you are working with Apple iPhone Division, and you have to create a different Class for each iPhone model. For this simple example, let us say that our iPhone\u2019s first version currently does a single thing only \u2014 Makes a call and has some memory. We can write the class as:", "Now, Apple plans to launch iPhone1 and this iPhone Model introduces a new functionality \u2014 The ability to take a pic. One way to do this is to copy-paste the above code and create a new class iPhone1 like:", "But as you can see that is a lot of unnecessary duplication of code (shown in bold above) and Python has a solution for removing that code duplication. One good way to write our iPhone1 class is:", "And that is the concept of inheritance. As per Wikipedia: Inheritance is the mechanism of basing an object or class upon another object or class retaining similar implementation. Simply put, iPhone1 has access to all the variables and methods defined in class iPhone now.", "In this case, we don\u2019t have to do any code duplication as we have inherited(taken) all the methods from our parent class iPhone. Thus we don\u2019t have to define the call function again. Also, we don\u2019t set the mobile_id and memory in the __init__ function using super.", "In real life, your __init__ functions won\u2019t be these nice two-line functions. You would need to define a lot of variables/attributes in your class and copying pasting them for the child class (here iphone1) becomes cumbersome. Thus there exists super(). Heresuper().__init__() actually calls the __init__ method of the parent iPhone Class here. So here when the __init__ function of class iPhone1 runs it automatically sets the memory and user_id of the class using the __init__ function of the parent class.", "Where do we see this in ML/DS/DL? Below is how we create a PyTorch model. This model inherits everything from the nn.Module class and calls the __init__ function of that class using the super call.", "But what is Polymorphism? We are getting better at understanding how classes work so I guess I would try to explain Polymorphism now. Look at the below class.", "Here we have our base class Shape and the other derived classes \u2014 Rectangle and Circle. Also, see how we use multiple levels of inheritance in the Square class which is derived from Rectangle which in turn is derived from Shape. Each of these classes has a function called area which is defined as per the shape. So the concept that a function with the same name can do multiple things is made possible through Polymorphism in Python. In fact, that is the literal meaning of Polymorphism: \u201cSomething that takes many forms\u201d. So here our function area takes multiple forms.", "Another way that Polymorphism works with Python is with the isinstance of method. So using the above class, if we do:", "Thus, the instance type of the object mySquare is Square, Rectangleand Shape. And hence the object is polymorphic. This has a lot of good properties. For example, We can create a function that works with an Shape object, and it will totally work with any of the derived classes(Square, Circle, Rectangle etc.) by making use of Polymorphism.", "Why do we see function names or attribute names starting with Single and Double Underscores? Sometimes we want to make our attributes and functions in classes private and not allow the user to see them. This is a part of Encapsulation where we want to \u201crestrict the direct access to some of an object\u2019s components\u201d. For instance, let\u2019s say, we don\u2019t want to allow the user to see the memory(RAM) of our iPhone once it is created. In such cases, we create an attribute using underscores in variable names.", "So when we create the iPhone Class in the below way, you won\u2019t be able to access your phone memory or the privatefunc using Tab in your ipython notebooks because the attribute is made private now using _.", "But you would still be able to change the variable value using(Though not recommended),", "You would also be able to use the method _privatefunc using myphone._privatefunc(). If you want to avoid that you can use double underscores in front of the variable name. For example, below the call to print(myphone.__memory) throws an error. Also, you are not able to change the internal data of an object by using myphone.__memory = 1.", "But, as you see you can access and modify these self.__memory values in your class definition in the function setMemory for instance.", "I hope this has been useful for you to understand classes. There is still so much to classes that remain that I would cover in my next post on magic methods. Stay Tuned. Also, to summarize, in this post, we learned about OOP and creating classes along with the various fundamentals of OOP:", "To end this post, I would be giving an exercise for you to implement as I think it might clear some concepts for you. Create a class that lets you manage 3d objects(sphere and cube) with volumes and surface areas. The basic boilerplate code is given below:", "I will put the answer in the comments for this article.", "If you want to learn more about Python, I would like to call out an excellent course on Learn Intermediate level Python from the University of Michigan. Do check it out.", "I am going to be writing more of such posts in the future too. Let me know what you think about the series. Follow me up at Medium or Subscribe to my blog to be informed about them. As always, I welcome feedback and constructive criticism and can be reached on Twitter @mlwhiz.", "Also, a small disclaimer \u2014 There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "4M Views. Bridging the gap between Data Science and Intuition. MLE@FB, Ex-WalmartLabs, Citi. Connect on Twitter @mlwhiz \u2615\ufe0f ko-fi.com/rahulagarwal"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fce2c7b5db1d&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----ce2c7b5db1d--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----ce2c7b5db1d--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://mlwhiz.medium.com/?source=post_page-----ce2c7b5db1d--------------------------------", "anchor_text": ""}, {"url": "https://mlwhiz.medium.com/?source=post_page-----ce2c7b5db1d--------------------------------", "anchor_text": "Rahul Agarwal"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe8cce06956c9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d&user=Rahul+Agarwal&userId=e8cce06956c9&source=post_page-e8cce06956c9----ce2c7b5db1d---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fce2c7b5db1d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fce2c7b5db1d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@ilumire?utm_source=medium&utm_medium=referral", "anchor_text": "Jelleke Vanooteghem"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://towardsdatascience.com/tagged/python-shorts", "anchor_text": "PYTHON SHORTS"}, {"url": "https://towardsdatascience.com/tagged/python-shorts", "anchor_text": "Python Shorts"}, {"url": "https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)", "anchor_text": "Wikipedia"}, {"url": "https://unsplash.com/@lunarts?utm_source=medium&utm_medium=referral", "anchor_text": "Volodymyr Hryshchenko"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)", "anchor_text": "Wikipedia"}, {"url": "https://mlwhiz.com/blog/2020/09/09/pytorch_guide/", "anchor_text": "PyTorch"}, {"url": "https://unsplash.com/@jeshoots?utm_source=medium&utm_medium=referral", "anchor_text": "Jeshoots.com"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://amzn.to/2XPSiiG", "anchor_text": "Python"}, {"url": "https://coursera.pxf.io/0JMOOY", "anchor_text": "Intermediate level Python"}, {"url": "https://medium.com/@rahul_agarwal", "anchor_text": "Medium"}, {"url": "http://eepurl.com/dbQnuX", "anchor_text": "blog"}, {"url": "https://twitter.com/MLWhiz", "anchor_text": "@mlwhiz"}, {"url": "https://medium.com/tag/data-science?source=post_page-----ce2c7b5db1d---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----ce2c7b5db1d---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/programming?source=post_page-----ce2c7b5db1d---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/python?source=post_page-----ce2c7b5db1d---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/python-shorts?source=post_page-----ce2c7b5db1d---------------python_shorts-----------------", "anchor_text": "Python Shorts"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fce2c7b5db1d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d&user=Rahul+Agarwal&userId=e8cce06956c9&source=-----ce2c7b5db1d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fce2c7b5db1d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d&user=Rahul+Agarwal&userId=e8cce06956c9&source=-----ce2c7b5db1d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fce2c7b5db1d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----ce2c7b5db1d--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fce2c7b5db1d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----ce2c7b5db1d---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----ce2c7b5db1d--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----ce2c7b5db1d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----ce2c7b5db1d--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----ce2c7b5db1d--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----ce2c7b5db1d--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----ce2c7b5db1d--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----ce2c7b5db1d--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----ce2c7b5db1d--------------------------------", "anchor_text": ""}, {"url": "https://mlwhiz.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://mlwhiz.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Rahul Agarwal"}, {"url": "https://mlwhiz.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "13.9K Followers"}, {"url": "http://ko-fi.com/rahulagarwal", "anchor_text": "ko-fi.com/rahulagarwal"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe8cce06956c9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d&user=Rahul+Agarwal&userId=e8cce06956c9&source=post_page-e8cce06956c9--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff41165c9f72f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d&newsletterV3=e8cce06956c9&newsletterV3Id=f41165c9f72f&user=Rahul+Agarwal&userId=e8cce06956c9&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}