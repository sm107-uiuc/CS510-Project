{"url": "https://towardsdatascience.com/writing-more-idiomatic-and-pythonic-code-c22e900eaf83", "time": 1683013219.8649049, "path": "towardsdatascience.com/writing-more-idiomatic-and-pythonic-code-c22e900eaf83/", "webpage": {"metadata": {"title": "Writing More Idiomatic and Pythonic Code | by Martin Heinz | Towards Data Science", "h1": "Writing More Idiomatic and Pythonic Code", "description": "Idioms and conventions that will make your Python code readable, effective, concise and reliable."}, "outgoing_paragraph_urls": [{"url": "https://www.artima.com/weblogs/viewpost.jsp?thread=98196", "anchor_text": "short write-up", "paragraph_index": 26}, {"url": "https://docs.python.org/3/library/", "anchor_text": "Python library docs", "paragraph_index": 31}, {"url": "http://code.activestate.com/recipes/52308-the-simple-but-handy-collector-of-a-bunch-of-named", "anchor_text": "\"bunch\" idiom", "paragraph_index": 33}, {"url": "https://stackoverflow.com/a/9205029", "anchor_text": "Raymond Hettinger says", "paragraph_index": 35}, {"url": "https://martinheinz.dev/blog/32?utm_source=tds&utm_medium=referral&utm_campaign=blog_post_32", "anchor_text": "martinheinz.dev", "paragraph_index": 37}, {"url": "https://martinheinz.dev/", "anchor_text": "https://martinheinz.dev/", "paragraph_index": 39}, {"url": "https://ko-fi.com/martinheinz", "anchor_text": "https://ko-fi.com/martinheinz", "paragraph_index": 39}], "all_paragraphs": ["There are lots of ways one can implement same feature, algorithm or function. Some of them straightforward, clear \u2014 better, some of them confusing, inefficient \u2014 worse. The Python community often uses terms like Pythonic or when describing code that follows certain (natural, proper) style and conventions. That\u2019s the kind of good, clear code we all try to write everyday and in this article we will go over a few tips, conventions and idioms that will help you write a bit more idiomatic and Pythonic code.", "Not just in Python, but really in any programming language, you can fall into the trap of mixing up identity and value equality. In Python you have choice of using either is or == for comparisons, where is checks identity and == checks value.", "Considering that most of the time we only care about value, not identity, we would usually choose ==. There are cases however, where you should always use is operator instead. One of those is comparison with all of Pythons singletons - None, True or False.", "Using is None, is True or is False isn't just about convention or improved readability though. It also improves performance, especially if you would use x is None instead of x == None inside loop. Why is that? - you might ask. Well, it's because is operator cannot be overloaded like == (which really is just a.__eq__(b)), so Python can skip lookup of these dunder methods that are needed to evaluate comparison using ==.", "So, bottom line here is, that you should try to use is when possible, as it is more readable, faster and idiomatic. But to find out whether you can actually use it, you should ask yourself whether you care about value or identity of variables being compared.", "In other languages it\u2019s common practice to use try/finally to manage resources and to make sure you dispose of opened files or acquired locks if exception occurs. You could use try/finally in Python too, but we can do better using with statement:", "Code above shows usage of so-called context protocol which consists of 2 methods \u2014 __enter__ and __exit__ which are called when entering and exiting body of with block, respectively. You probably already know about with statement and it's usage, but you might not know about contextlib used above. It's a module that provides tools for turning functions into context managers. As for the closing function above, it just forces call to .close() method of the object, in this case page.", "Usage of context protocol isn\u2019t limited to management of resources, though. It can also be used for suppressing exceptions ( with suppress(...)) or redirecting output ( with redirect_stdout(...)):", "From time to time you might need to define function that takes optional arguments. This can be done in Python very easily and surely know how:", "Most of the time, we use optional arguments to allow the user of the our function to omit the obvious default argument or rarely used option. In some cases though, we might want to change behaviour of our function based not just on the value of optional argument but also based on whether the argument was provided or not. One reasonable solution for this case could be to use None as default (when it's None do X, when it's not do Y). But what if None is acceptable value? You could choose another throwaway value, but there is nice idiomatic solution to this:", "We can solve this problem by creating constant \u2014 for example \u2014 called _no_value which we set as a default value for the optional argument. By doing this we avoid any possibly acceptable values, because we're actually not checking value at all - we are checking identity. In other words we are checking whether the y argument refers to same exact object as the one assigned to _no_value.", "One of the nice features of Python, that most programming languages lack is multiple assignment. In its simplest form it looks like this:", "This is nice as it shortens and simplifies code, but I personally rarely get a chance to use it. Much more practical version of this can be used when unpacking iterables into multiple variables:", "This is definitely preferable option over assigning values to each variable using indices, as it creates less visual noise, is more concise and also less error prone.", "Building on previous example and going little further \u2014 we can also use star expression to unpack elements of iterable of arbitrary length:", "Quite often, values in iterables will have some pattern or known component, which can be easily extracted using unpacking. This is always better solution than explicitly using indices into iterable, as that creates unreadable code with lots of unnamed and unknown variables.", "There\u2019s one thing to be aware of when using star expression, though. Unpacking with star expression always creates list even if the variable receives zero values from unpacking, which can be nice considering that you won\u2019t need to do any extra type checking, but can be also a bit surprising to receive [] instead of None.", "If we wanted to stretch the limits of this feature, then we could even unpack multiple levels of iterable into other iterables:", "I don\u2019t necessarily recommend doing this, as this will not produce very readable or nice code, but it\u2019s good to know limits of a tool we use even if we\u2019re not going to use this particular option very often or at all.", "In other languages you would need extra variable and 3 lines of code to swap 2 variables. In Python however, there is a better way similar to previously shown multiple assignment:", "This is super simple and super useful and it\u2019s one of those features which reminds you how great Python is. Apart from swapping variables this also applies to mutable iterables (e.g. lists) and their indices, which can be commonly seen in sorting:", "This all might seem like some Python magic, but in reality Python is just clever enough to know when to create temporary variables, what to put into them, where to assign their values and when to throw them away.", "Oftentimes when working with \u2014 for example \u2014 databases or CSV tables, you will find yourself with multiple lists of related data. It might be a few columns from database table, a few related datasets, etc. Regardless of what the data really is, you will probably want to work with it and process it in parallel. The simplest way to do that in Python is to use zip:", "zip function takes variable number of lists and produces lazy generator that yields tuples containing elements from each of the supplied lists. This is great for processing data and it's also very efficient because - as I mentioned - the generator is lazy, so it won't load whole lists into memory, only the current tuple of elements.", "When using this function you might come to realize that it\u2019s not so great when working with lists with different lengths, as it\u2019s going yield values only until the shortest of the lists is exhausted which might not always be desirable. In case you\u2019d rather consume values until the longest of the lists is exhausted, you can instead use itertools.zip_longest, which will fill missing values with None or fillvalue provided as argument.", "Python has many functional programming concepts and functions like lambda expressions, list comprehensions, functools module, etc. There are however, a few that are frowned upon by many people. These are map, reduce and filter. What is bad about these functions though? Well, there are multiple reasons, but the one I have to agree with is that it's usually cleaner and clearer to write list comprehension instead map or filter and in case of reduce the code becomes hard to read when used with non-trivial function argument. Another good reason to dislike these functions is that ideally there should be only one right way to do things, so why use map, filter, reduce or even lambda when we have list comprehensions?", "It\u2019s understandable if you disagree with me, but before writing some angry comment, you might want to read short write-up by Guido va Rossum, which might change your mind.", "Bottom line \u2014 use above functions sparingly and ideally just replace them with list comprehensions wherever possible.", "\u201cThe only purpose of \u2018reduce\u2019 is to write really obfuscated code that shows how cool you are. I\u2019m just not that cool.\u201d \u2014 Guido van Rossum", "Python has for very long time maintained the philosophy of \u201cbatteries included\u201d, meaning that you will find lots of useful tools, modules and functions in the standard library, that you wouldn\u2019t expect to be there. You should always check whether the problem you are trying to solve or function you are trying to implement isn\u2019t somewhere in the standard library and if you can\u2019t find it, chances are you aren\u2019t looking hard enough.", "There are many examples of these \u201cbatteries\u201d all over standard library, first module that comes to mind my is itertools which provides iterator building blocks. Another great one is functools with collection of higher order functions and I also have to mention collections module with very useful datatypes like Counter, deque or namedtuple just to name a few.", "So, next time you need some fairly common functionality in your program, don\u2019t reinvent a wheel, go see Python library docs, grab what\u2019s already there and save yourself some time.", "When you define a Python class you will most likely declare couple of attributes in its __init__ method. You might declare just one or two attributes, but you can also end up with something like this:", "With just a few attributes in class it's kind of okay to write them out and it won't clutter your code that much, but if there were 10 or so attributes - like in the code above - would you be still okay with writing them all out? Well, I wouldn't. So, to avoid it you can use the so-called \"bunch\" idiom:", "The snippet above demonstrates usage of self.__dict__ which is a dictionary which stores all the attributes of class (unless __slots__ is declared). Here we pass any keyword arguments of the constructor to the update function which generates all the attributes. It's also possible to use vars(self) which looks little nicer in my opinion.", "You might consider this a dirty hack, but I think it\u2019s okay to use it, especially if you have class (data structure) for storing bunch of attributes without any real functionality. Also Raymond Hettinger says it's okay to update the instance dictionary directly, so there's that.", "I definitely recommend using all of the above idioms and tips in your Python code and I believe these will make your code more Pythonic and idiomatic. There\u2019s however no single answer to \u201cWhat is Pythonic?\u201d or \u201cWhat is idiomatic?\u201d, and what works for me, might not work for you. So, use idioms to make your code more readable, concise and effective and not just because it\u2019s idiomatic. In the same way, use language specific features of Python to improve your code, not just to make it more Pythonic.", "This article was originally posted at martinheinz.dev", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "CKA | RHCE | DevOps Engineer at IBM | Working with Python, Kubernetes, Linux and more | https://martinheinz.dev/ | https://ko-fi.com/martinheinz"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fc22e900eaf83&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-more-idiomatic-and-pythonic-code-c22e900eaf83&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-more-idiomatic-and-pythonic-code-c22e900eaf83&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-more-idiomatic-and-pythonic-code-c22e900eaf83&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-more-idiomatic-and-pythonic-code-c22e900eaf83&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----c22e900eaf83--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c22e900eaf83--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@martin.heinz?source=post_page-----c22e900eaf83--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@martin.heinz?source=post_page-----c22e900eaf83--------------------------------", "anchor_text": "Martin Heinz"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4cbd6b36e62a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-more-idiomatic-and-pythonic-code-c22e900eaf83&user=Martin+Heinz&userId=4cbd6b36e62a&source=post_page-4cbd6b36e62a----c22e900eaf83---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc22e900eaf83&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-more-idiomatic-and-pythonic-code-c22e900eaf83&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc22e900eaf83&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-more-idiomatic-and-pythonic-code-c22e900eaf83&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@ahmadkadhim?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Ahmad Kadhim"}, {"url": "https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://www.artima.com/weblogs/viewpost.jsp?thread=98196", "anchor_text": "short write-up"}, {"url": "https://docs.python.org/3/library/", "anchor_text": "Python library docs"}, {"url": "http://code.activestate.com/recipes/52308-the-simple-but-handy-collector-of-a-bunch-of-named", "anchor_text": "\"bunch\" idiom"}, {"url": "https://stackoverflow.com/a/9205029", "anchor_text": "Raymond Hettinger says"}, {"url": "https://martinheinz.dev/blog/32?utm_source=tds&utm_medium=referral&utm_campaign=blog_post_32", "anchor_text": "martinheinz.dev"}, {"url": "https://towardsdatascience.com/making-python-programs-blazingly-fast-c1cd79bd1b32", "anchor_text": "Making Python Programs Blazingly FastLet\u2019s look at performance of our Python programs and see how to make them up to 30% faster!towardsdatascience.com"}, {"url": "https://towardsdatascience.com/tour-of-python-itertools-2af84db18a5e", "anchor_text": "Tour of Python ItertoolsLet\u2019s explore two great Python libraries \u2014 itertools and more_itertools and see how to leverage them for data\u2026towardsdatascience.com"}, {"url": "https://towardsdatascience.com/python-tips-and-trick-you-havent-already-seen-37825547544f", "anchor_text": "Python Tips and Trick, You Haven\u2019t Already SeenThere are plenty of articles written about lots of cool features in Python, but there is much more to talk about\u2026towardsdatascience.com"}, {"url": "https://medium.com/tag/programming?source=post_page-----c22e900eaf83---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/python?source=post_page-----c22e900eaf83---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/data-science?source=post_page-----c22e900eaf83---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/technology?source=post_page-----c22e900eaf83---------------technology-----------------", "anchor_text": "Technology"}, {"url": "https://medium.com/tag/software-engineering?source=post_page-----c22e900eaf83---------------software_engineering-----------------", "anchor_text": "Software Engineering"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc22e900eaf83&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-more-idiomatic-and-pythonic-code-c22e900eaf83&user=Martin+Heinz&userId=4cbd6b36e62a&source=-----c22e900eaf83---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc22e900eaf83&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-more-idiomatic-and-pythonic-code-c22e900eaf83&user=Martin+Heinz&userId=4cbd6b36e62a&source=-----c22e900eaf83---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc22e900eaf83&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-more-idiomatic-and-pythonic-code-c22e900eaf83&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c22e900eaf83--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fc22e900eaf83&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-more-idiomatic-and-pythonic-code-c22e900eaf83&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----c22e900eaf83---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----c22e900eaf83--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----c22e900eaf83--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----c22e900eaf83--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----c22e900eaf83--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----c22e900eaf83--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----c22e900eaf83--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----c22e900eaf83--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----c22e900eaf83--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@martin.heinz?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@martin.heinz?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Martin Heinz"}, {"url": "https://medium.com/@martin.heinz/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "5.4K Followers"}, {"url": "https://martinheinz.dev/", "anchor_text": "https://martinheinz.dev/"}, {"url": "https://ko-fi.com/martinheinz", "anchor_text": "https://ko-fi.com/martinheinz"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4cbd6b36e62a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-more-idiomatic-and-pythonic-code-c22e900eaf83&user=Martin+Heinz&userId=4cbd6b36e62a&source=post_page-4cbd6b36e62a--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff723091181e3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-more-idiomatic-and-pythonic-code-c22e900eaf83&newsletterV3=4cbd6b36e62a&newsletterV3Id=f723091181e3&user=Martin+Heinz&userId=4cbd6b36e62a&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}