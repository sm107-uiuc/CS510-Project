{"url": "https://towardsdatascience.com/optimising-a-rubbish-collection-strategy-with-genetic-algorithms-ccf1f4d56c4f", "time": 1683012791.0749812, "path": "towardsdatascience.com/optimising-a-rubbish-collection-strategy-with-genetic-algorithms-ccf1f4d56c4f/", "webpage": {"metadata": {"title": "Optimising a Rubbish Collection Strategy with Genetic Algorithms | by Andrew Kuo | Towards Data Science", "h1": "Optimising a Rubbish Collection Strategy with Genetic Algorithms", "description": "Genetic Algorithms are a family of optimisation techniques that loosely resemble evolutionary processes in nature. It may be a crude analogy, but if you squint your eyes, Darwin\u2019s Natural Selection\u2026"}, "outgoing_paragraph_urls": [{"url": "https://deap.readthedocs.io/en/master/", "anchor_text": "DEAP", "paragraph_index": 1}, {"url": "https://github.com/andrewjkuo/robby-robot-genetic-algorithm", "anchor_text": "my Github", "paragraph_index": 20}], "all_paragraphs": ["Genetic Algorithms are a family of optimisation techniques that loosely resemble evolutionary processes in nature. It may be a crude analogy, but if you squint your eyes, Darwin\u2019s Natural Selection does roughly resemble an optimisation task where the aim is to craft organisms perfectly suited to thrive in their environments. While it may have taken many millennia for humans to develop opposable thumbs and eagles to develop 20/4 vision, in this article I will show how to implement a Genetic Algorithm in Python for \u201cevolving\u201d a rubbish collecting robot in a couple of hours.", "The best example I\u2019ve come across to demonstrate how Genetic Algorithms work comes from a fantastic book on complex systems by Melanie Mitchell called \u201cComplexity: A Guided Tour\u201d (highly recommended). In one chapter, Mitchell introduces a robot named Robby whose sole purpose in life is to pick up rubbish and describes how to optimise a control strategy for Robby using a GA. Below I will explain my approach to solving this problem and show how to implement the algorithm in Python. There are some great packages for constructing these kinds of algorithms (such as DEAP) but in this tutorial, I will only be using base Python, Numpy and TQDM (optional).", "While this is only a toy example, GAs are used in a number of real-world applications. As a data scientist, I most often use them for hyper-parameter optimisation and model choice. While they can be computationally expensive, GAs allow us to explore multiple areas of a search space in parallel and are a good option when computing a gradient is difficult.", "A robot named Robby lives in a two-dimensional grid world full of rubbish and surrounded by 4 walls (shown below). The aim of this project is to evolve an optimal control strategy for Robby that will allow him to pick up rubbish efficiently and not crash into walls.", "Robby can only see the four squares NESW of himself as well as the square he is in and there are 3 options for each square; it can be empty, have rubbish in it or be a wall. Therefore there are 3\u2075 = 243 different scenarios Robby can be in. Robby can perform 7 different actions; move NESW, move randomly, pickup rubbish or stay still. Robby\u2019s control strategy can therefore be encoded as a \u201cDNA\u201d string of 243 digits between 0 and 6 (corresponding to the action Robby should take in each of the 243 possible situations).", "At a high level, the steps for optimisation with any GA are:", "For our task, you create a first generation of Robbys initialised to random DNA strings (corresponding to random control strategies). You then simulate letting these robots run around in randomly assigned grid worlds and see how they perform.", "A robot\u2019s fitness is a function of how many pieces of rubbish it picked up in n moves and how many times it crashed into a wall. In our example, we award 10 points to a robot for every piece of rubbish picked up and subtract 5 points every time it crashes into a wall. The robots then \u201cmate\u201d with probabilities linked to their fitness score (i.e. robots that picked up lots of rubbish are more likely to reproduce) and a new generation is created.", "There are a few different ways that \u201cmating\u201d can be implemented. In Mitchell\u2019s version she took the 2 parent DNA strings, randomly spliced them and then joined them together to create a child for the next generation. In my implementation, I assigned each gene probabilistically from each parent (i.e. for each of the 243 genes, I flip a coin to decide which parent will pass on their gene). For example, here are the first 10 genes of 2 parents and a possible child using my method:", "Another concept from natural selection that we replicate with this algorithm is that of \u201cmutation\u201d. While the vast majority of genes in a child will be passed down from a parent, I have also built in a small possibility that the gene will mutate (i.e. will be assigned at random). This mutation rate gives us the ability to control the trade-off between exploration and exploitation.", "The first step is to import the required packages and set our parameters for this task. I have chosen these parameters as a starting point, but they can be adjusted and I encourage you to experiment with them.", "Next, we define a class for the grid-world environment. We represent each cell by the tokens \u2018o\u2019, \u2018x\u2019 and \u2018w\u2019 corresponding to an empty cell, a cell with rubbish and a wall respectively.", "Next, we create a class to represent our robots. This class includes methods for performing actions, calculating fitness and generating new DNA from a pair of parent robots.", "Finally it\u2019s time to run the Genetic Algorithm. In the code below we generate an initial population of robots and let Natural Selection run its course. I should mention that there are certainly much faster ways to implement this algorithm (e.g. utilising parallelisation) but for the purpose of this tutorial I have sacrificed speed for clarity.", "While initially most of the robots pick up no rubbish and consistently crash into walls, within a few generations we start to see simple strategies (such as \u201cif in square with rubbish, pick it up\u201d and \u201cif next to wall, don\u2019t move into wall\u201d) propagate through the population. After a few hundred iterations, we are left with a generation of incredible rubbish-collecting geniuses!", "The plot below shows that we were able to \u201cevolve\u201d a successful rubbish collection strategy in 400 generations.", "To assess the quality of the evolved control strategy, I manually created a benchmark strategy with some intuitively sensible rules:", "On average, this benchmark strategy achieved a fitness score of 426.9 but this was no match for our final \u201cevolved\u201d robot which had an average fitness score of 475.9.", "One of the coolest things about this approach to optimisation is that you can find counter-intuitive solutions. Not only were the robots able to learn sensible rules that a human might design, they also spontaneously came up with strategies that humans might never consider. One sophisticated technique that emerged was the use of \u201cmarkers\u201d to overcome short-sightedness and a lack of memory. For example, if a robot is currently in a square with rubbish in it and can see rubbish in the squares to the east and west, a naive approach would be to immediately pickup the rubbish in the current square and then move to one of the adjacent squares. The problem with this strategy is that once the robot has moved (say to the west), he has no way of remembering that there is rubbish 2 squares to the east. To overcome this problem, we observed our evolved robots performing the following steps:", "Another example of counter-intuitive strategies emerging from this kind of optimisation is shown below. OpenAI taught agents to play hide and seek using reinforcement learning (a more sophisticated optimisation approach). We see that the agents learn \u201chuman\u201d strategies at first but eventually learn novel solutions such as \u201cBox Surfing\u201d that exploit the physics of OpenAI\u2019s simulated environment.", "Genetic Algorithms combine biology and computer science in a unique way and while not necessarily the fastest algorithms, in my opinion they are among the most beautiful. All of the code featured in this article is available on my Github along with a demo notebook. Thanks for reading!", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fccf1f4d56c4f&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimising-a-rubbish-collection-strategy-with-genetic-algorithms-ccf1f4d56c4f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimising-a-rubbish-collection-strategy-with-genetic-algorithms-ccf1f4d56c4f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimising-a-rubbish-collection-strategy-with-genetic-algorithms-ccf1f4d56c4f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimising-a-rubbish-collection-strategy-with-genetic-algorithms-ccf1f4d56c4f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----ccf1f4d56c4f--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----ccf1f4d56c4f--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://dr00bot.medium.com/?source=post_page-----ccf1f4d56c4f--------------------------------", "anchor_text": ""}, {"url": "https://dr00bot.medium.com/?source=post_page-----ccf1f4d56c4f--------------------------------", "anchor_text": "Andrew Kuo"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdc8ad2d12899&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimising-a-rubbish-collection-strategy-with-genetic-algorithms-ccf1f4d56c4f&user=Andrew+Kuo&userId=dc8ad2d12899&source=post_page-dc8ad2d12899----ccf1f4d56c4f---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fccf1f4d56c4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimising-a-rubbish-collection-strategy-with-genetic-algorithms-ccf1f4d56c4f&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fccf1f4d56c4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimising-a-rubbish-collection-strategy-with-genetic-algorithms-ccf1f4d56c4f&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@danielkcheung?utm_source=medium&utm_medium=referral", "anchor_text": "Daniel Cheung"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://deap.readthedocs.io/en/master/", "anchor_text": "DEAP"}, {"url": "https://github.com/andrewjkuo/robby-robot-genetic-algorithm", "anchor_text": "my Github"}, {"url": "https://medium.com/tag/genetic-algorithm?source=post_page-----ccf1f4d56c4f---------------genetic_algorithm-----------------", "anchor_text": "Genetic Algorithm"}, {"url": "https://medium.com/tag/data-science?source=post_page-----ccf1f4d56c4f---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/evolutionary-algorithms?source=post_page-----ccf1f4d56c4f---------------evolutionary_algorithms-----------------", "anchor_text": "Evolutionary Algorithms"}, {"url": "https://medium.com/tag/python?source=post_page-----ccf1f4d56c4f---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fccf1f4d56c4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimising-a-rubbish-collection-strategy-with-genetic-algorithms-ccf1f4d56c4f&user=Andrew+Kuo&userId=dc8ad2d12899&source=-----ccf1f4d56c4f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fccf1f4d56c4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimising-a-rubbish-collection-strategy-with-genetic-algorithms-ccf1f4d56c4f&user=Andrew+Kuo&userId=dc8ad2d12899&source=-----ccf1f4d56c4f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fccf1f4d56c4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimising-a-rubbish-collection-strategy-with-genetic-algorithms-ccf1f4d56c4f&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----ccf1f4d56c4f--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fccf1f4d56c4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimising-a-rubbish-collection-strategy-with-genetic-algorithms-ccf1f4d56c4f&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----ccf1f4d56c4f---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----ccf1f4d56c4f--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----ccf1f4d56c4f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----ccf1f4d56c4f--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----ccf1f4d56c4f--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----ccf1f4d56c4f--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----ccf1f4d56c4f--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----ccf1f4d56c4f--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----ccf1f4d56c4f--------------------------------", "anchor_text": ""}, {"url": "https://dr00bot.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://dr00bot.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Andrew Kuo"}, {"url": "https://dr00bot.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "328 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdc8ad2d12899&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimising-a-rubbish-collection-strategy-with-genetic-algorithms-ccf1f4d56c4f&user=Andrew+Kuo&userId=dc8ad2d12899&source=post_page-dc8ad2d12899--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff42272f26b72&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimising-a-rubbish-collection-strategy-with-genetic-algorithms-ccf1f4d56c4f&newsletterV3=dc8ad2d12899&newsletterV3Id=f42272f26b72&user=Andrew+Kuo&userId=dc8ad2d12899&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}