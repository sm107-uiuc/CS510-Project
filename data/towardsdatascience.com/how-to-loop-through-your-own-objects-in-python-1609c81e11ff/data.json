{"url": "https://towardsdatascience.com/how-to-loop-through-your-own-objects-in-python-1609c81e11ff", "time": 1683008632.091309, "path": "towardsdatascience.com/how-to-loop-through-your-own-objects-in-python-1609c81e11ff/", "webpage": {"metadata": {"title": "How to Loop Through Your Own Objects in Python | by Stephen Fordham | Towards Data Science", "h1": "How to Loop Through Your Own Objects in Python", "description": "This tutorial will aim to help you understand what iterables and iterators are, and their relationship with each other. Secondary to this, understanding how a Python for loop works under the hood\u2026"}, "outgoing_paragraph_urls": [{"url": "https://stackoverflow.com/questions/2776829/difference-between-pythons-generators-and-iterators#:~:text=Every%20generator%20is%20an%20iterator,paragraph's%20definition%20of%20an%20iterator%20.", "anchor_text": "StackOverflow", "paragraph_index": 15}, {"url": "https://gist.github.com/StephenFordham/6d5a250bd2b721b6099ab650a481f1d5", "anchor_text": "here", "paragraph_index": 30}, {"url": "https://github.com/StephenFordham", "anchor_text": "https://github.com/StephenFordham", "paragraph_index": 33}], "all_paragraphs": ["This tutorial will aim to help you understand what iterables and iterators are, and their relationship with each other. Secondary to this, understanding how a Python for loop works under the hood will ultimately help in designing a user-defined custom-object that can be iterated over.", "An iterable is an object capable of returning its members one by one. Simply put, an iterable is anything that you can loop over using a for loop in Python. Sequences are a very common type of iterable. Examples of built-in sequence types include lists, strings, and tuples.", "An iterator is an object representing a stream of data. You can create an iterator object by implementing the iter built-in function to an iterable.", "An iterator can be used to manually loop over the items in the iterable. The repeated passing of the iterator to the built-in next function returns successive items in the stream. When the item is consumed from the iterator, it is gone, and eventually, when no more data is available to retrieve, a StopIteration exception is raised.", "Central to developing knowledge on iterables and iterators is understanding how a Python for loop works under the hood. To best illustrate this, lets define a function that can take any iterable, and loop through it without using a for loop.", "Our function needs to be able to achieve the following:", "\u00b7 Create an iterator from an iterable", "\u00b7 Repeatedly retrieve the next item from the iterator", "\u00b7 Raise a StopIteration exception when there are no more items to retrieve.", "Under the hood, an iterable is being converted into an iterator in a Python for loop.", "Our custom function first converts any iterable to an iterator. In the while loop, we then get the next item from the iterator, and execute any action on this item. In this case, I have chosen to write a function to raise the number in the iterator by the power of 2, but any action can be taken, for example, we can even choose to simply print out the numbers in our container or collection.", "All forms of looping over iterables in Python work in this way.", "To better differentiate an iterable from an iterator, it can be helpful to further refine their definitions, and note their differences. Iterators cannot be indexed /sliced(as they can be infinitely long). In addition, unlike iterables, they do not they have a length. In the example below, attempting to get the length of the iterator object, my_iter_list raises a TypeError exception.", "> An iterable is something you can loop over.", "> An iterator is an object representing a stream of data. It does the iterating over an iterable.", "A nice and concise definition for iterators, sourced from StackOverflow, whilst researching for this article, is the following:", "iterator is a more general concept: any object whose class has a next method (__next__ in Python 3) and an __iter__ method that does return self", "Iterators permit users to work with and create lazy iterables. Lazy iterables do not do any work until we ask them for their next item. This feature can help us deal with infinitely long iterables which cannot fit into memory. This is called lazy evaluation and can help save both memory and CPU time.", "As discussed above, the iterator objects are required to support the following 2 methods, which combined, comprise the Python iterator protocol:", "We may want to create a custom iterator. In order to do that, we need a class that has __init__, __next__, and __iter__ methods defined.", "First, lets define a custom class called CustomIterTeams. This class has no in-built iterable behaviour, but we can implement code in our class to make our custom user-defined object behave like an iterable.", "There are two ways to get a custom user-defined object to behave like an iterable. The first way involves defining two dunder or magic methods, namely __iter__() and __next__(). The dunder iter method simply needs to return the object itself. This is because, when we write a for loop, this will be the object we intend to iterate over. This iter method returns an iterator.", "Under the hood, Python\u2019s for loop use iterators.", "Our custom object is now an iterator, and can work with the dunder next method to return successive items in the stream. These two methods work together to enable the iterator protocol.", "In the __init__constructor, we set the index in the object with a value of -1. When the next method is called, i.e. as happens during the first iteration in a for loop for example, the index\u2019s value is incremented by 1. We then check to see if the index value is greater than the length of the list of teams that the user decided to add when the object was first created. If the index is less than the length of the teams, we simply return the team with the in-range index from the list of teams.", "Once the index is either the same or greater than the length of the team list, we reset the index back to -1 once more (as it was originally set in the init constructor), and raise a StopIteration exception.", "The user now has the ability to iterate through the teams created. The CustomIterTeams object, prem_teams is now an iterator, that we can iterate through.", "The index is deliberately re-set to its original value once the index reaches the length of the list, before a StopIteration exception is raised. This feature is implemented in order for the user to perform multiple iterations of the object if they want to in the same session, as shown in the python prompt shown below.", "We can also now reverse the ordering of the teams, by simply implementing the dunder reserved method.", "It is not necessary to define a dunder next method in order to make a user-defined object iterable. Rather, we get just get the dunder iter method to return a generator, that loops through our teams. Every generator is an iterator. Generators have a built in next method, so there is no requirement to implement the next method in your custom python class.", "The github gist for this code snippet can be found here, and is shown below:", "Iteration can be achieved in your custom defined classes either by including both the iter and next methods, or simply returning a generator in the iter method. The choice is up to programmer, but whilst the iter and next method implementation is a little longer, more finely defined behaviour can be added.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Articles on Data Science and Programming https://github.com/StephenFordham"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F1609c81e11ff&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-loop-through-your-own-objects-in-python-1609c81e11ff&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-loop-through-your-own-objects-in-python-1609c81e11ff&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-loop-through-your-own-objects-in-python-1609c81e11ff&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-loop-through-your-own-objects-in-python-1609c81e11ff&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----1609c81e11ff--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----1609c81e11ff--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@stephenfordham?source=post_page-----1609c81e11ff--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@stephenfordham?source=post_page-----1609c81e11ff--------------------------------", "anchor_text": "Stephen Fordham"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5d3f46276e7e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-loop-through-your-own-objects-in-python-1609c81e11ff&user=Stephen+Fordham&userId=5d3f46276e7e&source=post_page-5d3f46276e7e----1609c81e11ff---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1609c81e11ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-loop-through-your-own-objects-in-python-1609c81e11ff&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1609c81e11ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-loop-through-your-own-objects-in-python-1609c81e11ff&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@tine999", "anchor_text": "Tine Ivani\u010d"}, {"url": "https://stackoverflow.com/questions/2776829/difference-between-pythons-generators-and-iterators#:~:text=Every%20generator%20is%20an%20iterator,paragraph's%20definition%20of%20an%20iterator%20.", "anchor_text": "StackOverflow"}, {"url": "https://gist.github.com/StephenFordham/6d5a250bd2b721b6099ab650a481f1d5", "anchor_text": "here"}, {"url": "https://medium.com/tag/data-science?source=post_page-----1609c81e11ff---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/programming?source=post_page-----1609c81e11ff---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/python?source=post_page-----1609c81e11ff---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/coding?source=post_page-----1609c81e11ff---------------coding-----------------", "anchor_text": "Coding"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----1609c81e11ff---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1609c81e11ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-loop-through-your-own-objects-in-python-1609c81e11ff&user=Stephen+Fordham&userId=5d3f46276e7e&source=-----1609c81e11ff---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1609c81e11ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-loop-through-your-own-objects-in-python-1609c81e11ff&user=Stephen+Fordham&userId=5d3f46276e7e&source=-----1609c81e11ff---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1609c81e11ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-loop-through-your-own-objects-in-python-1609c81e11ff&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----1609c81e11ff--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F1609c81e11ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-loop-through-your-own-objects-in-python-1609c81e11ff&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----1609c81e11ff---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----1609c81e11ff--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----1609c81e11ff--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----1609c81e11ff--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----1609c81e11ff--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----1609c81e11ff--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----1609c81e11ff--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----1609c81e11ff--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----1609c81e11ff--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@stephenfordham?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@stephenfordham?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Stephen Fordham"}, {"url": "https://medium.com/@stephenfordham/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "977 Followers"}, {"url": "https://github.com/StephenFordham", "anchor_text": "https://github.com/StephenFordham"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5d3f46276e7e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-loop-through-your-own-objects-in-python-1609c81e11ff&user=Stephen+Fordham&userId=5d3f46276e7e&source=post_page-5d3f46276e7e--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fbd4ed43cae00&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-loop-through-your-own-objects-in-python-1609c81e11ff&newsletterV3=5d3f46276e7e&newsletterV3Id=bd4ed43cae00&user=Stephen+Fordham&userId=5d3f46276e7e&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}