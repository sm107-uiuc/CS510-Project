{"url": "https://towardsdatascience.com/creating-a-beautiful-web-api-in-python-6415a40789af", "time": 1683006480.10836, "path": "towardsdatascience.com/creating-a-beautiful-web-api-in-python-6415a40789af/", "webpage": {"metadata": {"title": "Creating A Beautiful Web API In Python | Towards Data Science", "h1": "Creating A Beautiful Web API In Python", "description": "A comprehensive tutorial to create a complete web API with Python, Flask And MongoDB using sustainable coding practices."}, "outgoing_paragraph_urls": [{"url": "https://pokeapi.co/", "anchor_text": "https://pokeapi.co/", "paragraph_index": 5}, {"url": "https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh?hl=en-US", "anchor_text": "JSON Viewer", "paragraph_index": 6}, {"url": "https://www.mongodb.com/download-center/community", "anchor_text": "https://www.mongodb.com/download-center/community", "paragraph_index": 14}, {"url": "https://docs.mongodb.com/manual/reference/mongo-shell/", "anchor_text": "https://docs.mongodb.com/manual/reference/mongo-shell/", "paragraph_index": 17}, {"url": "https://docs.python.org/3/tutorial/venv.html", "anchor_text": "https://docs.python.org/3/tutorial/venv.html", "paragraph_index": 32}, {"url": "http://docs.mongoengine.org/", "anchor_text": "http://docs.mongoengine.org/", "paragraph_index": 36}, {"url": "https://pymongo.readthedocs.io/en/stable/", "anchor_text": "https://pymongo.readthedocs.io/en/stable/", "paragraph_index": 36}, {"url": "https://jwt.io/", "anchor_text": "https://jwt.io/", "paragraph_index": 45}, {"url": "http://127.0.0.1:5000/meal/", "anchor_text": "http://127.0.0.1:5000/meal/", "paragraph_index": 52}, {"url": "https://python-reference.readthedocs.io/en/latest/docs/operators/dict_unpack.html", "anchor_text": "Dictionary Unpacking", "paragraph_index": 56}, {"url": "https://auth0.com/docs/tokens/concepts/access-tokens", "anchor_text": "https://auth0.com/docs/tokens/concepts/access-tokens", "paragraph_index": 57}, {"url": "https://realpython.com/primer-on-python-decorators/", "anchor_text": "https://realpython.com/primer-on-python-decorators/", "paragraph_index": 61}, {"url": "http://127.0.0.1:5000/authentication/signup/", "anchor_text": "http://127.0.0.1:5000/authentication/signup/", "paragraph_index": 70}, {"url": "http://127.0.0.1:5000/authentication/login/", "anchor_text": "login route", "paragraph_index": 74}, {"url": "http://127.0.0.1:5000/meal/", "anchor_text": "meal endpoint", "paragraph_index": 77}, {"url": "https://www.heroku.com/", "anchor_text": "https://www.heroku.com/", "paragraph_index": 82}], "all_paragraphs": ["Creating a website or API with a database backend is a great programming project, but it can be tough to get started since there are so many concepts to work with. This guide is meant to help you build your first (or 5th) API using Python Flask and MongoDB, from start to finish.", "Before we start: This guide is aimed towards beginners / intermediate level. I expect a bit of python knowledge and object-oriented programming fundamentals. As for myself, my background is in physics, math, and machine-learning \u2014 but web stuff had always seemed daunting. It\u2019s easy to find tutorials for each piece individually, but this tutorial is more about putting all the pieces together to make sustainable code. Hopefully, this guide will help take the edge off.", "Once you have understood the steps and how each piece fits together, I highly recommend learning about each component in more detail. Another piece of advice: try to re-build the whole thing from scratch on your own afterwards.", "Here is a breakdown of all the technologies and tools we\u2019ll look at (don\u2019t worry about the size of this list, most of these are not too threatening!):", "A Web API (Application Programming Interface) allows you to serve data over the web, typically in JSON or XML format. Generally, this is done by exposing endpoints to make requests.", "An example is the Pok\u00e9API (https://pokeapi.co/), which gives you access to a Pokemon database. Try the link below to get all the data you could ever want to know about a Squirtle!", "You may notice that there is a giant wall of text returned! This is why I like to use the JSON Viewer extension for Chrome to see the data in a more readable format like shown in the image.", "Let\u2019s break down the Squirtle link to learn a bit about endpoints (or \u2018routes\u2019 as we will call them in Flask)", "By convention, an API will have one entry point. This is like the root folder in your File Explorer. There can be any number of endpoints (which I will start calling \u2018routes\u2019 from now on.)", "Data can be delivered in different forms depending on the given route. Try navigating to the /pokemon route and you will get the data for ALL Pokemon, instead of just for Squirtle.", "For our API, we will create a restaurant database where a user can signup, login, save their details, and keep a list of their favorite meals. Some users will be allowed to do administrative tasks like deleting users or accessing any user\u2019s meal list.", "Choosing the right type of database for your project is incredibly important. A traditional SQL database stores information in tables. This is in contrast to a noSQL database.", "MongoDB is a noSQL database which stores data in JSON format. As opposed to tables, JSON forms a tree data structure. The individual records are known as \u2018documents.\u2019", "(I would recommend staring at the Pokemon JSON data above until you are convinced that it is a tree instead of a table.)", "You can get the free version of MongoDB at https://www.mongodb.com/download-center/community", "The defaults are fine for now. Compass is optional, we won\u2019t be using it in this tutorial. Wherever you install MongoDB and your database, make sure to remember the location.", "Leave your server running in the background, you can now access your database from the mongo shell or as we will see later, also from python. This is an unsecured server, and later we will add authorization.", "I would recommend looking at the MongoDB documentation as you play around https://docs.mongodb.com/manual/reference/mongo-shell/", "Let\u2019s insert a few records (documents) into our database. (You can copy and then use right-click to paste these into the mongo command shell.)", "The \u2018use\u2019 will select a db (or create one), and you may notice that the records we inserted are in JSON format. Also, mongo will automatically create the collection if it doesn\u2019t exist. Above, our collection is called \u2019meals\u2019.", "Verify that everything worked by pasting each of the following into mongo.", "Using db.<collection>.find() will return all of the data, and we can filter by passing JSON as a parameter into the find() method.", "Every item you add will have a unique ObjectId. This will become handy later for referencing items from other collections, such as users.", "Play around with making databases, collections, and documents. You now have the very basics of running a database.", "For security, set up admin credentials to your database. (Maybe don\u2019t make your password as \u201cpassword\u201d)", "The last command will shut down our server. To launch the server with authentication enabled, run this from the terminal instead.", "With this server running, you won\u2019t be able to do anything without authenticating first. You can test this by relaunching mongo.exe and trying to access some data. Enter the following into the mongo shell to sign in and gain access.", "We now have our secured database server, so it\u2019s time to start building the API.", "Flask is a light-weight web framework. With Flask, you get to pick-and-choose what components and extension needed for your site. I like this aspect since the modular nature allows you to build everything up, without too much clutter.", "The main Flask extensions we will use are Flask MongoEngine and Flask RESTful. The first will let us build Classes as templates for our data and the latter is designed for building an API, and makes the process simpler.", "Additionally, we will use JWT-Extended and BCrypt, but I will cover those later.", "Create a clean virtual environment and get Flask.", "If you aren\u2019t familiar with virtual environments, it won\u2019t hurt my feelings but you should definitely check out https://docs.python.org/3/tutorial/venv.html", "Now, before digging in any further, I want to make some remarks about my coding methodology here. Here are some things I included:", "You can run app.py now, and you will be hosting a Flask server. It won\u2019t do anything yet, though.", "Get Flask-MongoEngine, as well as BCrypt for password encryption.", "Flask-MongoEngine also comes with MongoEngine and PyMongo. You may find these libraries interesting on their own. Check out their docs as well!http://docs.mongoengine.org/ https://pymongo.readthedocs.io/en/stable/We won\u2019t be using PyMongo, but if you get very comfortable using the mongo shell, you may like this package. It uses python commands that are almost identical to what you would enter into a mongo shell!", "We will create a class model for users and another for meals. These will live in the models folder. Compare the Meal Class below to the entry we put into mongo through the shell. As you can see, MongoEngine is a lot more object-oriented.", "Before doing users, I will add some documentation. I wanted to show the difference between the raw code, and well-documented version. In the example section, there is code included which can be run directly, or by using doctest. I like adding doctest style comments since they both act as a test and to give a usage example.", "All code within the documentation that starts with >>> will be run by doctest.", "The Users Class is a bit more complicated. There is a Field for determining access level, one for validating phone numbers, and the Users Class overrides the Document.save() method, so we can generate a password hash before saving to our database. This way, if our database was ever compromised, the attacker would not get actual passwords.", "Congratulations, now the MongoEngine models are finished! Next, we will build the interface for the API.", "The Flask-RESTful library will require a setup much like MongoEngine, where we will make a Class for each API interaction. These Classes are called Resources. In Flask, connecting a Resource to an endpoint is called a route. This is what we are referring to when we say routes.", "Our API will have a few routes. One for authentication (signing up and logging in), another for users (to GET or PUT or DELETE user data), and another for meals (to GET, PUT, or POST).", "We will eventually require the use of web tokens to access all of the data, but first we will add the basics necessary to make your first API call.", "Learn more about JSON Web Tokens herehttps://jwt.io/", "Now, to get our first API call:", "When we make a GET request to the correct route, the get() method of this class will be called. This method returns all of the objects in Meals (which we currently have 2) and turns them into a JSON response.", "So, now we need to specify the correct route to access this. Add the following to routes.", "Here, we added the MealsApi Resource that was just created, and gave it the \u2018/meal/\u2019 endpoint. So now we have a complete route, and just like with the PokeAPI we can start serving data! After setting up app.py some more.", "Update the import section to get the necessary modules in app.py", "Add the following lines to the end of get_flask_app() in app.py in order to setup the RESTful API andMongoEngine.", "Try it out. Run app.py and you will see the default URL displayed. You can navigate to http://127.0.0.1:5000/meal/ and get a printout of all the meals in the MongoDB database. (You will need to still have mongod.exe running for this to work)", "Great. Now we will continue with the rest of the Resources and routes by doing the same steps. I will add documentation as well.", "Authentication allows users to log in before accessing the data. We have two routes included, one for singing up and another for logging in. The SignUpApi Class is the same as a POST request to the User model, except it doesn\u2019t require prior authentication (since the user hasn\u2019t signed up yet).", "A couple of notes about the coding of these classes:", "Take a look at Dictionary Unpacking to learn more.", "Learn more about keeping your data secure with tokens here https://auth0.com/docs/tokens/concepts/access-tokens", "Here is the completed authentication code.", "The error messages should be fairly self-explanatory.", "There are two things to mention about the two meal api Resources. Firstly, you\u2019ll notice that some of the methods have arguments now. This is handled by routes.py which will snag arguments from your endpoint. More on that in the routes section below. Secondly, you\u2019ll notice the @jwt_required decorator before some of the methods. This single line allows you to enforce the use of web tokens to gain access to the data.", "If you haven\u2019t used decorators in the past, I\u2019d recommend learning a bit more. They can be super handy for quickly adding functionality to a method.https://realpython.com/primer-on-python-decorators/", "One of the additions to routes.py is super important. You will notice an argument is passed inside the endpoint itself. Arguments are denoted by placing the name inside angled brackets. Flask RESTful will recognize these brackets and pass the value into the get(), post(), put(), or delete() methods.", "The code in user.py is very similar to what was used in meal.py above.", "Finally, don't forget to update app.py. Aside from adding the new imports and initializing JWT, we also have to add a jwt secret key to the default config. Obviously, you would not want your production code to use this key, but just like the default username and password, these are only designated for testing. In a production setting, you would save the configuration file elsewhere, and pass it into the get_flask_app() method. The final version of app.py is below.", "That\u2019s it. Now the API is complete. Well, sorta. We don\u2019t have a good way to test every aspect of it (like creating a new user, etc.) Although this can be done directly in python using the requests library, I\u2019ll use Postman instead. I find it to be a great way to test APIs.", "Rather than explain all of the fun you can have with Postman, I\u2019ll step you through signing up, logging in, and adding data. This will get you started, but there\u2019s plenty of great features inside.", "You can see the result of a get request above. It is the same as what we got earlier by entering \u2018http://127.0.0.1:5000/meal\u2019 into a web browser while both mongod.exe and app.py were running.", "We don\u2019t have a web token!", "To get one, we need to log in. In order to login we need to sign up.", "Ok, so let\u2019s sign up. Set a POST request and set the url to http://127.0.0.1:5000/authentication/signup/ and add a Body, with type raw JSON. Enter the following into the Body and click Send.", "The response includes the unique user_id. This can also be helpful for the route which requires it.", "Now, we will log in to get our web token. Fun fact, your unique user_id will also be encoded inside the web token, so it isn\u2019t absolutely necessary to remember it. You can see the method get_jwt_identity() for this in meal.py in the MealApi class.", "If you are feeling adventurous, you could even change the \u2018/user/<user_id>\u2019 endpoint in our routes. Since we can use get_jwt_identity() to grab this info from the web token, we could have a single endpoint for getting a single user. Maybe try \u2018user/get_user/\u2019 and ditch the user_id parameter in MealApi.", "To log in, we will POST an email and password over the login route.", "You can see that the API tokens are successfully returned.", "We can copy the access token and paste it into an Authorization header.", "Try again to access a GET request from the meal endpoint, but this time put the access_token into the Token Field of the Authorization tab, by selecting Bearer Token as the TYPE. Look at you, following along to a bunch of web jargon!", "Now you can add data of your own to fill up the database. Or you can use the resources/meal_data.tsv and resources/user_data.tsv which contain a bunch of entries. I\u2019d recommend writing your own scripts for doing this, but I will include tools/load_data.load_all() if you just want to input some test data.", "And here are the tools I made for loading the data into MongoDB:", "So far everything has run locally. For anyone to access your API over the internet, you will have to host a web server and database server somewhere publicly accessible. There are many ways to do this, but I will cover deploying with Heroku.", "An easy way to do host and API is with Heroku. Heroku is pretty simple, as it allows you to have a git repository specifically for your web server.", "First, set up a free account on https://www.heroku.com/ and once you are signed in, select \u2018Create a new app\u2019 from the main menu. You will create a unique app name that will be hosted at <your-app-name>.herokuapp.com", "First, to get Heroku to know how to run your app, it will look for three files in your main project directory.", "Finally, here is a list of tabs on the Heroku web page that you\u2019ll configure to get your API up and running.", "If you don\u2019t want to use a GitHub account, you can also choose to deploy with the Heroku CLI. If you choose this method, there are instructions on the Heroku site for installing the app and setting this up.", "Ok, that should be everything. You can look in the Activity tab to see if the build was successful, or to read the build logs, etc.", "Now, using Postman to try the same as before, except this time using your new, public API URL and endpoint.", "For another challenge, see if you can load your data into the public site. You can use the load_data.py, but you\u2019ll have to use the MONGODB_URI that Heroku gave you and the new JWT_SECRET_KEY. Here\u2019s a sample script below.", "To generate the synthetic data, I used these:", "Here\u2019s a list of the goodies I mentioned in the article.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Software & Data Engineer | Embedded Systems Tinkerer | Lover of Physics | Studied @ UW Seattle / ETH Zurich"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F6415a40789af&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-beautiful-web-api-in-python-6415a40789af&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-beautiful-web-api-in-python-6415a40789af&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-beautiful-web-api-in-python-6415a40789af&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-beautiful-web-api-in-python-6415a40789af&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----6415a40789af--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----6415a40789af--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@jrbarhydt?source=post_page-----6415a40789af--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@jrbarhydt?source=post_page-----6415a40789af--------------------------------", "anchor_text": "Johnathon Barhydt"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3f4f45200621&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-beautiful-web-api-in-python-6415a40789af&user=Johnathon+Barhydt&userId=3f4f45200621&source=post_page-3f4f45200621----6415a40789af---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6415a40789af&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-beautiful-web-api-in-python-6415a40789af&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6415a40789af&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-beautiful-web-api-in-python-6415a40789af&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/jrbarhydt/FlaskWebAPI.git", "anchor_text": "https://github.com/jrbarhydt/FlaskWebAPI.git"}, {"url": "https://pokeapi.co/", "anchor_text": "https://pokeapi.co/"}, {"url": "https://pokeapi.co/api/v2/pokemon/squirtle", "anchor_text": "https://pokeapi.co/api/v2/pokemon/squirtle"}, {"url": "https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh?hl=en-US", "anchor_text": "JSON Viewer"}, {"url": "https://www.mongodb.com/download-center/community", "anchor_text": "https://www.mongodb.com/download-center/community"}, {"url": "https://docs.mongodb.com/manual/reference/mongo-shell/", "anchor_text": "https://docs.mongodb.com/manual/reference/mongo-shell/"}, {"url": "https://docs.python.org/3/tutorial/venv.html", "anchor_text": "https://docs.python.org/3/tutorial/venv.html"}, {"url": "http://docs.mongoengine.org/projects/flask-mongoengine/en/latest/", "anchor_text": "http://docs.mongoengine.org/projects/flask-mongoengine/en/latest/"}, {"url": "http://docs.mongoengine.org/", "anchor_text": "http://docs.mongoengine.org/"}, {"url": "https://pymongo.readthedocs.io/en/stable/", "anchor_text": "https://pymongo.readthedocs.io/en/stable/"}, {"url": "https://flask-bcrypt.readthedocs.io/en/latest/", "anchor_text": "https://flask-bcrypt.readthedocs.io/en/latest/"}, {"url": "https://crackstation.net/hashing-security.htm", "anchor_text": "https://crackstation.net/hashing-security.htm"}, {"url": "https://jwt.io/", "anchor_text": "https://jwt.io/"}, {"url": "http://127.0.0.1:5000/meal/", "anchor_text": "http://127.0.0.1:5000/meal/"}, {"url": "https://python-reference.readthedocs.io/en/latest/docs/operators/dict_unpack.html", "anchor_text": "Dictionary Unpacking"}, {"url": "https://auth0.com/docs/tokens/concepts/access-tokens", "anchor_text": "https://auth0.com/docs/tokens/concepts/access-tokens"}, {"url": "https://realpython.com/primer-on-python-decorators/", "anchor_text": "https://realpython.com/primer-on-python-decorators/"}, {"url": "http://postman.com/downloads", "anchor_text": "postman.com/downloads"}, {"url": "http://127.0.0.1:5000/authentication/signup/", "anchor_text": "http://127.0.0.1:5000/authentication/signup/"}, {"url": "http://127.0.0.1:5000/authentication/login/", "anchor_text": "login route"}, {"url": "http://127.0.0.1:5000/meal/", "anchor_text": "meal endpoint"}, {"url": "https://gist.githubusercontent.com/jrbarhydt/c9bf0b2a2a1b1905fe0c9b6a669fecc4/raw/4658802dc2f1fea91d625646fc737a6d9b7b5e70/meal_data.csv", "anchor_text": "Right-Click This Link and Save"}, {"url": "https://gist.githubusercontent.com/jrbarhydt/c9bf0b2a2a1b1905fe0c9b6a669fecc4/raw/51d7a3d814ddf0fbbc6942d2033f3503788e2e39/user_data.csv", "anchor_text": "Right-Click This Link and Save"}, {"url": "https://www.heroku.com/", "anchor_text": "https://www.heroku.com/"}, {"url": "https://www.datacamp.com/courses/introduction-to-using-mongodb-for-data-science-with-python", "anchor_text": "Introduction to Using MongoDB for Data Science in PythonThis chapter is about getting a bird's-eye view of the Nobel Prize data's structure. You will relate MongoDB documents\u2026www.datacamp.com"}, {"url": "https://realpython.com/tutorials/flask/", "anchor_text": "Flask Tutorials - Real PythonFlask is a popular Python web framework, meaning it is a third-party Python library used for developing web\u2026realpython.com"}, {"url": "https://pypi.org/project/loremipsum/", "anchor_text": "loremipsumA Lorem Ipsum text generatorpypi.org"}, {"url": "https://www.fakenamegenerator.com/", "anchor_text": "Get a whole new identity at the Fake Name Generator4808 Parker DriveBeachwood, OH 44122 Email Address BryanDAdams@teleworm.us Website partprocure.com Browser user agent\u2026www.fakenamegenerator.com"}, {"url": "https://pokeapi.co/", "anchor_text": "Pok\u00e9APIAn open RESTful API for Pok\u00e9mon datapokeapi.co"}, {"url": "https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh?hl=en-US", "anchor_text": "JSON ViewerThe most beautiful and customizable JSON/JSONP highlighter that your eyes have ever seen. Open source at\u2026chrome.google.com"}, {"url": "https://docs.python.org/3/tutorial/venv.html", "anchor_text": "12. Virtual Environments and Packages - Python 3.8.2 documentationPython applications will often use packages and modules that don't come as part of the standard library. Applications\u2026docs.python.org"}, {"url": "https://docs.mongodb.com/manual/reference/mongo-shell/", "anchor_text": "mongo Shell Quick Reference - MongoDB ManualEdit descriptiondocs.mongodb.com"}, {"url": "http://docs.mongoengine.org/projects/flask-mongoengine/en/latest/", "anchor_text": "Flask-MongoEngine - Flask-MongoEngine 0.9.5 documentationA Flask extension that provides integration with MongoEngine. For more information on MongoEngine please check out the\u2026docs.mongoengine.org"}, {"url": "https://crackstation.net/hashing-security.htm", "anchor_text": "Secure Salted Password Hashing - How to do it ProperlySearching for hash(apple) in users' hash list... : Matches [alice3, 0bob0, charles8] Searching for hash(blueberry) in\u2026crackstation.net"}, {"url": "https://medium.com/tag/programming?source=post_page-----6415a40789af---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/python?source=post_page-----6415a40789af---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/web-development?source=post_page-----6415a40789af---------------web_development-----------------", "anchor_text": "Web Development"}, {"url": "https://medium.com/tag/mongodb?source=post_page-----6415a40789af---------------mongodb-----------------", "anchor_text": "Mongodb"}, {"url": "https://medium.com/tag/api?source=post_page-----6415a40789af---------------api-----------------", "anchor_text": "API"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6415a40789af&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-beautiful-web-api-in-python-6415a40789af&user=Johnathon+Barhydt&userId=3f4f45200621&source=-----6415a40789af---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6415a40789af&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-beautiful-web-api-in-python-6415a40789af&user=Johnathon+Barhydt&userId=3f4f45200621&source=-----6415a40789af---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6415a40789af&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-beautiful-web-api-in-python-6415a40789af&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----6415a40789af--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F6415a40789af&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-beautiful-web-api-in-python-6415a40789af&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----6415a40789af---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----6415a40789af--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----6415a40789af--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----6415a40789af--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----6415a40789af--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----6415a40789af--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----6415a40789af--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----6415a40789af--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----6415a40789af--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@jrbarhydt?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@jrbarhydt?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Johnathon Barhydt"}, {"url": "https://medium.com/@jrbarhydt/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "24 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3f4f45200621&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-beautiful-web-api-in-python-6415a40789af&user=Johnathon+Barhydt&userId=3f4f45200621&source=post_page-3f4f45200621--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F31d280fb6ce8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-beautiful-web-api-in-python-6415a40789af&newsletterV3=3f4f45200621&newsletterV3Id=31d280fb6ce8&user=Johnathon+Barhydt&userId=3f4f45200621&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}