{"url": "https://towardsdatascience.com/3-libraries-you-should-know-to-master-apache-kafka-in-python-c95fdf8700f2", "time": 1683008135.854605, "path": "towardsdatascience.com/3-libraries-you-should-know-to-master-apache-kafka-in-python-c95fdf8700f2/", "webpage": {"metadata": {"title": "3 Libraries You Should Know to Master Apache Kafka in Python | by Xiaoxu Gao | Towards Data Science", "h1": "3 Libraries You Should Know to Master Apache Kafka in Python", "description": "The world is empowered by data. We get tons of information every second, we clean it up, analyze it and create more valuable output, whether it is a log file, user activity, a chat message or\u2026"}, "outgoing_paragraph_urls": [{"url": "https://kafka.apache.org/", "anchor_text": "the official website", "paragraph_index": 11}, {"url": "https://kafka.apache.org/quickstart", "anchor_text": "Quickstart", "paragraph_index": 11}, {"url": "https://www.confluent.io/", "anchor_text": "Confluent platform", "paragraph_index": 12}, {"url": "https://www.confluent.io/about/", "anchor_text": "The founders were part of the team originally created Apache Kafka.", "paragraph_index": 12}, {"url": "https://zookeeper.apache.org/", "anchor_text": "Zookeeper", "paragraph_index": 13}, {"url": "https://kafka.apache.org/documentation/#api", "anchor_text": "5 APIs", "paragraph_index": 14}, {"url": "https://faust.readthedocs.io/en/latest/", "anchor_text": "Faust", "paragraph_index": 15}, {"url": "https://github.com/edenhill/librdkafka", "anchor_text": "librdkafka", "paragraph_index": 24}, {"url": "https://github.com/confluentinc/confluent-kafka-python/releases", "anchor_text": "release note", "paragraph_index": 26}, {"url": "https://github.com/edenhill/librdkafka", "anchor_text": "librdkafka", "paragraph_index": 31}, {"url": "https://github.com/edenhill/librdkafka", "anchor_text": "librdkafka", "paragraph_index": 32}, {"url": "https://kafka.apache.org/documentation/#producerconfigs", "anchor_text": "Apache Kafka website", "paragraph_index": 35}, {"url": "https://pypi.org/project/pykafka/#history", "anchor_text": "release history", "paragraph_index": 44}, {"url": "http://linkedin.com/in/xiaoxugao/", "anchor_text": "linkedin.com/in/xiaoxugao/", "paragraph_index": 47}], "all_paragraphs": ["The world is empowered by data. We get tons of information every second, we clean it up, analyze it and create more valuable output, whether it is a log file, user activity, a chat message or something else. The faster we deliver, the more value we will bring to our customers. We\u2019re in the era of a fast-paced and ever-changing environment.", "Apache Kafka is a distributed streaming platform that can publish, subscribe, store and process messages in real-time. Its pull-based architecture reduces the pressure on the service with a heavy load and makes it easy to scale. It moves a huge amount of data from the source to the destination with low latency.", "Kafka is a JVM based platform, so the mainstream programming language of the client is Java. But as the community is growing tremendously, high-quality open-sourced Python clients are also available and being used in production.", "In this article, I will cover the most well-known Python Kafka clients: kafka-python, pykafka and confluent-kafka and compare them. In the end, I will give my opinion on the pros and cons of each library.", "First thing first. Why Kafka? Kafka is intended for boosting an event-driven architecture. It empowers the architecture by providing high throughput, low latency, high durability, and high availability solution. (It doesn\u2019t mean you can have all of them at the same time, there is always a tradeoff. Read this whitepaper to understand more.)", "Besides its high performance, another attractive feature is the publish/subscribe model, where the sender doesn\u2019t send messages specifically to a receiver. Instead, the messages are delivered to a centralized place that receivers can subscribe to, depending on the topic.", "By doing so, we can easily decouple applications and get rid of monolithic design. Let\u2019s look at an example to understand why decoupling is better.", "You create a website that needs to send user activities somewhere, so you write a direct connection from your website to a real-time monitoring dashboard. It is a simple solution and works well. One day, you decide to store the user activities in a database for future analysis. So, you write another direct database connection to your website. Meanwhile, your website gets more and more traffic, and you want to empower it by adding an alerting service, real-time analysis service, etc.", "Your architecture will end up like this. Problems such as a massive code repo, security issues, scalability issues, and maintainability issues will hurt you.", "You need a hub to separate applications with a different role. For applications that create events, we call them producers. They publish events to a centralized hub. Each event (i.e. message) belongs to a topic. On the other side of the hub sit consumers. They subscribe to the topics that they need from the hub without directly talking to the producers.", "With this model in place, the architecture can be easily scaled and maintained. Engineers can focus more on the core business.", "You can download Apache Kafka from the official website. The Quickstart helps you to start up the server in 10 seconds.", "You can also download Apache Kafka from Confluent platform. It is by far the biggest Kafka-oriented streaming data platform. It provides a collection of infrastructure services surrounding Kafka to individuals and enterprises for making the data available as realtime streams. The founders were part of the team originally created Apache Kafka.", "Each Kafka server is called a broker, you can run it in a standalone mode or form a cluster. Besides Kafka, we need Zookeeper to store metadata about Kafka. Zookeeper acts like an orchestrator that manages the status of each broker within the distributed system.", "Let\u2019s say we\u2019ve set up the infrastructure with 1 Zookeeper and 1 Kafka broker. It\u2019s time to connect to it! The original Java client provides 5 APIs:", "In the Python world, 3 out of 5 APIs have been implemented which are Producer API, Consumer API, and Admin API. There is no such Kafka Stream API yet in Python, but a good alternative would be Faust.", "The testing in this section is executed based on 1 Zookeeper and 1 Kafka broker installed locally. This is not about performance tuning, so I\u2019m mostly using the default configurations provided by the library.", "kafka-python is designed to function much like the official java client, with a sprinkling of pythonic interfaces. It\u2019s best used with Kafka version 0.9+. The first release was in March 2014. It\u2019s being actively maintained.", "Each message is sent via send() asynchronously. When called it adds the record to a buffer and returns immediately. This allows the producer to send records to Kafka brokers in batch mode for efficiency. Asynchronization can improve speed tremendously, but we should also understand a few things:", "If you want to avoid these problems, you can choose to send messages synchronously. The return of send() is a FutureRecordMetadata. By doing future.get(timeout=60), the producer will be blocked for at most 60 seconds until the message has been successfully acknowledged by the brokers. The drawback is the speed, it is relatively slow compared to asynchronous mode.", "The consumer instance is a Python iterator. The core of the consumer class is poll() method. It allows the consumer to keep pulling messages from the topic. One of its input parameters timeout_ms is default to 0, which means the method returns immediately with any records that are pulled and available in the buffer. You can increase timeout_ms to return a larger batch.", "By default, each consumer is an infinite listener, so it won\u2019t stop until the program breaks. But on the other side, you are allowed to stop the consumer based on the message you received. For example, you can exit the loop and close the consumer if it reaches to a certain offset.", "The consumer can also be assigned to a partition or multiple partitions from multiple topics.", "This is the test result of kafka-python library. The size of each message is 100 bytes. The average throughput of the producer is 1.4MB/s. The average throughput of the consumer is 2.8MB/s.", "Confluent-kafka is a high-performance Kafka client for Python which leverages the high-performance C client librdkafka. Starting with version 1.0, these are distributed as self-contained binary wheels for OS X and Linux on PyPi. It supports Kafka version 0.8+. The first release was in May 2016. It\u2019s being actively maintained.", "For OS X and Linux, librdkafka is included in the package, there is to need to install it separately.", "For windows user, by the time I wrote this article, confluent-kafka hasn\u2019t supported Python3.8 binary wheels on Windows yet. You will run into the issue of librdkafka. Please check their release note, it\u2019s being actively developed. An alternative solution is to downgrade to Python3.7.", "Confluent-kafka has incredible performance in terms of speed. The API design is somewhat similar to kafka-python. You can make it synchronous by putting flush() inside the loop.", "The Consumer API in confluent-kafka requires more code. Instead of calling a high-level method like consume(), you need to handle the while loop yourself. I would recommend you to create your own consume() which is essentially a Python generator. Whenever there is a message pulled and available in the buffer, it yields the message.", "By doing so, the main function will be clean and you are free to control the behavior of your consumer. For example, you can define a \u201csession window\u201d in consume(). If no messages are pulled within X seconds, then the consumer will stop. Or you can add a flag infinite=True as an input parameter to control if the consumer should be an infinite listener or not.", "This is the test result of conflunet-kafka library. The size of each message is 100 bytes. The average throughput of the producer is 21.97MB/s. The average throughput of the consumer is 16.8~28.7MB/s.", "PyKafka is a programmer-friendly Kafka client for Python. It includes Python implementations of Kafka producers and consumers, which are optionally backed by a C extension built on librdkafka. It supports Kafka version 0.82+. The first release was in Aug 2012, but it hasn\u2019t been updated since Nov 2018.", "librdkafka doesn\u2019t come with the package, you need to install it separately in all the operating systems.", "pykafka has a KafkaClient interface that covers both ProducerAPI and Consumer API.", "Messages can be sent in both async and sync mode. What I found out is that pykafka modifies the default value of some producer configurations such as linger_ms and min_queued_messages, which can have an impact on sending a small volume of data.", "You can compare it with the default configuration on Apache Kafka website.", "If you want to get the callback of each message, make sure you change min_queued_messages to 1, otherwise you won\u2019t get any report if your data set is smaller than 70000.", "You can get a SimpleConsumer from the KafkaClinet interface. This is similar to kafka-python, where the poll is wrapped in the SimpleConsumer class.", "This is the test result of pykafka library. The size of each message is 100 bytes. The average throughput of the producer is 2.1MB/s. The average throughput of the consumer is 1.57MB/s.", "So far, I\u2019ve explained the Producer API and Consumer API of each library. In terms of Admin API, kafka-python and confluent-kafka do provide explicit Admin API. You can use it in your unit testing where you want to create a topic and then delete it before executing the next test. Besides, if you\u2019d like to build a Kafka monitoring dashboard in Python, Admin API can help you retrieve metadata of the cluster and topics.", "Confluent-kafka has no doubt the best performance among the 3 libraries. The API is well designed and parameters keep the same name and same default as the original Apache Kafka. You can easily link it to the original parameter. Personally, I like the flexibility to customize consumer behavior. It is also being actively developed and supported by Confluent.", "A disadvantage is the fact that Windows users might need to struggle a bit to make it work. And debug can be tricky because of its C extension.", "kafka-python is a pure Python library without a C extension. The API is well designed and straightforward to use for beginners. It\u2019s an actively developed project as well.", "The disadvantage of python-kafka is its speed. If you do care about the performance, I would recommend you to switch to confluent-kafka.", "Compared to kafka-python and conflunet-kafka, the development of pykafka is less active. The release history shows that it hasn\u2019t been updated since Nov 2018. Besides, pykafka has different API designs and uses different default parameters which might be not straightforward for the first time.", "I hope you enjoy this article! Leave your comments below if you have any thoughts.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "I\u2019m a Developer with a focus on Python and Data Engineering. I write stuff to talk to myself and the world. You can find me on linkedin.com/in/xiaoxugao/."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fc95fdf8700f2&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-libraries-you-should-know-to-master-apache-kafka-in-python-c95fdf8700f2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-libraries-you-should-know-to-master-apache-kafka-in-python-c95fdf8700f2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-libraries-you-should-know-to-master-apache-kafka-in-python-c95fdf8700f2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-libraries-you-should-know-to-master-apache-kafka-in-python-c95fdf8700f2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----c95fdf8700f2--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c95fdf8700f2--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@xiaoxugao?source=post_page-----c95fdf8700f2--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@xiaoxugao?source=post_page-----c95fdf8700f2--------------------------------", "anchor_text": "Xiaoxu Gao"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2adc5a07e772&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-libraries-you-should-know-to-master-apache-kafka-in-python-c95fdf8700f2&user=Xiaoxu+Gao&userId=2adc5a07e772&source=post_page-2adc5a07e772----c95fdf8700f2---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc95fdf8700f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-libraries-you-should-know-to-master-apache-kafka-in-python-c95fdf8700f2&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc95fdf8700f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-libraries-you-should-know-to-master-apache-kafka-in-python-c95fdf8700f2&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@jakegivens", "anchor_text": "Jake Givens"}, {"url": "https://unsplash.com/", "anchor_text": "Unsplash"}, {"url": "https://medium.com/@_JeffPoole/thoughts-on-push-vs-pull-architectures-666f1eab20c2", "anchor_text": "Thoughts on Push vs Pull ArchitecturesI\u2019ve had a few discussions with people lately about the advantages and disadvantages of different service architectures\u2026medium.com"}, {"url": "https://www.confluent.io/white-paper/optimizing-your-apache-kafka-deployment/", "anchor_text": "How to Deploy and Optimize Kafka for High Performance and Low LatencyApache Kafka \u00ae is a power stream processing platformhis white paper discusses how to optimize Kafka deployments for\u2026www.confluent.io"}, {"url": "https://kafka.apache.org/", "anchor_text": "the official website"}, {"url": "https://kafka.apache.org/quickstart", "anchor_text": "Quickstart"}, {"url": "https://www.confluent.io/", "anchor_text": "Confluent platform"}, {"url": "https://www.confluent.io/about/", "anchor_text": "The founders were part of the team originally created Apache Kafka."}, {"url": "https://zookeeper.apache.org/", "anchor_text": "Zookeeper"}, {"url": "https://kafka.apache.org/documentation/#api", "anchor_text": "5 APIs"}, {"url": "https://faust.readthedocs.io/en/latest/", "anchor_text": "Faust"}, {"url": "https://github.com/dpkp/kafka-python", "anchor_text": "Kafka-Python"}, {"url": "https://gist.github.com/highsmallxu/0f9dc0e3dabfbd6f967a3bf6cf8b6740", "anchor_text": "kafka-python-consumer.py"}, {"url": "https://gist.github.com/highsmallxu/c58cbdf076dc8a40019e7dd855b17efb", "anchor_text": "kafka-python-result.csv"}, {"url": "https://docs.confluent.io/current/clients/confluent-kafka-python/", "anchor_text": "Confluent-kafka"}, {"url": "https://github.com/edenhill/librdkafka", "anchor_text": "librdkafka"}, {"url": "https://github.com/confluentinc/confluent-kafka-python/releases", "anchor_text": "release note"}, {"url": "https://gist.github.com/highsmallxu/f15d7a40cf6c858786fd6c1845d8f3ae", "anchor_text": "confluent-kafka-producer.py"}, {"url": "https://gist.github.com/highsmallxu/cccb9c70389a1160864f53098b34ec66", "anchor_text": "confluent-kafka-consumer.py"}, {"url": "https://gist.github.com/highsmallxu/d2ffc55419537514eb82fb93d408cbca", "anchor_text": "confluent-kafka-result.csv"}, {"url": "https://pykafka.readthedocs.io/en/latest/", "anchor_text": "PyKafka"}, {"url": "https://github.com/edenhill/librdkafka", "anchor_text": "librdkafka"}, {"url": "https://github.com/edenhill/librdkafka", "anchor_text": "librdkafka"}, {"url": "https://kafka.apache.org/documentation/#producerconfigs", "anchor_text": "Apache Kafka website"}, {"url": "https://pykafka.readthedocs.io/en/2.0.0/api/producer.html#module-pykafka.producer", "anchor_text": "pykafka-producer-config"}, {"url": "https://gist.github.com/highsmallxu/4734d8eca62cb1341bfd01521c3fab9f", "anchor_text": "pykafka-producer.py"}, {"url": "https://gist.github.com/highsmallxu/d99ec0056c3420d9389bce12d9bcd2f8", "anchor_text": "pykafka-consumer.py"}, {"url": "https://gist.github.com/highsmallxu/6ec2c8a303453db0cc241a7b63f9ebe7", "anchor_text": "pykafka-result.csv"}, {"url": "https://gist.github.com/highsmallxu/9071651a8bbbb884e3a97714deebc981", "anchor_text": "kafka-python-result.csv"}, {"url": "https://pypi.org/project/pykafka/#history", "anchor_text": "release history"}, {"url": "https://pypi.org/project/kafka-python/#history", "anchor_text": "kafka-pythonPython client for the Apache Kafka distributed stream processing system. kafka-python is designed to function much like\u2026pypi.org"}, {"url": "https://pypi.org/project/confluent-kafka/", "anchor_text": "confluent-kafkaConfluent's Python client for Apache Kafkapypi.org"}, {"url": "https://pypi.org/project/pykafka/", "anchor_text": "pykafkaPyKafka is a programmer-friendly Kafka client for Python. It includes Python implementations of Kafka producers and\u2026pypi.org"}, {"url": "https://www.confluent.io/resources/kafka-the-definitive-guide/?utm_medium=sem&utm_source=google&utm_campaign=ch.sem_br.nonbrand_tp.prs_tgt.content-search_mt.xct_rgn.emea_lng.eng_dv.all&utm_term=kafka%20the%20definitive%20guide&creative=&device=c&placement=&gclid=CjwKCAjw8J32BRBCEiwApQEKgZ1vBxyFB-DnTvXRClVBHzHX8NERiYyF_2Go5iYHYP6f3aP_l9xNBhoCUi0QAvD_BwE", "anchor_text": "Apache Kafka: The Definitive Guide | ConfluentWhat is Kafka, and how does it work? In this comprehensive e-book, you'll get full introduction to Apache Kafka \u00ae , the\u2026www.confluent.io"}, {"url": "https://medium.com/tag/programming?source=post_page-----c95fdf8700f2---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-science?source=post_page-----c95fdf8700f2---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/python?source=post_page-----c95fdf8700f2---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/kafka?source=post_page-----c95fdf8700f2---------------kafka-----------------", "anchor_text": "Kafka"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----c95fdf8700f2---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc95fdf8700f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-libraries-you-should-know-to-master-apache-kafka-in-python-c95fdf8700f2&user=Xiaoxu+Gao&userId=2adc5a07e772&source=-----c95fdf8700f2---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc95fdf8700f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-libraries-you-should-know-to-master-apache-kafka-in-python-c95fdf8700f2&user=Xiaoxu+Gao&userId=2adc5a07e772&source=-----c95fdf8700f2---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc95fdf8700f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-libraries-you-should-know-to-master-apache-kafka-in-python-c95fdf8700f2&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c95fdf8700f2--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fc95fdf8700f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-libraries-you-should-know-to-master-apache-kafka-in-python-c95fdf8700f2&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----c95fdf8700f2---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----c95fdf8700f2--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----c95fdf8700f2--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----c95fdf8700f2--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----c95fdf8700f2--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----c95fdf8700f2--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----c95fdf8700f2--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----c95fdf8700f2--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----c95fdf8700f2--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@xiaoxugao?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@xiaoxugao?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Xiaoxu Gao"}, {"url": "https://medium.com/@xiaoxugao/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "9.6K Followers"}, {"url": "http://linkedin.com/in/xiaoxugao/", "anchor_text": "linkedin.com/in/xiaoxugao/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2adc5a07e772&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-libraries-you-should-know-to-master-apache-kafka-in-python-c95fdf8700f2&user=Xiaoxu+Gao&userId=2adc5a07e772&source=post_page-2adc5a07e772--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F45d7754eac8c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-libraries-you-should-know-to-master-apache-kafka-in-python-c95fdf8700f2&newsletterV3=2adc5a07e772&newsletterV3Id=45d7754eac8c&user=Xiaoxu+Gao&userId=2adc5a07e772&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}