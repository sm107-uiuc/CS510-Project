{"url": "https://towardsdatascience.com/essential-programming-control-structures-2e5e73285df4", "time": 1683003179.12749, "path": "towardsdatascience.com/essential-programming-control-structures-2e5e73285df4/", "webpage": {"metadata": {"title": "Essential Programming | Control Structures | by Diego Lopez Yse | Towards Data Science", "h1": "Essential Programming | Control Structures", "description": "If you want to start programming, I must admit that the outlook is not good: different operating systems, so many programming languages, and endless ways of reaching the same results. These are the\u2026"}, "outgoing_paragraph_urls": [{"url": "http://www.acad.bg/ebook/ml/Society%20of%20Mind.pdf", "anchor_text": "\u201cThe Society of Mind\u201d", "paragraph_index": 2}, {"url": "https://www.sciencemag.org/news/2016/05/sunflowers-show-complex-fibonacci-sequences", "anchor_text": "nature phenomena", "paragraph_index": 42}, {"url": "https://www.investopedia.com/terms/f/fibonaccilines.asp", "anchor_text": "finance", "paragraph_index": 42}, {"url": "https://www.classicfm.com/discover-music/fibonacci-sequence-in-music/", "anchor_text": "music", "paragraph_index": 42}, {"url": "https://www.atlasobscura.com/articles/le-corbusiers-modulor-rule", "anchor_text": "architecture", "paragraph_index": 42}, {"url": "https://www.linkedin.com/in/lopezyse/", "anchor_text": "Linkedin", "paragraph_index": 62}, {"url": "https://twitter.com/lopezyse", "anchor_text": "Twitter", "paragraph_index": 62}], "all_paragraphs": ["If you want to start programming, I must admit that the outlook is not good: different operating systems, so many programming languages, and endless ways of reaching the same results. These are the type of situations that will make you either run away (as fast and as far as you can, hoping you\u2019ll never bump into programming again), or face the beast. If you decide to face it, then you won\u2019t know where to start from, or how to handle it. You\u2019ll only have questions and probably not even one answer, but you know what? This is a great way to start. Actually this is how I started programming. I believed that if I ever wanted to understand programs I had to answer the question of:", "How do programs work, and how can you build them?", "Certainly not a simple\u00a0issue, but come on, harder questions have been answered, right? Take a look at Marvin Minsky. Minsky, who is considered one of the fathers of AI, wrote \u201cThe Society of Mind\u201d to answer one of the most difficult questions of our time: what is the human mind, and how does it work? With a revolutionary perspective, Minsky suggested that our minds consist of the aggregation of small-minds (or more basic components) that have evolved to perform highly specific tasks. According to him, most of these tiny-minds lack the attributes we think of as intelligence and are severely limited, and can only reach feelings, thoughts or purposeful action through the interaction with other components.", "This idea contains a powerful concept: complex matters can be thought as groups of simpler subjects, that can also be partitioned into more basic things, until you reach a proper understanding. If you think about it this way, any efficient system can be explained as a set of simpler functions that when put together perform in a way that reach superior results in comparison to their individual performances.", "For this reason, if I wanted to understand computer programs (and learn how to make them) I needed to understand their building blocks. You see, when a program\u00a0runs, the code is read by the computer line by line (from top to bottom, and from left to right), just like you would read a book. At some point, the program may reach a situation where it needs to make a decision such as jump to a different part of the program or re-run a certain piece again. These decisions that affect the flow of the program\u2019s code are known as a Control Structures.", "Control Structures can be considered as the building blocks of computer programs. They are commands that enable a program to \u201ctake decisions\u201d, following one path or another. A program is usually not limited to a linear sequence of instructions since during its process it may bifurcate, repeat code or\u00a0bypass\u00a0sections. Control Structures are the blocks that analyze variables and choose directions in which to go based on given parameters.", "The basic Control Structures in programming languages are:", "Now let\u2019s take a look at each one of these concepts. Down below we will deep dive using R programming language (one of the mostly used languages for data science), but the same ideas and explanations apply to any other programming language.", "\u201cConditionals\u201d are at the very core of programming. The idea behind them is that they allow you to control the flow of the code that is executed based on different conditions in the program (e.g. an input taken from the user, or the internal state of the machine the program is running on). In this article we will explore the Conditionals Control Structures of \u201cIf statements\u201d and \u201cIf-Else statements\u201d.", "\u201cIf statements\u201d execute one or more statements when a condition is met. If the testing of that condition is TRUE, the statement gets executed. But if it\u2019s FALSE (the condition is not met), then nothing happens. Let\u00b4s visualize it:", "The syntax of \u201cIf statements\u201d is:", "To show a simple case, let\u2019s say you want to verify if the value of a variable (x) is positive:", "In this example, first we assign the value of 4 to the variable (x) and use the \u201cIf statement\u201d to verify if that value is equal or greater than 0. If the test results TRUE (as in this case), the function will print the sentence: \u201cvariable x is a positive number\u201d.", "But since the \u201cIf statement\u201d only executes a statement if the tested condition is TRUE, what would had happened if the variable value was negative? To execute a statement on a tested condition with a FALSE result, we need to use \u201cIf-Else statement\u201d.", "This Control Structure allows a program to follow alternative paths of execution, whether a condition is met or not.", "The syntax of \u201cIf-Else statements\u201d is:", "The \u201celse part\u201d of the instruction is optional and only evaluated if the condition tests FALSE.", "Following our example, we extend the previous conditional \u201cIf statement\u201d by adding the \u201celse part\u201d to test if a the value of a variable is positive or negative and perform an action whether the test result is TRUE or FALSE.", "In this example, we assign the value of -4 to the variable (x) and use the \u201cIf statement\u201d to verify if that value is equal or greater than 0. If the test results TRUE, the function will print the sentence: \u201cvariable x is a positive number\u201d. But in case the test results FALSE (as in this case), the function continues to the alternative expression and prints the sentence: \u201cvariable x is a negative number\u201d.", "Let\u2019s say you need to define more than 2 conditions, as in the event of grading an exam. In that case you can grade A, B, C, D or F (5 options), so, how would you do it?", "\u201cIf-Else statements\u201d can have multiple alternative statements. In the below example we define an initial score, and an \u201cIf-Else statement\u201d of 5 rating categories. This piece of code will go through each condition until reaching a TRUE test result.", "\u201cLoop statements\u201d are nothing more than the automation of multi-step processes by organizing sequences of actions, and grouping the parts that need to be repeated. Also a central part of programming, iteration (or Looping) gives computers much of their power. They can repeat a sequence of steps as often as necessary, and appropriate repetitions of simple steps can solve complex problems.", "In general terms, there are two types of \u201cLooping techniques\u201d:", "Let\u2019s take a look at them:", "In this Control Structure, statements are executed one after another in a consecutive order over a sequence of values that gets evaluated only when the \u201cFor Loop\u201d is initiated (never re-evaluated). In this case, the number of iterations is fixed and known in advance.", "If the evaluation of the condition on a variable (which can assume values within a specified sequence) results TRUE, one or more statements will be executed sequentially over that string of values. Once the first condition test is done (and results TRUE), the statement is executed and the condition is evaluated again, going through an iterative process. The \u201cvariable in sequence\u201d section performs this test on each value of the sequence until it covers the last element.", "If the condition is not met and the resulting outcome is FALSE (e.g. the \u201cvariable in sequence\u201d part has finished going through all the elements of the sequence), the loop ends. If the condition test results FALSE in the first iteration, the \u201cFor Loop\u201d is never executed.", "The syntax of \u201cFor Loops\u201d is:", "To show how \u201cFor Loops\u201d work, first we will create a sequence by concatenating different names of fruits to create a list (called \u201cfruit_list\u201d):", "We will use this fruit list as the \u201csequence\u201d in a\u201cFor Loop\u201d, and make the \u201cFor Loop\u201d run a statement once (print the name of each value) for each provided value in the sequence (the different fruits in the fruit list):", "This way, the outcome of the \u201cFor Loop\u201d is as follows:", "OK, so we printed the name of each value in the list. Not a big deal, right? The good thing is that \u201cFor Loops\u201d can be used to produce more interesting results. Take a look at the following example.", "What if we want to modify values, or perform calculations sequentially? You can use \u201cFor Loops\u201d to perform mathematical operations sequentially over each value of a vector (elements of the same type, which in this case will be numerical).", "In this example, we will create a sequence of numbers (from 1 to 10), and set a \u201cFor Loop\u201d to calculate and print the square root of each value in that sequence:", "In this case, the outcome of the \u201cFor Loop\u201d is:", "You can use any type of mathematical operator over a numerical sequence, and as we will see later in this article, make all sorts of combinations between different Control Structures to reach more complex results.", "In \u201cWhile Loops\u201d a condition is first evaluated, and if the result of testing that condition is TRUE, one or more statements are repeatedly executed until that condition becomes FALSE.", "Unlike \u201cIf statements\u201d, in which a condition tested as TRUE executes an expression only once and ends, \u201cWhile Loops\u201d are iterative statements that execute some expression over and over again until the condition becomes FALSE. If the condition never turns out to be FALSE, the \u201cWhile Loop\u201d will go on forever and the program will crash. The other way around, if the condition test results FALSE in the beginning of the loop, the expression will never get executed.", "The syntax of \u201cWhile Loops\u201d is:", "Let\u2019s see an example. First we will create a variable (x) and assign it the value of 1. Then we set a \u201cWhile Loop\u201d to iteratively test a condition over that variable until the condition test results FALSE:", "This is how it works: the initial value of the variable (x) is 1, so when we test the condition \u201cis the variable (x) less than 10?\u201d, the result evaluates to TRUE and the expression is executed, printing the result of the variable (x), which in the first case is 1. But then something happens: the variable (x) is incremented by 1 before the function ends, and in the next iteration the value of x will be 2.", "This variable reassignment is important because it will eventually reach the FALSE condition and the loop exit (value of x = 10). Failing to change the initial conditions in a \u201cWhile Loop\u201d will result into an infinite loop and a program crash.", "Have you heard of the Fibonacci sequence? This is a series of numbers with the characteristic that the next number in the sequence is found by adding up the two numbers before it: 0, 1, 1, 2, 3, 5, 8, 13, 21,\u2026 This sequence can be found in several nature phenomena, and has different applications in finance, music, architecture, and other disciplines.", "Let\u2019s calculate it using a \u201cWhile Loop\u201d.", "In this case we set a maximum value in the series as the stop condition, so that the loop prints the Fibonacci series only for numbers below 100. When a series element (which ever it is) becomes bigger than 100, the loop cycle ends.", "Another way of generating the Fibonacci series with a \u201cWhile Loop\u201d is, instead of setting the maximum value of the series as a stop condition, setting the number of series elements you want to generate.", "This \u201cWhile Loop\u201d appends the next element of the series to the end of the previous element, until reaching a stop condition. In this case, when the series reaches 10 elements (no matter which values), the loop cylce ends.", "Closely linked to \u201cWhile Loops\u201d, \u201cRepeat Loops\u201d execute statements iteratively, but until a stop condition is met. This way, statements are executed at least once, no matter what the result of the condition is, and the loop is exited only when certain condition becomes TRUE:", "The syntax of \u201cRepeat Loops\u201d is:", "\u201cRepeat Loops\u201d use \u201cBreak statements\u201d as a stop condition. \u201cBreak statements\u201d are combined with the test of a condition to interrupt cycles within loops, since when the program hits a break, it will pass control to the instruction immediately after the end of the loop (if any).", "\u201cRepeat Loops\u201d will run forever if the break condition is not met. See these 2 examples", "First we create a variable (x) and assign it the value of 5. Then we set a \u201cRepeat Loop\u201d to iteratively print the value of the variable, modify the value of the variable (increase it by 1), and test a condition over that variable (if it equals 10) until the condition test results TRUE.", "The \u201cbreaking condition\u201d triggers when the variable (x) reaches 10, and the loop ends.", "Now let\u2019s suppose we produce a list of random numbers, for which we don\u2019t know the order or sequence of generation.", "In this example we will use a \u201cRepeat Loop\u201d to generate a sequence of normally distributed random numbers (you can generate random with any other distribution, we just pick this one), and break the sequence once one of those numbers is bigger than 1. Since we don\u2019t know which numbers will come first, we don\u2019t know how long the sequence will be: we just know the breaking condition.", "First, we use the \u201cset.seed\u201d instruction to fix the random numbers (generate always the same random numbers), and make this example reproduceable.", "Then we initiate the \u201cRepeat Loop\u201d by generating a normally distributed random number, printing it, and checking if that number is bigger than 1. Only when this condition becomes TRUE (could be with the first generated number, or not), the loop cycle will pass to the break statement and end.", "This shows once again the importance of setting a proper breaking condition. Failing to do so will result in an infinite loop.", "We\u2019ve seen and explained concepts in isolation, but \u201cControl Structures\u201d can be combined anyway you want: Loops may contain several internal Loops; Conditionals may contain Loops and Conditionals, the options are endless. (in fact, when reviewing \u201cRepeat Loops\u201d we found that the examples contained nested \u201cIf statements\u201d).", "You can develop advanced solutions just by combining the \u201cControl Structures\u201d we explained in this article. Like Minsky stated, we can reach complex outcomes as a result of the interaction of simpler components. Control Structures constitute the basic blocks for decision making processes in computing. They change the flow of programs and enable us to construct complex sets of instructions out of simpler building blocks.", "My advice is: learn about them.", "It will ease your path to coding and understanding of programs, and will help you to find new ways of solving problems.", "Interested in these topics? Follow me on Linkedin or Twitter", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F2e5e73285df4&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fessential-programming-control-structures-2e5e73285df4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fessential-programming-control-structures-2e5e73285df4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fessential-programming-control-structures-2e5e73285df4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fessential-programming-control-structures-2e5e73285df4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----2e5e73285df4--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----2e5e73285df4--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://lopezyse.medium.com/?source=post_page-----2e5e73285df4--------------------------------", "anchor_text": ""}, {"url": "https://lopezyse.medium.com/?source=post_page-----2e5e73285df4--------------------------------", "anchor_text": "Diego Lopez Yse"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F806fa785a6af&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fessential-programming-control-structures-2e5e73285df4&user=Diego+Lopez+Yse&userId=806fa785a6af&source=post_page-806fa785a6af----2e5e73285df4---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2e5e73285df4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fessential-programming-control-structures-2e5e73285df4&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2e5e73285df4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fessential-programming-control-structures-2e5e73285df4&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "http://www.acad.bg/ebook/ml/Society%20of%20Mind.pdf", "anchor_text": "\u201cThe Society of Mind\u201d"}, {"url": "https://www.sciencemag.org/news/2016/05/sunflowers-show-complex-fibonacci-sequences", "anchor_text": "nature phenomena"}, {"url": "https://www.investopedia.com/terms/f/fibonaccilines.asp", "anchor_text": "finance"}, {"url": "https://www.classicfm.com/discover-music/fibonacci-sequence-in-music/", "anchor_text": "music"}, {"url": "https://www.atlasobscura.com/articles/le-corbusiers-modulor-rule", "anchor_text": "architecture"}, {"url": "https://www.linkedin.com/in/lopezyse/", "anchor_text": "Linkedin"}, {"url": "https://twitter.com/lopezyse", "anchor_text": "Twitter"}, {"url": "https://medium.com/tag/digital?source=post_page-----2e5e73285df4---------------digital-----------------", "anchor_text": "Digital"}, {"url": "https://medium.com/tag/programming?source=post_page-----2e5e73285df4---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/technology?source=post_page-----2e5e73285df4---------------technology-----------------", "anchor_text": "Technology"}, {"url": "https://medium.com/tag/data-science?source=post_page-----2e5e73285df4---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/automation?source=post_page-----2e5e73285df4---------------automation-----------------", "anchor_text": "Automation"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2e5e73285df4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fessential-programming-control-structures-2e5e73285df4&user=Diego+Lopez+Yse&userId=806fa785a6af&source=-----2e5e73285df4---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2e5e73285df4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fessential-programming-control-structures-2e5e73285df4&user=Diego+Lopez+Yse&userId=806fa785a6af&source=-----2e5e73285df4---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2e5e73285df4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fessential-programming-control-structures-2e5e73285df4&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----2e5e73285df4--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F2e5e73285df4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fessential-programming-control-structures-2e5e73285df4&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----2e5e73285df4---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----2e5e73285df4--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----2e5e73285df4--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----2e5e73285df4--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----2e5e73285df4--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----2e5e73285df4--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----2e5e73285df4--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----2e5e73285df4--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----2e5e73285df4--------------------------------", "anchor_text": ""}, {"url": "https://lopezyse.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://lopezyse.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Diego Lopez Yse"}, {"url": "https://lopezyse.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "944 Followers"}, {"url": "https://www.linkedin.com/in/lopezyse/", "anchor_text": "https://www.linkedin.com/in/lopezyse/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F806fa785a6af&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fessential-programming-control-structures-2e5e73285df4&user=Diego+Lopez+Yse&userId=806fa785a6af&source=post_page-806fa785a6af--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fe1178cb759ee&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fessential-programming-control-structures-2e5e73285df4&newsletterV3=806fa785a6af&newsletterV3Id=e1178cb759ee&user=Diego+Lopez+Yse&userId=806fa785a6af&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}