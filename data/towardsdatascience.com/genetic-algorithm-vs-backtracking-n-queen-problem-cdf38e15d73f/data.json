{"url": "https://towardsdatascience.com/genetic-algorithm-vs-backtracking-n-queen-problem-cdf38e15d73f", "time": 1682996204.302258, "path": "towardsdatascience.com/genetic-algorithm-vs-backtracking-n-queen-problem-cdf38e15d73f/", "webpage": {"metadata": {"title": "Genetic algorithm vs. Backtracking: N-Queen Problem | by Hirad Babayan | Towards Data Science", "h1": "Genetic algorithm vs. Backtracking: N-Queen Problem", "description": "A few months ago, I got familiar with genetic algorithms. I started to read about it and I was pretty amazed by it. One of the most famous problems solved by genetic algorithms is the n-queen\u2026"}, "outgoing_paragraph_urls": [{"url": "https://en.wikipedia.org/wiki/Eight_queens_puzzle", "anchor_text": "n-queen problem", "paragraph_index": 0}, {"url": "https://github.com/hiradbaba/GANQ", "anchor_text": "Github link", "paragraph_index": 13}, {"url": "http://B.Sc", "anchor_text": "B.Sc", "paragraph_index": 16}, {"url": "http://M.Sc", "anchor_text": "M.Sc", "paragraph_index": 16}], "all_paragraphs": ["A few months ago, I got familiar with genetic algorithms. I started to read about it and I was pretty amazed by it. One of the most famous problems solved by genetic algorithms is the n-queen problem. I implemented my genetic solver, plus the famous old backtracking solver using python 3. I implemented a Chess class (backtracking solver) and a GeneticChess class (genetic solver). These classes both have an attribute board which is a two dimension list. Each row of the list is filled with N zeros.", "As you know, the backtracking solver is a simple function which starts solving the problem by putting a queen on the first row of the board and tries to put the second queen on the second row in a way it wouldn\u2019t conflict the first one. It continues putting the queens on the board row by row until it puts the last one on the n-th row. If it couldn\u2019t fill any tile on a row it would backtrack and change the position of the previous row\u2019s queen.", "The following tree describes how the backtracking algorithm solves the 4-queen problem.", "The backtracking solver will find the solution for us. But as the N increases it becomes slower. If N=25, it would take 322.89 seconds to find the solution and when N=26, it would take forever! So an approach is needed which could find the solution pretty much quicker. Here\u2019s the backtracking method:", "One way is to solve the problem using genetic algorithms. So how does genetic algorithms work?", "The base idea comes from what happens in the nature. In an environment, there exists some chromosomes(or gens). These chromosomes combine together and create some children in the environment. The new chromosome is a combination of its parents\u2019 DNA and also it mutates itself. Of course, the environment has a population limit. Since each chromosome is unique from others, it is understood that some are stronger than the others. Based on the law of nature the stronger creatures will make it to the next generation and the weaker ones will die. So, we expect that each generation consists of stronger chromosomes. That\u2019s how a genetic algorithm works.", "The following steps should be taken to achieve a genetic algorithm:", "Now let\u2019s jump into these steps to create our genetic algorithm.", "Basically, a chromosome (also called gen) is a representation of a solution whether it\u2019s valid or not. How are we going to represent a n-queen solution? One way is to create a 2 dimension list filled with 0 and then, fill it with N ones representing the position of the queen. This maybe the first thing that comes to the mind but it\u2019s not actually good. A better and simpler representation is that the chromosome is a list of length N. Each index specifies a column of the board. The value of each index is between 0 and N-1 representing the the row of a queen in a column.", "The Utility function is a function that determines how good is a solution. So the function takes a gen as its parameter and returns a number which is the utility. In this case our utility function will evaluate the number of conflicts based on queen positions. It is the summation of the number of conflicts on the left side of each queen. So if the utility function returns 0, we know that there are no conflicts on the board, therefore, we have our solution.", "As I said, the child chromosome is a combination of its parents\u2019 DNA. This process is called Crossover. This function is the key function that makes the Genetic algorithm faster than the backtracking solver. There exists a lot of crossover functions and you can even implement your own. The function takes two chromosomes as the parameters. These are the parents and they are going to create new children chromosomes. I decided to swap the elements of the first list with the elements of the second list whenever the difference of two elements in one of the lists is less than 2.", "After the crossover process the child is created. Now the child tries to change itself somehow to decrease the utility value. After the crossover, some elements could be redundant in the gen (e.g. [1,1,2,3]). The mutation function will remove the redundant elements and fill them with the elements which weren\u2019t used in the gen. Also a two random elements will be selected from the left side and right side of the chromosome and they will be swapped. This method may decrease the utility.", "Now that we have our functions, let\u2019s create our environment and its merciless rules. First we initialize the first generation of the chromosomes which are just some random chromosomes. After that all chromosomes are checked in order to find out whether the solution already exists or not. If it didn\u2019t exist the chromosomes start to create children. Since the population exceeds its limit the utility of each chromosome is calculated. The ones with higher utility (higher conflicts) will be removed from the environment and the ones with a lower utility will be selected. Now the second generation is created. This loop continues creating next generations until it finds the solution.", "As I mentioned, the Backtracking solver could only solve the problem at maximum N=25 which took about 322.89 seconds to find the answer. The GA solver found the solution for N=25 in just 1.83 seconds. The crossover and mutation function that I implemented aren\u2019t the best algorithms and still I got a pretty much quick result. I tested the GA solver from N=4 up to N=66 and the maximum time took for the algorithm to solve the problem was 125.93 seconds for N=66. I have even tried N=80 and get the solution in 122.82 seconds! This is amazing! The algorithm is based on random numbers. It might seem that it would be worse than the backtracking solver but the results are quite fascinating.I pretty much recommend implementing both B-Solver and GA-Solver yourself to see the magic of the Genetic Algorithms. You can find my code at my Github link.", "Hope you find this article helpful!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "B.Sc. of Computer Science at Shiraz University. M.Sc. of Computer Science student at Concordia University."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fcdf38e15d73f&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenetic-algorithm-vs-backtracking-n-queen-problem-cdf38e15d73f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenetic-algorithm-vs-backtracking-n-queen-problem-cdf38e15d73f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenetic-algorithm-vs-backtracking-n-queen-problem-cdf38e15d73f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenetic-algorithm-vs-backtracking-n-queen-problem-cdf38e15d73f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----cdf38e15d73f--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----cdf38e15d73f--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@hirad.babayan?source=post_page-----cdf38e15d73f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@hirad.babayan?source=post_page-----cdf38e15d73f--------------------------------", "anchor_text": "Hirad Babayan"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F55798b0dc61&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenetic-algorithm-vs-backtracking-n-queen-problem-cdf38e15d73f&user=Hirad+Babayan&userId=55798b0dc61&source=post_page-55798b0dc61----cdf38e15d73f---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcdf38e15d73f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenetic-algorithm-vs-backtracking-n-queen-problem-cdf38e15d73f&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcdf38e15d73f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenetic-algorithm-vs-backtracking-n-queen-problem-cdf38e15d73f&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://en.wikipedia.org/wiki/Eight_queens_puzzle", "anchor_text": "n-queen problem"}, {"url": "https://github.com/hiradbaba/GANQ", "anchor_text": "Github link"}, {"url": "https://medium.com/tag/programming?source=post_page-----cdf38e15d73f---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----cdf38e15d73f---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/genetic-algorithm?source=post_page-----cdf38e15d73f---------------genetic_algorithm-----------------", "anchor_text": "Genetic Algorithm"}, {"url": "https://medium.com/tag/algorithms?source=post_page-----cdf38e15d73f---------------algorithms-----------------", "anchor_text": "Algorithms"}, {"url": "https://medium.com/tag/python?source=post_page-----cdf38e15d73f---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fcdf38e15d73f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenetic-algorithm-vs-backtracking-n-queen-problem-cdf38e15d73f&user=Hirad+Babayan&userId=55798b0dc61&source=-----cdf38e15d73f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fcdf38e15d73f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenetic-algorithm-vs-backtracking-n-queen-problem-cdf38e15d73f&user=Hirad+Babayan&userId=55798b0dc61&source=-----cdf38e15d73f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcdf38e15d73f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenetic-algorithm-vs-backtracking-n-queen-problem-cdf38e15d73f&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----cdf38e15d73f--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fcdf38e15d73f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenetic-algorithm-vs-backtracking-n-queen-problem-cdf38e15d73f&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----cdf38e15d73f---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----cdf38e15d73f--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----cdf38e15d73f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----cdf38e15d73f--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----cdf38e15d73f--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----cdf38e15d73f--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----cdf38e15d73f--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----cdf38e15d73f--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----cdf38e15d73f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@hirad.babayan?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@hirad.babayan?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Hirad Babayan"}, {"url": "https://medium.com/@hirad.babayan/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "36 Followers"}, {"url": "http://B.Sc", "anchor_text": "B.Sc"}, {"url": "http://M.Sc", "anchor_text": "M.Sc"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F55798b0dc61&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenetic-algorithm-vs-backtracking-n-queen-problem-cdf38e15d73f&user=Hirad+Babayan&userId=55798b0dc61&source=post_page-55798b0dc61--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F444988010371&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenetic-algorithm-vs-backtracking-n-queen-problem-cdf38e15d73f&newsletterV3=55798b0dc61&newsletterV3Id=444988010371&user=Hirad+Babayan&userId=55798b0dc61&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}