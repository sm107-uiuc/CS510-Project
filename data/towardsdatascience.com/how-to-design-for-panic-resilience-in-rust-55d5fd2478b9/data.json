{"url": "https://towardsdatascience.com/how-to-design-for-panic-resilience-in-rust-55d5fd2478b9", "time": 1683008392.338659, "path": "towardsdatascience.com/how-to-design-for-panic-resilience-in-rust-55d5fd2478b9/", "webpage": {"metadata": {"title": "How to Design For Panic Resilience in Rust | by Luke Wilson | Towards Data Science", "h1": "How to Design For Panic Resilience in Rust", "description": "Rust error handling and how to handle errors properly in the Rust lang. Prevent panics by bubbling errors up to the caller, and more information."}, "outgoing_paragraph_urls": [{"url": "https://doc.rust-lang.org/std/ops/trait.Drop.html", "anchor_text": "the Drop trait", "paragraph_index": 15}, {"url": "https://en.wikipedia.org/wiki/God_object", "anchor_text": "god objects", "paragraph_index": 19}, {"url": "https://doc.rust-lang.org/std/io/struct.Error.html", "anchor_text": "std::io::Error", "paragraph_index": 31}], "all_paragraphs": ["Try to imagine using some software and WHAM, a bunch of text, and visual garbage the brain can\u2019t help but ignore. Or better yet, your user is piloting a commercial airliner when they press two buttons at the same time and the plane turns off. What we need is clear feedback, and to prevent halting execution. In this story, we discuss methods for panic resilience in Rust applications, to make quality software users can rely upon.", "If you consider your software a car driving at about 60 miles per hour, a panic is like hitting a brick wall.", "In 1990, a software update caused all 114 of AT&T\u2019s nationwide Electronic Switching Systems to fail. When a tower failed, it would send a message to its neighboring towers that it was halting traffic. The message received by other towers caused them to enter a similar fail-state, perpetuating the message through the entire AT&T long-distance network.\u00b9", "Poor logic is the cause of most harmful software bugs.\u00b2 Faults may be more discreet in C because ignored errors do not create warnings. Rust could have prevented some nasty software bugs that have happened in the past, but only if software developers make use of the vital error handling logic provided by the Rust language.", "In the C language, number values are the idiomatic method of conveying \u201can error has occurred\u201d. A function call returns an integer representing an error code. If the code is zero, then no error occurred. Otherwise, the code can be compared against values to determine what fault occurred.", "The issue with that method of error handling in C is that it is not an error nor warning to ignore the return value of function calls. Failures may go unheard and unhandled.", "The number one goal of error handling is to prevent crashes.", "Some newer languages designed after C use exceptions for error handling, which is a high-level abstraction to error codes. Calling a function which may fail and cause an exception requires a try and catch block \u2014 to execute code that may cause an exception, and to handle the error signaled by the exception. Exceptions are still not always explicitly handled, and thus some lazy programmers handle exceptions the same way as .unwrap() handles errors in Rust \u2014 print the error and fail.", "In Rust, errors are explicit. Errors in Rust are, by idiom, Result and Option types. Because errors are explicit, programmers get tired of dealing with them and eventually prefer to .unwrap() every one, which does nothing in the name of panic resilience. Unwrap encourages \u201cbest hopes\u201d and blindly dives into whatever data may exist, and if at any case it fails, it\u2019s a hard crash \u2014 a panic.", "The number one goal of error handling is to prevent crashes.", "Let\u2019s look at three crucial sections about handling errors in Rust:", "It is always better to exit with an error code than to panic. In the best situation, no software you write will ever panic. A panic is a controlled crash, and must be avoided to build reliable software.", "A crash is not ever \u201cappropriate\u201d behavior, but it\u2019s better than allowing your system to cause physical damage. If at any time it may be believed that the software could cause something deadly, expensive, or destructive to happen, it\u2019s probably best to shut it down.", "If you consider your software a car driving at about 60 miles per hour, a panic is like hitting a brick wall.", "A panic unwinds the call stack, hopping out of every function call and returning from program execution, destroying objects as it goes. It is not considered a safe nor clean shutdown. Avoid panics.", "The best way to end a program\u2019s execution is to allow it to run until the last closing brace. Somehow, some way, program for that behavior. It allows all objects to safely destroy themselves. See the Drop trait.", "Panic is a last-resort, not a nifty built-in that makes it easy to exit with a message!", "Result, Option, std::io::Result, and other some other types can represent the success of an operation. In idiomatic Rust, if something can fail, it returns a Result which encodes two possible values: either a success value (Ok) or an error value (Err). Result<T, E> where T is the success value type, and E is the error value type.", "We match our Results against the success and error values. If it is a success then we just take our value and progress in our software. But if the value produces an error, we must have an effective backup plan based on these questions:", "If the data is required to proceed, then we need to bubble the error up to the caller.\u00b3 We absolutely cannot panic in any function but main. Otherwise, you\u2019ve got self-entitled functions running around believing they\u2019re god objects. Proper error handling does all it can, and when in doubt, lets the caller handle the issue.", "The following example applies the first question: Can we try again?", "This code attempts to find a config file at \u201cconfig.toml\u201d. If it fails, it attempts to find the same configuration file in a specific subfolder. Only once the second attempt fails does it bubble the error up to the caller. The caller is main, and it is willing to reattempt a failure the first time after a 5 second pause. Notice how even main is not going to panic because while this is a fatal error, it is possible to resume the normal exiting process. It is always better to exit with an error code than to panic.", "But same with panics, std::process:exit can prevent the destruction of objects, so only use it while nothing requiring the Drop trait is still owned. So panic is a last-resort, not a nifty built-in that makes it easy to exit with a message!", "This last example applies the second question: Is the data absolutely mandatory to proceed?", "In the above example, main is only requesting a username. get_username returns String which means there is zero capacity for it to fail. It attempts to read a username from the config file using read_username_from_config, but if one cannot be retrieved, it uses the default string \u201cunnamed\u201d.", "It is important to weigh the value of data you can fail to get. Consider whether it\u2019s possible to return to the input loop, or resume with a warning. Stay concerned about the usability of your software and how well it can overcome lack of data.\u2074", "Enums are the way to go when representing error values as codes.", "In the above example, we use a custom enum as the error return type. This makes it easy to see what we produced the error for, but a divide by zero is the only reason we would need to report an error in this situation. So, the better type to use is likely an Option<i32>.", "Creating custom error types is valuable. When you use a bare enum as an error type, the data footprint can be tiny. This matters because regardless of using the success or error value of a Result<i32, String>, for example, it consumes as much memory as its largest member. In this case, a String, which is 16 bytes larger than an i32 on the stack. On the contrary, the SafeDivideError enum consumes \u201czero\u201d bytes of memory.", "And when two or more values are used, it becomes the size of a u8 and can represent as much as 256 different error values, before gaining another byte. Enums are the way to go when representing error values as codes.", "It is important to make use of documentation comments to explain why a function may return an error, and especially what different error values mean. If a function returns Result<i32, String> , then someone using your library would definitely want to know what different Strings can be returned by a failure of the function.", "The older rules still apply to creating a library: never panic and allow the caller of the function to handle errors only when you cannot \u2014 bubble errors when necessary. Designing a good error resilient library requires putting emphasis on robust error types and their documentation. Take some genius from std::io::Error.", "Rust empowers anyone to build highly robust, reliable, and efficient software. So don\u2019t panic! Use the correct methods for writing reliable software with Rust.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Licensed Emergency Medical Technician. Writes about productivity, emergency healthcare, and programming."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F55d5fd2478b9&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-design-for-panic-resilience-in-rust-55d5fd2478b9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-design-for-panic-resilience-in-rust-55d5fd2478b9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-design-for-panic-resilience-in-rust-55d5fd2478b9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-design-for-panic-resilience-in-rust-55d5fd2478b9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----55d5fd2478b9--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----55d5fd2478b9--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@thelukaswils?source=post_page-----55d5fd2478b9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@thelukaswils?source=post_page-----55d5fd2478b9--------------------------------", "anchor_text": "Luke Wilson"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9aed7b622a52&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-design-for-panic-resilience-in-rust-55d5fd2478b9&user=Luke+Wilson&userId=9aed7b622a52&source=post_page-9aed7b622a52----55d5fd2478b9---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F55d5fd2478b9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-design-for-panic-resilience-in-rust-55d5fd2478b9&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F55d5fd2478b9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-design-for-panic-resilience-in-rust-55d5fd2478b9&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@dallimonti", "anchor_text": "Andr\u00e9s Dallimonti"}, {"url": "https://doc.rust-lang.org/std/ops/trait.Drop.html", "anchor_text": "the Drop trait"}, {"url": "https://en.wikipedia.org/wiki/God_object", "anchor_text": "god objects"}, {"url": "https://doc.rust-lang.org/std/io/struct.Error.html", "anchor_text": "std::io::Error"}, {"url": "http://www.phworld.org/history/attcrash.htm", "anchor_text": "http://www.phworld.org/history/attcrash.htm"}, {"url": "https://en.wikipedia.org/wiki/List_of_software_bugs", "anchor_text": "https://en.wikipedia.org/wiki/List_of_software_bugs"}, {"url": "https://en.wikibooks.org/wiki/JavaScript/Automatic_semicolon_insertion", "anchor_text": "silent data manipulation."}, {"url": "https://medium.com/tag/software-development?source=post_page-----55d5fd2478b9---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/software-engineering?source=post_page-----55d5fd2478b9---------------software_engineering-----------------", "anchor_text": "Software Engineering"}, {"url": "https://medium.com/tag/programming?source=post_page-----55d5fd2478b9---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/rust?source=post_page-----55d5fd2478b9---------------rust-----------------", "anchor_text": "Rust"}, {"url": "https://medium.com/tag/error-handling?source=post_page-----55d5fd2478b9---------------error_handling-----------------", "anchor_text": "Error Handling"}, {"url": "http://creativecommons.org/licenses/by/4.0/", "anchor_text": "Some rights reserved"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F55d5fd2478b9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-design-for-panic-resilience-in-rust-55d5fd2478b9&user=Luke+Wilson&userId=9aed7b622a52&source=-----55d5fd2478b9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F55d5fd2478b9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-design-for-panic-resilience-in-rust-55d5fd2478b9&user=Luke+Wilson&userId=9aed7b622a52&source=-----55d5fd2478b9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F55d5fd2478b9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-design-for-panic-resilience-in-rust-55d5fd2478b9&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----55d5fd2478b9--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F55d5fd2478b9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-design-for-panic-resilience-in-rust-55d5fd2478b9&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----55d5fd2478b9---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----55d5fd2478b9--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----55d5fd2478b9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----55d5fd2478b9--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----55d5fd2478b9--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----55d5fd2478b9--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----55d5fd2478b9--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----55d5fd2478b9--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----55d5fd2478b9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@thelukaswils?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@thelukaswils?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Luke Wilson"}, {"url": "https://medium.com/@thelukaswils/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "546 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9aed7b622a52&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-design-for-panic-resilience-in-rust-55d5fd2478b9&user=Luke+Wilson&userId=9aed7b622a52&source=post_page-9aed7b622a52--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fd11e9d30602&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-design-for-panic-resilience-in-rust-55d5fd2478b9&newsletterV3=9aed7b622a52&newsletterV3Id=d11e9d30602&user=Luke+Wilson&userId=9aed7b622a52&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}