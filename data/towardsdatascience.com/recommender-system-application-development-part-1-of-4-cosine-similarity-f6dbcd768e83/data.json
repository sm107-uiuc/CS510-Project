{"url": "https://towardsdatascience.com/recommender-system-application-development-part-1-of-4-cosine-similarity-f6dbcd768e83", "time": 1683001834.23864, "path": "towardsdatascience.com/recommender-system-application-development-part-1-of-4-cosine-similarity-f6dbcd768e83/", "webpage": {"metadata": {"title": "Recommender System Application development | by Emre Havan | Towards Data Science", "h1": "Recommender System Application development", "description": "In this article we will be developing a Recommender System (RS) using Cosine Similarity (CS) along with other custom formulas with Python programming language. This application will be the part of\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/emrepun/RecommenderEngine/blob/master/data_sets/city_data.csv", "anchor_text": "here", "paragraph_index": 5}, {"url": "https://en.wikipedia.org/wiki/Pearson_correlation_coefficient", "anchor_text": "Pearson correleation", "paragraph_index": 19}, {"url": "https://github.com/emrepun/RecommenderEngine/tree/master/version_1", "anchor_text": "here", "paragraph_index": 33}, {"url": "https://github.com/emrepun/RecommenderEngine/tree/master/version_2", "anchor_text": "here", "paragraph_index": 61}, {"url": "https://github.com/emrepun/RecommenderEngine/tree/master/version_3", "anchor_text": "here", "paragraph_index": 85}, {"url": "https://github.com/emrepun/RecommenderEngine/tree/master/final_version", "anchor_text": "here", "paragraph_index": 106}, {"url": "https://github.com/emrepun", "anchor_text": "https://github.com/emrepun", "paragraph_index": 110}], "all_paragraphs": ["In this article we will be developing a Recommender System (RS) using Cosine Similarity (CS) along with other custom formulas with Python programming language. This application will be the part of the project I worked on during my MSc thesis.", "There are many ways of building a RS. Here we will develop methods to particularly tackle Cold Start problem for RSs. Cold Start problem is the difficulty of making recommendations for a user without having a lot of information about them (a newly registered user). In this project, we will investigate the ways of making recommendations with only a few information about the user (allowing them to select a category they are interested in).", "I will assume you know Python throughout the development process of these articles. I will not be focusing nor describing the Python code in detail as the main purpose of these articles to teach about using CS and other techniques to build a RS. It is also worth mentioning that there might be some code that I will write which could have been better as I am not a Python guru. If you realize such parts, please do let me know in comments so I can refactor it later :)", "We will develop 4 different versions to investigate a different approach to improve our system with each one of them. Firstly we will start with a recommender system with Cosine Similarity.", "The RS we are going to built, is going to recommend 5 different cities for travelling with respect to selected category. Of course these techniques and methods can later be applied for applications with different contexts.", "Please download the dataset that our RS will be based on here.", "Some of the features (columns) of this dataset are genuine information that I previously acquired from TripAdvisor website, while some of them are just random features that I have added to implement and display different techniques later on. Our dataset consists of 25 cities with the following features: city, popularity, description, image, rating, rating_count, positive_review, negative_review. You can see the preview of the dataset for the first 5 cities below.", "Features that I have acquired from TripAdvisor are: city, popularity, description and image. The features other than these are crafted randomly by me. We wont be using those features for the first version of the RS but they will be used for different techniques on other parts of these series.", "Lets review what each feature stands for:", "Now that we have downloaded our dataset and learnt about the features, we can get started with the development. As mentioned earlier, we will use only the city and description features for the first version.", "The first version of the RS will be giving recommendations based on the description feature of the cities in our dataset. RS will calculate the similarity between the description of the cities and the keywords related to a trip category that a user may select, with Cosine Similarity and then return the top 5 cities with highest similarity score.", "Cosine similarity is the measure of similarity between two vectors, by computing the cosine of the angle between two vectors projected into multidimensional space. It can be applied to items available on a dataset to compute similarity to one another via keywords or other metrics. Similarity between two vectors (A and B) is calculated by taking the dot product of the two vectors and dividing it by the magnitude value as shown in the equation below. We can simply say that the CS score of two vectors increases as the angle between them decreases.", "First of all we need to do some preprocessing to our dataset to make it ready for using in our CS calculation methods. Lets create a python file named pre_processing.py in a folder including the dataset.", "We are only going to clear description feature of our dataset. We need to remove stop words from the descriptions. Stop words are the words without any contextual meaning, such as; the, for, an, a, or, what and etc. The motivation behind removing these words is to make sure the similarity score later will not be decreased due to non-contextual words. It would affect the score negatively since each word creates a different dimension in the space and the corresponding value for these dimensions would always be zero since none of our keywords will include non-contextual words.", "We will be cleaning city descriptions with clear(city) method above. It works as following:", "Now lets apply this method to every entry in our dataset as following:", "This code block will clear all the descriptions for all the cities on our dataset and then saves the updated one as city_data_cleared.csv file. From now on we will be using this cleared data set.", "Now that we have cleared city descriptions, we can start implementing the class which will be responsible for calculating the similarity score. Lets\u2019s create a python file named cosine_similarity.py.", "As I have mentioned earlier, the method will compute the similarity of two strings depending on the words they have. First, both these Strings will be converted to vectors, and then each word in a vector will create a dimension on the word space. If any word that exists in one does not exist on the other, the value for the corresponding dimension for the other vector will be zero.", "Not: Cosine similarity is scale invariant, meaning; it is not that much affected by the amount of how many times a word exists in a given string. We are using cosine similarity regardless, since we only care if a word exists on both strings, we do not care how many times a word occurs. But if you would be interested for such count difference and would like your recommender to take that into account (which means the score will be greatly affected by word occurrence) then I would suggest you to check out Pearson correleation.", "Even though there is only going to be one method for computation, let us create it under a class to improve usability for later.", "Next, we will write the engine that will be responsible for making recommendations.", "The engine class is going to be small since, in the version-1 we will only make recommendations by comparing keywords and city descriptions, but we will have it as a separate class regardless, since we will be iterating over it and develop during other versions in the next parts of these series.", "Now we will test our engine (and CS computing function along with it). Lets create a request.py python file.", "We will be testing our recommender engine under three different categories:", "I have investigated the descriptions of all the cities in our dataset and determined the keywords for each category manually as following:", "Let\u2019s add the following code which will send a request to get top 5 similar cities for the given keyword, along with predefined keywords:", "Then lets write a helper method to get city names and score from a JSON as following:", "Now we will make 3 requests to the recommender for the 3 categories and then print top 5 cities along with their similarity score for each category:", "We will get recommendations for all 3 categories when we run the code, but lets investigate the results we get only for Culture, Art and History category:", "As shown above, the similarity score is 21.6% for Athens while it is 12.17% for Rome. Scores might have been resulted less than you would expect. The scores are lower because, each city description naturally has more words than the keywords we have provided for comparison. Different words create different dimensions on the space and since our keywords do not have these words, the corresponding value for these dimensions will be zero which results in a lower similarity score. If you add/subtract words from the keywords, you will see the results will change as well.", "In this version, we have developed a recommender application that makes city recommendation for traveling for three different categories, by computing the cosine similarity of city descriptions with the given category\u2019s keywords.", "Even if the similarity scores are low, when you investigate the returned top 5 cities for each category; you can see that our recommender system, recommends meaningful and appropriate cities. You might as well read the city descriptions to verify :)", "We have came to the end of our first version. You can access all the code written for the first version from here.", "In the next version below, we will implement a different method to calculate a score both including cosine similarity and Rating information of the cities.", "In this version we will make use of rating feature of our dataset and improve our recommender application to be more dynamic and make better recommendations. We wouldn\u2019t like to build a system which recommends content with low rating right? At least not in most cases :)", "At first, we will omit the rating quantity. We will still calculate the cosine similarity but now on top of it we will have rating contribution to the final score. We will create a new method which will determine the contribution of rating to the final score. We will have two parameters, Q and r. Where r will represent the rating and Q will represent the importance (weight of rating for final score computation). By playing with the Q parameter, we will be able to increase or decrease the affect of rating value for the final score generation.", "New function will either increase or decrease the output of cosine similarity depending on, if the rating is greater or less than 5 proportionally to the given Q parameter (assuming cities with average rating less than 5 is disliked and should be discouraged and greater than 5 is liked and should be encouraged for recommendation. As mentioned in the previous chapter, the rating range is between 0\u201310 and rating contribution output range is between -Q and +Q.", "For example: If Q is given as 10, the maximum rating value can produce the final recommendation score by adding 10% of CS score to CS score and for the minimum rating, the final score would be produced by subtracting 10% of CS score from the CS score.", "The formula we will use in the method will find out the exact output for a given rating (finding the exact point on blue line). Visual representation of this rating contribution generator method, for Q = 10 is shown in the figure below:", "Lets create a new file called rating_extractor.py and add the following code", "get_rating_weight() method does some calculations to determine the contribution output for the given rating and Q parameters and then returns the value. As mentioned earlier and also shown in the figure above, this method can produce both negative and positive values. Meaning; this method will either contribute negatively or positively to the final score calculation. (Please note that the default value of Q parameter is set to 10).", "Now we will add a new method to RecommenderEngine class to calculate a final score using both the cosine similarity score and rating contribution. Add the method below in RecommenderEngine class. (I\u2019ve added right after init).", "As amount can be either positive or negative, final score is either going to be increased or decreased depending on the contribution value.", "It is worth mentioning that, this method is highly biased on CS score though. As it operates as taking r percentage of CS and adding it back to original CS value. Cities with higher CS value will be greatly affected by this new final score computation, especially if higher values of Q is given for get_rating_weight() method.", "Now let\u2019s add another method to RecommenderEngine to use this new method for score calculation (we will keep the old recommendation method).", "get_recommendations_include_rating(keywords) method will be working similarly to get_recommendations(keywords) method implemented on the first chapter. But now it will calculate the final score with both CS score and rating contribution value, lets examine how the method works:", "Now that we have our method, we can make requests to get recommendations. First lets open request.py file and add a method to retrieve recommendations from RecommenderEngine class:", "Now let\u2019s add new requests to get recommendations for 3 categories with the new method.", "The code above will fetch recommendations with their final score, you can run it and see the results you get.", "We will only investigate the results for Culture, art and history in this article for two different perspective. First we will compare the results we get with the only CS score method which was implemented in the first version and the results we get with the new method we just implemented.", "The following code is for experimental purposes so they are not included again in request.py, as both these requests already exist.", "Here we observe the output of two different methods:", "Here we have different scores for two methods and you can see that when rating is taken into account, Stockholm rises to second place while St. Petersburg falls to third. Lets see why:", "As you can see in our dataset, Stockholm has a rating of 7 while St. Petersburg has 1. Then our algorithm lowers the final scores for St. Petersburg and increases it for Stockholm as mentioned earlier, which results in Stockholm rising to second place. Here we can see that with the implemented methods and formulas, our recommender system encourages content with good ratings while discouraging the ones with bad ratings. You can also observe the dataset for other cities rankings to see why their final score is increased in comparison to only cosine similarity score.", "Now we will compare our new method with different Q parameters. Lower Q means less rating contribution to final score and higher Q means higher contribution. As we printed out earlier, the following is the recommendations we get for Culture, Art and History category with Q = 10:", "You can go to recommender_engine.py and, replace 10 with 100 to increase Q parameter in get_recommendations_include_rating method:", "Now lets see how the results change:", "We can observe that our results are very different now.", "I recommend you to check results for other categories and how they change with different Q values as well.", "In Version-2 we have implemented a method to recommend cities by calculating a final score from Cosine Similarity score based on description feature and rating contribution score based on rating feature. It is important to make use of information such as rating, since in recommender systems we often want to recommend good content to the users.", "You can access all the code written for second version here.", "In the next version below, we will implement another method to improve our recommender application by using rating count feature in the dataset.", "Just because a content has good rating, does not mean that the rating is reliable. Imagine we have two contents A and B, A has average rating of 4.7 from 500.000 users and B has rating of 5 from only 10 users. Which one would you like to recommend to a friend of yours? How reliable do you think B can be with only 10 users provided rating? With the help of rating_count feature, we will come up with a threshold parameter so our recommender system will be able to cope with content (cities in our case) with low rating count as not putting much importance on rating contribution.", "In this version, we will develop a couple of new methods to improve our recommender system so that it will have a threshold value for rating contribution calculation. Now I will introduce you a formula that I came up with during my thesis:", "This formula results in M which is the multiplier value which will be multiplied with the rating contribution value we get, before using it for final recommendation score calculation. Here T represents the threshold value and c represents the rating count. This formula constructed in a way that it has the following properties:", "There is nothing special with number e for this formula though, it could be any number (then 0,68 had to change as well). I just used e to make it look cool :P", "So the main importance of the method is that, it yields 0.50 when T = c. This is how the thresholding is going to work. We will set a threshold value T for rating count so that if rating count is less than threshold, the output will be in the range of 0.0\u20130.50 (depending how low.) and if rating count is greater than threshold, the output will be between 0.50 and 1.0 but can never exceed 1.0.", "As mentioned this multiplier will be applied to the rating contribution value only so we will not care much about the rating where there aren\u2019t significant amount of ratings provided and the output will lower the rating contribution. Thus, the recommendation will mainly fall into CS score. But if a place has more ratings, then the rating contribution value will be high as well and overall final recommendation score will be higher.", "Now let\u2019s go to rating_extractor.py file and create a new method. We will just multiply the rating contribution value with the multiplier, but let\u2019s create a new method so you can still have other approach and use it as it is.", "First we need to import e from math:", "Then in RatingExtractor class, add the new method:", "Let\u2019s open recommender_engine.py and add a new method to RecommenderEngine class (we will keep the methods we have implemented in previous versions) It is actually almost exactly the same as the method we added to RecommenderEngine in previous chapter, but this time we will pass rating count and a threshold value along with city description and rating features:", "The method works as the following:", "We will add new requests to the request.py file to get recommendations for 3 categories with the new method", "First lets add a method to retrieve recommendations with new implementation from RecommenderEngine class:", "Now let\u2019s add new requests to get recommendations for 3 categories with the new method.", "The code above will fetch recommendations with their final score, you can run it and see the results you get for all the categories. But we will only investigate the results for Culture, Art and History category.", "Lets make experimental requests with different threshold (T) values for Culture, Art and History category. You can change threshold in get_recommendations_include_rating_count_threshold method of RecommenderEngine class. Also this time lets change Q parameter (rating contribution importance parameter introduced in the previous chapter) to 100 so we can see the threshold effect better.", "As you can see for the threshold 100K and 1M; the 5th place is different, when the threshold value is lower, we have Venice in the 5th place and we have Barcelona when the value is higher. Lets see why:", "They both have rating of 8 but Barcelona has 1.200.000 ratings while Venice has 845.000, and also Venice has more CS score than Barcelona. So when threshold is 100.000, both cities can provide good amount of rating contribution and since Venice has higher CS score, we see it in the 5th place.", "As Barcelona has higher output now and since Q is also high, the final score calculation for Barcelona will be greater than Venice and thus Barcelona is on the 5th place.", "When the threshold value is 2.500.000, you can see that we have St. Petersburg on 3rd place, whilst we didn\u2019t even have it on fourth or fifth place when threshold value was lower. I will leave the investigation of that to you. Check the dataset for St. Petersburg, go through how our implementations work and see if you can understand why we have St. Petersburg for higher thresholds. Let me know if you have any questions on the comments :)", "I furthermore encourage you to play around with all these parameters, check features for the dataset (it should be fine as we have only 25 cities) and try to understand how these methods can be effective for recommender systems.", "In Version-3 we have implemented a method to recommend cities by first calculating the Cosine Similarity score, calculating a rating weight output by using both rating and rating count features and then calculating a final score with both results. It is important to use reliable information so with these implementations we have seen how we can improve our recommender system such that it could rely more on the content with higher (highness depends on the context of the application) feedback.", "You can access all the code written for third version here.", "In the next version below, we will improve our recommender system even further by investigating how to make use of feedback in different forms.", "In this version we will improve our system further as the fourth version by using positive_review and negative_review features of our dataset.", "This chapter is going to focus on the theory and the experimental results (not executed hands on here but rather on a results table) of the approach more than previous chapters, so if you are just interested with the code implementation, you can directly go to Implementation section.", "Sometimes, we might have different types of feedback available for our content. Such as reviews and ratings. As you can guess, they are not exactly the same kind of feedback, rating feedback is provided on a given scale (0\u201310 for our case) and review is usually given in the text format. Lets say we have classified the reviews as positive and negative feedback (maybe we can investigate review classification on another article) then the review feedback could be analyzed as binary feedback (0 or 1); meaning, negative or positive review.", "We already have two features positive_review and negative_review available in our dataset. These features represent the count of positive and negative reviews a city received.", "One of the challenges of recommender systems is incorporating feedback in different forms. There could be many different ways of doing it, in this chapter we will try to make use of both feedback forms by converting reviews into rating form with a custom approach.", "A basic approach of doing so would be to select two rating values for both negative and positive feedback, and then consider each review feedback as a rating and recalculate the average rating of an item. But this approach would not be ideal. For example, if the ratings are selected as 0 and 10 for negative and positive reviews, then the effect of reviews would be more than actual rating data especially when the rating of an item is either closer to 0 or 10. It could be possible to select different rating values to alleviate the review effect on the rating. For example, if the ratings are selected as 2.5 and 7.5, then another problem would occur where a positive feedback for an item with average rating greater than 7.5 would still contribute as lowering the rating, whereas a negative feedback for an item with average rating less than 2.5 would contribute as increasing the rating. Hence, another approach is needed in order to incorporate both forms better.", "Our approach will be behaving like the following for both positive and negative reviews accordingly:", "Formulas for converting both positive and negative reviews to rating values, Rp and Rn respectively for a given item with average rating of r are given below:", "For instance, for an item with average rating of 6 (range 0\u201310), for every negative review, a new rating with value of 3 is added to ratings, whereas for every positive review, a new rating with value of 8 is added to ratings. Then the average rating is calculated again with new ratings before fed into the scoring function. Review feedback conversion into rating feedback results are shown in the table below for different ratings, rating counts and review counts.", "Final rating results suggest that with the current implementation, when rating value gets closer to either maximum or minimum value, calculated rating tends to favour the opposite rating value. For example, for the case where rating is 7,2 and positive and negative review counts are equal, the result is 6,65 as it goes closer to minimum rating from the original value. This is because, the distance between 0 and 7,2, is greater than the distance between 7,2 and 10, similar behaviour is also observed when the original rating is 2,8 with equal positive and negative rating values as well. Moreover, the effect of the reviews is minimal since the test cases included more rating values than review which is often case for the commercial recommender systems. The effect could have been increased by introducing an additional parameter to change the importance of reviews to make this approach more efficient (For example for every review, we could generate 10 rating values with the calculated value).", "Now we have investigated the way it works and results it can generate, lets go ahead and implement a new method in RatingExtractor class:", "Let\u2019s open recommender_engine.py and add a new method to RecommenderEngine class. It is going to be similar to methods we have implemented in previous chapters, but this time we will pass positive review and negative review counts along with description, rating, rating count, threshold values:", "We will add new requests to the request.py file to get recommendations for 3 categories with the new method", "First lets add a method to retrieve recommendations with new implementation from RecommenderEngine class:", "Now let\u2019s add new requests to get recommendations for 3 categories with the new method.", "The code above will fetch recommendations with their final score, you can run it and see the results you get for all the categories. I will omit the results investigation for this final chapter, as the impact of these implementations were discussed in the beginning of the post. I will just leave you the results for Culture, Art and History:", "But I highly recommend you to investigate the results for all categories, go to chapter 3 and compare results here, what is different and why? Check the dataset to find answers, let me know if you have any questions :)", "In this version we have implemented an approach to incorporate feedback with different forms for Recommender Systems. Our approach was to convert review feedback to rating feedback with some custom technique.", "With this chapter, we have came to the end of Recommender System implementation. Overall, we have implemented a system to make recommendations where we know almost nothing about the users and only let them select a category (cold start problem) with an iterative approach as building on top of what we have with each chapter. I hope you have enjoyed this article, please let me know if you have any questions. Also as all these implementations were my own ideas (custom functions, formulas and techniques) they are of course not perfect and there were some trade-offs as we have seen them. So I would be happy if you can let me know how it could be improved on comments :)", "You can download the final version of the project here.", "You might be wondering why some features are not used in the dataset. As I mentioned earlier, these implementations come from my MSc project and I\u2019ve used some of the features there when I developed a UI for mobile devices via Flutter. You can see the screenshots of the application below:", "Please let me know if you would be interested building a UI for the Recommender System implemented here via Flutter. Maybe I can make posts for building an app as well :)", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "iOS Software Engineer \u2014 Interested in Compilers, ML and recommender systems \u2014 https://github.com/emrepun"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Ff6dbcd768e83&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecommender-system-application-development-part-1-of-4-cosine-similarity-f6dbcd768e83&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecommender-system-application-development-part-1-of-4-cosine-similarity-f6dbcd768e83&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecommender-system-application-development-part-1-of-4-cosine-similarity-f6dbcd768e83&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecommender-system-application-development-part-1-of-4-cosine-similarity-f6dbcd768e83&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----f6dbcd768e83--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----f6dbcd768e83--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://emrehavan.medium.com/?source=post_page-----f6dbcd768e83--------------------------------", "anchor_text": ""}, {"url": "https://emrehavan.medium.com/?source=post_page-----f6dbcd768e83--------------------------------", "anchor_text": "Emre Havan"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff1991f635894&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecommender-system-application-development-part-1-of-4-cosine-similarity-f6dbcd768e83&user=Emre+Havan&userId=f1991f635894&source=post_page-f1991f635894----f6dbcd768e83---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff6dbcd768e83&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecommender-system-application-development-part-1-of-4-cosine-similarity-f6dbcd768e83&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff6dbcd768e83&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecommender-system-application-development-part-1-of-4-cosine-similarity-f6dbcd768e83&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/emrepun/RecommenderEngine/blob/master/data_sets/city_data.csv", "anchor_text": "here"}, {"url": "https://en.wikipedia.org/wiki/Pearson_correlation_coefficient", "anchor_text": "Pearson correleation"}, {"url": "http://twitter.com/staticmethod", "anchor_text": "@staticmethod"}, {"url": "https://github.com/emrepun/RecommenderEngine/tree/master/version_1", "anchor_text": "here"}, {"url": "http://twitter.com/staticmethod", "anchor_text": "@staticmethod"}, {"url": "https://github.com/emrepun/RecommenderEngine/tree/master/version_2", "anchor_text": "here"}, {"url": "http://twitter.com/staticmethod", "anchor_text": "@staticmethod"}, {"url": "https://github.com/emrepun/RecommenderEngine/tree/master/version_3", "anchor_text": "here"}, {"url": "http://twitter.com/staticmethod", "anchor_text": "@staticmethod"}, {"url": "https://github.com/emrepun/RecommenderEngine/tree/master/final_version", "anchor_text": "here"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----f6dbcd768e83---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/cosine-similarity?source=post_page-----f6dbcd768e83---------------cosine_similarity-----------------", "anchor_text": "Cosine Similarity"}, {"url": "https://medium.com/tag/recommender-systems?source=post_page-----f6dbcd768e83---------------recommender_systems-----------------", "anchor_text": "Recommender Systems"}, {"url": "https://medium.com/tag/recommendation-system?source=post_page-----f6dbcd768e83---------------recommendation_system-----------------", "anchor_text": "Recommendation System"}, {"url": "https://medium.com/tag/python?source=post_page-----f6dbcd768e83---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff6dbcd768e83&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecommender-system-application-development-part-1-of-4-cosine-similarity-f6dbcd768e83&user=Emre+Havan&userId=f1991f635894&source=-----f6dbcd768e83---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff6dbcd768e83&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecommender-system-application-development-part-1-of-4-cosine-similarity-f6dbcd768e83&user=Emre+Havan&userId=f1991f635894&source=-----f6dbcd768e83---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff6dbcd768e83&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecommender-system-application-development-part-1-of-4-cosine-similarity-f6dbcd768e83&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----f6dbcd768e83--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Ff6dbcd768e83&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecommender-system-application-development-part-1-of-4-cosine-similarity-f6dbcd768e83&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----f6dbcd768e83---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----f6dbcd768e83--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----f6dbcd768e83--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----f6dbcd768e83--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----f6dbcd768e83--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----f6dbcd768e83--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----f6dbcd768e83--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----f6dbcd768e83--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----f6dbcd768e83--------------------------------", "anchor_text": ""}, {"url": "https://emrehavan.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://emrehavan.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Emre Havan"}, {"url": "https://emrehavan.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "118 Followers"}, {"url": "https://github.com/emrepun", "anchor_text": "https://github.com/emrepun"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff1991f635894&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecommender-system-application-development-part-1-of-4-cosine-similarity-f6dbcd768e83&user=Emre+Havan&userId=f1991f635894&source=post_page-f1991f635894--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fc519ffe5aa0e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecommender-system-application-development-part-1-of-4-cosine-similarity-f6dbcd768e83&newsletterV3=f1991f635894&newsletterV3Id=c519ffe5aa0e&user=Emre+Havan&userId=f1991f635894&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}