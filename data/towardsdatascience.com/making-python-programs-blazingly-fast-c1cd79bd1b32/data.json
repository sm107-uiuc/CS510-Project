{"url": "https://towardsdatascience.com/making-python-programs-blazingly-fast-c1cd79bd1b32", "time": 1683002472.911464, "path": "towardsdatascience.com/making-python-programs-blazingly-fast-c1cd79bd1b32/", "webpage": {"metadata": {"title": "Making Python Programs Blazingly Fast | by Martin Heinz | Towards Data Science", "h1": "Making Python Programs Blazingly Fast", "description": "Python haters always say, that one of reasons they don\u2019t want to use it, is that it\u2019s slow. Well, whether specific program \u2014 regardless of programming language used \u2014 is fast or slow is very much\u2026 So, let's prove some people wrong and let's see how we can improve performance of our Python programs and make them really fast!"}, "outgoing_paragraph_urls": [{"url": "https://martinheinz.dev/blog/4", "anchor_text": "here", "paragraph_index": 14}, {"url": "https://martinheinz.dev/blog/4", "anchor_text": "here", "paragraph_index": 15}, {"url": "https://twitter.com/raymondh/status/1205969258800275456", "anchor_text": "tweet from Raymond Hettinger", "paragraph_index": 20}, {"url": "https://www.youtube.com/watch?v=OSGv2VnC0go&t=8m17s", "anchor_text": "Raymond Hettingers talk", "paragraph_index": 22}, {"url": "https://martinheinz.dev/blog/13", "anchor_text": "martinheinz.dev", "paragraph_index": 24}, {"url": "https://martinheinz.dev/", "anchor_text": "https://martinheinz.dev/", "paragraph_index": 26}, {"url": "https://ko-fi.com/martinheinz", "anchor_text": "https://ko-fi.com/martinheinz", "paragraph_index": 26}], "all_paragraphs": ["Python haters always say, that one of the reasons they don\u2019t want to use it, is that it\u2019s slow. Well, whether specific program \u2014 regardless of the programming language used \u2014 is fast or slow is very much dependent on the developer who wrote it and their skill and ability to write optimized and fast programs.", "So, let\u2019s prove some people wrong and let\u2019s see how we can improve performance of our Python programs and make them really fast!", "Before we start optimizing anything, we first need to find out which parts of our code actually slow down the whole program. Sometimes the bottleneck of the program might be obvious, but in case you don\u2019t know where it is, then here are options you have for finding out:", "Note: This is the program I will be using for demonstration purposes, it computes e to power of X (taken from Python docs):", "First off, the simplest and honestly very lazy solution \u2014 Unix time command:", "This could work if you just want to time your whole program, which is usually not enough\u2026", "On the other end of the spectrum is cProfile, which will give you too much information:", "Here, we ran the testing script with cProfile module and time argument, so that lines are ordered by internal time ( cumtime). This gives us a lot of information, the lines you can see above are about 10% of the actual output. From this, we can see that exp function is the culprit ( surprise, surprise) and now we can get little more specific with timing and profiling...", "Now that we know where to direct our attention, we might want to time the slow function, without measuring the rest of the code. For that we can use simple decorator:", "This decorator can be then applied to function under test like so:", "This gives us output like this:", "One thing to consider is what kind of time we actually (want to) measure. Time package provides time.perf_counter and time.process_time. The difference here is that perf_counter returns absolute value, which includes time when your Python program process is not running, therefore it might be impacted by machine load. On the other hand process_time returns only user time (excluding system time), which is only the time of your process.", "Now, for the fun part. Let\u2019s make your Python programs run faster. I\u2019m (mostly) not going to show you some hacks, tricks and code snippets that will magically solve your performance issues. This is more about general ideas and strategies, which when used, can make a huge impact on performance, in some cases up to 30% speed-up.", "This one is pretty obvious. Built-in data types are very fast, especially in comparison to our custom types like trees or linked lists. That\u2019s mainly because the built-ins are implemented in C, which we can\u2019t really match in speed when coding in Python.", "I have already shown this one in a previous blog post here, but I think it\u2019s worth repeating it with simple example:", "The function above simulates heavy computation using time.sleep. When called first time with parameter 1, it waits for 2 seconds and only then returns the result. When called again, the result is already cached so it skips the body of the function and returns the result immediately. For more real life example see previous blog posts here.", "This has to do with the speed of lookup of variables in each scope. I\u2019m writing each scope, because it\u2019s not just about using local vs. global variables. There\u2019s actually a difference in speed of lookup even between \u2014 let\u2019s say \u2014 local variable in function (fastest), class-level attribute (e.g. self.name - slower) and global for example imported function like time.time (slowest).", "You can improve performance, by using seemingly unnecessary (straight-up useless) assignments like this:", "This might seem counter-intuitive, as calling function will put more stuff onto the stack and create overhead from function returns, but it relates to the previous point. If you just put your whole code into one file without putting it into function, it will be much slower because of global variables. Therefore you can speed up your code just by wrapping whole code in main function and calling it once, like so:", "Another thing that might slow down your programs is dot operator (.) which is used when accessing object attributes. This operator triggers dictionary lookup using __getattribute__, which creates extra overhead in your code. So, how can we actually avoid (limit) using it?", "Operations on strings can get quite slow when ran in loop using for example modulus (%s) or .format(). What better options do we have? Based on recent tweet from Raymond Hettinger, the only thing we should be using is f-string, it's most readable, concise AND the fastest method. So, based on that tweet, this is the list of methods you can use - fastest to slowest:", "Generators are not inherently faster as they were made to allow for lazy computation, which saves memory rather than time. However, the saved memory can be cause for your program to actually run faster. How? Well, if you have a large dataset and you don\u2019t use generators (iterators), then the data might overflow CPUs L1 cache, which will slow down lookup of values in memory significantly.", "When it comes to performance, it\u2019s very import that CPU can save all the data it\u2019s working on, as close as possible, which is in the cache. You can watch Raymond Hettingers talk, where he mentions these issues.", "The first rule of optimization is to not do it. But, if you really have to, then I hope these few tips help you with that. However, be mindful when optimizing your code as it might end up making your code hard to read and therefore hard to maintain, which might outweigh benefits of optimization.", "Note: This was originally posted at martinheinz.dev", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "CKA | RHCE | DevOps Engineer at IBM | Working with Python, Kubernetes, Linux and more | https://martinheinz.dev/ | https://ko-fi.com/martinheinz"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fc1cd79bd1b32&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaking-python-programs-blazingly-fast-c1cd79bd1b32&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaking-python-programs-blazingly-fast-c1cd79bd1b32&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaking-python-programs-blazingly-fast-c1cd79bd1b32&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaking-python-programs-blazingly-fast-c1cd79bd1b32&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----c1cd79bd1b32--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c1cd79bd1b32--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@martin.heinz?source=post_page-----c1cd79bd1b32--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@martin.heinz?source=post_page-----c1cd79bd1b32--------------------------------", "anchor_text": "Martin Heinz"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4cbd6b36e62a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaking-python-programs-blazingly-fast-c1cd79bd1b32&user=Martin+Heinz&userId=4cbd6b36e62a&source=post_page-4cbd6b36e62a----c1cd79bd1b32---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc1cd79bd1b32&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaking-python-programs-blazingly-fast-c1cd79bd1b32&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc1cd79bd1b32&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaking-python-programs-blazingly-fast-c1cd79bd1b32&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@veri_ivanova", "anchor_text": "@veri_ivanova"}, {"url": "https://martinheinz.dev/blog/4", "anchor_text": "here"}, {"url": "https://martinheinz.dev/blog/4", "anchor_text": "here"}, {"url": "https://twitter.com/raymondh/status/1205969258800275456", "anchor_text": "tweet from Raymond Hettinger"}, {"url": "https://www.youtube.com/watch?v=OSGv2VnC0go&t=8m17s", "anchor_text": "Raymond Hettingers talk"}, {"url": "https://martinheinz.dev/blog/13", "anchor_text": "martinheinz.dev"}, {"url": "https://medium.com/tag/programming?source=post_page-----c1cd79bd1b32---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/python?source=post_page-----c1cd79bd1b32---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/software-engineering?source=post_page-----c1cd79bd1b32---------------software_engineering-----------------", "anchor_text": "Software Engineering"}, {"url": "https://medium.com/tag/data-science?source=post_page-----c1cd79bd1b32---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/web-development?source=post_page-----c1cd79bd1b32---------------web_development-----------------", "anchor_text": "Web Development"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc1cd79bd1b32&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaking-python-programs-blazingly-fast-c1cd79bd1b32&user=Martin+Heinz&userId=4cbd6b36e62a&source=-----c1cd79bd1b32---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc1cd79bd1b32&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaking-python-programs-blazingly-fast-c1cd79bd1b32&user=Martin+Heinz&userId=4cbd6b36e62a&source=-----c1cd79bd1b32---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc1cd79bd1b32&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaking-python-programs-blazingly-fast-c1cd79bd1b32&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c1cd79bd1b32--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fc1cd79bd1b32&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaking-python-programs-blazingly-fast-c1cd79bd1b32&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----c1cd79bd1b32---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----c1cd79bd1b32--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----c1cd79bd1b32--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----c1cd79bd1b32--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----c1cd79bd1b32--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----c1cd79bd1b32--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----c1cd79bd1b32--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----c1cd79bd1b32--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----c1cd79bd1b32--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@martin.heinz?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@martin.heinz?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Martin Heinz"}, {"url": "https://medium.com/@martin.heinz/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "5.4K Followers"}, {"url": "https://martinheinz.dev/", "anchor_text": "https://martinheinz.dev/"}, {"url": "https://ko-fi.com/martinheinz", "anchor_text": "https://ko-fi.com/martinheinz"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4cbd6b36e62a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaking-python-programs-blazingly-fast-c1cd79bd1b32&user=Martin+Heinz&userId=4cbd6b36e62a&source=post_page-4cbd6b36e62a--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff723091181e3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaking-python-programs-blazingly-fast-c1cd79bd1b32&newsletterV3=4cbd6b36e62a&newsletterV3Id=f723091181e3&user=Martin+Heinz&userId=4cbd6b36e62a&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}