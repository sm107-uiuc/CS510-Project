{"url": "https://towardsdatascience.com/advanced-visualization-with-react-vis-efc5c6667b4", "time": 1682993391.1099288, "path": "towardsdatascience.com/advanced-visualization-with-react-vis-efc5c6667b4/", "webpage": {"metadata": {"title": "Advanced Visualization with react-vis | by Andrew McNutt | Towards Data Science", "h1": "Advanced Visualization with react-vis", "description": "Getting your data visualization to shine can be hard! In this article we explore a number of cutting edge techniques like Voronoi and canvas components to get amazing user experiences using react-vis"}, "outgoing_paragraph_urls": [{"url": "https://github.com/uber/react-vis", "anchor_text": "react-vis", "paragraph_index": 0}, {"url": "https://medium.com/u/792d0122c5bb?source=post_page-----efc5c6667b4--------------------------------", "anchor_text": "Shyianovska Nataliia", "paragraph_index": 0}, {"url": "https://medium.com/dailyjs/data-visualization-with-react-vis-bd2587fe1660", "anchor_text": "Data Visualization with react-vis", "paragraph_index": 0}, {"url": "http://www.jeromecukier.net/?p=1700", "anchor_text": "dashboard", "paragraph_index": 0}, {"url": "https://www.npmjs.com/package/create-react-app", "anchor_text": "create-react-app", "paragraph_index": 1}, {"url": "https://github.com/mcnuttandrew/advanced-react-vis-tutorial", "anchor_text": "check out here (along with the code for this whole article).", "paragraph_index": 2}, {"url": "https://github.com/d3/d3-fetch#csv", "anchor_text": "d3-fetch csv", "paragraph_index": 10}, {"url": "https://github.com/balthazar/placeloader", "anchor_text": "placeloader", "paragraph_index": 11}, {"url": "https://github.com/d3/d3-scale-chromatic", "anchor_text": "d3-scale-chromatic", "paragraph_index": 11}, {"url": "http://agafonkin.com/en/", "anchor_text": "Vladimir Agafonkin/mourner", "paragraph_index": 36}, {"url": "http://mourner.github.io/simplify-js/", "anchor_text": "simplify-js", "paragraph_index": 36}, {"url": "https://d3js.org/", "anchor_text": "d3", "paragraph_index": 41}, {"url": "https://github.com/emeeks/semiotic", "anchor_text": "semiotic", "paragraph_index": 41}, {"url": "https://github.com/mcnuttandrew/advanced-react-vis-tutorial", "anchor_text": "check out this repo", "paragraph_index": 42}, {"url": "https://uber.github.io/react-vis/examples/charts/streamgraph", "anchor_text": "charts section of the react-vis documentation", "paragraph_index": 42}, {"url": "http://www.mcnutt.in/home-graphs/", "anchor_text": "like this", "paragraph_index": 42}, {"url": "http://www.mcnutt.in/color-of-the-year/", "anchor_text": "this", "paragraph_index": 42}, {"url": "http://www.mcnutt.in/city-size/", "anchor_text": "this", "paragraph_index": 42}, {"url": "https://www.mcnutt.in/", "anchor_text": "https://www.mcnutt.in/", "paragraph_index": 44}], "all_paragraphs": ["So you\u2019ve started to do some data visualization with react-vis, you\u2019ve built some charts of your own, maybe you\u2019ve read Shyianovska Nataliia \u2018s wonderful introduction Data Visualization with react-vis, or perhaps even built a dashboard. It\u2019s time to learn some techniques for handling larger sizes of data and to handle more complex UI interactions. In the course of this article we will see how to use single pass rendering, canvas components, debounced state updates, and Voronois. Buckle in, it\u2019s gonna be a wild ride!", "To get started you can set up scaffold a new app using create-react-app, and then run in the terminal", "That said, I use a slightly different configuration for my apps, which you can check out here (along with the code for this whole article).", "A traditional technique for learning how to do anything is to imitate the masters, and this article will be no exception. We will be exploring New York Times\u2019s 2016 visualization \u201cStephan Curry\u2019s 3 Point Record in Context\u201d.", "There\u2019s a lot going on in this visualization! Each line shows the number of three pointers made by a particular player over the course of a particular season. This information is made accessible by a dynamic mouseover which simultaneously highlights that particular player-year and provides a tooltip which describes exactly which line the user is hovering over.", "Our first step will be to acquire the data. Pleasantly, NYT serves it\u2019s data for this article in CSV\u2019s so we can pretty easily grab that by watching the network tab in chrome, as below. Once you\u2019ve downloaded the data file, place it somewhere within your application, I put it under a folder called data and named it \u201cnyt-rip.csv\u201d.", "The format of this csv is a little inconvenient, it has columns for a player id, the players name, the year, and then the number of three throws for each game of the season. Let\u2019s clean this up into a format thats a little easier to work with:", "Excellent, now we have a mechanism to format our data in a usable way. While we\u2019re writing utility functions, let\u2019s also write one to grab the data domain:", "Put both of these functions into a utils.js file, and we\u2019re off to the races.", "To set the stage for our subsequent optimizations let\u2019s throw together a naive approach. There are 750 player-years rows in our data set, so let\u2019s just have 750 LineSeries. When we hover over them, let\u2019s redraw the lines and highlight the selected one. Pretty reasonable! Here is a full pass at the naive implementation, after which I\u2019ll go through and describe each part:", "Oof thats a lot all at once! But it\u2019s pretty easy to deal with if break it apart in chunks. The first thing our component does when it gets ready to mount is to call out for data via the d3-fetch csv function, we then clean the data and save it into the state for ingestion in the near future.", "We start our render function by refusing to try to render our component if the data hasn\u2019t been loaded yet, instead just giving back a loading message (though you could easily give show a spinner or use something fancy like placeloader). Next we build up a color scale powered by d3-scale-chromatic using our getDataDomain function from the previous section. In this article we are primarily interested in reconstructing the feel (as opposed to the exact look) of the original NYT visualization, so here we use a different color scale, and forgo some of their extra chart decorations.", "Finally, we come to the actual rendering of our chart. We start by looking over all of our data rows and creating a LineSeries for each of them along with defining a rudimentary interaction technique. Next we add a LabelSeries to highlight only certain points along the yAxis, and the xAxis with special formatting to match the labels given by the NYT graphic.", "The astute reader will observe that we\u2019ve used a couple of constants, imported from a separate constants.js file, which are pulled out for logical convience:", "Putting it all together, this looks like:", "Pretty cool! However, the responsiveness is not very good, lines don\u2019t highlight when we get close to them, and the browser noticeably appears to lag. This strategy also prevents us from adding the tooltip along the side (while we could it would be subject to a lot of jitter as we hover across various elements). There\u2019s gotta be a better way!", "So far we\u2019ve been rendering our series using SVG lines. While this approach makes it easy to reason about the state of the UI, it is REALLY inefficient to redraw all of our lines every time. This is due to the fact that each of these lines is modeled as a very detailed DOM node, which weighs quite heavily on the browser. To alleviate this weight we can use the built in react-vis canvas series, LineSeriesCanvas. Canvas tends to be quite a lot faster to render than SVG, but doesn\u2019t have the same detailed representation in the DOM, which means that any interactions have to be hand brewed. Evidently, dropping this new series into our naive solution will make the whole page faster, but we will lose our dynamic interactivity.", "To address this we will separate our chart into two components, one that handles interactivity, and one that handles everything else. This is motivated by the idea by the idea that React only executes the render function for components that have been updated.", "Through this architecture we will have a component that renders the canvas lines, and one that will render the the highlight line and highlight tooltip. Thus effectively separating the elements that will be quick to render from those that will be expensive or time consuming to render. Some psuedo-code for the layout:", "We want these components to appear to be a single beautiful chart, so we give the interactive parts css properties", "This allows the interactive parts to \u201csit on top of\u201d the non-interactive properties, thus completing the look.", "We\u2019re really getting somewhere now. Observe that the static parts of the of chart are pretty similar to the what we had in the naive approach; just a container with some series in it. In the interest of brevity we can combine the root component and canvas part illustrated above into a single component, as each of them is only rendered a single time.", "This new component is quite similar to our first one. Our mounting step does a little extra work to facilitate the rendering of the interactivity component \u2014 more on that in a moment\u2014 and makes a call to our soon to be becoming InteractiveComponents. But other than that, not much has changed!", "Here comes the cool stuff. We saw above that we prepared our data a little bit extra in the componentWillMount step to get it ready for the interactive component, let\u2019s take a more detailed look:", "Our cleaned data is just the same as before, squeaky and easy to use. Next we introduce a new variable variable called playerYearMap, this is an object with keys equal to the player-year unique identifiers and values equal to the maximum score number of three pointers each player reached. This will be used to simplify the positioning of the labels and the tooltip. Similarly we introduce a playerMap, which also also has player-year identifiers as keys, but this time the whole row as values. This will allow for fast/constant time lookup of rows as we mouse over things.", "The last new variable is called allPoints and is generated by a function called buildVoronoiPoints. What could that be for I wonder? Well here is the function (it lives in utils):", "This creates a single point for each player in the center of the of the domain at the \u201cheight\u201d of that players maximum number of three pointers. We can use this to create a Voronoi. A Voronoi is a partitioning of space plane such that for a collection of points where each point is contained within it\u2019s own cell. We are guaranteed that each point will be isolated from each other point. This property can be used to great effect for mouse overs, so the user only mouses over a single point at a time.", "We are imitating the mouseover setup found in the original NYT Graphic, where the plane is stripped into bands such that as you mouse up and down the currently selected player-year changes, and as you mouse left and right it stays the same. We can reconstruct this behavior by using a Voronoi with our specially built allPoints from before. Once implemented the layout of the voronoi cells will look like this:", "Pretty cool! Now we\u2019re ready to see the code for the interactive component.", "Just as in our naive approach let\u2019s go through the interesting parts one at a time. Let\u2019s start with the elephant in the room:", "This innocuous component takes in a list of points and builds a voronoi straight into the dom. It\u2019s prop signature is a little bit anomalous compared to other components in react-vis (you need to provide it a scales, extent) so be careful! The other thing worth noting in this component is the use of the debouncedSetState function, which as you\u2019ll note from above, we have to define via:", "This function makes use of a lodash function called debounce which prevents a function from being called more than certain frequency (in this case once every 40 ms). Preventing this type of super fast state change is advantageous to us as we don\u2019t want every time little motion the user makes to induce a state change. This would cause jitter and unnecessary redraws! To mask this little delay we add animation by including the animation prop on the LineSeries.", "Putting this all together we get:", "Modulo some small styling touches, that\u2019s it! It operates smoothly and accurately reproduces the interaction found in the original visualization. Pretty dang cool!", "We\u2019ve done pretty well at emulating the functionality of the original NYT visualization, but now we want to know: can we do better? The mouse over functionality that they present is reasonable, however it\u2019s a little bit clunky and prevents you from mousing over every single player because of overlaps. We would like it if we could streamline this in a sensible and performant way. The answer to this problem, and, really if we\u2019re being honest, most problems, is to make our Voronoi more nuanced.", "A naive knee jerk would be to model create Voronoi cells for every data point. While it is totally possible to do this, it would create a lot of cells. If there are 82 games in the season for 750 players, that would be 61,500 distinct cells! A general rule of thumb says that the browser can only handle at most couple thousand SVG elements, so we need to be more clever.", "A powerful solution is develop a simplified model of our dataset by simplifying each of our lines. Pleasantly there is a healthy body of work on the subject of line simplification, such as the ever excellent Vladimir Agafonkin/mourner\u2019s simplify-js library. Much of this type of work has arisen because of cartographers interests in making shape preserving simplifications to the ragged edges of coast lines and other irregular geographic bodies. But we\u2019ll put it to a different use.", "We will simplify each player-year\u2019s line, so that we get the gist of the their line, without having too much detail. We execute on this idea by putting simplify-js to work on our data with another addition to utils file:", "Being visualizationists it is our first impulse to try to see what this these simplifications look like, and voila:", "With all of these pieces in place, we are, at last, ready to see the final voronoi in action. Behold:", "Over the course of this article we saw how to reconstruct a publication quality interactive data graphic using react-vis. This involved using a wide variety of interactive visualization techniques including canvas rendering, single pass rendering, debouncing, Voronois, and line simplification as a mechanism for tracing out line series. Not every visualization needs this many optimizations and advanced techniques, however we know a lot about our data and target behavior so we are able to tune it to be just the way we wanted.", "In building our visualization we made heavy use of a number of features of react-vis, however the ideas discussed in this article are applicable to any web based visualization framework. You could easily implement these techniques in vanilla d3, semiotic, or any of the huge host of other visualization tools available.", "If you want to see the code in context, check out this repo. For additional advanced examples check out the charts section of the react-vis documentation or some of my personal work, like this, or this, or maybe even this.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "PhD Student at UChicago studying the wild worlds of InfoVis https://www.mcnutt.in/"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fefc5c6667b4&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-visualization-with-react-vis-efc5c6667b4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-visualization-with-react-vis-efc5c6667b4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-visualization-with-react-vis-efc5c6667b4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-visualization-with-react-vis-efc5c6667b4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----efc5c6667b4--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----efc5c6667b4--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@mcnutt?source=post_page-----efc5c6667b4--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@mcnutt?source=post_page-----efc5c6667b4--------------------------------", "anchor_text": "Andrew McNutt"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F410e9ab5a21e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-visualization-with-react-vis-efc5c6667b4&user=Andrew+McNutt&userId=410e9ab5a21e&source=post_page-410e9ab5a21e----efc5c6667b4---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fefc5c6667b4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-visualization-with-react-vis-efc5c6667b4&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fefc5c6667b4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-visualization-with-react-vis-efc5c6667b4&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/uber/react-vis", "anchor_text": "react-vis"}, {"url": "https://medium.com/u/792d0122c5bb?source=post_page-----efc5c6667b4--------------------------------", "anchor_text": "Shyianovska Nataliia"}, {"url": "https://medium.com/dailyjs/data-visualization-with-react-vis-bd2587fe1660", "anchor_text": "Data Visualization with react-vis"}, {"url": "http://www.jeromecukier.net/?p=1700", "anchor_text": "dashboard"}, {"url": "https://www.npmjs.com/package/create-react-app", "anchor_text": "create-react-app"}, {"url": "https://github.com/mcnuttandrew/advanced-react-vis-tutorial", "anchor_text": "check out here (along with the code for this whole article)."}, {"url": "https://www.nytimes.com/interactive/2016/04/16/upshot/stephen-curry-golden-state-warriors-3-pointers.html", "anchor_text": "Stephen Curry's 3-Point Record in Context: Off the ChartsThis chart contains 752 lines - one for each N.B.A. player who finished in the top 20 in 3-point attempts made in each\u2026www.nytimes.com"}, {"url": "https://github.com/d3/d3-fetch#csv", "anchor_text": "d3-fetch csv"}, {"url": "https://github.com/balthazar/placeloader", "anchor_text": "placeloader"}, {"url": "https://github.com/d3/d3-scale-chromatic", "anchor_text": "d3-scale-chromatic"}, {"url": "https://en.wikipedia.org/wiki/Voronoi_diagram#/media/File:Euclidean_Voronoi_diagram.svg", "anchor_text": "wikipedia"}, {"url": "http://agafonkin.com/en/", "anchor_text": "Vladimir Agafonkin/mourner"}, {"url": "http://mourner.github.io/simplify-js/", "anchor_text": "simplify-js"}, {"url": "http://mourner.github.io/simplify-js/", "anchor_text": "simplify-js"}, {"url": "https://d3js.org/", "anchor_text": "d3"}, {"url": "https://github.com/emeeks/semiotic", "anchor_text": "semiotic"}, {"url": "https://github.com/mcnuttandrew/advanced-react-vis-tutorial", "anchor_text": "check out this repo"}, {"url": "https://uber.github.io/react-vis/examples/charts/streamgraph", "anchor_text": "charts section of the react-vis documentation"}, {"url": "http://www.mcnutt.in/home-graphs/", "anchor_text": "like this"}, {"url": "http://www.mcnutt.in/color-of-the-year/", "anchor_text": "this"}, {"url": "http://www.mcnutt.in/city-size/", "anchor_text": "this"}, {"url": "https://medium.com/tag/javascript?source=post_page-----efc5c6667b4---------------javascript-----------------", "anchor_text": "JavaScript"}, {"url": "https://medium.com/tag/react?source=post_page-----efc5c6667b4---------------react-----------------", "anchor_text": "React"}, {"url": "https://medium.com/tag/react-vis?source=post_page-----efc5c6667b4---------------react_vis-----------------", "anchor_text": "React Vis"}, {"url": "https://medium.com/tag/frontend?source=post_page-----efc5c6667b4---------------frontend-----------------", "anchor_text": "Frontend"}, {"url": "https://medium.com/tag/visualization?source=post_page-----efc5c6667b4---------------visualization-----------------", "anchor_text": "Visualization"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fefc5c6667b4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-visualization-with-react-vis-efc5c6667b4&user=Andrew+McNutt&userId=410e9ab5a21e&source=-----efc5c6667b4---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fefc5c6667b4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-visualization-with-react-vis-efc5c6667b4&user=Andrew+McNutt&userId=410e9ab5a21e&source=-----efc5c6667b4---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fefc5c6667b4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-visualization-with-react-vis-efc5c6667b4&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----efc5c6667b4--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fefc5c6667b4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-visualization-with-react-vis-efc5c6667b4&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----efc5c6667b4---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----efc5c6667b4--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----efc5c6667b4--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----efc5c6667b4--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----efc5c6667b4--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----efc5c6667b4--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----efc5c6667b4--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----efc5c6667b4--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----efc5c6667b4--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@mcnutt?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@mcnutt?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Andrew McNutt"}, {"url": "https://medium.com/@mcnutt/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "136 Followers"}, {"url": "https://www.mcnutt.in/", "anchor_text": "https://www.mcnutt.in/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F410e9ab5a21e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-visualization-with-react-vis-efc5c6667b4&user=Andrew+McNutt&userId=410e9ab5a21e&source=post_page-410e9ab5a21e--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fc5a9df6763de&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-visualization-with-react-vis-efc5c6667b4&newsletterV3=410e9ab5a21e&newsletterV3Id=c5a9df6763de&user=Andrew+McNutt&userId=410e9ab5a21e&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}