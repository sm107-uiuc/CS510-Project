{"url": "https://towardsdatascience.com/data-warehouse-transformation-code-smells-17877bb6521d", "time": 1683006173.3817291, "path": "towardsdatascience.com/data-warehouse-transformation-code-smells-17877bb6521d/", "webpage": {"metadata": {"title": "Data Warehouse Transformation Code Smells | by Ethan Knox | Towards Data Science", "h1": "Data Warehouse Transformation Code Smells", "description": "There is a strange paradigm in Data Engineering when it comes to transformation code. While we increasingly hold extract and load (\u201cEL\u201d) programming to production software standards, transform code\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/data-engineering-nuggets-298f4935eef5#d10c", "anchor_text": "being treated like software", "paragraph_index": 0}, {"url": "https://martinfowler.com/bliki/CodeSmell.html", "anchor_text": "a surface indication that usually corresponds to a deeper problem in the system.", "paragraph_index": 1}, {"url": "https://yoyodynedata.com/blog/tribal-knowledge.html", "anchor_text": "tribal knowledge", "paragraph_index": 14}, {"url": "https://en.wikipedia.org/wiki/Idempotence", "anchor_text": "idempotent", "paragraph_index": 24}, {"url": "https://en.wikipedia.org/wiki/Deterministic_system", "anchor_text": "deterministic", "paragraph_index": 24}, {"url": "https://medium.engineering/the-stack-that-helped-medium-drive-2-6-millennia-of-reading-time-e56801f7c492#5371", "anchor_text": "dynamo_db", "paragraph_index": 32}, {"url": "https://en.wikipedia.org/wiki/Fourth-generation_programming_language", "anchor_text": "4th generation language", "paragraph_index": 37}, {"url": "https://en.wikipedia.org/wiki/Boyce%E2%80%93Codd_normal_form", "anchor_text": "BCNF", "paragraph_index": 43}, {"url": "https://en.wikipedia.org/wiki/Online_analytical_processing", "anchor_text": "OLAP", "paragraph_index": 44}, {"url": "https://en.wikipedia.org/wiki/Online_transaction_processing", "anchor_text": "OLTP", "paragraph_index": 44}, {"url": "https://www.amazon.com/gp/product/1118530802/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1118530802&linkCode=as2&tag=ethanknox-20&linkId=fc8ac37534bc1fe08f5177a015dfba5d", "anchor_text": "Data Warehouse Toolkit", "paragraph_index": 45}, {"url": "https://support.office.com/en-us/article/vlookup-function-0bbc8083-26fe-4963-8ab8-93a18ad188a1", "anchor_text": "consumer-facing documentation", "paragraph_index": 50}, {"url": "https://www.getdbt.com/", "anchor_text": "DBT", "paragraph_index": 51}, {"url": "https://www.sphinx-doc.org/en/master/", "anchor_text": "Sphinx", "paragraph_index": 51}, {"url": "https://readthedocs.org/", "anchor_text": "Read The Docs", "paragraph_index": 51}, {"url": "https://martinfowler.com/bliki/TwoHardThings.html", "anchor_text": "two hard things", "paragraph_index": 54}, {"url": "https://yoyodynedata.com/blog/is-your-company-too-dumb-to-be-data-driven.html", "anchor_text": "Organizational Maturity", "paragraph_index": 56}], "all_paragraphs": ["There is a strange paradigm in Data Engineering when it comes to transformation code. While we increasingly hold extract and load (\u201cEL\u201d) programming to production software standards, transform code continues to be treated as a second-class citizen. Ironically, transform code often contains the complex business logic that could benefit greatly from being treated like software.", "A code smell is \u201c a surface indication that usually corresponds to a deeper problem in the system. \u201c In even simpler terms, code smells are patterns in software that beg us to look a little closer. Code smells in your application are not unlike actual smells in a refrigerator: a pungent odor may signal that something unsavory is present (like that carton of decade-old moo shoo pork), or it may be as innocuous as Limburger cheese. Code smells do not guarantee that a problem exists, and often it is the case that the best possible refactor resembles a different smell. The value lies in that each occurrence prompts you to question what solution offers the most readable, maintainable transform code.", "What follows is a collection of code smells specific to dimensional Data Warehouse transforms. Encountering them should give you pause, and present you with opportunities to leave the codebase better than you found it.", "Translated to English: \u201cIf the receipt price isn\u2019t there try the label price, if that isn\u2019t there try the catalog price, and if all else fails, figure the price at 0.\u201d", "Why it smells: Fumbling through a handful of columns to grab the first available value indicates that data is not well understood. Either the code does not know why one column value deserves preference, or the resulting column is a mashup of several states that should be independent.", "Possible refactoring: The nested coalesce above likely represents multiple independent states forced into a false condition. Consider replacing with either an explicit decision tree (usually a CASE statement) or breaking each state into a distinct fact.", "Translated to English: \u201cName the user_sp_role column ROLE , people will know what that means.\"", "Why it smells: A core tenet of Data Warehouse design is that the interface should err on the side of simplicity. Using reserved words (even reserved words allowed by your particular dialect) will introduce complexity and opportunities for confusion.", "Possible refactorings: Stick to verbose identifiers that are easy to use, do not require quotes, and will keep the Data Warehouse accessible to users of all SQL aptitudes. ROLE could more intuitively be named web_application_role and avoid pointless confusion.", "Translated to English: \u201cIf you want all the customers that do not have registered phone numbers just select where the phone number is NULL.\"", "Why it smells: NULL is a very important value in the Data Warehouse world. If a join goes bad, there will be NULL values. If a group by fails or a window function isn't sliding as we expect, there are NULL values. When NULL plays double-duty as a legit data value, debugging becomes nearly impossible. Add to this that BI tools often behave inconsistently when presented with NULL values, and you have a perfect place for bugs to hide.", "Possible refactorings: Don\u2019t use NULL values in dimensions; explicitly state each possible condition (ie use ELSE in CASE statements) so that any NULL value immediately draws scrutiny. This will not only harden your transform code but contribute to the intuitive nature of the end product data. NULL can mean a lot of things, but 'No Phone Number Available' is crystal clear.", "This smell only applies specifically to dimension attributes. NULL values are not only correct but important data points for additive facts (such as total_sale_value ).", "Translated to English: \u201cWe don\u2019t use customer units 8 or 13 anymore, so we ignore them (Ted says 1,3, and 19 are all that matter). We also only care about the primary website customer value types (Bob says those are designated by \u2018a\u2019). \u201c", "Why it smells: Good code is self-documenting. This generally means you can read the code and understand what it does without a decoder ring. The example above isn\u2019t challenging due to complex business logic or technical intricacy, but because it is overflowing with tribal knowledge.", "Possible refactorings: CTEs are great tools for data mapping:", "When larger refactors are not possible, comments are better than nothing. Look for variables and constants that can be more descriptively named as a cheap way to greatly improve the codebase.", "Translated to English: \u201cwebsite visits should always have a visit_id , so if they don't, the record is bad and we should throw it out.\"", "Why it smells: The foundation of any Data Warehouse is truth. Not just some, but the whole truth, which destructive transforms cannot provide. A Data Warehouse missing records (even \u201cbad\u201d records) has no credibility, and you will quickly find consumers asking for raw source access.", "Possible refactorings: Transform logic should be additive, presenting greater value to the end-user. In the example above, a new column valid_record would filter to the same dataset in a BI layer while providing consumers with the confidence of having access to \"all the data\".", "Translated to English: \u201cMost of our web traffic is from the SF Bay area, so if a web visit is missing a timestamp we update it to PST.\u201d", "Why it smells: The job of the Data Warehouse is to provide users with the ability to make informed decisions, not to make decisions for them. Every time transform logic chooses a path for the data, it inevitably removes options from the consumer in the process.", "Possible refactorings: In the example above, the original last_login_time would ideally render last_login_time_without_timezone along with last_login_time_with_timezone ; the end-user can then decide to make assumptions about the missing timezones at their own peril.", "Translated to English: \u201cThe records with a created date greater than yesterday are the new records.\u201d", "Why it smells: Any time the same code can be run twice against the same data and return different results, consider it a problem. Good transformation logic is both idempotent and deterministic. Unstable elements such as the current date or time make the code brittle, and can easily land the system in an uncorrectable state if a transform job fails or is run twice.", "Possible refactorings: Design transforms in a manner that is self-healing. Using the same example:", "Translated to English: Unstructured grammar around identifiers, erratic prefixing of column names, and lack of a vocabulary system.", "Why it smells: In a Data Warehouse the schema is the product interface. Unpredictable lexis serve as undue friction for the user. Is the table order or orders? Is the column sale_price or order_sale_price? Without a pattern, this is all overhead to the usability of a Data Warehouse.", "Possible refactorings: Select conventions. Document them. Update the transform code to reflect them. The same query with homogeneous language might look like:", "Translated to English: Any table, view, schema, database or column where the name reflects the source system (ie postgres_user ), the extract-load medium (ie DATA_WAREHOUSE.STITCH.USERS ) or any other mechanical component of the ELT process (ie cron_daily.users ).", "Why it smells: It can be hard for engineers to get out of our own headspaces. This smell often results from designing a schema \u201csource down\u201d instead of \u201cend-user up\u201d. The Data Warehouse must represent information in a way that reflects business domain objects; for example, a hospital does not think of its consumers as \u201cbilling users\u201d and \u201cchart system users\u201d and \u201cprescription users\u201d, they are all simply \u201cpatients\u201d.", "This is a particularly hard smell to detect because the business domain often runs very close to the technology domain, and users may have trained themselves to incorrectly align one with the other. If a retailer has distinct eCommerce and physical point-of-sale systems, it is very easy to think that the eCommerce system represents web_users and the POS system represents in_store_users . But this is not the case; the business has only CUSTOMERS who may shop in a store, online, or both.", "Possible refactorings: Think of your data product the way a UX designer would design an intent-driven application interface. If you log into your Medium account you are asked for your username and password, not your \u201c dynamo_db\u201d username and password. By the same logic, your Data Warehouse userbase is interested in page visits, not Google Analytics page visits or Adobe Analytics page visits.", "Translated to English: Functions that are not part of the native SQL dialect for the target Data Warehouse and are not created as part of the codebase.", "Why it smells: If we view the transform codebase as the blueprints by which our Data Warehouse is constructed, stored procs (not created as part of the codebase) are \u201coff the books jobs\u201d. The codebase no longer has all the elements of the machine and cannot effectively reproduce the warehouse. This dangerous and brittle state leaves the warehouse open to catastrophic failure if (when) the instance goes down.", "Possible refactorings: If you are using a SQL framework like DBT (or any SQL precompilation really), avoid stored procs and functions completely. For those rare instances where a stored procedure or function is the only viable solution (or if you are using stored procs as your transform layer), include the definition of the proc in your code base with either a DROP.. CREATE or CREATE OR REPLACE pattern to ensure that it is recreated from your code with every run. This will minimize the gap between the state of your code and the state of production.", "Translated to English: Identifiers that are written case-sensitive or including special characters or reserved words.", "Why it smells: SQL is a 4th generation language, and the intent of conventions like case folding (treating identifiers as case-insensitive values) is to more closely resemble human-to-human communication. Quoted identifiers generally swim against the current of this intent, forcing users to consider capitalization and potentially leading to confusing \"Leads_Prod\" vs \"leads_prod\" situations (these are 2 distinct tables!).", "Possible refactorings: Just don\u2019t quote identifiers, ever. Avoid the confusion and the overhead by using verbose, descriptive names for databases, tables/views, and columns. As a bonus, your code will be portable this way (case folding is not consistent across different platforms so any quoted identifier is instantly non-portable).", "There was a valiant effort in the earlier days of data warehousing to quote everything, making identifiers as pretty and report-ready as possible with column names like \"Monthly Report Status\". At the time this made a lot of sense, as much of the consumption was directly from Data Warehouse tables into reports and spreadsheet extracts. Today I would argue that BI tools are the best place for this kind of \"presentation polish\", and the Data Warehouse benefits more by keeping identifiers clean and verbose.", "Translated to English: Any timestamp that is not explicitly cast to UTC value, especially the use of \u201clocal time\u201d as a standard.", "Why it smells: Timestamps are the messiest of datatypes. The implementation and handling of timestamps differ greatly from platform to platform, language to language, and especially tool to tool.", "Possible refactorings: Explicitly convert all timestamps to UTC for storage. Note that this is not the same as converting and then stripping the timezone (a weird yet painfully common practice that likely stemmed from a belief that timestamps without timezones are \u201ceasier\u201d). Consistent use of UTC will streamline onboarding new datasets, eliminate daylight savings time confusion, and future-proof organizational knowledge past the point of a single timezone. Let the BI tools worry about timestamp presentation (most will do it anyway, and those \u201chelpful\u201d upstream conversions will likely do more harm than good).", "Translated to English: Schemata that reflect traditional BCNF that you would expect to find in transactional database designs. In this example site_identifiers have been normalized out of site to protect referential integrity.", "Why it smells: Data warehouses are OLAP structures that fulfill a very different need from transactional databases. Normalization and referential constraints are important parts of how OLTP systems do their job \u2014 but these tools are detrimental to the goals of a knowledge store. Data Warehouses do not represent the desired state (ie that all page_views have a source_id that exists in the traffic_sources table), they represent the reality (ie that a bug associated 1 million page_views to a non-existent source). From a higher vantage point, the presence of heavy normalization is probably a strong indicator that other OLTP conventions have been followed throughout the codebase.", "Possible refactorings: Dimensional model design is outside the scope of this writing (for a greater understanding of how dimensional models differ from transactional models I highly recommend the Data Warehouse Toolkit by Ralph Kimball). In general, these normalized values should be \u201cdegenerated\u201d to wide, flat dimensional tables like so:", "Translated to English: Complex transforms that are masked by seemingly stable identifiers.", "Why it smells: \u201cSquishy\u201d logic is arbitrarily sound business logic: in the example above, the code decides that \u201ctwo sessions occurring less than a minute apart, with extremely close thumbprints, and originating from (nearly) the same location are likely the same user session.\u201d This smell here is not the logic \u2014 whether or not this is an accurate way to merge browser sessions is up to the business; the smell is representing \u201clikely the same user session\u201d as the absolute value session.", "Possible refactorings: Data Warehouse transform code represents what is known to be true. In this example, we know that each session exists, while we hypothesize that certain sessions are actually the same session. If the hypothesis is supported by the business, it can easily be represented as additional information in the form of a likely_parent_session column. Aggregations on top of this hypothesis can exist in additional materializations, i.e. dim_collapsed_session and fact_collapsed_conversion etc. Often more than one hypothesis is needed to support the range of business use cases. In that event, each hypothesis can either materialize further downstream in a domain-specific mart or be \"branded\" and used to enrich dim_session in the Data Warehouse.", "Translated to English: For a consumer to make use of the Data Warehouse they need input from the transform authors.", "Why it smells: The Data Warehouse is both a business tool and a consumer product. Like any complex tool intended for business use, it must ship with comprehensive documentation. Imagine if the only way to learn to use the VLOOKUP function in Excel was to call a Microsoft Engineer! Without consumer-facing documentation, the product would be impractical to use.", "Possible refactorings: There is a multitude of places documentation can live. Nearly all Data Warehouse platforms support SQL comment meta for objects. If you use a transformation framework like DBT then consumer-facing documentation is baked in with dbt docs. Documentation can also be managed with tools like Sphinx, Read The Docs, or even simple markdown files. The documentation solution must, at a bare minimum: * be easy for consumers to access. * be maintained as part of the data product. * support effective search and navigation. * be as complete as possible, and \"inside\" references", "Translated to English: The use of shorthand model aliases, often one or two letters long.", "Why it smells: Abbreviated shorthand is very useful for writing quick ad-hoc queries. But like all good software, transformation code should be self-documenting and use object names that mean something.", "Possible refactorings: Naming identifiers is one of the two hard things in software development. Use alias names that are descriptive, unique within the transform, and convey the content of the represented table/CTE/dataset:", "Translated to English: \u201cVerticals refuse to agree on business logic around a KPI, so we support multiple versions of the truth.\u201d", "Why it smells: Organizational Maturity is a critical element in any successful data initiative. If the business is unwilling (or unable) to make sometimes-difficult decisions and move forward with a unified source of truth, this indecision will be reflected in the Data Warehouse codebase.", "Possible refactorings: The refactor for this smell is technically simple but practically difficult. The business must evolve and declare a singular definition that all verticals will adopt. In SQL, this is as simple as:", "In the real world, this can be a political minefield.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F17877bb6521d&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-warehouse-transformation-code-smells-17877bb6521d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-warehouse-transformation-code-smells-17877bb6521d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-warehouse-transformation-code-smells-17877bb6521d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-warehouse-transformation-code-smells-17877bb6521d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----17877bb6521d--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----17877bb6521d--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@ethan.m.knox?source=post_page-----17877bb6521d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@ethan.m.knox?source=post_page-----17877bb6521d--------------------------------", "anchor_text": "Ethan Knox"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F37554c2b2f4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-warehouse-transformation-code-smells-17877bb6521d&user=Ethan+Knox&userId=37554c2b2f4&source=post_page-37554c2b2f4----17877bb6521d---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F17877bb6521d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-warehouse-transformation-code-smells-17877bb6521d&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F17877bb6521d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-warehouse-transformation-code-smells-17877bb6521d&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@foodiesfeed?utm_source=medium&utm_medium=referral", "anchor_text": "Jakub Kapusnak"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://towardsdatascience.com/data-engineering-nuggets-298f4935eef5#d10c", "anchor_text": "being treated like software"}, {"url": "https://martinfowler.com/bliki/CodeSmell.html", "anchor_text": "a surface indication that usually corresponds to a deeper problem in the system."}, {"url": "https://yoyodynedata.com/blog/tribal-knowledge.html", "anchor_text": "tribal knowledge"}, {"url": "https://en.wikipedia.org/wiki/Idempotence", "anchor_text": "idempotent"}, {"url": "https://en.wikipedia.org/wiki/Deterministic_system", "anchor_text": "deterministic"}, {"url": "https://medium.engineering/the-stack-that-helped-medium-drive-2-6-millennia-of-reading-time-e56801f7c492#5371", "anchor_text": "dynamo_db"}, {"url": "https://en.wikipedia.org/wiki/Fourth-generation_programming_language", "anchor_text": "4th generation language"}, {"url": "https://en.wikipedia.org/wiki/Boyce%E2%80%93Codd_normal_form", "anchor_text": "BCNF"}, {"url": "https://en.wikipedia.org/wiki/Online_analytical_processing", "anchor_text": "OLAP"}, {"url": "https://en.wikipedia.org/wiki/Online_transaction_processing", "anchor_text": "OLTP"}, {"url": "https://www.amazon.com/gp/product/1118530802/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1118530802&linkCode=as2&tag=ethanknox-20&linkId=fc8ac37534bc1fe08f5177a015dfba5d", "anchor_text": "Data Warehouse Toolkit"}, {"url": "https://support.office.com/en-us/article/vlookup-function-0bbc8083-26fe-4963-8ab8-93a18ad188a1", "anchor_text": "consumer-facing documentation"}, {"url": "https://www.getdbt.com/", "anchor_text": "DBT"}, {"url": "https://www.sphinx-doc.org/en/master/", "anchor_text": "Sphinx"}, {"url": "https://readthedocs.org/", "anchor_text": "Read The Docs"}, {"url": "https://martinfowler.com/bliki/TwoHardThings.html", "anchor_text": "two hard things"}, {"url": "https://yoyodynedata.com/blog/is-your-company-too-dumb-to-be-data-driven.html", "anchor_text": "Organizational Maturity"}, {"url": "https://yoyodynedata.com", "anchor_text": "https://yoyodynedata.com"}, {"url": "https://medium.com/tag/data-warehouse?source=post_page-----17877bb6521d---------------data_warehouse-----------------", "anchor_text": "Data Warehouse"}, {"url": "https://medium.com/tag/data-engineering?source=post_page-----17877bb6521d---------------data_engineering-----------------", "anchor_text": "Data Engineering"}, {"url": "https://medium.com/tag/data?source=post_page-----17877bb6521d---------------data-----------------", "anchor_text": "Data"}, {"url": "https://medium.com/tag/software-engineering?source=post_page-----17877bb6521d---------------software_engineering-----------------", "anchor_text": "Software Engineering"}, {"url": "https://medium.com/tag/code-smells?source=post_page-----17877bb6521d---------------code_smells-----------------", "anchor_text": "Code Smells"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F17877bb6521d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-warehouse-transformation-code-smells-17877bb6521d&user=Ethan+Knox&userId=37554c2b2f4&source=-----17877bb6521d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F17877bb6521d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-warehouse-transformation-code-smells-17877bb6521d&user=Ethan+Knox&userId=37554c2b2f4&source=-----17877bb6521d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F17877bb6521d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-warehouse-transformation-code-smells-17877bb6521d&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----17877bb6521d--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F17877bb6521d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-warehouse-transformation-code-smells-17877bb6521d&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----17877bb6521d---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----17877bb6521d--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----17877bb6521d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----17877bb6521d--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----17877bb6521d--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----17877bb6521d--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----17877bb6521d--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----17877bb6521d--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----17877bb6521d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@ethan.m.knox?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@ethan.m.knox?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Ethan Knox"}, {"url": "https://medium.com/@ethan.m.knox/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "194 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F37554c2b2f4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-warehouse-transformation-code-smells-17877bb6521d&user=Ethan+Knox&userId=37554c2b2f4&source=post_page-37554c2b2f4--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ffeddb2f1ea7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-warehouse-transformation-code-smells-17877bb6521d&newsletterV3=37554c2b2f4&newsletterV3Id=feddb2f1ea7&user=Ethan+Knox&userId=37554c2b2f4&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}