{"url": "https://towardsdatascience.com/serverless-recommendation-system-using-pyspark-and-gcp-4fb163131881", "time": 1682997664.746372, "path": "towardsdatascience.com/serverless-recommendation-system-using-pyspark-and-gcp-4fb163131881/", "webpage": {"metadata": {"title": "Serverless Recommendation System using PySpark and GCP | by Badal Nabizade | Towards Data Science", "h1": "Serverless Recommendation System using PySpark and GCP", "description": "Recently I thought it was time for me to answer that question. So, I decided to create a web application that recommends movies to its registered users. My main goal was to make it online and fully\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.netflixprize.com/", "anchor_text": "Netflix Price Challenge", "paragraph_index": 5}, {"url": "https://en.wikipedia.org/wiki/Overfitting", "anchor_text": "overfitting", "paragraph_index": 13}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/Notebook.ipynb", "anchor_text": "this notebook", "paragraph_index": 17}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/utils/quick_reco_engine.py", "anchor_text": "quick_reco_engine.py", "paragraph_index": 27}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/utils/engine.py", "anchor_text": "engine.py", "paragraph_index": 27}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/app/main.py", "anchor_text": "main.py", "paragraph_index": 29}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/06b7e7092bc1a88460971844224494ac0c773136/app/main.py#L170-L247", "anchor_text": "these lines in main.py", "paragraph_index": 29}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/utils/engine.py", "anchor_text": "engine.py", "paragraph_index": 30}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/app/main.py", "anchor_text": "main.py", "paragraph_index": 33}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/utils/engine.py", "anchor_text": "engine.py", "paragraph_index": 33}, {"url": "https://gist.github.com/badalnabizade/25a2157af9241eb4d6dc5f34e069bd96", "anchor_text": "This markdown file", "paragraph_index": 34}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/Notebook.ipynb", "anchor_text": "upyter Notebook", "paragraph_index": 37}, {"url": "https://www.linkedin.com/in/badalnabizade/", "anchor_text": "https://www.linkedin.com/in/badalnabizade/", "paragraph_index": 40}], "all_paragraphs": ["\u201cHow Netflix predicts my taste?\u201d That was the question that came into my mind before I got into data science. It made me curious about this field.", "Recently I thought it was time for me to answer that question. So, I decided to create a web application that recommends movies to its registered users.", "My main goal was to make it online and fully serverless. I have faced several challenges throughout this journey.", "First I will briefly mention these challenges, then we can dive deep into the details of this project.", "First things first, How does ALS Matrix Factorization work? Let\u2019s dig into it:", "This algorithm is widely known since Netflix Price Challenge. It is a state-of-the-art collaborative filtering algorithm for sparse rating data. In a nutshell, matrix factorization is the factorization of a matrix into a product of rectangular factor matrices that have lower dimensions (in this case product of user and movie matrices). In the user matrix, columns are latent features and rows are users. In item (movie) matrix, rows represent latent features and columns are items (movies).", "I will call the factor matrix for users as \u201cX\u201d and factor matrix for movies as \u201cY\u201d. By the way, we don\u2019t know what latent features represent and we don\u2019t have to. \u2014 We just need to figure out the values of latent features, then determining unknown user ratings for each movie is just the matter of simple matrix multiplication.", "To predict the values of latent features, we will use an alternating least squares approach.", "A least squares approach in it\u2019s basic forms means fitting some line to the data, measuring the sum of squared distances from all points to the line and trying to get an optimal fit for missing points.", "With the alternating least squares approach the idea is the same, but we iteratively alternate between optimizing Y and fixing X and v.v. With this iterative optimization process main goal is to try to arrive closer to a factorized representation of our original data.", "By doing so, we first estimate Y using X (we optimize the values of Y and keep X fixed) and estimate X by using Y (we optimize the values of X and keep Y fixed). After enough number of iterations (which is the hyper-parameter of model that we should determine), we are aiming to reach a convergence point where X and Y matrices are close enough to factorized representation of our original data and loss function for those matrices are minimized.", "However, there is a minor issue about the data. Our data is sparse, meaning we don\u2019t have full user-rating pairs for each movie :). This is the reason we are trying to predict those missing ratings and build a recommendation engine. So, we should penalize the movies that do not have ratings. After we do that, we don\u2019t have to deal with the movies that don\u2019t have ratings from the users and do not make any assumption around the movies that are not rated in the recommendation. So, to penalize non-rated movies, we\u2019ll need a weight matrix where non-rated movies will have 0 as weight, and rated movies will have 1 as weight. I\u2019ll call this wight matrix as \u201cW\u201d.", "Since we have to optimize both X and Y matrices. There will be two cost functions corresponding to X and Y.", "Mind the last terms in the above cost functions. Those are regularization terms and are the last hyper-parameter of this algorithm. They are there in order to avoid overfitting. In other words, they don\u2019t let weights have high values during the optimization process. By the way, you should tune the lambda (regularization term) by using a cross-validation set (not test set) for the algorithm to generalize better on unseen data.", "Optimization solutions for X and Y matrices are shown below.", "In the above Optimization solutions, Wu represents weights of user latent features and Wi represents weights of movie latent features. qu and qi will be equal to respectively ru and ri when u th user has rated i-th movie. ru and ri represent the value of rating corresponding to the u-th user and value of rating corresponding to the i-th movie, respectively.", "We can show the above algorithm in pseudocode as follows:", "I implemented a naive version of this algorithm with Numpy in this notebook.", "What movies are the best according to users in movielens dataset ?", "To determine those movies, I created simple neural network embeddings using Keras as shown in the below snippet.", "What this code basically does is process ratings and movies data frames for embedding model, create user and movie embedding vectors, multiply them with each other and add corresponding bias embedding vectors to the obtained matrix.", "By doing so, we got a model that tries to predict ratings for each user and movie combination, by using movie and user embedding vectors. When the model is trained with SGD optimizer, It minimizes the mean squared error between predicted and actual ratings, by adjusting corresponding values of embedding matrices.", "After few epochs, we\u2019ll have trained movie biases for each movie, which we needed to determine the best movies. Perfect!", "We can get the best movies as shown in the below snippet.", "Here we go, \u201cbest_movies\u201d in this snippet are represents best 48 movies according to users in the movielens dataset. We got the best movies to show users of our application in order to make it less boring.", "Can we quickly show some recommendations to user ?", "Indeed, we can. By using the movielens small dataset. Although these recommendations might be less accurate than actual recommendations that are generated by using a full data set.", "There is quick_reco_engine.py file in my project\u2019s Github repository. Which is has the same \u201cRecommender\u201d object as engine.py", "The only difference is, quick_reco_engine.py doesn\u2019t write anything to database, it extracts \u201cproduct features\u201d (latent factors for movies) from the ALS model and saves those to Google Cloud Storage.", "In the main.py file, we get those product features from GCS and multiply these latent features of movies with new user\u2019s ratings (unrated movies will have 0 as rating value). By doing this, we get a good approximation for the rating the user would give movies. Then we sort those ratings in descending order and recommend top 12 high-rated movies to the user. Check these lines in main.py", "The main recommendation engine that runs in Google Dataproc is engine.py", "Firstly, I created the following tables in Google CloudSQL.", "Then imported ratigs.csv to RATING table, movies.csv to MOVIES table, links.csv to LINKS table.", "main.py and engine.py will write data to USER, RECOMMENDATIONS and QUICK_RECOMMENDATIONS tables for newly registered users to the application.", "This markdown file describes in detail how the mentioned recommendation system works, and how it interacts with GCP. Every highlight in that markdown file indicates a permalink to a specific line or lines in a corresponding script. Please check it out!", "The main Recommendations look like this.", "Note: App creates these recommendations for each registered user and they can access recommended movies any time they want.", "You can also check this Jupyter Notebook, where I implemented vanilla ALS, did some EDA to answer questions that couldn\u2019t let me sleep till I answered them and determined the best movies.", "Source code for this project is available in below Github repository.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Science | ML | Economics. Belives the power of curiosity. Passionate about creating useful data-products. https://www.linkedin.com/in/badalnabizade/"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F4fb163131881&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fserverless-recommendation-system-using-pyspark-and-gcp-4fb163131881&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fserverless-recommendation-system-using-pyspark-and-gcp-4fb163131881&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fserverless-recommendation-system-using-pyspark-and-gcp-4fb163131881&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fserverless-recommendation-system-using-pyspark-and-gcp-4fb163131881&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----4fb163131881--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----4fb163131881--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@nabizadebadal?source=post_page-----4fb163131881--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@nabizadebadal?source=post_page-----4fb163131881--------------------------------", "anchor_text": "Badal Nabizade"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fed6767ae2151&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fserverless-recommendation-system-using-pyspark-and-gcp-4fb163131881&user=Badal+Nabizade&userId=ed6767ae2151&source=post_page-ed6767ae2151----4fb163131881---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4fb163131881&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fserverless-recommendation-system-using-pyspark-and-gcp-4fb163131881&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4fb163131881&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fserverless-recommendation-system-using-pyspark-and-gcp-4fb163131881&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@imnoom?utm_source=medium&utm_medium=referral", "anchor_text": "Noom Peerapong"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://www.netflixprize.com/", "anchor_text": "Netflix Price Challenge"}, {"url": "https://en.wikipedia.org/wiki/Overfitting", "anchor_text": "overfitting"}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/Notebook.ipynb", "anchor_text": "this notebook"}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/utils/quick_reco_engine.py", "anchor_text": "quick_reco_engine.py"}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/utils/engine.py", "anchor_text": "engine.py"}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/app/main.py", "anchor_text": "main.py"}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/06b7e7092bc1a88460971844224494ac0c773136/app/main.py#L170-L247", "anchor_text": "these lines in main.py"}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/utils/engine.py", "anchor_text": "engine.py"}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/app/main.py", "anchor_text": "main.py"}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/utils/engine.py", "anchor_text": "engine.py"}, {"url": "https://gist.github.com/badalnabizade/25a2157af9241eb4d6dc5f34e069bd96", "anchor_text": "This markdown file"}, {"url": "http://sparkrecommendationengine.appspot.com/", "anchor_text": "here"}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine/blob/master/Notebook.ipynb", "anchor_text": "upyter Notebook"}, {"url": "https://github.com/badalnabizade/MovieHunter-Recommendation-Engine", "anchor_text": "badalnabizade/MovieHunter-Recommendation-Engine1 User signs up 1.1. main.py assigns a new id to a registered user. 1.2. main.py writes user\u2019s id, name, mail and hashed\u2026github.com"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----4fb163131881---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/data-science?source=post_page-----4fb163131881---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/apache-spark?source=post_page-----4fb163131881---------------apache_spark-----------------", "anchor_text": "Apache Spark"}, {"url": "https://medium.com/tag/cloud-computing?source=post_page-----4fb163131881---------------cloud_computing-----------------", "anchor_text": "Cloud Computing"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----4fb163131881---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4fb163131881&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fserverless-recommendation-system-using-pyspark-and-gcp-4fb163131881&user=Badal+Nabizade&userId=ed6767ae2151&source=-----4fb163131881---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4fb163131881&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fserverless-recommendation-system-using-pyspark-and-gcp-4fb163131881&user=Badal+Nabizade&userId=ed6767ae2151&source=-----4fb163131881---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4fb163131881&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fserverless-recommendation-system-using-pyspark-and-gcp-4fb163131881&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----4fb163131881--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F4fb163131881&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fserverless-recommendation-system-using-pyspark-and-gcp-4fb163131881&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----4fb163131881---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----4fb163131881--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----4fb163131881--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----4fb163131881--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----4fb163131881--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----4fb163131881--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----4fb163131881--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----4fb163131881--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----4fb163131881--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@nabizadebadal?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@nabizadebadal?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Badal Nabizade"}, {"url": "https://medium.com/@nabizadebadal/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "14 Followers"}, {"url": "https://www.linkedin.com/in/badalnabizade/", "anchor_text": "https://www.linkedin.com/in/badalnabizade/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fed6767ae2151&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fserverless-recommendation-system-using-pyspark-and-gcp-4fb163131881&user=Badal+Nabizade&userId=ed6767ae2151&source=post_page-ed6767ae2151--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2Fed6767ae2151%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fserverless-recommendation-system-using-pyspark-and-gcp-4fb163131881&user=Badal+Nabizade&userId=ed6767ae2151&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}