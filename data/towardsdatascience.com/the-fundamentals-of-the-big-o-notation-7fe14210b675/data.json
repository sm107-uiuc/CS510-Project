{"url": "https://towardsdatascience.com/the-fundamentals-of-the-big-o-notation-7fe14210b675", "time": 1683016501.5489101, "path": "towardsdatascience.com/the-fundamentals-of-the-big-o-notation-7fe14210b675/", "webpage": {"metadata": {"title": "The Fundamentals of the Big-O Notation | by Ruben Winastwan | Towards Data Science", "h1": "The Fundamentals of the Big-O Notation", "description": "In the era where the data grows larger and larger, it is not sufficient anymore to create an algorithm that \u2018just works\u2019 to solve the problem. It doesn\u2019t matter what your profession is, whether it is\u2026"}, "outgoing_paragraph_urls": [], "all_paragraphs": ["In the era where the data grows larger and larger, it is not sufficient anymore to create an algorithm that \u2018just works\u2019 to solve the problem. It doesn\u2019t matter what your profession is, whether it is Software Developer, Data Scientist, or Machine Learning Engineer, the ability to create an algorithm that both efficient and scalable is a highly desirable skill to have.", "To create an efficient algorithm, most of the time we need to think outside the box to come up with an idea on how to optimize the code\u2019s performance. And when we try to optimize the code, sometimes we don\u2019t know how to measure the efficiency of our algorithm\u2014 whether it\u2019s improved or not.", "In this post, we\u2019re going to talk about the way on how you can measure your algorithm performance by utilizing the Big-O notation.", "First of all, let\u2019s think for a moment: how do we know that our algorithm is good or efficient? how do we measure the performance of our algorithm? Probably, the easiest way to measure algorithm\u2019s performance is by measuring the time duration it needs to compute the solution.", "However, measuring the time duration is not a great way of assessing the performance of your algorithm because:", "So, there should be a better way to measure the algorithm\u2019s performance.", "Instead of focusing on the time duration to run your algorithm, we need to focus more on the scalability or runtime complexity of our algorithm: how does the performance of our algorithm change as the input size grows larger?", "To measure the runtime complexity of our algorithm, enter the concept behind the Big-O notation.", "The Big-O notation is the term you commonly hear in Computer Science when you talk about algorithm efficiency. But, what does the Big-O notation mean?", "In simple terms, the Big-O notation describes how good is the performance of your algorithm as the input data grows larger.", "With the Big-O notation, we are able to measure the scalability of our algorithm: is our algorithm still going to perform well as the input grows larger?", "In this post we\u2019re going to talk about four of the most common Big-O notation: O(1), O(n), O(n\u00b2), and O(log n).", "These Os stand for Order Of, so O(n) means the Order Of n, where n is the size of the input data. Let\u2019s go through these notations one by one.", "The O(1) notation means that your algorithm has a constant runtime complexity because it takes the same number of operations regardless of the size of the input data.", "To make it more intuitive, let\u2019s have a look at the code snippet below.", "The code snippet above is the simple example of an algorithm with an O(1) notation. The function takes an array and it displays the first element of the array. It doesn\u2019t matter how many elements are there in the array, this function will always run in a constant runtime because its job is only to display the first element of the array.", "Let\u2019s take a look at another algorithm that has O(1) time complexity.", "In the code snippet above, the function takes an array and its job is to assign the third element of the array into a variable called third_index . Again, doesn\u2019t matter how big the size of the input array is, the function will always run in a constant runtime because its only job is to assign the array\u2019s third element value into a variable.", "Now if we plot the time complexity of the algorithm with O(1) notation with the size of input data, we get the following plot.", "As you can see, the algorithm runtime complexity stays constant as the input data grows larger and larger.", "The O(n) notation means that the runtime complexity of your algorithm has a linear relationship with the size of input data. If the size of input data is increased by 2, then the runtime complexity of your algorithm will be increased by 2 as well.", "Let\u2019s take a look at the code snippet below to make it more intuitive.", "Having a loop iterating over elements of an array and printing the value of each of its element is the perfect example of an algorithm which has O(n) notation.", "In the code snippet above, the cost of our algorithm changes with respect to the size of the input array. If the input array only has 2 elements, our algorithm will only take 2 operations to run. If the array has 100 elements, the algorithm will also take 100 operations to run. In other words, the cost of our algorithm increases linearly with the size of the input array.", "Now if we plot the runtime complexity with the size of input data, we get the following plot.", "As you can see, we have a linear relation between the runtime complexity and the size of input data. The more the elements are there in the input array, the more operations it takes for our algorithm to run.", "The O(n\u00b2) notation means that the runtime complexity of your algorithm is proportional to the square of input size. Let\u2019s say that the input size of your array is 3, then the runtime complexity of your algorithm will be increased by 9.", "Let\u2019s take a look at the code snippet below as the example of algorithm with O(n\u00b2) complexity.", "Nested loops are the perfect example of an algorithm with O(n\u00b2) notation. This is because the loop is iterating over each element of an array twice. The inner loop has the complexity of O(n), and the outer loop also has the complexity of O(n). Now if we combine the complexity between inner loop and outer loop, we get the complexity of O(n\u00b2).", "Let\u2019s say that the size of our input array is 3. For outer loop, it takes in total 3 operations to iterate over each element of an array. For each of these 3 operations, it also takes 3 operations to do the inner loop to iterate over each element. This brings to 9 operations in total.", "If we plot the graph, you\u2019ll get the following visualization for an algorithm with O(n\u00b2) complexity.", "As we can see, the cost of our algorithm is going to be much and much more expensive as the size of our input data is increased.", "The next runtime complexity that we should know is O(log n). This notation means that the runtime complexity of your algorithm will be increased by one when the size of input data is doubled.", "Let\u2019s take a look at the code snippet below as the example.", "The code snippet above is the algorithm of binary search which has a runtime complexity of O(log n). Instead of iterating over each element of an array with for loop, the binary search will always recursively divide the size of the input data in half to find the desired value.", "As shown in the code above, we have an array with input size 9. Assuming that the data is perfectly sorted, our goal is to find whether the value of 7 exists in this array. The binary search will first divide the input array in half and check the value in the middle of our array.", "As the value in the middle of our array is 5, this value will then be checked with the value that we\u2019re looking for, which in this case is 7. Since 5 is lower than 7, then the algorithm will use the values in the right hand side of the array, which are 6 until 9.", "Now the input size of our array is 4 instead of 10. The new array then will be divided again by half, which leaves us with an array with a value of 6 and 7 and an array with a value of 8 and 9.", "Since the value of 7 is in the array of 6 and 7, the algorithm will then use this part of an array and ignore the array with the value of 8 and 9.", "Until finally we find the value that we want, which is 7.", "If we draw the plot of the algorithm with the runtime complexity of O(log n), we get the following visualization.", "As you can see, the algorithm that has O(log n) notation is more scalable than O(n) and O(n\u00b2) as the input size grows larger and larger.", "In our example above, if we use the for loop, which has a linear O(n) notation, our algorithm will need 7 operations before it comes up with a solution (since we\u2019re looking for value 7). Meanwhile, with binary search algorithm, which has O(log n) notation, it only takes 4 operations to solve the problem.", "Let\u2019s recap a little bit about different Big-O notations that we have learned so far in terms of their scalability. Below is the plot of these Big-O notations.", "As you can see, the algorithm with O(1) notation has the best scalability as the input size grows larger and larger, while the algorithm with O(n\u00b2) notation has the worst scalability among all.", "To sum up, below is the scalability order of Big-O notation started from the best to worst:", "Now that we know different kinds of Big-O notation, let\u2019s try to find out the runtime complexity of a code. When we try to analyze the runtime complexity of a code, we always have to face two different scenarios: best case scenario and worst case scenario.", "To make it easier for us to understand the difference between best case scenario and worst case scenario, let\u2019s take a look at the code snippet below:", "In the code snippet above, we have one algorithm for linear search (iterating each array\u2019s elements with for loop) and one for binary search (recursively splitting the array). Let\u2019s say we have a perfectly sorted array with 9 elements as you can see above.", "When it comes to determining the Big-O notation of a code, we need to always look at the worst case scenario perspective. Now with that concept in mind, let\u2019s try to estimate the Big-O notation of a code.", "Let\u2019s take a look at the code snippet below and let\u2019s check its complexity.", "When estimating the Big-O notation of a code, we need to always look from the operation in the inner most loop first. Below is the step-by-step on how we should investigate the Big-O complexity of the code above:", "Now that we have analyzed the Big-O notation of every single loops and operations, next let\u2019s analyze the Big-O notation of the whole code. To do this, we also always need to start from the inner most loop.", "When we\u2019re estimating the Big-O notation of a code, we can simplify it by dropping all of the constants. So instead of O(2+5n\u00b2), we can drop all of the constants and left with O(n\u00b2). Hence, the code above has O(n\u00b2) complexity.", "Hopefully, now you know how to measure and estimate the performance of an algorithm by looking at its Big-O notation. Designing a scalable algorithm is very beneficial to optimize the code as the input data grows larger and larger every day.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Science || Machine Learning || Computer Vision || NLP"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F7fe14210b675&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-fundamentals-of-the-big-o-notation-7fe14210b675&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-fundamentals-of-the-big-o-notation-7fe14210b675&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-fundamentals-of-the-big-o-notation-7fe14210b675&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-fundamentals-of-the-big-o-notation-7fe14210b675&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----7fe14210b675--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----7fe14210b675--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@marcellusruben?source=post_page-----7fe14210b675--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@marcellusruben?source=post_page-----7fe14210b675--------------------------------", "anchor_text": "Ruben Winastwan"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5dae9da73c9b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-fundamentals-of-the-big-o-notation-7fe14210b675&user=Ruben+Winastwan&userId=5dae9da73c9b&source=post_page-5dae9da73c9b----7fe14210b675---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7fe14210b675&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-fundamentals-of-the-big-o-notation-7fe14210b675&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7fe14210b675&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-fundamentals-of-the-big-o-notation-7fe14210b675&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@nadineshaabana?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Nadine Shaabana"}, {"url": "https://unsplash.com/s/photos/light?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://medium.com/tag/programming?source=post_page-----7fe14210b675---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/algorithms?source=post_page-----7fe14210b675---------------algorithms-----------------", "anchor_text": "Algorithms"}, {"url": "https://medium.com/tag/data-science?source=post_page-----7fe14210b675---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/data-structures?source=post_page-----7fe14210b675---------------data_structures-----------------", "anchor_text": "Data Structures"}, {"url": "https://medium.com/tag/big-o?source=post_page-----7fe14210b675---------------big_o-----------------", "anchor_text": "Big O"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7fe14210b675&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-fundamentals-of-the-big-o-notation-7fe14210b675&user=Ruben+Winastwan&userId=5dae9da73c9b&source=-----7fe14210b675---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7fe14210b675&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-fundamentals-of-the-big-o-notation-7fe14210b675&user=Ruben+Winastwan&userId=5dae9da73c9b&source=-----7fe14210b675---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7fe14210b675&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-fundamentals-of-the-big-o-notation-7fe14210b675&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----7fe14210b675--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F7fe14210b675&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-fundamentals-of-the-big-o-notation-7fe14210b675&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----7fe14210b675---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----7fe14210b675--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----7fe14210b675--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----7fe14210b675--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----7fe14210b675--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----7fe14210b675--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----7fe14210b675--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----7fe14210b675--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----7fe14210b675--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@marcellusruben?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@marcellusruben?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Ruben Winastwan"}, {"url": "https://medium.com/@marcellusruben/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "925 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5dae9da73c9b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-fundamentals-of-the-big-o-notation-7fe14210b675&user=Ruben+Winastwan&userId=5dae9da73c9b&source=post_page-5dae9da73c9b--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F46c6747bd93b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-fundamentals-of-the-big-o-notation-7fe14210b675&newsletterV3=5dae9da73c9b&newsletterV3Id=46c6747bd93b&user=Ruben+Winastwan&userId=5dae9da73c9b&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}