{"url": "https://towardsdatascience.com/metaprogramming-a-graph-class-in-julia-90a90e8ab45b", "time": 1683005910.821367, "path": "towardsdatascience.com/metaprogramming-a-graph-class-in-julia-90a90e8ab45b/", "webpage": {"metadata": {"title": "MetaProgramming A Graph Class In Julia (Part Two) | by Emma Boudreau | Towards Data Science", "h1": "MetaProgramming A Graph Class In Julia (Part Two)", "description": "Using object-oriented programming in Julia is really interesting, but I think the combination of object-oriented programming in a functional language and Julia\u2019s Lisp-like meta abilities make a\u2026"}, "outgoing_paragraph_urls": [], "all_paragraphs": ["Using object-oriented programming in Julia is really interesting, but I think the combination of object-oriented programming in a functional language and Julia\u2019s Lisp-like meta abilities make a really powerful and adequate connection for something like this.", "If you recall, we left off with a slight problem on our hands: We were accidentally multiplying our objects meta tags together. Here is what our code looked like:", "So it was close, but obviously there were some key issues that needed to be resolved, so the first thing I did when I jumped back into working on it was refactor these two functions. Firstly, our multiplication issue. One downside to meta-programming is that your errors are significantly different and misleading to what might be your issue. This is an issue I figured was caused by a missing comma somewhere in the meta code. If you look in our code above in the update function, there needs to be a comma after that parenthesis. After adding them, boom, the coordinates parse through fine.", "Additionally, I chose to shorten down the function by simply setting it equal to a string, rather than using a conditional. Everything honestly gets better with more time spent on it whenever I program, and I don\u2019t feel good for not already realizing that I could just have it done this way. Here\u2019s the difference:", "The second one was the original", "Today I plan to create our first set of axis and allow the use of colors in the functions, likely as symbols. The axis shouldn\u2019t take long to make, but doing the meta will probably be time consuming. As for the color strings, I have an idea that covers it pretty well. So the first thing I\u2019m going to do is combine these two things into one by using my idea for these strings on a new function to draw lines. When I approach a new function like this, I think of I.O. The only output we need from this function is meta-data, strings combined into an expression then parsed. What I\u2019m trying to say is that composing a code string and filling in parameters is a pretty cool way to do things. Perhaps I\u2019ve just gone off the functional programming deep end though\u2026", "Adding an X and Y axis is something I think will be relatively straightforward. First we will of course need the ability to draw a line. The input we\u2019re going to need for this composition is an array of coordinate pairs, and then the color of the line.", "When accessing dictionary keys, there\u2019s a little trick to being able to access them as strings where you simply use Symbol() to convert the string to a symbol. My plan comes from the exact inverse of this, using string() to convert a symbol. The reason we need to do this is that we can\u2019t parse a string inside of Julia with meta-programming, but simply containing the data in a symbol and then converting it to a string at execution gives this issue resolve. I also added our standard library of basic functions.", "It\u2019s a little hard to see, but we did indeed draw a line down there! Next, we\u2019ll add the meta-data in with the update() function, which might be changed to tag() or something similar. In general, this is what we want to create with meta-data:", "In meta-programming, a surprisingly difficult challenge is string parameters. Unfortunately, it doesn\u2019t appear that we can use backslashes and regular expressions to get out of this situation either\u2026 My way around this involves the use of symbols as strings, similar to the DataFrames.jl trick I have showcased before:", "But in order to get this done, we will need to do the exact opposite and instead assert the string type to the Symbol, making it possible to concatenate a string that is a variable without parsing it as a variable. This is required because when parsed as a variable, rather than raw data, the variable, of course, is undefined. For example, if we were to make an expression out of the normal composition:", "As you can see, our color returns not defined when it is combined into a string. Our goal is to have the string reserve the quotations for the string around this data. After numerous attempts of the classic symbol to string assertion, I was unable to get my original idea off the ground. Though it certainly worked fine in some attempts, I wasn\u2019t able to get it working with my actual types, so on to my next idea,", "A char is a datatype that takes one byte of data to be saved. A string is actually made up of individual chars that are then assembled together. In Julia, we can access the chars within a string the same way we would a dim in an array:", "And this is a great way to distinguish the inherent differences on a structural level between a string and an integer. Believe it or not, an integer can also be contained within one byte of data, but this byte will hold the entire number, rather than a single character from the number.", "Of course, you can access dims in an array in the same way you can access chars in a string, and this is the reason that I have always reiterated that strings are a lot more like arrays than it might seem at a first glance. For my idea, the easiest way would be to add our string delimiters as chars into our expression, but there is a pretty good chance that this will not go as planned. The second option is to write a string parser that can transform our data into one consecutive string iteratively.", "For my first test, I tried the easiest option, you can see how it was done above. After parsing and evaluating, this was the output I obtained:", "You might be wondering why I am not simply using a regular expression with the metacharacter \\\u201d. Well\u2026", "We can\u2019t concatenate expressive strings into a single string type.", "What I\u2019ve decided to do for now is give colors a little break and move on, but we will certainly be coming back to them in one of my other articles to come!", "After looking back into my functions and revising, I quickly realized that the loop at the beginning was definitely setting y equal to x, here it is denoted:", "After correcting this issue, I was finally able to plot my secret message:", "I was certainly hoping that we\u2019d have functioning colors and axis today, but it seems like these stories get really long really fast! Regardless, I\u2019m pretty satisfied with how the plotting is going, regardless of all the roadblocks I have been hitting. I have been having heaps of fun with this project, and I have certainly learned a lot. Stay safe, stay home, and stay healthy!", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F90a90e8ab45b&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetaprogramming-a-graph-class-in-julia-90a90e8ab45b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetaprogramming-a-graph-class-in-julia-90a90e8ab45b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetaprogramming-a-graph-class-in-julia-90a90e8ab45b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetaprogramming-a-graph-class-in-julia-90a90e8ab45b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----90a90e8ab45b--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----90a90e8ab45b--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://emmettgb.medium.com/?source=post_page-----90a90e8ab45b--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=post_page-----90a90e8ab45b--------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetaprogramming-a-graph-class-in-julia-90a90e8ab45b&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c----90a90e8ab45b---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F90a90e8ab45b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetaprogramming-a-graph-class-in-julia-90a90e8ab45b&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F90a90e8ab45b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetaprogramming-a-graph-class-in-julia-90a90e8ab45b&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/metaprogramming-a-coordinate-parser-with-compose-in-julia-a0d163c6fb21?source=post_stats_page---------------------------", "anchor_text": "Part One"}, {"url": "https://medium.com/tag/programming?source=post_page-----90a90e8ab45b---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/metaprogramming?source=post_page-----90a90e8ab45b---------------metaprogramming-----------------", "anchor_text": "Metaprogramming"}, {"url": "https://medium.com/tag/julia?source=post_page-----90a90e8ab45b---------------julia-----------------", "anchor_text": "Julia"}, {"url": "https://medium.com/tag/graphics?source=post_page-----90a90e8ab45b---------------graphics-----------------", "anchor_text": "Graphics"}, {"url": "https://medium.com/tag/computer-science?source=post_page-----90a90e8ab45b---------------computer_science-----------------", "anchor_text": "Computer Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F90a90e8ab45b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetaprogramming-a-graph-class-in-julia-90a90e8ab45b&user=Emma+Boudreau&userId=ea170050148c&source=-----90a90e8ab45b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F90a90e8ab45b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetaprogramming-a-graph-class-in-julia-90a90e8ab45b&user=Emma+Boudreau&userId=ea170050148c&source=-----90a90e8ab45b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F90a90e8ab45b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetaprogramming-a-graph-class-in-julia-90a90e8ab45b&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----90a90e8ab45b--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F90a90e8ab45b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetaprogramming-a-graph-class-in-julia-90a90e8ab45b&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----90a90e8ab45b---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----90a90e8ab45b--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----90a90e8ab45b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----90a90e8ab45b--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----90a90e8ab45b--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----90a90e8ab45b--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----90a90e8ab45b--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----90a90e8ab45b--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----90a90e8ab45b--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://emmettgb.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "4.6K Followers"}, {"url": "https://twitter.com/emmettboudgie", "anchor_text": "https://twitter.com/emmettboudgie"}, {"url": "https://github.com/emmettgb", "anchor_text": "https://github.com/emmettgb"}, {"url": "https://ems.computer/", "anchor_text": "https://ems.computer/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetaprogramming-a-graph-class-in-julia-90a90e8ab45b&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff16bf42bb45f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetaprogramming-a-graph-class-in-julia-90a90e8ab45b&newsletterV3=ea170050148c&newsletterV3Id=f16bf42bb45f&user=Emma+Boudreau&userId=ea170050148c&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}