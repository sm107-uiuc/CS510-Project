{"url": "https://towardsdatascience.com/julias-big-problem-with-namespace-996d2e9ed71e", "time": 1683014360.61572, "path": "towardsdatascience.com/julias-big-problem-with-namespace-996d2e9ed71e/", "webpage": {"metadata": {"title": "Julia\u2019s Big Problem With Namespace | by Emma Boudreau | Towards Data Science", "h1": "Julia\u2019s Big Problem With Namespace", "description": "Julia is a modern and young programming language that has been taking the scientific computational community by storm since its rather recent 1.0 release in August of 2018. Although Julia as a\u2026"}, "outgoing_paragraph_urls": [], "all_paragraphs": ["Julia is a modern and young programming language that has been taking the scientific computational community by storm since its rather recent 1.0 release in August of 2018. Although Julia as a language comes with an overwhelming amount of fantastic attributes that are useful for developers, such as polymorphism, and extremely dynamic syntax and typing, with Julia being such a young and relatively complicated language, it is easy to see why some issues could arise with the programming language.", "To understand why Julia is not very good at handling naming conflicts, we need to take a look at how Julian modules work. For starters, the standard identifier for a module is \u201c module,\u201d so we can create a module with something like this:", "This would make a module that is called fizz with a function called buzz as a child. We could access buzz in any of the following ways:", "Whenever we import buzz without fizz, we are using what is called a direct import. This means that we are only going to be using this specific function, and the rest of the module is not going to be loaded into our environment. This is a great way to prevent naming conflicts in itself, because if we only need specific methods or structs from different modules then we can grab them accordingly. The difference between \u201c import\u201d and \u201c using\u201d should also be noted. Whenever we use \u201c import,\u201d we are explicitly importing the module, function, or type. This means that we plan to provide extension to it. For example, I could have a dispatched method like this:", "And then explicitly import it and provide operations for more types:", "This would, of course, make it so that if a float were to be used with this method, we would call my new add_10 function that it is routed to with dispatch.", "Typically, these naming conventions are not conflict-prone. It is unlikely that we are going to run into issues when importing directly, and this certainly wouldn\u2019t be the case without us being aware of the conflicts when they arise. The issue that you might encounter, however, is that most Julia modules follow the functional paradigm to a T. This means that they could potentially use export on top of export \u2014 which will put in jeopardy your personal naming conventions across the board. Consider the following module:", "The difference that the export argument makes is that now we will get direct access to buzz whenever we import the module fizz. Take note that this is the typical convention with most Julia packages.", "So with that in mind, consider two popular Julia modules:", "These are both graphing libraries that use the method plot(). While they still take radically different parameters, these are regular functions not dispatch operations. Another important thing to note is that they both take many key-word arguments, which would be nearly impossible to account for in dispatch. Both of these methods are also exported, meaning whenever we go to import both of them, we will without a doubt receive a naming conflict. This might not be true if we were to use a direct convention, like using Plots: plot , but there is still an issue if we wanted to use both packages in tandem, for example.", "Also, if you would like to learn more about both graphing libraries, I have written some neat articles you could check out on both of them!:", "While this issue is quite a difficult one to tackle as a language, there are some things that can be taken advantage of in Julia right now to assist with this issue. Firstly, dispatch is going to be a great friend when working with naming conflicts, and could potentially get you around most name issues that you might run into in the Julia language. However, as I touched on above, it can be rather difficult to dispatch methods with lots of keyword arguments and parameters, and sometimes even impossible. So while dispatch might be one of the better methods of avoiding conflicts, it certainly isn\u2019t a sure-fire way to avoid said conflicts.", "A great way to think about what you could do to avoid naming conflicts in a programming language is to look around and see what other programming languages are doing to avoid them. A great example of a language that is rather similar to Julia in a lot of ways is of course Python. Python uses aliases that can be defined by the user to avoid naming conflicts incredibly effectively. However, when we look at this same concept in Julia, we see that while aliasing is possible, it still won\u2019t enable us to bypass a name conflict:", "While this might seem like a solution, the issue still exists where you have defined Queryverse and all of its exported identifiers and they will conflict with new identifiers entering your environment under the same name. The closest we could probably get in this regard is to explicitly import a specific method or type, and then set a constant equal to that type.", "Other than these two rather simple, and not very useful solutions, there really isn\u2019t a lot of potential for avoiding naming conflicts like the plague in the Julia language. At least as far as I know, these two are the best bet for prevention, but won\u2019t get you out of hot water if you\u2019re already trying to work around the problem.", "With this serious problem that some developers might encounter comes a very great solution that the Julia language could potentially carry over from C++. C++ uses a concept called name-spacing which allows one to always direct which module we want to use, and even which part of the module we want to use in any specific scenario. Consider the example of STD in C++:", "STD is a name-space, and cout is a function contained within the name-space. These are both included in the package <iostream> which we include at the top. For every point in the code that we would need to call cout, we would call std::cout, instead of just cout. This means that if we had a new identifier from a different name-space, say foo::cout, we could still use that function in exactly the same way. Furthermore, we could also call using on our namespace to make the object or function available in both the global and local scope:", "I think this would be a great addition for some extended usability to the include() method in Julia. Instead of only being able to include .JL files, we could have it dispatched with module names, as well. This would make it possible to create name-spaces in Julia code based on what modules they reside from. Include could be treated as namespace syntax, while using is still used the same way it was always used. Here is an example of some theoretical code:", "While these theoretical suggestions for movement with the language might make sense for future iterations of Julia, it\u2019s important to consider the options that developers might have available to them now \u2014 outside of the Julia base. This saving grace of course comes in the form of modules that might help to avoid naming conflicts in the Julia language. For this purpose, consider the Pythonic example of avoid conflicts using aliases. Allow me to introduce", "ImportMacros.jl allows one to use a macro to create Pythonic aliasing syntax prior to loading exports. If we were to use the Import macro in this circumstance, we could avoid defining the module in our current scope. While this might not necessarily work with exports (and thus isn\u2019t the greatest solution on Earth,) you could still call exports directly and alias them accordingly. Although this solution might not be the best long-term solution, it might get you out of a pickle while a better solution is developed or conjured.", "The Julia programming language does a lot of very awesome things very well. While the language is great and offers a lot of things some might have never even thought possible, it does come with its fair share of issues. It is important to remember that Julia as a language is incredibly young, and still being worked on by the open-source community each and every day. So with that, the language will most certainly be improved in the future and built upon, but is bound to have issues from time to time.", "I would really love to see the C++ approach to name-spacing, it would be interesting to see how that problem could be tackled in Julia. In terms of solutions, it might be one of the most coherent that is also not going to change how the core of the language functions as of 1.5.1.", "Regardless, the Julia language is an ever-expanding and spectacular thing that I think is most certainly worth checking out. Thank you for reading, and I hope that at the very least these concepts were interesting!", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F996d2e9ed71e&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-big-problem-with-namespace-996d2e9ed71e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-big-problem-with-namespace-996d2e9ed71e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-big-problem-with-namespace-996d2e9ed71e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-big-problem-with-namespace-996d2e9ed71e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----996d2e9ed71e--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----996d2e9ed71e--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://emmettgb.medium.com/?source=post_page-----996d2e9ed71e--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=post_page-----996d2e9ed71e--------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-big-problem-with-namespace-996d2e9ed71e&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c----996d2e9ed71e---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F996d2e9ed71e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-big-problem-with-namespace-996d2e9ed71e&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F996d2e9ed71e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-big-problem-with-namespace-996d2e9ed71e&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/gadfly-jl-the-pure-julia-plotting-library-from-your-dreams-3ee6ca107a5c", "anchor_text": "Gadfly.jl \u2014 The Pure Julia Plotting Library From Your DreamsA look at Julia\u2019s best option for statistical plotting as of 2020towardsdatascience.com"}, {"url": "https://towardsdatascience.com/spruce-up-your-gr-visualizations-in-julia-88a964450a7", "anchor_text": "Spruce up your GR visualizations in JuliaThat\u2019s right, it\u2019s Julia again, I promise R, Scala, and Python are still in this love-circletowardsdatascience.com"}, {"url": "https://github.com/fredrikekre/ImportMacros.jl", "anchor_text": "fredrikekre/ImportMacros.jlProvides two macros: @import and @using which loads a module or object and binds it to an alias. @import can be used\u2026github.com"}, {"url": "https://medium.com/tag/programming?source=post_page-----996d2e9ed71e---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/julia?source=post_page-----996d2e9ed71e---------------julia-----------------", "anchor_text": "Julia"}, {"url": "https://medium.com/tag/data-science?source=post_page-----996d2e9ed71e---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/programming-languages?source=post_page-----996d2e9ed71e---------------programming_languages-----------------", "anchor_text": "Programming Languages"}, {"url": "https://medium.com/tag/coding?source=post_page-----996d2e9ed71e---------------coding-----------------", "anchor_text": "Coding"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F996d2e9ed71e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-big-problem-with-namespace-996d2e9ed71e&user=Emma+Boudreau&userId=ea170050148c&source=-----996d2e9ed71e---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F996d2e9ed71e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-big-problem-with-namespace-996d2e9ed71e&user=Emma+Boudreau&userId=ea170050148c&source=-----996d2e9ed71e---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F996d2e9ed71e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-big-problem-with-namespace-996d2e9ed71e&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----996d2e9ed71e--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F996d2e9ed71e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-big-problem-with-namespace-996d2e9ed71e&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----996d2e9ed71e---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----996d2e9ed71e--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----996d2e9ed71e--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----996d2e9ed71e--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----996d2e9ed71e--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----996d2e9ed71e--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----996d2e9ed71e--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----996d2e9ed71e--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----996d2e9ed71e--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://emmettgb.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "4.6K Followers"}, {"url": "https://twitter.com/emmettboudgie", "anchor_text": "https://twitter.com/emmettboudgie"}, {"url": "https://github.com/emmettgb", "anchor_text": "https://github.com/emmettgb"}, {"url": "https://ems.computer/", "anchor_text": "https://ems.computer/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-big-problem-with-namespace-996d2e9ed71e&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff16bf42bb45f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-big-problem-with-namespace-996d2e9ed71e&newsletterV3=ea170050148c&newsletterV3Id=f16bf42bb45f&user=Emma+Boudreau&userId=ea170050148c&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}