{"url": "https://towardsdatascience.com/intro-to-algorithms-and-constructors-in-julia-562905d30071", "time": 1683018499.5977018, "path": "towardsdatascience.com/intro-to-algorithms-and-constructors-in-julia-562905d30071/", "webpage": {"metadata": {"title": "Intro To Algorithms And Constructors In Julia | by Emma Boudreau | Towards Data Science", "h1": "Intro To Algorithms And Constructors In Julia", "description": "In the previous edition of The Comprehensive Julia Tutorial, we set up our new package, SuperFrames.jl and completed a Project.toml file. While we might not have gotten that deep into coding, it is\u2026"}, "outgoing_paragraph_urls": [], "all_paragraphs": ["In the previous edition of The Comprehensive Julia Tutorial, we set up our new package, SuperFrames.jl and completed a Project.toml file. While we might not have gotten that deep into coding, it is the knowledge of how packages are created and distributed in the Julia language that is going to come into importance here. Fortunately for the bored, however, today we are actually going to be programming and working on the first part of the algorithm to create our new SuperFrame type!", "Constructors in Julia are a complete beast of their own, with their own attributes and qualities that give them value over competing solutions in other programming languages. While most languages might have simple \u201c struct\u201d style constructors, or even \u201c class\u201d constructors, Julia\u2019s paradigm is a bit different and uses two constructors in tandem to make structs a lot more usable for scientific programming.", "Within Julia, most constructors that you will use will likely be outer constructors. You might be familiar with outer constructors, as they are the most basic type of constructor in Julia and carry into a lot of functional programming languages. The key-word to create a new constructed type is struct, followed by a definition, like so:", "Datatypes for that constructor are then placed below it with returns being the syntax for separation between these parameters.", "We can also add the key-word \u201c mutable\u201d to this expression if we want the data to be dynamic after this type is constructed:", "In our example, we are looking at a struct that needs two arguments passed with it:", "The problem with this type is that any end-user who wants to use it is going to need to call it by creating their own index type, then creating a vector of vectors, then finally passing those through this constructor to call a SuperFrame. That is a lot of programming just to get a DataFrame, which can usually be had with a single line of code.", "Fortunately, we can use an inner constructor to create more input with identical output with this struct. In order to create an inner constructor, we simply create a function inside this constructor that will take different types under the same name, and dispatch will take care of the rest for us!", "While this is not a constructor just yet, it shows the basics of how these two work together in random to create types for us. If we were to call the SuperFrame constructor with a vector of vectors and an index, we could still create the type SuperFrame, however if we wanted to create a new SuperFrame from data that is in a dictionary, we could pass that and call the inner constructor, which is made to take a dictionary. That being said, we will now need an algorithm which is capable of turning a dictionary into a vector of vectors and an index. Let\u2019s start by looking at the Index type from DataFrames.jl.", "From the looks of this struct, in order to create our new Index type we need a dictionary, lookup, which is going to hold values of row-count correlating to integers, and an array of symbols which I assume will be the name of our columns. Of course, these column names correlate to the keys in our dictionary.", "A key pillar of great software engineering is a concept called MVP, or Minimum Viable Product. What this concept means is that originally whenever a programmer wants to solve a problem, they shouldn\u2019t worry about the details \u2014 but should only worry about it getting to work. I think this is a great programming strategy, functions can be altered and optimized over time, but if we don\u2019t have a working approach then we couldn\u2019t even tell you if we are able to get the result we want or if we need to try something different for our particular problem.", "Think of it this way \u2014 we need to make a function that is a proof-of-concept for what we might use in the future. With that in mind, while it is certainly possible we could do this in a much more concise way, I think that thinking about the problem before the optimization is certainly the way to go when working on any algorithm. We need to make a relatively basic little algorithm to enumerate our dictionary\u2019s values for a lookup dictionary and push our names to an array that we can pass into this new type. Let\u2019s start by thinking of what we need, a dictionary and an array:", "For starters, I decided to use an index counter \u2014 just to show as a possibility for looping algorithms. Defining things to be populated in the loop is a very common programming practice when populating datatypes with loops. However, there are some more in-depth approaches we are going to be refining this function with in the future that are going to be alternate ways of approaching the problem we are now going to solve with a counter and two empty arrays.", "I set the index as an integer datatype equal to zero, names as an empty array that we intend to populate with symbols, and lastly lookup which has the corresponding enumerated count and is a Dict datatype. Now let\u2019s look at constructing a loop. In Julia, we treat multiple outputs just as we would for returns in the for loops. However, these variable names must be comprised into a list, otherwise we will get", "thrown out at us. The loop ends up looking like this in the head, it can be thought of similar to the zip() loops we went over in the looping rendition of this series.", "Now I think it is important to talk about scope. Why did we initialize the dictionary and the list datatype before this loop? This is because of a concept called scope that we will be talking about more in the next edition of this series. Scope is an important programming concept that has to do with the privacy of types across different levels of an application. This is why we can use the same variable name 100 times in the same file just by using different functions and types. Variables, data, and anything else we wrote in this function is private to this function\u2019s scope. This means that we don\u2019t have a globally defined variable called index that is equal to zero. If this were the case, we could load the module and then that variable would be available.", "While functions, types, modules, and a global environment all have scope, so do loops. That being said, variable names within this loop definition are private specifically to this task of iteration. They are destroyed when the loop returns 0, and are not held by the function in any way other than knowing that it is holding a loop that does _ and _.", "Finally, this for loop is relatively simple and just involves appending the names contained in our dictionary to our new array of name symbols. Then we add one to the index, and put it as a corresponding pair to the current name we are looping through.", "These are the two types that we need to create our index type. Now that all of this is done, we can just plug those into that outer constructor for Index from DataFrames.jl and create an index:", "(I also went ahead and casted the Vector{Symbol} type onto names. Not doing this could cause a methoderror, but I put it there preemptively.)", "I am really excited about this project! We have half of the puzzle for our new index type and we are almost ready to start using methods from DataFrames. I promise these next few episodes, the extended functionality that we will automatically obtain from building on this package is going to be worth it! I want to say also that there are a few things I want to review more from this episode, so don\u2019t worry, we are only half way through this and I will continue to explain \u2014 go further on explaining and demonstrating scope and optimize this function.", "I am especially excited to optimize this short algorithm into only a few lines to show the power of Julia. If you think you have a better approach, feel free to fork the repository on Github, why not! I would have a blast explaining how your code works! I think the best approach off the top of my head is instead to use the enumerate() method (which we haven\u2019t gone over yet, hence why I didn\u2019t use it,) and either call the keys by position or see if the looping syntax will support iterating 3 elements based on our dictionary\u2019s key and value pairs and the enumerated pairs. Regardless, I am sure it will be a fun walk through Julian experimentation! Thank you for watching and reading, it means the world to me!", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F562905d30071&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-algorithms-and-constructors-in-julia-562905d30071&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-algorithms-and-constructors-in-julia-562905d30071&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-algorithms-and-constructors-in-julia-562905d30071&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-algorithms-and-constructors-in-julia-562905d30071&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----562905d30071--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----562905d30071--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://emmettgb.medium.com/?source=post_page-----562905d30071--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=post_page-----562905d30071--------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-algorithms-and-constructors-in-julia-562905d30071&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c----562905d30071---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F562905d30071&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-algorithms-and-constructors-in-julia-562905d30071&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F562905d30071&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-algorithms-and-constructors-in-julia-562905d30071&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/ChifiSource/SuperFrames.jl", "anchor_text": "ChifiSource/SuperFrames.jlA DataFrames.jl extension we programmed together :) If you'd like to learn more, you can work with us by following\u2026github.com"}, {"url": "https://medium.com/tag/programming?source=post_page-----562905d30071---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/julia?source=post_page-----562905d30071---------------julia-----------------", "anchor_text": "Julia"}, {"url": "https://medium.com/tag/data-science?source=post_page-----562905d30071---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/software-development?source=post_page-----562905d30071---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/software-engineering?source=post_page-----562905d30071---------------software_engineering-----------------", "anchor_text": "Software Engineering"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F562905d30071&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-algorithms-and-constructors-in-julia-562905d30071&user=Emma+Boudreau&userId=ea170050148c&source=-----562905d30071---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F562905d30071&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-algorithms-and-constructors-in-julia-562905d30071&user=Emma+Boudreau&userId=ea170050148c&source=-----562905d30071---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F562905d30071&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-algorithms-and-constructors-in-julia-562905d30071&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----562905d30071--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F562905d30071&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-algorithms-and-constructors-in-julia-562905d30071&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----562905d30071---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----562905d30071--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----562905d30071--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----562905d30071--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----562905d30071--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----562905d30071--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----562905d30071--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----562905d30071--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----562905d30071--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://emmettgb.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "4.6K Followers"}, {"url": "https://twitter.com/emmettboudgie", "anchor_text": "https://twitter.com/emmettboudgie"}, {"url": "https://github.com/emmettgb", "anchor_text": "https://github.com/emmettgb"}, {"url": "https://ems.computer/", "anchor_text": "https://ems.computer/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-algorithms-and-constructors-in-julia-562905d30071&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff16bf42bb45f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-algorithms-and-constructors-in-julia-562905d30071&newsletterV3=ea170050148c&newsletterV3Id=f16bf42bb45f&user=Emma+Boudreau&userId=ea170050148c&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}