{"url": "https://towardsdatascience.com/numpy-crash-course-zero-to-hero-c1788a8a48ac", "time": 1683008846.245229, "path": "towardsdatascience.com/numpy-crash-course-zero-to-hero-c1788a8a48ac/", "webpage": {"metadata": {"title": "NumPy Crash Course \u2014 Zero to Hero | by Prejith Premkumar | Towards Data Science", "h1": "NumPy Crash Course \u2014 Zero to Hero", "description": "The objective of this article is to give anyone with knowledge in Python a quick crash course on the capabilities of numPy and the things they should read up more on, depending on their use case\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/prejithp/numpy-walkthrough-notebook", "anchor_text": "here", "paragraph_index": 52}], "all_paragraphs": ["The objective of this article is to give anyone with knowledge in Python a quick crash course on the capabilities of numPy and the things they should read up more on, depending on their use case.", "Before we start exploring numPy, let us answer the 3 basic questions that is going to come to anyone\u2019s mind:", "numPy, or numerical Python is a library that is used for advanced mathematical computations while maintaining high levels of performance. According to Wikipedia, \u201cNumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays\u201d", "numPyis used for a lot of different reasons. Lets list down a few of them:", "The sole reason that numpy is imported as np is convention. You are free to use another alias but it's not recommended as this is what you will find everywhere and it's better to stick to standards", "The primary reason that numpy is fast is because of the nd-array type that it uses to store and manipulate data", "An ndarray is a generic multidimensional container for homogenous data. It provides vectorized arithmetic operations and sophisticated broadcasting capabilities. Every ndarray has 2 properties: shape and dtype. shape is a tuple providing the dimension of the array and dtype provides you the datatype of the array.", "The dtype of the array can also be explicitly specified while defining the array giving you fine-tuned control over the array.", "Let's create a numpy array from an array. This is possible by passing the array as input to the np.array function", "A numpy array has numerous properties which gives more information about them.", "The below 2 cells of code warrant a detailed explanation. The itemsize parameter returns the size of a single item in the array. In this case, we have an integer array taking up 32 bits of space for a single item and this is equivalent to 4 bytes(1 byte = 8 bits). The following cell showcases the nbytes parameter which returns the size in bytes of the entire array, thereby providing a value of 12 bytes(4 bytes * 3 items).", "To put it short: itemsize provides the size of a single item in the array while nbytes returns the size of the entire array.", "There is a reason that numpy\u2019s nd-array is faster than Python\u2019s native list. Let's look at this in depth in the following cells", "numpy arrays are homogenous and is handled faster in memory. Now compare this to a Python List where you can put anything in; every entry in a Python list is a Python object and this causes overhead in computations. This is the primary reason why numpy arrays are significantly faster than the traditional Python lists", "Lets now look at some of the functions which makes numpy a flexible and handy library.", "arange generates a list of numbers within the range of the digit passed", "linspace returns a set of linearly-spaced items within the range passed as input. In linspace, the starting digit, ending digit along with the number of digits required as passed as input. Basically, it returns an array with the required number of digits in a specified interval", "ones creates an array filled with ones. The parameter passed as input is the size of the required array", "zeros creates an array filled with zeroes. The parameter passed as input is the size of the required array", "zeros_like creates an array with the same size as the array passed as input. The generated array will have zeros as elements", "eye creates an identity matrix. The generated matrix will be of the dimensions of the integer passed as input", "empty creates an array filled with garbage values, usually zeroes. The parameter passed as input is the size of the required array", "numpy follows the usual rules of Python when it comes to indexing and slicing. I am laying out a few examples below that you can play around with and experiment with:", "An important thing to keep in mind while using slicing in numpy is that the slices are essentially references(views) and hence, any changes that you make to the sliced data will reflect in the parent. Lets look at an example", "The copy() method can be used to create copies instead of such views", "A numpy array can be multi-dimensional. It also gives you the ability to change an existing array to a shape of your liking provided that it meets multiple constraints", "reshape lets you do exactly what the name says. It lets you shape the array into the dimensions passed as input. If you do not pass a dimension that the array can be reshaped into, then the function will return an error. Say, the array has 10 elements and you try to reshape it to an array of shape 3x5, then reshape will return an error", "newaxis is used to create a new axis in the data. It is commonly used when working on modelling techniques as models require the data to be shaped in a certain manner. As you can see below, if the newaxis parameter is in the first position, then a new row vector will be generated. If its in the second position, then a column will be created with each of the elements being a separate vector.", "Arrays can be concatenated in numpy using the concatenate method. The list of arrays to be concatenated is to be passed as input to the concatenate function.", "The primary purpose of Ufunc is to be able to speed up repeated operations on values in a numpy array. It can work both between a scalar value & an array and between 2 arrays", "This is not just syntactically better & intuitive, Its also faster. Lets try that out below", "As can be seen above, the ufunc is multitudes faster than the looped version of the code. This difference becomes more and more pronounced as the computational logic involved gets more complex", "In this section, we will explore the various aggregation functions that numpy provides. numpy ships with a standard sum() function which returns the sum of all elements in the array. You may ask what the difference is, between the native Python function and the numpy function! After all, they are doing the same functionality; provide the sum of elements. Let\u2019s check it out below", "From the above code block, it's pretty evident how fast numpy is, compared to the native functions. This applies to most, if not all, aggregation functions available in numpy", "One thing to keep in note while using the aggregation functions is that these are prone to NaN values while you are using them, i.e., if you have a NaN-value in your array, these aggregation functions will fail. In such cases, you can use their NaN-safe alternatives. Just to give you an example: nansum() is the NaN-safe alternative for the sum function", "We are now going to look at an operation that you might have used a lot without having a conceptual understanding. In broadcasting, you perform an operation on an entity that has a different shape/dimensions.", "A simple example of this could be adding a scalar to a numpy array. You can basically think of the values being duplicated to match the dimension of the array followed by the operation that is to be performed.", "Broadcasting is an operation that can be elaborated on, but that is not my goal here with this post", "There will be times when you would like to perform logical checks on a piece of data. numpy provides all the normal logical operations that you would expect: greater than, less than & equal to checks. The logical functions return an array of results in Boolean indicating if they satisfied the condition or not", "numpy also provides useful functions such as any() and all() which are used to perform the following checks: if there is any element that fulfilled the condition or if all the elements satisfy the condition, respectively. They provide a single Boolean value as output which indicates the result", "From the above 2 code blocks: the following can be understood:", "Say we want a count of values that satisfy this particular condition, you can use the sum() method as follows. It counts the number of True values in the array", "This can also be compounded to check for multiple conditions. The same can be done for the any and all functions", "You might have seen the above arrays which provide values as a Boolean array and wondered how that\u2019s helpful because you still need to provide further operations to make sense of the output. Here is where masking comes in; the True/False array can be passed into the array to provide only those values which meet the conditions", "Fancy indexing is nothing but the ability to access multiple elements of the array at once", "As you might have guessed, we can pass in an array as the list of indices too", "The true power of fancy indexing comes out when it is combined with the likes of slicing, indexing and broadcasting", "The sorting algorithm provided by numpy is very efficient. There are 2 ways you can sort a numpy array; in-place and by calling the numpy sort function that returns the sorted array", "Let\u2019s shuffle our array first so that we can sort it and play around with it", "Calling np.sort on the array will return a copy of the array that is sorted and does not sort the array in place as demonstrated below", "If you call sort on the array, then the array will be sorted in-place and there\u2019s no need to save it to another array. Both methods perform the same functionality and are used depending on the required use-case", "numPy has a lot more capabilities, especially with regards to higher-dimensional data. numPy can easily work with, and manipulate data of higher dimensions. I have not decided to go into such details as that would defeat the purpose of this post.", "I have compiled a Jupyter Notebook with the entire contents of this blog here.", "There are a lot of things I haven\u2019t covered as its outside the scope of this blog, however, if you are interested in reading more about numpy, I would highly recommend the following resources:", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Scientist; Applications Developer during college days. Twitter: @prejithp97"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fc1788a8a48ac&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-crash-course-zero-to-hero-c1788a8a48ac&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-crash-course-zero-to-hero-c1788a8a48ac&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-crash-course-zero-to-hero-c1788a8a48ac&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-crash-course-zero-to-hero-c1788a8a48ac&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----c1788a8a48ac--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c1788a8a48ac--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@prejithp?source=post_page-----c1788a8a48ac--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@prejithp?source=post_page-----c1788a8a48ac--------------------------------", "anchor_text": "Prejith Premkumar"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fac72f1e2277d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-crash-course-zero-to-hero-c1788a8a48ac&user=Prejith+Premkumar&userId=ac72f1e2277d&source=post_page-ac72f1e2277d----c1788a8a48ac---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc1788a8a48ac&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-crash-course-zero-to-hero-c1788a8a48ac&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc1788a8a48ac&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-crash-course-zero-to-hero-c1788a8a48ac&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@nhillier?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Nick Hillier"}, {"url": "https://unsplash.com/collections/10620294/medium-shortlist?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://github.com/prejithp/numpy-walkthrough-notebook", "anchor_text": "here"}, {"url": "https://jakevdp.github.io/PythonDataScienceHandbook/", "anchor_text": "Python Data Science Handbook"}, {"url": "http://shop.oreilly.com/product/0636920023784.do", "anchor_text": "Python for Data Analysis"}, {"url": "https://numpy.org/doc/", "anchor_text": "numpy documentation"}, {"url": "https://medium.com/tag/numpy?source=post_page-----c1788a8a48ac---------------numpy-----------------", "anchor_text": "Numpy"}, {"url": "https://medium.com/tag/python?source=post_page-----c1788a8a48ac---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----c1788a8a48ac---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/data-science?source=post_page-----c1788a8a48ac---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/analytics?source=post_page-----c1788a8a48ac---------------analytics-----------------", "anchor_text": "Analytics"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc1788a8a48ac&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-crash-course-zero-to-hero-c1788a8a48ac&user=Prejith+Premkumar&userId=ac72f1e2277d&source=-----c1788a8a48ac---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc1788a8a48ac&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-crash-course-zero-to-hero-c1788a8a48ac&user=Prejith+Premkumar&userId=ac72f1e2277d&source=-----c1788a8a48ac---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc1788a8a48ac&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-crash-course-zero-to-hero-c1788a8a48ac&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c1788a8a48ac--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fc1788a8a48ac&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-crash-course-zero-to-hero-c1788a8a48ac&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----c1788a8a48ac---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----c1788a8a48ac--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----c1788a8a48ac--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----c1788a8a48ac--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----c1788a8a48ac--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----c1788a8a48ac--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----c1788a8a48ac--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----c1788a8a48ac--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----c1788a8a48ac--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@prejithp?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@prejithp?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Prejith Premkumar"}, {"url": "https://medium.com/@prejithp/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "9 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fac72f1e2277d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-crash-course-zero-to-hero-c1788a8a48ac&user=Prejith+Premkumar&userId=ac72f1e2277d&source=post_page-ac72f1e2277d--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2Fac72f1e2277d%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-crash-course-zero-to-hero-c1788a8a48ac&user=Prejith+Premkumar&userId=ac72f1e2277d&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}