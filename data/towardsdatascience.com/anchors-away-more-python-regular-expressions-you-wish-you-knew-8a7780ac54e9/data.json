{"url": "https://towardsdatascience.com/anchors-away-more-python-regular-expressions-you-wish-you-knew-8a7780ac54e9", "time": 1683015701.809851, "path": "towardsdatascience.com/anchors-away-more-python-regular-expressions-you-wish-you-knew-8a7780ac54e9/", "webpage": {"metadata": {"title": "Advanced Regular Expressions in Python | Towards Data Science", "h1": "Anchors Away! More Python Regular Expressions Concepts You Wish You Knew", "description": "Text in data analysis can be hard. Unstructured text data in R can be tamed with regular expressions (regex). Learn to use anchors, negation, lookarounds..."}, "outgoing_paragraph_urls": [{"url": "http://www.linkedin.com/in/realdrewdata", "anchor_text": "www.linkedin.com/in/realdrewdata", "paragraph_index": 42}], "all_paragraphs": ["So you already know the basics of regular expressions, or regex, in Python. Things like how to use character sets, meta characters, quantifiers, and capture groups are the basic building blocks, but you are a power user, never satisfied with just the basics. Your text wrangling problems are more intricate than you could ever hope to solve with just those tools. Lucky for you there are more regex concepts in Python to learn. It\u2019s anchors away for more tools for text wrangling goodness!", "Not sure about the basics? Check out my piece on the building blocks of regular expressions, or regex, in Python.", "Before we can set sail on the SS Regular Expressions, we need to discuss the anchor. More specifically, text anchors. A text anchor says to look for matches either at the beginning or end of a string. In Python, there are 2 types of anchors:", "As a reminder, to use regex in Python, you need to import the re module. The re.findall() function is particularly useful when experimenting with new regex topics such as anchors. It will return a list containing a vector of the actual values of the matches in the string. Make sure to load the re module before you get started.", "To set sail, we must raise the anchor at the beginning of the trip. When working with text data, you may need to match a regex pattern, but only if it appears as the first thing in the string. To do that, we also use an anchor, specifically ^.", "To demonstrate, our goal is to find the word \u201cthe,\u201d but only if it appears at the beginning of a string.", "Starting with anchor, when we use the ^ anchor to find \u201cthe,\u201d we have only one instance of it returned.", "We know this is the first instance because \u201cThe\u201d at the beginning of the string is capitalized. Now with anchor_n, no results are returned. The regex would normally match \u201cthe\u201d in the sentence, but with the ^ anchor it is only checking the beginning of the sentence.", "At the end of our regex trip, we need to drop the anchor. Sometimes you need to match a regex pattern only if it appears at the end of a string. This is accomplished with the $ anchor.", "Let\u2019s take another look at the anchor string, this time looking for \u201cocean\u201d at the end of the string. We will have one result, \u201cocean.\u201d", "Again, if we look at anchor_n, this time using the $ or end anchor, we will get no matches, even though \u201cocean\u201d appears in the string. If it isn\u2019t at the end of the string, the $ anchor won\u2019t pick it up.", "Now that we know how to match strings at the beginning and end of strings (raising and lowering the SS Regular Expressions\u2019 anchor), we can move on to the next concept: telling regex what not to match.", "Imagine for a moment you are the captain of a large ship and it is the maiden voyage of a ship. Let\u2019s call this ship The Titanic. As the captain of that ship, you probably are more focused about not hitting an iceberg than anything else specific.", "In strings, you may want to specify certain patterns to avoid. To do this, use negations. These will match anything EXCEPT what you specify. There are two main ways to handle them in Python:", "In my previous piece on regular expressions in Python, we covered three different meta characters: \\s, \\w, and \\d. As a refresher, they match a certain set of characters in a string: \\s matches whitespace characters (spaces, tabs, and newlines), \\w matches alphanumeric characters (letters and numbers), and \\d matches any digits (numbers).", "When you capitalize any of these meta characters, it will match everything EXCEPT what it would normally match. To see them in action, let\u2019s create a new string that has spaces, numbers, letters, and punctuation:", "Now, when we take a look at our capitalized meta characters, we will see how their output is changed.", "Some use cases require negation with more flexibility than meta characters can provide. Let\u2019s look at an example:", "Let\u2019s break down this problem. There are 21 consonants in the alphabet, and we want all of them. They are non consecutive, so we can\u2019t just use a range of letters in a character set to get them. We do know that vowels and consonants are mutually exclusive, and that there are only 5 vowels. If we can find all of the vowels, we should be able to negate it to get all of the consonants by negation. Let\u2019s start with a refresher of how to find vowels with a character set.", "The characters inside the brackets define the character set. In this case, any of the vowels are matched. To get everything except vowels, we can use the ^. This will negate everything inside the character set.", "\u2026But that isn\u2019t the consonants. There is a little bit of work to do still. We have spaces, digits, and punctuation in our results. Since everything is negated in the capture group, we simply match everything we don\u2019t want in the result. \\s takes care of spaces, \\d takes care of digits, and \\. takes care of the period. \\. is not a meta character, but an escaped period.", "After all of the characters we needed to end up with just consonants, maybe that isn\u2019t quicker than typing 21 different consonants, but it does demonstrate how we can add everything together and use regular expressions to get exactly what we want.", "When out to sea, we may have something that we are keeping an eye out for. Seeing some wildlife would make for a more interesting journey. We look for the wildlife so that we can find somewhere close to it for our ship. As a seasoned captain, we don\u2019t really care as much about the wildlife itself, just the safe space nearby to navigate the ship to.", "Similar to how we want to look by the wildlife for a place to park, we may want to look around some text for the information we really want. In case you haven\u2019t figured it out by now, regular expressions can handle this with ease. To do so, we use something called a look around. Look arounds search for a specific match in the string, then return something either immediately before or after it. This leaves us with two main types of look arounds: look aheads and look behinds.", "Let\u2019s use the following string as an example for how both of these work.", "We\u2019ll have two scenarios for what information we want to extract from this string.", "At first you may wonder why we need look arounds to do this. You could simply look for a digit, period, and two more digits. Something like this:", "That isn\u2019t a bad start, but the output of that line of code would give you three prices.", "There are only two animal prices, the last one is unrelated. Look arounds will help us remove that last one and get everything nicely into a data frame.", "Looking at the lookaround string, we see that each animal price is preceded by the word \u201ccosts.\u201d We will use a look behind. This will match whatever we would normally match, but only if it has a match of something else before it. The general formula for a look ahead is \"(?<=if preceded by this)match_this\". In our case, this would translate like below (\\s is added to account for the space between the word and the numbers):", "Now we have the prices for each of our animals, excluding the amount of money I have left in the string.", "If you look closely, you\u2019ll notice that there are space in the strings. Don\u2019t worry about those for now, we will take care of those when we build a data frame to hold our price list.", "Now that we have the prices for our animals from the string, we want to get the names of the animals for our price list data frame.", "Do to this, we now need to match the word directly ahead of the word \u201ccosts.\u201d For this we will use look aheads. The basic formula for a look ahead is as follows: \"match this(?=if followed by this)\". To get the animal names from our string, it would look like this:", "Just like that, we have captured every word that comes before the word costs. In our string that is the names of all the animals.", "To create the data frame for our animal prices, we already have most of what we need. We just create a data frame with the vectors from animals and prices as the columns. Of course to do this in Python we need to import the pandas module as pd first.", "In case you forgot, when we use re.findall(), it returns a list of strings. This can easily be used to create a dictionary and then a data frame.", "Our next step is to take care of those extra spaces. We will use the .strip() method. It removes and spaces at the beginning or end of a string. We will use a list comprehension to do this in a single line of code for each column.", "The resulting data frame looks like the one below:", "Just like that, your cruise on the SS Regular Expressions has come to an end. You learned:", "Here are some other resources related to regular expression in Python that you may find helpful:", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Scientist | Twitter @RealDrewData | LinkedIn: www.linkedin.com/in/realdrewdata"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F8a7780ac54e9&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanchors-away-more-python-regular-expressions-you-wish-you-knew-8a7780ac54e9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanchors-away-more-python-regular-expressions-you-wish-you-knew-8a7780ac54e9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanchors-away-more-python-regular-expressions-you-wish-you-knew-8a7780ac54e9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanchors-away-more-python-regular-expressions-you-wish-you-knew-8a7780ac54e9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----8a7780ac54e9--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8a7780ac54e9--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://realdrewdata.medium.com/?source=post_page-----8a7780ac54e9--------------------------------", "anchor_text": ""}, {"url": "https://realdrewdata.medium.com/?source=post_page-----8a7780ac54e9--------------------------------", "anchor_text": "Drew Seewald"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdff5f2854781&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanchors-away-more-python-regular-expressions-you-wish-you-knew-8a7780ac54e9&user=Drew+Seewald&userId=dff5f2854781&source=post_page-dff5f2854781----8a7780ac54e9---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8a7780ac54e9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanchors-away-more-python-regular-expressions-you-wish-you-knew-8a7780ac54e9&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8a7780ac54e9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanchors-away-more-python-regular-expressions-you-wish-you-knew-8a7780ac54e9&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/a-gentle-introduction-to-regular-expressions-with-python-4f3fce46dcb4", "anchor_text": "A Gentle Introduction to Regular Expressions with PythonRegular expressions are the data scientist\u2019s most formidable weapon against unstructured texttowardsdatascience.com"}, {"url": "https://unsplash.com/@anniespratt?utm_source=medium&utm_medium=referral", "anchor_text": "Annie Spratt"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://unsplash.com/@ncx1701d?utm_source=medium&utm_medium=referral", "anchor_text": "Martin Wettstein"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://docs.python.org/3/library/re.html", "anchor_text": "The official"}, {"url": "https://docs.python.org/3/library/re.html", "anchor_text": "re"}, {"url": "https://docs.python.org/3/library/re.html", "anchor_text": "documentation"}, {"url": "https://www.w3schools.com/python/python_regex.asp", "anchor_text": "w3schools References"}, {"url": "https://www.datacamp.com/join-me/ODczNDQ5", "anchor_text": "Datacamp Courses"}, {"url": "https://realdrewdata.medium.com/membership", "anchor_text": "Join Medium with my referral link - Drew SeewaldAs a Medium member, a portion of your membership fee goes to writers you read, and you get full access to every story\u2026realdrewdata.medium.com"}, {"url": "https://medium.com/tag/python?source=post_page-----8a7780ac54e9---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/regular-expressions?source=post_page-----8a7780ac54e9---------------regular_expressions-----------------", "anchor_text": "Regular Expressions"}, {"url": "https://medium.com/tag/unstructured-data?source=post_page-----8a7780ac54e9---------------unstructured_data-----------------", "anchor_text": "Unstructured Data"}, {"url": "https://medium.com/tag/data-science?source=post_page-----8a7780ac54e9---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/text-processing?source=post_page-----8a7780ac54e9---------------text_processing-----------------", "anchor_text": "Text Processing"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8a7780ac54e9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanchors-away-more-python-regular-expressions-you-wish-you-knew-8a7780ac54e9&user=Drew+Seewald&userId=dff5f2854781&source=-----8a7780ac54e9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8a7780ac54e9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanchors-away-more-python-regular-expressions-you-wish-you-knew-8a7780ac54e9&user=Drew+Seewald&userId=dff5f2854781&source=-----8a7780ac54e9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8a7780ac54e9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanchors-away-more-python-regular-expressions-you-wish-you-knew-8a7780ac54e9&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8a7780ac54e9--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F8a7780ac54e9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanchors-away-more-python-regular-expressions-you-wish-you-knew-8a7780ac54e9&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----8a7780ac54e9---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----8a7780ac54e9--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----8a7780ac54e9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----8a7780ac54e9--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----8a7780ac54e9--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----8a7780ac54e9--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----8a7780ac54e9--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----8a7780ac54e9--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----8a7780ac54e9--------------------------------", "anchor_text": ""}, {"url": "https://realdrewdata.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://realdrewdata.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Drew Seewald"}, {"url": "https://realdrewdata.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "229 Followers"}, {"url": "http://www.linkedin.com/in/realdrewdata", "anchor_text": "www.linkedin.com/in/realdrewdata"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdff5f2854781&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanchors-away-more-python-regular-expressions-you-wish-you-knew-8a7780ac54e9&user=Drew+Seewald&userId=dff5f2854781&source=post_page-dff5f2854781--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff18c5782a69f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanchors-away-more-python-regular-expressions-you-wish-you-knew-8a7780ac54e9&newsletterV3=dff5f2854781&newsletterV3Id=f18c5782a69f&user=Drew+Seewald&userId=dff5f2854781&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}