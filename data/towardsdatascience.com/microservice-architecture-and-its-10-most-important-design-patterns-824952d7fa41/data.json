{"url": "https://towardsdatascience.com/microservice-architecture-and-its-10-most-important-design-patterns-824952d7fa41", "time": 1683017752.600786, "path": "towardsdatascience.com/microservice-architecture-and-its-10-most-important-design-patterns-824952d7fa41/", "webpage": {"metadata": {"title": "Microservice Architecture and its 10 Most Important Design Patterns | by Md Kamaruzzaman | Towards Data Science", "h1": "Microservice Architecture and its 10 Most Important Design Patterns", "description": "Tackling complexity in large Software Systems was always a daunting task since the early days of Software development (1960's). Over the years, Software Engineers and Architects made many attempts to\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf", "anchor_text": "Modularity and Information Hiding", "paragraph_index": 0}, {"url": "https://en.wikipedia.org/wiki/David_Parnas", "anchor_text": "David Parnas", "paragraph_index": 0}, {"url": "https://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD447.html", "anchor_text": "Separation of Concern", "paragraph_index": 0}, {"url": "https://en.wikipedia.org/wiki/Edsger_W._Dijkstra", "anchor_text": "Edsger W. Dijkstra", "paragraph_index": 0}, {"url": "https://en.wikipedia.org/wiki/Service-oriented_architecture", "anchor_text": "Service Oriented Architecture", "paragraph_index": 0}, {"url": "https://en.wikipedia.org/wiki/Software_design_pattern", "anchor_text": "Software Design Patterns", "paragraph_index": 2}, {"url": "https://towardsdatascience.com/effective-microservices-10-best-practices-c6e4ba0c6ee2", "anchor_text": "Effective Microservices: 10 Best Practices", "paragraph_index": 2}, {"url": "https://towardsdatascience.com/microservice-architecture-a-brief-overview-and-why-you-should-use-it-in-your-next-project-a17b6e19adfd", "anchor_text": "Microservice Architecture: A brief overview and why you should use it in your next project", "paragraph_index": 5}, {"url": "https://towardsdatascience.com/looking-beyond-the-hype-is-modular-monolithic-software-architecture-really-dead-e386191610f8", "anchor_text": "Is Modular Monolithic Software Architecture Really Dead?", "paragraph_index": 5}, {"url": "https://towardsdatascience.com/looking-beyond-the-hype-is-modular-monolithic-software-architecture-really-dead-e386191610f8", "anchor_text": "Here is my definition", "paragraph_index": 6}, {"url": "https://en.wikipedia.org/wiki/Domain-driven_design", "anchor_text": "Domain-Driven-Design", "paragraph_index": 10}, {"url": "https://en.wikipedia.org/wiki/Two-phase_locking", "anchor_text": "two-phase locking", "paragraph_index": 14}, {"url": "https://www.eventstore.com", "anchor_text": "EventStoreDB", "paragraph_index": 17}, {"url": "https://kafka.apache.org", "anchor_text": "Apache Kafka", "paragraph_index": 17}, {"url": "https://www.confluent.io/confluent-cloud", "anchor_text": "Confluent Cloud", "paragraph_index": 17}, {"url": "https://aws.amazon.com/kinesis/", "anchor_text": "AWS Kinesis", "paragraph_index": 17}, {"url": "https://azure.microsoft.com/en-us/services/event-hubs/", "anchor_text": "Azure Event Hub", "paragraph_index": 17}, {"url": "https://cloud.google.com/pubsub", "anchor_text": "GCP Pub/Sub", "paragraph_index": 17}, {"url": "https://docs.microsoft.com/en-us/azure/cosmos-db/introduction", "anchor_text": "Azure Cosmos DB", "paragraph_index": 17}, {"url": "https://www.mongodb.com/", "anchor_text": "MongoDB", "paragraph_index": 17}, {"url": "https://cassandra.apache.org/", "anchor_text": "Cassandra", "paragraph_index": 17}, {"url": "https://aws.amazon.com/dynamodb/?trk=ps_a134p000004f2XeAAI&trkCampaign=acq_paid_search_brand&sc_channel=PS&sc_campaign=acquisition_EMEA&sc_publisher=Google&sc_category=Database&sc_country=EMEA&sc_geo=EMEA&sc_outcome=acq&sc_detail=amazon%20dynamodb&sc_content=DynamoDB_e&sc_matchtype=e&sc_segment=468764879940&sc_medium=ACQ-P|PS-GO|Brand|Desktop|SU|Database|DynamoDB|EMEA|EN|Text|xx|EU&s_kwcid=AL!4422!3!468764879940!e!!g!!amazon%20dynamodb&ef_id=CjwKCAiAq8f-BRBtEiwAGr3DgRRqVmhD5PL323QFmdBJvvOwzxU1nvrGFdbM8ra-DQViD8jjGn-PGBoCWJYQAvD_BwE:G:s&s_kwcid=AL!4422!3!468764879940!e!!g!!amazon%20dynamodb", "anchor_text": "Amazon DynamoDB", "paragraph_index": 17}, {"url": "https://www.lagomframework.com/", "anchor_text": "Lagom", "paragraph_index": 18}, {"url": "https://akka.io/", "anchor_text": "Akka", "paragraph_index": 18}, {"url": "https://spring.io/", "anchor_text": "Spring", "paragraph_index": 18}, {"url": "https://akkatecture.net/", "anchor_text": "akkatecture", "paragraph_index": 18}, {"url": "https://axoniq.io/", "anchor_text": "Axon", "paragraph_index": 18}, {"url": "https://eventuate.io/", "anchor_text": "Eventuate", "paragraph_index": 18}, {"url": "https://www.eventstore.com", "anchor_text": "EventStoreDB", "paragraph_index": 27}, {"url": "https://kafka.apache.org", "anchor_text": "Apache Kafka", "paragraph_index": 27}, {"url": "https://www.confluent.io/confluent-cloud", "anchor_text": "Confluent Cloud", "paragraph_index": 27}, {"url": "https://aws.amazon.com/kinesis/", "anchor_text": "AWS Kinesis", "paragraph_index": 27}, {"url": "https://azure.microsoft.com/en-us/services/event-hubs/", "anchor_text": "Azure Event Hub", "paragraph_index": 27}, {"url": "https://cloud.google.com/pubsub", "anchor_text": "GCP Pub/Sub", "paragraph_index": 27}, {"url": "https://docs.microsoft.com/en-us/azure/cosmos-db/introduction", "anchor_text": "Azure Cosmos DB", "paragraph_index": 27}, {"url": "https://www.mongodb.com/", "anchor_text": "MongoDB", "paragraph_index": 27}, {"url": "https://cassandra.apache.org/", "anchor_text": "Cassandra", "paragraph_index": 27}, {"url": "https://aws.amazon.com/dynamodb/", "anchor_text": "Amazon DynamoDB", "paragraph_index": 27}, {"url": "https://www.elastic.co/", "anchor_text": "Elastic Search", "paragraph_index": 28}, {"url": "https://lucene.apache.org/solr/features.html", "anchor_text": "Solr", "paragraph_index": 28}, {"url": "https://cloud.google.com/spanner", "anchor_text": "Cloud Spanner", "paragraph_index": 28}, {"url": "https://aws.amazon.com/rds/aurora/", "anchor_text": "Amazon Aurora", "paragraph_index": 28}, {"url": "https://docs.microsoft.com/en-us/azure/cosmos-db/introduction", "anchor_text": "Azure Cosmos DB", "paragraph_index": 28}, {"url": "https://neo4j.com/", "anchor_text": "Neo4j", "paragraph_index": 28}, {"url": "https://www.lagomframework.com/", "anchor_text": "Lagom", "paragraph_index": 29}, {"url": "https://akka.io/", "anchor_text": "Akka", "paragraph_index": 29}, {"url": "https://spring.io/", "anchor_text": "Spring", "paragraph_index": 29}, {"url": "https://akkatecture.net/", "anchor_text": "akkatecture", "paragraph_index": 29}, {"url": "https://axoniq.io/", "anchor_text": "Axon", "paragraph_index": 29}, {"url": "https://eventuate.io/", "anchor_text": "Eventuate", "paragraph_index": 29}, {"url": "https://en.wikipedia.org/wiki/Two-phase_commit_protocol", "anchor_text": "Two-phase commit protocol", "paragraph_index": 30}, {"url": "https://aws.amazon.com/api-gateway/", "anchor_text": "Amazon API Gateway", "paragraph_index": 42}, {"url": "https://docs.microsoft.com/en-us/azure/api-management/", "anchor_text": "Azure API Management", "paragraph_index": 42}, {"url": "https://cloud.google.com/apigee", "anchor_text": "Apigee", "paragraph_index": 42}, {"url": "https://konghq.com/kong/", "anchor_text": "Kong", "paragraph_index": 42}, {"url": "https://wso2.com/api-management/", "anchor_text": "WSO2 API Manager", "paragraph_index": 42}, {"url": "https://github.com/Netflix/Hystrix/wiki/How-it-Works", "anchor_text": "Hystrix", "paragraph_index": 50}, {"url": "https://github.com/resilience4j/resilience4j", "anchor_text": "Reselience4J", "paragraph_index": 50}, {"url": "http://www.thepollyproject.org/", "anchor_text": "Polly", "paragraph_index": 50}, {"url": "https://martinfowler.com/articles/practical-test-pyramid.html", "anchor_text": "Test Pyramid", "paragraph_index": 55}, {"url": "https://twitter.com/KamaruzzMd", "anchor_text": "https://twitter.com/KamaruzzMd", "paragraph_index": 63}], "all_paragraphs": ["Tackling complexity in large Software Systems was always a daunting task since the early days of Software development (1960's). Over the years, Software Engineers and Architects made many attempts to tackle the complexities of Software Systems: Modularity and Information Hiding by David Parnas (1972), Separation of Concern by Edsger W. Dijkstra (1974), Service Oriented Architecture (1998).", "All of them used the age-old and proven technique to tackle the complexity of a large system: divide and conquer. Since the 2010s, those techniques proved insufficient to tackle the complexities of Web-Scale applications or modern large-scale Enterprise applications. As a result, Architects and Engineers developed a new approach to tackle the complexity of Software Systems in modern times: Microservice Architecture. It also uses the same old \u201cDivide and Conquer\u201d technique, albeit in a novel way.", "Software Design Patterns are general, reusable solutions to the commonly occurring problem in Software Design. Design Patterns help us share a common vocabulary and use a battle-tested solution instead of reinventing the wheel. In a previous article: Effective Microservices: 10 Best Practices, I have described a set of best practices to develop Effective Microservices. Here, I will describe a set of Design Patterns to help you implement those best practices. If you are new to Microservice Architecture, then no worries, I will introduce you to Microservice Architecture.", "By reading this article, you will learn:", "Please note that most of the Design Patterns of this listing have several contexts and can be used in non-Microservice Architecture. But I will describe them in the context of Microservice Architecture.", "I have covered Microservice Architecture in details in my previous Blog Posts: Microservice Architecture: A brief overview and why you should use it in your next project and Is Modular Monolithic Software Architecture Really Dead?. If you are interested, then you can read them to have a deeper look.", "What is a Microservice Architecture. There are many definitions of Microservice Architecture. Here is my definition:", "Microservice Architecture is about splitting a large, complex systems vertically (per functional or business requirements) into smaller sub-systems which are processes (hence independently deployable) and these sub-systems communicates with each other via lightweight, language-agnostic network calls either synchronous (e.g. REST, gRPC) or asynchronous (via Messaging) way.", "Here is the Component View of a Business Web Application with Microservice Architecture:", "Once a company replaces the large monolithic system with many smaller microservices, the most important decision it faces is regarding the Database. In a monolithic architecture, a large, central database is used. Many architects favor keeping the database as it is, even when they move to microservice architecture. While it gives some short-term benefit, it is an anti-pattern, especially in a large-scale system, as the microservices will be tightly coupled in the database layer. The whole object of moving to microservice will fail (e.g., team empowerment, independent development).", "A better approach is to provide every Microservice its own Data store, so that there is no strong-coupling between services in the database layer. Here I am using the term database to show a logical separation of data, i.e., the Microservices can share the same physical database, but they should use separate Schema/collection/table. It will also ensure that the Microservices are correctly segregated according to the Domain-Driven-Design.", "When to use Database per Microservice", "When not to use Database per Microservice", "All SQL, NoSQL databases offer logical separation of data (e.g., separate tables, collections, schemas, databases).", "In a Microservice Architecture, especially with Database per Microservice, the Microservices need to exchange data. For resilient, highly scalable, and fault-tolerant systems, they should communicate asynchronously by exchanging Events. In such a case, you may want to have Atomic operations, e.g., update the Database and send the message. If you have SQL databases and want to have distributed transactions for a high volume of data, you cannot use the two-phase locking (2PL) as it does not scale. If you use NoSQL Databases and want to have a distributed transaction, you cannot use 2PL as many NoSQL databases do not support two-phase locking.", "In such scenarios, use Event based Architecture with Event Sourcing. In traditional databases, the Business Entity with the current \u201cstate\u201d is directly stored. In Event Sourcing, any state-changing event or other significant events are stored instead of the entities. It means the modifications of a Business Entity is saved as a series of immutable events. The State of a Business entity is deducted by reprocessing all the Events of that Business entity at a given time. Because data is stored as a series of events rather than via direct updates to data stores, various services can replay events from the event store to compute the appropriate state of their respective data stores.", "When not to use Event Sourcing", "Event Store: EventStoreDB, Apache Kafka, Confluent Cloud, AWS Kinesis, Azure Event Hub, GCP Pub/Sub, Azure Cosmos DB, MongoDB, Cassandra. Amazon DynamoDB,", "Frameworks: Lagom, Akka, Spring, akkatecture, Axon, Eventuate", "If we use Event Sourcing, then reading data from the Event Store becomes challenging. To fetch an entity from the Data store, we need to process all the entity events. Also, sometimes we have different consistency and throughput requirements for reading and write operations.", "In such use cases, we can use the CQRS pattern. In the CQRS pattern, the system's data modification part (Command) is separated from the data read (Query) part. CQRS pattern has two forms: simple and advanced, which lead to some confusion among the software engineers.", "In its simple form, distinct entity or ORM models are used for Reading and Write, as shown below:", "It helps to enforce the Single Responsibility Principle and Separation of Concern, which lead to a cleaner design.", "In its advanced form, different data stores are used for reading and write operations. The advanced CQRS is used with Event Sourcing. Depending on the use case, different types of Write Data Store and Read Data store are used. The Write Data Store is the \u201cSystem of Records,\u201d i.e., the entire system's golden source.", "For the Read-heavy applications or Microservice Architecture, OLTP database (any SQL or NoSQL database offering ACID transaction guarantee) or Distributed Messaging Platform is used as Write Store. For the Write-heavy applications (high write scalability and throughput), a horizontally write-scalable database is used (public cloud global Databases). The normalized data is saved in the Write Data Store.", "NoSQL Database optimized for searching (e.g., Apache Solr, Elasticsearch) or reading (Key-Value data store, Document Data Store) is used as Read Store. In many cases, read-scalable SQL databases are used where SQL query is desired. The denormalized and optimized data is saved in the Read Store.", "Data is copied from the Write store to the read store asynchronously. As a result, the Read Store lags the Write store and is Eventual Consistent.", "Write Store: EventStoreDB, Apache Kafka, Confluent Cloud, AWS Kinesis, Azure Event Hub, GCP Pub/Sub, Azure Cosmos DB, MongoDB, Cassandra. Amazon DynamoDB", "Read Store: Elastic Search, Solr, Cloud Spanner, Amazon Aurora, Azure Cosmos DB, Neo4j", "Frameworks: Lagom, Akka, Spring, akkatecture, Axon, Eventuate", "If you use Microservice Architecture with Database per Microservice, then managing consistency via distributed transactions is challenging. You cannot use the traditional Two-phase commit protocol as it either does not scale (SQL Databases) or is not supported (many NoSQL Databases).", "You can use the Saga pattern for distributed transactions in Microservice Architecture. Saga is an old pattern developed in 1987 as a conceptual alternative for long-running database transactions in SQL databases. But a modern variation of this pattern works amazingly for the distributed transaction as well. Saga pattern is a local transaction sequence where each transaction updates data in the Data Store within a single Microservice and publishes an Event or Message. The first transaction in a saga is initiated by an external request (Event or Action). Once the local transaction is complete (data is stored in Data Store, and message or event is published), the published message/event triggers the next local transaction in the Saga.", "If the local transaction fails, Saga executes a series of compensating transactions that undo the preceding local transactions' changes.", "There are mainly two variations of Saga transactions co-ordinations:", "In modern business application developments and especially in Microservice Architecture, the Frontend and the Backend applications are decoupled and separate Services. They are connected via API or GraphQL. If the application also has a Mobile App client, then using the same backend Microservice for both the Web and the Mobile client becomes problematic. The Mobile client's API requirements are usually different from Web client as they have different screen size, display, performance, energy source, and network bandwidth.", "Backends for Frontends pattern could be used in scenarios where each UI gets a separate backend customized for the specific UI. It also provides other advantages, like acting as a Facade for downstream Microservices, thus reducing the chatty communication between the UI and downstream Microservices. Also, in a highly secured scenario where downstream Microservices are deployed in a DMZ network, the BFF\u2019s are used to provide higher security.", "When to use Backends for Frontends", "When not to use Backends for Frontends", "Any Backend frameworks (Node.js, Spring, Django, Laravel, Flask, Play, \u2026..) supports it.", "In Microservice Architecture, the UI usually connects with multiple Microservices. If the Microservices are finely grained (FaaS), the Client may need to connect with lots of Microservices, which becomes chatty and challenging. Also, the services, including their APIs, can evolve. Large enterprises will like to have other cross-cutting concerns (SSL termination, authentication, authorization, throttling, logging, etc.).", "One possible way to solve these issues is to use API Gateway. API Gateway sits between the Client APP and the Backend Microservices and acts as a facade. It can work as a reverse proxy, routing the Client request to the appropriate Backend Microservice. It can also support the client request's fanning-out to multiple Microservices and then return the aggregated responses to the Client. It additionally supports essential cross-cutting concerns.", "When not to use API Gateway", "Amazon API Gateway, Azure API Management, Apigee, Kong, WSO2 API Manager", "If we want to use Microservice Architecture in a brownfield project, we need to migrate legacy or existing Monolithic applications to Microservices. Moving an existing, large, in-production Monolithic applications to Microservices is quite challenging as it may disrupt the application\u2019s availability.", "One solution is to use the Strangler pattern. Strangler pattern means incrementally migrating a Monolithic application to Microservice Architecture by gradually replacing specific functionality with new Microservices. Also, new functionalities are only added in Microservices, bypassing the legacy Monolithic application. A Facade (API Gateway) is then configured to route the requests between the legacy Monolith and Microservices. Once the functionality is migrated from the Monolith to Microservices, the Facade then intercepts the client request and route to the new Microservices. Once all the legacy monolith's functionalities are migrated, the legacy Monolithic application is \u201cstrangled,\u201d i.e., decommissioned.", "Backend application frameworks with API Gateway.", "In Microservice Architecture, where the Microservices communicates Synchronously, a Microservice usually calls other services to fulfill business requirements. Call to another service can fail due to transient faults (slow network connection, timeouts, or temporal unavailability). In such cases, retrying calls can solve fix the issue. However, if there is a severe issue (complete failure of the Microservice), then the Microservice is unavailable for a longer time. Retrying is pointless and wastes precious resources (thread is blocked, waste of CPU cycles) in such scenarios. Also, the failure of one service might lead to cascading failures throughout the application. In such scenarios, fail immediately is a better approach.", "The Circuit Breaker pattern can come to the rescue for such use cases. A Microservice should request another Microservice via a proxy that works similarly to an Electrical Circuit Breaker. The proxy should count the number of recent failures that have occurred and use it to decide whether to allow the operation to proceed or simply return an exception immediately.", "The Circuit Breaker can have the following three states:", "When not to use Circuit Breaker", "API Gateway, Service Mesh, various Circuit Breaker Libraries (Hystrix, Reselience4J, Polly.", "Every business Application has many configuration parameters for various Infrastructure (e.g., Database, Network, connected Service addresses, credentials, certificate path). Also, in an enterprise environment, the application is usually deployed in various runtimes (Local, Dev, Prod). One way to achieve this is via the Internal Configuration, which is a fatal bad practice. It can lead to severe security risk as production credentials can easily be compromised. Also, any change in configuration parameter needs to rebuild the Application. This is even more critical in Microservice Architecture as we potentially have hundreds of services.", "The better approach is to externalize all the Configurations. As a result, the build process is separated from the runtime environment. Also, it minimizes the security risk as the Production configuration file is only used during runtime or via environment variables.", "When not to use Externalized Configuration", "Almost all enterprise-grade, modern frameworks support Externalized Configuration.", "In Microservice Architecture, there are many Microservices often developed by separate teams. These microservices work together to fulfill a business requirement (e.g., customer request) and communicate with each other Synchronously or Asynchronously. Integration testing of a Consumer Microservice is challenging. Usually, TestDouble is used in such scenarios for a faster and cheaper test run. But TestDouble often does not represent the real Provider Microservice. Also, if the Provider Microservice changes its API or Message, then TestDouble fails to acknowledge that. The other option is to make end-to-end testing. While end-to-end testing is mandatory before production, it is brittle, slow, expensive, and is no replacement for Integration testing (Test Pyramid).", "Consumer-Driven contract testing can help us in this regard. Here, the Consumer Microservice owner team write a test suite containing its Request and expected Response (for Synchronous communication) or expected messages (for Asynchronous communication) for a particular Provider Microservice. These test suites are called explicit Contracts. For a Provider Microservice, all the Contract test suites of its Consumers are added in its automated test. When the automated test for a particular Provider Microservice is performed, it runs its own tests and the Contracts and verifies the Contract. In such a way, the contract test can help maintain the integrity of the Microservice Communication in an automated way.", "When to use Consumer-Driven Contract Testing", "When not to use Consumer-Driven Contract Testing", "In the modern large-scale enterprise Software development, Microservice Architecture can help development scaling with many long-term benefits. But Microservice Architecture is no Silver Bullet that can be used in every use case. If it is used in the wrong type of application, Microservice Architecture can give more pains as gains. The development team that wants to adopt Microservice Architecture should follow a set of best practices and use a set of reusable, battle-hardened design patterns.", "The most vital design pattern in Microservice Architecture is the Database per Microservice. Implementing this design pattern is challenging and needs several other closely related design patterns (Event Sourcing, CQRS, Saga). In typical business applications with multiple Clients (Web, Mobile, Desktop, Smart Devices), the communications between Client and Microservices can be chatty and may require Central control with added Security. The design patterns Backends for Frontends and API Gateway are very useful in such scenarios. Also, the Circuit Breaker pattern can greatly help to handle error scenarios in such applications. Migrating legacy Monolithic application to Microservices is quite challenging, and the Strangler pattern can help the migration. The Consumer-Driven Contract Test is an instrumental pattern for the Integration Testing of Microservices. At the same time, Externalize Configuration is a mandatory pattern in any modern application development.", "This list is not all-inclusive, and depending on your use case, you may need other design patterns. But this list will give you an excellent introduction to Microservice Architecture Design Patterns.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Enterprise Architect | Certified AWS/AZURE/GCP Architect | Full-stack | Cloud | Big Data | Follow Me On Twitter: https://twitter.com/KamaruzzMd"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F824952d7fa41&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmicroservice-architecture-and-its-10-most-important-design-patterns-824952d7fa41&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmicroservice-architecture-and-its-10-most-important-design-patterns-824952d7fa41&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmicroservice-architecture-and-its-10-most-important-design-patterns-824952d7fa41&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmicroservice-architecture-and-its-10-most-important-design-patterns-824952d7fa41&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----824952d7fa41--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----824952d7fa41--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://md-kamaruzzaman.medium.com/?source=post_page-----824952d7fa41--------------------------------", "anchor_text": ""}, {"url": "https://md-kamaruzzaman.medium.com/?source=post_page-----824952d7fa41--------------------------------", "anchor_text": "Md Kamaruzzaman"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdf4b39a6f082&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmicroservice-architecture-and-its-10-most-important-design-patterns-824952d7fa41&user=Md+Kamaruzzaman&userId=df4b39a6f082&source=post_page-df4b39a6f082----824952d7fa41---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F824952d7fa41&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmicroservice-architecture-and-its-10-most-important-design-patterns-824952d7fa41&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F824952d7fa41&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmicroservice-architecture-and-its-10-most-important-design-patterns-824952d7fa41&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://pixabay.com/users/msandersmusic-1972097/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1181864", "anchor_text": "msandersmusic"}, {"url": "https://pixabay.com/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1181864", "anchor_text": "Pixabay"}, {"url": "https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf", "anchor_text": "Modularity and Information Hiding"}, {"url": "https://en.wikipedia.org/wiki/David_Parnas", "anchor_text": "David Parnas"}, {"url": "https://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD447.html", "anchor_text": "Separation of Concern"}, {"url": "https://en.wikipedia.org/wiki/Edsger_W._Dijkstra", "anchor_text": "Edsger W. Dijkstra"}, {"url": "https://en.wikipedia.org/wiki/Service-oriented_architecture", "anchor_text": "Service Oriented Architecture"}, {"url": "https://en.wikipedia.org/wiki/Software_design_pattern", "anchor_text": "Software Design Patterns"}, {"url": "https://towardsdatascience.com/effective-microservices-10-best-practices-c6e4ba0c6ee2", "anchor_text": "Effective Microservices: 10 Best Practices"}, {"url": "https://towardsdatascience.com/microservice-architecture-a-brief-overview-and-why-you-should-use-it-in-your-next-project-a17b6e19adfd", "anchor_text": "Microservice Architecture: A brief overview and why you should use it in your next project"}, {"url": "https://towardsdatascience.com/looking-beyond-the-hype-is-modular-monolithic-software-architecture-really-dead-e386191610f8", "anchor_text": "Is Modular Monolithic Software Architecture Really Dead?"}, {"url": "https://towardsdatascience.com/looking-beyond-the-hype-is-modular-monolithic-software-architecture-really-dead-e386191610f8", "anchor_text": "Here is my definition"}, {"url": "https://towardsdatascience.com/looking-beyond-the-hype-is-modular-monolithic-software-architecture-really-dead-e386191610f8", "anchor_text": "Microservice Architecture"}, {"url": "https://medium.com/@md.kamaruzzaman", "anchor_text": "Md Kamaruzzaman"}, {"url": "https://en.wikipedia.org/wiki/Domain-driven_design", "anchor_text": "Domain-Driven-Design"}, {"url": "https://medium.com/@md.kamaruzzaman", "anchor_text": "Md Kamaruzzaman"}, {"url": "https://microservices.io/patterns/data/database-per-service.html", "anchor_text": "Microservices Pattern: Database per serviceLet's imagine you are developing an online store application using the Microservice architecture pattern. Most services\u2026microservices.io"}, {"url": "https://docs.microsoft.com/en-us/dotnet/architecture/cloud-native/distributed-data", "anchor_text": "Distributed dataAs we've seen throughout this book, a cloud-native approach changes the way you design, deploy, and manage\u2026docs.microsoft.com"}, {"url": "https://en.wikipedia.org/wiki/Two-phase_locking", "anchor_text": "two-phase locking"}, {"url": "https://medium.com/@md.kamaruzzaman", "anchor_text": "Md Kamaruzzaman"}, {"url": "https://en.wikipedia.org/wiki/Domain-driven_design", "anchor_text": "Domain-Driven Design"}, {"url": "https://www.eventstore.com", "anchor_text": "EventStoreDB"}, {"url": "https://kafka.apache.org", "anchor_text": "Apache Kafka"}, {"url": "https://www.confluent.io/confluent-cloud", "anchor_text": "Confluent Cloud"}, {"url": "https://aws.amazon.com/kinesis/", "anchor_text": "AWS Kinesis"}, {"url": "https://azure.microsoft.com/en-us/services/event-hubs/", "anchor_text": "Azure Event Hub"}, {"url": "https://cloud.google.com/pubsub", "anchor_text": "GCP Pub/Sub"}, {"url": "https://docs.microsoft.com/en-us/azure/cosmos-db/introduction", "anchor_text": "Azure Cosmos DB"}, {"url": "https://www.mongodb.com/", "anchor_text": "MongoDB"}, {"url": "https://cassandra.apache.org/", "anchor_text": "Cassandra"}, {"url": "https://aws.amazon.com/dynamodb/?trk=ps_a134p000004f2XeAAI&trkCampaign=acq_paid_search_brand&sc_channel=PS&sc_campaign=acquisition_EMEA&sc_publisher=Google&sc_category=Database&sc_country=EMEA&sc_geo=EMEA&sc_outcome=acq&sc_detail=amazon%20dynamodb&sc_content=DynamoDB_e&sc_matchtype=e&sc_segment=468764879940&sc_medium=ACQ-P|PS-GO|Brand|Desktop|SU|Database|DynamoDB|EMEA|EN|Text|xx|EU&s_kwcid=AL!4422!3!468764879940!e!!g!!amazon%20dynamodb&ef_id=CjwKCAiAq8f-BRBtEiwAGr3DgRRqVmhD5PL323QFmdBJvvOwzxU1nvrGFdbM8ra-DQViD8jjGn-PGBoCWJYQAvD_BwE:G:s&s_kwcid=AL!4422!3!468764879940!e!!g!!amazon%20dynamodb", "anchor_text": "Amazon DynamoDB"}, {"url": "https://www.lagomframework.com/", "anchor_text": "Lagom"}, {"url": "https://akka.io/", "anchor_text": "Akka"}, {"url": "https://spring.io/", "anchor_text": "Spring"}, {"url": "https://akkatecture.net/", "anchor_text": "akkatecture"}, {"url": "https://axoniq.io/", "anchor_text": "Axon"}, {"url": "https://eventuate.io/", "anchor_text": "Eventuate"}, {"url": "https://martinfowler.com/eaaDev/EventSourcing.html", "anchor_text": "Event SourcingThe fundamental idea of Event Sourcing is that of ensuring every change to the state of an application is captured in\u2026martinfowler.com"}, {"url": "https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing", "anchor_text": "Event Sourcing pattern - Cloud Design PatternsInstead of storing just the current state of the data in a domain, use an append-only store to record the full series\u2026docs.microsoft.com"}, {"url": "https://microservices.io/patterns/data/event-sourcing.html", "anchor_text": "Microservices Pattern: Event sourcingA service command typically needs to update the database and send messages/events. For example, a service that\u2026microservices.io"}, {"url": "https://medium.com/@md.kamaruzzaman", "anchor_text": "Md Kamaruzzaman"}, {"url": "https://medium.com/@md.kamaruzzaman", "anchor_text": "Md Kamaruzzaman"}, {"url": "https://www.eventstore.com", "anchor_text": "EventStoreDB"}, {"url": "https://kafka.apache.org", "anchor_text": "Apache Kafka"}, {"url": "https://www.confluent.io/confluent-cloud", "anchor_text": "Confluent Cloud"}, {"url": "https://aws.amazon.com/kinesis/", "anchor_text": "AWS Kinesis"}, {"url": "https://azure.microsoft.com/en-us/services/event-hubs/", "anchor_text": "Azure Event Hub"}, {"url": "https://cloud.google.com/pubsub", "anchor_text": "GCP Pub/Sub"}, {"url": "https://docs.microsoft.com/en-us/azure/cosmos-db/introduction", "anchor_text": "Azure Cosmos DB"}, {"url": "https://www.mongodb.com/", "anchor_text": "MongoDB"}, {"url": "https://cassandra.apache.org/", "anchor_text": "Cassandra"}, {"url": "https://aws.amazon.com/dynamodb/", "anchor_text": "Amazon DynamoDB"}, {"url": "https://www.elastic.co/", "anchor_text": "Elastic Search"}, {"url": "https://lucene.apache.org/solr/features.html", "anchor_text": "Solr"}, {"url": "https://cloud.google.com/spanner", "anchor_text": "Cloud Spanner"}, {"url": "https://aws.amazon.com/rds/aurora/", "anchor_text": "Amazon Aurora"}, {"url": "https://docs.microsoft.com/en-us/azure/cosmos-db/introduction", "anchor_text": "Azure Cosmos DB"}, {"url": "https://neo4j.com/", "anchor_text": "Neo4j"}, {"url": "https://www.lagomframework.com/", "anchor_text": "Lagom"}, {"url": "https://akka.io/", "anchor_text": "Akka"}, {"url": "https://spring.io/", "anchor_text": "Spring"}, {"url": "https://akkatecture.net/", "anchor_text": "akkatecture"}, {"url": "https://axoniq.io/", "anchor_text": "Axon"}, {"url": "https://eventuate.io/", "anchor_text": "Eventuate"}, {"url": "https://martinfowler.com/bliki/CQRS.html", "anchor_text": "bliki: CQRSCQRS stands for Command Query Responsibility Segregation. It's a pattern that I first heard described by Greg Young. At\u2026martinfowler.com"}, {"url": "https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs", "anchor_text": "CQRS pattern - Azure Architecture CenterThe Command and Query Responsibility Segregation (CQRS) pattern separates read and update operations for a data store\u2026docs.microsoft.com"}, {"url": "https://microservices.io/patterns/data/cqrs.html", "anchor_text": "Microservices Pattern: Command Query Responsibility Segregation (CQRS)You have applied the Microservices architecture pattern and the Database per service pattern. As a result, it is no\u2026microservices.io"}, {"url": "https://en.wikipedia.org/wiki/Two-phase_commit_protocol", "anchor_text": "Two-phase commit protocol"}, {"url": "https://medium.com/@md.kamaruzzaman", "anchor_text": "Md Kamaruzzaman"}, {"url": "https://axoniq.io/", "anchor_text": "Axon"}, {"url": "https://eventuate.io/", "anchor_text": "Eventuate"}, {"url": "https://narayana.io/", "anchor_text": "Narayana"}, {"url": "https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/saga/saga", "anchor_text": "Saga distributed transactions - Azure Design PatternsThe saga design pattern is a way to manage data consistency across microservices in distributed transaction scenarios\u2026docs.microsoft.com"}, {"url": "https://microservices.io/patterns/data/saga.html", "anchor_text": "Microservices Pattern: SagasYou have applied the Database per Service pattern. Each service has its own database. Some business transactions\u2026microservices.io"}, {"url": "https://blog.couchbase.com/saga-pattern-implement-business-transactions-using-microservices-part/", "anchor_text": "Saga Pattern: Application Transactions Using MicroservicesTransactions are an essential part of applications. Without them, it would be impossible to maintain data consistency\u2026blog.couchbase.com"}, {"url": "https://medium.com/@md.kamaruzzaman", "anchor_text": "Md Kamaruzzaman"}, {"url": "https://samnewman.io/patterns/architectural/bff/", "anchor_text": "Sam Newman - Backends For FrontendsWith the advent and success of the web, the de facto way of delivering user interfaces has shifted from thick-client\u2026samnewman.io"}, {"url": "https://docs.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends", "anchor_text": "Backends for Frontends pattern - Cloud Design PatternsCreate separate backend services to be consumed by specific frontend applications or interfaces. This pattern is useful\u2026docs.microsoft.com"}, {"url": "https://microservices.io/patterns/apigateway.html", "anchor_text": "Microservices Pattern: API gateway patternLet's imagine you are building an online store that uses the Microservice architecture pattern and that you are\u2026microservices.io"}, {"url": "https://medium.com/@md.kamaruzzaman", "anchor_text": "Md Kamaruzzaman"}, {"url": "https://aws.amazon.com/api-gateway/", "anchor_text": "Amazon API Gateway"}, {"url": "https://docs.microsoft.com/en-us/azure/api-management/", "anchor_text": "Azure API Management"}, {"url": "https://cloud.google.com/apigee", "anchor_text": "Apigee"}, {"url": "https://konghq.com/kong/", "anchor_text": "Kong"}, {"url": "https://wso2.com/api-management/", "anchor_text": "WSO2 API Manager"}, {"url": "https://microservices.io/patterns/apigateway.html", "anchor_text": "Microservices Pattern: API gateway patternLet's imagine you are building an online store that uses the Microservice architecture pattern and that you are\u2026microservices.io"}, {"url": "https://docs.microsoft.com/en-us/azure/architecture/microservices/design/gateway", "anchor_text": "API gateways - Azure Architecture CenterIn a microservices architecture, a client might interact with more than one front-end service. Given this fact, how\u2026docs.microsoft.com"}, {"url": "https://medium.com/@md.kamaruzzaman", "anchor_text": "Md Kamaruzzaman"}, {"url": "https://martinfowler.com/bliki/StranglerFigApplication.html", "anchor_text": "bliki: StranglerFigApplicationWhen Cindy and I went to Australia, we spent some time in the rain forests on the Queensland coast. One of the natural\u2026martinfowler.com"}, {"url": "https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler", "anchor_text": "Strangler pattern - Cloud Design PatternsIncrementally migrate a legacy system by gradually replacing specific pieces of functionality with new applications and\u2026docs.microsoft.com"}, {"url": "https://microservices.io/patterns/refactoring/strangler-application.html", "anchor_text": "Microservices Pattern: Strangler applicationHow do you migrate a legacy monolithic application to a microservice architecture? Modernize an application by\u2026microservices.io"}, {"url": "https://medium.com/@md.kamaruzzaman", "anchor_text": "Md Kamaruzzaman"}, {"url": "https://github.com/Netflix/Hystrix/wiki/How-it-Works", "anchor_text": "Hystrix"}, {"url": "https://github.com/resilience4j/resilience4j", "anchor_text": "Reselience4J"}, {"url": "http://www.thepollyproject.org/", "anchor_text": "Polly"}, {"url": "https://martinfowler.com/bliki/CircuitBreaker.html", "anchor_text": "bliki: CircuitBreakerIt's common for software systems to make remote calls to software running in different processes, probably on different\u2026martinfowler.com"}, {"url": "https://docs.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker", "anchor_text": "Circuit Breaker pattern - Cloud Design PatternsHandle faults that might take a variable amount of time to recover from, when connecting to a remote service or\u2026docs.microsoft.com"}, {"url": "https://microservices.io/patterns/reliability/circuit-breaker.html", "anchor_text": "Microservices Pattern: Circuit BreakerYou have applied the Microservice architecture. Services sometimes collaborate when handling requests. When one service\u2026microservices.io"}, {"url": "https://microservices.io/patterns/externalized-configuration.html", "anchor_text": "Microservices Pattern: Externalized configurationAn application typically uses one or more infrastructure and 3rd party services. Examples of infrastructure services\u2026microservices.io"}, {"url": "https://reflectoring.io/externalize-configuration/", "anchor_text": "Build Once, Run Anywhere: Externalize Your ConfigurationMost software that does more than a \"hello world\" needs to be configured in some way or another in order to function in\u2026reflectoring.io"}, {"url": "https://martinfowler.com/articles/practical-test-pyramid.html", "anchor_text": "Test Pyramid"}, {"url": "https://docs.pact.io", "anchor_text": "Pact"}, {"url": "https://www.postman.com", "anchor_text": "Postman"}, {"url": "https://spring.io/guides/gs/contract-rest/", "anchor_text": "Spring Cloud Contract"}, {"url": "https://martinfowler.com/articles/consumerDrivenContracts.html", "anchor_text": "Consumer-Driven Contracts: A Service Evolution PatternIan Robinson To illustrate some of the problems we encounter while evolving services, consider a simple ProductSearch\u2026martinfowler.com"}, {"url": "https://microservices.io/patterns/testing/service-integration-contract-test.html", "anchor_text": "Microservices Pattern: Service Integration Contract TestYou have applied the Microservice architecture pattern. The application consists of numerous services. Services often\u2026microservices.io"}, {"url": "https://pactflow.io/what-is-consumer-driven-contract-testing/", "anchor_text": "What is consumer driven contract testing?Consumer driven contract testing is a type of contract testing [/what-is-contract-testing-page] that ensures that a\u2026pactflow.io"}, {"url": "https://towardsdatascience.com/22-predictions-about-the-software-development-trends-in-2022-fcc82c263788", "anchor_text": "22 predictions about the Software Development trends in 2022Cloud, Container, Programming, Database, Artificial Intelligence, Machine Learning, DevOps, Software Architecture\u2026towardsdatascience.com"}, {"url": "https://towardsdatascience.com/effective-microservices-10-best-practices-c6e4ba0c6ee2", "anchor_text": "Effective Microservices: 10 Best Practices10 Tips to implement Microservice Architecture the right wayuretowardsdatascience.com"}, {"url": "https://towardsdatascience.com/microservice-architecture-a-brief-overview-and-why-you-should-use-it-in-your-next-project-a17b6e19adfd", "anchor_text": "Microservice Architecture: A brief overview and why you should use it in your next projectBackground for Microservice Architecture and advantages of Microservice Architecture over Monolithic Architecturetowardsdatascience.com"}, {"url": "https://medium.com/tag/microservices?source=post_page-----824952d7fa41---------------microservices-----------------", "anchor_text": "Microservices"}, {"url": "https://medium.com/tag/software-development?source=post_page-----824952d7fa41---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/software-architecture?source=post_page-----824952d7fa41---------------software_architecture-----------------", "anchor_text": "Software Architecture"}, {"url": "https://medium.com/tag/programming?source=post_page-----824952d7fa41---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/design-patterns?source=post_page-----824952d7fa41---------------design_patterns-----------------", "anchor_text": "Design Patterns"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F824952d7fa41&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmicroservice-architecture-and-its-10-most-important-design-patterns-824952d7fa41&user=Md+Kamaruzzaman&userId=df4b39a6f082&source=-----824952d7fa41---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F824952d7fa41&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmicroservice-architecture-and-its-10-most-important-design-patterns-824952d7fa41&user=Md+Kamaruzzaman&userId=df4b39a6f082&source=-----824952d7fa41---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F824952d7fa41&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmicroservice-architecture-and-its-10-most-important-design-patterns-824952d7fa41&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----824952d7fa41--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F824952d7fa41&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmicroservice-architecture-and-its-10-most-important-design-patterns-824952d7fa41&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----824952d7fa41---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----824952d7fa41--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----824952d7fa41--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----824952d7fa41--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----824952d7fa41--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----824952d7fa41--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----824952d7fa41--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----824952d7fa41--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----824952d7fa41--------------------------------", "anchor_text": ""}, {"url": "https://md-kamaruzzaman.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://md-kamaruzzaman.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Md Kamaruzzaman"}, {"url": "https://md-kamaruzzaman.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "3.6K Followers"}, {"url": "https://twitter.com/KamaruzzMd", "anchor_text": "https://twitter.com/KamaruzzMd"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdf4b39a6f082&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmicroservice-architecture-and-its-10-most-important-design-patterns-824952d7fa41&user=Md+Kamaruzzaman&userId=df4b39a6f082&source=post_page-df4b39a6f082--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F4535c0a58a17&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmicroservice-architecture-and-its-10-most-important-design-patterns-824952d7fa41&newsletterV3=df4b39a6f082&newsletterV3Id=4535c0a58a17&user=Md+Kamaruzzaman&userId=df4b39a6f082&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}