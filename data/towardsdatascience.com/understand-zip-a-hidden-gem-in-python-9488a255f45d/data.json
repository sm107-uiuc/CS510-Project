{"url": "https://towardsdatascience.com/understand-zip-a-hidden-gem-in-python-9488a255f45d", "time": 1683008775.411513, "path": "towardsdatascience.com/understand-zip-a-hidden-gem-in-python-9488a255f45d/", "webpage": {"metadata": {"title": "Understand zip() \u2014 A Hidden Gem in Python | by Xiaoxu Gao | Towards Data Science", "h1": "Understand zip() \u2014 A Hidden Gem in Python", "description": "In Python, there are several ways to merge 2 lists/tuples/sets/dictionaries. What I mean by \u201cmerge\u201d is not just appending one to the other, but grouping elements with the same index. If you are in an\u2026"}, "outgoing_paragraph_urls": [{"url": "https://docs.python.org/3.3/library/functions.html#zip", "anchor_text": "official Python documentation", "paragraph_index": 4}, {"url": "https://realpython.com/python-kwargs-and-args/", "anchor_text": "Python args and kwargs: Demystified", "paragraph_index": 8}, {"url": "https://docs.python.org/3.3/library/itertools.html#itertools.zip_longest", "anchor_text": "itertools.zip_longest", "paragraph_index": 12}, {"url": "http://linkedin.com/in/xiaoxugao/", "anchor_text": "linkedin.com/in/xiaoxugao/", "paragraph_index": 25}], "all_paragraphs": ["In Python, there are several ways to merge 2 lists/tuples/sets/dictionaries. What I mean by \u201cmerge\u201d is not just appending one to the other, but grouping elements with the same index. If you are in an interview, the interviewer asks you to implement the following logic, what would be your first \u201cbrute force\u201d answer?", "Probably you will come up with something like this. The program iterates over the length of city and each time it gets the value from country and city with the same index, and then put them in a tuple. This is definitely a working solution, but not the one your interviewer is waiting for.", "To improve it a little bit, you can use enumerate to iterate city. enumerate returns both the index and value of each element in the list. So we can replace city[i] with ci. But this is still not the ideal answer.", "Python has many hidden gems and zip() is one of them. It\u2019s able to solve the same problem in a cleaner way. We all like clean code, don\u2019t we?", "From the official Python documentation, zip(*iterables) makes an iterator that aggregates elements from each of the iterators.", "The single asterisk (*) means it unpacks the iterators. For example, if you have two lists list1=[\"a1\",\"a2\"] and list2=[\"b1\",\"b2\"], you don\u2019t have to create a new list of arguments and pass it to the function like zip([list1,list2]), but instead, you can just do zip(list1, list2).", "Unpacking operator (*) can be used when you don\u2019t know the number of arguments of your function. For example, you can calculate the sum of an unknown number of arguments.", "Another unpacking operator is (**). The two asterisks unpack dictionaries. It means that each argument must have a key, that\u2019s why you normally see **kwargs (keyword arguments) as the input name. Just to be clear, you can give any name to it like **nums.", "If you want to know more about *args and **kwargs, I would recommend you to read Python args and kwargs: Demystified from Real Python.", "Let\u2019s talk about zip() again. We\u2019ve understood that the input of zip(*iterables) is a number of iterators. The iterator can be a str, list, tuple, set, or dictionary. Internally, zip() loops over all the iterators multiple rounds. In each round, it calls next() function to each iterator and puts the value in a tuple and yield the tuple at the end of the round. Then it continues with the next round. The loop will be over if any of the iterators is exhausted. Maybe it\u2019s easier to read the code. Python documentation gives the following code to help readers understand how zip() works under the hood.", "Then let\u2019s solve the previous problem with zip(). It yields a tuple each time. An advantage of using yield is to save RAM usage because we don\u2019t need to store the entire result sequence in memory.", "The default zip() follows Cannikin Law which means the length of the merged result is dependent on the shortest input iterable. That\u2019s why in the previous example, you don\u2019t see country X in the output.", "However, if you want the merged result to align with the longest input iterator, you can use itertools.zip_longest. In that case, the missing value will be filled with fillvalue defined by the user.", "Since we can \u201czip\u201d 2 iterators, we must be able to \u201cunzip\u201d it as well. The logic is unzipped = zip(*zip(*iterables)). In the example code, both zipped and unzipped objects have class zip , and they are not readable. We can convert them to a list or a tuple.", "There is no constraint on the number of input iterators. It can be 0, 1, or more. The cases where you have 0 or 1 input iterator are not very common, but it\u2019s still possible to do that.", "What would be the result of the following code? Think for a moment before reading further.", "According to what we\u2019ve seen previously, internally zip() performs iter() to each input argument. So the question is what\u2019s the output of iter(nl)? If we execute print(iter(nl)), we will get <dict_keyiterator object at 0x10e1e3f50>. That\u2019s why we only receive keys in the result.", "A better way is to use nl.items() as the input. In that case, we are able to receive both key and value in the loop.", "There is no constraint on the type of iterators either. In the following code, we use mixed types as input arguments. What would be the result? Think for a moment. This example is just for an educational purpose. It shouldn\u2019t be the best code you\u2019ve ever seen. \ud83d\ude42", "Each ele is a tuple of 3 elements that coming from 3 input arguments. The length of string should be considered as 5, not 1. Each loop will return 1 character. In total, the program loops 3 times because the shortest length of inputs is 3.", "If you are able to answer this question and explain the reasons behind it, then you\u2019ve mastered this chapter.", "zip() gives us the convenience to merge an unknown number of iterators with clean code. It works best when we have a number of iterators with the same size. zip() creates a generator, so it\u2019s able to work with long inputs and save RAM usage.", "Meanwhile, we should be aware of some behaviors of zip():", "I hope you enjoy this article! Leave your comments below if you have any thoughts.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "I\u2019m a Developer with a focus on Python and Data Engineering. I write stuff to talk to myself and the world. You can find me on linkedin.com/in/xiaoxugao/."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F9488a255f45d&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-zip-a-hidden-gem-in-python-9488a255f45d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-zip-a-hidden-gem-in-python-9488a255f45d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-zip-a-hidden-gem-in-python-9488a255f45d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-zip-a-hidden-gem-in-python-9488a255f45d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----9488a255f45d--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9488a255f45d--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@xiaoxugao?source=post_page-----9488a255f45d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@xiaoxugao?source=post_page-----9488a255f45d--------------------------------", "anchor_text": "Xiaoxu Gao"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2adc5a07e772&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-zip-a-hidden-gem-in-python-9488a255f45d&user=Xiaoxu+Gao&userId=2adc5a07e772&source=post_page-2adc5a07e772----9488a255f45d---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9488a255f45d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-zip-a-hidden-gem-in-python-9488a255f45d&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9488a255f45d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-zip-a-hidden-gem-in-python-9488a255f45d&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@fabrizioverrecchia", "anchor_text": "Fabrizio Verrecchia"}, {"url": "https://unsplash.com/", "anchor_text": "Unsplash"}, {"url": "https://gist.github.com/highsmallxu/762de9e7fa30f88435b8840acb3fe8c9", "anchor_text": "brute-force.py"}, {"url": "https://gist.github.com/highsmallxu/4dd01295a240982a981088471c7b219f", "anchor_text": "enumerate.py"}, {"url": "https://docs.python.org/3.3/library/functions.html#zip", "anchor_text": "official Python documentation"}, {"url": "https://gist.github.com/highsmallxu/6d8d028521bfbd9e89ad1540fe8ff2dc", "anchor_text": "unpacking.py"}, {"url": "https://gist.github.com/highsmallxu/78564cc88601f946edac6eecfc334235", "anchor_text": "kwargs.py"}, {"url": "https://realpython.com/python-kwargs-and-args/", "anchor_text": "Python args and kwargs: Demystified"}, {"url": "https://realpython.com/python-kwargs-and-args/", "anchor_text": "Python args and kwargs: Demystified - Real PythonIn this step-by-step tutorial, you'll learn how to use args and kwargs in Python to add more flexibility to your\u2026realpython.com"}, {"url": "https://gist.github.com/highsmallxu/1a387695ece6b04456f0691f5f8dcd56", "anchor_text": "zip_implementation.py"}, {"url": "https://docs.python.org/3.3/library/functions.html#zip", "anchor_text": "python doc"}, {"url": "https://gist.github.com/highsmallxu/09de348916edfd389d1b6472903cbb31", "anchor_text": "zip-example.py"}, {"url": "http://keropokleko.blogspot.com/2015/06/effects.html", "anchor_text": "blog"}, {"url": "https://docs.python.org/3.3/library/itertools.html#itertools.zip_longest", "anchor_text": "itertools.zip_longest"}, {"url": "https://gist.github.com/highsmallxu/ec88ae0684c7da1c78abf2a8d56243fb", "anchor_text": "zip-longest.py"}, {"url": "https://gist.github.com/highsmallxu/d0c2fac18cb52506c7aded18b22dff49", "anchor_text": "unzip.py"}, {"url": "https://gist.github.com/highsmallxu/58b44a60e2a8f77883a49d4e1d0efd37", "anchor_text": "zip-edge-cases.py"}, {"url": "https://gist.github.com/highsmallxu/d210af80c179ae60cc9d58970a33bfb4", "anchor_text": "zip-dictionary.py"}, {"url": "https://gist.github.com/highsmallxu/ba9fb892fdef9548d5b332e58217ac31", "anchor_text": "zip-dictionary-2.py"}, {"url": "https://docs.python.org/3.3/library/functions.html#zip", "anchor_text": "2. Built-in Functions - Python 3.3.7 documentationThe Python interpreter has a number of functions and types built into it that are always available. They are listed\u2026docs.python.org"}, {"url": "https://appdividend.com/2019/04/09/python-zip-example-python-zip-function-tutorial/", "anchor_text": "Python zip Example | Python zip() Function For IterationPython zip() is an inbuilt function that returns the zip object, which is the iterator of tuples where the first item\u2026appdividend.com"}, {"url": "https://medium.com/tag/python?source=post_page-----9488a255f45d---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/programming?source=post_page-----9488a255f45d---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-science?source=post_page-----9488a255f45d---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/software-development?source=post_page-----9488a255f45d---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----9488a255f45d---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9488a255f45d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-zip-a-hidden-gem-in-python-9488a255f45d&user=Xiaoxu+Gao&userId=2adc5a07e772&source=-----9488a255f45d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9488a255f45d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-zip-a-hidden-gem-in-python-9488a255f45d&user=Xiaoxu+Gao&userId=2adc5a07e772&source=-----9488a255f45d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9488a255f45d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-zip-a-hidden-gem-in-python-9488a255f45d&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9488a255f45d--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F9488a255f45d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-zip-a-hidden-gem-in-python-9488a255f45d&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----9488a255f45d---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----9488a255f45d--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----9488a255f45d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----9488a255f45d--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----9488a255f45d--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----9488a255f45d--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----9488a255f45d--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----9488a255f45d--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----9488a255f45d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@xiaoxugao?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@xiaoxugao?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Xiaoxu Gao"}, {"url": "https://medium.com/@xiaoxugao/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "9.6K Followers"}, {"url": "http://linkedin.com/in/xiaoxugao/", "anchor_text": "linkedin.com/in/xiaoxugao/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2adc5a07e772&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-zip-a-hidden-gem-in-python-9488a255f45d&user=Xiaoxu+Gao&userId=2adc5a07e772&source=post_page-2adc5a07e772--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F45d7754eac8c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-zip-a-hidden-gem-in-python-9488a255f45d&newsletterV3=2adc5a07e772&newsletterV3Id=45d7754eac8c&user=Xiaoxu+Gao&userId=2adc5a07e772&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}