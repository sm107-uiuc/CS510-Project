{"url": "https://towardsdatascience.com/modern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8", "time": 1682994960.384913, "path": "towardsdatascience.com/modern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8/", "webpage": {"metadata": {"title": "Modern Parallel and Distributed Python: A Quick Tutorial on Ray | by Robert Nishihara | Towards Data Science", "h1": "Modern Parallel and Distributed Python: A Quick Tutorial on Ray", "description": "Parallel and distributed computing are a staple of modern applications. We need to leverage multiple cores or multiple machines to speed up applications or to run them at a large scale. The\u2026"}, "outgoing_paragraph_urls": [{"url": "https://ray.io/", "anchor_text": "Ray", "paragraph_index": 0}, {"url": "https://github.com/ray-project/ray", "anchor_text": "Ray", "paragraph_index": 2}, {"url": "https://docs.python.org/2/library/multiprocessing.html", "anchor_text": "multiprocessing module", "paragraph_index": 3}, {"url": "https://ray.io/", "anchor_text": "Ray", "paragraph_index": 4}, {"url": "https://www.open-mpi.org/", "anchor_text": "OpenMPI", "paragraph_index": 7}, {"url": "https://docs.python.org/2/library/multiprocessing.html", "anchor_text": "Python multiprocessing", "paragraph_index": 7}, {"url": "http://zeromq.org/", "anchor_text": "ZeroMQ", "paragraph_index": 7}, {"url": "https://www.tensorflow.org/", "anchor_text": "TensorFlow", "paragraph_index": 8}, {"url": "https://spark.apache.org/", "anchor_text": "Spark", "paragraph_index": 8}, {"url": "https://flink.apache.org/", "anchor_text": "Flink", "paragraph_index": 8}, {"url": "https://github.com/ray-project/ray", "anchor_text": "Ray", "paragraph_index": 9}, {"url": "https://wiki.python.org/moin/GlobalInterpreterLock", "anchor_text": "global interpreter lock", "paragraph_index": 11}, {"url": "https://en.wikipedia.org/wiki/Futures_and_promises", "anchor_text": "future", "paragraph_index": 12}, {"url": "https://en.wikipedia.org/wiki/Directed_acyclic_graph", "anchor_text": "DAG", "paragraph_index": 14}, {"url": "https://docs.ray.io/en/latest/rllib/index.html", "anchor_text": "reinforcement learning", "paragraph_index": 25}, {"url": "https://ray.readthedocs.io/en/latest/tune.html", "anchor_text": "hyperparameter tuning", "paragraph_index": 25}, {"url": "https://github.com/modin-project/modin", "anchor_text": "speeding up Pandas", "paragraph_index": 25}], "all_paragraphs": ["Ray is an open source project for parallel and distributed Python.", "Parallel and distributed computing are a staple of modern applications. We need to leverage multiple cores or multiple machines to speed up applications or to run them at a large scale. The infrastructure for crawling the web and responding to search queries are not single-threaded programs running on someone\u2019s laptop but rather collections of services that communicate and interact with one another.", "This post will describe how to use Ray to easily build applications that can scale from your laptop to a large cluster.", "Many tutorials explain how to use Python\u2019s multiprocessing module. Unfortunately the multiprocessing module is severely limited in its ability to handle the requirements of modern applications. These requirements include the following:", "Ray addresses all of these points, makes simple things simple, and makes complex behavior possible.", "Traditional programming relies on two core concepts: functions and classes. Using these building blocks, programming languages allow us to build countless applications.", "However, when we migrate our applications to the distributed setting, the concepts typically change.", "On one end of the spectrum, we have tools like OpenMPI, Python multiprocessing, and ZeroMQ, which provide low-level primitives for sending and receiving messages. These tools are very powerful, but they provide a different abstraction and so single-threaded applications must be rewritten from scratch to use them.", "On the other end of the spectrum, we have domain-specific tools like TensorFlow for model training, Spark for data processing and SQL, and Flink for stream processing. These tools provide higher-level abstractions like neural networks, datasets, and streams. However, because they differ from the abstractions used for serial programming, applications again must be rewritten from scratch to leverage them.", "Ray occupies a unique middle ground. Instead of introducing new concepts. Ray takes the existing concepts of functions and classes and translates them to the distributed setting as tasks and actors. This API choice allows serial applications to be parallelized without major modifications.", "The ray.init() command starts all of the relevant Ray processes. On a cluster, this is the only line that needs to change (we need to pass in the cluster address). These processes include the following:", "Ray workers are separate processes as opposed to threads because support for multi-threading in Python is very limited due to the global interpreter lock.", "To turn a Python function f into a \u201cremote function\u201d (a function that can be executed remotely and asynchronously), we declare the function with the @ray.remote decorator. Then function invocations via f.remote() will immediately return futures (a future is a reference to the eventual output), and the actual function execution will take place in the background (we refer to this execution as a task).", "Because the call to f.remote(i) returns immediately, four copies of f can be executed in parallel simply by running that line four times.", "Tasks can also depend on other tasks. Below, the multiply_matrices task uses the outputs of the two create_matrix tasks, so it will not begin executing until after the first two tasks have executed. The outputs of the first two tasks will automatically be passed as arguments into the third task and the futures will be replaced with their corresponding values). In this manner, tasks can be composed together with arbitrary DAG dependencies.", "Task dependencies can be used in much more sophisticated ways. For example, suppose we wish to aggregate 8 values together. This example uses integer addition, but in many applications, aggregating large vectors across multiple machines can be a bottleneck. In this case, changing a single line of code can change the aggregation\u2019s running time from linear to logarithmic in the number of values being aggregated.", "As described above, to feed the output of one task as an input into a subsequent task, simply pass the future returned by the first task as an argument into the second task. This task dependency will automatically be taken into account by Ray\u2019s scheduler. The second task will not execute until the first task has finished, and the output of the first task will automatically be shipped to the machine on which the second task is executing.", "The above code is very explicit, but note that both approaches can be implemented in a more concise fashion using while loops.", "It\u2019s challenging to write interesting applications without using classes, and this is as true in the distributed setting as it is on a single core.", "Ray allows you to take a Python class and declare it with the @ray.remote decorator. Whenever the class is instantiated, Ray creates a new \u201cactor\u201d, which is a process that runs somewhere in the cluster and holds a copy of the object. Method invocations on that actor turn into tasks that run on the actor process and can access and mutate the state of the actor. In this manner, actors allow mutable state to be shared between multiple tasks in a way that remote functions do not.", "Individual actors execute methods serially (each individual method is atomic) so there are no race conditions. Parallelism can be achieved by creating multiple actors.", "The above example is the simplest possible usage of actors. The line Counter.remote() creates a new actor process, which has a copy of the Counter object. The calls to c.get_value.remote() and c.inc.remote() execute tasks on the remote actor process and mutate the state of the actor.", "In the above example, we only invoked methods on the actor from the main Python script. One of the most powerful aspects of actors is that we can pass around handles to an actor, which allows other actors or other tasks to all invoke methods on the same actor.", "The following example creates an actor that stores messages. Several worker tasks repeatedly push messages to the actor, and the main Python script reads the messages periodically.", "Actors are extremely powerful. They allow you to take a Python class and instantiate it as a microservice which can be queried from other actors and tasks and even other applications.", "Tasks and actors are the core abstractions provided by Ray. These two concepts are very general and can be used to implement sophisticated applications including Ray\u2019s builtin libraries for reinforcement learning, hyperparameter tuning, speeding up Pandas, and much more.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F99f8d70369b8&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----99f8d70369b8--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----99f8d70369b8--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@robertnishihara?source=post_page-----99f8d70369b8--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@robertnishihara?source=post_page-----99f8d70369b8--------------------------------", "anchor_text": "Robert Nishihara"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fff6b3bf101cd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&user=Robert+Nishihara&userId=ff6b3bf101cd&source=post_page-ff6b3bf101cd----99f8d70369b8---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F99f8d70369b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F99f8d70369b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://ray.io/", "anchor_text": "Ray"}, {"url": "https://github.com/ray-project/ray", "anchor_text": "Ray"}, {"url": "https://docs.python.org/2/library/multiprocessing.html", "anchor_text": "multiprocessing module"}, {"url": "https://en.wikipedia.org/wiki/Microservices", "anchor_text": "microservices"}, {"url": "https://en.wikipedia.org/wiki/Actor_model", "anchor_text": "actors"}, {"url": "https://en.wikipedia.org/wiki/Fault_tolerance", "anchor_text": "machine failures"}, {"url": "https://ray-project.github.io/2017/10/15/fast-python-serialization-with-ray-and-arrow.html", "anchor_text": "large objects and numerical data"}, {"url": "https://ray.io/", "anchor_text": "Ray"}, {"url": "https://www.open-mpi.org/", "anchor_text": "OpenMPI"}, {"url": "https://docs.python.org/2/library/multiprocessing.html", "anchor_text": "Python multiprocessing"}, {"url": "http://zeromq.org/", "anchor_text": "ZeroMQ"}, {"url": "https://www.tensorflow.org/", "anchor_text": "TensorFlow"}, {"url": "https://spark.apache.org/", "anchor_text": "Spark"}, {"url": "https://flink.apache.org/", "anchor_text": "Flink"}, {"url": "https://github.com/ray-project/ray", "anchor_text": "Ray"}, {"url": "https://arrow.apache.org/docs/python/plasma.html", "anchor_text": "shared-memory object store"}, {"url": "https://wiki.python.org/moin/GlobalInterpreterLock", "anchor_text": "global interpreter lock"}, {"url": "https://en.wikipedia.org/wiki/Futures_and_promises", "anchor_text": "future"}, {"url": "https://en.wikipedia.org/wiki/Directed_acyclic_graph", "anchor_text": "DAG"}, {"url": "https://docs.ray.io/en/latest/rllib/index.html", "anchor_text": "reinforcement learning"}, {"url": "https://ray.readthedocs.io/en/latest/tune.html", "anchor_text": "hyperparameter tuning"}, {"url": "https://github.com/modin-project/modin", "anchor_text": "speeding up Pandas"}, {"url": "https://github.com/ray-project/ray", "anchor_text": "GitHub"}, {"url": "https://docs.ray.io/en/master/index.html", "anchor_text": "Ray documentation"}, {"url": "https://discuss.ray.io/", "anchor_text": "Ray forum"}, {"url": "https://docs.ray.io/en/latest/rllib/index.html", "anchor_text": "scaling reinforcement learning"}, {"url": "https://docs.ray.io/en/master/tune/index.html", "anchor_text": "scaling hyperparameter tuning"}, {"url": "https://docs.ray.io/en/master/serve/index.html", "anchor_text": "scaling model serving"}, {"url": "https://docs.ray.io/en/master/data/dask-on-ray.html", "anchor_text": "scaling data processing"}, {"url": "https://medium.com/tag/programming?source=post_page-----99f8d70369b8---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/distributed-systems?source=post_page-----99f8d70369b8---------------distributed_systems-----------------", "anchor_text": "Distributed Systems"}, {"url": "https://medium.com/tag/python?source=post_page-----99f8d70369b8---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----99f8d70369b8---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/cloud-computing?source=post_page-----99f8d70369b8---------------cloud_computing-----------------", "anchor_text": "Cloud Computing"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F99f8d70369b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&user=Robert+Nishihara&userId=ff6b3bf101cd&source=-----99f8d70369b8---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F99f8d70369b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&user=Robert+Nishihara&userId=ff6b3bf101cd&source=-----99f8d70369b8---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F99f8d70369b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----99f8d70369b8--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F99f8d70369b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----99f8d70369b8---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----99f8d70369b8--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----99f8d70369b8--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----99f8d70369b8--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----99f8d70369b8--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----99f8d70369b8--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----99f8d70369b8--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----99f8d70369b8--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----99f8d70369b8--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@robertnishihara?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@robertnishihara?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Robert Nishihara"}, {"url": "https://medium.com/@robertnishihara/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "422 Followers"}, {"url": "https://twitter.com/robertnishihara", "anchor_text": "https://twitter.com/robertnishihara"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fff6b3bf101cd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&user=Robert+Nishihara&userId=ff6b3bf101cd&source=post_page-ff6b3bf101cd--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F887029f3f520&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&newsletterV3=ff6b3bf101cd&newsletterV3Id=887029f3f520&user=Robert+Nishihara&userId=ff6b3bf101cd&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}