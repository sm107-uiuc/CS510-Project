{"url": "https://towardsdatascience.com/tour-of-python-itertools-2af84db18a5e", "time": 1683003931.415137, "path": "towardsdatascience.com/tour-of-python-itertools-2af84db18a5e/", "webpage": {"metadata": {"title": "Tour of Python Itertools. Let\u2019s explore two great Python\u2026 | by Martin Heinz | Towards Data Science", "h1": "Tour of Python Itertools", "description": "Let\u2019s explore two great Python libraries \u2014 itertools and more_itertools and see how to leverage them for data processing\u2026"}, "outgoing_paragraph_urls": [{"url": "https://docs.python.org/3/library/itertools.html#itertools-recipes", "anchor_text": "itertools recipes", "paragraph_index": 36}, {"url": "https://martinheinz.dev/blog/16", "anchor_text": "martinheinz.dev", "paragraph_index": 37}, {"url": "https://martinheinz.dev/", "anchor_text": "https://martinheinz.dev/", "paragraph_index": 39}, {"url": "https://ko-fi.com/martinheinz", "anchor_text": "https://ko-fi.com/martinheinz", "paragraph_index": 39}], "all_paragraphs": ["There are lots of great Python libraries, but most of them don\u2019t come close to what built-in itertools and also more-itertools provide. These two libraries are really the whole kitchen sink when it comes to processing/iterating over some data in Python. At first glance however, functions in those libraries might not seem that useful, so let's make little tour of (in my opinion) the most interesting ones, including examples how to get the most out of them!", "You have quite a few options when it comes to filtering sequences, one of them is compress, which takes iterable and boolean selector and outputs items of the iterable where the corresponding element in the selector is True.", "We can use this to apply result of filtering of one sequence to another, like in the above example, where we create list of dates where the corresponding count is greater than 3.", "As name suggests \u2014 we will use this function to accumulate results of some (binary) function. Example of this can be running maximum or factorial:", "If you don\u2019t care about intermediate results, you could use functools.reduce (called fold in other languages), which keeps only final value and is also more memory efficient.", "This function takes iterable and creates infinite cycle from it. This can be useful for example in a game, where players take turns. Another cool thing you can do with cycle is to create simple infinite spinner:", "Final one from itertools module is tee, this function creates multiple iterators from one, which allows us to remember what happened. Example of that is pairwise function from itertools recipes (and also more_itertools), which returns pairs of values from input iterable (current value and previous one):", "This function is handy every time you need multiple separate pointers to the same stream of data. Be careful when using it though, as it can be pretty costly when it comes to memory. Also important to note is that you should not use an original iterable after you use tee on it as it will mess up (unintentionally advance) those new tee objects.", "Now, let\u2019s have a closer look at what the more_itertools library offers, as there are many interesting functions, that you might not have heard about.", "First up from more_itertools is divide. As the name suggests, it divides iterable into number of sub-iterables. As you can see in example below, the length of the sub-iterables might not be the same, as it depends on number of elements being divided and number of sub-iterables.", "With this function, we will be also dividing our iterable, this time however, using a predicate:", "In the first example above, we are splitting list of dates into recent ones and old ones, using simple lambda function. For the second example we are partitioning files based on their extension, again using lambda function which splits file name into name and extension and checks whether the extension is in list of allowed ones.", "If you need to find runs of consecutive numbers, dates, letters, booleans or any other orderable objects, then you might find consecutive_groups handy:", "In this example, we have a list of dates, where some of them are consecutive. To be able to pass these dates to consecutive_groups function, we first have to convert them to ordinal numbers. Then using list comprehension we iterate over groups of consecutive ordinal dates created by consecutive_groups and convert them back to datetime.datetime using map and fromordinal functions.", "Let\u2019s say you need to cause side-effect when iterating over list of items. This side-effect could be e.g. writing logs, writing to file or like in the example below counting number of events that occurred:", "We declare a simple function that will increment a counter every time it\u2019s invoked. This function is then passed to side_effect along with non-specific iterable called events. Later when the event iterator is consumed, it will call increment_num_events for each item, giving us final events count.", "This is a more powerful version of another more_itertools function called flatten. collapse allows you to flatten multiple levels of nesting. It also allows you to specify base type, so that you can stop flattening with one layer of lists/tuples remaining. One use-case for this function would be flattening of Pandas DataFrame. Here are little more general purpose examples:", "First one generates list of files and directory paths by collapsing iterables returned by os.walk. In the second one we take tree data structure in a form of nested lists and collapse it to get flat list of all nodes of said tree.", "Back to splitting data. split_at function splits iterable into lists based on predicate. This works like basic split for strings, but here we have iterable instead of string and predicate function instead of delimiter:", "Above, we simulate text file using list of lines. This \u201ctext file\u201d contains lines with -------------, which is used as delimiter. So, that's what we use as our predicate for splitting these lines into separate lists.", "If you need to split your iterable into multiple buckets based on some condition, then bucket is what you are looking for. It creates child iterables by splitting input iterable using key function:", "Here we show how to bucket iterable based on items type. We first declare a few types of shapes and create a list of them. When we call bucket on this list with the above key function, we create a bucket object. This object supports lookup like built-in Python dict. Also, as you can see, each item in the whole bucket object is a generator, therefore we need to call list on it to actually get the values out of it.", "Probably the most interesting function in this library for all the data science people out there \u2014 the map_reduce. I'm not going to go into detail on how MapReduce works as that is not purpose of this article and there's lots of articles about that already. What I'm gonna show you though, is how to use it:", "This MapReduce implementation allows us to specify 3 functions: key function (for categorizing), value function (for transforming) and finally reduce function (for reducing). Some of these function can be omitted to produce intermediate steps in MapReduce process, as shown above.", "If you work with spreadsheets of data, chances are, that you need to sort it by some column. This is a simple task for sort_together. It allows us to specify by which column(s) to sort the data:", "Input to the function is list of iterables (columns) and key_list which is tells sort_together which of the iterables to use for sorting and with what priority. In case of the above example with first sort the \"table\" by Date of Birth and then by Updated At column.", "We all love iterators, but you should always be careful with them in Python as one of their features is that they consume the supplied iterable. They don\u2019t have to though, thanks to seekable:", "seekable is a function that wraps iterable in an object that makes it possible to go back and forth through an iterator, even after some elements were consumed. In the example you can see that we've got StopIteration exception after going through the whole iterator, but we can seek back and keep working with it.", "Let\u2019s look at following scenario: You received mixed data, that contains both text and numbers and all of it is in string form. You, however, want to work only with numbers (floats/ints):", "filter_except filters items of input iterable, by passing elements of iterable to provided function (float) and checking whether it throws error (TypeError, ValueError) or not, keeping only elements that passed the check.", "unique_to_each is one of the more obscure functions in more_itertools library. It takes bunch of iterables and returns elements from each of them, that aren't in the other ones. It's better to look at example:", "Here, we define graph data structure using adjacency list (actually dict). We then pass neighbours of each node as a set to unique_to_each. What it outputs is a list of nodes that would get isolated if respective node was to be removed.", "This one has a lot of use cases, as it\u2019s quite common that you would need to iterate over a range of some non-integer values:", "What is nice about numeric_range is that it behaves the same way as basic range. You can specify start , stop and step arguments as in examples above, where we first use decimals between 1.7 and 3.5 with step of 0.3 and then dates between 2020/2/10 and 2020/2/15 with step of 2 days.", "Last but not least, make_decorator enables us to use other itertools as decorators and therefore modify outputs of other functions, producing iterators:", "This example takes map_except function and creates decorator out of it. This decorator will consume the result of the decorated function as its second argument (result_index=1). In our case, the decorated function is read_file, which simulates reading data of some file and outputs a list of strings that might or might not be floats. The output however, is first passed to decorator, which maps and filters all the undesirable items, leaving us with only floats.", "I hope that you learned something new in this article, as itertools and more_itertools can make your life a whole lot easier if you are processing lots of data frequently. Using these libraries and functions however, requires some practice to be efficient with. So, if you think that you can make use of some of the things shown in this article, then go ahead and checkout itertools recipes or just force yourself to use these as much as possible to get comfortable with it. \ud83d\ude09", "This article was originally posted at martinheinz.dev", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "CKA | RHCE | DevOps Engineer at IBM | Working with Python, Kubernetes, Linux and more | https://martinheinz.dev/ | https://ko-fi.com/martinheinz"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F2af84db18a5e&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftour-of-python-itertools-2af84db18a5e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftour-of-python-itertools-2af84db18a5e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftour-of-python-itertools-2af84db18a5e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftour-of-python-itertools-2af84db18a5e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----2af84db18a5e--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----2af84db18a5e--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@martin.heinz?source=post_page-----2af84db18a5e--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@martin.heinz?source=post_page-----2af84db18a5e--------------------------------", "anchor_text": "Martin Heinz"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4cbd6b36e62a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftour-of-python-itertools-2af84db18a5e&user=Martin+Heinz&userId=4cbd6b36e62a&source=post_page-4cbd6b36e62a----2af84db18a5e---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2af84db18a5e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftour-of-python-itertools-2af84db18a5e&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2af84db18a5e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftour-of-python-itertools-2af84db18a5e&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@trevcole?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Trevor Cole"}, {"url": "https://unsplash.com/s/photos/snake?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://docs.python.org/3/library/itertools.html#itertools-recipes", "anchor_text": "itertools recipes"}, {"url": "https://martinheinz.dev/blog/16", "anchor_text": "martinheinz.dev"}, {"url": "https://medium.com/tag/programming?source=post_page-----2af84db18a5e---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-science?source=post_page-----2af84db18a5e---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/python?source=post_page-----2af84db18a5e---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----2af84db18a5e---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/software-engineering?source=post_page-----2af84db18a5e---------------software_engineering-----------------", "anchor_text": "Software Engineering"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2af84db18a5e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftour-of-python-itertools-2af84db18a5e&user=Martin+Heinz&userId=4cbd6b36e62a&source=-----2af84db18a5e---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2af84db18a5e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftour-of-python-itertools-2af84db18a5e&user=Martin+Heinz&userId=4cbd6b36e62a&source=-----2af84db18a5e---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2af84db18a5e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftour-of-python-itertools-2af84db18a5e&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----2af84db18a5e--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F2af84db18a5e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftour-of-python-itertools-2af84db18a5e&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----2af84db18a5e---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----2af84db18a5e--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----2af84db18a5e--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----2af84db18a5e--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----2af84db18a5e--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----2af84db18a5e--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----2af84db18a5e--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----2af84db18a5e--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----2af84db18a5e--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@martin.heinz?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@martin.heinz?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Martin Heinz"}, {"url": "https://medium.com/@martin.heinz/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "5.4K Followers"}, {"url": "https://martinheinz.dev/", "anchor_text": "https://martinheinz.dev/"}, {"url": "https://ko-fi.com/martinheinz", "anchor_text": "https://ko-fi.com/martinheinz"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4cbd6b36e62a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftour-of-python-itertools-2af84db18a5e&user=Martin+Heinz&userId=4cbd6b36e62a&source=post_page-4cbd6b36e62a--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff723091181e3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftour-of-python-itertools-2af84db18a5e&newsletterV3=4cbd6b36e62a&newsletterV3Id=f723091181e3&user=Martin+Heinz&userId=4cbd6b36e62a&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}