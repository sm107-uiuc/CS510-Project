{"url": "https://towardsdatascience.com/combining-d3-with-kedion-graduating-from-toy-visuals-to-real-applications-92bf7c3cc713", "time": 1682993688.404246, "path": "towardsdatascience.com/combining-d3-with-kedion-graduating-from-toy-visuals-to-real-applications-92bf7c3cc713/", "webpage": {"metadata": {"title": "Graduating from Toy Visuals to Real Applications with D3.js | by Sean McClure | Towards Data Science", "h1": "Graduating from Toy Visuals to Real Applications with D3.js", "description": "Too often we learn about technology and methods in isolation, disconnected from the true goal of data science; to create real applications powered by machine learning. But what do I mean by real? To\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/creating-web-applications-with-d3-observable-d5c53467ff12", "anchor_text": "this article.", "paragraph_index": 0}, {"url": "https://azlejs.com/", "anchor_text": "Azle", "paragraph_index": 6}, {"url": "https://collaboratescience.com/azle_d3/", "anchor_text": "here", "paragraph_index": 7}, {"url": "https://github.com/WorldofDataScience/azle_d3", "anchor_text": "repo", "paragraph_index": 7}, {"url": "https://azlejs.com/", "anchor_text": "Azle", "paragraph_index": 8}, {"url": "https://towardsdatascience.com/learn-to-build-machine-learning-services-prototype-real-applications-and-deploy-your-work-to-aa97b2b09e0c", "anchor_text": "Learn to Build Machine Learning Services, Prototype Real Applications, and Deploy your Work to Users", "paragraph_index": 8}, {"url": "https://d3js.org", "anchor_text": "D3.js", "paragraph_index": 9}, {"url": "https://d3js.org", "anchor_text": "website", "paragraph_index": 14}, {"url": "https://christopheviau.com/d3list/", "anchor_text": "here", "paragraph_index": 14}, {"url": "http://collaboratescience.com/medium_files/azle_d3_directory.zip", "anchor_text": "here", "paragraph_index": 16}, {"url": "http://localhost:8000", "anchor_text": "http://localhost:8000", "paragraph_index": 33}, {"url": "https://azlejs.com/", "anchor_text": "documentation", "paragraph_index": 53}, {"url": "https://github.com/sean-mcclure/azle_d3", "anchor_text": "here", "paragraph_index": 81}, {"url": "https://jsfiddle.net/CyberneticSean/a90bjest/158/", "anchor_text": "any of the animations", "paragraph_index": 86}, {"url": "https://gist.github.com/sean-mcclure/0fa4154e387faf6bf7190a3e77506b39", "anchor_text": "GithubGist", "paragraph_index": 103}, {"url": "https://towardsdatascience.com/learn-to-build-machine-learning-services-prototype-real-applications-and-deploy-your-work-to-aa97b2b09e0c", "anchor_text": "Building Machine Learning Services and Prototyping Real Applications", "paragraph_index": 114}], "all_paragraphs": ["NOTE: D3 now uses Observable, which I cover in this article.", "Too often we learn about technology and methods in isolation, disconnected from the true goal of data science; to create real applications powered by machine learning. But what do I mean by real? To me, real means any tech we touch should be part of a holistic application, delivering a true user experience.", "Training a new TensorFlow model? Build an app that logs someone in based on facial recognition. Wrote a library that automates common data cleansing tasks? Create an interface that enables teams to merge and cleanse data through the browser. Discovered a new approach to document classification? Craft a tool for uploading corporate email archives, identifying all topics related to a relevant topic, like team building.", "I\u2019m a fan of making real products, because I know it\u2019s the only way to be good in this field. We need to express machine learning concepts through real software people interact with, and understand how to craft a user experience with data.", "A common example of isolated work is data visualization. While \u201ctelling stories with data\u201d can be powerful, stories alone do not bring about real solutions. If your data science never makes it beyond the slide deck, you haven\u2019t really done data science. Stakeholders need to touch and feel what a solution looks like. With today\u2019s high-level tooling there is no excuse for data scientists not coding up real applications to showcase their work.", "If your data science never makes it beyond the slide deck, you haven\u2019t really done data science.", "In this post I show how real applications can be built with your visualizations by combining D3 with Azle. What makes these applications real is the binding of D3 to UI elements in an application. It is this connection between elements and visuals that ensure visualizations are more than storytellers; they are an integral part of an application that solves a real problem.", "I created a demo application that showcases the topics discussed in this article. You can checkout the application here and its corresponding repo on GitHub.", "Readers were first introduced to Azle in my article titled Learn to Build Machine Learning Services, Prototype Real Applications, and Deploy your Work to Users. Using layouts, pre-styled elements, and an easy-to-use REST API, Azle enables rapid product prototyping.", "D3.js is JavaScript library for producing dynamic, interactive data visualizations. D3 is capable of producing charts and graphs driven by data, and has become an industry standard visualization tool.", "While there are many example visuals on D3\u2019s website, there is little support for how to include these visuals inside applications. Although many libraries help make creating D3 visuals easier, this isn\u2019t the same as enabling communication between an application and D3.", "We could try prototyping using our organization\u2019s current tech stack, but this is overkill when we want to bang out a new idea quickly. We could also use a package that allows us to build \u201cinteractive web apps\u201d with R or Python. But this option does not lead to applications that have the look and feel of an organization\u2019s existing products. Imagine trying to recreate Amazon\u2019s or Netflix\u2019s interface using Shiny. There is also the \u201cwidget approach\u201d to adding UI elements to visuals, but this restricts the UI to the visual itself, rather than being integrated with a full application.", "Azle\u2019s support for D3 is different because there is no layout or styling you cannot accomplish with Azle. Any HTML, CSS, or JavaScript can be added to an Azle app, although its own highly-declarative syntax is usually all you need. The look and feel of your organization\u2019s product can be quickly mimicked, meaning your machine learning is being tested on an application stakeholders recognize. It is much easier to win buy-in from a prototype that makes improvements to a recognizable product.", "In this section I walk through the necessary steps to set up D3 to work with Azle. Once you\u2019ve been through these steps a few times you\u2019ll find setting up your Azle_D3 project quick and easy. These steps are the same for any D3 visual you decide to use with Azle.", "With the massive amount of D3 examples online, it rarely makes sense to build D3 from the ground-up. You\u2019ll likely be re-inventing the wheel and cutting into valuable development time better spent on finding hooks into existing visuals. The first step is to choose an existing D3 visual from D3\u2019s website. You can click examples at the top to preview many visuals, with an even bigger list available here.", "Let\u2019s choose a basic chart to show how we can setup our project. I will choose the Bar Chart found here:", "As with any application, we need to create a directory structure to hold our files. You can download the directory structure here to save time. Once downloaded, check your downloads folder. You should see the following:", "The d3_visuals folder holds the html files provided by D3. The data folder holds local data read by D3. scripts holds any Azle scripts, and index.html is the main page of our application. These files are empty for now, as we will paste in the needed code in this article.", "This same structure will serve our applications regardless the number of visuals or datasets we need to support. More D3 visuals just means more .html files in the d3_visuals folder, and more datasets in the data folder.", "Since we are using D3\u2019s Bar Chart we will add the HTML and DATA provided on the D3 example page for the Bar Chart.", "In the GIF above you can see me grabbing the html from D3\u2019s Bar Chart example, and pasting it into the barchart.html file in the d3_visuals folder.", "Above, I grab the data.tsv from D3\u2019s Bar Chart example and paste it into my barchart.tsv file in the data folder. The other common data format used by D3 is CSV. The data format doesn't matter since the visual we are grabbing has already been created to read this data type. Later, we\u2019ll also look at local data stored client-side using JavaScript objects.", "We are now ready to start using Azle to create an application that interacts with our D3 Bar Chart. We start as we do with all Azle applications; by using Azle\u2019s html template file:", "This has everything we need to start adding Azle functions to build our application.", "We need a way to pass data from our application to our D3 visual. To make this possible we make a slight modification to the D3 HTML file (barchart.html) using the following 3 steps:", "Let\u2019s do these with our Bar Chart visual:", "Take any D3 code and simply wrap the draw_visual function around it. Also add the line azle_args = arguments[0]. This enables data and functions to be passed in-and-out of our D3 visual.", "With the above steps in place we can use Azle to pass data and functions in-an-out of our D3 visual. Deciding which data/functions to pass depends on what we would like to change dynamically.", "For example, say we want to allow users to change the dataset that drives the visual, by simply clicking a button in our application. In this case we look at the D3 code to see where the dataset is being read, and replace the filename with azle_args, and a key of our choice:", "In the above GIF I use the key [\u201cdata_choice\u201d]. This key can be anything you like, as long as you use the same key in the wrapper_arguments, which I discuss below. In other words, azle_args is used to accept data from Azle and use its value to replace an otherwise hard-coded piece of D3.", "We can find all kinds of hooks inside D3 to bind our visual to the rest of the application. Another example would be using Azle\u2019s color picker to allow users to change the bar color of our Bar Chart. In this case we look inside D3 to find where the bar color is set, and replace the color with azle_args[\u201cbar_color\u201d].", "Now that we have everything setup we can add our D3 visual to a real application. Since Azle is designed for building applications let\u2019s create an Azle layout and add our Bar Chart. Then we will see how we can communicate with our visual.", "In order to use our application we need a web server. These are easy to create on any local machine. For example, on my Mac I open terminal, change into the azle_d3_directory, and run the following line:", "Now I open my browser and go to http://localhost:8000", "We begin as always by preparing a basic page in Azle. Although I have a scripts folder I will just place everything between script tags at the bottom of my index.html file, inside the create_azle function:", "Let\u2019s add some basic styling, a section, and a layout to our application:", "We now have a layout we can use to position our content on the screen:", "I use a 1 row / 2 column layout since I want my UI elements to be on the left and my D3 visual to be on the right.", "There are 3 main pieces required to add D3 visuals our our application:", "To add our D3 visual we use Azle\u2019s add_d3_visual function. Here I add my Bar Chart to the 2nd cell of the layout I created above:", "Notice how I specify wrapper_arguments and extra_functions in the add_d3_visual function. We will create those objects now.", "As with any JavaScript object, wrapper_arguments is a list of properties, with each property being a key/value pair. This is where we list any values we want to pass to our D3 visual (like the data_choice example above). I am going to find a bunch of hooks in my Bar Chart that I want to set using Azle (and eventually control dynamically using UI elements in my application). Here is my wrapper_arguments object for my Bar Chart:", "For each of these, I replaced a part of my Bar Chart D3 code with azle_args[\u201ckey\u201d] (e.g. azle_args[\u201cbar_color\u201d]).", "There are actually 2 ways we can pass information to D3 using Azle. We have already seen how to pass data using wrapper_arguments. As long as we find the hook in D3 we just add azle_args[\u201ckey\u201d] to control that property. But what if our D3 visual is styled using CSS instead of D3?", "For example, the bar color in our Bar Chart is set at the top using CSS:", "In this case we can either modify the D3 code to color the bars using azle_args as we\u2019ve done above, or we can pass a function into our visual and style the \u201cbar\u201d class directly. Let\u2019s look at both scenarios to see the difference.", "SCENARIO 1: Passing Values with azle_args", "In the below GIF I look inside D3 to find where the bars of the Bar Chart are created, then add the necessary code to accept bar colors from azle_args:", "This means the bar_color property I added to my wrapper_arguments (in barchart_wrapper_args) will be passed to my D3 visual and the bars will be colored appropriately.", "SCENARIO 2: Passing Functions Directly to D3", "In this scenario I will set the bar color using extra_functions, allowing us to manipulate the CSS inside the visual. In this case we use the class name of the element we want to affect. Above (red arrow) we saw the class name for our bars is \u201cbar.\u201d Azle targets elements using class names so that\u2019s a natural fit. That being said, there are some discrepancies between JavaScript and D3 when it comes to styling and events, so we will use Azle\u2019s dedicated style_d3 function, inside our extra functions.", "Since we already have bar color working well using wrapper_arguments, I will instead target something else. In fact, I found it challenging to see how to color and size the labels on my Bar Chart using D3. In some D3 examples we see these labels styled using CSS, using the name text along with fill and font-size. Let\u2019s target \u201ctext\u201d using Azle\u2019s all_style_d3 function inside our extra_functions:", "We add our style_d3 function to the extra_functions object, which I will call barchart_extras:", "The all_ prefix in front of style_d3 is how Azle targets all instances of a class. Since we want to color all bars we use that here. You can review Azle\u2019s documentation to familiarize yourself with Azle\u2019s style syntax.", "Now, when our add_d3_visual function is called, both wrapper_arguments and extra_functions will be passed to our D3 visual:", "Let\u2019s style our application for better contrast.", "We can see the bar color is set since it is listed in wrapper_arguments, and our text labels are colored and sized since we used all_style_d3 inside our extra_functions.", "Our layout got a little squished after adding the Bar Chart, but we will fix that shortly.", "We don\u2019t have to use Azle functions in extra_functions. We can also pass vanilla Javascript to any D3 visual using extra_functions. Just make sure the function is enclosed in quotes.", "Let\u2019s add a few UI elements to the left side of our layout. I begin by adding another layout to the first cell of my original layout, in order to position my UI elements on the left side. I then add my UI elements to each cell of the new layout:", "Let\u2019s clean up the look of our layouts and do some basic styling. First, I\u2019ll set the widths of each column on the first layout:", "We can see the UI elements and D3 visual now sit properly within the layout. I also want to have the UI elements on the left centered within their own cells:", "Also, the default button color and slider label do not match well with the dark background. Let\u2019s change those:", "Finally, let\u2019s remove the borders on both layouts to give us a clean application. Set both layout styles to include a border property of 0:", "Now that we know how to add a visual, along with some basic UI elements, it\u2019s time to start binding our D3 visual to UI elements.", "Creating real software with D3 is all about ensuring we can interact with our visualizations using UI elements in our application. There are 2 functions Azle uses to interact with D3:", "In part 4 above we used wrapper_arguments to list any values we want to pass to our D3 visual. The call_d3_wrapper function is used to change our wrapper_arguments dynamically. This means any hooks we placed inside our D3 visual (using azle_args) will respond to changes we specify in call_d3_wrapper.", "The call_d3_wrapper function uses the usual Azle-style targeting with target_class and target_instance, and also lists properties related to our wrapper_arguments:", "Note the call_d3_wrapper function expects both wrapper_arguments and extra_functions to be listed. The reason we specify extra_functions is to preserve styling when the visual is redrawn. In the above example I plan on passing a value dynamically to the \u201cbar_color\u201d property.", "Let\u2019s bind our CHANGE DATA button to our Bar Chart. In Azle we use the add_event function to attach events to UI elements:", "Here we simply specify the type of event (e.g. click) and the function that gets called when the event fires. We want to call our call_d3_wrapper function when a user clicks the button. To make this a little more useful, let\u2019s allow the user to toggle back-and-forth between datasets anytime they click the button. I will create 2 separate change_data functions, each calling its own call_d3_wrapper with the appropriate data_choice. Then, I will use Azle\u2019s toggle_functions as the function inside add_event. Let\u2019s use Azle\u2019s wrapped functions to organize our code.", "We just created our first binding between a UI element and a D3 visual.", "For the dropdown, let\u2019s allow the user to choose between 3 different colors for our bars. First, we need to go back to our add_dropdown function and add the options, which we originally left blank:", "I also changed the title to \u201cchoose color.\u201d", "Now we can use add_event as before, but this time targeting our dropdown element and choosing change as the event type. I\u2019ll place my call_d3_wrapper inside a function called recolor_bars, then call this with my add_event:", "Notice this time I am passing an argument to the function inside add_event (the recolor_bars() function). The argument I am passing is the value chosen from the dropdown (using this.value is standard practice in JavaScript).", "Now let\u2019s bind our slider to our Bar Chart. By now we know the drill. The major difference this time is the event type is called as_change. This event type passes the argument as the slider moves. Let\u2019s allow the user to change the top margin of the chart:", "If you try moving the slider you\u2019ll notice the chart doesn\u2019t change much. We need to increase the range of values on our slider element to make it useful for our use case:", "Just as we have a function for dynamically changing our wrapper _arguments, we also have a function for dynamically changing our extra_functions. We used extra_functions in section 4 above to set the color and size of our text. Let\u2019s use call_d3_extra to bind our slider to text size, allowing users to dynamically change the text size. The call_d3_extra function can be used in the same fashion as call_d3_wrapper:", "Notice the transitions are smoother when we use call_d3_extra since the chart does not get redrawn.", "One more UI element I want to showcase is the color picker. Let\u2019s add another button that presents a color picker users can use to dynamically change the bar color. First, we need to add another row to our elements_layout. Then we can add and style our button, and use add_event to trigger the add_color_picker function:", "For the remainder of this article I will show examples built into the demo application referenced in the video at the beginning. This full example application with all source code can be found on GitHub here.", "There are a number of ways we can mix-and-match Azle functionality with D3. One option is to add animations. We can combine call_d3_extra with Azle\u2019s animate_element function to animate a specific element inside D3.", "In this case we need to assign a unique id to each element in D3. We can do this directly in D3, or use Azle\u2019s all_apply_id function.", "Once the ids are assigned we can use Azle\u2019s all_add_event function to add a hover event which calls Azle\u2019s animate_element function anytime the element is hovered over.", "Note we didn\u2019t use the all_ prefix to animate all bars. This would result in all bars being animated when only one bar is hovered over, which is not the desired behavior.", "You can experiment with any of the animations provided by Azle.", "A common scenario is allowing users to change the data driving a particular visual. We\u2019ve already seen an example of this. Here is the example used in the demo application:", "And here\u2019s one with radio buttons where we choose between different datasets, as well as subsets of the data:", "Later we\u2019ll see how to achieve this with client-side data fetched from a REST API.", "An important thing to notice is how we can move between UI elements without destroying the most recent change. For example, in the following Scatter Chart visual I can change the circle size, then change the chart width, change the dataset, and filter the data, while preserving styling throughout (note the GIF animation makes transitions look less smooth).", "It is often useful to have 2 D3 charts communicate with each other. For example, it might make sense to allow users to interact with one visual, and have that interaction impact a 2nd visual that displays corresponding information.", "We simply add 2 visuals and a bridge function to make this work. Let\u2019s give it a try.", "We create a layout with 1 row and 2 cells to hold both visuals. I\u2019ll call it the dual_viz_layout. Then we add visuals as usual:", "Add Bar Chart to Layout Cell 1", "Add Line Chart to Layout Cell 2", "Add hover event to Bar Chart, that calls a bridge function:", "Here we are adding some properties to our Bar Chart\u2019s extra_functions object. The important one is \u201ccall_line_chart\u201d, where I do the following:", "The first 2 steps are the same thing we did for animations. The bridge function is the function called when a user hovers over a bar on the Bar Chart. The bridge function needs to call call_d3_wrapper on the 2nd chart:", "Pay attention to how the hover event on our Bar Chart calls the bridge function. It uses the prefix parent. This is because the bridge function exists outside the D3 visual. It also uses Azle\u2019s get_target_instance() function to get the instance of the bar using its id.", "Notice we reused the same HTML file for this bar chart (as the one used at the beginning of this article). We only changed its wrapper_arguments and extra_functions.", "In the above example I am using Azle to add a hover event to the visual. But D3 comes with its own events and it may make more sense to use an event a visual comes with, particularly non-standard events supported by D3. In the following example I use Azle to combine the Brush visual with a horizontal Bar Chart. Here I pass the MIN and MAX values from the brushing on the left to the bars on the right:", "In this case I found where the brushing values were being updated in D3, and used the same parent prefix and bridge function approach discussed in the previous example, to pass those values to my call_d3_wrapper function:", "I created a GithubGist you can view, to see all files for the above example.", "Sometimes it makes sense to play a set of visuals automatically, as time progresses. This makes sense when we need to tell a story with our data using the time dimension. In the following example I combine call_d3_wrapper with Azle\u2019s call_every function to move through a set of visuals:", "It can also be useful to delegate click events in order to programmatically click elements inside a D3 visual. As an example, the circle packing visual on D3 typically expects the user to click on different circles to zoom in. Let\u2019s allow users to instead choose an option from a dropdown to zoom into sections of the visual.", "For this we use Azle\u2019s click_d3 function.", "Same approach, this time with a map:", "Up until now we have assumed D3 data are saved on disk. For example, above we used TSV and CSV files. For mocking up applications this is often sufficient. But there are times when we need to use client-side data, in which case data are stored, read or uploaded as JavaScript objects.", "In this section I will show how to use Azle and D3 using the 3 main types of client-side scenarios:", "Sometimes we don\u2019t need data on disk, like when we are mocking up a quick demo app or using data that don\u2019t change.", "In this example, I will show how to change between datasets where the data are stored as JavaScript objects. I will use the Chord diagram, which uses a matrix of values as data. First, let\u2019s create 3 matrices and store them in a JavaScript object called all_chord_data. I will also create a function called switch_client_side, which uses call_d3_wrapper to set the data_choice, as we have done previously:", "We simply bind our radio buttons to Azle\u2019s call_d3_wrapper function to change the dataset on our chord diagram.", "A common scenario in any application is fetching data from a REST API. This is particularly true in machine learning applications that need to run analytics and return results to the product.", "Azle\u2019s call_api function is used for this purpose. Readers familiar with my article on Building Machine Learning Services and Prototyping Real Applications will recognize this function. This allows us to make a REST call, wait for the response, then run a function of our choice once the data are received. Let\u2019s use call_api to fetch data from an API I wrote for this article:", "Here we can see the Chord Diagram change after receiving new data from call_api.", "It can be useful to allow users to upload data from the browser. As with the other client-side scenarios, this works well for smaller, summarized datasets.", "Here I create a file called my_data.json. In this file is the matrix expected for the chord diagram, as we saw above:", "This is standard JSON format that allows me to index different datasets. Here I only store one matrix in my file but it could be many, as we did above for using JS objects.", "We will use Azle\u2019s add_upload_button function to add the necessary UI element:", "We have to decide what we want to do once the data file is uploaded. Here, I\u2019ll embed my call_d3_wrapper function between single quotes of the function property (called a \u201cstring literal\u201d in JavaScript):", "We can see the dataset that drives our visual changes upon upload.", "In this article I have shown how to combine D3 with Azle. Specifically, we have seen how to bind UI elements to visualizations to ensure our storytelling is integrated into a real application. If D3 and/or Azle are not your tools of choice that\u2019s fine. The important takeaway is to BUILD REAL APPLICATIONS rather than something that only lives on a slide deck. Your organization will better understand the benefit of data and machine learning, and your personal data science education will increase tenfold.", "As always, please ask questions in the comments section.", "If you enjoyed this article, you might also enjoy the following:", "You can use regular JavaScript and/or jQuery if you are more comfortable with its syntax. Any script can be passed into the call_d3_extra function. Here is an example using jQuery to style the bars in a chart:", "Sometimes we are changing D3 values dynamically with Azle, and need our UI element on the front-end to remember that last value we passed. For example, say we have a slider inside a modal, that we use to adjust our D3 visual. When we close the modal the slider is gone, getting created from scratch each time we pop the modal. In order to ensure our slider remembers the same value we can simply access our wrapper_arguments object:", "Now, whenever we open our slider again the value is the last one we set. This prevents D3 from jumping around when we redraw the chart:", "We can use a similar approach with our extra_functions object, although this time we cannot just access the key value of the property as above. Instead, we use Azle\u2019s get_current_d3_value function, passing along the barchart_extras object, the name we gave the style, and the style itself:", "In most of the examples used throughout this article, calling a function from a function was achieved as follows:", "In this case we are calling change_data from inside add_event, and change_data is its own contained function.", "Another option is to directly embed change_data() inside a \u201cstring literal\u201d", "To embed functions we wrap the function to be embedded inside 2 single quotation marks.", "This can be a faster way to write an application, but it also makes for less modular code. It can also present some challenges passing arguments to the embedded functions. You should try to use Azle\u2019s add_wrapped_function instead, discussed previously, as it allows us to group a set of functions within a single named function.", "If your port 8000 is already occupied, you can simply add your desired port # to the end of the command:", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Founder Kedion, Ph.D. Computational Chem, builds AI software, studies complexity, host of NonTrivial podcast."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F92bf7c3cc713&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-d3-with-kedion-graduating-from-toy-visuals-to-real-applications-92bf7c3cc713&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-d3-with-kedion-graduating-from-toy-visuals-to-real-applications-92bf7c3cc713&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-d3-with-kedion-graduating-from-toy-visuals-to-real-applications-92bf7c3cc713&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-d3-with-kedion-graduating-from-toy-visuals-to-real-applications-92bf7c3cc713&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----92bf7c3cc713--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----92bf7c3cc713--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://seanamcclure.medium.com/?source=post_page-----92bf7c3cc713--------------------------------", "anchor_text": ""}, {"url": "https://seanamcclure.medium.com/?source=post_page-----92bf7c3cc713--------------------------------", "anchor_text": "Sean McClure"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc06551b485e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-d3-with-kedion-graduating-from-toy-visuals-to-real-applications-92bf7c3cc713&user=Sean+McClure&userId=c06551b485e5&source=post_page-c06551b485e5----92bf7c3cc713---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F92bf7c3cc713&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-d3-with-kedion-graduating-from-toy-visuals-to-real-applications-92bf7c3cc713&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F92bf7c3cc713&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-d3-with-kedion-graduating-from-toy-visuals-to-real-applications-92bf7c3cc713&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/creating-web-applications-with-d3-observable-d5c53467ff12", "anchor_text": "this article."}, {"url": "https://azlejs.com/", "anchor_text": "Azle"}, {"url": "https://collaboratescience.com/azle_d3/", "anchor_text": "here"}, {"url": "https://github.com/WorldofDataScience/azle_d3", "anchor_text": "repo"}, {"url": "https://azlejs.com/", "anchor_text": "Azle"}, {"url": "https://towardsdatascience.com/learn-to-build-machine-learning-services-prototype-real-applications-and-deploy-your-work-to-aa97b2b09e0c", "anchor_text": "Learn to Build Machine Learning Services, Prototype Real Applications, and Deploy your Work to Users"}, {"url": "https://d3js.org", "anchor_text": "D3.js"}, {"url": "https://d3js.org", "anchor_text": "website"}, {"url": "https://christopheviau.com/d3list/", "anchor_text": "here"}, {"url": "https://bl.ocks.org/mbostock/3885304", "anchor_text": "Bar ChartMike Bostock's Block 3885304bl.ocks.org"}, {"url": "http://collaboratescience.com/medium_files/azle_d3_directory.zip", "anchor_text": "here"}, {"url": "http://localhost:8000", "anchor_text": "http://localhost:8000"}, {"url": "https://azlejs.com/", "anchor_text": "documentation"}, {"url": "https://github.com/sean-mcclure/azle_d3", "anchor_text": "here"}, {"url": "https://jsfiddle.net/CyberneticSean/a90bjest/158/", "anchor_text": "any of the animations"}, {"url": "https://gist.github.com/sean-mcclure/0fa4154e387faf6bf7190a3e77506b39", "anchor_text": "GithubGist"}, {"url": "https://towardsdatascience.com/learn-to-build-machine-learning-services-prototype-real-applications-and-deploy-your-work-to-aa97b2b09e0c", "anchor_text": "Building Machine Learning Services and Prototyping Real Applications"}, {"url": "https://towardsdatascience.com/learn-to-build-machine-learning-services-prototype-real-applications-and-deploy-your-work-to-aa97b2b09e0c", "anchor_text": "Learn to Build Machine Learning Services, Prototype Real Applications, and Deploy your Work to\u2026In this post I show readers how to expose their machine learning models as RESTful web services, prototype real\u2026towardsdatascience.com"}, {"url": "https://towardsdatascience.com/gui-fying-the-machine-learning-workflow-towards-rapid-discovery-of-viable-pipelines-cab2552c909f", "anchor_text": "GUI-fying the Machine Learning Workflow: Towards Rapid Discovery of Viable PipelinesPREFACEtowardsdatascience.com"}, {"url": "https://towardsdatascience.com/step-by-step-guide-to-creating-r-and-python-libraries-e81bbea87911", "anchor_text": "Step-by-Step Guide to Creating R and Python Libraries (in JupyterLab)R and Python are the bread and butter of today\u2019s machine learning languages. R provides powerful statistics and quick\u2026towardsdatascience.com"}, {"url": "https://medium.com/tag/javascript?source=post_page-----92bf7c3cc713---------------javascript-----------------", "anchor_text": "JavaScript"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----92bf7c3cc713---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/data-science?source=post_page-----92bf7c3cc713---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----92bf7c3cc713---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/d3js?source=post_page-----92bf7c3cc713---------------d3js-----------------", "anchor_text": "D3js"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F92bf7c3cc713&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-d3-with-kedion-graduating-from-toy-visuals-to-real-applications-92bf7c3cc713&user=Sean+McClure&userId=c06551b485e5&source=-----92bf7c3cc713---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F92bf7c3cc713&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-d3-with-kedion-graduating-from-toy-visuals-to-real-applications-92bf7c3cc713&user=Sean+McClure&userId=c06551b485e5&source=-----92bf7c3cc713---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F92bf7c3cc713&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-d3-with-kedion-graduating-from-toy-visuals-to-real-applications-92bf7c3cc713&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----92bf7c3cc713--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F92bf7c3cc713&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-d3-with-kedion-graduating-from-toy-visuals-to-real-applications-92bf7c3cc713&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----92bf7c3cc713---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----92bf7c3cc713--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----92bf7c3cc713--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----92bf7c3cc713--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----92bf7c3cc713--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----92bf7c3cc713--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----92bf7c3cc713--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----92bf7c3cc713--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----92bf7c3cc713--------------------------------", "anchor_text": ""}, {"url": "https://seanamcclure.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://seanamcclure.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Sean McClure"}, {"url": "https://seanamcclure.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "2.1K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc06551b485e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-d3-with-kedion-graduating-from-toy-visuals-to-real-applications-92bf7c3cc713&user=Sean+McClure&userId=c06551b485e5&source=post_page-c06551b485e5--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fd94a85a0d3a2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-d3-with-kedion-graduating-from-toy-visuals-to-real-applications-92bf7c3cc713&newsletterV3=c06551b485e5&newsletterV3Id=d94a85a0d3a2&user=Sean+McClure&userId=c06551b485e5&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}