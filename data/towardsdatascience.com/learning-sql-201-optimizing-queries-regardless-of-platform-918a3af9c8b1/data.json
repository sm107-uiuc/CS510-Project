{"url": "https://towardsdatascience.com/learning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1", "time": 1682997408.534583, "path": "towardsdatascience.com/learning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1/", "webpage": {"metadata": {"title": "Learning SQL 201: Optimizing Queries, Regardless of Platform | by Randy Au | Towards Data Science", "h1": "Learning SQL 201: Optimizing Queries, Regardless of Platform", "description": "A article laying out the common thought processes needed to do SQL query optimization, regardless of platform. Focuses on many common inefficiencies that can be optimized."}, "outgoing_paragraph_urls": [{"url": "https://www.amazon.com/dp/0071782796", "anchor_text": "entire", "paragraph_index": 3}, {"url": "https://www.amazon.com/dp/0596101716", "anchor_text": "books", "paragraph_index": 3}, {"url": "https://www.amazon.com/dp/1785284339", "anchor_text": "written", "paragraph_index": 3}, {"url": "https://hortonworks.com/blog/5-ways-make-hive-queries-run-faster/", "anchor_text": "specific", "paragraph_index": 3}, {"url": "https://www.postgresql.org/docs/8.3/indexes-bitmap-scans.html", "anchor_text": "bitmap scans", "paragraph_index": 23}, {"url": "https://dev.mysql.com/doc/refman/8.0/en/index-btree-hash.html", "anchor_text": "only really has HASH and B-tree indexes", "paragraph_index": 23}, {"url": "https://docs.microsoft.com/en-us/sql/relational-databases/indexes/indexes?view=sql-server-2017", "anchor_text": "variety", "paragraph_index": 26}, {"url": "https://dev.mysql.com/doc/refman/5.7/en/innodb-physical-structure.html", "anchor_text": "index", "paragraph_index": 26}, {"url": "https://www.postgresql.org/docs/9.5/indexes-types.html", "anchor_text": "algorithms", "paragraph_index": 26}, {"url": "https://dev.mysql.com/doc/refman/8.0/en/index-hints.html", "anchor_text": "index hints", "paragraph_index": 28}, {"url": "https://stackoverflow.com/questions/309786/how-do-i-force-postgres-to-use-a-particular-index", "anchor_text": "index hinting is literally not a thing", "paragraph_index": 29}, {"url": "https://towardsdatascience.com/a-mapreduce-overview-6f2d64d8d0e6", "anchor_text": "an execution overview here", "paragraph_index": 34}, {"url": "https://medium.com/@hakibenita/be-careful-with-cte-in-postgresql-fca5e24d2119", "anchor_text": "PostgreSQL", "paragraph_index": 42}, {"url": "https://dev.mysql.com/doc/refman/5.6/en/subquery-materialization.html", "anchor_text": "try to materialize a subquery with a HASH index", "paragraph_index": 42}, {"url": "https://paquier.xyz/postgresql-2/postgres-12-with-materialize/", "anchor_text": "CTE/", "paragraph_index": 43}, {"url": "https://use-the-index-luke.com/sql/where-clause/searching-for-ranges/like-performance-tuning", "anchor_text": "interesting interactions with indexes", "paragraph_index": 62}, {"url": "https://stackoverflow.com/questions/5892115/whats-the-time-complexity-of-average-regex-algorithms?lq=1", "anchor_text": "Regexes are even more expensive to use", "paragraph_index": 62}, {"url": "https://www.cybertec-postgresql.com/en/postgresql-speeding-up-analytics-and-windowing-functions/", "anchor_text": "examples", "paragraph_index": 65}, {"url": "https://www.red-gate.com/simple-talk/sql/t-sql-programming/t-sql-window-functions-and-performance/", "anchor_text": "like", "paragraph_index": 65}, {"url": "https://stackoverflow.com/questions/16343484/sql-window-functions-performance-impact-of-returning-the-same-avg-many-times", "anchor_text": "these", "paragraph_index": 65}, {"url": "https://stackoverflow.com/questions/3613989/what-of-traffic-is-network-overhead-on-top-of-http-s-requests", "anchor_text": "network overhead can be significant", "paragraph_index": 68}, {"url": "https://ma.ttias.be/googles-quic-protocol-moving-web-tcp-udp/", "anchor_text": "QUIC", "paragraph_index": 68}, {"url": "https://madusudanan.com/blog/understanding-postgres-caching-in-depth/", "anchor_text": "Postgresql\u2019s caching", "paragraph_index": 76}, {"url": "http://highscalability.com/blog/2015/5/18/how-mysql-is-able-to-scale-to-200-million-qps-mysql-cluster.html", "anchor_text": "MySQL setup to an utterly insane", "paragraph_index": 83}], "all_paragraphs": ["Caveat: As of this writing, I\u2019ve used the following database-like systems in a production environment: MySQL, PostgreSQL, Hive, MapReduce on Hadoop, AWS Redshift, GCP BigQuery, in various mixes of on-prem/hybrid/cloud setups. My optimization knowledge largely stems from those. I\u2019ll stick to strategies/thinking process here, but there are definitely features and quirks in other popular databases that I\u2019m not familiar with, especially from SQL Server and Oracle.", "This article is about speed, common strategies for making things go FASTER while avoiding specific implementation details. I\u2019m trying to express the thought process of optimization, not the specific mechanics. Before I knew it, it\u2019s turned into a monster of an article. There\u2019s a lot to cover!", "Optimizing queries is a hard topic to write about because it involves specifics. Specifics about database engines, software, and sometimes even hardware and network architecture. I\u2019ve been asked to write about this topic multiple times, and I\u2019ve always resisted because I couldn\u2019t see a way to write a generally useful article for something that very quickly gets into the weeds.", "There are entire books written about how to optimize different database systems, which includes queries, but also details in the tuning of the systems themselves. They\u2019re always written about a specific platform, not in general. It\u2019s for good reason \u2014 every platform is different and the tuning parameters you need depend on your workload and setup (write heavy vs read heavy, SSDs vs Spinning disk, etc).", "But on the way home during a nasty heatwave, I had an sudden flash of insight as to what threads tie optimization together. So I\u2019m giving this crazy article a try. I\u2019m going to avoid too many specifics and focus on the core thinking process that goes into identifying the things that will make your queries go faster. There will be forays into specifics only for illustrative purposes, and no real code examples. Also for brevity, I can\u2019t be super thorough, but I\u2019ll link to examples and further reading as I go.", "Note: Throughout this article I will use the term \u201cDatabase/DB\u201d as shorthand to cover a huge variety of data stores with extremely different back-end architectures but present SQL-like interfaces. They could be your traditional SQL databases like MySQL/PostgreSQL, or a Hadoop based NoSQL store, or a NewSQL database like CockaroachDB.", "Making your queries fast boils down to making your queries do less work for the same results. There are many different strategies for achieving that goal, and it takes technical knowledge to know which strategy to employ.", "Doing less work means understanding 2 things:", "The route to getting there is extremely dependent on the specific technical circumstances you\u2019re working under. Optimizing a Hive query is in some ways the polar opposite of optimizing a PostgreSQL query. In fact, some querying strategies that speed one up can actually slow down the other.", "What you\u2019re actually doing when \u201coptimizing a query\u201d is finding ways to make your query workload play nicely with the hardware and algorithmic limitations of your system. It means the more familiar you are with hardware, software, and system peculiarities, the better you\u2019ll be at it.", "This is also why the topic is so difficult to teach, you can\u2019t approach it as a kind of SQL style problem. The \u201crules\u201d are just guidelines and there are often counter-examples. You also can\u2019t ignore the base implementation of the system \u2014 while vendors will tell you you shouldn\u2019t have to worry about implementation, it matters.", "Here\u2019s a list of the major points we\u2019ll be hitting today, it starts off in the database and just expands outward. It has link jumps for your convenience.", "I may have left out some cases (and you can always comment and tell me about things I\u2019ve missed) but these are the big ones can think of.", "When it comes to blog posts on the internet about optimizing SQL queries, using EXPLAIN is usually the first (sometimes the only\u2026) thing you hear about. EXPLAIN is the SQL way to summon a query execution plan from your database. It is the database giving you a report on how it plans on executing your query \u2014 it will describe any indexes it\u2019s using, the order of table joins, whether it will scan a whole table or not, sometimes even how many rows it expects to look at while doing the operation (cardinality).", "The idea is, if you have access to this plan, you should be able to figure out (somehow) how to make your query faster. What\u2019s frustrating is that very often people don\u2019t tell you how the heck you\u2019re supposed to go about that.", "It takes practice and patience to learn how to read a query execution plan that at first blush looks like gibberish. It\u2019s made worse that there is no standard for what an execution plan looks like. It is HUGELY different for every database.", "You seriously have to re-learn this skill for every database you use. You also have to learn where the quirks are (like sometimes MySQL EXPLAINs get the cardinality wrong and it gets misled because it makes weird assumptions about indexes).", "Regardless of what database you\u2019re working with, you are looking for where the database is doing a lot of work and spending a lot of time. Then you see if you can find a way to reduce it. Consult your specific DB\u2019s documentation to see exactly what each statement means.", "Hopefully you noticed the word \u201cdisk\u201d popping up. Because in general, disk access is very slow and is something you want to minimize. Even with SSDs being faster than spinning disk HDDs, they\u2019re still orders of magnitude slower than RAM. This is why the first part of optimization usually involves finding ways to avoid using disk where possible, and to use it efficiently where you have no choice.", "If you take a look at this comparison of CPU and RAM speeds vs SSD/HDD/Network ops, you\u2019ll see why. RAM access is 3 orders of magnitude slower than CPU/L1/L2. Persistent Memory modules, which is essentially SSDs that sit on the DRAM bus instead of the SATA or SAS bus are still about 3x slower than standard RAM.", "A more typical SSD, which we would consider a disk is 2\u20133 orders of magnitude slower then RAM, and spinning disk is in the milliseconds: 4 orders of magnitude slower than RAM. Networks are even worse at 5\u20136 orders of magnitude depending on conditions and the speed of light.", "Within this backdrop of \u201creducing work\u201d, hopefully you can see why indexes come up so often. An index is essentially a pre-calculated map of the data, and more importantly it tells the database where on a disk to find certain entries. This means you don\u2019t have to scan through the whole table to search for everything.", "A full table scan can get ridiculously expensive because:", "Going deeper into indexing though, you still need to know how your specific database uses indexes. For example, PostgreSQL has had the ability to use multiple indexes at the same time via bitmap scans since version 8. Meanwhile, MySQL, even in their version 8, only really has HASH and B-tree indexes in the default InnoDB storage engine and can\u2019t compose indexes together.", "Knowing such fiddly little details is actually important for optimization. In MySQL if you want to use 2 or more columns in an indexed query, you have to build a specific multi-column index using those columns, and the order matters. index(A,B) != index(B,A). If you had index(A,B), but need to access B quickly, you\u2019d need at least a separate index(B).", "Meanwhile, in PostgreSQL, it is more common and preferred practice to just have separate indexes: index(A) and index(B), because it can automatically use AND/OR logic to combine A and B on the fly thanks to bitmap scans. You can build a multicolumn index(A,B) and it will be more efficient, but you get much of the gains already by having just 2 separate indexes. Moreover, it scales better if you later need index(C), and index(D) that you want to compose.", "Most database engines give you a variety of index algorithms to use when defining an index. The default is usually some variant of a B-Tree which works well for a large number of typical DB use cases. But you\u2019ll often find things like R/radix-trees for spatial databases, or hash and full-text indexes. Sometimes there\u2019s even more esoteric stuff available for more specific use cases.", "Whatever it is, use the best one for your specific use case, using the wrong one is counter productive.", "Sometimes you have an index, but for some reason the query plan doesn\u2019t use it. MySQL is often made fun of for its fairly dumb query optimizer, so many advanced users sprinkle a lot of index hints, notably force index (idx) and straight_join, to force the optimizer to do the correct thing. What often happens is the optimizer decided it would be more efficient ignore and index and scan a table because it had an incorrect estimation of the cardinality of one of the tables it\u2019s operating on.", "Meanwhile, in PostgreSQL, index hinting is literally not a thing. Since an index hint is essentially a hack around the cardinality of certain tables, they\u2019re liable to go stale as the database changes over time. Instead, the devs force you to rely on their query optimizer. Thankfully, the optimizer makes fewer mistakes than the MySQL one, so it\u2019s not as crazy as it sounds, though you will occasionally hit edge cases that are hard to overcome.", "Not every database has indexes, many things that run off Hadoop, like Hive and Spark for example, doesn\u2019t have this concept because the underlying HDFS system is merely a distributed storage system of large files and the tools are mere data processors. You can artificially create something like an index using the file structure (most common is to use years/months/dates) but you have to essentially maintain it yourself.", "Hopefully this above example can also illustrate for you how you being good at optimization means being very familiar with the particular tool you\u2019re using.", "Indexes are largely about reading things off disk. You pay a pre-calculation cost to maintain the index when data goes in, but reading it becomes much faster. So what about managing writing to disk?", "\u2014 Hold up. Why are we even talking about writing to disk when we\u2019re doing a SELECT operation you ask? Isn\u2019t SELECTs mostly a reading operation?", "Sadly, SELECTs aren\u2019t just purely reading data because sometimes you need to write to disk to finish an operation. The easiest example is with Hadoop, where every step in the MapReduce process involves writing the data out to disk so that it can be transmitted to the next step (see an execution overview here).", "Another fairly common scenario is when you are working with large data sets and the result sets don\u2019t fit in the process\u2019s main memory. The DB will then have to dump the contents to disk (whether it\u2019s via OS swap or explicitly via to a file) to continue working. You\u2019ll often notice this when a query that took 5 seconds to run w/ a small data set somehow takes 5000 seconds on a slightly larger dataset.", "You\u2019ll need to refer to your specific database documentation to figure out how to tell if your database is writing to disk, but when you find that it is happening, it\u2019s often a candidate for optimization.", "The only universal way to minimize disk writes in any system is to reduce the amount of data you\u2019re handing at any given time. It will reduce the chances you\u2019ll be forced to leave fast memory and fall into disk. Even in situations where you have to drop to disk, you\u2019ll at least have less to write.", "You should also be wary of operations that increase the row count, namely making joins where a single row can be joined onto multiple rows of data. Your database might have optimizations to filter down a giant CROSS JOIN if you give it conditions to work with, but if you don\u2019t give it conditions to start with, you can create some monstrous data sets.", "This also becomes even more important on a distributed data system such as Hadoop, individual worker nodes in the cluster will at some point need to transfer state and intermediate results to other worker nodes to continue working, and network traffic is even slower than spinning disk. You want to minimize this as much as you can, again by limiting how much data you are working with at any single point in time.", "A subquery effectively makes a temporary table of results within the database that lasts only for the query. A related feature that I\u2019m lumping together here is the common table expression (CTE) is essentially a named subquery with nicer syntax that can be used multiple times within a query without repeating the execution.", "Subqueries are interesting creatures. They can potentially make things faster, or slower, and you have to think quite hard and experiment to see whether they are appropriate to use as an optimization or not.", "The thing to know about a subquery is that they are typically unindexed temporary table-like structures residing in memory. PostgreSQL won\u2019t, but MySQL \u201cmay\u201d try to materialize a subquery with a HASH index. Technically subqueries are unindexed in Hive and Spark too, but indexing isn\u2019t really a thing in those systems so the point is a bit moot. It\u2019s all just a heap of rows in memory or a table slowly spilled to disk. (It\u2019s that word again, see where I\u2019m going with this?)", "CTE/materialized views can also stop the optimizer from exploiting index relations between the logic of the subquery and main query, acting like an optimization fence that the DB won\u2019t cross. This may or may not be desirable to you.", "The part that makes subqueries a potential optimization is when the cost to use them to filter down a data source is less than using the data source raw. A table scan of 1K rows can be cheaper than scanning a 1M row index. You especially see this in the Hadoop ecosystem because there\u2019s no indexing and MapReduce spills to disk all the time anyways. A well written subquery can filter down a data set and reduce subsequent operations throughout the rest of a query. This is also why you prefer to use these operations early on in a MapReduce job where you pay a disk and network cost every step of the way.", "Meanwhile in a relational database, it is often much more efficient to use an existing index than to use an unindexed temporary structure. Doubly so if the subquery is so big that it has to go to disk. So you would use them more carefully, and try to keep their size small when you do.", "Continuing from the discussion about subqueries, what if the subquery was unavoidable but is impossibly slow? There are further things you can try to optimize \u2014 use temporary tables with an index.", "Remember that the main flaw of a subquery was that they (largely) aren\u2019t indexed. If only we could put an index on them, we\u2019d be golden. The solution for this is to make a temporary table and put the index you need on it. Then we\u2019ll have a proper index (usually B-tree or similar) that supports many of the comparison operators we want.", "Another potential advantage of building a temporary table is that it is literally 1 keyword away from being a permanent table. CREATE TABLE vs CREATE TEMPORARY TABLE. If you\u2019re going to reuse the structure multiple times across transactions, it could be worth it.", "But what\u2019s the catch? What\u2019s the cost of using a temp table?", "One is simply permissions, you need to be able to run the CREATE command and may not have that level of access. It can be a server security/reliability issue, especially in a production environment.", "Second drawback is that once you have this intermediate table in your system, you would have to maintain it so that it isn\u2019t stale. As people start relying on the table, you might get additional demands to maintain it, or update it more often. That\u2019s all overhead and dev time.", "Finally, because you\u2019re making a table, you are explicitly writing to disk. I\u2019ve already hammered on how that\u2019s a slow operation that you don\u2019t want to do repeatedly. Your DB may have the option to create the temp table within memory instead of disk, but if it gets too big you\u2019re back to disk. So you only want to use this option when you\u2019re going to already write to disk anyway, so that the cost of writing to disk and making an index is largely negligible. You may also do this if you\u2019re going to reuse the table a lot, making it cost less to do it once instead of repeatedly.", "If there\u2019s one thing slower than spinning hard disks, it\u2019s network connections. If you have a distributed system that needs to coordinate with a server on the other side of the continent or planet, you literally are bound by the speed of light as well as network congestion.", "On top of that, the bandwidth of a network link is usually smaller than the bandwidth of a hard drive to a CPU, which makes things run even slower. Also, network TCP overhead is a thing that surprisingly matters quite a bit.", "You might think that this is a problem for people with complicated distributed systems. It\u2019s true that they factor more for a big Hadoop cluster than a single hosted server, but it does come up occasionally for even single server installations. As you scale out, your database is going to live separately from your application, or your analysis server.", "I once had a simple ad-hoc query turned regular dashboard, select a handful of fields from a large table, simple SELECT foo FROM TABLE. It was easy enough to pull the data to another server to run ingest into pandas and do the grouping/pivoting there for presentation. There were indexes and everything, but it was still relatively slow to respond.", "When I dug deeper, it became clear that a lot of the latency was in the part where the database was preparing and sending many megabytes of output over the wire to where the analysis was happening. The easiest way to speed things up was to shift some of the analysis logic into the SQL query itself so that less raw data had to be sent over the wire.", "For the vast majority of this article, I\u2019ve been talking about I/O, because I/O is typically where the biggest source of slowness is and where you can find the most low hanging fruit. But we\u2019re not done! Computers have other things that can be slow, like the actual computing part itself!", "Databases are not magical systems of computation, they\u2019re bound by the same algorithmic constraints as any program you write yourself. They can\u2019t sort any faster than the best known sorting algorithms (and since they\u2019re general purpose, they probably don\u2019t use the ideal one for your specific situation either). That means that the specific operations and functions you call can have a significant effect on performance.", "Just remember, as with everything complicated and real-world, there are no panaceas. I can\u2019t give you a hard and fast rule about what to do/not do. You\u2019re going to have to think hard and actually test performance to find out what works for your specific setup.", "Handling text in any significant volume is always computationally intensive work. No matter what you do, if you have to scan through a whole string character by character, it\u2019s an O(n) operation on the length of the string.", "So operators such as LIKE with % wildcards and case insensitivity are somewhat intensive operations. They also can have interesting interactions with indexes. The other string functions, split, substr, concat, etc. all use similar algorithms and so aren\u2019t much better in many cases. Regexes are even more expensive to use because they\u2019re much more complex. So the more you use these functions, the slower everything gets.", "On top of pure computational complexity, strings are probably the largest things you\u2019ll find actually stored within a database. This is assuming you use best practices and don\u2019t store large BLOBs in your DB. If you\u2019re using a unicode encoding, every single character could potentially be 1,2,3, or even 4 bytes of data depending on specifics. Text fields can hold potentially megabytes worth of text. All this means we\u2019ll be running out of RAM sooner.", "Window functions are awesome, coming out of a legacy MySQL 5.4 codebase way back in the day (which didn\u2019t have window functions) and moving to Postgres 9.4 was an eye opener. Window functions can do things like calculate percentiles or lags which used to be extremely difficult and/or very join/subquery heavy to do without. In that aspect, window functions tend to be a massive performance boost over not having them.", "That said, they\u2019re not magic. All the extra storing of array values and sorting is, again, computational work. They can be wasteful unless you\u2019re careful about details like sorts and indexes and the size of the window. Optimizing them tends to involve experimentation and deep reading into query plans. But it\u2019s doable, with examples like these.", "Overhead is rarely talked about to beginners, and even intermediate users of systems. For whatever reason, it\u2019s considered deep nerdy voodoo because it\u2019s bound up in the \u201cthe guts of the system\u201d, in the meta layer of how the system works. But when you start looking for it, you start realizing that overhead is everywhere.", "Practically everything we do with computers involves a certain amount of overhead, essentially work that\u2019s expended in preparation, and maintenance, of whatever it is we\u2019re \u201creally doing\u201d. We\u2019ve covered a lot of things already that can be considered overhead depending on your perspective.", "As I previously mentioned, network overhead can be significant and we want to avoid it where we can by transferring less stuff over the network. It will eat into your maximum transfer bandwidth and isn\u2019t a specific DB issue. It\u2019s significant enough that Google had proposed and released a network protocol, QUIC that boosts network performance by avoiding some of the overhead associated with TCP (and nearby parts of the network stack) by using UDP.", "There\u2019s also the \u201coverhead\u201d of spinning up a disk and seeking to the correct sector to read data out, which we see as the slow seek times of a HDD and why most systems are moving to SSDs. It\u2019s also partly why we\u2019re trying like hell to avoid disk operations in this whole article.", "Similarly, the database has lots of overhead to deal with itself. When it accepts a connection, opens up a transaction, commits a transaction, all that stuff takes time to do.", "How much could this overhead possibly be, you ask? Well, one extremely common optimization that comes up is uploading large amounts of data to a database. It is almost always the case that you want to avoid making multiple small INSERTs because the DB bogs down under the load. Even if you\u2019re doing things all within a single transaction with many INSERTs, it still has to constantly spin up a query interpreter to handle each query call.", "Instead, it\u2019s best practice to create one giant file (CSV or whatever) and batch load the data all at once, even if you send the file over the network via the query. This is multiple orders of magnitude faster. It\u2019s utterly insane and mind blowing the first time you encounter it. But it makes total sense because for a small single-row insert, the connection/transaction handling time is more than it takes to process that insert.", "The same overhead issue also can apply to running a bunch of SELECT statements. There\u2019s still overhead involved there too. If you keep hammering a database with lots of small requests, it will eventually bog down the whole sever. You\u2019re going to want to either pull more data and process it locally, or consider using some kind of caching.", "One technique that applications actually use to increase app responsiveness and reduce DB load is to simply cache the results for queries for a period of time, so that repeated calls skip the DB entirely and just give the cached result. This is app-level stuff, and isn\u2019t specifically an optimization for your SQL query, but it\u2019s a common enough pattern for responsiveness that you might actually see it on some analytics tools you use.", "At the SQL query level however, caching is still a thing to be aware of. Multiple runs of the exact same query in quick succession can actually yield different run times even if the database is not caching the result. This is because the first query primes the disk cache and OS caches with data. It\u2019s not likely to be your whole data set, but in narrow instances it\u2019s a significant (and temporary) speed boost. This can affect any benchmarking you do if you\u2019re new to the whole benchmarking thing.", "In fact, while you\u2019re not usually aware of it, databases, and the OSes they run on, will use caching techniques to squeeze extra performance out. Here\u2019s a post about Postgresql\u2019s caching behavior, and broadly speaking other databases will do similar things to different degrees.", "As an end user just firing off queries, it\u2019s very easy to forget that databases are multi-user systems. They generally handle things so quickly and transparently, you never really know that there are usually other people hitting the server at the same time. But as you push your server to its operational limits you can run into cases where queries from other users, or queries from your own parallel jobs, will start to have an effect on you.", "Machine usage follows human activity patterns, and so there are certain portions of the day that are busier than others. As reports and database queries start becoming automated, the timing of large batch requests becomes increasingly important. Overnight jobs are very commonly set to run at very similar times in the night (very often around midnight-ish), because everyone individually thinks the servers will be \u201cempty\u201d then. Except they aren\u2019t and now the system has to task switch between 10 batch queries all running at the same time.", "This is merely a resource scheduling issue, but I\u2019ve seen batch jobs that take only 5\u201310 minutes to run on a no-load server stretch to become 30min+ because they were competing for resources with a bunch of other jobs.", "General load is something of an annoyance because it makes things unnecessarily slow, but a more serious issue with contention can arise via locking. Databases want to stay consistent, and that sometimes means entire tables can be locked when certain operations are run, such as a big update/write. Whether it\u2019s a row-level lock or a table-level lock depends on specific details, but in either case, if you have another query that needs to touch those the locked rows, they simply are not allowed to run until the lock is lifted.", "Locks can sometimes turn into pathological situations known as a deadlock, but that\u2019s rare. More commonly it can make a traffic-jam of queries that seem to take forever simply because they\u2019re waiting. Another less common effect is that locks can affect things like server replication, sometimes even taking data replication down, meaning no new data updates into/out of the server and causing all sorts of unintended side effects. (My deep apologies to the devops folk I\u2019ve broken replication for over the years with my ultra-long analytics queries).", "This whole article has been dedicated to making queries go fast. So it would be wrong to ignore the ultimate answer to speed \u2014 more hardware and/or better software, aka, throwing money at the problem. It\u2019s our last resort, not the first, but it can\u2019t be ignored.", "Sometimes, despite all your best efforts at optimizing your queries to make things go faster, you smash into limitations in I/O and sometimes CPU that are insurmountable with the systems you have. In that case, there is only one thing left to do to make things to faster: throw money at it. Re-architect your systems, get more memory, bigger RAID arrays, faster disks, a faster CPU, faster NIC and interconnects, and when all that isn\u2019t enough, scale it out via clustering. I\u2019m not even joking, Facebook at one point had scaled their MySQL setup to an utterly insane level. If clustering is somehow not enough, redesign your entire app system architecture for the speed you need, not just the DB architecture.", "Our goal in optimizing our queries and databases is to squeeze as much performance out of our equipment as possible, to get the best performance for every precious dollar spent on a system. It\u2019s very easy to lose sight of the big picture and laugh at the idea of \u201cif you can\u2019t make it faster, buy more equipment\u201d. But we need to admit that there is inevitably a hard limit to optimization, even when it\u2019s a really high limit, but there does exist a point of diminishing returns. A perfectly tuned and modified Miata will never reach the same speeds as an F1 car.", "The final skill in query optimization is learning when you\u2019ve reached the point where all the viable optimizations have been done, when the trade-offs made for speed are more expensive than it costs to upgrade. It\u2019s hard because it\u2019s a process of elimination, the proving of a negative \u201cwe can\u2019t do more here\u201d.", "But if you ever do find yourself in such a situation, then go out and upgrade the system so that you can get back to optimizing.", "I stress about data quality a lot. Data nerd/scientist, camera junkie. Quant UXR @Google Cloud. Formerly @bitly, @Meetup, @primarydotcom. Opinions are my own."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F918a3af9c8b1&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://randy-au.medium.com/?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": ""}, {"url": "https://randy-au.medium.com/?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "Randy Au"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5bd01667d4e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1&user=Randy+Au&userId=5bd01667d4e5&source=post_page-5bd01667d4e5----918a3af9c8b1---------------------post_header-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F918a3af9c8b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1&user=Randy+Au&userId=5bd01667d4e5&source=-----918a3af9c8b1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F918a3af9c8b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1&source=-----918a3af9c8b1---------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://www.amazon.com/dp/0071782796", "anchor_text": "entire"}, {"url": "https://www.amazon.com/dp/0596101716", "anchor_text": "books"}, {"url": "https://www.amazon.com/dp/1785284339", "anchor_text": "written"}, {"url": "https://hortonworks.com/blog/5-ways-make-hive-queries-run-faster/", "anchor_text": "specific"}, {"url": "http://86c2", "anchor_text": "Subqueries"}, {"url": "https://www.eversql.com/mysql-explain-example-explaining-mysql-explain-using-stackoverflow-data/", "anchor_text": "https://www.eversql.com/mysql-explain-example-explaining-mysql-explain-using-stackoverflow-data/"}, {"url": "https://thoughtbot.com/blog/reading-an-explain-analyze-query-plan", "anchor_text": "https://thoughtbot.com/blog/reading-an-explain-analyze-query-plan"}, {"url": "https://dev.mysql.com/doc/refman/5.7/en/internal-temporary-tables.html", "anchor_text": "RDBMS"}, {"url": "https://www.citusdata.com/blog/2018/06/12/configuring-work-mem-on-postgres/", "anchor_text": "and"}, {"url": "https://stackoverflow.com/questions/8504611/should-spilled-records-always-be-equal-to-mapinput-records-or-mapoutput-records", "anchor_text": "Hadoop"}, {"url": "https://www.prowesscorp.com/computer-latency-at-a-human-scale/", "anchor_text": "https://www.prowesscorp.com/computer-latency-at-a-human-scale/"}, {"url": "https://www.postgresql.org/docs/8.3/indexes-bitmap-scans.html", "anchor_text": "bitmap scans"}, {"url": "https://dev.mysql.com/doc/refman/8.0/en/index-btree-hash.html", "anchor_text": "only really has HASH and B-tree indexes"}, {"url": "https://docs.microsoft.com/en-us/sql/relational-databases/indexes/indexes?view=sql-server-2017", "anchor_text": "variety"}, {"url": "https://dev.mysql.com/doc/refman/5.7/en/innodb-physical-structure.html", "anchor_text": "index"}, {"url": "https://www.postgresql.org/docs/9.5/indexes-types.html", "anchor_text": "algorithms"}, {"url": "https://dev.mysql.com/doc/refman/8.0/en/index-hints.html", "anchor_text": "index hints"}, {"url": "https://stackoverflow.com/questions/309786/how-do-i-force-postgres-to-use-a-particular-index", "anchor_text": "index hinting is literally not a thing"}, {"url": "https://towardsdatascience.com/a-mapreduce-overview-6f2d64d8d0e6", "anchor_text": "an execution overview here"}, {"url": "https://medium.com/@hakibenita/be-careful-with-cte-in-postgresql-fca5e24d2119", "anchor_text": "PostgreSQL"}, {"url": "https://dev.mysql.com/doc/refman/5.6/en/subquery-materialization.html", "anchor_text": "try to materialize a subquery with a HASH index"}, {"url": "https://paquier.xyz/postgresql-2/postgres-12-with-materialize/", "anchor_text": "CTE/"}, {"url": "https://use-the-index-luke.com/sql/where-clause/searching-for-ranges/like-performance-tuning", "anchor_text": "interesting interactions with indexes"}, {"url": "https://stackoverflow.com/questions/5892115/whats-the-time-complexity-of-average-regex-algorithms?lq=1", "anchor_text": "Regexes are even more expensive to use"}, {"url": "https://www.cybertec-postgresql.com/en/postgresql-speeding-up-analytics-and-windowing-functions/", "anchor_text": "examples"}, {"url": "https://www.red-gate.com/simple-talk/sql/t-sql-programming/t-sql-window-functions-and-performance/", "anchor_text": "like"}, {"url": "https://stackoverflow.com/questions/16343484/sql-window-functions-performance-impact-of-returning-the-same-avg-many-times", "anchor_text": "these"}, {"url": "https://stackoverflow.com/questions/3613989/what-of-traffic-is-network-overhead-on-top-of-http-s-requests", "anchor_text": "network overhead can be significant"}, {"url": "https://ma.ttias.be/googles-quic-protocol-moving-web-tcp-udp/", "anchor_text": "QUIC"}, {"url": "https://madusudanan.com/blog/understanding-postgres-caching-in-depth/", "anchor_text": "Postgresql\u2019s caching"}, {"url": "http://highscalability.com/blog/2015/5/18/how-mysql-is-able-to-scale-to-200-million-qps-mysql-cluster.html", "anchor_text": "MySQL setup to an utterly insane"}, {"url": "https://use-the-index-luke.com/sql/preface", "anchor_text": "Use the Index, Luke"}, {"url": "https://logicalread.com/mythbusting-hardware-sql-server-perf-dc01/", "anchor_text": "Myths about hardware and server performance"}, {"url": "https://madusudanan.com/blog/understanding-postgres-caching-in-depth/", "anchor_text": "Caching in PostgreSQL"}, {"url": "https://parallelthoughts.xyz/2019/05/a-tale-of-query-optimization/", "anchor_text": "A tale of query optimization"}, {"url": "https://medium.com/tag/big-data?source=post_page-----918a3af9c8b1---------------big_data-----------------", "anchor_text": "Big Data"}, {"url": "https://medium.com/tag/sql?source=post_page-----918a3af9c8b1---------------sql-----------------", "anchor_text": "Sql"}, {"url": "https://medium.com/tag/data-science?source=post_page-----918a3af9c8b1---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/programming?source=post_page-----918a3af9c8b1---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F918a3af9c8b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1&user=Randy+Au&userId=5bd01667d4e5&source=-----918a3af9c8b1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F918a3af9c8b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1&user=Randy+Au&userId=5bd01667d4e5&source=-----918a3af9c8b1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F918a3af9c8b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://randy-au.medium.com/?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5bd01667d4e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1&user=Randy+Au&userId=5bd01667d4e5&source=post_page-5bd01667d4e5----918a3af9c8b1---------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fc29d9b065bd4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1&newsletterV3=5bd01667d4e5&newsletterV3Id=c29d9b065bd4&user=Randy+Au&userId=5bd01667d4e5&source=-----918a3af9c8b1---------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://randy-au.medium.com/?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "Written by Randy Au"}, {"url": "https://randy-au.medium.com/followers?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "1.8K Followers"}, {"url": "https://towardsdatascience.com/?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5bd01667d4e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1&user=Randy+Au&userId=5bd01667d4e5&source=post_page-5bd01667d4e5----918a3af9c8b1---------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fc29d9b065bd4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-sql-201-optimizing-queries-regardless-of-platform-918a3af9c8b1&newsletterV3=5bd01667d4e5&newsletterV3Id=c29d9b065bd4&user=Randy+Au&userId=5bd01667d4e5&source=-----918a3af9c8b1---------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/the-user-agent-that-crazy-string-underpinning-a-bunch-of-analytics-86507ef632f0?source=author_recirc-----918a3af9c8b1----0---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://randy-au.medium.com/?source=author_recirc-----918a3af9c8b1----0---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://randy-au.medium.com/?source=author_recirc-----918a3af9c8b1----0---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "Randy Au"}, {"url": "https://towardsdatascience.com/?source=author_recirc-----918a3af9c8b1----0---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/the-user-agent-that-crazy-string-underpinning-a-bunch-of-analytics-86507ef632f0?source=author_recirc-----918a3af9c8b1----0---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "The User-Agent \u2014 That Crazy String Underpinning a Bunch of AnalyticsIt\u2019s surprising to think we rely on this as much as we do"}, {"url": "https://towardsdatascience.com/the-user-agent-that-crazy-string-underpinning-a-bunch-of-analytics-86507ef632f0?source=author_recirc-----918a3af9c8b1----0---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "\u00b714 min read\u00b7Dec 9, 2019"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F86507ef632f0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-user-agent-that-crazy-string-underpinning-a-bunch-of-analytics-86507ef632f0&user=Randy+Au&userId=5bd01667d4e5&source=-----86507ef632f0----0-----------------clap_footer----9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/the-user-agent-that-crazy-string-underpinning-a-bunch-of-analytics-86507ef632f0?source=author_recirc-----918a3af9c8b1----0---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "2"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F86507ef632f0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-user-agent-that-crazy-string-underpinning-a-bunch-of-analytics-86507ef632f0&source=-----918a3af9c8b1----0-----------------bookmark_preview----9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/zero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c?source=author_recirc-----918a3af9c8b1----1---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://barrmoses.medium.com/?source=author_recirc-----918a3af9c8b1----1---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://barrmoses.medium.com/?source=author_recirc-----918a3af9c8b1----1---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "Barr Moses"}, {"url": "https://towardsdatascience.com/?source=author_recirc-----918a3af9c8b1----1---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/zero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c?source=author_recirc-----918a3af9c8b1----1---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "Zero-ETL, ChatGPT, And The Future of Data EngineeringThe post-modern data stack is coming. Are we ready?"}, {"url": "https://towardsdatascience.com/zero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c?source=author_recirc-----918a3af9c8b1----1---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "9 min read\u00b7Apr 3"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F71849642ad9c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c&user=Barr+Moses&userId=2818bac48708&source=-----71849642ad9c----1-----------------clap_footer----9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/zero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c?source=author_recirc-----918a3af9c8b1----1---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "21"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F71849642ad9c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c&source=-----918a3af9c8b1----1-----------------bookmark_preview----9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=author_recirc-----918a3af9c8b1----2---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://medium.com/@mattchapmanmsc?source=author_recirc-----918a3af9c8b1----2---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://medium.com/@mattchapmanmsc?source=author_recirc-----918a3af9c8b1----2---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "Matt Chapman"}, {"url": "https://towardsdatascience.com/?source=author_recirc-----918a3af9c8b1----2---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=author_recirc-----918a3af9c8b1----2---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "The Portfolio that Got Me a Data Scientist JobSpoiler alert: It was surprisingly easy (and free) to make"}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=author_recirc-----918a3af9c8b1----2---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "\u00b710 min read\u00b7Mar 24"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F513cc821bfe4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4&user=Matt+Chapman&userId=bf7d13fc53db&source=-----513cc821bfe4----2-----------------clap_footer----9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=author_recirc-----918a3af9c8b1----2---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "42"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F513cc821bfe4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4&source=-----918a3af9c8b1----2-----------------bookmark_preview----9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/data-science-foundations-know-your-data-really-really-know-it-a6bb97eb991c?source=author_recirc-----918a3af9c8b1----3---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://randy-au.medium.com/?source=author_recirc-----918a3af9c8b1----3---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://randy-au.medium.com/?source=author_recirc-----918a3af9c8b1----3---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "Randy Au"}, {"url": "https://towardsdatascience.com/?source=author_recirc-----918a3af9c8b1----3---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/data-science-foundations-know-your-data-really-really-know-it-a6bb97eb991c?source=author_recirc-----918a3af9c8b1----3---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "Data Science foundations: Know your data. Really, really, know itKnow your data, where it comes from, what\u2019s in it, what it means. It all starts from there."}, {"url": "https://towardsdatascience.com/data-science-foundations-know-your-data-really-really-know-it-a6bb97eb991c?source=author_recirc-----918a3af9c8b1----3---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": "\u00b710 min read\u00b7Feb 15, 2019"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa6bb97eb991c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-science-foundations-know-your-data-really-really-know-it-a6bb97eb991c&user=Randy+Au&userId=5bd01667d4e5&source=-----a6bb97eb991c----3-----------------clap_footer----9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/data-science-foundations-know-your-data-really-really-know-it-a6bb97eb991c?source=author_recirc-----918a3af9c8b1----3---------------------9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "4"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa6bb97eb991c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-science-foundations-know-your-data-really-really-know-it-a6bb97eb991c&source=-----918a3af9c8b1----3-----------------bookmark_preview----9bfad76f_c863_4e4e_b6cf_e88b1a50c28c-------", "anchor_text": ""}, {"url": "https://randy-au.medium.com/?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "See all from Randy Au"}, {"url": "https://towardsdatascience.com/?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "See all from Towards Data Science"}, {"url": "https://levelup.gitconnected.com/why-i-keep-failing-candidates-during-google-interviews-dc8f865b2c19?source=read_next_recirc-----918a3af9c8b1----0---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://alexcancode.medium.com/?source=read_next_recirc-----918a3af9c8b1----0---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://alexcancode.medium.com/?source=read_next_recirc-----918a3af9c8b1----0---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "Alexander Nguyen"}, {"url": "https://levelup.gitconnected.com/?source=read_next_recirc-----918a3af9c8b1----0---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "Level Up Coding"}, {"url": "https://levelup.gitconnected.com/why-i-keep-failing-candidates-during-google-interviews-dc8f865b2c19?source=read_next_recirc-----918a3af9c8b1----0---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "Why I Keep Failing Candidates During Google Interviews\u2026They don\u2019t meet the bar."}, {"url": "https://levelup.gitconnected.com/why-i-keep-failing-candidates-during-google-interviews-dc8f865b2c19?source=read_next_recirc-----918a3af9c8b1----0---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "\u00b74 min read\u00b7Apr 13"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fgitconnected%2Fdc8f865b2c19&operation=register&redirect=https%3A%2F%2Flevelup.gitconnected.com%2Fwhy-i-keep-failing-candidates-during-google-interviews-dc8f865b2c19&user=Alexander+Nguyen&userId=a148fd75c2e9&source=-----dc8f865b2c19----0-----------------clap_footer----46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://levelup.gitconnected.com/why-i-keep-failing-candidates-during-google-interviews-dc8f865b2c19?source=read_next_recirc-----918a3af9c8b1----0---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "89"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdc8f865b2c19&operation=register&redirect=https%3A%2F%2Flevelup.gitconnected.com%2Fwhy-i-keep-failing-candidates-during-google-interviews-dc8f865b2c19&source=-----918a3af9c8b1----0-----------------bookmark_preview----46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://artificialcorner.com/youre-using-chatgpt-wrong-here-s-how-to-be-ahead-of-99-of-chatgpt-users-886a50dabc54?source=read_next_recirc-----918a3af9c8b1----1---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://thepycoach.com/?source=read_next_recirc-----918a3af9c8b1----1---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://thepycoach.com/?source=read_next_recirc-----918a3af9c8b1----1---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "The PyCoach"}, {"url": "https://artificialcorner.com/?source=read_next_recirc-----918a3af9c8b1----1---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "Artificial Corner"}, {"url": "https://artificialcorner.com/youre-using-chatgpt-wrong-here-s-how-to-be-ahead-of-99-of-chatgpt-users-886a50dabc54?source=read_next_recirc-----918a3af9c8b1----1---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "You\u2019re Using ChatGPT Wrong! Here\u2019s How to Be Ahead of 99% of ChatGPT UsersMaster ChatGPT by learning prompt engineering."}, {"url": "https://artificialcorner.com/youre-using-chatgpt-wrong-here-s-how-to-be-ahead-of-99-of-chatgpt-users-886a50dabc54?source=read_next_recirc-----918a3af9c8b1----1---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "\u00b77 min read\u00b7Mar 17"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fartificial-corner%2F886a50dabc54&operation=register&redirect=https%3A%2F%2Fartificialcorner.com%2Fyoure-using-chatgpt-wrong-here-s-how-to-be-ahead-of-99-of-chatgpt-users-886a50dabc54&user=The+PyCoach&userId=fb44e21903f3&source=-----886a50dabc54----1-----------------clap_footer----46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://artificialcorner.com/youre-using-chatgpt-wrong-here-s-how-to-be-ahead-of-99-of-chatgpt-users-886a50dabc54?source=read_next_recirc-----918a3af9c8b1----1---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "275"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F886a50dabc54&operation=register&redirect=https%3A%2F%2Fartificialcorner.com%2Fyoure-using-chatgpt-wrong-here-s-how-to-be-ahead-of-99-of-chatgpt-users-886a50dabc54&source=-----918a3af9c8b1----1-----------------bookmark_preview----46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://medium.com/better-advice/10-things-to-do-in-the-evening-instead-of-watching-netflix-4e270e9dd6b9?source=read_next_recirc-----918a3af9c8b1----0---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://aleid-tw.medium.com/?source=read_next_recirc-----918a3af9c8b1----0---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://aleid-tw.medium.com/?source=read_next_recirc-----918a3af9c8b1----0---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "Aleid ter Weel"}, {"url": "https://medium.com/better-advice?source=read_next_recirc-----918a3af9c8b1----0---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "Better Advice"}, {"url": "https://medium.com/better-advice/10-things-to-do-in-the-evening-instead-of-watching-netflix-4e270e9dd6b9?source=read_next_recirc-----918a3af9c8b1----0---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "10 Things To Do In The Evening Instead Of Watching NetflixDevice-free habits to increase your productivity and happiness."}, {"url": "https://medium.com/better-advice/10-things-to-do-in-the-evening-instead-of-watching-netflix-4e270e9dd6b9?source=read_next_recirc-----918a3af9c8b1----0---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "\u00b75 min read\u00b7Feb 15, 2022"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fbetter-advice%2F4e270e9dd6b9&operation=register&redirect=https%3A%2F%2Fmedium.com%2Fbetter-advice%2F10-things-to-do-in-the-evening-instead-of-watching-netflix-4e270e9dd6b9&user=Aleid+ter+Weel&userId=6ffe087f07e5&source=-----4e270e9dd6b9----0-----------------clap_footer----46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://medium.com/better-advice/10-things-to-do-in-the-evening-instead-of-watching-netflix-4e270e9dd6b9?source=read_next_recirc-----918a3af9c8b1----0---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "204"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4e270e9dd6b9&operation=register&redirect=https%3A%2F%2Fmedium.com%2Fbetter-advice%2F10-things-to-do-in-the-evening-instead-of-watching-netflix-4e270e9dd6b9&source=-----918a3af9c8b1----0-----------------bookmark_preview----46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://medium.com/geekculture/stop-doing-this-on-chatgpt-get-ahead-99-users-ai-artificial-intelligence-productivity-prompt-engineering-4-f3441bf7a25a?source=read_next_recirc-----918a3af9c8b1----1---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://medium.com/@rfeers?source=read_next_recirc-----918a3af9c8b1----1---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://medium.com/@rfeers?source=read_next_recirc-----918a3af9c8b1----1---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "Josep Ferrer"}, {"url": "https://medium.com/geekculture?source=read_next_recirc-----918a3af9c8b1----1---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "Geek Culture"}, {"url": "https://medium.com/geekculture/stop-doing-this-on-chatgpt-get-ahead-99-users-ai-artificial-intelligence-productivity-prompt-engineering-4-f3441bf7a25a?source=read_next_recirc-----918a3af9c8b1----1---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "Stop doing this on ChatGPT and get ahead of the 99% of its usersUnleash the Power of AI Writing with Effective Prompts"}, {"url": "https://medium.com/geekculture/stop-doing-this-on-chatgpt-get-ahead-99-users-ai-artificial-intelligence-productivity-prompt-engineering-4-f3441bf7a25a?source=read_next_recirc-----918a3af9c8b1----1---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "\u00b78 min read\u00b7Mar 31"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fgeekculture%2Ff3441bf7a25a&operation=register&redirect=https%3A%2F%2Fmedium.com%2Fgeekculture%2Fstop-doing-this-on-chatgpt-get-ahead-99-users-ai-artificial-intelligence-productivity-prompt-engineering-4-f3441bf7a25a&user=Josep+Ferrer&userId=8213af8f3ccf&source=-----f3441bf7a25a----1-----------------clap_footer----46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://medium.com/geekculture/stop-doing-this-on-chatgpt-get-ahead-99-users-ai-artificial-intelligence-productivity-prompt-engineering-4-f3441bf7a25a?source=read_next_recirc-----918a3af9c8b1----1---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "71"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff3441bf7a25a&operation=register&redirect=https%3A%2F%2Fmedium.com%2Fgeekculture%2Fstop-doing-this-on-chatgpt-get-ahead-99-users-ai-artificial-intelligence-productivity-prompt-engineering-4-f3441bf7a25a&source=-----918a3af9c8b1----1-----------------bookmark_preview----46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=read_next_recirc-----918a3af9c8b1----2---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://medium.com/@mattchapmanmsc?source=read_next_recirc-----918a3af9c8b1----2---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://medium.com/@mattchapmanmsc?source=read_next_recirc-----918a3af9c8b1----2---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "Matt Chapman"}, {"url": "https://towardsdatascience.com/?source=read_next_recirc-----918a3af9c8b1----2---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=read_next_recirc-----918a3af9c8b1----2---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "The Portfolio that Got Me a Data Scientist JobSpoiler alert: It was surprisingly easy (and free) to make"}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=read_next_recirc-----918a3af9c8b1----2---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "\u00b710 min read\u00b7Mar 24"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F513cc821bfe4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4&user=Matt+Chapman&userId=bf7d13fc53db&source=-----513cc821bfe4----2-----------------clap_footer----46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=read_next_recirc-----918a3af9c8b1----2---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "42"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F513cc821bfe4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4&source=-----918a3af9c8b1----2-----------------bookmark_preview----46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://betterprogramming.pub/how-to-build-credibility-at-work-95a7a978ed7f?source=read_next_recirc-----918a3af9c8b1----3---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://vinitabansal.medium.com/?source=read_next_recirc-----918a3af9c8b1----3---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://vinitabansal.medium.com/?source=read_next_recirc-----918a3af9c8b1----3---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "Vinita"}, {"url": "https://betterprogramming.pub/?source=read_next_recirc-----918a3af9c8b1----3---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "Better Programming"}, {"url": "https://betterprogramming.pub/how-to-build-credibility-at-work-95a7a978ed7f?source=read_next_recirc-----918a3af9c8b1----3---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "How to Build Credibility at WorkBuilding credibility requires more than just competence and knowledge."}, {"url": "https://betterprogramming.pub/how-to-build-credibility-at-work-95a7a978ed7f?source=read_next_recirc-----918a3af9c8b1----3---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": "\u00b78 min read\u00b7Apr 3"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fbetter-programming%2F95a7a978ed7f&operation=register&redirect=https%3A%2F%2Fbetterprogramming.pub%2Fhow-to-build-credibility-at-work-95a7a978ed7f&user=Vinita&userId=b892e7626234&source=-----95a7a978ed7f----3-----------------clap_footer----46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://betterprogramming.pub/how-to-build-credibility-at-work-95a7a978ed7f?source=read_next_recirc-----918a3af9c8b1----3---------------------46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "80"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F95a7a978ed7f&operation=register&redirect=https%3A%2F%2Fbetterprogramming.pub%2Fhow-to-build-credibility-at-work-95a7a978ed7f&source=-----918a3af9c8b1----3-----------------bookmark_preview----46dcf4fd_5e7a_4aee_b6ff_473cce33a1e7-------", "anchor_text": ""}, {"url": "https://medium.com/?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "See more recommendations"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=post_page-----918a3af9c8b1--------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}