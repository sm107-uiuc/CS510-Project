{"url": "https://towardsdatascience.com/how-to-render-interactive-weather-models-entirely-in-the-browser-5ff2db881cb8", "time": 1683002657.045226, "path": "towardsdatascience.com/how-to-render-interactive-weather-models-entirely-in-the-browser-5ff2db881cb8/", "webpage": {"metadata": {"title": "How to Render Interactive Weather Models Entirely in the Browser | by Thomas Horner | Towards Data Science", "h1": "How to Render Interactive Weather Models Entirely in the Browser", "description": "Weather enthusiasts, meteorologists, and storm chasers are aware of the myriad of weather model visualization websites out on the web. These platforms allow you to view various parameters, levels\u2026"}, "outgoing_paragraph_urls": [{"url": "https://medium.com/swlh/automated-weather-model-processing-with-foss4g-lessons-learned-8aaaeda1e3bc", "anchor_text": "build and automate your own weather model visualizer", "paragraph_index": 6}, {"url": "https://www.opengeospatial.org/standards/wms", "anchor_text": "OGC WMS", "paragraph_index": 6}, {"url": "https://gdal.org/", "anchor_text": "GDAL", "paragraph_index": 6}, {"url": "https://medium.com/14ers-forecast", "anchor_text": "my forecasts", "paragraph_index": 13}, {"url": "https://geoexamples.com/other/2019/02/08/cog-tutorial.html#the-cloud-optimized-geotiff-format", "anchor_text": "natively read cloud-optimized GeoTIFFs!", "paragraph_index": 22}, {"url": "https://github.com/triedeti/Leaflet.streetlabels", "anchor_text": "Leaflet.streetlabels", "paragraph_index": 49}, {"url": "https://github.com/Viglino/Canvas-TextPath", "anchor_text": "Canvas-TextPath", "paragraph_index": 51}, {"url": "https://github.com/bbecquet/Leaflet.PolylineDecorator", "anchor_text": "Leaflet.PolylineDecorator", "paragraph_index": 57}, {"url": "https://github.com/tsayen/dom-to-image", "anchor_text": "dom-to-image", "paragraph_index": 64}, {"url": "https://www.npmjs.com/package/file-saver", "anchor_text": "file-saver", "paragraph_index": 65}, {"url": "https://www.windy.com/?39.707,-105.029,5", "anchor_text": "animated wind maps", "paragraph_index": 67}, {"url": "https://ihcantabria.github.io/Leaflet.CanvasLayer.Field/", "anchor_text": "Leaflet.CanvasLayer.Field", "paragraph_index": 68}, {"url": "https://www.npmjs.com/package/gdal-js", "anchor_text": "WebAssembly wrappers for GDAL!", "paragraph_index": 68}, {"url": "https://medium.com/u/26d510f9aca?source=post_page-----5ff2db881cb8--------------------------------", "anchor_text": "Roger Veciana i Rovira", "paragraph_index": 69}, {"url": "https://bl.ocks.org/rveciana", "anchor_text": "wonderful resources", "paragraph_index": 69}, {"url": "https://github.com/rveciana?tab=repositories", "anchor_text": "libraries", "paragraph_index": 69}], "all_paragraphs": ["Weather enthusiasts, meteorologists, and storm chasers are aware of the myriad of weather model visualization websites out on the web. These platforms allow you to view various parameters, levels, and forecast hours of dozens of different weather models. For example, when preparing for a day of storm chasing, a chaser may look at a few parameters for a certain area \u2014 the dewpoint in the morning, the CAPE later in the day, and the HRRR\u2019s simulated reflectivity in the afternoon. Menus, buttons, and sliders are usually provided to switch forecast hours, models, and parameters.", "Typically, all of these weather model viewers are simply ways for the user to access pre-rendered, nonspatial weather models, despite the original data being geospatial in nature. Though interfaces differ, many things are consistent in weather model viewers:", "Though many of the providers have put serious care and thought into the presentation of the data, the aforementioned shortcomings can be significant and aggravating in certain circumstances. For instance, evaluating forecasted snowfall totals in mountainous terrain can be incredibly challenging if you just have county boundaries to orient yourself with, considering that snowfall totals may vary by tens of inches over just a few miles.", "Even as a forecaster with a geography degree I struggle with getting useful data out of this graphic. Looking at the state of Colorado:", "If you do enough forecasting in Colorado, you\u2019ll eventually have the county outlines vs. mountain range relationship memorized down to the mile, because that\u2019s usually all you have to work with when looking at the distribution of weather across the state on many model viewers.", "That said, it is important to mention the benefits of these platforms \u2014 the most obvious being the use of pre-rendered static images. These are fast and it is easy to load all forecast hours of a model in just a few seconds, and you can often easily have the server generate an animated GIF of the data. The fixed regions prevent \u2018misuse\u2019 of the data \u2014 such as zooming in to a resolution beyond what the weather model is suited for. These two factors allow for consistent weather model visualization, which is helpful if you are downloading the images and archiving them for comparison or redistribution.", "In a previous article, I discussed how you can build and automate your own weather model visualizer. This technique had an interesting twist in that, though the server is still rendering the data, it is serving it as a geospatial layer (OGC WMS) that can be added to interactive web maps. This strikes an nice balance between the performance of pre-rendered static images and the interactivity of fully geospatial data. I will show you how to take this one step farther and do the rendering entirely in the browser, no server needed! Per my link above, this article will assume you have the weather models available in GeoTIFF format and projected to EPSG:4326. You can convert raw weather model data (in GRIB2 format) to GeoTIFF with just one GDAL command.", "The disadvantages of rendering weather model data on the client, using a web browser, are plentiful \u2014 but there are some potential use cases for the technology. Web development in the year 2020 seems to be just mature and powerful enough to make this an actually viable proposition for certain purposes. Here are the main issues we\u2019ll encounter:", "In contrast, here are some benefits we will enjoy:", "We also have a few strategies to alleviate some of the pain points:", "With those points in mind, can you think of some use cases where you might enjoy the benefits of client-side rendering? For me, the quality of the visualizations comes immediately to mind. I used to have custom QGIS projects to export nice-looking maps with weather model data, but there was still manual labor involved. With a well-presented web browser visualization platform, I can do the analysis across multiple models, parameters, and forecast hours quickly while being able to export the weather model graphic and map for redistribution with just a click.", "There were also some specific issues I encountered in my previously-mentioned article about using MapServer to distribute the weather model data. These issues were all related to visualization products where the graphics are heavily removed from the data itself, requiring various rasters to be rendered into a final RGB image (for example, streamlines or wind barbs on top of a wind speed raster) \u2014 which is incompatible with the scale and styling agnostic model data distribution strategy model I intended to employ with MapServer. These issues were fairly trivial to tackle when handled in the web browser, however:", "One thing you may have noticed in the above examples is that, while serviceable, the visualizations don\u2019t look that great. The images are small and the data is cramped, which doesn\u2019t make things easy for forecasters. They\u2019re even more troublesome when redistributed to weather forecast readers, who are likely not data geeks and just want to know where they should ski next weekend. I suppose one could concede that the pixelated, late-90s aesthetic of them does give a sense of pure data authority, and they certainly don\u2019t waste any time on doing anything besides conveying the raw data.", "Let\u2019s take a look at what weather models may look like when rendered entirely in the web browser. These were taken from my website and are used in my forecasts. First off, here\u2019s the interface I built for it in Angular:", "Now, let\u2019s zoom in on the interactive map and enable some other layers. When I say adjustable, I mean this can be done in real-time, by the user, on the webpage:", "How about a layer with streamlines?", "We even have the dreaded Composite Reflectivity + Type layer working properly. You can see the snow as dark blues over the Rockies, with very light rain as greys (and, well, sorry about the slightly misleading light blue color) in Nebraska. This was all calculated in the browser.", "Here are the main steps needed to accomplish client-side weather model rendering, once you have your web map in place. I used Leaflet, but ended up needing to extend it so much that OpenLayers may likely be more suitable if you\u2019re starting from scratch.", "Let\u2019s dig in and go over specifics! I will be using TypeScript and ES6 syntax direct from my codebase, which uses the Angular framework.", "This is the easiest part. Some strategies might be:", "Think about how you want your GeoTIFFs to be structured. To save on data, you likely want one TIFF returned per model, parameter, level, forecast hour, etc. However, you could store multiple forecast hours as several bands in one TIFF if the client wants to preload everything (for instance, to use a slider to view all the forecast hours). This will create an initial, longer download time but speed up overall parsing time slightly.", "Don\u2019t forget about compression. Though you can use JPEG compression on TIFFs to get their filesize down to, well, something comparable a JPEG\u2019s \u2014 this isn\u2019t responsible use of the data. These are not images, but instead arrays of raw data, the integrity of which should be respected before they are rendered. Also, I don\u2019t think the geotiff.js library can handle that method of compression. I have found that a high level (zlevel = 9) of deflate reduced sizes by up to 50% without impacting parsing performance too badly.", "You\u2019ll likely retrieve the GeoTIFF with fetch or using the built-in functions of geotiff.js. The library can natively read cloud-optimized GeoTIFFs! If using a regular GeoTIFF, you\u2019ll need to read the fetch request stream (if you made one) as an ArrayBuffer :", "Following the above example, we can use geotiff.js to parse the ArrayBuffer into a GeoTiff object. We can retrieve the actual image data itself from that object:", "Don\u2019t forget to grab the image metadata and geographic data as well, we\u2019ll need it later:", "If you have multiple bands in the image, you can get the exact number of them easily:", "Besides wind barbs (which can be nice for weather forecasters, but pretty useless for the general public), I can\u2019t think of any other ways of rendering the weather model data besides isobands, isolines, or streamlines. Isobands are polygons that pertain to specific ranges of the data. You can use them to generate colorful temperature or snow accumulation maps. Isolines (or isopleths) are contour lines drawn at the boundary of data ranges. Streamlines help visualize data that has both a velocity and a direction. These can all be created as vectors and added to the map.", "We will need to crack the GeoTIFF data open to build our geographic vectors. You can also just render it as an image to a canvas, but I wont cover that here (see the Acknowledgments section).", "Get the image data for the appropriate band (where i is the band number):", "Build a nested array of the raw data:", "We\u2019re going to use the raster-marching-squares library to generate our features, but for performance purposes I want to run it as a web worker so that the user interface doesn\u2019t lock up. If you\u2019re using Angular, it is easy to set a web worker up with Angular-CLI by running ng generate web-worker.", "Inside of the web worker, we\u2019ll import raster-marching-squares as rastertools:", "This provides isoband and isoline rendering as rastertools.isobands() or rastertools.isolines(). Both functions expect the following arguments:", "We\u2019ll eventually want to style the isobands or put labels on the isolines, so one thing I did was set up color scales for all of the various parameters I wanted to visualize, passing a color for a specific value. I then set up a function that would produce a fixed number of intervals (such as 100 \u2014 smooth, but takes awhile to calculate) from the color scale and use tinygradient to produce the CSS representation of that color scale to use for the legend. For instance, the color scale for snow accumulation looks like this:", "The interval creation function also bounds the intervals array with Number.MAX_SAFE_INTEGER and its negative equivalent. If you do it right, and throw some unit conversion in there, you can handle the isoband creation, styling, and legend in one compact class.", "The worker that will run the isobands or isolines function will listen for the three necessary arguments. We\u2019ll also pass in a type parameter to tell it which function to use:", "The function has been wrapped in a try...catch, which is a nice idea, but useless in practice, because when the function screws up, it tends to just get stuck in a do...while loop until you run out of memory. This is likely due to some of the thousands of weather model rasters I convert a day getting corrupted, which I need to fix but\u2026pull request anyone?", "Now we can call the worker, pass it the necessary arguments, and wait for a response. You don\u2019t have to use a Promise, it just suited me for my particular workflow:", "If you did 100 intervals, this might take a little while. Your laptop fan might kick on with surprising ferocity.", "Note that I did not mention streamlines. If you use the raster-streamlines library, this calculation is refreshingly fast and likely doesn\u2019t need to be put in a web worker.", "If you used raster-marching-squares, this part is all taken care of for you. Basically, the vector features are generated from the rasters, and need to be tied back to where those pixels are actually located geographically. We can use the geoTransform provided by geotiff.js to get that transformation information (and hopefully your GeoTIFF was originally in EPSG:4326). We also want the information as a GeoJSON, which is an agnostic collection of geometries. Again, the library provides this collection, we just need to wrap it with L.geoJSON(<the features>) to create a layer we can add to the map. raster-streamlines works the same way.", "The library also makes available the isoband\u2019s data range in the properties of each feature. We can use this to style the isobands or add labels to the isolines. This is the other tricky part of the process, which I\u2019ll cover shortly.", "You also want to think about what renderer you want the web map to use. By default, Leaflet uses SVG. If you have huge, detailed isobands, performance will be abysmal. I instead opted to use a canvas-based renderer instead, which comes with a few headaches, but allows for acceptable performance once the features have been drawn onto the canvas.", "We\u2019re ready to style our layers now.", "These are the easiest to style. You just need to pass a style function:", "getColor() is a function I wrote that takes a value and gets the interpolated color (using tinygradient) from the appropriate color scale as mentioned before. feature.properties has been populated with the value range, thanks to raster-marching-squares.", "You\u2019ll notice I also set the stroke/outline weight to 1.5, as there are often tiny slivers in between the polygons if they aren\u2019t given outlines. With outlines in place, an important caveat is that if you lower the opacity of the layer (via the style function), the overlap of the fills and outlines will become noticeable. Instead, you\u2019ll need to have the layer on its own map pane and change the opacity of the entire pane.", "Styling the isolines themselves is super easy:", "But what about labels? This is actually very tricky. Since we are using a canvas renderer, the Leaflet plugin for drawing polyline labels is out of the question, as it only works on SVG. I don\u2019t want to use different renderers for each layer either, in the case of overlaying contours/isolines onto isobands.", "In this case, I found an awkwardly-named plugin (Leaflet.streetlabels) which does draw labels along polylines in the canvas renderer, by actually extending the renderer (so it is not a per-layer solution). It has a couple dependencies (one of which isn\u2019t available via npm) so getting it set up was not straightforward.", "There are a number of modifications necessary to get labels working properly.", "In the end, I downloaded the code and prerequisites into my codebase so I could modify the plugin to filter and read from the feature properties more effectively. To fix the upside down label issue, I modified the base dependency (Canvas-TextPath) to flip all letters 180 degrees if they were upside down, while reversing their order. I also put a heavy clamp on the maximum amount of contour-following rotation, so that it didn\u2019t create unreadable squished labels on curvy lines. Effective contour labeling is debatable \u2014 there\u2019s not necessarily anything wrong with perfectly horizontal labels bisecting a contour line, either.", "There were also some \u2018todo\u2019 comments about setting a custom font so I threw Roboto into the canvas draw commands to match the rest of my website\u2019s layout. Maybe I\u2019ll put a pull request out there some day :)", "For point #1 listed above, we can circumvent the issue with arrays by doing a bit of work in the initialization of our isobands GeoJSON layer:", "Finally, in the initialization of the renderer I made it filter out shapes with paths that were too small (squished labels), turn on label collisions, and set the fill/stroke colors. This is where TypeScript gets annoying, as no definitions exist for these sketchy (as much as I appreciate their existence) plugins.", "That was all very annoying and frighteningly kludgy, but the renderer actually works nicely when you get it going \u2014 it redraws the labels as you pan and zoom.", "Streamlines are a little easier as there is a Leaflet plugin that allows for arbitrary shapes or markers to be placed along polylines (not text though, which is why we had to go with the above strategy for contour lines).", "The plugin is Leaflet.PolylineDecorator and it does its job pretty well. Once you generate the streamline layer, you can parse it for the LineString features the plugin expects:", "Yes, you can see I have some typing issues in my codebase.", "We\u2019ll also need to set up the pattern for the decorator, which is probably going to be some sort of arrow along the line. I guess the plugin handles rotation of the decorator automatically. Nice.", "Now pass it all to the plugin:", "Finally, you\u2019ll probably want to combine the decorator with the streamline layer itself (let\u2019s call it layer) into a single LayerGroup, for easy management.", "Done! The only issues I encountered is that the plugin always puts the decorator on the overlay map pane (even when I try to circumvent that), which means if you have pane-based layer ordering, you\u2019ll encounter some z-index problems. Maybe another pull request is in order\u2026", "Our map works great now, provided you extrapolated from the example code above. But what if we want to distribute the visualizations? We can of course use the Snipping Tool (or equivalent) to manually take a screenshot of the map, but that\u2019s inconsistent. Unfortunately, we just don\u2019t have any great options for downloading the map as we see it, as not everything is rendered onto the canvas (tooltips, annotations, etc.).", "Keeping in the spirit of keeping things \u0336s\u0336k\u0336e\u0336t\u0336c\u0336h\u0336y\u0336 \u2026I mean, client-side, we can further densify our node_modules directory towards a critical mass and use a library like dom-to-image to hopefully render the entire DOM tree of our map container as an image. This actually works pretty well out-of-the-box, but chokes on external web fonts and map layers that use CORS, so be wary.", "Once you solve those issues, you can render the map pretty seamlessly, but you\u2019ll need need file-saver to actually save the image to the disk.", "The performance of domtoimage is not great, so if you\u2019re hoping to automate animated GIF creation, this doesn\u2019t seem like a viable approach, although there is perhaps a way to do it with web workers. Unfortunately, we\u2019ve definitely run into the brick wall of performance constraints on doing everything with JavaScript.", "There\u2019s lots of other things you can do with the data, perhaps the most famous example being those fancy animated wind maps. You can query it (hint: use the geoTransform), generate statistics, write a Discord server bot\u2026 But of course, you can do this all even easier on a server. Where the client-side rendering shines is in the visualization and interactivity of the weather models. Outside of that, it is difficult to justify the overhead and performance concerns of doing everything in the web browser.", "This is certainly not the only way to go about things. Check out what is being done Leaflet.CanvasLayer.Field, for example. The potential of this technology is quickly developing and I\u2019m sure in the next few years more robust and performant tools will become available. In fact, there are even WebAssembly wrappers for GDAL!", "I\u2019d like to thank Roger Veciana i Rovira for providing the wonderful resources and libraries that showed me this was even possible, and let me start building right away without having to write low-level raster processing algorithms.", "If you attempt to dig up my website, it\u2019s not production-ready and none of the clientside rendering is even available. However, all code and example images come from a working test version. One day\u2026", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F5ff2db881cb8&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-render-interactive-weather-models-entirely-in-the-browser-5ff2db881cb8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-render-interactive-weather-models-entirely-in-the-browser-5ff2db881cb8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-render-interactive-weather-models-entirely-in-the-browser-5ff2db881cb8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-render-interactive-weather-models-entirely-in-the-browser-5ff2db881cb8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----5ff2db881cb8--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----5ff2db881cb8--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@potion_cellar?source=post_page-----5ff2db881cb8--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@potion_cellar?source=post_page-----5ff2db881cb8--------------------------------", "anchor_text": "Thomas Horner"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9e4260fa5487&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-render-interactive-weather-models-entirely-in-the-browser-5ff2db881cb8&user=Thomas+Horner&userId=9e4260fa5487&source=post_page-9e4260fa5487----5ff2db881cb8---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5ff2db881cb8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-render-interactive-weather-models-entirely-in-the-browser-5ff2db881cb8&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5ff2db881cb8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-render-interactive-weather-models-entirely-in-the-browser-5ff2db881cb8&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://weather.cod.edu/forecast/", "anchor_text": "College of DuPage\u2019s model viewer."}, {"url": "https://tropicaltidbits.com/analysis/models/", "anchor_text": "TropicalTidbit\u2019s"}, {"url": "https://medium.com/swlh/automated-weather-model-processing-with-foss4g-lessons-learned-8aaaeda1e3bc", "anchor_text": "build and automate your own weather model visualizer"}, {"url": "https://www.opengeospatial.org/standards/wms", "anchor_text": "OGC WMS"}, {"url": "https://gdal.org/", "anchor_text": "GDAL"}, {"url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers", "anchor_text": "web workers"}, {"url": "https://www.cogeo.org/", "anchor_text": "cloud-optimized GeoTIFFs"}, {"url": "https://mapserver.org/ogc/wcs_format.html", "anchor_text": "WCS standard"}, {"url": "https://medium.com/14ers-forecast", "anchor_text": "my forecasts"}, {"url": "https://geotiffjs.github.io/", "anchor_text": "Geotiff.js"}, {"url": "https://en.wikipedia.org/wiki/Marching_squares", "anchor_text": "marching squares algorithm"}, {"url": "https://github.com/rveciana/raster-marching-squares", "anchor_text": "raster-marching-squares"}, {"url": "https://github.com/rveciana/raster-streamlines", "anchor_text": "raster-streamlines"}, {"url": "https://geoexamples.com/other/2019/02/08/cog-tutorial.html#the-cloud-optimized-geotiff-format", "anchor_text": "natively read cloud-optimized GeoTIFFs!"}, {"url": "https://github.com/triedeti/Leaflet.streetlabels", "anchor_text": "Leaflet.streetlabels"}, {"url": "https://github.com/Viglino/Canvas-TextPath", "anchor_text": "Canvas-TextPath"}, {"url": "https://github.com/bbecquet/Leaflet.PolylineDecorator", "anchor_text": "Leaflet.PolylineDecorator"}, {"url": "https://github.com/tsayen/dom-to-image", "anchor_text": "dom-to-image"}, {"url": "https://www.npmjs.com/package/file-saver", "anchor_text": "file-saver"}, {"url": "https://www.windy.com/?39.707,-105.029,5", "anchor_text": "animated wind maps"}, {"url": "https://ihcantabria.github.io/Leaflet.CanvasLayer.Field/", "anchor_text": "Leaflet.CanvasLayer.Field"}, {"url": "https://www.npmjs.com/package/gdal-js", "anchor_text": "WebAssembly wrappers for GDAL!"}, {"url": "https://medium.com/u/26d510f9aca?source=post_page-----5ff2db881cb8--------------------------------", "anchor_text": "Roger Veciana i Rovira"}, {"url": "https://bl.ocks.org/rveciana", "anchor_text": "wonderful resources"}, {"url": "https://github.com/rveciana?tab=repositories", "anchor_text": "libraries"}, {"url": "https://medium.com/tag/javascript?source=post_page-----5ff2db881cb8---------------javascript-----------------", "anchor_text": "JavaScript"}, {"url": "https://medium.com/tag/weather-models?source=post_page-----5ff2db881cb8---------------weather_models-----------------", "anchor_text": "Weather Models"}, {"url": "https://medium.com/tag/weather-data?source=post_page-----5ff2db881cb8---------------weather_data-----------------", "anchor_text": "Weather Data"}, {"url": "https://medium.com/tag/gis?source=post_page-----5ff2db881cb8---------------gis-----------------", "anchor_text": "GIS"}, {"url": "https://medium.com/tag/meteorology?source=post_page-----5ff2db881cb8---------------meteorology-----------------", "anchor_text": "Meteorology"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5ff2db881cb8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-render-interactive-weather-models-entirely-in-the-browser-5ff2db881cb8&user=Thomas+Horner&userId=9e4260fa5487&source=-----5ff2db881cb8---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5ff2db881cb8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-render-interactive-weather-models-entirely-in-the-browser-5ff2db881cb8&user=Thomas+Horner&userId=9e4260fa5487&source=-----5ff2db881cb8---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5ff2db881cb8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-render-interactive-weather-models-entirely-in-the-browser-5ff2db881cb8&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----5ff2db881cb8--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F5ff2db881cb8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-render-interactive-weather-models-entirely-in-the-browser-5ff2db881cb8&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----5ff2db881cb8---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----5ff2db881cb8--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----5ff2db881cb8--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----5ff2db881cb8--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----5ff2db881cb8--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----5ff2db881cb8--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----5ff2db881cb8--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----5ff2db881cb8--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----5ff2db881cb8--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@potion_cellar?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@potion_cellar?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Thomas Horner"}, {"url": "https://medium.com/@potion_cellar/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "73 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9e4260fa5487&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-render-interactive-weather-models-entirely-in-the-browser-5ff2db881cb8&user=Thomas+Horner&userId=9e4260fa5487&source=post_page-9e4260fa5487--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F3a6cac31d7db&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-render-interactive-weather-models-entirely-in-the-browser-5ff2db881cb8&newsletterV3=9e4260fa5487&newsletterV3Id=3a6cac31d7db&user=Thomas+Horner&userId=9e4260fa5487&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}