{"url": "https://towardsdatascience.com/evolve-your-neural-net-now-automl-with-regularized-evolution-from-scratch-444779aeeb4f", "time": 1683009454.739948, "path": "towardsdatascience.com/evolve-your-neural-net-now-automl-with-regularized-evolution-from-scratch-444779aeeb4f/", "webpage": {"metadata": {"title": "Evolve your neural net now! AutoML with regularized evolution from scratch | by Daniel Wiczew | Towards Data Science", "h1": "Evolve your neural net now! AutoML with regularized evolution from scratch", "description": "AutoML is a concept, where a machine learning algorithm is not developed by a human but by a computer. So for a given problem, like for example predicting cats/dogs on photos or predicting stock\u2026"}, "outgoing_paragraph_urls": [{"url": "https://en.wikipedia.org/wiki/Tournament_selection", "anchor_text": "tournament selection", "paragraph_index": 6}, {"url": "https://en.wikipedia.org/wiki/Fitness_proportionate_selection", "anchor_text": "the roulette wheel", "paragraph_index": 7}, {"url": "https://benchmarks.ai/cifar-10", "anchor_text": "https://benchmarks.ai/cifar-10", "paragraph_index": 11}], "all_paragraphs": ["AutoML is a concept, where a machine learning algorithm is not developed by a human but by a computer. So for a given problem, like for example predicting cats/dogs on photos or predicting stock prices, the AutoML algorithm creates several architectures with different parameters and evaluates validation accuracy/validation for it. A machine learning researcher is doing it similarly, but with some prior knowledge and intuition. Often such a process is tedious and requires several iterations of building and testing to find out good architecture. Thus requires a high amount of time from the researcher and money from the company/institution that hired him. Furthermore, still there is space left to improve such architecture, as several publications with CNN (convolutional neural networks) architecture during the last few years show (e.g. Resnet50, Imagenet, etc.).", "Most of the algorithms nowadays are quite complicated, usually using some sort of reinforcement learning [1], Bayesian optimization process [2], or some sort of tree search together with evolutionary search [3]. None of them wouldn\u2019t be easy to try without extensive explanation, research, and coding. Nevertheless, in 2019 Google Brain published a paper about \u201cRegularized Evolution\u201d [4], that I\u2019m going to explain here and even let it try in a Jupyter Notebook, that you can run on the Google Colab. It is a quite simple evolutionary algorithm, that requires mostly writing a loop.", "Before we move to the regularized evolution, let me introduce to the concept of evolutionary algorithms first.", "Generally speaking, EAs is a group of optimization algorithms, that are inspired by the biological process of evolution. Where the fittest to the environment are selected based more/less on mutations and reproduction. These algorithms are able to traverse huge search spaces*(star means explanation at the end of the article) with a noisy metrics**. Similarly to the process of evolution, where it is hard to measure if one is better than another and reproduction has an element of randomness, but still it organisms evolve and able adapt themselves to a given environment. The algorithm involves some nomenclature, that you should understand before moving on, that you can learn below.", "The algorithm work on a group of individuals, called population (e.g. machine learning models), where the size of the population is fixed (e.g. 100). Every individual is defined by a set of genes, which you can think of as a list or vector of an individual\u2019s properties (e.g. types of layers, mathematical operations, numbers), the set of genes is called a chromosome. These individuals undergo reproduction by crossover and by mutating themselves. A mutation is changing one gene (e.g. changing one type of layer, parameter or something else), where crossover you may think as combining two sets of genes (e.g. one half of list of layers from one individual with another half list of layers from another model, but it does not need to be a half, it can be e.g. 5/100). The individuals that undergo reproduction are chosen based on the fitness score, which tells you how good is an individual (e.g. validation accuracy of an ML model). The higher the fitness score, the better individual we have.", "The algorithms work by iterating between reproduction and fitness score calculations, where the fittest and chosen to the reproduction and the least fittest are removed from the population. Such one iterations are called a cycle, and in one cycle a new generation is produced \u2014 a new individual made by mutation and reproduction. The algorithm iterates through the cycles till the point where we get a good enough individual/s or when most of the population shares the same genes (so the population converges). The algorithm rarely converges to a global optimum solution, but easily find a good optimal one.", "The selection process can be made by various algorithms, the most popular is tournament selection that draws k individuals (where k is smaller than population size) randomly from the population and outputs the best among them. This ensures that not always the fittest is chosen and gives a chance for weaker individuals. It is because the fittest individuals are not always the best candidates for reproduction, maybe the other individuals will be better in the future after a few generations. This ensures greater diversity during traversal through search space. Also, you may think of it as preventing getting stuck in local maxima of fitness score, even if an individual has a really good set of genes, still there can a more optimal combination of them.", "The other is the roulette wheel where individuals are chosen according to the fitness, the higher the fitness, the higher the probability. Although the one is not used in the article and is not described here.", "The regularized evolution is called also ageing evolution \u2014 our population ages as the algorithm progress. Thus the oldest one are removed from the population instead of the least fittest. This ensures diversity in the population, because the fittest one is not ensured to survive, it can die due to ageing even if it performs well. It works in similar way as described in the section with tournament selection \u2014 in short just by increasing diversity and preventing being stuck in local minima. The algorithm\u2019s schema is depicted a bit later, below.", "The architecture search using regularized revolution is implemented in a Jupyter Notebook prepared for the purpose of the article, that you can run in the Google Colab environment (or anywhere else, but a decent GPU is required!). The Jupyter Notebook you can in my repository below:", "and here is a direct link to the Google Colab, where you can directly interact with the code:", "Remember, that the calculations are done to perform architecture search, so the parameters are set to the lowest as possible, to speed up calculations and training time. After you find some interesting architecture, you can scale it up (by increasing the number of filters) and use it to the fullest. Then you can compare it with a ranking (e.g. https://benchmarks.ai/cifar-10) and be happy, to have a small model that performs well. Furthermore, if we would use a different number of fillers in the convolutional layers e.g. 16, 32, 64, then the algorithm would always choose a model with convolutional layers with a high number of filters. It is explained by the fact, that with a small number of epochs and parameters, overfitting is negligible here and bigger parameter space is chosen.", "Before proceeding, you have to ensure that you have installed following packages:", "There are a few key parts of the algorithm, that you should know. But it would be best if you open it first and emerge yourself in the code before you go further in the text.", "The key thing in the algorithm is a set of genes that you\u2019re using in your algorithm.", "The genes are defined as five types of layers, where the first is one is an identity function \u2014 so the output is the same as the input. The identity functions servers the purpose of a lack of layer, it is just easier to implement an empty layer than removing one from the set of genes.", "Then those genes are producing random layers for the model, as defined in the random_element() method. The method returns tuples, that associate layer type with its parameter. All of the layers have only one parameter, including convolutional layer, where number of filters is fixed to a small value. The small size of fillers is used to speed up calculations (see the beginning of this section).", "The next thing is the random_architecture()function that uses random_element() function, to create an architecture as a list of tuples. For example, this could be an architecture: [(3, (2, 2)), (0, 16.0), (1, None), (1, None), (1, None), (3, (2, 2)), (1, None), (0, 16.0)]. You can decipher the architecture reading it from left to right (so from the first to the last layer) and comparing the numbers in the first tuple\u2019s element in the defined genes, which are in the available_genes dictionary. It is best if you try to generate few architectures in the Jupyter Notebook to catch on how it is going to look like. In fact you can conclude now, that one individual in the population (so one architecture) is represented by a list of tuples, which represent different genes (so layers in our problem of architecture search). You can try out also to train an architecture using the init_train_and_eval() method by passing a list with an architecture to it. The function returns you validation accuracy, and it is zero if model fails to compile.", "The last important function before moving into the evolutionary algorithm is the mutate_arch(), it is responsible for mutating genes for every individual in your population. The function just chooses a random index in your model\u2019s list and substitutes it with a random element using the random_element() function.", "The regularized evolution algorithm is implemented in the regularized_evolution() function. How to use the function and what corresponding arguments are doing is explained in its docstring. The algorithm generally works by repeating three steps, where the steps are called cycles. In every cycle, one individual is chosen using tournament selection, then it is mutated and the oldest one is removed from the population. The last step is performed, by defining the population in the FIFO queue data structure, and thus those added early are also removed early. The image below depicts the process more precisely:", "While the algorithm runs, you should monitor a few things, that indicates how well it behaves.", "The score here indicates the validation accuracy attained during the evaluation of a given architecture for a given dataset (here it is cifar-10). There are few values, like mean, standard deviation, and the fittest individual in the population. Further, since in the aging evolution the fittest individual can just die, hence there is also an indicator of the best model encountered during the optimization.As the algorithm progress, you should see more/less, that the mean increases, and the standard deviation decrease. The reason behind it is that more and more individuals in the populations share similar genes, thus have similar fitness (or validation accuracy). Usually, the process is not monotonic, the mean is going up while standard deviation stays constant, then it stays constant and the standard deviation is going down.", "After the specified number of cycles pass, you will get the best model encountered during the optimization and all the models in every cycle. You can plot it as a distribution of scores in each cycle using cell below the cell where regularized evolution was running. You should get a plot like this below:", "You can see that validation accuracy was rapidly improving at the beginning, and then it oscillates back and forth. Usually, it is a good indicator of convergence, and that most of the population shares an optimal set of genes. Nevertheless, sometimes it also indicates that you are stuck in local minima, thus you can decrease the number of samples in the tournament selection.The best model obtained by me after 600 cycles is the one depicted below:", "which translates to an architecture with fallowing layers:", "After that, you can get the model and scale it up a bit, by increasing every convolutional layer e.g. by 2 of the previous layer (like 16, 32, 64, 128). Then you train the model with the previously used dataset (cifar-10). For example with the one above I got about 71% of accuracy on the validation set. If I use image augmentation on top of that, then the model gives me a bit more, which is about 77%.", "Nevertheless, a separate set of images should be used (a test set), if you would like to use it in a real case scenario. It\u2019s because you\u2019re optimizing your architecture to the validation set, so you could potentially over-fit with your architecture the validation set. But that is a topic for another story, not this one, but be cautious.", "Evolution algorithms are an efficient way to search through complicated search spaces. They work on a population, which is a set of individuals and every such individual has a set of genes. A gene is a feature of the individual and can be mutated by e.g. replacing with other values randomly. Then the evolutionary algorithm is iteratively selecting those that are performing in a given problem (those that are the fittest) well and is mutating them. Those that are not performing well are not excluded from the population earlier or further since population size is set fixed.Regularized evolution (called also aging evolution) introduces age for the individuals in the populations, so everyone dies out with time and only younger survive with genes selected from the fittest individuals. It increases diversity in the population, thus better solutions can be found.Evolutionary algorithms can be used for architecture search in machine learning, e.g. for convolutional neural networks. They are effectively searching in a huge set of possible models (search space) and find an optimal solution with a relatively small number of iterations.", "[5] Tomassini, M. (1999). Parallel and distributed evolutionary algorithms: A review.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F444779aeeb4f&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolve-your-neural-net-now-automl-with-regularized-evolution-from-scratch-444779aeeb4f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolve-your-neural-net-now-automl-with-regularized-evolution-from-scratch-444779aeeb4f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolve-your-neural-net-now-automl-with-regularized-evolution-from-scratch-444779aeeb4f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolve-your-neural-net-now-automl-with-regularized-evolution-from-scratch-444779aeeb4f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----444779aeeb4f--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----444779aeeb4f--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://daniel-wiczew.medium.com/?source=post_page-----444779aeeb4f--------------------------------", "anchor_text": ""}, {"url": "https://daniel-wiczew.medium.com/?source=post_page-----444779aeeb4f--------------------------------", "anchor_text": "Daniel Wiczew"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9ecdedb7ac9b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolve-your-neural-net-now-automl-with-regularized-evolution-from-scratch-444779aeeb4f&user=Daniel+Wiczew&userId=9ecdedb7ac9b&source=post_page-9ecdedb7ac9b----444779aeeb4f---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F444779aeeb4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolve-your-neural-net-now-automl-with-regularized-evolution-from-scratch-444779aeeb4f&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F444779aeeb4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolve-your-neural-net-now-automl-with-regularized-evolution-from-scratch-444779aeeb4f&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@jplenio?utm_source=medium&utm_medium=referral", "anchor_text": "Johannes Plenio"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://en.wikipedia.org/wiki/Tournament_selection", "anchor_text": "tournament selection"}, {"url": "https://en.wikipedia.org/wiki/Fitness_proportionate_selection", "anchor_text": "the roulette wheel"}, {"url": "https://github.com/DanielWicz/AutoMLEvol", "anchor_text": "DanielWicz/AutoMLEvolEvolutionary AutoML tutorial. Contribute to DanielWicz/AutoMLEvol development by creating an account on GitHub.github.com"}, {"url": "https://colab.research.google.com/github/DanielWicz/AutoMLEvol/blob/master/regul_evolution_tut.ipynb", "anchor_text": "Regularized evolution with Google ColabRegularized Evolution Tutorial with colab.research.google.com"}, {"url": "https://benchmarks.ai/cifar-10", "anchor_text": "https://benchmarks.ai/cifar-10"}, {"url": "https://medium.com/tag/automl?source=post_page-----444779aeeb4f---------------automl-----------------", "anchor_text": "Automl"}, {"url": "https://medium.com/tag/evolutionary-algorithms?source=post_page-----444779aeeb4f---------------evolutionary_algorithms-----------------", "anchor_text": "Evolutionary Algorithms"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----444779aeeb4f---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/architecture-search?source=post_page-----444779aeeb4f---------------architecture_search-----------------", "anchor_text": "Architecture Search"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----444779aeeb4f---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F444779aeeb4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolve-your-neural-net-now-automl-with-regularized-evolution-from-scratch-444779aeeb4f&user=Daniel+Wiczew&userId=9ecdedb7ac9b&source=-----444779aeeb4f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F444779aeeb4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolve-your-neural-net-now-automl-with-regularized-evolution-from-scratch-444779aeeb4f&user=Daniel+Wiczew&userId=9ecdedb7ac9b&source=-----444779aeeb4f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F444779aeeb4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolve-your-neural-net-now-automl-with-regularized-evolution-from-scratch-444779aeeb4f&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----444779aeeb4f--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F444779aeeb4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolve-your-neural-net-now-automl-with-regularized-evolution-from-scratch-444779aeeb4f&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----444779aeeb4f---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----444779aeeb4f--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----444779aeeb4f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----444779aeeb4f--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----444779aeeb4f--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----444779aeeb4f--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----444779aeeb4f--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----444779aeeb4f--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----444779aeeb4f--------------------------------", "anchor_text": ""}, {"url": "https://daniel-wiczew.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://daniel-wiczew.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Daniel Wiczew"}, {"url": "https://daniel-wiczew.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "33 Followers"}, {"url": "https://www.linkedin.com/in/daniel-wiczew", "anchor_text": "https://www.linkedin.com/in/daniel-wiczew"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9ecdedb7ac9b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolve-your-neural-net-now-automl-with-regularized-evolution-from-scratch-444779aeeb4f&user=Daniel+Wiczew&userId=9ecdedb7ac9b&source=post_page-9ecdedb7ac9b--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2F9ecdedb7ac9b%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolve-your-neural-net-now-automl-with-regularized-evolution-from-scratch-444779aeeb4f&user=Daniel+Wiczew&userId=9ecdedb7ac9b&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}