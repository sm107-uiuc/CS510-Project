{"url": "https://towardsdatascience.com/understanding-concurrency-and-multi-threaded-programs-261047c8231f", "time": 1683005838.789053, "path": "towardsdatascience.com/understanding-concurrency-and-multi-threaded-programs-261047c8231f/", "webpage": {"metadata": {"title": "Understanding Concurrency and Multi-threaded Programs | by Francisco Sainz | Towards Data Science", "h1": "Understanding Concurrency and Multi-threaded Programs", "description": "I recently had to learn to program in Go because I was developing a multiplayer game for the browser. I asked on reddit\u2019s r/gamedev community and was recommended to take a look at GO for the backend\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.reddit.com/r/gamedev/", "anchor_text": "r/gamedev", "paragraph_index": 1}], "all_paragraphs": ["I recently had to learn to program in Go because I was developing a multiplayer game for the browser.", "I asked on reddit\u2019s r/gamedev community and was recommended to take a look at GO for the backend server.", "Go is a relatively new language created by Google engineers that has concurrency features baked right into the language.", "We will learn about go and multiplayer video games in an upcoming article, but first, we must understand how concurrency works.", "Instead of going straight to concurrency, it might be helpful to understand what parallel execution", "If you\u2019re into computer science, you might have heard about parallel programming, but don\u2019t worry if you haven\u2019t.", "Executing a program in parallel basically means this.", "Running two different pieces of code simultaneously", "This means both programs are running at any given point in time. One might finish before the other, but they are not executed sequentially \u2014 one instruction after the other \u2014 like a regular program would.", "This is great because it means we can double the speed of our program in the same amount of time. Doing two things at once is faster than one right?", "But with great power comes great responsibility and a cost. Well, two actually.", "Let\u2019s discuss restriction #1 to get a better grasp of why we need at least two cores to run something in parallel.", "Programs and threads are executed by our computer\u2019s processor. A processor is made up of cores and each core can process only one instruction at a time.", "Luckily for us, most modern processors come with 4 cores or more. This is why we call them quad-core processors. Smaller devices like tables might have less than four cores to save battery or because they require less computational power.", "For example, my 2019 macbook air has a dual processor. **Cries in Parallel**", "Since each core can only process one thing at a time. We need at least two cores to be able to perform any kind of parallel execution. So if you have four cores, theoretically, you can execute four different programs at the same time. That\u2019s 4 times as fast! But again, they must be STRICTLY unrelated.", "Two related programs can\u2019t be run in parallel because they require some sort of synchronization to work properly.", "Computer scientists realized that a lot of programs cannot be executed in parallel because they are related to each other.", "Cores also usually have 4 threads each.", "A thread is just a subprocess of a program with less overhead.", "A multi-threaded program will take advantage of additional threads \u2014 and cores \u2014 to distribute the load of the program more efficiently, as opposed to have one poor core do all the work while the others simply watch.", "The premise of concurrency is to run two or more different programs, kind of at the same time.", "Let\u2019s say we have a program which waits for a user\u2019s input to print \u201cHello {user\u2019s input} \u201c as opposed to \u201cHello World\u201d.", "A process (a thread is also a process) has 5 states that it can be at any point in its lifetime.", "Whenever the program is in its ready or waiting state, cpu cycles are being wasted while the program waits for some input or event to fire.", "Concurrency takes advantage of this \u201cwasted time\u201d to execute another program while the first one is waiting on said events like for a user to type his username and password, for example.", "Computers today are so fast that their operating systems use this strategy to run may program \u201cat the same time\u201d, but in reality, it\u2019s switching between programs really fast that we can\u2019t tell the difference.", "Although it won\u2019t be as fast as parallelism, concurrency can speed up a program significantly.", "Now that we know what concurrency is and what it can accomplish, let\u2019s look at some of the problems we may face when implementing it.", "A race condition is created when two processes fight for the same resource. This means that the overall program becomes unpredictable because one program may modify a value before the other program has read it.", "Let\u2019s say we are implementing a game and we are storing players\u2019 locations (X,Y) in an hash map.", "Now let\u2019s say player A shoots at player B, and we need to check if the bullet will hit Player B and inflict damage.", "The collision detection and player input components of our game are running concurrently so we need to make sure no race conditions are created.", "So if we have a function that is checking the collision between Player A\u2019s bullet and Player B\u2019s character, but player B may be moving at the same time, the collision detection program may modify player B\u2019s position in the array, while we are looking for collisions.", "In the best case, this will create inconsistencies in the game logic, like a player not being affected by a collision, but in the worst case, our game will crash because memory can\u2019t be read and written to simultaneously.", "Either way, we don\u2019t want either of these to happen because this issues can be extremely hard to debug as we don\u2019t know when the code is being executed.", "We will be using the following design of a multiplayer game to discuss some real world scenarios where concurrency can be used.", "Sometimes some data will need to be shared between threads and this can lead to race conditions if done improperly.", "One way to solve this problem is to provide a way to synchronize the threads so only one of them can access or read from the selected source at any given time.", "In go, these solution is called a channel. Don\u2019t get intimidated by the name, because a channel is basically just a queue with some added functionality.", "When a thread is reading from a channel it will block all access to any other thread until the current one finishes using it. In case that two or more threads want to access the channel, they will have to wait until it\u2019s available. This way, we can ensure that no race conditions will happen.", "We might encounter a situation where we need to update data many times per second, while at the same time a user might be modifying the data at the same time. Sometimes we can\u2019t use the same channel for everything unless we don\u2019t mind for all of our components to depend on each other. Decoupling is a good way to ensure a clean project that is easily maintainable.", "For example, let\u2019s go back to the game example. When a player shoots a component is in charge of creating a projectile and also updating the player if it moves.", "Using the first method, we can just send every input request and projectile creating through a channel and have it update everything from a single source to prevent a race condition.", "But it might be a better solution to update the player\u2019s position directly and send only the projectile. This way, we only need to worry about updating projectiles and checking collisions in our physics component, rather than have to process player movement too.", "To do this, we create a copy of the player\u2019s positions and check collisions with that copy since the original data might change while we are checking it.", "Because we are updating projectile and checking for collision 60 times per second, this prevents reading from data that is being modified at the same time and also keeps our physics logic separate of our player\u2019s input logic.", "The other way as mentioned above, would be to process everything in the physics component which could make our code less readable and dependent on components that are not related.", "Concurrency can speed up our programs significantly by optimizing the use of resources and wait time that would be otherwise wasted. In many cases using concurrency might improve the program, but it is often required for high performance systems like real time apps and video games.", "We will discuss various strategies used to solve these problems in an upcoming article as well as implementing concurrent programs in GO.", "Meanwhile you can start learning about Go because it is different from traditional languages and may take some time to get used to it.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F261047c8231f&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-concurrency-and-multi-threaded-programs-261047c8231f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-concurrency-and-multi-threaded-programs-261047c8231f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-concurrency-and-multi-threaded-programs-261047c8231f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-concurrency-and-multi-threaded-programs-261047c8231f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----261047c8231f--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----261047c8231f--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@pacosw?source=post_page-----261047c8231f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@pacosw?source=post_page-----261047c8231f--------------------------------", "anchor_text": "Francisco Sainz"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff5d1e3fae5de&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-concurrency-and-multi-threaded-programs-261047c8231f&user=Francisco+Sainz&userId=f5d1e3fae5de&source=post_page-f5d1e3fae5de----261047c8231f---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F261047c8231f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-concurrency-and-multi-threaded-programs-261047c8231f&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F261047c8231f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-concurrency-and-multi-threaded-programs-261047c8231f&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@lazycreekimages?utm_source=medium&utm_medium=referral", "anchor_text": "Michael Dziedzic"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://www.reddit.com/r/gamedev/", "anchor_text": "r/gamedev"}, {"url": "https://web.mit.edu/6.005/www/fa14/classes/17-concurrency/", "anchor_text": "https://web.mit.edu/6.005/www/fa14/classes/17-concurrency/"}, {"url": "https://www.coursera.org/learn/golang-concurrency", "anchor_text": "https://www.coursera.org/learn/golang-concurrency"}, {"url": "https://medium.com/tag/data-science?source=post_page-----261047c8231f---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/programming?source=post_page-----261047c8231f---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/computer-science?source=post_page-----261047c8231f---------------computer_science-----------------", "anchor_text": "Computer Science"}, {"url": "https://medium.com/tag/software-engineering?source=post_page-----261047c8231f---------------software_engineering-----------------", "anchor_text": "Software Engineering"}, {"url": "https://medium.com/tag/games?source=post_page-----261047c8231f---------------games-----------------", "anchor_text": "Games"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F261047c8231f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-concurrency-and-multi-threaded-programs-261047c8231f&user=Francisco+Sainz&userId=f5d1e3fae5de&source=-----261047c8231f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F261047c8231f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-concurrency-and-multi-threaded-programs-261047c8231f&user=Francisco+Sainz&userId=f5d1e3fae5de&source=-----261047c8231f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F261047c8231f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-concurrency-and-multi-threaded-programs-261047c8231f&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----261047c8231f--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F261047c8231f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-concurrency-and-multi-threaded-programs-261047c8231f&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----261047c8231f---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----261047c8231f--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----261047c8231f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----261047c8231f--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----261047c8231f--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----261047c8231f--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----261047c8231f--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----261047c8231f--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----261047c8231f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@pacosw?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@pacosw?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Francisco Sainz"}, {"url": "https://medium.com/@pacosw/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "858 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff5d1e3fae5de&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-concurrency-and-multi-threaded-programs-261047c8231f&user=Francisco+Sainz&userId=f5d1e3fae5de&source=post_page-f5d1e3fae5de--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F4107cc8d339b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-concurrency-and-multi-threaded-programs-261047c8231f&newsletterV3=f5d1e3fae5de&newsletterV3Id=4107cc8d339b&user=Francisco+Sainz&userId=f5d1e3fae5de&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}