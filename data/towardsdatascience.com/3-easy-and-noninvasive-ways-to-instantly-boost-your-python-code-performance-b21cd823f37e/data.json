{"url": "https://towardsdatascience.com/3-easy-and-noninvasive-ways-to-instantly-boost-your-python-code-performance-b21cd823f37e", "time": 1683002577.89852, "path": "towardsdatascience.com/3-easy-and-noninvasive-ways-to-instantly-boost-your-python-code-performance-b21cd823f37e/", "webpage": {"metadata": {"title": "3 easy and noninvasive Ways to instantly boost your Python Code Performance | by Dr. Robert K\u00fcbler | Towards Data Science", "h1": "3 easy and noninvasive Ways to instantly boost your Python Code Performance", "description": "People do not utilize the Python standard library enough. It bloats the code and makes maintenance more difficult. Learn how to do better!"}, "outgoing_paragraph_urls": [{"url": "https://en.wikipedia.org/wiki/Set_(mathematics)", "anchor_text": "unions, intersections, complements, and symmetric differences", "paragraph_index": 6}, {"url": "https://en.wikipedia.org/wiki/Monte_Carlo_method", "anchor_text": "Monte Carlo simulation", "paragraph_index": 9}, {"url": "https://en.wikipedia.org/wiki/Hash_function", "anchor_text": "hashed", "paragraph_index": 13}, {"url": "https://docs.python.org/3/library/concurrent.futures.html", "anchor_text": "just check this out", "paragraph_index": 35}, {"url": "https://en.wikipedia.org/wiki/Primality_test", "anchor_text": "better ways to check if a number is prime", "paragraph_index": 45}, {"url": "https://en.wikipedia.org/wiki/Fibonacci_number#Closed-form_expression", "anchor_text": "closed formula", "paragraph_index": 45}, {"url": "https://en.wikipedia.org/wiki/Bubble_sort", "anchor_text": "Bubble Sort", "paragraph_index": 46}, {"url": "https://en.wikipedia.org/wiki/Quicksort", "anchor_text": "Quicksort", "paragraph_index": 46}, {"url": "https://dr-robert-kuebler.medium.com/membership", "anchor_text": "via this link", "paragraph_index": 51}, {"url": "https://www.linkedin.com/in/dr-robert-k%C3%BCbler-983859150/", "anchor_text": "LinkedIn", "paragraph_index": 54}], "all_paragraphs": ["A common pattern I see is that people do not utilize the Python standard library enough. While this unnecessarily bloats the code and makes maintenance more difficult, it can also lead to inefficient and slow code. Therefore, in this article, I want to tackle the latter point and show you a few things that enable you to write faster code.", "After the very simple optimizations I am going to show you, the programs can run thousands of times faster, for nearly zero effort from your side. This can be the difference between waiting for a minute or waiting for the whole day for a program to finish.", "Since I am a mathematician, I like to deal with high-level problems. I don\u2019t want to shift around bits and get the last percent of performance out of my code. I admire the engineers who can do that and I am happy that they give us so many great and efficient programs, but this is nothing I enjoy doing myself.", "However, sometimes I have to code something myself. It happens. And when it does, I use a few very simple tricks to speed things up without going too deep under the hood.", "Here is my advice to you.", "Sets are useful for a lot of tasks. From a high level, you can see sets as lists that do not allow duplicate values. Writing", "will leave you with the set s = {1, 2, 3}. You can combine several sets into new sets, using unions, intersections, complements, and symmetric differences. You can check whether one set is contained in another set. The possibilities are endless!", "But what I really want to tell you is the following: Use sets whenever you want to check a bunch of elements if they are contained in a list \u2014 sorry, set!", "Imagine we get a bunch of random numbers less than 50,000 and we have to test if they are primes. Moreover, we want to check what the probability to draw a prime number is. So, let us first define the prime numbers up to 50,000.", "Now, we can start computing the probability via Monte Carlo simulation. This is done by dividing the number of prime numbers we have drawn by the total amount of numbers drawn.", "This code runs for about 6 seconds on my machine, but we are working with a very small number here, so this should not happen at this point! I would expect milliseconds, maybe even nanoseconds.", "You guessed it, the problem is that primes is a list. Testing, if an element is contained in a list takes linear time in the length of the list on average, since every element has to be checked one after another! This means the following: If you have a list with 10,000 elements and it takes 1 second to search for an element, then it will take 100 seconds if you are searching for this element in a list containing 1,000,000 elements.", "Sure, we can get lucky and the element we search for is in the beginning, then searching is fast. But on average, we can expect our element to be somewhere in the middle, and in the worst case the element is not even in the list, and we look at all elements in the list.", "Use sets! The magic is that, internally, elements within sets get hashed. Simply speaking, you can see it as each element having a fixed address, kind of like in a normal array. This way, checking if an element is in a set boils down to hashing the element, looking at that address, knocking on the door and seeing if someone is there. This can be done in constant time (the hashing is usually negligible).", "Comparing searching times in lists vs sets gives the following results on my machine:", "So, let us fix our code in a very easy way:", "Now the code runs in on 2 milliseconds on my machine, a vast improvement of 3000 times!", "As you can see, boosting the code was very easy. It just takes a small addition of the set keyword.", "Sometimes, especially when using recursive functions, some function values are computed over and over again. Take the Fibonacci sequence as an easy example.", "Computing the 35th Fibonacci number takes around 4 seconds on my machine, which is again quite slow. I don\u2019t want to think about what happens when I calculate the 100th number. But why?", "If you execute it like this, it works, but it is also very inefficient since many function values get calculated over and over again. Take for example the execution tree of fibonacci(4) :", "You can see that fibonacci(2) gets computed in two different places: The calls number 7 and 8 are redundant since these are exactly the same calls already done as the 2nd and 3rd calls.", "The problem gets even worse the higher the Fibonacci numbers get. The tree gets deeper, hence more and more duplicates and wasted re-calculations will arise. If we calculate fibonacci(n), we will re-calculate fib(2) n-2 times, for example. We will re-calculate fib(3) n-3 times, fib(4) n-4 times, etc., it\u2019s a disaster.", "Import the lru_cachefrom functools ! This is a decorator that enables your function to store already computed values and reuse them when needed again. There is nothing else you have to do, just import it and decorate your function!", "Using this improvement, the execution tree looks more like this:", "You can also see the improvement in the running time. Computing the 35th Fibonacci number now takes 0.05 milliseconds, which is about 80000 times faster than before!", "So, caching definitely helps, although you have to keep in mind that you have enough storage on your machine.", "When nothing else helps, you can always continue as before, but do things in parallel or concurrently. Many resources tell you what the difference between multi-processing (parallelity) and multi-threading (concurrency) is.", "Imagine that you have to fry meat, chop vegetables and bake a cake.", "If you are alone and you don\u2019t know how to multi-task, maybe you first chop the vegetables, then bake the cake completely. Afterward, you start frying the meat. Of course, this is slow, but this is how your program usually operates.", "In comparison, parallelity is when you complete this task together with several cooks (processors). Someone from your team fries meat, another one chops vegetables, and a third one bakes the cake, all at the same time. This is much better already!", "Using multi-processing (parallelity), several tasks are done in parallel. It works best when you have to deal with a lot of computationally heavy tasks, and the CPU is the bottleneck.", "Concurrency is when you are on your own again, but much smart and/or more experienced. You put the cake in the oven, throw the meat in the pan, then cut the vegetables and finish before the meat is done. Then you continue with the meat and in the end, you deal with the cake again since it needs the most time. Concurrency is all about not idling around when you have to wait for a process to finish.", "Using Multi-threading (concurrency), always a single task is done at the same time, but if there is a waiting time, the task is switched. It works best when you often have to wait for other processes to finish, and I/O is the bottleneck.", "I made a small graphic for you to illustrate the differences:", "If you are not sure whether to use multi-processing or multi-threading, just try both. The code is nearly the same in Python, just check this out. It\u2019s as easy as changing the word ThreadPoolExecutor for ProcessPoolExecutor or vice versa.", "This can happen because the distinction between having a CPU-bound or an I/O-bound task is not always clear. Take image processing for example. Imagine that you have a lot of bigger pictures on your disk and you want to apply some transformation to them.", "It\u2019s hard to tell beforehand if loading the pictures is the bottleneck of the whole process, or the transformation itself.", "Now, let us get to a concrete example. Imagine that you want to grab the HTML code for some websites because you want to parse something from it. Your code could look like this:", "For me, this runs in about 3.5 seconds. Again, this can be done more efficiently!", "You are being the cook that does not multitask! You request a website, wait until you got it, and then head over to the next one. Meanwhile, you just wait.", "Here is how to fix it.", "You can import Python\u2019s ThreadPoolExecutor from the concurrent.futures package. Then you can use the map method to apply the get_url function to all URLs. The results get collected in the iterator result .", "This way, you send a request to all websites and collect the responses as they come in. For me, it takes only 1.6 seconds now, around twice as fast as before.", "Often you can tweak the performance of your algorithms a bit by these simple and quite noninvasive methods. However, sometimes it is better to come up with a better algorithm.", "There are better ways to check if a number is prime than dividing it by all potential divisors (although this was not the problem in the first example). There are better ways to compute the Fibonacci sequence since there is a closed formula available for this!", "Keep your eyes open for smarter algorithms. You don\u2019t have to come up with them yourself, but you should at least search for them and see if they really improve your performance! Probably you would also never use Bubble Sort in practice (I hope), but rely on Quicksort or another better sorting algorithm instead, if you happen to have to write a sorting method yourself.", "We have seen a few simple ways to improve the performance of your problems nearly for free. These ways are high-level and can be implemented by everyone who knows a bit of Python. We have learned the following:", "If you put these tips into practice, you get your stuff done much faster and you have more time for dealing with new and exciting problems!", "I hope that you learned something new, interesting, and useful today. Thanks for reading!", "As the last point, if you", "why not do it via this link? This would help me a lot! \ud83d\ude0a", "To be transparent, the price for you does not change, but about half of the subscription fees go directly to me.", "Thanks a lot, if you consider supporting me!", "If you have any questions, write me on LinkedIn!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Studied Mathematics, graduated in Cryptanalysis, working as a Senior Data Scientist. Interested in algorithms, probability theory, and machine learning."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fb21cd823f37e&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-easy-and-noninvasive-ways-to-instantly-boost-your-python-code-performance-b21cd823f37e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-easy-and-noninvasive-ways-to-instantly-boost-your-python-code-performance-b21cd823f37e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-easy-and-noninvasive-ways-to-instantly-boost-your-python-code-performance-b21cd823f37e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-easy-and-noninvasive-ways-to-instantly-boost-your-python-code-performance-b21cd823f37e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://me.dm/@robertkuebler", "anchor_text": "Mastodon"}, {"url": "https://towardsdatascience.com/?source=post_page-----b21cd823f37e--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----b21cd823f37e--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://kuebler.ai/?source=post_page-----b21cd823f37e--------------------------------", "anchor_text": ""}, {"url": "https://kuebler.ai/?source=post_page-----b21cd823f37e--------------------------------", "anchor_text": "Dr. Robert K\u00fcbler"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6d6b5fb431bf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-easy-and-noninvasive-ways-to-instantly-boost-your-python-code-performance-b21cd823f37e&user=Dr.+Robert+K%C3%BCbler&userId=6d6b5fb431bf&source=post_page-6d6b5fb431bf----b21cd823f37e---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb21cd823f37e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-easy-and-noninvasive-ways-to-instantly-boost-your-python-code-performance-b21cd823f37e&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb21cd823f37e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-easy-and-noninvasive-ways-to-instantly-boost-your-python-code-performance-b21cd823f37e&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@chuttersnap?utm_source=medium&utm_medium=referral", "anchor_text": "chuttersnap"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://en.wikipedia.org/wiki/Set_(mathematics)", "anchor_text": "unions, intersections, complements, and symmetric differences"}, {"url": "https://en.wikipedia.org/wiki/Monte_Carlo_method", "anchor_text": "Monte Carlo simulation"}, {"url": "https://en.wikipedia.org/wiki/Hash_function", "anchor_text": "hashed"}, {"url": "https://en.wikipedia.org/wiki/Prime_number_theorem", "anchor_text": "Prime Number Theorem"}, {"url": "https://unsplash.com/@carolineattwood?utm_source=medium&utm_medium=referral", "anchor_text": "Caroline Attwood"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://docs.python.org/3/library/concurrent.futures.html", "anchor_text": "just check this out"}, {"url": "https://en.wikipedia.org/wiki/Primality_test", "anchor_text": "better ways to check if a number is prime"}, {"url": "https://en.wikipedia.org/wiki/Fibonacci_number#Closed-form_expression", "anchor_text": "closed formula"}, {"url": "https://en.wikipedia.org/wiki/Bubble_sort", "anchor_text": "Bubble Sort"}, {"url": "https://en.wikipedia.org/wiki/Quicksort", "anchor_text": "Quicksort"}, {"url": "https://dr-robert-kuebler.medium.com/membership", "anchor_text": "via this link"}, {"url": "https://www.linkedin.com/in/dr-robert-k%C3%BCbler-983859150/", "anchor_text": "LinkedIn"}, {"url": "https://medium.com/tag/programming?source=post_page-----b21cd823f37e---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/python?source=post_page-----b21cd823f37e---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/parallel-computing?source=post_page-----b21cd823f37e---------------parallel_computing-----------------", "anchor_text": "Parallel Computing"}, {"url": "https://medium.com/tag/performance?source=post_page-----b21cd823f37e---------------performance-----------------", "anchor_text": "Performance"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----b21cd823f37e---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb21cd823f37e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-easy-and-noninvasive-ways-to-instantly-boost-your-python-code-performance-b21cd823f37e&user=Dr.+Robert+K%C3%BCbler&userId=6d6b5fb431bf&source=-----b21cd823f37e---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb21cd823f37e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-easy-and-noninvasive-ways-to-instantly-boost-your-python-code-performance-b21cd823f37e&user=Dr.+Robert+K%C3%BCbler&userId=6d6b5fb431bf&source=-----b21cd823f37e---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb21cd823f37e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-easy-and-noninvasive-ways-to-instantly-boost-your-python-code-performance-b21cd823f37e&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----b21cd823f37e--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fb21cd823f37e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-easy-and-noninvasive-ways-to-instantly-boost-your-python-code-performance-b21cd823f37e&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----b21cd823f37e---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----b21cd823f37e--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----b21cd823f37e--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----b21cd823f37e--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----b21cd823f37e--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----b21cd823f37e--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----b21cd823f37e--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----b21cd823f37e--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----b21cd823f37e--------------------------------", "anchor_text": ""}, {"url": "https://kuebler.ai/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://kuebler.ai/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Dr. Robert K\u00fcbler"}, {"url": "https://kuebler.ai/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "3K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6d6b5fb431bf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-easy-and-noninvasive-ways-to-instantly-boost-your-python-code-performance-b21cd823f37e&user=Dr.+Robert+K%C3%BCbler&userId=6d6b5fb431bf&source=post_page-6d6b5fb431bf--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F11fae4bef4b2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3-easy-and-noninvasive-ways-to-instantly-boost-your-python-code-performance-b21cd823f37e&newsletterV3=6d6b5fb431bf&newsletterV3Id=11fae4bef4b2&user=Dr.+Robert+K%C3%BCbler&userId=6d6b5fb431bf&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}