{"url": "https://towardsdatascience.com/the-one-with-all-the-friends-analysis-59dafcec19c5", "time": 1683000361.02824, "path": "towardsdatascience.com/the-one-with-all-the-friends-analysis-59dafcec19c5/", "webpage": {"metadata": {"title": "The One with all the FRIENDS Data Analysis | by Yusuf Sohoye | Towards Data Science", "h1": "The One with all the FRIENDS Data Analysis", "description": "FRIENDS is one of my favourite shows (probably the favourite) and I\u2019m sure I\u2019m not alone in having rewatched the entire series more than once. I\u2019ve always wondered if there was anything left to know\u2026"}, "outgoing_paragraph_urls": [{"url": "http://giorasimchoni.com/2017/06/04/2017-06-04-the-one-with-friends/", "anchor_text": "this post using R", "paragraph_index": 0}, {"url": "https://fangj.github.io/friends/", "anchor_text": "this repository", "paragraph_index": 0}, {"url": "https://medium.com/front-end-weekly/a-practical-beginners-guide-to-regex-regular-expressions-2faccbda117d", "anchor_text": "here", "paragraph_index": 4}, {"url": "https://regex101.com/r/GFOGbq/2", "anchor_text": "test it out for yourself", "paragraph_index": 5}, {"url": "https://quotennial.github.io/loveisland/", "anchor_text": "this blog post", "paragraph_index": 9}, {"url": "https://sqlitebrowser.org", "anchor_text": "DB Browser for SQLite", "paragraph_index": 10}, {"url": "https://quotennial.github.io/friends-analysis/", "anchor_text": "this article", "paragraph_index": 11}, {"url": "https://redditblog.com/2015/10/24/an-actual-paleontologist-grades-friends-paleontologist-ross-gellar/", "anchor_text": "aren\u2019t convinced", "paragraph_index": 21}, {"url": "https://youtu.be/5-1-W-qH6Fc?t=253", "anchor_text": "cost him his marrige", "paragraph_index": 26}, {"url": "https://github.com/fengwangPhysics/matplotlib-chord-diagram/blob/master/matplotlib-chord.py", "anchor_text": "this fucntion", "paragraph_index": 27}, {"url": "https://www.youtube.com/watch?v=9vs1zSqd070", "anchor_text": "Eigenvector Centrality", "paragraph_index": 29}, {"url": "https://quotennial.github.io", "anchor_text": "https://quotennial.github.io", "paragraph_index": 33}], "all_paragraphs": ["FRIENDS is one of my favourite shows (probably the favourite) and I\u2019m sure I\u2019m not alone in having rewatched the entire series more than once. I\u2019ve always wondered if there was anything left to know about this oh-so familiar group. After seeing this post using R to look at the show, I thought I would give it a go myself. This post dives into the show\u2019s scripts to find out more, including the most popular characters and their journey through the seasons. But first it will introduce methods to format and export text files into a SQLite database using Python. The text files used in this projects contain scripts from the T.V. show F.R.I.E.N.D.S. and was downloaded from this repository. Then provide some interesting findings about the characters we know so well, some expected and some surprising! It has been a really enjoyable hobby project and one I have been wanting to do for a while. Feel free to skip the coding bits and jump to the visualisations, hope you enjoy it!", "Each script is a text file containing some information about the episode, the title, writers and transcribers before the script actually starts. We need to find a way to turn a script into rows in a database and then work out how to do this for multiple scripts.", "We will start trying to iterate through the scripts. They are stored in multiple text files and helpfully titled using the format season.episode. We can utilise the OS library in python to navigate through our text files.", "As it stands, the code below will iterate through all the files in our scripts folder to obtain the filename. This filename is then split using the . separator and those numbers are stored in variables to be appended to the master list. The master_list is created as eventually we will want to store the results in a DataFrame.", "Now we know how to move through our FRIENDS files, we need to see how to isolate the lines from each file. To do so I will be using regular expressions, the scripts are quite messy and all formatted differently depending on the transcriber. The pertinent pattern is character_name: speech however this can sometimes span multiple lines. Regular Expressions is like a really powerful ctrl-F, they are used to search for patterns in strings, a nice intro on can be found here. The aim of our regular expression is to match the space before our intended line as indicated by the pink dots. We aim to find this space as we can then split the whole file using these positions, giving us groups of character-speech pairs.", "The regular expression used is shown below. First we mathc the string before a colon \\w+(?=:), so now we have \"found\" the names of each character. However if we want to match the space before we must use \\s. You can test it out for yourself, as you can see in the example, the regular expression also matches the space before the writers and transcribers, this will need to be removed after. Now we implement the regular expression in python. In the below code we are also able to split the character name and the speech.", "This is combined with our loop in the previous section and the mater_array is converted to a pandas data frame:", "Despite our best efforts, the results are still not 100% ready for analysis. Our first issue is that there are multiple names for each character, this can be seen by executing sorted(df['char'].unique()), this will return a list of all unique values in the column. To rectify this takes some manual work which involves looking at the multiple spellings of a certain name, case sensitive! To change the names we use the pandas replace method:", "Now we need to address the issues caused by our regular expression, as it caught the authors and transcribers. The format of these lines all end in by. Therefore the regular expression takes the last word before the colon as the character name. This means we can drop all of these rows by removing the character by. Bye by.", "Sentiment analysis is on the table when dealing with strings, a more in-depth discussion can be found in this blog post. Similar methods are used, for each line in the database a sentiment score is calculated and stored in the line_sent column:", "Now this may not be a necessary step as most of the SQL commands we would be using could be done using pandas. However, I think sometimes altering different data frame scan sometimes get messy and SQL language may provide a ore readable way to access this data. Therefore we are now going to move the pandas dataframe into a SQL database. I am using DB Browser for SQLite.", "Finally our scripts are formatted and placed in a SQL database. Data wrangling in this way can transform raw data into a more useful data set. Even though we are not adding too much to the data set, the different organisational structure can enable a wider breadth of analysis. Now we have the scripts formatted in this way, we can utilise SQL to gain further insights into the show as carried out in this article.", "This section looks at each character\u2019s role in the show. The previous post walked through the process of putting the data into a SQL database. This was in order to make a query like \u201cwho had the most number of lines during the whole series\u201d fairly simple:", "Rachel just edges the top spot with 9294 lines over the entire series Ross coming in a very close second (9070), both averaging around 39-ish lines per episode. This isn\u2019t entirely a shock, as they were both the main plot throughout 10 seasons. Almost inseparable are Monica and Chandler, 8403 and 8398 respectively.", "A look at the number of lines breakdown throughout the series confirms this pattern, we can see Ross and Rachel dominating the lines until around Season 4. This is when the London episodes happen and Chandler and Monica have a bigger joint story, translating in more lines. I think it is a shame Phoebe never got more lines, staying rooted at around 800 lines per season. Rachel did say it:", "Ugh, it was just a matter of time before someone had to leave the group. I just always assumed Phoebe would be the one to go. \u2014 Rachel 5.05", "Being the one doing the most talking does not necessarily mean you\u2019re the most popular, so now we will take a look at who\u2019s talked about the most. This is a pretty difficult task to accurately capture all mentions of each character. A possible solution is a list of nicknames for each character (let me know if I have missed any out!). It\u2019s pertinent to note, this is the method we will use to find any reference to each character throughout this post, using the nicknames detailed below.", "In order to get the count, we first iterate through the characters, keeping a count of the mentions. Using a nested for-loop to get each characters nickname, we use the pandas count() method to keep a tally of the number of mentions.", "When using only full names, Ross is the most mentioned. \u201cChan\u201d, \u201cJoe\u201d, \u201cMon\u201d and \u201cRach\u201d are all mentioned more than their full names. This supports the decision to include the nicknames but does also highlight how sensitive the results are to picking the right names.", "There are a few running catchphrases, for example \u201cSmelly Cat \u201c was mentioned 37 times throughout the whole show. The infamous \u201cWe were on a break\u201d line was referred to 17 times. And Joey\u2019s pick up line \u201cHow you doin\u2019\u201d was said 37 times.", "Another interesting aspect to look at is the lexicon of words each character uses. This is done by first selecting all the lines said by the main characters as shown above. After which all non alphabetical characters are removed. Every line by each characters is then split into words (using the space in between to split) and added to a set. A set allows no repeated values which is perfect for our use in this case.", "Unsurprisingly Ross tops the list his passion for dinosaurs is a running joke throughout the series. Despite his career, starting off at the New York Museum of Prehistoric History and then professor at New York University, some real-life paleontologists aren\u2019t convinced. I\u2019m sure I\u2019m not the only one surprised to see Joey in not-last-place. Given the role\u2019s stereotypical caricature it appears Joey does have a couple of words up his sleeve, even if they are made up!", "As we have calculated a sentiment score for each line, we are able to monitor this score throughout the course of a season.", "The chart above shows tracks the sentiment for Rachel and Ross throughout the first 2 seasons. Total sentiment score per episode is calculated, as the scores range in-between -1 to 1 the total will give an indication of the majority of sentiment throughout a particular episode.", "Episode 104 is where Rachel gets her first paycheck, may be the cause of such positive sentiment as is episode 117 with a guest appearance from George Clooney. Ross really experiences the highs and lows throughout the first episodes, finding out he was having a boy in episode 112 before saying bye to marcel in episode 121. Before finally, both characters show a spike on episode 207, The One where Ross Finds Out and a conflicted Ross finds out Rachel has feelings for him. This may be why Ross\u2019 overall sentiment for that episode was \u201cmuted but positive\u201d.", "So far we have mostly looked at out FRIENDS isolation, here we will see how they interact. Looking at how many times a character mentions another characters name the show so we can draw networks relating each character to another. The table below shows the results; read from left to right tells us that Rachel mentioned herself 187 times and mentioned Joey the most: 739 times. Read from top to bottom can be understood as Rachel mentioned Chandler 321 times, Ross mentioned him 332 times and his wife (Monica) mentioned him the most: 622.", "The table throws up some interesting findings, Rachel was mentioned the most by Ross (622, and one cost him his marrige ) and Ross was mentioned by Rachel the most: 550. Interestingly, although Monica says chandler the most, Chandler says Joey the most.", "The table does provide some insight but it isn\u2019t the most ascetically pleasing way to look at the findings. So we can create a chord diagram using this fucntion provided on Github. The size of the chords for each characters section represents how many times they said the connecting characters name. In other words, if you were to read the values from left to right in the table, that is what each characters portion shows. This makes it clearer just how much both Joey and Monica occupy Chandler\u2019s mentions by looking at the pink slice.", "So we have now built a network of FRIENDS we can calculate a centrality score for each of them. Centrality aims to answer the question: Who is the most important or central person in this network?. Obviously this is a subjective question depending on the definition of importance. Before we define our measure of importance, we must first convert our table into a graph. We will use network x to create a directed, weighted graph using the values in the table above (stored in network_data). Nodes are the characters and the weights are the number of mentions. We can also check the graph has been created correctly by checking the edge weights between nodes.", "Now we have created our graph, we calculate the Eigenvector Centrality as a measure of importance (used in Google\u2019s page rank). This algorithm aims quantify influence of people in a social network, based on connections with important people. In this case we are defining \u201cimportance\u201d as connections with important people. With an emphasis on links with other people, it is easy to see how this may be applied to other larger networks such as Twitter. Using \u201cinteractions\u201d (retweets and likes) as weights, this algorithm may be able to give you the most connected accounts in a network, potentially gaining more insight than a count of the highest number of followers. Valuable information for anyone looking to gauge (or alter) public opinion.", "Networkx makes life easy, apply the eigenvector_centrality_numpy method and define the weights to calculate the scores for each node. The result in order of importance is shown below. I was surprised upon initially looking at the results, however when I thought about the measure it started to make sense. I think Joey could be seen as the glue of the group, always interacting with the other characters. To see Ross and Rachel at the lower end isn't entirely surprising given that they occupy most of each others time. This post hasn't been great for Phoebe \ud83d\ude41 \u200b .These results are subjective, as as is the interpretation and I would love to hear what you think about the centrality scores.", "I hope you enjoyed this alternative view on the popular show. Whilst I understand FRIENDS may not be everyone\u2019s cup of tea I do think this kind of analysis can be applied to almost any long running series. Maybe you could try out something similar for your favourite show and let me know what you find!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data, people, places and pop culture. Blog: https://quotennial.github.io"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F59dafcec19c5&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-with-all-the-friends-analysis-59dafcec19c5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-with-all-the-friends-analysis-59dafcec19c5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-with-all-the-friends-analysis-59dafcec19c5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-with-all-the-friends-analysis-59dafcec19c5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----59dafcec19c5--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----59dafcec19c5--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@yusufsohoye?source=post_page-----59dafcec19c5--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@yusufsohoye?source=post_page-----59dafcec19c5--------------------------------", "anchor_text": "Yusuf Sohoye"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9d60a2844fe8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-with-all-the-friends-analysis-59dafcec19c5&user=Yusuf+Sohoye&userId=9d60a2844fe8&source=post_page-9d60a2844fe8----59dafcec19c5---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F59dafcec19c5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-with-all-the-friends-analysis-59dafcec19c5&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F59dafcec19c5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-with-all-the-friends-analysis-59dafcec19c5&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://wall.alphacoders.com/tags.php?tid=38393&lang=Portuguese", "anchor_text": "source"}, {"url": "http://giorasimchoni.com/2017/06/04/2017-06-04-the-one-with-friends/", "anchor_text": "this post using R"}, {"url": "https://fangj.github.io/friends/", "anchor_text": "this repository"}, {"url": "https://medium.com/front-end-weekly/a-practical-beginners-guide-to-regex-regular-expressions-2faccbda117d", "anchor_text": "here"}, {"url": "https://regex101.com/r/GFOGbq/2", "anchor_text": "test it out for yourself"}, {"url": "https://gfycat.com/gifs/search/monica+clean", "anchor_text": "gfycat"}, {"url": "https://quotennial.github.io/loveisland/", "anchor_text": "this blog post"}, {"url": "https://sqlitebrowser.org", "anchor_text": "DB Browser for SQLite"}, {"url": "https://quotennial.github.io/friends-analysis/", "anchor_text": "this article"}, {"url": "https://tenor.com/search/brand-new-information-gifs", "anchor_text": "tenor"}, {"url": "https://giphy.com/gifs/Friends-season-2-friends-tv-S9ndPlQlnSnqvGMMZv", "anchor_text": "giphy"}, {"url": "https://tenor.com/view/joey-friends-wisdomous-gif-7498897", "anchor_text": "tenor"}, {"url": "https://redditblog.com/2015/10/24/an-actual-paleontologist-grades-friends-paleontologist-ross-gellar/", "anchor_text": "aren\u2019t convinced"}, {"url": "https://youtu.be/5-1-W-qH6Fc?t=253", "anchor_text": "cost him his marrige"}, {"url": "https://gfycat.com/gifs/search/joey+e", "anchor_text": "gfycat"}, {"url": "https://github.com/fengwangPhysics/matplotlib-chord-diagram/blob/master/matplotlib-chord.py", "anchor_text": "this fucntion"}, {"url": "https://www.youtube.com/watch?v=9vs1zSqd070", "anchor_text": "Eigenvector Centrality"}, {"url": "https://quotennial.github.io/friends-analysis/", "anchor_text": "https://quotennial.github.io/friends-analysis/"}, {"url": "https://medium.com/tag/data-science?source=post_page-----59dafcec19c5---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/data-visualization?source=post_page-----59dafcec19c5---------------data_visualization-----------------", "anchor_text": "Data Visualization"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----59dafcec19c5---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F59dafcec19c5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-with-all-the-friends-analysis-59dafcec19c5&user=Yusuf+Sohoye&userId=9d60a2844fe8&source=-----59dafcec19c5---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F59dafcec19c5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-with-all-the-friends-analysis-59dafcec19c5&user=Yusuf+Sohoye&userId=9d60a2844fe8&source=-----59dafcec19c5---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F59dafcec19c5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-with-all-the-friends-analysis-59dafcec19c5&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----59dafcec19c5--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F59dafcec19c5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-with-all-the-friends-analysis-59dafcec19c5&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----59dafcec19c5---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----59dafcec19c5--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----59dafcec19c5--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----59dafcec19c5--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----59dafcec19c5--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----59dafcec19c5--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----59dafcec19c5--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----59dafcec19c5--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----59dafcec19c5--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@yusufsohoye?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@yusufsohoye?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Yusuf Sohoye"}, {"url": "https://medium.com/@yusufsohoye/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "21 Followers"}, {"url": "https://quotennial.github.io", "anchor_text": "https://quotennial.github.io"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9d60a2844fe8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-with-all-the-friends-analysis-59dafcec19c5&user=Yusuf+Sohoye&userId=9d60a2844fe8&source=post_page-9d60a2844fe8--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2F9d60a2844fe8%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-with-all-the-friends-analysis-59dafcec19c5&user=Yusuf+Sohoye&userId=9d60a2844fe8&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}