{"url": "https://towardsdatascience.com/visualization-with-plotly-express-comprehensive-guide-eb5ee4b50b57", "time": 1683015201.332324, "path": "towardsdatascience.com/visualization-with-plotly-express-comprehensive-guide-eb5ee4b50b57/", "webpage": {"metadata": {"title": "Visualization with Plotly.Express: Comprehensive guide | by Vaclav Dekanovsky | Towards Data Science", "h1": "Visualization with Plotly.Express: Comprehensive guide", "description": "A detailed guide on how to create many visualizations with Plotly Express with layout styling, interactivity, animations, and many chart types."}, "outgoing_paragraph_urls": [{"url": "https://plotly.com/python/plotly-express/", "anchor_text": "Plotly.Express", "paragraph_index": 1}, {"url": "https://medium.com/plotly/introducing-plotly-express-808df010143d", "anchor_text": "version 4.0.0", "paragraph_index": 1}, {"url": "https://github.com/vaclavdekanovsky/data-analysis-in-examples/blob/master/Vizualizations/Plotly/Comperhansive%20Guide/Plotly%20Express%20-%20Comprehensive%20Guide.ipynb", "anchor_text": "Plotly Express \u2014 Comprehensive Guide.ipynb", "paragraph_index": 2}, {"url": "https://plotly.com/python/getting-started/#jupyterlab-support-python-35", "anchor_text": "jupyterlab-plotly", "paragraph_index": 5}, {"url": "https://www.python.org/dev/peps/pep-0008/#maximum-line-length", "anchor_text": "PEP8", "paragraph_index": 6}, {"url": "https://data.worldbank.org/indicator/ST.INT.ARVL", "anchor_text": "visiting", "paragraph_index": 9}, {"url": "https://data.worldbank.org/indicator/ST.INT.RCPT.CD", "anchor_text": "money they spent on their vacation", "paragraph_index": 9}, {"url": "https://datacatalog.worldbank.org/public-licenses#cc-by", "anchor_text": "CC-BY 4.0 license", "paragraph_index": 9}, {"url": "https://github.com/vaclavdekanovsky/data-analysis-in-examples/blob/master/Vizualizations/Plotly/Preprocess/Preprocessing.ipynb", "anchor_text": "see code", "paragraph_index": 10}, {"url": "https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.T.html", "anchor_text": "DataFrame.T", "paragraph_index": 11}, {"url": "https://pandas.pydata.org/docs/reference/api/pandas.melt.html", "anchor_text": "melt()", "paragraph_index": 11}, {"url": "https://pandas.pydata.org/docs/reference/api/pandas.pivot.html", "anchor_text": "pivot()", "paragraph_index": 11}, {"url": "https://pandas.pydata.org/docs/reference/api/pandas.pivot_table.html", "anchor_text": "pivot_table()", "paragraph_index": 11}, {"url": "https://medium.com/plotly/beyond-tidy-plotly-express-now-accepts-wide-form-and-mixed-form-data-bdc3e054f891", "anchor_text": "Beyond \u201ctidy\u201d", "paragraph_index": 11}, {"url": "https://github.com/vaclavdekanovsky/data-analysis-in-examples/blob/master/Vizualizations/Plotly/Comperhansive%20Guide/Plotly%20Express%20-%20Comprehensive%20Guide.ipynb", "anchor_text": "Github", "paragraph_index": 11}, {"url": "https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html", "anchor_text": "padnas.Series", "paragraph_index": 14}, {"url": "https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.T.html", "anchor_text": "pandas.DataFrame.T", "paragraph_index": 14}, {"url": "https://plotly.com/python/styling-plotly-express/", "anchor_text": "styling guide", "paragraph_index": 35}, {"url": "https://plotly.com/python/reference/layout/yaxis/", "anchor_text": "python", "paragraph_index": 41}, {"url": "https://towardsdatascience.com/highlighted-line-chart-with-plotly-express-e69e2a27fea8", "anchor_text": "Highlighted line chart", "paragraph_index": 46}, {"url": "https://en.wikipedia.org/wiki/WebGL", "anchor_text": "WebGL format", "paragraph_index": 47}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.bar.html", "anchor_text": "bar chart API documentation", "paragraph_index": 52}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.pie.html", "anchor_text": "docs", "paragraph_index": 69}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.choropleth.html", "anchor_text": "documentation,", "paragraph_index": 75}, {"url": "https://towardsdatascience.com/pythons-geocoding-convert-a-list-of-addresses-into-a-map-f522ef513fd6", "anchor_text": "geography", "paragraph_index": 76}, {"url": "https://www.statsmodels.org/stable/install.html", "anchor_text": "statsmodel", "paragraph_index": 80}, {"url": "https://plotly.com/python/custom-buttons/#methods", "anchor_text": "documentation", "paragraph_index": 85}, {"url": "https://github.com/vaclavdekanovsky/data-analysis-in-examples/blob/master/Vizualizations/Plotly/Comperhansive%20Guide/Plotly%20Express%20-%20Comprehensive%20Guide.ipynb", "anchor_text": "github", "paragraph_index": 86}, {"url": "https://plotly.com/python/custom-buttons/#methods", "anchor_text": "Plotly\u2019s documentation", "paragraph_index": 86}, {"url": "https://plotly.github.io/plotly.py-docs/generated/plotly.io.write_html.html", "anchor_text": "documentation", "paragraph_index": 92}, {"url": "https://plotly.com/", "anchor_text": "lower level API", "paragraph_index": 106}, {"url": "https://plotly.com/dash/", "anchor_text": "Dash", "paragraph_index": 107}, {"url": "https://github.com/vaclavdekanovsky/data-analysis-in-examples/blob/master/Vizualizations/Plotly/Comperhansive%20Guide/Plotly%20Express%20-%20Comprehensive%20Guide.ipynb", "anchor_text": "Plotly Express \u2014 Comprehensive Guide.ipynb", "paragraph_index": 108}], "all_paragraphs": ["I frequently come up with an ideal visualization and then struggle to code it. It would be to the point, expressive, and easy to interpret, but it\u2019s impossible to create. When I found Plotly it made plotting, well, much easier.", "Plotly.Express, first introduced in version 4.0.0 is a high-level abstraction to Plotly API optimized to work perfectly with data frames. It\u2019s very good, though not flawless. I see the biggest gap in the number of examples or links to the API documentation. That\u2019s why I have decided to use my experience with the library to write a guide.", "To run the chart and exercises, please use the Plotly Express \u2014 Comprehensive Guide.ipynb notebook on Github. All the code in this article is in python.", "Plotly.Express is a regular part of the Plotly python package, so the easiest is to install it all.", "Plotly Express also requires pandas to be installed, otherwise, you will get this error when you try to import it.", "There are additional requirements if you want to use the plotly in Jupyter notebooks. For Jupyter Lab you need jupyterlab-plotly. In a regular notebook, I had to install nbformat (conda install -c anaconda nbformat)", "Plotly.Express offers shorthand syntax to create many chart types. Each comes with different parameters and understanding the parameters is the key to Plotly.Express charm. You can create most of the charts with one command (many advertisers say one line, but due to PEP8 recommending up to 79 characters per line, it\u2019s usually longer).", "To create a chart with Plotly.Express you only type px.chart_type (many types will be introduced later). This function consumes a dataframe with your data df and the parameters of the chart. Some parameters are chart specific, but mostly you input x and y values (or names and values e.g. in the case of pie chart). You label the datapoints with text and split into categories (separate lines, bars, pie\u2019s sectors) by color, dash or group. Other parameters let you influence the colors, split to subplots (facets), customize the tooltips, scale and range of the axes and add animations.", "Mostly you assign the plot into a variable so that you can influence the setup of the graph elements and the layout.", "Even though plotly comes with some integrated datasets, they were used in many existing examples, so I\u2019ve picked my favorite dataset about the number of tourists visiting each country and the money they spent on their vacation. The dataset is available by World Bank under CC-BY 4.0 license.", "As with every dataset, even this one needs some pre-processing. What is very annoying about the tourism dataset is that it mixes values per country with regional aggregates. The pre-processing is simple (see code) and it\u2019s important to say that the dataset comes in a wide form.", "All data frames can be transformed into many forms. A data table can be wide with information stored in many columns or long with data in rows. Luckily python and pandas library allows converting between these with ease using DataFrame.T to turn rows into columns, melt() for melting columns into long data frame and pivot() and pivot_table() to do the opposite. Nicolas Kruchten explains it well that in his Beyond \u201ctidy\u201d article, so I\u2019ll not spend more time discussing it here. You can also see all the data operations in the commented notebook on the Github.", "Plotly.Express works the best with the long data. It\u2019s designed to accept one column as a parameter. Categorical columns influence the elements (lines, bars \u2026) and can be differentiated by styles while value columns affect the size of the elements and can be displayed as labels and in tooltips.", "You can use Plotly express with wide data as well, but the use-cases are limited. Let\u2019s explore what you can do with the wide dataset and its limits.", "The first parameters are almost the same for all the charts \u2014 the dataset, x and y. X and y can be the names of the columns in the dataframe, padnas.Series or an array. Our tourism dataset comes in the wide form with many columns. Since we have years as columns and Country Names as rows, we switch between them using pandas.DataFrame.T because Plotly.Express API works with columns.", "Below, the three ways to draw a chart are equivalent. Check yourself, but I think the first one makes the most sense. If you use a column or a series, its name appears as an axis label, while in the case of an array you must add the label manually.", "Having a dataset which contains several descriptive columns Country Name, Country Code, Region, mixed with data columns like visits in 1995, 1996 \u2014 2018 shows one of the benefits of Plotly. It\u2019s clever enough to consider only the columns with values and silently ignores the rest.", "You can easily pick multiple columns to your chart.", "In Plotly, you can do some operations with a dataset containing many columns, but the real power of the library lies in the long data. The reason, most of the parameters accept exactly one column. It can have several distinct (usually categorical) values and plotly do its magic on them, but there cannot be more than one column. The following code leads to an error:", "You can try to pick one of the columns, but the result is a complete fail. Line charts for Italy and France annotated with the values about visitors to Spain. A catastrophe.", "There\u2019s nothing wrong with Plotly. To exploit the parameters you must use a long data frame. From a wide dataset, you get it using .melt() function. I\u2019ll also filter only 3 countries not to have the chart too crowded.", "Assigning a single column to each parameter let plotly determine the rest:", "Let\u2019s explore the basic line chart to admire how easily you can create visualizations with Plotly. Each Plotly\u2019s chart is documented in several places:", "In the previous section, you have seen that a line chart needs x and y values which can come in three forms, but the most common for Express is to use the column name to specify which data frame\u2019s column control the graph\u2019s functionality.", "color \u2014 is the key parameter for many chart types. It splits the data into groups and assigns them distinct colors. Each of the groups forms an element, in the case of a line chart, it\u2019s a separate line. The colors are assigned to each line unless you set the exact colors using the following parameters.", "color_discrete_sequence \u2014 to choose pre-defined colors of the lines, e.g. color_discrete_sequence = [\"red\",\"yellow\"]. If you provide fewer colors than the number of your series, Plotly will assign the rest automatically.", "color_discrete_map \u2014 allowing the same as above but in the form of a dictionary assigning color to a specific series. color_discrete_map = {\"Spain\":\"Black\"}.", "line_dash \u2014 similar to color it only changes the dash pattern instead of color", "line_group \u2014 similar to color, it\u2019s used to distinguish the value (category) which separates the lines, but in this case, all will have the same color and no legend will be created for them.", "Plotly inherently brings interactive tooltips. Above you can see that you can switch between closest and all data tooltips. There are also parameters to customize these textboxes even more \u2014 hover_name highlights the value of this column on the top of the tooltip. hover_data allow to True/False the categories or values which should appear on the tooltip. labels param let you rename these categories.", "We have created 3 lines with different colors per country. Changing thecolor parameter to facet_col or facet_row to creates 3 separate charts. Keeping both the facet and the color ensures that each line has a distinct color. Otherwise, it would be the same. You can zoom into one of the plots and others will zoom too.", "Faceted subplots are also the only way how to create subplots with Plotly.Express. Unfortunately, you cannot just create a line chart on the top of a bar chart with Express. You need Plotly\u2019s lower-level API.", "range_x and range_y parameters allow to zoom into the chart. You can always use the interactive controllers to see the full range of data.", "log_x and log_y set to True will change these axes to be log-scaled in cartesian coordinates.", "And finally, we\u2019re getting to the parameters which made plotly.Express popular. The animations. The parameter animation_frame points to a column that is used to differentiate the animation frames. I had to update the dataset a bit to create this animation. Column years_upto contains all the historical data. See the notebook on the github for more info.", "Before we move to introducing a whole range of Plotly chart types, let\u2019s explore basic techniques on how to update the axes, legend, titles, and labels. Plotly prepared a styling guide, but many chart types allow just some styling options which are hard to figure out from the documentation.", "Every plotly chart is a dictionary", "On background, each graph is a dictionary. You can store the chart into a variable, commonly fig and display this dictionary using fig.to_dict().", "Thanks to that you can update the chart using 3 ways.", "Each of them gets tricky sometimes because you have to really dig into the documentation to understand some of the parameters. Each of the parameters can be updated using 4 different ways.", "The easiest way to style the chart is by using pre-defined templates. Plotly comes with several build-in templates including plotly_white, plotly_dark, ggplot2, seaborn or your can create your own template.", "We can update the other parameters one by one. Looking just on axes for 2D charts with 2-dimensional Cartesian axes, you have many options for what to change (see plotly python). Let\u2019s look at the most important.", "One cool option for the x-axis is the range slider. You set it up using fig.update_xaxes(rangeslider_visible=True) and it highlights the part of the plot you zoom in. It\u2019s very useful with the time series.", "Later I\u2019ll broach some pitfalls with the ticks and the difference between a category and linear mode, but now, let\u2019s move on and have a look at another important feature used to highlight key ares of the chart.", "Adding specific text into the chart is called annotating. There are several basic use cases of annotation:", "We will show all 4 practices in the following image. We label the start point value outside of the chart, annotate a breakpoint, place a message about tourism growth and legend the lines on their right end.", "The chart above was tricky. Plotly orders the lines in the order of appearance, so the data had to be sorted. Also Express struggle a bit with assigning color from the long dataframes (I know I was saying that long dfs are the ideal solution, they are not 100%), so I had to do little magic you can study in this gist or read the detailed guideline in Highlighted line chart article.", "You might also notice, that with increased number of lines, Plotly automatically switched to WebGL format proven to improve the usability of the JavaScript plots with many data points.", "Regarding the annotations, you have several options on how to influence their positions. You set all the annotations as a list in .fig.update_layout(..., annotations=[]) It contains a list of dictionaries specifying the parameters of the labels:", "You can specify the position, font, and an arrow between the label and the data point. The coordinates x and y of the text can either refer to the plot or the paper-canvas. \"xref\"=\"paper\" (0,0) is the bottom left corner of the plot area and (1,1) is the top right corner. Within the chart, you reference using the x and y values on the axis (e.g. year 2008 and 10_000_000 visitors).", "The position also depends on the anchor (top-middle-bottom, left-center-right), offsets and adjustments. Each annotation can be modified by setting its font or HTML tags can be applied on the text like <b> or <i>.", "Now when we know how to create a chart, update its layout, and include annotation, let\u2019s explore another typical chart types. We will start with the bar chart which is another popular method of how to display trends and compare numbers in categories. The syntax remains the same one-liner:", "The bar chart API documentation describes all the parameters. Most of the parameters are the same as for the line chart.", "There are three types of modes bar chart comes in. Relative which stacks the bars on the top of each other. overlay drawing bars on the top of one another with lower opacity and group for clustered columns.", "Like lines, the bars can be colored to make an impactful visualization. You can use color parameter set to a category (e.g. Country Name) to color each bar with a different color from a palette or setting color to a value (e.g. visitors) to differentiate the color by the scale of a tourist visit.", "All the bars can have the same color with color_discrete_sequence and you can apply different color based on the the scale \u2014 number of visitors in our case using color_continuous_scale.", "One thing Plotly.Express is really bad in are charts with combined types. You can somehow add bars to the line chart, but you cannot do the opposite. And the result, yeah, make your own opinion.", "If you want to shine with some mixed typed graph, use lower level API of Plotly. That can do much more than Express, but the code is longer.", "Parameter animation_frame let you do the animation magic. But it\u2019s not all gold that glitters. You have to set up the same range for all frames [0\u2013100M], but the chart is still jumping, because despite y-axisstandoff to make there enough space, longer country names still move the chart. Also, the labels which were originally outside of the bars got inside them on the second animation frame. It would require a bit more customization to be perfect.", "A histogram is technically a bar chart without gaps between the bars. The power of the histogram is that it automatically splits the data into bins and aggregate the values in each bin. But it doesn't do it very well (yet).", "Histograms use similar parameters like bar charts. You can split the bins by categories using color.", "Histograms also have their own parameters. nbins influence the number of bins.", "Histfunc allow changing the aggregation function. Of course, when you do average, min or max on the bin between 10 and 20, the values will lie inside this range, so such a histogram will create a stair pattern.", "You can also create a cumulative histogram by setting cumulative=True.", "Barnorm let you normalize the values in each bin to be between 0\u2013100%. Barnorm parameter normalizes in each bin, so the values 10, 40, 50 forms 10%, 40% and 50% while 100, 400 and 500 create the chart of the same height also being 10%, 40% and 50%. You have the option to display percent with barnorm=\"percentage\" or decimal numbers with barnorm=\"fraction\".", "Histnorm parameter is very similar, but the normalization is not inside one bin, but for each category across all the bins. If your category A appears twice within the first bin, 5 times in the second bin and 3 times in the last one, the histnorm will be 20%, 50% and 30%.", "The specific parameter to the histogram (and the scatter plots) is a marginal chart. It let you create a small side chart showing details of the distribution of the underlying variable. There are four types of marginal charts \u2014 rug, histogram, box and violin creating the side plots with the same name.", "Quite often you need more control over the binning and you rather calculate the bins yourself and plot them using px.bar with fig.update_layout(bargap=0).", "Another option how to achieve a great visualization is to use the pie chart.", "When you read the docs you will learn that pie chart doesn\u2019t have x and y axes but names and values.", "One of the cool things is that you can pull some slices of the plot to highlight them. It\u2019s not a parameter of the .pie() but you can add it using fig.update_traces(). Text configuration of the traces also allows to set up the labels as percent, value or label (or any combination of the three e.g. fig.update_traces(textinfo=\"percent+label\"))", "Pie chart is a bit playful and using hole param you can turn it into a donut chart. Like all the previous charts when you interact with the labels, it recalculates the values.", "Very similar to pie chart is sunburst plot. It can display several layers of data. E.g. in our case a region and countries in the region. When you click on any \u201cparent\u201d you get the details for just that region. You can create the plot by inputting names, values, parents or like in the case below:", "If pie and sunburst charts are hard to read when you display a lot of data, the opposite is true for the treemap. You can play with the color and assign either a discrete scale based on a categorical column or a continuous scale.", "We are looking at the data about the world and using maps is an obvious choice on how to display them. Plotly has some support for displaying geospacial data with build-in country shapes, regional scopes, and options to adapt the colors and other parameters.", "Based on the documentation, the countries are identified by ISO-3 Code, country name or US-State names. If you want to dig deeper you have to get your own geojson coordinates of the geographical obejcts.", "Scatter plots are one of the most common types of plots. They can easily show relations between the two-dimensional data and using colors and sizes you can pack your visualization with even more information. We will however start where we have left. In the geography using scatter_geo graph.", "Important scatter_geo parameters are max_size allowing to set the biggest radius of the bubbles and opacity to determine how much of the plot is visible.", "Regular scatter charts are commonly used to display the relation between the two variables. In our case, the number of visitors and their expenditures in the country. I will look only at the year 2018. size parameter influences the size of the bubbles while color parameter lets you set the color based on a categorical or continuous variable.", "Scatter plots allow to easily add marginal plots to highlight the distribution of one variable or of several variables specified by the color argument. You can choose from 4 types of marginal plot \u2014 box, violin, histogram or rug. You set them up simply by applying marginal_x or marginal_y parameter e.g. marginal_x=\u201drug\u201d. You can also draw a trend line for each color on the chart.", "To draw trendlines you need to install statsmodel library", "Thanks to statsmodels library you can also display the parameters of the regression model which was used to calculate the trendline.", "Plotly\u2019s success can be attributed to interactive features. Each chart contains a menu in the top right corner which allows basic operations like zoom-in and out, what tooltip appears when you hover graphs\u2019 elements or you can save the plot as an image by a single click.", "You can also add interactive buttons (or dropdowns) which let the users change the look of the graph. You can add four types of actions using parameter method:", "You can put several groups of buttons on the chart. They can be arranged either next to each other (or on the top of each other) or as a dropdown.", "The documentation shows some basic interactions, but if you plan to do something else, it is quite tricky to achieve that. The best trick is to create final the look you want to reach, dump the dictionary using fig.to_dict() and copy the relevant sections of the dict into arg[{...}] of the button for example:", "See the github notebook for more ideas about what to do with the buttons or explore the examples in Plotly\u2019s documentation.", "I have succeeded to change the labels, colors, ranges, but I have failed to change the input values (e.g. change the source data).", "You can place the buttons all around the plot area using the coordinate system, where x: 0, y: 0 is the bottom left corner of the chart (some plots like pie chart don\u2019t fill in whole area). You can also set the xanchor and yanchor to be left-center-right or top-middle-bottom.", "Clicking the buttons sometimes change their position", "You can micro-adjust the position using pad={\"r\": 10, \"t\": 10}. The values are in pixels and you can pad r-right, l-left, t-top, b-bottom. You can also change the font and color of the buttons.", "You can export the generated chart either as an interactive HTML page which lets you do all the Plotly magic, like zooming, switching data on/off or see the tooltips.", "You can specify several parameters specifying whether 3MB plotly.js is included, if the animation starts upon opening or how the html document is structured\u2014 documentation.", "You can also export the image as a static picture using .write_image(). It let you export into several formats like .png, .jpg, .webp, .svg, .pdf or .eps. You can change the dimensions and scales. Plotly is using kaleido as a default engine, but you can also choose a legacy orca engine.", "You can set up Plotly as pandas default plotting backend.", "Then you apply the plotly parameters to the data frame itself.", "It\u2019s however so easy it input the dataframe as the first parameter, that you might prefer pandas default set up having matplotlib as backend.", "Once you get yourself familiar with Plotly.Express you rarely come across an issue, you cannot solve. As we have said, Express struggle with the subplots. There are also some other situations that can increase your heartbeat. But even those have a simple solution.", "If you want to display the value count of integer categories, e.g. how many times player number 1,2,3 won a medal, it\u2019s simple using standard padnas plotting with Matplotlib.", "But if you try the same with Plotly, it automatically assumes that you want to display a continuous range of integers on the x-axis.", "To get the expected chart, you must turn the values into categories, though not in pandas.", "You must change the axes in the Plotly\u2019s layout parameters:", "Plotly also automatically handles the date values, which is particularly annoying in the case of end-of-the-season (year/quarter).", "Plotly automatically scales the axis labels to show the distribution in time, but if you wanted to display the end-of-year (quarter) dates, you will be very disappointed seeing the beginning of the next year instead. In case you want to display e.g. companies' financial data at the end of each year and you see \u20182020\u2019 instead of \u2018End of 2019\u2019 and you can get a completely wrong impression about the company\u2019s health. The fix is the same fig.update_xaxes(type=\"category\")", "Plotly is clever, and once you populate the axis with a date it considers it a date axis. Sometimes you may want to really display date and string values on the same axis. Solution, yes .update_xaxes(type=\"category\") again.", "Plotly express is a great way how to quickly display your data using a single chart type. It has significant features like interactivity and animations but lacks the support of subplots. Express is clever, and it split your data frame with a logical subset of data most of the time. But if it makes a wrong guess, it\u2019s almost impossible to persuade Plotly to display the data the way you want.", "Sometimes it requires a bit of trial and error. It usually helps to export the chart into a dict and try to find the correct name of the parameter you want to update. If you cannot create the desired visualization using Plotly.Express you can always alternate to the lower level API which is much more benevolent, but also requires more coding.", "If you, on the other hand, need more complex interactive reports, you will opt for Dash a dashboard tool of Plotly, which requires a bit more coding but you can achieve a really professional-looking dashboard with Dash.", "The charts and the exercises are available in the Github repo. Feel free to try, update and change \u2014 Plotly Express \u2014 Comprehensive Guide.ipynb", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data scientist who loves to explore everything and write about the topics from multiple points of view."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Feb5ee4b50b57&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualization-with-plotly-express-comprehensive-guide-eb5ee4b50b57&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualization-with-plotly-express-comprehensive-guide-eb5ee4b50b57&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualization-with-plotly-express-comprehensive-guide-eb5ee4b50b57&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualization-with-plotly-express-comprehensive-guide-eb5ee4b50b57&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----eb5ee4b50b57--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----eb5ee4b50b57--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://vdekanovsky.medium.com/?source=post_page-----eb5ee4b50b57--------------------------------", "anchor_text": ""}, {"url": "https://vdekanovsky.medium.com/?source=post_page-----eb5ee4b50b57--------------------------------", "anchor_text": "Vaclav Dekanovsky"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fed473176733b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualization-with-plotly-express-comprehensive-guide-eb5ee4b50b57&user=Vaclav+Dekanovsky&userId=ed473176733b&source=post_page-ed473176733b----eb5ee4b50b57---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Feb5ee4b50b57&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualization-with-plotly-express-comprehensive-guide-eb5ee4b50b57&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Feb5ee4b50b57&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualization-with-plotly-express-comprehensive-guide-eb5ee4b50b57&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://about.canva.com/license-agreements/onedesign/", "anchor_text": "license"}, {"url": "https://plotly.com/python/plotly-express/", "anchor_text": "Plotly.Express"}, {"url": "https://medium.com/plotly/introducing-plotly-express-808df010143d", "anchor_text": "version 4.0.0"}, {"url": "https://github.com/vaclavdekanovsky/data-analysis-in-examples/blob/master/Vizualizations/Plotly/Comperhansive%20Guide/Plotly%20Express%20-%20Comprehensive%20Guide.ipynb", "anchor_text": "Plotly Express \u2014 Comprehensive Guide.ipynb"}, {"url": "https://plotly.com/python/getting-started/#jupyterlab-support-python-35", "anchor_text": "jupyterlab-plotly"}, {"url": "https://www.python.org/dev/peps/pep-0008/#maximum-line-length", "anchor_text": "PEP8"}, {"url": "https://data.worldbank.org/indicator/ST.INT.ARVL", "anchor_text": "visiting"}, {"url": "https://data.worldbank.org/indicator/ST.INT.RCPT.CD", "anchor_text": "money they spent on their vacation"}, {"url": "https://datacatalog.worldbank.org/public-licenses#cc-by", "anchor_text": "CC-BY 4.0 license"}, {"url": "https://github.com/vaclavdekanovsky/data-analysis-in-examples/blob/master/Vizualizations/Plotly/Preprocess/Preprocessing.ipynb", "anchor_text": "see code"}, {"url": "https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.T.html", "anchor_text": "DataFrame.T"}, {"url": "https://pandas.pydata.org/docs/reference/api/pandas.melt.html", "anchor_text": "melt()"}, {"url": "https://pandas.pydata.org/docs/reference/api/pandas.pivot.html", "anchor_text": "pivot()"}, {"url": "https://pandas.pydata.org/docs/reference/api/pandas.pivot_table.html", "anchor_text": "pivot_table()"}, {"url": "https://medium.com/plotly/beyond-tidy-plotly-express-now-accepts-wide-form-and-mixed-form-data-bdc3e054f891", "anchor_text": "Beyond \u201ctidy\u201d"}, {"url": "https://github.com/vaclavdekanovsky/data-analysis-in-examples/blob/master/Vizualizations/Plotly/Comperhansive%20Guide/Plotly%20Express%20-%20Comprehensive%20Guide.ipynb", "anchor_text": "Github"}, {"url": "https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html", "anchor_text": "padnas.Series"}, {"url": "https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.T.html", "anchor_text": "pandas.DataFrame.T"}, {"url": "https://about.canva.com/license-agreements/onedesign/", "anchor_text": "picture license"}, {"url": "https://plotly.com/python/line-charts/", "anchor_text": "Line Charts in Python"}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.line.html", "anchor_text": "express.line"}, {"url": "https://plotly.com/python/styling-plotly-express/", "anchor_text": "styling guide"}, {"url": "https://plotly.com/python/reference/layout/yaxis/", "anchor_text": "python"}, {"url": "https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-autorange", "anchor_text": "autorange"}, {"url": "https://towardsdatascience.com/highlighted-line-chart-with-plotly-express-e69e2a27fea8", "anchor_text": "Highlighted line chart"}, {"url": "https://en.wikipedia.org/wiki/WebGL", "anchor_text": "WebGL format"}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.bar.html", "anchor_text": "bar chart API documentation"}, {"url": "https://towardsdatascience.com/histograms-with-plotly-express-complete-guide-d483656c5ad7", "anchor_text": "Histograms with Plotly Express: Complete GuideOne dataset, over 60 charts, and all the parameters explainedtowardsdatascience.com"}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.pie.html", "anchor_text": "docs"}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.choropleth.html", "anchor_text": "documentation,"}, {"url": "https://towardsdatascience.com/pythons-geocoding-convert-a-list-of-addresses-into-a-map-f522ef513fd6", "anchor_text": "geography"}, {"url": "https://www.statsmodels.org/stable/install.html", "anchor_text": "statsmodel"}, {"url": "https://plotly.com/python/custom-buttons/#methods", "anchor_text": "documentation"}, {"url": "https://github.com/vaclavdekanovsky/data-analysis-in-examples/blob/master/Vizualizations/Plotly/Comperhansive%20Guide/Plotly%20Express%20-%20Comprehensive%20Guide.ipynb", "anchor_text": "github"}, {"url": "https://plotly.com/python/custom-buttons/#methods", "anchor_text": "Plotly\u2019s documentation"}, {"url": "https://plotly.github.io/plotly.py-docs/generated/plotly.io.write_html.html", "anchor_text": "documentation"}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.scatter.html", "anchor_text": "API"}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.line.html", "anchor_text": "API"}, {"url": "https://plotly.com/python/line-charts/", "anchor_text": "Examples"}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.bar.html", "anchor_text": "API"}, {"url": "https://plotly.com/python/bar-charts/", "anchor_text": "Examples"}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.pie.html", "anchor_text": "API"}, {"url": "https://plotly.com/python/pie-charts/", "anchor_text": "Example"}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.sunburst.html", "anchor_text": "API"}, {"url": "https://plotly.com/python/sunburst-charts/", "anchor_text": "Example"}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.treemap.html", "anchor_text": "API"}, {"url": "https://plotly.com/python/treemaps/", "anchor_text": "Example"}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.choropleth.html", "anchor_text": "API"}, {"url": "https://plotly.com/python/choropleth-maps/", "anchor_text": "Examples"}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.scatter_geo.html", "anchor_text": "API"}, {"url": "https://plotly.com/python/scatter-plots-on-maps/", "anchor_text": "Examples"}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.scatter.html", "anchor_text": "API"}, {"url": "https://plotly.com/python/line-and-scatter/", "anchor_text": "Examples"}, {"url": "https://plotly.com/python-api-reference/generated/plotly.express.histogram.html", "anchor_text": "API"}, {"url": "https://plotly.com/python/histograms/", "anchor_text": "Examples"}, {"url": "https://plotly.com/python/linear-fits/", "anchor_text": "Trendlines"}, {"url": "https://plotly.com/python/reference/layout/yaxis/", "anchor_text": "API"}, {"url": "https://plotly.com/python/text-and-annotations/", "anchor_text": "Examples"}, {"url": "https://plotly.com/python/marginal-plots/", "anchor_text": "Examples"}, {"url": "https://plotly.github.io/plotly.py-docs/generated/plotly.io.write_html.html", "anchor_text": "write_html"}, {"url": "https://plotly.github.io/plotly.py-docs/generated/plotly.io.write_image.html", "anchor_text": "write_image"}, {"url": "https://plotly.com/python/reference/layout/updatemenus/", "anchor_text": "API"}, {"url": "https://plotly.com/python/custom-buttons/", "anchor_text": "Examples"}, {"url": "https://plotly.com/", "anchor_text": "lower level API"}, {"url": "https://plotly.com/dash/", "anchor_text": "Dash"}, {"url": "https://github.com/plotly/plotly.py/releases/tag/v4.0.0", "anchor_text": "Plotly 4.0.0 Release notes"}, {"url": "https://towardsdatascience.com/highlighted-line-chart-with-plotly-express-e69e2a27fea8", "anchor_text": "Highlighted line chart with plotly"}, {"url": "https://towardsdatascience.com/visualize-error-log-with-pandas-and-plotly-d7796a629eaa", "anchor_text": "Visualize error log with Plotly"}, {"url": "https://towardsdatascience.com/histograms-with-plotly-express-complete-guide-d483656c5ad7", "anchor_text": "All about Plotly Express Histograms"}, {"url": "https://towardsdatascience.com/complete-guide-to-pythons-cross-validation-with-examples-a9676b5cac12", "anchor_text": "How to split data into test and train set"}, {"url": "https://partner.canva.com/vdek", "anchor_text": "canva.com"}, {"url": "https://github.com/vaclavdekanovsky/data-analysis-in-examples/blob/master/Vizualizations/Plotly/Comperhansive%20Guide/Plotly%20Express%20-%20Comprehensive%20Guide.ipynb", "anchor_text": "Plotly Express \u2014 Comprehensive Guide.ipynb"}, {"url": "https://medium.com/tag/python?source=post_page-----eb5ee4b50b57---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/visualization?source=post_page-----eb5ee4b50b57---------------visualization-----------------", "anchor_text": "Visualization"}, {"url": "https://medium.com/tag/plotly?source=post_page-----eb5ee4b50b57---------------plotly-----------------", "anchor_text": "Plotly"}, {"url": "https://medium.com/tag/plotly-express?source=post_page-----eb5ee4b50b57---------------plotly_express-----------------", "anchor_text": "Plotly Express"}, {"url": "https://medium.com/tag/charts?source=post_page-----eb5ee4b50b57---------------charts-----------------", "anchor_text": "Charts"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Feb5ee4b50b57&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualization-with-plotly-express-comprehensive-guide-eb5ee4b50b57&user=Vaclav+Dekanovsky&userId=ed473176733b&source=-----eb5ee4b50b57---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Feb5ee4b50b57&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualization-with-plotly-express-comprehensive-guide-eb5ee4b50b57&user=Vaclav+Dekanovsky&userId=ed473176733b&source=-----eb5ee4b50b57---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Feb5ee4b50b57&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualization-with-plotly-express-comprehensive-guide-eb5ee4b50b57&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----eb5ee4b50b57--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Feb5ee4b50b57&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualization-with-plotly-express-comprehensive-guide-eb5ee4b50b57&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----eb5ee4b50b57---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----eb5ee4b50b57--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----eb5ee4b50b57--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----eb5ee4b50b57--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----eb5ee4b50b57--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----eb5ee4b50b57--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----eb5ee4b50b57--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----eb5ee4b50b57--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----eb5ee4b50b57--------------------------------", "anchor_text": ""}, {"url": "https://vdekanovsky.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://vdekanovsky.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Vaclav Dekanovsky"}, {"url": "https://vdekanovsky.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "623 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fed473176733b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualization-with-plotly-express-comprehensive-guide-eb5ee4b50b57&user=Vaclav+Dekanovsky&userId=ed473176733b&source=post_page-ed473176733b--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F41f38caa0bb5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualization-with-plotly-express-comprehensive-guide-eb5ee4b50b57&newsletterV3=ed473176733b&newsletterV3Id=41f38caa0bb5&user=Vaclav+Dekanovsky&userId=ed473176733b&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}