{"url": "https://towardsdatascience.com/pool-limited-queue-processing-in-python-2d02555b57dc", "time": 1683003469.92221, "path": "towardsdatascience.com/pool-limited-queue-processing-in-python-2d02555b57dc/", "webpage": {"metadata": {"title": "Pool Limited Queue Processing in Python | by Konstantin Taletskiy | Towards Data Science", "h1": "Pool Limited Queue Processing in Python", "description": "I was recently confronted with a problem: I needed to build a large number (order of 100) of Docker containers and then push them to the registry. Docker SDK for Python provided an excellent handle\u2026"}, "outgoing_paragraph_urls": [{"url": "https://docs.python.org/3.7/library/multiprocessing.html#multiprocessing.Process", "anchor_text": "reference", "paragraph_index": 2}, {"url": "https://docs.python.org/3.7/library/multiprocessing.html#multiprocessing.Queue", "anchor_text": "reference", "paragraph_index": 7}, {"url": "https://stackoverflow.com/a/6191991", "anchor_text": "workaround", "paragraph_index": 19}, {"url": "https://taletskiy.com/posts/python-pool-limited-queue-processing/", "anchor_text": "my blog", "paragraph_index": 23}], "all_paragraphs": ["I was recently confronted with a problem: I needed to build a large number (order of 100) of Docker containers and then push them to the registry. Docker SDK for Python provided an excellent handle on that, and together with `multiprocessing` library allowed to parallelize the task very effectively. However, after some initial testing I discovered that pushing multiple images to registry got stalled likely due to an overload of simultaneous uploads. In my testing, I was only able to run 2\u20133 simultaneous docker push commands until all the new ones I add got stalled. At that point I decided to limit the simultaneous uploads to the small number of parallel threads, while still utilizing large number of threads to facilitate image builds. Combination of queue (multiprocessing.Queue) for passing down the work from builder threads to pusher threads and thread pool (multiprocessing.Pool) looked like a best candidate. Yet, there are small nuances and gaps in documentation which took me some time to understand (especially when using multiprocessing on Windows). Below, I provide a small tutorial on how to use these data structures and objects.", "In this toy problem we have a large array of parallel Processes writing results into the Queue. Alongside them, there is a single-threaded reader Process checking for new items in the Queue and assigning them to new Processes in the Pool, such that only a small fixed number of these Processes are running at the same time. Let\u2019s go through all the elements below.", "For our large array of parallel threads on the left we are going to use multithreading.Process(). From the official reference:", "Processobjects represent activity that is run in a separate process.", "Starting a process(es) requires 2 things: the target function called and the Processcall itself. Let\u2019s take a look:", "In the example above we created 10 Processes and launched them all at the same time. Each process is running an instance of proc() function with arguments taken from arg. Because the order of execution is not guaranteed, when we run it, we get something like:", "Notice also the interesting syntax of the args=(i,). Process requires that args is iterable, so changing it to args=(i) or args=i will lead to a TypeError.", "Now, it is time to introduce a multithreading.Queue(). According to reference:", "Queue() returns a process shared queue implemented using a pipe and a few locks/semaphores.", "Queue allow us to put objects to it and process them elsewhere asynchronously. Importantly, queues are thread and process safe. Let\u2019s modify our previous example to add the Queue object and pass it to our parallel Processes:", "Keep in mind that Queue.get() is a blocking method, so we are not going to miss any messages in that queue.", "The next step in solving our problem is to switch to a parallel reads from the queue. We could just spawn the reader processes in the same way we spawned writers, but that will permit up 10 threads run in parallel. What should we do if we are limited by the smaller number of readers like in the original problem description?", "\u201cA process pool object which controls a pool of worker processes to which jobs can be submitted. It supports asynchronous results with timeouts and callbacks and has a parallel map implementation\u201d.", "Using Pool we can assign as many parallel processes as we like, but only the `processes` number of threads will be active at any given moment.", "Let\u2019s see how it will behave if we throw all the readers to the `Pool`:", "However, if we run the code above, we will get no output. What happened? When we called apply_async, the code execution immediately moved on and, since nothing else has left in the main function, exited. Thankfully, multiprocessing reference provides a way to wait for the execution results:", "This time, if we run the code we will get the following error: RuntimeError: Queue objects should only be shared between processes through inheritance. The multiprocessing.Manager will enable us to manage the queue and to also make it accessible to different workers:", "Finally, we are able to get the results we expect:", "I initially started working on this problem on a Linux-based machine, but later continued on Windows. Unfortunately, many of the things did not work immediately. Here are the things you need to know:", "1. Interrupting the program execution (Ctrl+C) will not work right away with the code above. The workaround would be to add initializer workers:", "2. I was not able to run the code in Jupyter notebook on Windows, unless I move worker functions into separate .py file and import them to my notebook. Related to that, you won\u2019t be able to run the scripts above without wrapping the main code into if __name__ == \u2018main':.", "As finishing touches, let\u2019s add the following: \u2022 delays to imitate CPU-bound work on reader and writer \u2022 exception handling when waiting for reader threads to finish \u2022 configurable number of writer and reader threads \u2022 some function documentation", "If you run it, you will get a result similar to this:", "This post was originally published in my blog.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Software developer from California. I \u2764\ufe0f programming, math and physics. Passionate about open source"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F2d02555b57dc&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpool-limited-queue-processing-in-python-2d02555b57dc&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpool-limited-queue-processing-in-python-2d02555b57dc&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpool-limited-queue-processing-in-python-2d02555b57dc&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpool-limited-queue-processing-in-python-2d02555b57dc&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----2d02555b57dc--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----2d02555b57dc--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@kostal91?source=post_page-----2d02555b57dc--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@kostal91?source=post_page-----2d02555b57dc--------------------------------", "anchor_text": "Konstantin Taletskiy"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6f0bc6687d1c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpool-limited-queue-processing-in-python-2d02555b57dc&user=Konstantin+Taletskiy&userId=6f0bc6687d1c&source=post_page-6f0bc6687d1c----2d02555b57dc---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2d02555b57dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpool-limited-queue-processing-in-python-2d02555b57dc&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2d02555b57dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpool-limited-queue-processing-in-python-2d02555b57dc&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@frankiefoto?utm_source=medium&utm_medium=referral", "anchor_text": "frank mckenna"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://docs.python.org/3.7/library/multiprocessing.html#multiprocessing.Process", "anchor_text": "reference"}, {"url": "https://unsplash.com/@halgatewood?utm_source=medium&utm_medium=referral", "anchor_text": "Hal Gatewood"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://docs.python.org/3.7/library/multiprocessing.html#multiprocessing.Queue", "anchor_text": "reference"}, {"url": "https://unsplash.com/@picsbyjameslee?utm_source=medium&utm_medium=referral", "anchor_text": "James Lee"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://docs.python.org/3.7/library/multiprocessing.html#multiprocessing.pool.Pool", "anchor_text": "multithreading.Pool()"}, {"url": "https://stackoverflow.com/a/6191991", "anchor_text": "workaround"}, {"url": "https://taletskiy.com/posts/python-pool-limited-queue-processing/", "anchor_text": "my blog"}, {"url": "https://medium.com/tag/python?source=post_page-----2d02555b57dc---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/multiprocessing?source=post_page-----2d02555b57dc---------------multiprocessing-----------------", "anchor_text": "Multiprocessing"}, {"url": "https://medium.com/tag/queue?source=post_page-----2d02555b57dc---------------queue-----------------", "anchor_text": "Queue"}, {"url": "https://medium.com/tag/programming?source=post_page-----2d02555b57dc---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data?source=post_page-----2d02555b57dc---------------data-----------------", "anchor_text": "Data"}, {"url": "http://creativecommons.org/licenses/by/4.0/", "anchor_text": "Some rights reserved"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2d02555b57dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpool-limited-queue-processing-in-python-2d02555b57dc&user=Konstantin+Taletskiy&userId=6f0bc6687d1c&source=-----2d02555b57dc---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2d02555b57dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpool-limited-queue-processing-in-python-2d02555b57dc&user=Konstantin+Taletskiy&userId=6f0bc6687d1c&source=-----2d02555b57dc---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2d02555b57dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpool-limited-queue-processing-in-python-2d02555b57dc&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----2d02555b57dc--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F2d02555b57dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpool-limited-queue-processing-in-python-2d02555b57dc&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----2d02555b57dc---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----2d02555b57dc--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----2d02555b57dc--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----2d02555b57dc--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----2d02555b57dc--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----2d02555b57dc--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----2d02555b57dc--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----2d02555b57dc--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----2d02555b57dc--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@kostal91?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@kostal91?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Konstantin Taletskiy"}, {"url": "https://medium.com/@kostal91/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "46 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6f0bc6687d1c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpool-limited-queue-processing-in-python-2d02555b57dc&user=Konstantin+Taletskiy&userId=6f0bc6687d1c&source=post_page-6f0bc6687d1c--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fb64834b26809&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpool-limited-queue-processing-in-python-2d02555b57dc&newsletterV3=6f0bc6687d1c&newsletterV3Id=b64834b26809&user=Konstantin+Taletskiy&userId=6f0bc6687d1c&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}