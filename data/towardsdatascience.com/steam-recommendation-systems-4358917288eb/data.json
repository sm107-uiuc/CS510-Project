{"url": "https://towardsdatascience.com/steam-recommendation-systems-4358917288eb", "time": 1683009827.193045, "path": "towardsdatascience.com/steam-recommendation-systems-4358917288eb/", "webpage": {"metadata": {"title": "Steam Recommendation Systems | by Albert.Yefeng.Liang | Towards Data Science", "h1": "Steam Recommendation Systems", "description": "What is Steam Steam is an online, cross-platform game distribution system, with around 75 million active users, about 172 million accounts total, hosting over 3000 games, which makes it an ideal\u2026"}, "outgoing_paragraph_urls": [{"url": "https://steamidfinder.com/", "anchor_text": "https://steamidfinder.com/", "paragraph_index": 26}], "all_paragraphs": ["Yefeng Liang, Yifan XieWhen looking through the website of the sale. We are addicted to the kinds and varieties of those merchants. Due to the website design, we can easily click and buy. Sometimes, this buying seems annoyed and dizzy, people are trapped into the merchants and can\u2019t find their gorals, many platforms, has thousands of users and games. Thus, most of the websites are committed to making every user like and suitable merchants so that every user will have a good game experience.", "In this article, we will design a recommendation system for the game sale platform \u201cSteam\u201d into five parts, which are popularity-based, quality-based, content-based, collaborative filtering, and recommendations on the scale. We will introduce our project from getting data, building the model, and the algorithm that we used and the results we got in the end.", "Here is the source code link of this project on GitHub:", "What is SteamSteam is an online, cross-platform game distribution system, with around 75 million active users, about 172 million accounts total, hosting over 3000 games, which makes it an ideal platform for the type of work presented here. The dataset contains records from over 3000 games and applications.", "Steam is a video game digital distribution service by Valve. It was launched as a standalone software client in September 2003 as a way for Valve to provide automatic updates for their games and expanded to include games from third-party publishers. Steam has also expanded into an online web-based and mobile digital storefront.", "DatasetWe used a package of NumPy, pandas, requests, sys to get the data that we need through the API for Steam Spy, and stored it by using JSON. ObjectiveAccording to the popularity of the game, the similarity of the game description, the quality of the game, and the player\u2019s preference for the game recommend the corresponding game to the game player, so that steam gets a higher degree of customer satisfaction", "Steps for building the recommender systemPart1: Popularity-based recommendationFor new users on the Steam website, what he/she knows is nothing, maybe the most efficient way for those new users to know about this website is to give them some most popular games owned by other previous users. Besides, these popular games have no time limitations. They are whole time popular games since they appeared on this website.", "1. Before making recommendations, we first need to extract the app_id, game name, owners, and price, so the first step we need to do is to access the steam API through requests, extract the data related to the top 100 games in two weeks, and save the data in CSV format through JSON for later use. Next, we\u2019ll use pandas to transform the data into the data frame format.", "2. We sort the games in descending order according to the number of owners ( In this part we think that the game with the most owners by default are the most popular here)", "Here is the rank of top items by their owners on the Steam Website, some of them are actually not games but software:", "Part2: Quality-based RecommendationSince Steam is a very comprehensive website, it\u2019s straightforward that we can get the most popular games by their owners, which is a good start for a cold start user. But does this method satisfied by some common users? Maybe the answer is not \u201cYes\u201d. Those popular games always have more users, more positive or negative reviews. From a business perspective, game owners are persuaded by the truth. They care more about the games\u2019 quality rather than sale quantities. However, some games have more owners perhaps because of the propaganda of media, famous game studios as well as the Steam website itself. In general, online games always have more users than non-online games because of the cooperation of players for games. In common users\u2019 perspectives, many of them care more about if this game got positive reviews by most users who leave their reviews. Therefore, the positive reviews rates of all the reviews(our definition of \u201cQuality-based\u201d here) could be a good evaluation of whether this game has good quality in users.", "1. We first also extract app_id, game names, owners' prices, positive reviews, and negative reviews. And then we stored them in the JSON, and listed all the reviews of each game respectively because app_id is immutable. In this way, we can observe the number of positive reviews and negative reviews of each game.", "2. Next, we gather the reviews of each game and added two columns to the original data frame, which are the number of positive and negative reviews, but the number of positive and negative comments is independent, that is to say, if the number of positive reviews of A is relatively lower than that of Game B, but the total number of reviews of Game A is far lower than that of Game B. In this situation, it\u2019s obvious that Game A has higher positive rates. In order to make the analysis more accurate and visible, we added a column of positive rate, that is, dividing the number of positive comments by the total number of comments, so that we can easily see a Proportion of good reviews in the product reviews.", "At the end of this step, we sorted the games according to their favorable ratings. After sorting, the corresponding ID of the game remains unchanged.", "For part 3, we think that the project will concentrate on the descriptions of the games, as games\u2019 descriptions are not accessed directly from Steam API, we have to access the Stem website to look through these descriptions.", "We thus access each games\u2019 descriptions by unique games\u2019 IDs, as each game have a common standard format of the website, we first copy the common HTTP format, then we concatenate these common HTTP formats with each games\u2019 unique IDs, then store them together with each game\u2019s DataFrame. Then we access them by the HTTP request, and first store them into a new DataFrame column.In this part, we would like to use the description of each game and analyzed the similarity between the two games, and according to the similarity to recommend the appropriate game to players. (If player A likes to play the game A, and there is a high similarity in-game A and game B, we assume that player A will like the game B)", "1. We first assemble the link that we can get the description of the games.", "The result of this step is:", "2. Next, we used the package of beautiful soup to parser the description of these games, we first move the item we do not need, like the stop words and some symbols that will hinder us.", "However, each result gets from the HTTP request is HTTP text, which includes many HTTP tags and formats. We absolutely need to erase them in order to see the pure game descriptions. Thus, we use python's regular expression here. After data cleaning by regular expression, we got the data description columns. Each game\u2019s information, followed by game descriptions. One of the clean descriptions we got is:", "In the next step, we will use these game descriptions to make our recommendations. It is true that game descriptions here are on behalf of \u201cContent\u201d.", "As the content-based model links with these content texts, it has some inner links with the field of Natural Language Processing, we will focus on a basic Natural Language Processing model TF-IDF here, which is concentrating on the weight of each word in the content text. Each word\u2019s weight will be weighted by not only its frequency on this content text, but by also the frequency of all the text set, and the algorithm of TF-IDF is:", "Here are the TF-IDF values for each word in each game descriptions example:", "After we got each words\u2019 TF-IDF values, linear-kernel was used here to compute this game\u2019s descriptions TF-IDF weights with other game\u2019s descriptions TF-IDF weights. Since Tf-IDF vectorizer in python will produce some \u201cword weight in-text\u201d vectors, the figure below shows an example of these vectors, here we have a text which includes two texts: \u201cThis is very strange informal, This is very nice\u201d, as shown in the figure, the first number is text number, the second number is word\u2019s number in this sample text set. Then is this word\u2019s TF-IDF in this text. value linear-kernel will be used here to multiply these vectors. The ground-truth about linear-kernel is: if there are two matrices that have the same dimensions, some big values in the same position of these matrices will make their multiply results still big in the final matrix calculated by linear-kernel.", "Then we will make a sequence of these results calculated by the linear kernel, and if the results are high, we will put them as the most relative recommendations for this game. Here we plot the top 10 recommendations.", "The recommendation results are both subjectively and objectively radical, for example, for the game \u201cPortal 2\u201d, the most similar game is itself, then is \u201cPortal 1\u201d and vice versa. Similarly, for one of the recommendations for the game \u201cPortal 2\u201d, \u201cLeft 4 Dead 2\u201d, we can also see another recommendation is \u201c Left4 Dead\u201d. This is an interesting phenomenon because, for all of the recommendations of a game, those recommendations still have an inner relationship with each other in human cognition.", "Data GettingWe got these links by randomly searching users\u2019 steam names( which means we assumed some arbitrary names, such as \u201c43\u201d, etc.) and put their steam ids with the website format. Then we get all these 10 links including users\u2019 personal profiles. https://steamidfinder.com/ This website will give us access to users\u2019 profiles by pasting Steam_ID or a random user_name, we need this because sometimes we can not access users by their names on Steam website.", "Then we use requests.get() to get the playing time information by these 10 links.", "However, there are no records on both the steam website and steam API, about continuous ratings from these users. Actually, on the Steam platform, users only give \u201cRecommendation\u201d or \u201cNo-Recommendation\u201d, which means binary reviews, positive and negative, even on the user website, there is still no mechanism for continuous ratings such as one star to five stars. In order to get continuous ratings about user-game interaction, we have to assume a user game rating interaction mechanism. Since users\u2019 concentrations about games can be reflated by its\u2019 playing times. We can assume playing time as fairly persuasive information about users\u2019 interests.", "Thus, here we assume that playing time median is a very important part of interests. In order to compare the median playing time, we will compare each individual user\u2019s median playing time on this game with the game\u2019s median played time by all the users, Then we will use the algorithm to divided this comparison of these two median playing times into a range from 1 to 5, then this will help us fill out the continuous ratings DataFrame.", "As for the users\u2019 median playing time for a game, I compare them with this game\u2019s total playtime by users. Considering most users will give a positive review for a game, if they played these games even for not a very long time, they still love this game unless this game is fairly terrible, here we choose by \u201ctop100 forever\u201d, so they are all very popular games, most of them have fairly high positive rates which are over 90%. Hence, I give a positive level of measurement for ratings. In this section, I assume that if a user\u2019s playing time is bigger than this game\u2019s median playing time from all of its users (median playing time). I will assume this user\u2019s ratings for this game is 5; if the user\u2019s playing time is less than median playing time but bigger than 0.8 multiply median playing game, the rating is assumed as 4; if the user\u2019s playing time is less than 0.8 multiply the median playing time but bigger than 0.5 multiply the median playing game, the rating is assumed as 3; if the user\u2019s playing time is less than 0.5 multiply median playing time but bigger than 0.1 multiply the median playing game, the rating is assumed as 2; if the user\u2019s playing time is less than 0.1 multiply median playing time, the rating is assumed as 1.", "Since the no playing time games in this users\u2019 profile list, I consider this user hasn\u2019t expressed his/her preference about this game, of which the rating is 0.", "Now we have continuous ratings by 1\u20135 and store them as DataFrame format with other information, the DataFrame looks like this:", "Here is the recommendation result for item NO.7 when we used cosine similarity.", "Part5: Recommendations on the large scale and results evaluations", "In this part, we still use the data that we modified in Part4.", "In this part, we will focus on the recommendations on the big data platform, this time we choose Spark ALS as the algorithm to run on the big data platform. Spark ALS can put every input session into a special data structure Spark RDD. In our project, we use an input data format that consists of User_id, game_id, and user\u2019s ratings about this game. These three features will be considered as CSV data columns and then they will be read by spark session. In this part, the playing time data by each user, which can not be got by Steam API, thus, we have to access each user\u2019s individual profile, however, for those who didn\u2019t set their profile or make their profile be private, we can not get playing time information from them. Therefore, we have to access those public profiles one by one and get what we need information. Thus, in this part, the dataset could be much smaller than the previous recommendation\u2019s dataset", "ALS is a matrix factorization algorithm, which will decompose a high dimension user-item interaction matrix into two low dimension matrices, in this user matrix, rows represent users and columns are latent factors. In the item matrix, where rows are latent factors and columns represent items. In the paper[5], the Factorization matrix model learns to factorize the rating matrix into user and item representations, which allows the model to predict better-personalized item ratings for users.", "With matrix factorization, less-known items can have rich latent representations as much as popular items have, which improves the recommendation system\u2019s ability to recommend less-known items. We build the recommendation model using Alternating Least Squares (ALS) based on implicit ratings.", "ResultsFor the results of spark recommendations, we design an individual recommendation by user_id and the number of recommendations, then the part will give simulated ratings calculated by Spark ALS about this user on these 10 games. As mentioned before, we have to look through each public user profile on the steam website by user ID one by one, and then get the data, thus the dataset\u2019s volume is not very huge. As more and more users\u2019 original rating data is input into the Spark working process, the simulated ratings for this user about top items produced by Spark will be higher, and these simulated ratings were grouped by descending order.", "After the game recommendations which include game ratings, we then use RMSE as our recommendations\u2019 results evaluations. As the expansion of the dataset, RMSE evaluations will be improved. This means our recommendations would have higher ratings to users.", "ConclusionIn this project, we only used some basic technologies to simulate a recommender system. A mature recommender system is not only composed of a single technology but also business strategies. Because the actual situation is mixed with many complex factors, we built a model that enables the superposition of multiple technologies. If we want to complete a more perfect recommender system, we need more exploration and research.", "In the future, we will dig into Collaborative filtering and its performance on several evaluations. Some complicated algorithms such as PCA and SVD could be good additions to our Recommendation Systems. We will consider Recommendations both for binary ratings and continuous ratings. Then, we still want to use more NLP text classification for the game descriptions data.", "Thank you for reading! Welcome to any feedbacks. All the best!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "I am now a current graduate student major in Computer Science, I am interested in Data Science, and I have a plan to pursue my Phd degree in the future."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F4358917288eb&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsteam-recommendation-systems-4358917288eb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsteam-recommendation-systems-4358917288eb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsteam-recommendation-systems-4358917288eb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsteam-recommendation-systems-4358917288eb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----4358917288eb--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----4358917288eb--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://albert-yefeng-liang.medium.com/?source=post_page-----4358917288eb--------------------------------", "anchor_text": ""}, {"url": "https://albert-yefeng-liang.medium.com/?source=post_page-----4358917288eb--------------------------------", "anchor_text": "Albert.Yefeng.Liang"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb7480b0816e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsteam-recommendation-systems-4358917288eb&user=Albert.Yefeng.Liang&userId=b7480b0816e&source=post_page-b7480b0816e----4358917288eb---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4358917288eb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsteam-recommendation-systems-4358917288eb&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4358917288eb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsteam-recommendation-systems-4358917288eb&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/AlbertNightwind/Steam-recommendation-system", "anchor_text": "https://github.com/AlbertNightwind/Steam-recommendation-system"}, {"url": "https://store.steampowered.com/search/?filter=globaltopsellers&os=win", "anchor_text": "https://store.steampowered.com/search/?filter=globaltopsellers&os=win"}, {"url": "https://www.searchenginejournal.com/tf-idf-can-it-really-help-your-seo/331075/", "anchor_text": "https://www.searchenginejournal.com/tf-idf-can-it-really-help-your-seo/331075/"}, {"url": "https://steamidfinder.com/", "anchor_text": "https://steamidfinder.com/"}, {"url": "https://galyonk.in/some-things-you-should-know-about-steam-5eaffcf33218?gi=6052b30aa193", "anchor_text": "https://galyonk.in/some-things-you-should-know-about-steam-5eaffcf33218?gi=6052b30aa193"}, {"url": "https://towardsdatascience.com/large-scale-jobs-recommendation-engine-using-implicit-data-in-pyspark-ccf8df5d910e", "anchor_text": "https://towardsdatascience.com/large-scale-jobs-recommendation-engine-using-implicit-data-in-pyspark-ccf8df5d910e"}, {"url": "https://spark.apache.org/docs/2.2.0/mllib-collaborative-filtering.html", "anchor_text": "https://spark.apache.org/docs/2.2.0/mllib-collaborative-filtering.html"}, {"url": "https://spark.apache.org/docs/2.2.0/ml-collaborative-filtering.html#cold-start-strategy", "anchor_text": "https://spark.apache.org/docs/2.2.0/ml-collaborative-filtering.html#cold-start-strategy"}, {"url": "https://towardsdatascience.com/prototyping-a-recommender-system-step-by-step-part-2-alternating-least-square-als-matrix-4a76c58714a1", "anchor_text": "https://towardsdatascience.com/prototyping-a-recommender-system-step-by-step-part-2-alternating-least-square-als-matrix-4a76c58714a1"}, {"url": "https://towardsdatascience.com/python-data-preprocessing-using-pandas-dataframe-spark-dataframe-and-koalas-dataframe-e44c42258a8f", "anchor_text": "https://towardsdatascience.com/python-data-preprocessing-using-pandas-dataframe-spark-dataframe-and-koalas-dataframe-e44c42258a8f"}, {"url": "https://medium.com/tag/recommendations?source=post_page-----4358917288eb---------------recommendations-----------------", "anchor_text": "Recommendations"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4358917288eb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsteam-recommendation-systems-4358917288eb&user=Albert.Yefeng.Liang&userId=b7480b0816e&source=-----4358917288eb---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4358917288eb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsteam-recommendation-systems-4358917288eb&user=Albert.Yefeng.Liang&userId=b7480b0816e&source=-----4358917288eb---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4358917288eb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsteam-recommendation-systems-4358917288eb&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----4358917288eb--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F4358917288eb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsteam-recommendation-systems-4358917288eb&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----4358917288eb---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----4358917288eb--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----4358917288eb--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----4358917288eb--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----4358917288eb--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----4358917288eb--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----4358917288eb--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----4358917288eb--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----4358917288eb--------------------------------", "anchor_text": ""}, {"url": "https://albert-yefeng-liang.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://albert-yefeng-liang.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Albert.Yefeng.Liang"}, {"url": "https://albert-yefeng-liang.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "3 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb7480b0816e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsteam-recommendation-systems-4358917288eb&user=Albert.Yefeng.Liang&userId=b7480b0816e&source=post_page-b7480b0816e--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2Fb7480b0816e%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsteam-recommendation-systems-4358917288eb&user=Albert.Yefeng.Liang&userId=b7480b0816e&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}