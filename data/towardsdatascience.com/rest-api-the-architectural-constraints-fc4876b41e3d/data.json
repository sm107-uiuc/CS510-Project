{"url": "https://towardsdatascience.com/rest-api-the-architectural-constraints-fc4876b41e3d", "time": 1683016623.420393, "path": "towardsdatascience.com/rest-api-the-architectural-constraints-fc4876b41e3d/", "webpage": {"metadata": {"title": "REST API: the architectural constraints | by Girija Shankar Behera | Towards Data Science", "h1": "REST API: the architectural constraints", "description": "In the previous post, we saw some of the basics of REST APIs, how a Request and a Response looks like, what they are made up of, the methods that can be used and some use cases. Those were all the\u2026"}, "outgoing_paragraph_urls": [{"url": "https://gshbehera.medium.com/rest-api-the-basics-d91859537c9d", "anchor_text": "post", "paragraph_index": 0}, {"url": "https://api.github.com/", "anchor_text": "https://api.github.com/", "paragraph_index": 8}, {"url": "https://api.github.com/user/repos", "anchor_text": "https://api.github.com/user/repos", "paragraph_index": 14}, {"url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers#Caching", "anchor_text": "here", "paragraph_index": 30}], "all_paragraphs": ["In the previous post, we saw some of the basics of REST APIs, how a Request and a Response looks like, what they are made up of, the methods that can be used and some use cases. Those were all the basic stuff needed to create a REST API. But saying that, it does not ensure that the API service is still RESTful.", "REpresentational State Transfer is an architectural style which defines certain guidelines or constraints while developing the API service. These constraints primarily focus on certain guidelines while designing the application, rather than going to the detailed implementation. Following all these constraints strictly makes the service a RESTful service.", "This post is about exploring these architectural constraints in detail and going through the use cases. There are a total of six such constraints including five mandatory ones and one optional.", "Let\u2019s see the architectural constraints that are mandatory to make the API service RESTful. Here we start.", "This constraint mandates the separation of concerns between the client side of the program and the server side of the program. Meaning, a server works mostly towards the backend of a system, like managing the database, scaling of application, defining the business decisions and responding to the requests of clients. A client is mostly focused towards managing the user interface and user experience of the system, requesting for the appropriate data to the backend to display them on UI.", "The constraint says that both the front end and the back end should work separately without having to intervene with each other or without depending on each other. Clients should not know how the server is fetching the resources, what database is used on the server side, what language has been used to develop the server side program, and all other backend related stuff. Similarly, the server should not know how the client is using the resources it has requested, or how the user interface has been designed and any other frontend related stuff.", "The good thing that comes with separating the concerns for the server and the client is that it makes them lightweight and less complex. This is one of those constraints which is not very tough to follow, as nowadays most of the frameworks used for building web applications do have added functionalities to ensure that the application follows client server model.", "By far, this is the most important constraint of all of them. This ensures that the internal implementation details in the server for managing the resources should not be visible to the clients. These must be hidden from them.", "Okay, to explore this one I took the root URL of GitHub API https://api.github.com/. I\u2019m using Postman while developing Web APIs and testing them. Hitting the GitHub root URL with GET method, I get a good collection of all the APIs that can also be accessed from GitHub. Take a look on the list below.", "We see a number of URLs based on the functionalities provided by GitHub. For ex: 1. current_user_url is the URL for the currently logged in user. 2. notifications_url is the one to get all the notifications of the currently logged in user. 3. repository_url is the one to access a particular repository of a particular user. 4. current_user_repositories_url is the one which lists all the repositories for the currently logged in user. 5. user_url is the one which gives all the information of a GitHub user with the provided username. 6. user_repositories_url is the one which gives all the repositories for a specific GitHub account user with the provided username.", "This ensures the terms for the first sub-constraint for Uniform Interface constraint, i.e. Identification of Resources. This means that each resource must have it\u2019s unique identifiable URI. Here in GitHub, a user, a repository, a notification, my followers, my followings and everything that we do on GitHub is a resource. And the API has provided access to each of them using their own Unique Identifier.", "Q. Well, one question that pops up in my mind is why GitHub allows us to see all these URLs accessible with their base URL?", "Maybe because it allows someone who is not even familiar with the GitHub APIs may get some idea looking at these URLs. Though GitHub APIs have a nice Developer Documentation, without even going to the documentation one may get a hint from these URLs.", "Moving on, what I do now is select one among these, and see what all things I can do. I have selected the one which gives my own repositories.", "https://api.github.com/user/repos gives all the repositories that I have on GitHub, with the basic information for each of them. It includes id, name, full name, information about my GitHub account as its owner, its URL on the webpage, description and many more things. On REST terminologies, hitting the URL with GET returned the CURRENT STATE of all the REPOSITORY RESOURCES in JSON REPRESENTATION.", "Now, let\u2019s say I want to create one more repository, but not from the GitHub UI interface, rather I will use these APIs and the REST methods I learnt in my previous post. I use the same URL again with POST method this time, and a content in the body of the URL.", "The body contains the new name for the repository. Upon successful Repository creation, it returns information about the new repository with status 201. In REST terms again, what we provided in the form data was the DESIRED STATE OF A NEW RESOURCE that we want to get created, and the server after creating this successfully returned with its STATE in JSON.", "The URL for the repository created is highlighted. To update the Repository details, I will use this URL, as it targets a specific Resource, not a list of Resources. The method will be PATCH this time with the new information in the body of the URL.", "Upon successful updation, the server returns with Status 200 and the updated repo information. If I want to delete it, again I use the URL returned in this step with DELETE method.", "The DELETE method returned with no content, hence 204 status code.", "II) Manipulation of Resources through Representations:", "These operations ensure the second sub-constraint in the constraint Uniform Interface, i.e. Manipulation of Resources through Representations. When I retrieved all the repositories for my account and when I created a new repository, I used the same URL, but with two different methods. GET once, and POST the second time. Similarly, to update the repository and to delete it, I used the same URL, but with two different methods, PATCH and DELETE. This sub-constraint says that to manipulate the resources, we should use the new representations each time with a different method.", "III) Hypermedia as the Engine of Application State (HATEOAS):", "Notice how I navigated from one URL to another in each step. I did not go to the API documentation to find the URLs for the specific step. Starting from the first step, the root endpoint gave me a list of all the URLs to hit. Each of them are the hyperlinks to the respective resources.", "This sub-constraint says that, each time a client requests for a resource, the server should return with every information that is needed to manipulate the resources. Moreover, it should return with all the corresponding APIs as hyperlinks to move from one to another. Now this makes sense. Even for someone noob like me, I did not face any problem moving from one step to another. Each step returned with a hyperlink to move to a new one. And, we know the HTTP methods as well, which allows us to use the hyperlinks to create, update, delete and what not.", "The sub-constraint mandates that the server should return the Response with every possible meta-information to let a client understand and use it properly. The response comes with \u2018Content-Type\u2019 headers which tells the client that the resource returned is in json, or xml or plain text. It comes with \u2018Allow\u2019 headers which tells the client all the methods that are allowed to operate on the resource. Similarly, a lot of information is available on the header which makes it easy for the client to understand the Response and take appropriate action.", "This constraint tells that the architecture of the server can be layered, without letting the client know about it.", "The above scenario explains this constraint. The server with which client is interacting might only have the APIs deployed on it. It might have nothing to do with the storage of the actual data, or manipulating them, or authenticating the requests with the credentials. So the client has no idea that it is just connected to an intermediary on the way to the end server. This is helpful when we want to scale up the system, or balancing load.", "This constraint tells that the response from a server can be cacheable. With caching the response at the client side, the client does not need to request the server again and again to get the response.", "Downside is with cache in place, it needs to be updated each time the data is getting updated server side. There should be no difference in the response that can be retrieved directly from the server or the one from the cache.", "There are several headers that give information about caching, in both the request and response. Take a look here to get more details of the HTTP headers used for the providing information on caching.", "This constraint is focused on sending the state of the client each and every time it requests the server for a resource. A request should contain everything that is needed to fulfill the request, as the server need not store any session information about the client. The request might include the client credentials or session information or any token issued to the client to validate it, also any context information to understand the request, as the server won\u2019t also store anything from the previous client interactions. Server will validate the client request each and every time with the information sent in the request.", "The advantage with this is the server will be free of keeping the session information and managing it. It can process each request individually, and also no need of checking the previous interactions to understand the context.", "The last constraint in the REST architecture is Code on Demand, and this is totally optional to use. Server might choose to return a part of the code itself on a request from the client, instead of returning a JSON or XML representation. You can think of it as the client downloading the code and executing it. It would provide support to a part of the application with the client itself.", "That\u2019s it for this post. So here we covered the architectural constraints of REST. The next one would be on using the REST knowledge to build a Book Catalogue API.", "Feel free to leave a comment below or any questions/suggestions for improvement.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Ffc4876b41e3d&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frest-api-the-architectural-constraints-fc4876b41e3d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frest-api-the-architectural-constraints-fc4876b41e3d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frest-api-the-architectural-constraints-fc4876b41e3d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frest-api-the-architectural-constraints-fc4876b41e3d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----fc4876b41e3d--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----fc4876b41e3d--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://gshbehera.medium.com/?source=post_page-----fc4876b41e3d--------------------------------", "anchor_text": ""}, {"url": "https://gshbehera.medium.com/?source=post_page-----fc4876b41e3d--------------------------------", "anchor_text": "Girija Shankar Behera"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F15521c3a84a9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frest-api-the-architectural-constraints-fc4876b41e3d&user=Girija+Shankar+Behera&userId=15521c3a84a9&source=post_page-15521c3a84a9----fc4876b41e3d---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffc4876b41e3d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frest-api-the-architectural-constraints-fc4876b41e3d&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffc4876b41e3d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frest-api-the-architectural-constraints-fc4876b41e3d&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/tagged/programming-rest-apis", "anchor_text": "PROGRAMMING REST APIS"}, {"url": "https://gshbehera.medium.com/rest-api-the-basics-d91859537c9d", "anchor_text": "post"}, {"url": "https://api.github.com/", "anchor_text": "https://api.github.com/"}, {"url": "https://api.github.com/user/repos", "anchor_text": "https://api.github.com/user/repos"}, {"url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers#Caching", "anchor_text": "here"}, {"url": "https://restfulapi.net/rest-architectural-constraints/", "anchor_text": "REST Architectural Constraints"}, {"url": "https://auth0.com/blog/rest-architecture-part-1-building-api/", "anchor_text": "REST Architecture Blog"}, {"url": "https://medium.com/tag/programming-rest-apis?source=post_page-----fc4876b41e3d---------------programming_rest_apis-----------------", "anchor_text": "Programming Rest Apis"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ffc4876b41e3d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frest-api-the-architectural-constraints-fc4876b41e3d&user=Girija+Shankar+Behera&userId=15521c3a84a9&source=-----fc4876b41e3d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ffc4876b41e3d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frest-api-the-architectural-constraints-fc4876b41e3d&user=Girija+Shankar+Behera&userId=15521c3a84a9&source=-----fc4876b41e3d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffc4876b41e3d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frest-api-the-architectural-constraints-fc4876b41e3d&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----fc4876b41e3d--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Ffc4876b41e3d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frest-api-the-architectural-constraints-fc4876b41e3d&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----fc4876b41e3d---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----fc4876b41e3d--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----fc4876b41e3d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----fc4876b41e3d--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----fc4876b41e3d--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----fc4876b41e3d--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----fc4876b41e3d--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----fc4876b41e3d--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----fc4876b41e3d--------------------------------", "anchor_text": ""}, {"url": "https://gshbehera.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://gshbehera.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Girija Shankar Behera"}, {"url": "https://gshbehera.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "141 Followers"}, {"url": "https://www.linkedin.com/in/girija-shankar-behera-449179111/", "anchor_text": "https://www.linkedin.com/in/girija-shankar-behera-449179111/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F15521c3a84a9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frest-api-the-architectural-constraints-fc4876b41e3d&user=Girija+Shankar+Behera&userId=15521c3a84a9&source=post_page-15521c3a84a9--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fd8cdf5a3d59&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frest-api-the-architectural-constraints-fc4876b41e3d&newsletterV3=15521c3a84a9&newsletterV3Id=d8cdf5a3d59&user=Girija+Shankar+Behera&userId=15521c3a84a9&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}