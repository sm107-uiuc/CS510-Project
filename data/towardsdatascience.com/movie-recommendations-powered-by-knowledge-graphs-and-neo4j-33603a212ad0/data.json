{"url": "https://towardsdatascience.com/movie-recommendations-powered-by-knowledge-graphs-and-neo4j-33603a212ad0", "time": 1683005865.558472, "path": "towardsdatascience.com/movie-recommendations-powered-by-knowledge-graphs-and-neo4j-33603a212ad0/", "webpage": {"metadata": {"title": "Movie Recommendations powered by Knowledge Graphs and Neo4j | by Anders Brams | Towards Data Science", "h1": "Movie Recommendations powered by Knowledge Graphs and Neo4j", "description": "When you visit Netflix, you are met by several lists of movies for you to watch. Some new releases, some popular among other users, and most interestingly, some Top Picks for You. Netflix uses a\u2026"}, "outgoing_paragraph_urls": [{"url": "https://mindreader.tech/", "anchor_text": "MindReader", "paragraph_index": 4}, {"url": "https://neo4j.com/blog/data-modeling-basics/?ref=blog", "anchor_text": "more straightforward", "paragraph_index": 16}, {"url": "https://neo4j.com/whitepapers/overcoming-sql-strain-graph-databases/?ref=blog", "anchor_text": "not exactly a", "paragraph_index": 16}, {"url": "https://neo4j.com/whitepapers/overcoming-sql-strain-graph-databases/?ref=blog", "anchor_text": "very efficient", "paragraph_index": 16}, {"url": "https://neo4j.com/whitepapers/overcoming-sql-strain-graph-databases/?ref=blog", "anchor_text": "operation", "paragraph_index": 16}, {"url": "https://en.wikipedia.org/wiki/PageRank", "anchor_text": "Personalized PageRank", "paragraph_index": 30}, {"url": "https://arxiv.org/pdf/1604.03147.pdf", "anchor_text": "Shams et. al 2016", "paragraph_index": 30}, {"url": "https://dl.acm.org/doi/10.1145/2488388.2488433", "anchor_text": "Gupta et. al 2013", "paragraph_index": 30}, {"url": "http://people.cs.aau.dk/~matteo/pdf/EDBT20-particle-filtering.pdf", "anchor_text": "Gallo et. al 2020", "paragraph_index": 30}, {"url": "https://mindreader.tech/", "anchor_text": "https://mindreader.tech", "paragraph_index": 31}, {"url": "https://mindreader.tech/dataset", "anchor_text": "here", "paragraph_index": 31}, {"url": "https://mindreader.tech/", "anchor_text": "MindReader can guess your movie-mind", "paragraph_index": 31}, {"url": "https://neo4j.com/docs/api/python-driver/current/", "anchor_text": "Neo4j Bolt Driver", "paragraph_index": 37}, {"url": "https://neo4j.com/developer/guide-cypher-basics/", "anchor_text": "Guide to Cypher Basics", "paragraph_index": 38}, {"url": "https://github.com/DenisGallo/Neo4j-ParticleFiltering", "anchor_text": "particle filtering", "paragraph_index": 39}, {"url": "https://mindreader.tech/", "anchor_text": "MindReader", "paragraph_index": 47}, {"url": "https://mindreader.tech/dataset", "anchor_text": "dataset unlike any other", "paragraph_index": 48}, {"url": "https://mindreader.tech/", "anchor_text": "try out MindReader on our website", "paragraph_index": 49}, {"url": "https://mindreader.tech/dataset", "anchor_text": "download", "paragraph_index": 49}, {"url": "https://medium.com/@anderslangballejakobsen", "anchor_text": "Anders Langballe Jakobsen", "paragraph_index": 50}, {"url": "https://medium.com/@theisjendal", "anchor_text": "Theis Jendal", "paragraph_index": 50}, {"url": "http://people.cs.aau.dk/~matteo/", "anchor_text": "Matteo Lissandrini", "paragraph_index": 50}, {"url": "https://peterdolog.wordpress.com/", "anchor_text": "Peter Dolog", "paragraph_index": 50}, {"url": "http://people.cs.aau.dk/~khose/", "anchor_text": "Katja Hose", "paragraph_index": 50}], "all_paragraphs": ["When you visit Netflix, you are met by several lists of movies for you to watch. Some new releases, some popular among other users, and most interestingly, some Top Picks for You. Netflix uses a powerful recommendation system to generate this list. Based on what you have watched and rated, it builds a profile of your tastes in terms of genres, plots, actors and more, and uses this profile to recommend movies that fit to your taste.", "Recommendation systems, or recommenders, are used by a huge number of platforms including Amazon, Netflix, Facebook and many other e-commerce and service provision platforms. Their purpose is simple: recommend the items/movies/people that a specific user will most likely buy/watch/become friends with.", "In this article, we will go through how we can build an effective recommendation system using only Neo4j.", "While many recommender systems rely on several subsystems interacting with each other (e.g., machine learning clusters training and pulling data from a central database), we will implement a recommender that runs directly on the database itself \u2014 and very efficiently so \u2014 by exploiting the expressive power of Knowledge Graphs.", "We also show how we have used this technology to build MindReader, a recommendation system using graph technologies (explained later in this article) allowing users to collaboratively build a dataset unlike any other dataset used in the research field of personalized recommendation.", "If you\u2019re an avid watcher of horror movies, Netflix will pick up on this and recommend more horror movies to you rather than, for example, comedy shows and children\u2019s movies. Regardless of the nature of one\u2019s business, this is a desired feature. The problem, of course, lies in how to infer user preferences in a simple, efficient, and effective way.", "Generally, we talk about three ways of doing this: through collaborative or content-based filtering, or a combination (hybrid) of the two. A collaborative filtering recommender will use the interactions of users similar to you to determine what you would like.", "Imagine two hypothetical users, Mike and Drew, who are both fans of Sci-Fi movies and both like Star Wars. Mike also likes Interstellar, but Drew has not watched it. The collaborative filtering recommender would recommend Interstellar to Drew because Mike \u2014 who likes the same things as Drew \u2014 likes Interstellar.", "Collaborative filtering can be an effective strategy since the fact that two users like and dislike some set of items can effectively encode some quite complex preferences without us having to worry about what those preferences actually are.", "On the other hand, content-based filtering recommenders would look at the content of both movies and determine whether the similarity in content warrants a recommendation. That is, similar items will attract users with similar preferences.", "This is also an effective strategy and more transparent than collaborative filtering, since we understand the similarity by means of more tangible properties like genres, actors, and so forth. Notice that, in our example, even without anyone rating Interstellar we can still infer users preferences. In collaborative filtering, this is not possible. Indeed, content-based filtering can really shine in the item cold-start setting. This is when a new item that no users have rated is introduced to the system.", "We\u2019re going to build a content-based recommender that uses a user\u2019s information as well as a knowledge graph (powered by a Neo4j graph database) for recommending products to users. First, however, it\u2019s worth discussing why a knowedge graph and a graph database is necessary at all in the first place.", "Intuitively, for implementing a content-based recommender, we should be able to model all movies as simple objects with a list of properties (for instance, genres, actors, and subjects) in an SQL database. This, indeed, is easily implemented with a few tables connected through appropriate relationships.", "The power of graph databases becomes clear once we start considering connections other than Movie\u2192HasProperty\u2192Property. In fact we want to express a much richer model where we represent inter-relations between properties - effectively allowing properties to have properties. This also allows us to explicitly model the nature of each relationship. In this case, the expressiveness of the graph model becomes clearer:", "The above is an example knowledge graph representing movies and books as well as actors, genres and the complex interelationships among them. In a knowledge graph, not only do we know what items are related to what properties, we know how they are related and impose no restrictions on what can be related and how.", "With such a graph structure, we suddenly have many new ways of describing the items we want to recommend. This translates to more complex reasoning about what a given user might appreciate and why when we compare two items. For example, if a user likes \u201cCloud Atlas\u201d (the movie), they might like \u201cCatch Me If You Can\u201d because Tom Hanks stars in both of them. On the other hand, they could be looking for something different from fiction. If they\u2019re looking for a book to buy, they might like \u201cCloud Atlas\u201d (the book), and if they also liked \u201cCatch Me If You Can\u201d, maybe they would like the \u201cI Am Malala\u201d book as it is also a biography and won awards similar to the Cloud Atlas book.", "While modelling this with standard SQL technologies is definitely possible, it is usually very difficult because of the rich structure. Instead, in a graph database, modelling such structure is more straightforward. Also, querying a lot of relationships in an SQL database like this is not exactly a very efficient operation. What\u2019s more is that in a graph database, we are free to extend the structure of our database graph as we\u2019d like and to represent an ever-evolving domain.", "To suggest items to users, it is common to deploy very complex machine learning models. Here, we will instead be exploiting the full power of graphs by using a variant of the PageRank algorithm for making recommendations for our users. PageRank is an algorithm that is at the core of Google\u2019s ranking algorithm for web-pages. It is used to rank the most relevant and important pages on the internet based on how they are connected. This means that it is used to evaluate the importance of a page.", "The algorithm models a random web-surfer navigating the web by following links between individual web-pages. Web pages are presented as nodes and the connections (the edges) are created when a page contains a link to another page. The PageRank of a given website, i.e., a node in the web-graph, is given by how likely would be a user to end up on a specific web page if browsing the web aimlessly.", "In the graph in the figure, the most important web-page would be Wikipedia, followed by Neo4j and Dev.to, followed by Google and Reddit, and so on.", "In the PageRank model, we assume that the random web-surfer can teleport to any page in the entire network at any time. This is analogous to the surfer simply typing in a different URL in the browser instead of following the links on a page. In a variant called Personalized PageRank, we limit the target pages the surfer can teleport only to a specific set of graph nodes (this is called the preference set or the personalized set because they represent the pages a specific user likes the most). For example, if we \u201cpersonalize\u201d the PageRanks by only allowing the surfer to teleport to Medium, we get the following rankings:", "Note that the random-surfer model makes no requirement for what the graph is modelling. In the end, what we obtain is a ranking of nodes in the graph according to their relevance and importance, regardless of what the nodes represent.", "So, we should be able to do something similar with out movie-graph database, right? Yes! The global PageRank of the previous knowledge graph gives us the following rankings:", "This would be the rankings we would use to present products to a newly visiting user, yielding a top-three of (1) \u201cI Am Malala\u201d, (2) \u201cCloud Atlas (movie)\u201d, and (3) \u201cCatch Me If You Can\u201d. As such, we would recommend that the user reads \u201cI Am Malala\u201d.", "Let\u2019s imagine that the user accepts our recommendation, reads \u201cI Am Malala\u201d and enjoys it. What information does that give us? Also, how should the recommendation change as a result of this information? If nothing changes, we would recommend that the user watches the \u201cCloud Atlas\u201d movie next, but perhaps the fact that they liked \u201cI Am Malala\u201d can be put to better use. An idea could be to simply personalize the PageRank towards \u201cI Am Malala\u201d. This will push nodes closely related to \u201cI Am Malala\u201d upwards through the ranks. As an added bonus, this allows us to limit the computation to the locally affected nodes.", "Another quite significant advantage of Personalized PageRank is that we can personalize the ranks even further by assigning user-specific relation weights. For example, if a user likes seeing the same actors in different movies, we could weigh the Stars and Co-stars relations highly for that user.", "Running Personalized PageRank over the same graph with \u201cI Am Malala\u201d as the only source node, we get the following rankings:", "With that small change, we would now recommend that the user either watches \u201cCatch Me If You Can\u201d or reads \u201cCloud Atlas (Book)\u201d instead of watching \u201cCloud Atlas\u201d.", "To further demonstrate Personalized PageRank\u2019s ability to adapt to user preferences, let\u2019s instead assume we have a user who has read and enjoyed the \u201cCloud Atlas\u201d book. In this case, we simply change the personalized set to that containing only \u201cCloud Atlas (Book)\u201d and get the following rankings:", "So, with no further intervention from our side, we now have a personalised top-three for this user: (1) \u201cI Am Malala (Book)\u201d, (2) \u201cCloud Atlas\u201d, (3) \u201cCatch Me If You Can\u201d.", "Personalized PageRank has been proven to be a very effective ranking tool in the context of personalized recommendations (Shams et. al 2016), and is even used by Twitter to present users with accounts they may want to follow (Gupta et. al 2013). Unfortunately, in it\u2019s most basic form, PageRank is not a scalable algorithm as it requires several traversals over a potentially huge graph. Luckily for us, Gallo et. al 2020 presents a way to use particle filtering to very efficiently approximate PageRank over a knowledge graph. We will use this approach in the implementation later.", "As mentioned earlier, we have used this approach to recommendations to build a recommender system on https://mindreader.tech. Behind the scenes, the users of MindReader are collaboratively building a dataset unlike any other dataset that is used even in the newest research in recommender systems \u2014 you can take a look and download the dataset here. If you need something to watch tonight and want and help researchers come up with newer and better models for recommendation, try and see if MindReader can guess your movie-mind!", "In the following, we\u2019ll go through how we built MindReader. But first, some context:", "MindReader is first and foremost a recommendation system for collaboratively building datasets. What makes the MindReader dataset stand out from the other well-established datasets in the research community is that we not only know how users have rated, for instance, horror and action movies starring Matt Damon, we know specifically what the users think about the genres and the actor. For the first time, researchers are able to see if the assumptions made during preference elicitation (e.g., \u201cDrew likes Sci-Fi and Comedy because he likes Hitchhiker\u2019s Guide to the Galaxy\u201d) actually holds, since we now know how Drew rates these entities. Further, we\u2019ll be able to try correctly inferring a user\u2019s movie preferences from broader entities such as genres or subjects \u2014 a very useful approach in the cold-start setting, where we initially know nothing about the user.", "The game first collects a number of ratings from the user, ranging between ratings on movies, genres, actors and directors:", "Note that in Neo4j, the \u201cRelated movies\u201d section is extremely simple to implement \u2014 simply show the 1-hop neighbors in the graph that happen to be movies as we will show later. It would be less intuitive to design and require more complex queries in a traditional SQL database.", "After collecting enough ratings, we then present two lists: what we think the user will like and dislike. The path to generating these lists is surprisingly short \u2014 simply run Personalized PageRank with the nodes the user has liked and disliked as the source nodes, respectively, sort the nodes by their assigned rank, and pick the top 10:", "We found it surprisingly straightforward to use Neo4j with Python, our choice of language for the API. By simply installing the Neo4j Bolt Driver and initialising it with the database credentials, we were ready to query the database. However, before diving straight into querying from Python, we made heavy use of the Neo4j Browser, which allowed us to query our graph and visualise the results. This allowed us to experiment with queries and gain a better understanding of both our graph structure and the Cypher query language.", "For example, we can visualise the people related to the movie Cloud Atlas with the following query (example borrowed from the Guide to Cypher Basics):", "We only use two Cypher queries: one we use to fetch nodes to ask about (e.g., genres, actors, and directors) and one to recommend movies. Both utilise a PageRank score, and as mentioned before, we use particle filtering, a Neo4j plugin that approximates (Personalized) PageRank significantly faster than the default implementation.", "First, let\u2019s store the URIs of the nodes liked by the current user in $uris. These comprise our personalization set - the source nodes that the random surfer can teleport to. We collect the nodes corresponding to these URIs and pass them to the particlefiltering algorithm:", "This gives us the nodes\u2019 identifiers nodeId and their Personalized PageRank scores score.", "Of course, we do not want to return nodes that have already been seen by the user. A simple fix is having a list of all entity URIs seen by a user in the $seen variable, which we filter out with the command:", "We could in principle return everything here, but we noticed that users had a difficult time recognizing an actor or understanding a subject without having some related information. We therefore find all related movies to the entities. In our graph, only movies with a sequel or prequel are connected. If we therefore simply used the MATCH keyword, we would get rid of all movies without a movie edge. To get around that issue, we conduct an OPTIONAL MATCH and use collect() to limit the related movies to the 5 movies with the highest global PageRank.", "And that\u2019s it! We can now return, extracting the information we need:", "With Neo4j, we are therefore able to find relevant nodes and easily extracting data of high relevance without implementing an otherwise complex recommender system.", "If we were to do this with more traditional SQL technologies, we would need to model the nodes and edges in tables, extract the nodes for every query including several joins, build a graph in a separate graph tool and compute the rankings from there. However, because of the power of graph databases, this all happens directly on the database.", "In this article, we have described how knowledge graphs and graph databases can be leveraged very effectively to generate product recommendations, regardless of the domain of the application. We also show how we have used Neo4j to build MindReader, our considerations during the process and how our choice of database management system has benefited us.", "We strongly encourage the reader to consider how modeling a problem with graphs can provide new powerful tools to very easily solve complex problems. Neo4j has allowed us to very easily implement a recommendation system that allows users to collaboratively build a dataset unlike any other. In our case, even considering our higher familiarity with SQL, achieving the same result with traditional database technologies would have been much more complex and would likely not perform as well. This new dataset, which we now share to advance research in personalized recommendation, will open a wide range of new avenues of research.", "If you need something to watch tonight, you should try out MindReader on our website. In doing so, you help advance research and extend the most exciting dataset in the personalized recommendation research community. If you are a researcher or a data-scientist, the full MindReader dataset is available for download for anyone interested.", "(Co-authored by Anders Langballe Jakobsen, Theis Jendal, Matteo Lissandrini, Peter Dolog and Katja Hose)", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "MSc. Software Engineering, software engineer at Ambolt, freelancer, and machine learning enthusiast."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F33603a212ad0&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmovie-recommendations-powered-by-knowledge-graphs-and-neo4j-33603a212ad0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmovie-recommendations-powered-by-knowledge-graphs-and-neo4j-33603a212ad0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmovie-recommendations-powered-by-knowledge-graphs-and-neo4j-33603a212ad0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmovie-recommendations-powered-by-knowledge-graphs-and-neo4j-33603a212ad0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----33603a212ad0--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----33603a212ad0--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@anders_90369?source=post_page-----33603a212ad0--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@anders_90369?source=post_page-----33603a212ad0--------------------------------", "anchor_text": "Anders Brams"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8fb23a7e746f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmovie-recommendations-powered-by-knowledge-graphs-and-neo4j-33603a212ad0&user=Anders+Brams&userId=8fb23a7e746f&source=post_page-8fb23a7e746f----33603a212ad0---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F33603a212ad0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmovie-recommendations-powered-by-knowledge-graphs-and-neo4j-33603a212ad0&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F33603a212ad0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmovie-recommendations-powered-by-knowledge-graphs-and-neo4j-33603a212ad0&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "http://people.cs.aau.dk/~matteo/pdf/EDBT20-poster.pdf", "anchor_text": "Lissandrini et. al"}, {"url": "https://mindreader.tech/", "anchor_text": "MindReader"}, {"url": "https://neo4j.com/blog/data-modeling-basics/?ref=blog", "anchor_text": "more straightforward"}, {"url": "https://neo4j.com/whitepapers/overcoming-sql-strain-graph-databases/?ref=blog", "anchor_text": "not exactly a"}, {"url": "https://neo4j.com/whitepapers/overcoming-sql-strain-graph-databases/?ref=blog", "anchor_text": "very efficient"}, {"url": "https://neo4j.com/whitepapers/overcoming-sql-strain-graph-databases/?ref=blog", "anchor_text": "operation"}, {"url": "https://en.wikipedia.org/wiki/PageRank", "anchor_text": "Personalized PageRank"}, {"url": "https://arxiv.org/pdf/1604.03147.pdf", "anchor_text": "Shams et. al 2016"}, {"url": "https://dl.acm.org/doi/10.1145/2488388.2488433", "anchor_text": "Gupta et. al 2013"}, {"url": "http://people.cs.aau.dk/~matteo/pdf/EDBT20-particle-filtering.pdf", "anchor_text": "Gallo et. al 2020"}, {"url": "https://mindreader.tech/", "anchor_text": "https://mindreader.tech"}, {"url": "https://mindreader.tech/dataset", "anchor_text": "here"}, {"url": "https://mindreader.tech/", "anchor_text": "MindReader can guess your movie-mind"}, {"url": "https://mindreader.tech/", "anchor_text": "MindReader"}, {"url": "https://mindreader.tech/", "anchor_text": "MindReader"}, {"url": "https://neo4j.com/docs/api/python-driver/current/", "anchor_text": "Neo4j Bolt Driver"}, {"url": "https://neo4j.com/developer/guide-cypher-basics/", "anchor_text": "Guide to Cypher Basics"}, {"url": "https://github.com/DenisGallo/Neo4j-ParticleFiltering", "anchor_text": "particle filtering"}, {"url": "https://mindreader.tech/", "anchor_text": "MindReader"}, {"url": "https://mindreader.tech/dataset", "anchor_text": "dataset unlike any other"}, {"url": "https://mindreader.tech/", "anchor_text": "try out MindReader on our website"}, {"url": "https://mindreader.tech/dataset", "anchor_text": "download"}, {"url": "https://medium.com/@anderslangballejakobsen", "anchor_text": "Anders Langballe Jakobsen"}, {"url": "https://medium.com/@theisjendal", "anchor_text": "Theis Jendal"}, {"url": "http://people.cs.aau.dk/~matteo/", "anchor_text": "Matteo Lissandrini"}, {"url": "https://peterdolog.wordpress.com/", "anchor_text": "Peter Dolog"}, {"url": "http://people.cs.aau.dk/~khose/", "anchor_text": "Katja Hose"}, {"url": "https://medium.com/tag/neo4j?source=post_page-----33603a212ad0---------------neo4j-----------------", "anchor_text": "Neo4j"}, {"url": "https://medium.com/tag/graph-database?source=post_page-----33603a212ad0---------------graph_database-----------------", "anchor_text": "Graph Database"}, {"url": "https://medium.com/tag/recommendation-system?source=post_page-----33603a212ad0---------------recommendation_system-----------------", "anchor_text": "Recommendation System"}, {"url": "https://medium.com/tag/pagerank?source=post_page-----33603a212ad0---------------pagerank-----------------", "anchor_text": "Pagerank"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----33603a212ad0---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F33603a212ad0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmovie-recommendations-powered-by-knowledge-graphs-and-neo4j-33603a212ad0&user=Anders+Brams&userId=8fb23a7e746f&source=-----33603a212ad0---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F33603a212ad0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmovie-recommendations-powered-by-knowledge-graphs-and-neo4j-33603a212ad0&user=Anders+Brams&userId=8fb23a7e746f&source=-----33603a212ad0---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F33603a212ad0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmovie-recommendations-powered-by-knowledge-graphs-and-neo4j-33603a212ad0&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----33603a212ad0--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F33603a212ad0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmovie-recommendations-powered-by-knowledge-graphs-and-neo4j-33603a212ad0&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----33603a212ad0---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----33603a212ad0--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----33603a212ad0--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----33603a212ad0--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----33603a212ad0--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----33603a212ad0--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----33603a212ad0--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----33603a212ad0--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----33603a212ad0--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@anders_90369?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@anders_90369?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Anders Brams"}, {"url": "https://medium.com/@anders_90369/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "26 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8fb23a7e746f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmovie-recommendations-powered-by-knowledge-graphs-and-neo4j-33603a212ad0&user=Anders+Brams&userId=8fb23a7e746f&source=post_page-8fb23a7e746f--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fd868ae9be1d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmovie-recommendations-powered-by-knowledge-graphs-and-neo4j-33603a212ad0&newsletterV3=8fb23a7e746f&newsletterV3Id=d868ae9be1d5&user=Anders+Brams&userId=8fb23a7e746f&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}