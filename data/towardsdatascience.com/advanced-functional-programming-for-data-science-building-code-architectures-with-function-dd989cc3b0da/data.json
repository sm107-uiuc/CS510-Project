{"url": "https://towardsdatascience.com/advanced-functional-programming-for-data-science-building-code-architectures-with-function-dd989cc3b0da", "time": 1683006976.6985269, "path": "towardsdatascience.com/advanced-functional-programming-for-data-science-building-code-architectures-with-function-dd989cc3b0da/", "webpage": {"metadata": {"title": "Advanced functional programming for data science: building code architectures with function operators | by Paul Hiemstra | Towards Data Science", "h1": "Advanced functional programming for data science: building code architectures with function operators", "description": "Of several programming paradigms, functional programming (FP) fits data science very nicely. The core concept in functional programming is a function, hence the name functional programming. Each\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/PaulHiemstra/function_operator_article", "anchor_text": "the article on Github", "paragraph_index": 0}, {"url": "http://www.eecs.ucf.edu/~leavens/ComS541Fall97/hw-pages/paradigms/major.html", "anchor_text": "several programming paradigms", "paragraph_index": 1}, {"url": "https://en.wikipedia.org/wiki/Functional_programming", "anchor_text": "functional programming", "paragraph_index": 1}, {"url": "http://adv-r.had.co.nz/Function-operators.html", "anchor_text": "function operator", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/Higher-order_function", "anchor_text": "higher order function", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/Array_programming", "anchor_text": "vectorize", "paragraph_index": 3}, {"url": "https://matthew-brett.github.io/teaching/global_scope.html", "anchor_text": "scope", "paragraph_index": 6}, {"url": "https://www.programiz.com/python-programming/global-local-nonlocal-variables", "anchor_text": "nonlocal", "paragraph_index": 6}, {"url": "https://www.programiz.com/python-programming/closure", "anchor_text": "closure", "paragraph_index": 6}, {"url": "https://stat.ethz.ch/R-manual/R-devel/library/base/html/Vectorize.html", "anchor_text": "Vectorize", "paragraph_index": 9}, {"url": "https://github.com/PaulHiemstra/function_operator_article", "anchor_text": "the article on Github", "paragraph_index": 17}], "all_paragraphs": ["You can also read the article on Github including full reproducible code", "Of several programming paradigms, functional programming (FP) fits data science very nicely. The core concept in functional programming is a function, hence the name functional programming. Each function takes data as input and returns a modified version of that data. For example, the mean function takes a series of numbers and returns the mean of those numbers. Core in this context is that the function has no side effects, i.e. the outcome of the function does not change the state outside the function, nor is the outcome influenced by that outside state. This makes FP functions very predictable: given a certain input, the output is always the same.", "So, at first glance, our notebooks will have two components: data, and functions which operate on that data. For the majority of cases, these two will be sufficient to write your notebooks. However, when writing more complex code, say a library like `sklearn`, a number of other FP concepts will come in handy. One such concept that we will focus on in this article is a so-called function operator, which is a higher order function. A function operator takes one or several functions as input and returns a new function as its result. A good example is a progress bar function operator which can add a progress bar to any data processing function. These function operators expand our options in being able to create flexible and reuseable FP code.", "The focus of this artcile is on building a function operator, *vectorize*, which can vectorize any existing non-vectorized function. You will learn about the following topics:", "In this article, we first build a simple function operator and expand that into the vectorisation function operator. Finally, I will wrap up with some final thoughts on how to use function operators to build a code architecture.", "To ease us into function operators, we will first build a very simple one. This function operator adds a counter to the input function which tracks how often the function is called:", "The core trick here is to wrap input_function with internal_function. The return of internal_function is simply calling the input function, making the output of the new function equal to the input_function. The change in behavior is in the few lines of code before that: the amount of times called is printed to the screen, and the counter is incremented by one. Note that the number_of_times_called variable is defined outside the scope of the internal_function, and that we use nonlocal to be able to access that variable in spite of it being out of scope. The key to number_of_times_called being persistent across all the times the function is called is the fact that internal_function remembers the original scope it was created in, the scope of count_times_called. This functional programming technique is called a closure.", "So, now we have two classes of functions: a function which performs an operation (do_nothing) and a function operator which alters its behavior (count_times_called). Given a set of operation functions and function operators, we can a build a quite complex and flexible hierarchy of functions that we can mix and match to write our notebooks. Good examples of potential function operators are:", "Vectorisation means that you can pass a vector to an input argument of a function, and the function will perform the appropriate action. For example, if you pass a list of files to a function that reads csv files, it will read all the files. Sadly, pandas.read_csv does not support this kind of behavior. In this section, we will build a vectorisation function operator which will allow us to upgrade pandas.read_csv and allow you to pass a vector of input files.", "First, we will build a base version of our vectorisation function operator, which will be heavily inspired by the R function Vectorize:", "The key code here is the list comprehension at the end of the internal_function, which actually vectorizes the input_function by iterating over the list given as input. Note that we need to know which of the input variables should be vectorised in order to write the list comprehension accurately. So, we first grab the appropriate input argument from the input dictionary (kwargs), and then delete it from the list using del. This allows us to accurately construct the call to input_function using the list comprehension.", "This code gives us a version of `pandas.read_csv` to which you can pass a list of files, and the function returns a list of Pandas DataFrame\u2019s with the contents of the six csv files. Note the following limitations of the function operator compared to its R counterpart:", "The code below adds this last feature:", "Now our function operator adds both vectorisation and aggregation of the final result into one big DataFrame. This, in my opinion, makes pandas.read_csv a lot more expressive: with less code you convey the same intent. This expressiveness makes the code much more readable, and to-the-point in your notebooks.", "Note that the code above is a bit more verbose than strictly needed, I could simply use `pd.concat` outright without the `try_to_simplify` function. However, in this current form the code can support simplifying in many ways depending on what the function returns.", "Using data, functions that operate on that data, and function operators that operate on those functions we can build quite elaborate code architectures. For examples, we have the read_csv function that reads data, and the vectorize function operator that allows us to read multiple files. We could also apply a progress bar function operator to the vectorised read_csv function to also track the progress when reading a lot of csv files:", "here, read_data is the composite function which combines all the properties of the function and both function operators. From the large set of functions and function operators we can compose complex functions. This allows us to create simple, easy to understand code components that can be combined to create much more complex code. This kind of function operator based code architecture can be very powerful in a data science context.", "You can also read the article on Github including full reproducible code", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Teacher and practitioner of data science."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fdd989cc3b0da&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-functional-programming-for-data-science-building-code-architectures-with-function-dd989cc3b0da&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-functional-programming-for-data-science-building-code-architectures-with-function-dd989cc3b0da&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-functional-programming-for-data-science-building-code-architectures-with-function-dd989cc3b0da&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-functional-programming-for-data-science-building-code-architectures-with-function-dd989cc3b0da&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----dd989cc3b0da--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----dd989cc3b0da--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@p.h.hiemstra?source=post_page-----dd989cc3b0da--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@p.h.hiemstra?source=post_page-----dd989cc3b0da--------------------------------", "anchor_text": "Paul Hiemstra"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F256545883c97&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-functional-programming-for-data-science-building-code-architectures-with-function-dd989cc3b0da&user=Paul+Hiemstra&userId=256545883c97&source=post_page-256545883c97----dd989cc3b0da---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdd989cc3b0da&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-functional-programming-for-data-science-building-code-architectures-with-function-dd989cc3b0da&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdd989cc3b0da&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-functional-programming-for-data-science-building-code-architectures-with-function-dd989cc3b0da&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/PaulHiemstra/function_operator_article", "anchor_text": "the article on Github"}, {"url": "http://www.eecs.ucf.edu/~leavens/ComS541Fall97/hw-pages/paradigms/major.html", "anchor_text": "several programming paradigms"}, {"url": "https://en.wikipedia.org/wiki/Functional_programming", "anchor_text": "functional programming"}, {"url": "http://adv-r.had.co.nz/Function-operators.html", "anchor_text": "function operator"}, {"url": "https://en.wikipedia.org/wiki/Higher-order_function", "anchor_text": "higher order function"}, {"url": "https://en.wikipedia.org/wiki/Array_programming", "anchor_text": "vectorize"}, {"url": "https://unsplash.com/@roman_lazygeek?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Roman Mager"}, {"url": "https://unsplash.com/s/photos/math?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://matthew-brett.github.io/teaching/global_scope.html", "anchor_text": "scope"}, {"url": "https://www.programiz.com/python-programming/global-local-nonlocal-variables", "anchor_text": "nonlocal"}, {"url": "https://www.programiz.com/python-programming/closure", "anchor_text": "closure"}, {"url": "https://github.com/tqdm/tqdm", "anchor_text": "tqdm"}, {"url": "https://towardsdatascience.com/memoization-in-python-57c0a738179a", "anchor_text": "memoisation"}, {"url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html", "anchor_text": "GridSearchCV"}, {"url": "https://stat.ethz.ch/R-manual/R-devel/library/base/html/Vectorize.html", "anchor_text": "Vectorize"}, {"url": "https://github.com/PaulHiemstra/function_operator_article", "anchor_text": "the article on Github"}, {"url": "https://medium.com/tag/functional-programming?source=post_page-----dd989cc3b0da---------------functional_programming-----------------", "anchor_text": "Functional Programming"}, {"url": "https://medium.com/tag/jupyter-notebook?source=post_page-----dd989cc3b0da---------------jupyter_notebook-----------------", "anchor_text": "Jupyter Notebook"}, {"url": "https://medium.com/tag/data-science?source=post_page-----dd989cc3b0da---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/code-architecture?source=post_page-----dd989cc3b0da---------------code_architecture-----------------", "anchor_text": "Code Architecture"}, {"url": "https://medium.com/tag/closures-functions?source=post_page-----dd989cc3b0da---------------closures_functions-----------------", "anchor_text": "Closures Functions"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fdd989cc3b0da&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-functional-programming-for-data-science-building-code-architectures-with-function-dd989cc3b0da&user=Paul+Hiemstra&userId=256545883c97&source=-----dd989cc3b0da---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fdd989cc3b0da&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-functional-programming-for-data-science-building-code-architectures-with-function-dd989cc3b0da&user=Paul+Hiemstra&userId=256545883c97&source=-----dd989cc3b0da---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdd989cc3b0da&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-functional-programming-for-data-science-building-code-architectures-with-function-dd989cc3b0da&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----dd989cc3b0da--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fdd989cc3b0da&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-functional-programming-for-data-science-building-code-architectures-with-function-dd989cc3b0da&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----dd989cc3b0da---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----dd989cc3b0da--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----dd989cc3b0da--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----dd989cc3b0da--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----dd989cc3b0da--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----dd989cc3b0da--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----dd989cc3b0da--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----dd989cc3b0da--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----dd989cc3b0da--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@p.h.hiemstra?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@p.h.hiemstra?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Paul Hiemstra"}, {"url": "https://medium.com/@p.h.hiemstra/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "493 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F256545883c97&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-functional-programming-for-data-science-building-code-architectures-with-function-dd989cc3b0da&user=Paul+Hiemstra&userId=256545883c97&source=post_page-256545883c97--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F22dfc5b863a2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-functional-programming-for-data-science-building-code-architectures-with-function-dd989cc3b0da&newsletterV3=256545883c97&newsletterV3Id=22dfc5b863a2&user=Paul+Hiemstra&userId=256545883c97&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}