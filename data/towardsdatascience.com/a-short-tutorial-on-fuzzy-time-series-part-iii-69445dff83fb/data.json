{"url": "https://towardsdatascience.com/a-short-tutorial-on-fuzzy-time-series-part-iii-69445dff83fb", "time": 1682995642.262899, "path": "towardsdatascience.com/a-short-tutorial-on-fuzzy-time-series-part-iii-69445dff83fb/", "webpage": {"metadata": {"title": "A short tutorial on Fuzzy Time Series \u2014 Part III | by Petr\u00f4nio Silva | Towards Data Science", "h1": "A short tutorial on Fuzzy Time Series \u2014 Part III", "description": "Hi folks! It was a long time since I published the first and second parts of this tutorial. Meanwhile I had the opportunity to talk with many people that applied FTS methods on several distinct\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/a-short-tutorial-on-fuzzy-time-series-dcc6d4eb1b15", "anchor_text": "first", "paragraph_index": 0}, {"url": "https://towardsdatascience.com/a-short-tutorial-on-fuzzy-time-series-part-ii-with-an-case-study-on-solar-energy-bda362ecca6d", "anchor_text": "second", "paragraph_index": 0}, {"url": "https://en.wikipedia.org/wiki/Uncertainty", "anchor_text": "uncertainty", "paragraph_index": 1}, {"url": "http://bit.ly/short_tutorial_colab3", "anchor_text": "http://bit.ly/short_tutorial_colab3", "paragraph_index": 3}, {"url": "https://en.wikipedia.org/wiki/Conditional_expectation", "anchor_text": "conditional expectation", "paragraph_index": 4}, {"url": "https://en.wikipedia.org/wiki/Conditional_variance", "anchor_text": "conditional variance", "paragraph_index": 5}, {"url": "http://doi.org/10.2307/2527341", "anchor_text": "coverage", "paragraph_index": 9}, {"url": "https://www.stat.washington.edu/raftery/Research/PDF/Gneiting2007jrssb.pdf", "anchor_text": "calibration, sharpness", "paragraph_index": 9}, {"url": "http://doi.org/10.1080/01621459.1972.10481224", "anchor_text": "Winkler Score", "paragraph_index": 9}, {"url": "https://en.wikipedia.org/wiki/Probability_distribution", "anchor_text": "probability distribution", "paragraph_index": 11}, {"url": "https://en.wikipedia.org/wiki/Quantile", "anchor_text": "quantiles", "paragraph_index": 12}, {"url": "https://en.wikipedia.org/wiki/Cumulative_distribution_function", "anchor_text": "cumulative distribution", "paragraph_index": 12}, {"url": "https://en.wikipedia.org/wiki/Expected_value", "anchor_text": "expected value", "paragraph_index": 12}, {"url": "https://www.lokad.com/continuous-ranked-probability-score", "anchor_text": "Continuous Rank Probability Score (CRPS)", "paragraph_index": 13}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.probabilistic.html#module-pyFTS.probabilistic.ProbabilityDistribution", "anchor_text": "pyFTS.probability.ProbabilityDistribution", "paragraph_index": 20}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.probabilistic.html?highlight=probabilitydistribution#pyFTS.probabilistic.ProbabilityDistribution.ProbabilityDistribution.density", "anchor_text": "density", "paragraph_index": 20}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.probabilistic.html?highlight=probabilitydistribution#pyFTS.probabilistic.ProbabilityDistribution.ProbabilityDistribution.cumulative", "anchor_text": "cumulative", "paragraph_index": 20}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.probabilistic.html?highlight=probabilitydistribution#pyFTS.probabilistic.ProbabilityDistribution.ProbabilityDistribution.quantile", "anchor_text": "quantile", "paragraph_index": 20}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.probabilistic.html?highlight=probabilitydistribution#pyFTS.probabilistic.ProbabilityDistribution.ProbabilityDistribution.plot", "anchor_text": "plot", "paragraph_index": 20}, {"url": "https://en.wikipedia.org/wiki/Stationary_process", "anchor_text": "Stationarity", "paragraph_index": 28}, {"url": "https://www.quora.com/What-is-the-purpose-of-differencing-in-time-series-models", "anchor_text": "difference transformation", "paragraph_index": 29}, {"url": "https://en.wikipedia.org/wiki/Concept_drift", "anchor_text": "oncept drifts", "paragraph_index": 36}, {"url": "https://en.wikipedia.org/wiki/Outlier", "anchor_text": "outlier", "paragraph_index": 37}, {"url": "https://dl.acm.org/citation.cfm?id=2523813", "anchor_text": "complexity of the problem", "paragraph_index": 38}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.data.html", "anchor_text": "pyFTS.data", "paragraph_index": 42}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.data.html#module-pyFTS.data.artificial", "anchor_text": "data.artificial.SignalEmulator", "paragraph_index": 42}, {"url": "https://en.wikipedia.org/wiki/Method_chaining", "anchor_text": "method chain", "paragraph_index": 42}, {"url": "https://en.wikipedia.org/wiki/Fluent_interface", "anchor_text": "fluent interface", "paragraph_index": 42}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.data.html#pyFTS.data.artificial.SignalEmulator.stationary_gaussian", "anchor_text": "stationary_signal", "paragraph_index": 42}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.data.html#pyFTS.data.artificial.SignalEmulator.incremental_gaussian", "anchor_text": "incremental_gaussian", "paragraph_index": 42}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.data.html#pyFTS.data.artificial.SignalEmulator.periodic_gaussian", "anchor_text": "periodic_gaussian", "paragraph_index": 42}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.data.html#pyFTS.data.artificial.SignalEmulator.blip", "anchor_text": "blip", "paragraph_index": 42}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.data.html#pyFTS.data.artificial.SignalEmulator.run", "anchor_text": "run", "paragraph_index": 42}, {"url": "http://bit.ly/short_tutorial_colab3", "anchor_text": "Now let\u2019s put it all together, create 3 non-stationary time series, with concept drifts and employ the above presented methods to forecast them", "paragraph_index": 43}], "all_paragraphs": ["Hi folks! It was a long time since I published the first and second parts of this tutorial. Meanwhile I had the opportunity to talk with many people that applied FTS methods on several distinct fields, and they helped me to improve pyFTS library by fixing some bugs and expanding its features and usability.", "We have been dealing with uncertainty since the beginning of this tutorial. We found ways to model and describe the temporal behavior of the time series using fuzzy sets, but we did not take into account the uncertainty of our forecasts. The forecasting uncertainty is like a fog: if you are looking closer you will see blurred and it may not affect you too much, but if you want to look more ahead\u2026", "So, once again it is time to go deeper and explore more forecasting types and also new methods, this time I will focus on non-stationary time series, concept drifts, etc.", "All examples of this tutorial are available on Google Colab, on http://bit.ly/short_tutorial_colab3 . Feel free to get in touch, give feedback and ask questions. Now, let\u2019s move!", "The greatest majority of the forecasting methods produce point forecasts, i.e., a single scalar forecast. Given a numeric time series Y and its individual values y(t) \u2208 Y, a point forecast is usually a conditional expectation \u0177(t+1) = \ud835\udd3c[Y |y(t), \u2026]. This number represents the best guess for Y at time t+1 given what we know about Y, its past values t, t-1, \u2026 Regardless how good our estimator is, it is still a guess and not an exact certain value. In other words, behind that number there is uncertainty hidden in it.", "The problem with the point forecasting is exactly this: it does not inform the uncertainty around it. A good starting point is the conditional variance Var[ y(t+1) | y(t) ], but it is not usually informed or even known.", "There are ways to deal with this limitation of the point forecasts, and they are the interval and probabilistic forecasts.", "A prediction interval \ud835\udd40 is a tuple \ud835\udd40 = [u, l], where u is the upper uncertainty bound and l is the lower uncertainty bound, asserting that the estimate will probably fall inside this range, \u0177(t+1) \u2208 [u, l].", "A confidence interval is a value \u03c3 associated with a confidence level \u03b1 \u2208 [0,1], where \u0177(t+1) \u2208 [ \u0177(t+1)-\u03c3, \u0177(t+1)+\u03c3] with a probability \u03b1. The confidence intervals are usually parametric, i.e., they assume that the uncertainty around the predicted value \u0177(t+1) is described by a Gaussian pdf.", "There are several ways to measure the accuracy of an interval forecast and the simplest one is the coverage (that indicates the percentage of true values that fell inside the interval), calibration, sharpness, etc. The Winkler Score is known to embody several aspects of the intervals in one measure", "Where \ud835\udd40 = [u, l], x is the true value, \u03b1 is the confidence level and \ud835\udfd9(condition) = {1 if condition is true, 0 otherwise }.", "A probabilistic forecast is a probability distribution P: U \u2192[0, 1], where U is the Universe of Discourse of Y, constrained to \u2211P(x) = 1, \u2200x \u2208 U. It means that we will estimate, for each possible value x of U, a probability \u03c0 that \u0177(t+1) = x, or in other words: P(\u0177(t+1) = x) = \u03c0, 0 \u2264 \u03c0 \u22641 This is the most complete way to represent the uncertainty of a forecast, and give to us the landscape of the possible values that \u0177(t+1) can assume with its degrees of probability.", "With the probability distribution P we also can calculate \u03b1 confidence intervals (using \u03b1 and 1-\u03b1 quantiles of the cumulative distribution F) and produce a point forecast using the expected value \ud835\udd3c[P] = \u2211xP(x), \u2200x \u2208 U.", "The main accuracy measure for probabilistic forecasts is the Continuous Rank Probability Score (CRPS). In simple terms, the CRPS measures the area of the forecast probability curve before and after the true value x. This measurement informs how close to the true value the probability distribution was. The CRPS is a generalization of MAE to the case of probabilistic forecasts, then lower values of CRPS are better.", "Where F(x) = P(X \u2264 x) is the cumulative distribution function and x is the true value.", "First of all, on pyFTS library every model has boolean flags indicating which type of forecasting it is able to make. All models are point forecasting-enabled but not all of them are interval and probabilistic enabled. If you try to use one of these kinds of forecasting on a model without this skill an exception will be raised.", "To generate interval forecasts in pyFTS you use the same method for the scalar forecasts \u2014 the method predict in the FTS class \u2014 and inform the parameter type=\u2019interval\u2019. The interval forecasting type on predict method generates a list of tuples, each tuple with two values corresponding to a prediction interval \ud835\udd40 = [u, l]. Some models (such as EnsembleFTS and PWFTS) allow the specification of the method of interval.", "In the module pyFTS.common.Util we can find the function plot_interval which allows us to easily draw the intervals:", "The generated intervals try to demonstrate the range of possible variations that the model takes into account. You can see that some models generate wider intervals than others and sometimes (especially on the weighted models that have the thinner intervals) the original values fall outside the interval. The best intervals have balanced widths, neither too wide to show high uncertainty and neither too thin to not cover the real values.", "To generate probabilistic forecasts in pyFTS you also use the method predict in the FTS class and inform the parameter type=\u2019distribution\u2019. The predict method will return a list of ProbabilityDistribution objects. Also, like the intervals the probabilistic forecasting has its own boolean flag to indicate which models are enabled to perform it:", "In contrast to interval forecasting, the probabilistic forecasting has its own class to represent a probability distribution \u2014 the class pyFTS.probability.ProbabilityDistribution. There are several ways to represent this probability distribution that is, by definition, a discrete probability distribution. Some methods of this class have especial interest for us now: density (returns the probability of the input value(s)), cumulative (returns the cumulative probability of the input value(s)), quantile (returns the quantile value of the input value(s)) and plot (plots the probability distribution on the input matplotlib axis).", "Now let\u2019s take a look on some probabilistic forecasting enabled methods on pyFTS:", "Let\u2019s see how the probability forecasting looks like:", "In above pictures the probabilistic forecasting is shown in two different perspectives. The first picture is generated with the method plot_density in the module common.Util, where each probability distribution is plotted as a shade of blue and its intensity corresponds to the probability. This method allows to plot the original time series and the forecast probability distributions on top of it. The second picture shows each probability distribution individually in relation to the universe of discourse using the method plot of the class ProbabilityDistribution.", "Of course it is not everything! We have to consider the interval and probabilistic forecasting for many steps ahead, which we expect to tell us how the uncertainty evolve as the prediction horizon increases. Yes! It is fascinating but I still have many things to show, so I will let it as an exercise for you, ok?", "Let\u2019s walk now on a trickiest road\u2026", "You may remember that old and universally known quote:", "\u201cthe only certainty is that nothing is certain\u201d.", "Yes. Forecasting may be unfair because things change all the time and we have to deal with it. Stationarity means, in layman terms, that the statistical properties of a stochastic process (like their expected value and variance) do not change along the time, whose the ultimate mean is stability. This is awesome for the forecasting models: the test data set will behave exactly as the train data set!", "In other hand, the non-stationarity means that the statistical properties change. But not all non-stationarities are created equal. Some of them are predictable as trend and seasonality. Dealing with seasonality is not tricky, you can use High Order, Seasonal or Multivariate methods (you may remember our last tutorial). To deal with trends it is not too complicated either, you can de-trend the data using a difference transformation.", "Suppose that we split the above time series in half, and call these subsets training and testing data. You can see that the test subset (after the instance number 2000) have values that did not appear before, in the train subset. This is a drawback for most FTS methods: what happens when the input data fall outside the known Universe of Discourse? The model never saw that region before and doesn\u2019t know how to proceed, than it fails tragically. You can also see on the above image that the differentiated time series is much more well behaved and, indeed, it is stationary.", "How can we use the Difference transformation on pyFTS? Just import the Transformations module from pyFTS.common and instantiate it. Don\u2019t forget to inform the transformation to the partitioning method and also add it to the model (with the method append_transformation).", "Look the behavior of the classical Chen\u2019s model with and without the Differential transformation for the NASDAQ dataset:", "While the time series is still fluctuating inside the known Universe of Discourse both models performed well. But when the time series jumped out the Universe of Discourse of the training data, the model without the Differentiate transformation started to deteriorate because it does not know what to do with that unknown data.", "Then the transformations help us not only with trending patterns, but also with the unknown ranges of the universe of discourse.", "But some non-stationarities are unpredictable, and sometimes they are painful to deal with.", "Concept drifts are unforeseen changes (on mean, variance or both) which can happen gradually or suddenly. Some times these drifts occur in cycles (with irregular periods) and, in other scenario, the drift is temporary. There are some questions to answer when a concept drifts happen: Is it temporary? Is the change finished (established) or it will keep changing?", "We have also to make the distinction between concept-drift and outlier (or a blip). Outliers are not change, they belong to the known signal but are rare events.", "Concept drifts are nightmares \u2014 not only FTS methods, other computational intelligence and statistical techniques fear them too \u2014 but we need to learn how to live together them. Despite the complexity of the problem there are some simple (somehow expensive unfortunately) techniques to tackle them.", "All FTS methods we saw before are time invariant methods, which means that they assume that the future fluctuations of the time series will behave according to patterns already happened before. In other words: the behavior of the time series, which was described by the fuzzy temporal rules of the model, will not change in the future.", "This is works fine for many time series (for example the environmental seasonal time series like we studied before) but fails terribly in others (for instance the stock exchange asset prices).", "In that cases we need to apply time variant models,", "The pyFTS.data module contains a lot of non-stationary and concept drifted time series as NASDAQ, TAIEX, S&P 500, Bitcoin, Ethereum, etc. You can also use the class data.artificial.SignalEmulator to create synthetic and complex patterns. The SignalEmulater is designed to work as an method chain / fluent interface, so you can simulate complex signals by chaining methods that produce specific signals that are added to previous one or replacing it. The method stationary_signal creates a simple stationary signal with constant mean and variance, the method incremental_gaussian creates a signal where the mean and/or variance is incremented at each time, the method periodic_gaussian fluctuate the mead and/or variance in constant periods and the blip method adds an outlier on a random location. Every time one of this methods is called its effects are added to the previous signal except if you inform the start parameter \u2014 indicating when (which iteration) the method start to work \u2014 or set the boolean parameter additive to False, making the stop the previous signal and start this new one. To render the whole signal you just need to call the function run.", "Now let\u2019s put it all together, create 3 non-stationary time series, with concept drifts and employ the above presented methods to forecast them:", "Time Variant methods have to balance some kind of exploitation and exploration when dealing with non-stationarities and concept drifts. To exploit what the model already knows \u2014 its memory, the last learned patterns from the data \u2014 or to explore new data and learn new patterns. Each method has its own mechanisms: the Retrainer is controlled by the window_length and batch_size, the Incremental Ensemble for the both and the num_models, the NSFTS uses the magnitude of its own errors to adjust the fuzzy sets . After all, the time spent to adapt to concept drifts is one of the most important aspects of the time variant methods. The same principle we saw in previous tutorials apply in this one: each FTS method has its own features and parameters and the best method will depend on the context.", "Well guys! That\u2019s enough for today, ok?", "In these tutorials we have covered \u2014 even superficially \u2014 a good portion of the time series forecasting field, with their problems and solutions using FTS methods. We did not finished yet! We will always have problems to solve, new improved methods and optimizations.", "In next tutorials I will cover some new approaches, like hyperparameter optimization and how to tackle big time series with distributed computing. See you there guys!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Ph.D. in Computacional Intelligence, Professor at IFNMG, data science and machine intelligence enthusiast at MINDS and {ci\u2202ic}"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F69445dff83fb&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-short-tutorial-on-fuzzy-time-series-part-iii-69445dff83fb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-short-tutorial-on-fuzzy-time-series-part-iii-69445dff83fb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-short-tutorial-on-fuzzy-time-series-part-iii-69445dff83fb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-short-tutorial-on-fuzzy-time-series-part-iii-69445dff83fb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----69445dff83fb--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----69445dff83fb--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@petroniosilva?source=post_page-----69445dff83fb--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@petroniosilva?source=post_page-----69445dff83fb--------------------------------", "anchor_text": "Petr\u00f4nio Silva"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6da782626154&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-short-tutorial-on-fuzzy-time-series-part-iii-69445dff83fb&user=Petr%C3%B4nio+Silva&userId=6da782626154&source=post_page-6da782626154----69445dff83fb---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F69445dff83fb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-short-tutorial-on-fuzzy-time-series-part-iii-69445dff83fb&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F69445dff83fb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-short-tutorial-on-fuzzy-time-series-part-iii-69445dff83fb&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/a-short-tutorial-on-fuzzy-time-series-dcc6d4eb1b15", "anchor_text": "first"}, {"url": "https://towardsdatascience.com/a-short-tutorial-on-fuzzy-time-series-part-ii-with-an-case-study-on-solar-energy-bda362ecca6d", "anchor_text": "second"}, {"url": "https://en.wikipedia.org/wiki/Uncertainty", "anchor_text": "uncertainty"}, {"url": "http://bit.ly/short_tutorial_colab3", "anchor_text": "http://bit.ly/short_tutorial_colab3"}, {"url": "https://en.wikipedia.org/wiki/Conditional_expectation", "anchor_text": "conditional expectation"}, {"url": "https://en.wikipedia.org/wiki/Conditional_variance", "anchor_text": "conditional variance"}, {"url": "http://doi.org/10.2307/2527341", "anchor_text": "coverage"}, {"url": "https://www.stat.washington.edu/raftery/Research/PDF/Gneiting2007jrssb.pdf", "anchor_text": "calibration, sharpness"}, {"url": "http://doi.org/10.1080/01621459.1972.10481224", "anchor_text": "Winkler Score"}, {"url": "https://en.wikipedia.org/wiki/Probability_distribution", "anchor_text": "probability distribution"}, {"url": "https://en.wikipedia.org/wiki/Quantile", "anchor_text": "quantiles"}, {"url": "https://en.wikipedia.org/wiki/Cumulative_distribution_function", "anchor_text": "cumulative distribution"}, {"url": "https://en.wikipedia.org/wiki/Expected_value", "anchor_text": "expected value"}, {"url": "https://www.lokad.com/continuous-ranked-probability-score", "anchor_text": "Continuous Rank Probability Score (CRPS)"}, {"url": "https://doi-org.ez27.periodicos.capes.gov.br/10.1109/SSCI.2016.7850010", "anchor_text": "The method is described here"}, {"url": "http://abricom.org.br/wp-content/uploads/2018/09/cbic-paper-54.pdf", "anchor_text": "A brief description of the method can be found here."}, {"url": "http://bit.ly/short_tutorial_colab3", "anchor_text": "source"}, {"url": "http://bit.ly/short_tutorial_colab3", "anchor_text": "source"}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.probabilistic.html#module-pyFTS.probabilistic.ProbabilityDistribution", "anchor_text": "pyFTS.probability.ProbabilityDistribution"}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.probabilistic.html?highlight=probabilitydistribution#pyFTS.probabilistic.ProbabilityDistribution.ProbabilityDistribution.density", "anchor_text": "density"}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.probabilistic.html?highlight=probabilitydistribution#pyFTS.probabilistic.ProbabilityDistribution.ProbabilityDistribution.cumulative", "anchor_text": "cumulative"}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.probabilistic.html?highlight=probabilitydistribution#pyFTS.probabilistic.ProbabilityDistribution.ProbabilityDistribution.quantile", "anchor_text": "quantile"}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.probabilistic.html?highlight=probabilitydistribution#pyFTS.probabilistic.ProbabilityDistribution.ProbabilityDistribution.plot", "anchor_text": "plot"}, {"url": "https://en.wikipedia.org/wiki/Kernel_density_estimation", "anchor_text": "Kernel Density Estimators (KDE)"}, {"url": "http://bit.ly/short_tutorial_colab3", "anchor_text": "source"}, {"url": "http://bit.ly/short_tutorial_colab3", "anchor_text": "source"}, {"url": "https://en.wikipedia.org/wiki/Stationary_process", "anchor_text": "Stationarity"}, {"url": "https://www.quora.com/What-is-the-purpose-of-differencing-in-time-series-models", "anchor_text": "difference transformation"}, {"url": "http://bit.ly/short_tutorial_colab3", "anchor_text": "source"}, {"url": "http://bit.ly/short_tutorial_colab3", "anchor_text": "source"}, {"url": "https://en.wikipedia.org/wiki/Concept_drift", "anchor_text": "oncept drifts"}, {"url": "https://en.wikipedia.org/wiki/Outlier", "anchor_text": "outlier"}, {"url": "https://dl.acm.org/citation.cfm?id=2523813", "anchor_text": "complexity of the problem"}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.models.incremental.html?highlight=retrainer#pyFTS.models.incremental.TimeVariant.Retrainer", "anchor_text": "incremental.TimeVariant.Retrainer"}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.models.incremental.html?highlight=retrainer#module-pyFTS.models.incremental.IncrementalEnsemble", "anchor_text": "incremental.IncrementalEnsemble"}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.models.nonstationary.html?highlight=nsfts#module-pyFTS.models.nonstationary.nsfts", "anchor_text": "nonstationary.nsfts.NonStationaryFTS"}, {"url": "https://ieeexplore.ieee.org/iel5/91/4601099/04601106.pdf", "anchor_text": "non-stationary fuzzy sets"}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.data.html", "anchor_text": "pyFTS.data"}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.data.html#module-pyFTS.data.artificial", "anchor_text": "data.artificial.SignalEmulator"}, {"url": "https://en.wikipedia.org/wiki/Method_chaining", "anchor_text": "method chain"}, {"url": "https://en.wikipedia.org/wiki/Fluent_interface", "anchor_text": "fluent interface"}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.data.html#pyFTS.data.artificial.SignalEmulator.stationary_gaussian", "anchor_text": "stationary_signal"}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.data.html#pyFTS.data.artificial.SignalEmulator.incremental_gaussian", "anchor_text": "incremental_gaussian"}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.data.html#pyFTS.data.artificial.SignalEmulator.periodic_gaussian", "anchor_text": "periodic_gaussian"}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.data.html#pyFTS.data.artificial.SignalEmulator.blip", "anchor_text": "blip"}, {"url": "https://pyfts.github.io/pyFTS/build/html/pyFTS.data.html#pyFTS.data.artificial.SignalEmulator.run", "anchor_text": "run"}, {"url": "http://bit.ly/short_tutorial_colab3", "anchor_text": "Now let\u2019s put it all together, create 3 non-stationary time series, with concept drifts and employ the above presented methods to forecast them"}, {"url": "http://bit.ly/short_tutorial_colab3", "anchor_text": "source"}, {"url": "https://medium.com/tag/time-series-forecasting?source=post_page-----69445dff83fb---------------time_series_forecasting-----------------", "anchor_text": "Time Series Forecasting"}, {"url": "https://medium.com/tag/probabilistic?source=post_page-----69445dff83fb---------------probabilistic-----------------", "anchor_text": "Probabilistic"}, {"url": "https://medium.com/tag/interval?source=post_page-----69445dff83fb---------------interval-----------------", "anchor_text": "Interval"}, {"url": "https://medium.com/tag/fuzzy-logic?source=post_page-----69445dff83fb---------------fuzzy_logic-----------------", "anchor_text": "Fuzzy Logic"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----69445dff83fb---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F69445dff83fb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-short-tutorial-on-fuzzy-time-series-part-iii-69445dff83fb&user=Petr%C3%B4nio+Silva&userId=6da782626154&source=-----69445dff83fb---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F69445dff83fb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-short-tutorial-on-fuzzy-time-series-part-iii-69445dff83fb&user=Petr%C3%B4nio+Silva&userId=6da782626154&source=-----69445dff83fb---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F69445dff83fb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-short-tutorial-on-fuzzy-time-series-part-iii-69445dff83fb&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----69445dff83fb--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F69445dff83fb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-short-tutorial-on-fuzzy-time-series-part-iii-69445dff83fb&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----69445dff83fb---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----69445dff83fb--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----69445dff83fb--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----69445dff83fb--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----69445dff83fb--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----69445dff83fb--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----69445dff83fb--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----69445dff83fb--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----69445dff83fb--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@petroniosilva?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@petroniosilva?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Petr\u00f4nio Silva"}, {"url": "https://medium.com/@petroniosilva/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "327 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6da782626154&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-short-tutorial-on-fuzzy-time-series-part-iii-69445dff83fb&user=Petr%C3%B4nio+Silva&userId=6da782626154&source=post_page-6da782626154--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff97fb4bb317c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-short-tutorial-on-fuzzy-time-series-part-iii-69445dff83fb&newsletterV3=6da782626154&newsletterV3Id=f97fb4bb317c&user=Petr%C3%B4nio+Silva&userId=6da782626154&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}