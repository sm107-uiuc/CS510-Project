{"url": "https://towardsdatascience.com/easy-matplotlib-legends-with-functional-programming-64615b529118", "time": 1683010672.197113, "path": "towardsdatascience.com/easy-matplotlib-legends-with-functional-programming-64615b529118/", "webpage": {"metadata": {"title": "Easy Matplotlib Legends with Functional Programming | by David S. Fulford | Towards Data Science", "h1": "Easy Matplotlib Legends with Functional Programming", "description": "Matplotlib is the standard Python plotting library. It can do nearly anything you might require, and produces publication-quality graphics. However, it does tend to be a bit verbose. One example of\u2026"}, "outgoing_paragraph_urls": [{"url": "https://en.wikipedia.org/wiki/Map_(higher-order_function)", "anchor_text": "map a function over that sequence", "paragraph_index": 8}, {"url": "https://docs.python.org/2/library/itertools.html#itertools.chain", "anchor_text": "chain()", "paragraph_index": 9}], "all_paragraphs": ["Matplotlib is the standard Python plotting library. It can do nearly anything you might require, and produces publication-quality graphics. However, it does tend to be a bit verbose. One example of this is the amount of code required to construct a complete legend when a plot contains multiple axes.", "Thankfully, the Python standard library, itertools, can be used to develop a simple function that gathers all labels across all axes to combine them into a single legend.", "Let\u2019s show by example. Consider the following data of four various functions \u2014 a linear function, a logarithmic function, an exponential function, and a power function. Because we force the intercept for each function to zero (or one for the exponential and power functions), we can easily compute the slope for each such that they evaluate as f(x=1000) = 100 for each function. Let\u2019s first import numpy and matplotlib and evaluate our functions:", "We can then plot these for comparison:", "Pretty simple, right? However, what if we want to linearize each function? We can do this graphically by using various combinations of logarithmic axes. This means that we\u2019d need to plot each function on its own axis:", "Well, we\u2019ve linearized each function\u2026 but we now have a legend for each plot, as opposed to a single legend! The standard way of working through this problem is to assign each call to plot() to a variable, and then combine these when we call plt.legend():", "This works \u2014 however, there are a couple of issues. First, as we mentioned in the introduction, it\u2019s quite verbose. As our plots become more complex, we must assign numerous temporary variables. Second, we must supply these in the correct order to the legend. Third, we must write out labels in the call to the legend, as opposed to keeping them with the actual plot call for the relevant line.", "So what can we do? Ideally, we\u2019d be able to programmatically get the sequences of handles and labels for each axis, combine them, and pass them to plt.legend(). matplotlib does have a function to obtain the handles and labels! We can call ax.get_legend_handles_labels(). Unfortunately, we have to call this for each axis, which means we\u2019d still need to write a for loop and append the handle and label to a list. This means we need a way to get all the axes automatically as well\u2026 otherwise, we\u2019ve just exchanged manually typing out each line for manually typing out each axis!", "Fortunately, the plt.Figure class does contain an axes attribute which is a sequence of the axes. But we still haven\u2019t yet solved the need to iterate over each axis. The solution lies in taking a functional programming approach. Rather than imperative programming where we write a control structure to loop over some sequence of values, we can instead use functional programming concepts to map a function over that sequence. itertools is our go-to for this type of technique.", "itertools is a standard Python library that contains multiple useful functions. We\u2019ll be using chain(), which will, effectively, \u201ccombine\u201d multiple Iterable into a single Iterable (i.e., like links in a chain). While chain() operates on sequence of arbitrary-length arguments, what if we have a single Iterable of Iterable? In that case, we have another function, chain.from_iterable(). Here\u2019s a simple example to illustrate how these work:", "Another function we\u2019ll need is zip(). This function takes a sequence of Iterable and returns a Iterable of Iterable where the first Iterable is the first item from each argument, the second is the second item from each argument, etc. There is no zip.from_iterable() but we can simply \u201csplat\u201d the Iterable using the * operator. Let\u2019s illustrate this one as well:", "A list comprehension in Python is identical (in practice) to a map, so we\u2019ll use the idiom of the language to write our function. First, we get the handles and labels, which give us [[handle_1, handle_2, ...], [label_1, label_2, ...]].", "Last, we use chain() to combine all of the handles into a single Iterable, and all of the labels into a single Iterable, and return a Tuple[handles, labels]. This is then unpacked in the assignment.", "If a sequence of axes was passed in the function call instead of a figure, we simply add a chain() to combined the fig argument with the rest of the args.", "We see in the type annotations that this function can take either a plt.Figure or a sequence of plt.Axes. It\u2019s easiest to just pass the figure. However, if we want to change ordering of the handles in our legend, we could manually pass the axes. The function returns a dictionary we can then use with the splat operator (**) to unpack as keyword arguments to plt.legend(). Let\u2019s use our new function:", "And there we have it! No matter how many axes we\u2019ve created, our function will always add each line to our legend. Even better, we can easily control which lines are added to the legend by whether or not we supply the label argument when we plot the line. This greatly simplifies the construction of complex plots with multiple axes. No need to manually keep track of additional variables and their order when we can control what we need as we plot each line.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "A reservoir engineer straddling the domains of physics-based workflows, data engineering, and machine learning."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F64615b529118&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasy-matplotlib-legends-with-functional-programming-64615b529118&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasy-matplotlib-legends-with-functional-programming-64615b529118&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasy-matplotlib-legends-with-functional-programming-64615b529118&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasy-matplotlib-legends-with-functional-programming-64615b529118&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----64615b529118--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----64615b529118--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@dsfulf?source=post_page-----64615b529118--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@dsfulf?source=post_page-----64615b529118--------------------------------", "anchor_text": "David S. Fulford"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe6b03efa44f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasy-matplotlib-legends-with-functional-programming-64615b529118&user=David+S.+Fulford&userId=e6b03efa44f2&source=post_page-e6b03efa44f2----64615b529118---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F64615b529118&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasy-matplotlib-legends-with-functional-programming-64615b529118&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F64615b529118&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasy-matplotlib-legends-with-functional-programming-64615b529118&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://en.wikipedia.org/wiki/Map_(higher-order_function)", "anchor_text": "map a function over that sequence"}, {"url": "https://docs.python.org/2/library/itertools.html#itertools.chain", "anchor_text": "chain()"}, {"url": "https://medium.com/tag/python?source=post_page-----64615b529118---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/matplotlib?source=post_page-----64615b529118---------------matplotlib-----------------", "anchor_text": "Matplotlib"}, {"url": "https://medium.com/tag/data-science?source=post_page-----64615b529118---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/data-visualization?source=post_page-----64615b529118---------------data_visualization-----------------", "anchor_text": "Data Visualization"}, {"url": "https://medium.com/tag/functional-programming?source=post_page-----64615b529118---------------functional_programming-----------------", "anchor_text": "Functional Programming"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F64615b529118&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasy-matplotlib-legends-with-functional-programming-64615b529118&user=David+S.+Fulford&userId=e6b03efa44f2&source=-----64615b529118---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F64615b529118&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasy-matplotlib-legends-with-functional-programming-64615b529118&user=David+S.+Fulford&userId=e6b03efa44f2&source=-----64615b529118---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F64615b529118&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasy-matplotlib-legends-with-functional-programming-64615b529118&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----64615b529118--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F64615b529118&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasy-matplotlib-legends-with-functional-programming-64615b529118&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----64615b529118---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----64615b529118--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----64615b529118--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----64615b529118--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----64615b529118--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----64615b529118--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----64615b529118--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----64615b529118--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----64615b529118--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@dsfulf?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@dsfulf?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "David S. Fulford"}, {"url": "https://medium.com/@dsfulf/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "37 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe6b03efa44f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasy-matplotlib-legends-with-functional-programming-64615b529118&user=David+S.+Fulford&userId=e6b03efa44f2&source=post_page-e6b03efa44f2--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2Fe6b03efa44f2%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasy-matplotlib-legends-with-functional-programming-64615b529118&user=David+S.+Fulford&userId=e6b03efa44f2&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}