{"url": "https://towardsdatascience.com/advanced-sql-templates-in-python-with-jinjasql-b996eadd761d", "time": 1683002841.639648, "path": "towardsdatascience.com/advanced-sql-templates-in-python-with-jinjasql-b996eadd761d/", "webpage": {"metadata": {"title": "Advanced SQL Templates In Python with JinjaSql | by Sergei Izrailev | Towards Data Science", "h1": "Advanced SQL Templates In Python with JinjaSql", "description": "In A Simple Approach To Templated SQL Queries In Python, I introduced the basics of SQL templates in Python using JinjaSql. This post further demonstrates the power of Jinja2 within JinjaSql\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/a-simple-approach-to-templated-sql-queries-in-python-adc4f0dc511", "anchor_text": "A Simple Approach To Templated SQL Queries In Python", "paragraph_index": 0}, {"url": "https://github.com/hashedin/jinjasql", "anchor_text": "JinjaSql", "paragraph_index": 0}, {"url": "http://jinja.pocoo.org/", "anchor_text": "Jinja2", "paragraph_index": 0}, {"url": "https://github.com/sizrailev/life-around-data-code/blob/master/pylad/sql_templates_base.py", "anchor_text": "sql_tempates_base.py", "paragraph_index": 6}, {"url": "https://towardsdatascience.com/a-simple-approach-to-templated-sql-queries-in-python-adc4f0dc511", "anchor_text": "here", "paragraph_index": 6}, {"url": "http://www.lifearounddata.com/templated-sql-queries-in-python/", "anchor_text": "previous blog", "paragraph_index": 26}, {"url": "https://towardsdatascience.com/a-simple-approach-to-templated-sql-queries-in-python-adc4f0dc511", "anchor_text": "basic use of JinjaSql", "paragraph_index": 31}, {"url": "https://github.com/sizrailev/life-around-data-code/blob/master/pylad/advanced_sql_templates.py", "anchor_text": "code in this post", "paragraph_index": 32}, {"url": "https://opensource.org/licenses/MIT", "anchor_text": "MIT License", "paragraph_index": 32}, {"url": "http://www.lifearounddata.com/advanced-sql-templates-in-python-with-jinjasql/", "anchor_text": "Life Around Data", "paragraph_index": 32}], "all_paragraphs": ["In A Simple Approach To Templated SQL Queries In Python, I introduced the basics of SQL templates in Python using JinjaSql. This post further demonstrates the power of Jinja2 within JinjaSql templates using presets, loops, and custom functions. Let\u2019s consider an everyday use case when we have a table with some dimensions and some numerical values, and we want to find some metrics for a given dimension or a combination of dimensions. The example data below is tiny and entirely made up, but it suffices for demonstrating the advanced features. First, I introduce the data set and the questions to be answered with SQL queries. I\u2019ll then build the queries without templates, and finally, show how to use the SQL templates to parameterize and generate these queries.", "Let\u2019s consider a table transactions that contains records about purchases in some stores. The purchase can be made by cash, with a credit or a debit card, which adds an extra dimension to the data. Here is the code for creating and populating the table.", "When exploring a data set, it is common to look at the main performance metrics across all dimensions. In this example, we want to compute the following metrics:", "We want these metrics for each user, store, and payment method. We also want to look at these metrics by store and payment method together.", "The query to obtain the metrics for each store is:", "To get the same metrics for other dimensions, we only need to change the store_id into user_id or payment_method in both the select and group by clauses. So the JinjaSql template may look like", "To generate SQL from JinjaSql templates, We\u2019ll use the apply_sql_template function available on GitHub in sql_tempates_base.py introduced here. To generate the SQL query with parameters for the payment_method dimension, we call this function as follows.", "The above template works for a single dimension, but what if we have more than one? To generate a generic query that works with any number of dimensions, let\u2019s create a skeleton of a function that takes a list of dimension column names as an argument and returns the SQL.", "Essentially, we want to transform a list of column names, such as ['payment_method'] or ['store_id', 'payment_method'] into a single string containing the column names as a comma-separated list. Here we have some options, as it can be done either in Python or in the template.", "The first option is to generate the comma-separated string before passing it to the template. We can do it simply by joining the members of the list together:", "It so happens that the template parameter dim is in the right place, so the resulting query is", "Now we can quickly generate SQL queries for all desired dimensions using", "An alternative to passing a pre-built string as a template parameter is to move the column list SQL generation into the template itself by setting a new variable at the top:", "This template is more readable than the previous version since all transformations happen in one place in the template, and at the same time, there\u2019s no clutter. The function should change to", "We can also use loops inside the template to generate the columns.", "This example may not be the best use of the loops because a preset variable does the job just fine without the extra complexity. However, loops are a powerful construct, especially when there is additional logic inside the loop, such as conditions ({% if ... %} \u2014 {% endif %}) or nested loops.", "So what is happening in the template above? The first element of the list dimensions[0] stands alone because it doesn\u2019t need a comma in front of the column name. We wouldn\u2019t need that if there were a defined first column in the query, and the for-loop would look simply as", "Then, the for-loop construct goes over the remaining elements dimensions[1:]. The same code appears in the group by clause, which is also not ideal and only serves the purpose of showing the loop functionality.", "One may wonder why the formatting of the loop is so strange. The reason is that the flow elements of the SQL template, such as {% endfor %}, generate a blank line if they appear on a separate line. To avoid that, in the template above, both {% for ... %} and {% endfor %} are technically on the same line as the previous code (hence the backslash \\ after the first column name). SQL, of course, doesn\u2019t care about whitespace, but humans who read SQL may (and should) care. An alternative to fighting with formatting within the template that would make it more readable is to strip the blank lines from the generated query before printing or logging it. A useful function for that purpose is", "And the call to print the query is:", "All the SQL templates so far used a list of dimensions to produce precisely the same query.", "In the loop example above, we see how to iterate over a list. It is also possible to iterate over a dictionary. This comes in handy, for example, when we want to alias or transform some or all of the columns that form dimensions. Suppose we wanted to combine the debit and credit cards as a single value and compare it to cash transactions. We can accomplish that by first creating a dictionary defining a transformation for the payment_method and keeping the store_id unchanged.", "Here, both credit and debit values are replaced with card. Then, the template may look like the following:", "Note that I moved the total_amount as the first column just to simplify this example and avoid having to deal with the first element in the loop separately. Also, note that the group by clause is using a preset variable and is different from the code in the select query because it only lists the names of the generated columns. The resulting SQL query is:", "What if we want to use a Python function to generate a portion of the code? Jinja2 allows one to register custom functions and functions from other packages for use within the SQL templates. Let\u2019s start with defining a function that generates the string that we insert into the SQL for transforming custom dimensions.", "The output of this function is what we expect to appear in the select clause:", "Now we need to register this function with Jinja2. To do that, we\u2019ll modify the apply_sql_template function from the previous blog as follows.", "This version has an additional optional argument func_list that needs to be a list of functions.", "Let\u2019s change the template to take advantage of the transform_dimensions function.", "Now we also don\u2019t need to worry about the first column not having a comma. The following call produces a SQL query similar to that in the previous section.", "Note how we pass transform_dimensions to apply_sql_template as a list [transform_dimensions]. Multiple functions can be passed into SQL templates as a list of functions, for example, [func1, func2].", "This tutorial expands on the basic use of JinjaSql. It demonstrates the use of preset variables, loops over lists and dictionaries, and custom Python functions within JinjaSql templates for advanced SQL code generation. In particular, the addition of custom functions registration to the apply_sql_template function makes templating much more powerful and versatile. Parameterized SQL queries continue to be indispensable for automated report generation and for reducing the amount of SQL code that needs to be maintained. An added benefit is that with reusable SQL code snippets, it becomes easier to use standard Python unit testing techniques to verify that the generated SQL is correct.", "The code in this post is licensed under the MIT License. This post first appeared on the Life Around Data blog.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "A former quant/trader and Pharma drug discovery scientist, I now tackle challenging data science and engineering problems in digital advertising."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fb996eadd761d&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-sql-templates-in-python-with-jinjasql-b996eadd761d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-sql-templates-in-python-with-jinjasql-b996eadd761d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-sql-templates-in-python-with-jinjasql-b996eadd761d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-sql-templates-in-python-with-jinjasql-b996eadd761d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----b996eadd761d--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----b996eadd761d--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@sergei.izrailev?source=post_page-----b996eadd761d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@sergei.izrailev?source=post_page-----b996eadd761d--------------------------------", "anchor_text": "Sergei Izrailev"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F17fad401feaa&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-sql-templates-in-python-with-jinjasql-b996eadd761d&user=Sergei+Izrailev&userId=17fad401feaa&source=post_page-17fad401feaa----b996eadd761d---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb996eadd761d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-sql-templates-in-python-with-jinjasql-b996eadd761d&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb996eadd761d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-sql-templates-in-python-with-jinjasql-b996eadd761d&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/a-simple-approach-to-templated-sql-queries-in-python-adc4f0dc511", "anchor_text": "A Simple Approach To Templated SQL Queries In Python"}, {"url": "https://github.com/hashedin/jinjasql", "anchor_text": "JinjaSql"}, {"url": "http://jinja.pocoo.org/", "anchor_text": "Jinja2"}, {"url": "https://github.com/sizrailev/life-around-data-code/blob/master/pylad/sql_templates_base.py", "anchor_text": "sql_tempates_base.py"}, {"url": "https://towardsdatascience.com/a-simple-approach-to-templated-sql-queries-in-python-adc4f0dc511", "anchor_text": "here"}, {"url": "https://stackoverflow.com/questions/1140958/whats-a-quick-one-liner-to-remove-empty-lines-from-a-python-string", "anchor_text": "https://stackoverflow.com/questions/1140958/whats-a-quick-one-liner-to-remove-empty-lines-from-a-python-string"}, {"url": "http://www.lifearounddata.com/templated-sql-queries-in-python/", "anchor_text": "previous blog"}, {"url": "https://towardsdatascience.com/a-simple-approach-to-templated-sql-queries-in-python-adc4f0dc511", "anchor_text": "basic use of JinjaSql"}, {"url": "https://github.com/sizrailev/life-around-data-code/blob/master/pylad/advanced_sql_templates.py", "anchor_text": "code in this post"}, {"url": "https://opensource.org/licenses/MIT", "anchor_text": "MIT License"}, {"url": "http://www.lifearounddata.com/advanced-sql-templates-in-python-with-jinjasql/", "anchor_text": "Life Around Data"}, {"url": "https://medium.com/tag/programming?source=post_page-----b996eadd761d---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/python?source=post_page-----b996eadd761d---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/sql?source=post_page-----b996eadd761d---------------sql-----------------", "anchor_text": "Sql"}, {"url": "https://medium.com/tag/data-engineering?source=post_page-----b996eadd761d---------------data_engineering-----------------", "anchor_text": "Data Engineering"}, {"url": "https://medium.com/tag/data-science?source=post_page-----b996eadd761d---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb996eadd761d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-sql-templates-in-python-with-jinjasql-b996eadd761d&user=Sergei+Izrailev&userId=17fad401feaa&source=-----b996eadd761d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb996eadd761d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-sql-templates-in-python-with-jinjasql-b996eadd761d&user=Sergei+Izrailev&userId=17fad401feaa&source=-----b996eadd761d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb996eadd761d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-sql-templates-in-python-with-jinjasql-b996eadd761d&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----b996eadd761d--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fb996eadd761d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-sql-templates-in-python-with-jinjasql-b996eadd761d&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----b996eadd761d---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----b996eadd761d--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----b996eadd761d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----b996eadd761d--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----b996eadd761d--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----b996eadd761d--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----b996eadd761d--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----b996eadd761d--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----b996eadd761d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@sergei.izrailev?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@sergei.izrailev?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Sergei Izrailev"}, {"url": "https://medium.com/@sergei.izrailev/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "145 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F17fad401feaa&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-sql-templates-in-python-with-jinjasql-b996eadd761d&user=Sergei+Izrailev&userId=17fad401feaa&source=post_page-17fad401feaa--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F7a1ece580bc0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-sql-templates-in-python-with-jinjasql-b996eadd761d&newsletterV3=17fad401feaa&newsletterV3Id=7a1ece580bc0&user=Sergei+Izrailev&userId=17fad401feaa&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}