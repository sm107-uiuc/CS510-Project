{"url": "https://towardsdatascience.com/getting-started-with-data-analysis-on-aws-7b74ecbfe572", "time": 1683002763.486065, "path": "towardsdatascience.com/getting-started-with-data-analysis-on-aws-7b74ecbfe572/", "webpage": {"metadata": {"title": "Getting Started with Data Analysis on AWS | by Gary A. Stafford | Towards Data Science", "h1": "Getting Started with Data Analysis on AWS", "description": "Learn to use an AWS S3-based Data Lake, AWS Glue, Amazon Athena, and Amazon QuickSight to transform, enrich, analyze, and visualize semi-structured data."}, "outgoing_paragraph_urls": [{"url": "https://en.wikipedia.org/wiki/Data_analysis", "anchor_text": "Wikipedia", "paragraph_index": 0}, {"url": "https://aws.amazon.com/about-aws/whats-new/2019/11/amazon-quicksight-adds-api-support-for-data-dashboard-spice-and-permissions/", "anchor_text": "recently added", "paragraph_index": 3}, {"url": "https://docs.aws.amazon.com/whitepapers/latest/building-data-lakes/amazon-s3-data-lake-storage-platform.html", "anchor_text": "Amazon S3-based Data Lake", "paragraph_index": 8}, {"url": "https://aws.amazon.com/glue/", "anchor_text": "AWS Glue", "paragraph_index": 9}, {"url": "https://aws.amazon.com/glue/faqs/#AWS_Glue_Data_Catalog", "anchor_text": "AWS Glue Data Catalog", "paragraph_index": 10}, {"url": "https://hive.apache.org/index.html", "anchor_text": "Apache Hive", "paragraph_index": 10}, {"url": "https://aws.amazon.com/glue/faqs/", "anchor_text": "AWS Glue Crawler", "paragraph_index": 11}, {"url": "https://docs.aws.amazon.com/glue/latest/dg/author-job.html", "anchor_text": "AWS Glue ETL Job", "paragraph_index": 12}, {"url": "https://aws.amazon.com/athena/", "anchor_text": "Amazon Athena", "paragraph_index": 13}, {"url": "https://prestodb.io/", "anchor_text": "Presto", "paragraph_index": 14}, {"url": "https://docs.aws.amazon.com/athena/latest/ug/DocHistory.html", "anchor_text": "Presto 0.172", "paragraph_index": 14}, {"url": "https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL", "anchor_text": "Apache Hive", "paragraph_index": 14}, {"url": "https://aws.amazon.com/quicksight/", "anchor_text": "Amazon QuickSight", "paragraph_index": 15}, {"url": "https://aws.amazon.com/quicksight/features-ml/", "anchor_text": "ML Insights", "paragraph_index": 15}, {"url": "https://aws.amazon.com/lambda/", "anchor_text": "AWS Lambda", "paragraph_index": 16}, {"url": "https://docs.aws.amazon.com/athena/latest/ug/partitions.html", "anchor_text": "AWS", "paragraph_index": 18}, {"url": "http://jsonlines.org/", "anchor_text": "JSON Lines", "paragraph_index": 19}, {"url": "http://jsonlines.org/", "anchor_text": "JSON Lines", "paragraph_index": 22}, {"url": "https://openaddresses.io/", "anchor_text": "OpenAddresses", "paragraph_index": 23}, {"url": "https://aws.amazon.com/s3/", "anchor_text": "Amazon Simple Storage Service", "paragraph_index": 26}, {"url": "https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html", "anchor_text": "AWS Glue Crawlers", "paragraph_index": 28}, {"url": "https://docs.aws.amazon.com/glue/latest/dg/populate-data-catalog.html", "anchor_text": "AWS Glue Data Catalog", "paragraph_index": 28}, {"url": "https://parquet.apache.org/", "anchor_text": "Apache Parquet", "paragraph_index": 30}, {"url": "https://www.sciencedirect.com/topics/computer-science/data-enrichment", "anchor_text": "ScienceDirect", "paragraph_index": 32}, {"url": "https://aws.amazon.com/quicksight/", "anchor_text": "Amazon QuickSight", "paragraph_index": 36}, {"url": "https://aws.amazon.com/emr/", "anchor_text": "Amazon EMR", "paragraph_index": 36}, {"url": "https://aws.amazon.com/sagemaker/", "anchor_text": "Amazon SageMaker", "paragraph_index": 36}, {"url": "https://aws.amazon.com/marketplace", "anchor_text": "AWS Marketplace", "paragraph_index": 36}, {"url": "https://aws.amazon.com/marketplace/seller-profile?id=0ef849c5-c2fa-4699-9f67-c47555e148a5&ref=dtl_prodview-f4r47zzmas57k", "anchor_text": "Tableau", "paragraph_index": 36}, {"url": "https://aws.amazon.com/marketplace/seller-profile?id=f2b415a2-1013-4f3f-ba68-ad1895504098", "anchor_text": "Looker", "paragraph_index": 36}, {"url": "https://aws.amazon.com/marketplace/seller-profile?id=b9a3a7ee-d8b2-4322-a03a-eec7853e8610", "anchor_text": "Sisense", "paragraph_index": 36}, {"url": "https://aws.amazon.com/marketplace/seller-profile?id=7b1d10b8-b3fc-469e-a33d-d5bcc84caba9", "anchor_text": "Domo", "paragraph_index": 36}, {"url": "https://aws.amazon.com/cli/", "anchor_text": "AWS CLI", "paragraph_index": 37}, {"url": "https://www.python.org/downloads/", "anchor_text": "Python 3", "paragraph_index": 37}, {"url": "https://stedolan.github.io/jq/", "anchor_text": "jq", "paragraph_index": 37}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo", "anchor_text": "GitHub", "paragraph_index": 38}, {"url": "https://help.github.com/articles/about-gists/", "anchor_text": "Gists", "paragraph_index": 39}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/README.md", "anchor_text": "README", "paragraph_index": 40}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/cloudformation/smart-hub-athena-glue.yml", "anchor_text": "smart-hub-athena-glue.yml", "paragraph_index": 41}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram", "paragraph_index": 43}, {"url": "https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-AlterPartition", "anchor_text": "Apache Hive-style partitions", "paragraph_index": 43}, {"url": "https://docs.aws.amazon.com/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html", "anchor_text": "ZIP archive Lambda packages", "paragraph_index": 47}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/cloudformation/smart-hub-lambda.yml", "anchor_text": "smart-hub-serverless", "paragraph_index": 47}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/cloudformation/smart-hub-lambda.yml", "anchor_text": "smart-hub-lambda.yml", "paragraph_index": 49}, {"url": "https://docs.aws.amazon.com/lambda/latest/dg/lambda-intro-execution-role.html", "anchor_text": "Lambda execution IAM Service Role", "paragraph_index": 49}, {"url": "https://docs.aws.amazon.com/glue/latest/dg/schedule-crawler.html", "anchor_text": "scheduled", "paragraph_index": 53}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram", "paragraph_index": 54}, {"url": "https://docs.aws.amazon.com/athena/latest/ug/ctas.html", "anchor_text": "CTAS", "paragraph_index": 59}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/lambdas/athena-json-to-parquet-data/index.py", "anchor_text": "athena-json-to-parquet-data/index.py", "paragraph_index": 59}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram", "paragraph_index": 62}, {"url": "https://docs.aws.amazon.com/athena/latest/ug/supported-format.html", "anchor_text": "Athena does not support", "paragraph_index": 65}, {"url": "https://spark.apache.org/", "anchor_text": "Apache Spark", "paragraph_index": 65}, {"url": "https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-extensions.html", "anchor_text": "AWS Glue PySpark extensions", "paragraph_index": 65}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/cloudformation/smart-hub-athena-glue.yml", "anchor_text": "smart-hub-athena-glue.yml", "paragraph_index": 66}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram", "paragraph_index": 68}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram", "paragraph_index": 73}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/lambdas/athena-complex-etl-query/index.py", "anchor_text": "athena-complex-etl-query/index.py", "paragraph_index": 76}, {"url": "https://aws.amazon.com/about-aws/whats-new/2019/09/amazon-athena-adds-support-inserting-data-into-table-results-of-select-query/", "anchor_text": "just released", "paragraph_index": 77}, {"url": "https://docs.aws.amazon.com/athena/latest/ug/release-notes.html", "anchor_text": "release notes", "paragraph_index": 77}, {"url": "https://prestodb.io/docs/current/sql/select.html", "anchor_text": "WITH clause", "paragraph_index": 78}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram", "paragraph_index": 83}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram", "paragraph_index": 87}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/lambdas/athena-parquet-to-parquet-elt-data/index.py", "anchor_text": "athena-parquet-to-parquet-elt-data/index.py", "paragraph_index": 88}, {"url": "https://en.wikipedia.org/wiki/Snappy_(compression)", "anchor_text": "Snappy", "paragraph_index": 88}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram", "paragraph_index": 90}, {"url": "https://docs.aws.amazon.com/athena/latest/ug/DocHistory.html", "anchor_text": "0.172", "paragraph_index": 97}, {"url": "https://github.com/prestodb/presto/releases/tag/0.229", "anchor_text": "0.229", "paragraph_index": 97}, {"url": "https://docs.aws.amazon.com/athena/latest/ug/other-notable-limitations.html", "anchor_text": "considerations and limitations", "paragraph_index": 97}, {"url": "https://aws.amazon.com/quicksight/resources/faqs/", "anchor_text": "Amazon", "paragraph_index": 102}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/geospatial-data-prep.html", "anchor_text": "geospatial data", "paragraph_index": 106}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/welcome.html#spice", "anchor_text": "Amazon", "paragraph_index": 114}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/working-with-visuals.html", "anchor_text": "data visualizations", "paragraph_index": 115}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/adding-drill-downs.html", "anchor_text": "drill-downs", "paragraph_index": 116}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html", "anchor_text": "Filters", "paragraph_index": 118}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/conditional-formatting-for-visuals.html", "anchor_text": "Conditional formatting", "paragraph_index": 118}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/parameterize-a-filter.html", "anchor_text": "Parameters", "paragraph_index": 118}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/adding-drill-downs.html", "anchor_text": "AWS", "paragraph_index": 119}, {"url": "https://aws.amazon.com/about-aws/whats-new/2019/11/amazon-quicksight-adds-api-support-for-data-dashboard-spice-and-permissions/", "anchor_text": "recently added", "paragraph_index": 121}], "all_paragraphs": ["According to Wikipedia, data analysis is \u201ca process of inspecting, cleansing, transforming, and modeling data with the goal of discovering useful information, informing conclusion, and supporting decision-making.\u201d In this post, we will explore how to get started with data analysis on AWS, using the serverless capabilities of Amazon Athena, AWS Glue, Amazon QuickSight, Amazon S3, and AWS Lambda. We will learn how to use these complementary services to transform, enrich, analyze, and visualize semi-structured data.", "Data Analysis \u2014 discovering useful information, informing conclusion, and supporting decision-making. \u2013Wikipedia", "We will learn how to ingest, transform, and enrich raw, semi-structured data, in multiple formats, using Amazon S3, AWS Glue, Amazon Athena, and AWS Lambda. We will build an S3-based data lake, and learn how AWS leverages open-source technologies, such as Presto, Apache Hive, and Apache Parquet.", "Amazon recently added a full set of aws quicksight APIs for interacting with QuickSight. However, for the final part of the demonstration, we will be working from the Amazon QuickSight Console, as opposed to the AWS CLI, AWS CDK, or CloudFormation templates.", "In this demonstration, we will adopt the persona of a large, US-based electric energy provider. The energy provider has developed its next-generation Smart Electrical Monitoring Hub (Smart Hub). They have sold the Smart Hub to a large number of residential customers throughout the United States. The hypothetical Smart Hub wirelessly collects detailed electrical usage data from individual, smart electrical receptacles and electrical circuit meters, spread throughout the residence. Electrical usage data is encrypted and securely transmitted from the customer\u2019s Smart Hub to the electric provider, who is running their business on AWS.", "Customers are able to analyze their electrical usage with fine granularity, per device, and over time. The goal of the Smart Hub is to enable the customers, using data, to reduce their electrical costs. The provider benefits from a reduction in load on the existing electrical grid and a better distribution of daily electrical load as customers shift usage to off-peak times to save money.", "This post will focus on data analysis, as opposed to the real-time streaming aspect of data capture or how the data is persisted on AWS.", "The following AWS services and open-source technologies are featured prominently in this post.", "An Amazon S3-based Data Lake uses Amazon S3 as its primary storage platform. Amazon S3 provides an optimal foundation for a data lake because of its virtually unlimited scalability, from gigabytes to petabytes of content. Amazon S3 provides \u201811 nines\u2019 (99.999999999%) durability. It has scalable performance, ease-of-use features, and native encryption and access control capabilities.", "AWS Glue is a fully managed extract, transform, and load (ETL) service to prepare and load data for analytics. AWS Glue discovers your data and stores the associated metadata (e.g., table definition and schema) in the AWS Glue Data Catalog. Once cataloged, your data is immediately searchable, queryable, and available for ETL.", "The AWS Glue Data Catalog is an Apache Hive Metastore compatible, central repository to store structural and operational metadata for data assets. For a given data set, store table definition, physical location, add business-relevant attributes, as well as track how the data has changed over time.", "An AWS Glue Crawler connects to a data store, progresses through a prioritized list of classifiers to extract the schema of your data and other statistics, and then populates the Glue Data Catalog with this metadata. Crawlers can run periodically to detect the availability of new data as well as changes to existing data, including table definition changes. Crawlers automatically add new tables, new partitions to an existing table, and new versions of table definitions. You can even customize Glue Crawlers to classify your own file types.", "An AWS Glue ETL Job is the business logic that performs extract, transform, and load (ETL) work in AWS Glue. When you start a job, AWS Glue runs a script that extracts data from sources, transforms the data, and loads it into targets. AWS Glue generates a PySpark or Scala script, which runs on Apache Spark.", "Amazon Athena is an interactive query service that makes it easy to analyze data in Amazon S3 using standard SQL. Athena supports and works with a variety of standard data formats, including CSV, JSON, Apache ORC, Apache Avro, and Apache Parquet. Athena is integrated, out-of-the-box, with AWS Glue Data Catalog. Athena is serverless, so there is no infrastructure to manage, and you pay only for the queries that you run.", "The underlying technology behind Amazon Athena is Presto, the open-source distributed SQL query engine for big data, created by Facebook. According to the AWS, the Athena query engine is based on Presto 0.172 (released April 9, 2017). In addition to Presto, Athena uses the Apache Hive DDL to define tables.", "Amazon QuickSight is a fully managed business intelligence (BI) service. QuickSight lets you create and publish interactive dashboards that include ML Insights. Dashboards can be accessed from any device, and embedded into your applications, portals, and websites. QuickSight serverlessly scales automatically from tens of users to tens of thousands without any infrastructure management.", "AWS Lambda automatically runs code without requiring the provisioning or management servers. AWS Lambda automatically scales applications by running code in response to triggers. Lambda code runs in parallel. With AWS Lambda, you are charged for every 100ms your code executes and the number of times your code is triggered. You pay only for the compute time you consume.", "Everything in this post revolves around data. For the post\u2019s demonstration, we will start with four categories of raw, synthetic data. Those data categories include Smart Hub electrical usage data, Smart Hub sensor mapping data, Smart Hub residential locations data, and electrical rate data. To demonstrate the capabilities of AWS Glue to handle multiple data formats, the four categories of raw data consist of three distinct file formats: XML, JSON, and CSV. I have attempted to incorporate as many \u2018real-world\u2019 complexities into the data without losing focus on the main subject of the post. The sample datasets are intentionally small to keep your AWS costs to a minimum for the demonstration.", "To further reduce costs, we will use a variety of data partitioning schemes. According to AWS, by partitioning your data, you can restrict the amount of data scanned by each query, thus improving performance and reducing cost. We have very little data for the demonstration, in which case partitioning may negatively impact query performance. However, in a \u2018real-world\u2019 scenario, there would be millions of potential residential customers generating terabytes of data. In that case, data partitioning would be essential for both cost and performance.", "Smart Hub\u2019s time-series electrical usage data is collected from the customer\u2019s Smart Hub. In the demonstration\u2019s sample electrical usage data, each row represents a completely arbitrary five-minute time interval. There are a total of ten electrical sensors whose electrical usage in kilowatt-hours (kW) is recorded and transmitted. Each Smart Hub records and transmits electrical usage for 10 device sensors, 288 times per day (24 hr / 5 min intervals), for a total of 2,880 data points per day, per Smart Hub. There are two days worth of usage data for the demonstration, for a total of 5,760 data points. The data is stored in JSON Lines format. The usage data will be partitioned in the Amazon S3-based data lake by date (e.g., \u2018dt=2019\u201312\u201321\u2019).", "Note the electrical usage data contains nested data. The electrical usage for each of the ten sensors is contained in a JSON array, within each time series entry. The array contains ten numeric values of type, double.", "Real data is often complex and deeply nested. Later in the post, we will see that AWS Glue can map many common data types, including nested data objects, as illustrated below.", "The Smart Hub sensor mappings data maps a sensor column in the usage data (e.g., \u2018s_01\u2019 to the corresponding actual device (e.g., \u2018Central Air Conditioner\u2019). The data contains the device location, wattage, and the last time the record was modified. The data is also stored in JSON Lines format. The sensor mappings data will be partitioned in the Amazon S3-based data lake by the state of the residence (e.g., \u2018state=or\u2019 for Oregon).", "The Smart Hub locations data contains the geospatial coordinates, home address, and timezone for each residential Smart Hub. The data is stored in CSV format. The data for the four cities included in this demonstration originated from OpenAddresses, \u2018the free and open global address collection.\u2019 There are approximately 4k location records. The location data will be partitioned in the Amazon S3-based data lake by the state of the residence where the Smart Hub is installed (e.g., \u2018state=or\u2019 for Oregon).", "Lastly, the electrical rate data contains the cost of electricity. In this demonstration, the assumption is that the rate varies by state, by month, and by the hour of the day. The data is stored in XML, a data export format still common to older, legacy systems. The electrical rate data will not be partitioned in the Amazon S3-based data lake.", "Due to the number of steps involved in the data analysis process in the demonstration, I have divided the process into four logical stages: 1) Raw Data Ingestion, 2) Data Transformation, 3) Data Enrichment, and 4) Data Visualization and Business Intelligence (BI).", "In the Raw Data Ingestion stage, semi-structured CSV-, XML-, and JSON-format data files are copied to a secure Amazon Simple Storage Service (S3) bucket. Within the bucket, data files are organized into folders based on their physical data structure (schema). Due to the potentially unlimited number of data files, files are further organized (partitioned) into subfolders. Organizational strategies for data files are based on date, time, geographic location, customer id, or other common data characteristics.", "This collection of semi-structured data files, S3 buckets, and partitions form what is referred to as a Data Lake. According to AWS, a data lake is a centralized repository that allows you to store all your structured and unstructured data at any scale.", "A series of AWS Glue Crawlers process the raw CSV-, XML-, and JSON-format files, extracting metadata and creating table definitions in the AWS Glue Data Catalog. According to AWS, an AWS Glue Data Catalog contains metadata tables, where each table specifies a single data store.", "In the Data Transformation stage, the raw data in the previous stage is transformed. Data transformation may include both modifying the data and changing the data format. Data modifications include data cleansing, re-casting data types, changing date formats, field-level computations, and field concatenation.", "The data is then converted from CSV-, XML-, and JSON-format to Apache Parquet format and written back to the Amazon S3-based data lake. Apache Parquet is a compressed, efficient columnar storage format. Amazon Athena, like many Cloud-based services, charges you by the amount of data scanned per query. Hence, using data partitioning, bucketing, compression, and columnar storage formats, like Parquet, will reduce query cost.", "Lastly, the transformed Parquet-format data is cataloged to new tables, alongside the raw CSV, XML, and JSON data, in the Glue Data Catalog.", "According to ScienceDirect, data enrichment or augmentation is the process of enhancing existing information by supplementing missing or incomplete data. Typically, data enrichment is achieved by using external data sources, but that is not always the case.", "Data Enrichment \u2014 the process of enhancing existing information by supplementing missing or incomplete data. \u2013ScienceDirect", "In the Data Enrichment stage, the Parquet-format Smart Hub usage data is augmented with related data from the three other data sources: sensor mappings, locations, and electrical rates. The customer\u2019s Smart Hub usage data is enriched with the customer\u2019s device types, the customer\u2019s timezone, and customer\u2019s electricity cost per monitored period based on the customer\u2019s geographic location and time of day.", "Once the data is enriched, it is converted to Parquet and optimized for query performance, stored in the data lake, and cataloged. At this point, the original CSV-, XML-, and JSON-format raw data files, the transformed Parquet-format data files, and the Parquet-format enriched data files are all stored in the Amazon S3-based data lake and cataloged in the Glue Data Catalog.", "In the final Data Visualization and Business Intelligence (BI) stage, the enriched data is presented and analyzed. There are many enterprise-grade services available for visualization and Business Intelligence, which integrate with Athena. Amazon services include Amazon QuickSight, Amazon EMR, and Amazon SageMaker. Third-party solutions from AWS Partners, available on the AWS Marketplace, include Tableau, Looker, Sisense, and Domo. In this demonstration, we will focus on Amazon QuickSight.", "To follow along with the demonstration, you will need an AWS Account and a current version of the AWS CLI. To get the most from the demonstration, you should also have Python 3 and jq installed in your work environment.", "All source code for this post can be found on GitHub. Use the following command to clone a copy of the project.", "Source code samples in this post are displayed as GitHub Gists, which will not display correctly on some mobile and social media browsers.", "Just want the jump in without reading the instructions? All the AWS CLI commands, found within the post, are consolidated in the GitHub project\u2019s README file.", "To start, create the \u2018smart-hub-athena-glue-stack\u2019 CloudFormation stack using the smart-hub-athena-glue.yml template. The template will create (3) Amazon S3 buckets, (1) AWS Glue Data Catalog Database, (5) Data Catalog Database Tables, (6) AWS Glue Crawlers, (1) AWS Glue ETL Job, and (1) IAM Service Role for AWS Glue.", "Make sure to change the DATA_BUCKET, SCRIPT_BUCKET, and LOG_BUCKET variables, first, to your own unique S3 bucket names. I always suggest using the standard AWS 3-part convention of 1) descriptive name, 2) AWS Account ID or Account Alias, and 3) AWS Region, to name your bucket (e.g. \u2018smart-hub-data-123456789012-us-east-1\u2019).", "Next, copy the raw CSV-, XML-, and JSON-format data files from the local project to the DATA_BUCKET S3 bucket (steps 1a-1b in workflow diagram). These files represent the beginnings of the S3-based data lake. Each category of data uses a different strategy for organizing and separating the files. Note the use of the Apache Hive-style partitions (e.g., /smart_hub_data_json/dt=2019-12-21). As discussed earlier, the assumption is that the actual, large volume of data in the data lake would necessitate using partitioning to improve query performance.", "Confirm the contents of the DATA_BUCKET S3 bucket with the following command.", "There should be a total of (14) raw data files in the DATA_BUCKET S3 bucket.", "Next, package the (5) Python3.8-based AWS Lambda functions for deployment.", "Copy the five Lambda packages to the SCRIPT_BUCKET S3 bucket. The ZIP archive Lambda packages are accessed by the second CloudFormation stack, smart-hub-serverless. This CloudFormation stack, which creates the Lambda functions, will fail to deploy if the packages are not found in the SCRIPT_BUCKET S3 bucket.", "I have chosen to place the packages in a different S3 bucket then the raw data files. In a real production environment, these two types of files would be separated, minimally, into separate buckets for security. Remember, only data should go into the data lake.", "Create the second \u2018smart-hub-lambda-stack\u2019 CloudFormation stack using the smart-hub-lambda.yml CloudFormation template. The template will create (5) AWS Lambda functions and (1) Lambda execution IAM Service Role.", "At this point, we have deployed all of the AWS resources required for the demonstration using CloudFormation. We have also copied all of the raw CSV-, XML-, and JSON-format data files in the Amazon S3-based data lake.", "If you recall, we created five tables in the Glue Data Catalog database as part of the CloudFormation stack. One table for each of the four raw data types and one table to hold temporary ELT data later in the demonstration. To confirm the five tables were created in the Glue Data Catalog database, use the Glue Data Catalog Console, or run the following AWS CLI / jq command.", "The five data catalog tables should be as follows.", "We also created six Glue Crawlers as part of the CloudFormation template. Four of these Crawlers are responsible for cataloging the raw CSV-, XML-, and JSON-format data from S3 into the corresponding, existing Glue Data Catalog database tables. The Crawlers will detect any new partitions and add those to the tables as well. Each Crawler corresponds to one of the four raw data types. Crawlers can be scheduled to run periodically, cataloging new data and updating data partitions. Crawlers will also create a Data Catalog database tables. We use Crawlers to create new tables, later in the post.", "Run the four Glue Crawlers using the AWS CLI (step 1c in workflow diagram).", "You can check the Glue Crawler Console to ensure the four Crawlers finished successfully.", "Alternately, use another AWS CLI / jq command.", "When complete, all Crawlers should all be in a state of \u2018Still Estimating = false\u2019 and \u2018TimeLeftSeconds = 0\u2019. In my experience, the Crawlers can take up one minute to start, after the estimation stage, and one minute to stop when complete.", "Successfully running the four Crawlers completes the Raw Data Ingestion stage of the demonstration.", "With the Raw Data Ingestion stage completed, we will now transform the raw Smart Hub usage data, sensor mapping data, and locations data into Parquet-format using three AWS Lambda functions. Each Lambda subsequently calls Athena, which executes a CREATE TABLE AS SELECT SQL statement (aka CTAS). Each Lambda executes a similar command, varying only by data source, data destination, and partitioning scheme. Below, is an example of the command used for the Smart Hub electrical usage data, taken from the Python-based Lambda, athena-json-to-parquet-data/index.py.", "This compact, yet powerful CTAS statement converts a copy of the raw JSON- and CSV-format data files into Parquet-format, and partitions and stores the resulting files back into the S3-based data lake. Additionally, the CTAS SQL statement catalogs the Parquet-format data files into the Glue Data Catalog database, into new tables. Unfortunately, this method will not work for the XML-format raw data files, which we will tackle next.", "The five deployed Lambda functions should be visible from the Lambda Console\u2019s Functions tab.", "Invoke the three Lambda functions using the AWS CLI. (part of step 2a in workflow diagram).", "Here is an example of the same CTAS command, shown above for the Smart Hub electrical usage data, as it is was executed successfully by Athena.", "We can view any Athena SQL query from the Athena Console\u2019s History tab. Clicking on a query (in pink) will copy it to the Query Editor tab and execute it. Below, we see the three SQL statements executed by the Lamba functions.", "If you recall, the electrical rate data is in XML format. The Lambda functions we just executed, converted the CSV and JSON data to Parquet using Athena. Currently, unlike CSV, JSON, ORC, Parquet, and Avro, Athena does not support the older XML data format. For the XML data files, we will use an AWS Glue ETL Job to convert the XML data to Parquet. The Glue ETL Job is written in Python and uses Apache Spark, along with several AWS Glue PySpark extensions. For this job, I used an existing script created in the Glue ETL Jobs Console as a base, then modified the script to meet my needs.", "The three Python command-line arguments the script expects (lines 10\u201312, above) are defined in the CloudFormation template, smart-hub-athena-glue.yml. Below, we see them on lines 10\u201312 of the CloudFormation snippet. They are injected automatically when the job is run and can be overridden from the command line when starting the job.", "First, copy the Glue ETL Job Python script to the SCRIPT_BUCKET S3 bucket.", "Next, start the Glue ETL Job (part of step 2a in workflow diagram). Although the conversion is a relatively simple set of tasks, the creation of the Apache Spark environment, to execute the tasks, will take several minutes. Whereas the Glue Crawlers took about 2 minutes on average, the Glue ETL Job could take 10\u201315 minutes in my experience. The actual execution time only takes about 1\u20132 minutes of the 10\u201315 minutes to complete. In my opinion, waiting up to 15 minutes is too long to be viable for ad-hoc jobs against smaller datasets; Glue ETL Jobs are definitely targeted for big data.", "To check on the status of the job, use the Glue ETL Jobs Console, or use the AWS CLI.", "When complete, you should see results similar to the following. Note the \u2018JobRunState\u2019 is \u2018SUCCEEDED.\u2019 This particular job ran for a total of 14.92 minutes, while the actual execution time was 2.25 minutes.", "The job\u2019s progress and the results are also visible in the AWS Glue Console\u2019s ETL Jobs tab.", "Detailed Apache Spark logs are also available in CloudWatch Management Console, which is accessible directly from the Logs link in the AWS Glue Console\u2019s ETL Jobs tab.", "The last step in the Data Transformation stage is to convert catalog the Parquet-format electrical rates data, created with the previous Glue ETL Job, using yet another Glue Crawler (part of step 2b in workflow diagram). Start the following Glue Crawler to catalog the Parquet-format electrical rates data.", "This concludes the Data Transformation stage. The raw and transformed data is in the data lake, and the following nine tables should exist in the Glue Data Catalog.", "If we examine the tables, we should observe the data partitions we used to organize the data files in the Amazon S3-based data lake are contained in the table metadata. Below, we see the four partitions, based on state, of the Parquet-format locations data.", "To begin the Data Enrichment stage, we will invoke the AWS Lambda, athena-complex-etl-query/index.py. This Lambda accepts input parameters (lines 28\u201330, below), passed in the Lambda handler\u2019s event parameter. The arguments include the Smart Hub ID, the start date for the data requested, and the end date for the data requested. The scenario for the demonstration is that a customer with the location id value, using the electrical provider\u2019s application, has requested data for a particular range of days (start date and end date), to visualize and analyze.", "The Lambda executes a series of Athena INSERT INTO SQL statements, one statement for each of the possible Smart Hub connected electrical sensors, s_01 through s_10, for which there are values in the Smart Hub electrical usage data. Amazon just released the Amazon Athena INSERT INTO a table using the results of a SELECT query capability in September 2019, an essential addition to Athena. New Athena features are listed in the release notes.", "Here, the SELECT query is actually a series of chained subqueries, using Presto SQL\u2019s WITH clause capability. The queries join the Parquet-format Smart Hub electrical usage data sources in the S3-based data lake, with the other three Parquet-format, S3-based data sources: sensor mappings, locations, and electrical rates. The Parquet-format data is written as individual files to S3 and inserted into the existing \u2018etl_tmp_output_parquet\u2019 Glue Data Catalog database table. Compared to traditional relational database-based queries, the capabilities of Glue and Athena to enable complex SQL queries across multiple semi-structured data files, stored in S3, is truly amazing!", "The capabilities of Glue and Athena to enable complex SQL queries across multiple semi-structured data files, stored in S3, is truly amazing!", "Below, we see the SQL statement starting on line 43.", "Below, is an example of one of the final queries, for the s_10 sensor, as executed by Athena. All the input parameter values, Python variables, and environment variables have been resolved into the query.", "Along with enriching the data, the query performs additional data transformation using the other data sources. For example, the Unix timestamp is converted to a localized timestamp containing the date and time, according to the customer\u2019s location (line 7, above). Transforming dates and times is a frequent, often painful, data analysis task. Another example of data enrichment is the augmentation of the data with a new, computed column. The column\u2019s values are calculated using the values of two other columns (line 33, above).", "Invoke the Lambda with the following three parameters in the payload (step 3a in workflow diagram).", "The ten INSERT INTO SQL statement\u2019s result statuses (one per device sensor) are visible from the Athena Console\u2019s History tab.", "Each Athena query execution saves that query\u2019s results to the S3-based data lake as individual, uncompressed Parquet-format data files. The data is partitioned in the Amazon S3-based data lake by the Smart Meter location ID (e.g., \u2018loc_id=b6a8d42425fde548\u2019).", "Below is a snippet of the enriched data for a customer\u2019s clothes washer (sensor \u2018s_04\u2019). Note the timestamp is now an actual date and time in the local timezone of the customer (e.g., \u20182019\u201312\u201321 20:10:00.000\u2019). The sensor ID (\u2018s_04\u2019) is replaced with the actual device name (\u2018Clothes Washer\u2019). The location of the device (\u2018Basement\u2019) and the type of electrical usage period (e.g. \u2018peak\u2019 or \u2018partial-peak\u2019) has been added. Finally, the cost column has been computed.", "To transform the enriched CSV-format data to Parquet-format, we need to catalog the CSV-format results using another Crawler, first (step 3d in workflow diagram).", "The previous step created enriched Parquet-format data. However, this data is not as optimized for query efficiency as it should be. Using the Athena INSERT INTO WITH SQL statement, allowed the data to be partitioned. However, the method does not allow the Parquet data to be easily combined into larger files and compressed. To perform both these optimizations, we will use one last Lambda, athena-parquet-to-parquet-elt-data/index.py. The Lambda will create a new location in the Amazon S3-based data lake, containing all the enriched data, in a single file and compressed using Snappy compression.", "The resulting Parquet file is visible in the S3 Management Console.", "The final step in the Data Enrichment stage is to catalog the optimized Parquet-format enriched ETL data. To catalog the data, run the following Glue Crawler (step 3i in workflow diagram", "We should now have the following ten top-level folders of partitioned data in the S3-based data lake. The \u2018tmp\u2019 folder may be ignored.", "Similarly, we should now have the following ten corresponding tables in the Glue Data Catalog. Use the AWS Glue Console to confirm the tables exist.", "Alternately, use the following AWS CLI / jq command to list the table names.", "You may have noticed the four tables created with the AWS Lambda functions, using the CTAS SQL statement, erroneously have the \u2018Classification\u2019 of \u2018Unknown\u2019 as opposed to \u2018parquet\u2019. I am not sure why, I believe it is a possible bug with the CTAS feature. It seems to have no adverse impact on the table\u2019s functionality. However, to fix the issue, run the following set of commands. This aws glue update-table hack will switch the table\u2019s \u2018Classification\u2019 to \u2018parquet\u2019.", "The results of the fix may be seen from the AWS Glue Console. All ten tables are now classified correctly.", "Before starting to visualize and analyze the data with Amazon QuickSight, try executing a few Athena queries against the tables in the Glue Data Catalog database, using the Athena Query Editor. Working in the Editor is the best way to understand the data, learn Athena, and debug SQL statements and queries. The Athena Query Editor has convenient developer features like SQL auto-complete and query formatting capabilities.", "Be mindful when writing queries and searching the Internet for SQL references, the Athena query engine is based on Presto 0.172. The current version of Presto, 0.229, is more than 50 releases ahead of the current Athena version. Both Athena and Presto functionality has changed and diverged. There are additional considerations and limitations for SQL queries in Athena to be aware of.", "Here are a few simple, ad-hoc queries to run in the Athena Query Editor.", "For this final part of the demonstration, we will be working from the Amazon QuickSight Console, as opposed to the AWS CLI, CloudFormation templates, and Python scripts.", "To use Amazon QuickSight, you must sign up for QuickSight.", "There are two Editions of Amazon QuickSight, Standard and Enterprise. For this demonstration, the Standard Edition will suffice.", "Amazon QuickSight uses Data Sets as the basis for all data visualizations. According to Amazon, QuickSight data sets can be created from a wide variety of data sources, including Amazon RDS, Amazon Aurora, Amazon Redshift, Amazon Athena, and Amazon S3. You can also upload Excel spreadsheets or flat files (CSV, TSV, CLF, ELF, and JSON), connect to on-premises databases like SQL Server, MySQL, and PostgreSQL and import data from SaaS applications like Salesforce. Below, we see a list of the latest data sources available in the QuickSight New Data Set Console.", "For the demonstration, I have created three QuickSight data sets, all based on Amazon Athena as a data source. You have two options when using Amazon Athena as a data source. The first option is to select a table from an AWS Glue Data Catalog database, such as the database we created in part one of the post, \u2018smart_hub_data_catalog.\u2019 The second option is to create a custom SQL query, based on one or more tables in an AWS Glue Data Catalog database.", "Of the three data sets created for part two of this demonstration, two data sets use tables directly from the Data Catalog, including \u2018etl_output_parquet\u2019 and \u2018electricity_rates_parquet.\u2019 The third data set uses a custom SQL query, based on the single Data Catalog table, \u2018smart_hub_locations_parquet.\u2019 All three tables used to create the data sets represent the enriched, highly efficient Parquet-format data sources in the S3-based Data Lake.", "There are a large number of features available when creating and configuring data sets. We cannot possibly cover all of them in this post. Let\u2019s look at three features: geospatial field types, calculated fields, and custom SQL.", "QuickSight can intelligently detect common types of geographic fields in a data source and assign QuickSight geographic data type, including Country, County, City, Postcode, and State. QuickSight can also detect geospatial data, including Latitude and Longitude. We will take advantage of this QuickSight feature for our three data set\u2019s data sources, including the State, Postcode, Latitude, and Longitude field types.", "A commonly-used QuickSight data set feature is the \u2018Calculated field.\u2019 For the \u2018etl_output_parquet\u2019 data set, I have created a new field (column), \u2018cost_dollar.\u2019", "The cost field is the electrical cost of the device, over a five minute time interval, in cents (\u00a2). The calculated cost_dollar field is the quotient of the cost field divided by 100. This value represents the electrical cost of the device, over a five minute time interval, in dollars ($). This is a straightforward example. However, a calculated field can be very complex, built from multiple arithmetic, comparison, and conditional functions, string calculations, and data set fields.", "Data set calculated fields can also be created and edited from the QuickSight Analysis Console (discussed later).", "The third QuickSight data set is based on an Amazon Athena custom SQL query.", "Although you can write queries in the QuickSight Data Prep Console, I prefer to write custom Athena queries using the Athena Query Editor. Using the Editor, you can write, run, debug, and optimize queries to ensure they function correctly, first.", "The Athena query can then be pasted into the Custom SQL window. Clicking \u2018Finish\u2019 in the window is the equivalent of \u2018Run query\u2019 in the Athena Query Editor Console. The query runs and returns data.", "Similar to the Athena Query Editor, queries executed in the QuickSight Data Prep Console will show up in the Athena History tab, with a /* QuickSight */ comment prefix.", "You will notice the three QuickSight data sets are labeled, \u2018SPICE.\u2019 According to Amazon, the acronym, SPICE, stands for \u2018Super-fast, Parallel, In-memory, Calculation Engine.\u2019 QuickSight\u2019s in-memory calculation engine, SPICE, achieves blazing fast performance at scale. SPICE automatically replicates data for high availability allowing thousands of users to simultaneously perform fast, interactive analysis while shielding your underlying data infrastructure, saving you time and resources. With the Standard Edition of QuickSight, as the first Author, you get 1 GB of SPICE in-memory data for free.", "The QuickSight Analysis Console is where Analyses are created. A specific QuickSight Analysis will contain a collection of data sets and data visualizations (visuals). Each visual is associated with a single data set.", "Types of QuickSight Analysis visuals include: horizontal and vertical, single and stacked bar charts, line graphs, combination charts, area line charts, scatter plots, heat maps, pie and donut charts, tree maps, pivot tables, gauges, key performance indicators (KPI), geospatial diagrams, and word clouds. Individual visual titles, legends, axis, and other visual aspects can be easily modified. Visuals can contain drill-downs.", "A data set\u2019s fields can be modified from within the Analysis Console. Field types and formats, such as date, numeric, currency fields, can be customized for display. The Analysis can include a Title and subtitle. There are some customizable themes available to change the overall look of the Analysis.", "Data displayed in the visuals can be further shaped using a combination of Filters, Conditional formatting, and Parameters. Below, we see an example of a typical filter based on a range of dates and times. The data set contains two full days\u2019 worth of data. Here, we are filtering the data to a 14-hour peak electrical usage period, between 8 AM and 10 PM on the same day, 12/21/2019.", "According to AWS, all visual types except pivot tables offer the ability to create a hierarchy of fields for a visual element. The hierarchy lets you drill down or up to see data at different levels of the hierarchy. Focus allows you to concentrate on a single element within a hierarchy of fields. Exclude allows you to remove an element from a hierarchy of fields. Below, we see an example of all four of these features, available to apply to the \u2018Central Air Conditioner\u2019. Since the AC unit is the largest consumer of electricity on average per day, applying these filters to understand its impact on the overall electrical usage may be useful to an analysis. We can also drill down to minutes from hours or up to days from hours.", "A QuickSight Analysis is shared by the Analysis Author as a QuickSight Dashboard. Below, we see an example of a QuickSight Dashboard, built and shared for this demonstration. The \u2018Residential Electrical Usage Analysis\u2019 is built from the three data sets created earlier. From those data sets, we have constructed several visuals, including a geospatial diagram, donut chart, heat map, key performance indicator, stacked vertical bar chart, and line graph. Each visual\u2019s title, layout, and field display has all customized. The data displayed in the visuals have been filtered differently, including by date and time, by customer id (loc_id), and by state. Conditional formatting is used to enhance the visual appearance of visuals, such as the \u2018Total Electrical Cost\u2019 KPI.", "Although we did not use them during this demostration, Amazon recently added a full set of aws quicksight APIs for programmatically interacting with QuickSight. For example, to preview the three QuickSight data sets created in this part of the demo, with the AWS CLI, we would use the list-data-sets comand.", "To examine details of a single data set, with the AWS CLI, we would use the describe-data-set command.", "To clean up the AWS resources created in this demonstration, execute the following AWS CLI commands. To avoid failures, make sure each command completes before running the subsequent command. You will need to confirm the CloudFormation stacks are deleted using the AWS CloudFormation Console or the AWS CLI. Be aware, these commands will not remove any Amazon QuickSight data sets, analyses, and dashboards you may have created from the console. However, deleting the AWS Glue Data Catalog and the underlying data sources will impact the ability to visualize the data in QuickSight.", "In this post, we learned how to ingest, transform, and enrich raw, semi-structured data, in multiple formats, using Amazon S3, AWS Glue, Amazon Athena, and AWS Lambda. We built an S3-based data lake and learned how AWS leverages open-source technologies, including Presto, Apache Hive, and Apache Parquet. Finally, we used the transformed and enriched datasets, stored in the data lake, to create compelling visualizations using Amazon QuickSight.", "All opinions expressed in this post are my own and not necessarily the views of my current or past employers or their clients.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Principal Solutions Architect @ AWS | 10x AWS Certified Pro | Polyglot Developer | DataOps | DevOps | Technology consultant, writer, and speaker"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F7b74ecbfe572&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-data-analysis-on-aws-7b74ecbfe572&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-data-analysis-on-aws-7b74ecbfe572&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-data-analysis-on-aws-7b74ecbfe572&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-data-analysis-on-aws-7b74ecbfe572&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----7b74ecbfe572--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----7b74ecbfe572--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://garystafford.medium.com/?source=post_page-----7b74ecbfe572--------------------------------", "anchor_text": ""}, {"url": "https://garystafford.medium.com/?source=post_page-----7b74ecbfe572--------------------------------", "anchor_text": "Gary A. Stafford"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F1c57fc47fc23&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-data-analysis-on-aws-7b74ecbfe572&user=Gary+A.+Stafford&userId=1c57fc47fc23&source=post_page-1c57fc47fc23----7b74ecbfe572---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7b74ecbfe572&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-data-analysis-on-aws-7b74ecbfe572&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7b74ecbfe572&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-data-analysis-on-aws-7b74ecbfe572&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://en.wikipedia.org/wiki/Data_analysis", "anchor_text": "Wikipedia"}, {"url": "https://aws.amazon.com/about-aws/whats-new/2019/11/amazon-quicksight-adds-api-support-for-data-dashboard-spice-and-permissions/", "anchor_text": "recently added"}, {"url": "https://docs.aws.amazon.com/whitepapers/latest/building-data-lakes/amazon-s3-data-lake-storage-platform.html", "anchor_text": "Amazon S3-based Data Lake"}, {"url": "https://aws.amazon.com/glue/", "anchor_text": "AWS Glue"}, {"url": "https://aws.amazon.com/glue/faqs/#AWS_Glue_Data_Catalog", "anchor_text": "AWS Glue Data Catalog"}, {"url": "https://hive.apache.org/index.html", "anchor_text": "Apache Hive"}, {"url": "https://aws.amazon.com/glue/faqs/", "anchor_text": "AWS Glue Crawler"}, {"url": "https://docs.aws.amazon.com/glue/latest/dg/author-job.html", "anchor_text": "AWS Glue ETL Job"}, {"url": "https://aws.amazon.com/athena/", "anchor_text": "Amazon Athena"}, {"url": "https://prestodb.io/", "anchor_text": "Presto"}, {"url": "https://docs.aws.amazon.com/athena/latest/ug/DocHistory.html", "anchor_text": "Presto 0.172"}, {"url": "https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL", "anchor_text": "Apache Hive"}, {"url": "https://aws.amazon.com/quicksight/", "anchor_text": "Amazon QuickSight"}, {"url": "https://aws.amazon.com/quicksight/features-ml/", "anchor_text": "ML Insights"}, {"url": "https://aws.amazon.com/lambda/", "anchor_text": "AWS Lambda"}, {"url": "https://docs.aws.amazon.com/athena/latest/ug/partitions.html", "anchor_text": "AWS"}, {"url": "http://jsonlines.org/", "anchor_text": "JSON Lines"}, {"url": "http://jsonlines.org/", "anchor_text": "JSON Lines"}, {"url": "https://openaddresses.io/", "anchor_text": "OpenAddresses"}, {"url": "https://aws.amazon.com/s3/", "anchor_text": "Amazon Simple Storage Service"}, {"url": "https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html", "anchor_text": "AWS Glue Crawlers"}, {"url": "https://docs.aws.amazon.com/glue/latest/dg/populate-data-catalog.html", "anchor_text": "AWS Glue Data Catalog"}, {"url": "https://parquet.apache.org/", "anchor_text": "Apache Parquet"}, {"url": "https://www.sciencedirect.com/topics/computer-science/data-enrichment", "anchor_text": "ScienceDirect"}, {"url": "https://aws.amazon.com/quicksight/", "anchor_text": "Amazon QuickSight"}, {"url": "https://aws.amazon.com/emr/", "anchor_text": "Amazon EMR"}, {"url": "https://aws.amazon.com/sagemaker/", "anchor_text": "Amazon SageMaker"}, {"url": "https://aws.amazon.com/marketplace", "anchor_text": "AWS Marketplace"}, {"url": "https://aws.amazon.com/marketplace/seller-profile?id=0ef849c5-c2fa-4699-9f67-c47555e148a5&ref=dtl_prodview-f4r47zzmas57k", "anchor_text": "Tableau"}, {"url": "https://aws.amazon.com/marketplace/seller-profile?id=f2b415a2-1013-4f3f-ba68-ad1895504098", "anchor_text": "Looker"}, {"url": "https://aws.amazon.com/marketplace/seller-profile?id=b9a3a7ee-d8b2-4322-a03a-eec7853e8610", "anchor_text": "Sisense"}, {"url": "https://aws.amazon.com/marketplace/seller-profile?id=7b1d10b8-b3fc-469e-a33d-d5bcc84caba9", "anchor_text": "Domo"}, {"url": "https://aws.amazon.com/cli/", "anchor_text": "AWS CLI"}, {"url": "https://www.python.org/downloads/", "anchor_text": "Python 3"}, {"url": "https://stedolan.github.io/jq/", "anchor_text": "jq"}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo", "anchor_text": "GitHub"}, {"url": "https://help.github.com/articles/about-gists/", "anchor_text": "Gists"}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/README.md", "anchor_text": "README"}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/cloudformation/smart-hub-athena-glue.yml", "anchor_text": "smart-hub-athena-glue.yml"}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram"}, {"url": "https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-AlterPartition", "anchor_text": "Apache Hive-style partitions"}, {"url": "https://docs.aws.amazon.com/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html", "anchor_text": "ZIP archive Lambda packages"}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/cloudformation/smart-hub-lambda.yml", "anchor_text": "smart-hub-serverless"}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/cloudformation/smart-hub-lambda.yml", "anchor_text": "smart-hub-lambda.yml"}, {"url": "https://docs.aws.amazon.com/lambda/latest/dg/lambda-intro-execution-role.html", "anchor_text": "Lambda execution IAM Service Role"}, {"url": "https://docs.aws.amazon.com/glue/latest/dg/schedule-crawler.html", "anchor_text": "scheduled"}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram"}, {"url": "https://docs.aws.amazon.com/athena/latest/ug/ctas.html", "anchor_text": "CTAS"}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/lambdas/athena-json-to-parquet-data/index.py", "anchor_text": "athena-json-to-parquet-data/index.py"}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram"}, {"url": "https://docs.aws.amazon.com/athena/latest/ug/supported-format.html", "anchor_text": "Athena does not support"}, {"url": "https://spark.apache.org/", "anchor_text": "Apache Spark"}, {"url": "https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-extensions.html", "anchor_text": "AWS Glue PySpark extensions"}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/cloudformation/smart-hub-athena-glue.yml", "anchor_text": "smart-hub-athena-glue.yml"}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram"}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram"}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/lambdas/athena-complex-etl-query/index.py", "anchor_text": "athena-complex-etl-query/index.py"}, {"url": "https://aws.amazon.com/about-aws/whats-new/2019/09/amazon-athena-adds-support-inserting-data-into-table-results-of-select-query/", "anchor_text": "just released"}, {"url": "https://docs.aws.amazon.com/athena/latest/ug/release-notes.html", "anchor_text": "release notes"}, {"url": "https://prestodb.io/docs/current/sql/select.html", "anchor_text": "WITH clause"}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram"}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram"}, {"url": "https://github.com/garystafford/athena-glue-quicksight-demo/blob/master/lambdas/athena-parquet-to-parquet-elt-data/index.py", "anchor_text": "athena-parquet-to-parquet-elt-data/index.py"}, {"url": "https://en.wikipedia.org/wiki/Snappy_(compression)", "anchor_text": "Snappy"}, {"url": "https://programmaticponderings.files.wordpress.com/2020/01/athena-glue-0-4.png", "anchor_text": "workflow diagram"}, {"url": "https://docs.aws.amazon.com/athena/latest/ug/DocHistory.html", "anchor_text": "0.172"}, {"url": "https://github.com/prestodb/presto/releases/tag/0.229", "anchor_text": "0.229"}, {"url": "https://docs.aws.amazon.com/athena/latest/ug/other-notable-limitations.html", "anchor_text": "considerations and limitations"}, {"url": "https://aws.amazon.com/quicksight/resources/faqs/", "anchor_text": "Amazon"}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/geospatial-data-prep.html", "anchor_text": "geospatial data"}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/welcome.html#spice", "anchor_text": "Amazon"}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/working-with-visuals.html", "anchor_text": "data visualizations"}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/adding-drill-downs.html", "anchor_text": "drill-downs"}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html", "anchor_text": "Filters"}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/conditional-formatting-for-visuals.html", "anchor_text": "Conditional formatting"}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/parameterize-a-filter.html", "anchor_text": "Parameters"}, {"url": "https://docs.aws.amazon.com/quicksight/latest/user/adding-drill-downs.html", "anchor_text": "AWS"}, {"url": "https://aws.amazon.com/about-aws/whats-new/2019/11/amazon-quicksight-adds-api-support-for-data-dashboard-spice-and-permissions/", "anchor_text": "recently added"}, {"url": "https://medium.com/tag/aws?source=post_page-----7b74ecbfe572---------------aws-----------------", "anchor_text": "AWS"}, {"url": "https://medium.com/tag/amazon-athena?source=post_page-----7b74ecbfe572---------------amazon_athena-----------------", "anchor_text": "Amazon Athena"}, {"url": "https://medium.com/tag/data-lake?source=post_page-----7b74ecbfe572---------------data_lake-----------------", "anchor_text": "Data Lake"}, {"url": "https://medium.com/tag/data-analysis?source=post_page-----7b74ecbfe572---------------data_analysis-----------------", "anchor_text": "Data Analysis"}, {"url": "https://medium.com/tag/data-analytics?source=post_page-----7b74ecbfe572---------------data_analytics-----------------", "anchor_text": "Data Analytics"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7b74ecbfe572&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-data-analysis-on-aws-7b74ecbfe572&user=Gary+A.+Stafford&userId=1c57fc47fc23&source=-----7b74ecbfe572---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7b74ecbfe572&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-data-analysis-on-aws-7b74ecbfe572&user=Gary+A.+Stafford&userId=1c57fc47fc23&source=-----7b74ecbfe572---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7b74ecbfe572&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-data-analysis-on-aws-7b74ecbfe572&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----7b74ecbfe572--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F7b74ecbfe572&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-data-analysis-on-aws-7b74ecbfe572&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----7b74ecbfe572---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----7b74ecbfe572--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----7b74ecbfe572--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----7b74ecbfe572--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----7b74ecbfe572--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----7b74ecbfe572--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----7b74ecbfe572--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----7b74ecbfe572--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----7b74ecbfe572--------------------------------", "anchor_text": ""}, {"url": "https://garystafford.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://garystafford.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Gary A. Stafford"}, {"url": "https://garystafford.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "3.7K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F1c57fc47fc23&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-data-analysis-on-aws-7b74ecbfe572&user=Gary+A.+Stafford&userId=1c57fc47fc23&source=post_page-1c57fc47fc23--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F558bb209b64a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-data-analysis-on-aws-7b74ecbfe572&newsletterV3=1c57fc47fc23&newsletterV3Id=558bb209b64a&user=Gary+A.+Stafford&userId=1c57fc47fc23&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}