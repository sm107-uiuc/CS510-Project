{"url": "https://towardsdatascience.com/deep-learning-for-self-driving-cars-7f198ef4cfa2", "time": 1682994498.028852, "path": "towardsdatascience.com/deep-learning-for-self-driving-cars-7f198ef4cfa2/", "webpage": {"metadata": {"title": "Deep Learning for Self-Driving Cars | by Manajit Pal | Towards Data Science", "h1": "Deep Learning for Self-Driving Cars", "description": "In this tutorial, we use Pytorch to implement CNN that will automatically drive a vehicle in a simulator."}, "outgoing_paragraph_urls": [{"url": "https://valohai.com/", "anchor_text": "Valohai", "paragraph_index": 1}, {"url": "https://blog.valohai.com/self-driving-with-valohai", "anchor_text": "their example", "paragraph_index": 1}, {"url": "https://valohai.com/", "anchor_text": "www.valohai.com", "paragraph_index": 1}, {"url": "https://in.udacity.com/course/deep-learning-pytorch--ud188", "anchor_text": "This free course", "paragraph_index": 4}, {"url": "https://github.com/ManajitPal/BehavioralCloning/", "anchor_text": "end-to-end deep learning model for a self-driving car in Keras", "paragraph_index": 5}, {"url": "https://github.com/udacity/self-driving-car-sim", "anchor_text": "Udacity\u2019s self-driving car simulator", "paragraph_index": 6}, {"url": "https://www.python.org/", "anchor_text": "Python", "paragraph_index": 6}, {"url": "https://pytorch.org/", "anchor_text": "Pytorch Framework", "paragraph_index": 6}, {"url": "https://colab.research.google.com/", "anchor_text": "Google Colab", "paragraph_index": 6}, {"url": "https://d17h27t6h515a5.cloudfront.net/topher/2016/December/584f6edd_data/data.zip", "anchor_text": "the one provided by Udacity", "paragraph_index": 6}, {"url": "https://github.com/ManajitPal/DeepLearningForSelfDrivingCars", "anchor_text": "available here", "paragraph_index": 6}, {"url": "https://colab.research.google.com/drive/1W5I8NYsavde4iy-1uiztNKwwYw7_Pfs_", "anchor_text": "available here", "paragraph_index": 6}, {"url": "https://arxiv.org/pdf/1604.07316v1.pdf", "anchor_text": "here", "paragraph_index": 6}, {"url": "https://github.com/hminle/car-behavioral-cloning-with-pytorch/", "anchor_text": "this repo", "paragraph_index": 19}, {"url": "http://image-net.org/challenges/posters/JKU_EN_RGB_Schwarz_poster.pdf", "anchor_text": "found here.", "paragraph_index": 20}, {"url": "https://github.com/ManajitPal/BehavioralCloning/blob/master/model.py", "anchor_text": "Udacity\u2019s", "paragraph_index": 28}, {"url": "https://github.com/ManajitPal/BehavioralCloning/blob/master/model.py", "anchor_text": "drive.py", "paragraph_index": 28}, {"url": "https://github.com/ManajitPal/BehavioralCloning/blob/master/model.py", "anchor_text": "file", "paragraph_index": 28}], "all_paragraphs": ["This article was written many years ago and I am not working in this domain anymore so I apologise in advance if the code below doesn\u2019t work. \ud83d\ude05", "Thanks a lot to Valohai for using my rusty tutorial as an intro to their awesome machine learning platform \ud83d\ude0d. I would suggest you all to check out their example on how to train the network on the cloud with full version control by using the Valohai machine learning platform (www.valohai.com).", "We all know self-driving cars is one of the hottest areas of research and business for the tech giants. What seemed like a science-fiction, a few years ago, now seems more like something which is soon to become a part and parcel of life. The reason, I am saying \u201csoon to be\u201d is because of the fact that even though companies like Tesla, Nissan, Cadillac do have self-driving car assistance software, but, they still require a human to keep an eye on the road and take control when needed. However, it is fascinating to see how far we have come in terms of innovation and how fast technology is advancing. So much so, that now, with the help of basic deep learning, neural network magic, we can build our own pipeline for autonomous driving! Excited? I sure am! Let\u2019s get right into it then\u2026", "Prerequisites:1. This article assumes a basic understanding of Convolutional Neural Networks and its working.2. The code mentioned here is written in Python using the Pytorch framework so basic knowledge of the language and the framework is recommended.", "If the above seems gibberish to you, do not panic! This free course by Udacity will give you everything you need to know about the basics of Deep Learning and Pytorch.", "My Background I started my deep learning journey with one of the Udacity\u2019s scholarship programme sponsored by Facebook through which I learned the basics of Pytorch from the course mentioned above. Simultaneously, I was also enrolled in Udacity\u2019s Self-Driving Car Engineer Nanodegree programme sponsored by KPIT where I got to code an end-to-end deep learning model for a self-driving car in Keras as one of my projects. Therefore, I decided to rewrite the code in Pytorch and share the stuff I learned in this process. Okay, enough of me talking, let\u2019s set up our machine for the awesomeness with one thing in mind \u2014 Say NO to overfitting!", "Resources for the Project1. Udacity\u2019s self-driving car simulator2. Of course, Python and the Pytorch Framework3. If your machine does not support GPU, then I would recommend using Google Colab to train your network. It provides GPU and TPU hours for free!4. If you are facing problems gathering your training data, you can use the one provided by Udacity to train your network.5. The complete code is available here and the Colab notebook is available here.6. The Nvidia research paper mentioned in this article can be found here.", "Gathering DataThe Udacity provided dataset works well but it is not enough to get the car running in difficult terrain (like the second track in Udacity simulator). To gather the data from track 2, we would first need to create a folder in our project directory. Let\u2019s call this folder- data. Now, fire up our simulator. Select the second track from the menu and go to the training mode option.", "Once you enter the training mode, you shall see a record option on the top right corner of the screen. Click on the icon and browse to the data folder. Press select.", "You can start recording your ride once you press the record icon again! Now, if you are a novice gamer like me, I would suggest to take things slow and try to make sure your car stays at the center of the road as much possible, even during the turns. This would help to get better training data that will eventually make a good model. We will record 2 laps driving in one direction of the track and also 2 more laps driving in the opposite direction to make sure the turns are reversed. This would make sure our model does not overfit and make better left and right turns. Let\u2019s do it!", "The training data is now stored in the data folder. Inside, there is one folder and one file: IMG and driving_log.csv. Our next job is to read from the CSV file, the names of the images and their related steering data and load the respective image from the IMG folder in Python.", "It would be better to work with Colab if you prefer not taking the headache of installing different libraries and frameworks in your local machine and also if you would like to take advantage of the free GPU hours. Also, if you prefer not collecting data then you can import the Udacity\u2019s dataset using !wget URL and unzip the file using !unzip. First thing\u2019s first. Importing the headers:", "The code above reads everything from the log file and stores it into the sample array. The line next(reader, None) takes away the first row which contains the names of the columns. We shall use this array to split our data into training and validation. One Good practice from what I have learned is to have 20\u201330% of training data as the validation set to compare the validation loss and training loss so that we can avoid overfitting. Let\u2019s do that:", "Loading Images in DataloaderNow that we have made the samples, it is time to read the images and augment them. This is an important step as this will help to generalize our model. But the process is computationally heavy and time-consuming even for GPUs. The trick is to parallelize this process by taking data in batches, augmenting them and sending to the model to train. Keras achieves this process using python generators and the fit_generator function. In Pytorch, we shall use the Dataset class and the Dataloader function to achieve this. In order to implement this, we would have to overload a few functions of the class, namely, the __getitem__, __len__ and __init__ functions. We would also have to define some augmenting processes. I coded a basic function that will take an image and randomly crop it and flip it horizontally along with taking the negative of the steering data. The cropping, basically, helps the model to focus only on the road by taking away the sky and other distracting stuff in the image and flipping is done to make sure the images are generalized to left and right turns, essentially keeping the car at the center of the road. Other techniques could be adding random brightness to imitate different duration of the day, overlaying the image with a layer of distortion and noise to simulate rain, adding random shadows on the road etc. But we will just stick to the basics for now.", "Next up, we define the Dataloader class and pass on this augment function to the input batch samples, concatenate the steering data and images and return it.", "Notice that there is also an argument called transform. Our transformation will normalize the image array values to the range 0\u20131 using a lambda function. Next, we use Dataloader function to add everything in a generator that will be called batch-wise during training. We define a batch size of 32 and shuffle them while passing it to the DataLoader. The num_workers defines how many workers will create the batches in parallel for processing.", "Model ArchitectureIt is time to build our model. Let\u2019s look closely at the Nvidia research paper. Go ahead and open it in a new tab. The link is on the resources section above.", "If you scroll down to page 5 of the pdf, you will see the architecture of the CNN they built.", "Okay, you lazy person, this is the image I am talking about \ud83d\ude1d. If you look at the numbers, you shall see the depth of the convolutional layers and the input and output features of the fully-connected layers. Now, every feature maps have some mentioned kernels going over them. As mentioned in the paper, the Nvidia guys used YUV images as input and used strided convolutions in the first three convolutional layers with a 2\u00d72 stride and a 5\u00d75 kernel and a non-strided convolution with a 3\u00d73 kernel size in the last two convolutional layers. Interestingly, however, there was no mention of maxpool layer. I tried to follow the above architecture religiously and build the CNN. Here is what I came up with:", "Unfortunately, something was wrong with this approach. Maybe it was a lack of data or maybe the absence of maxpool layers, the network performed horribly. The car was always drifting off road even on a straight track. After some Google search, I came across this repo. The model used here as a simplified version of the Nvidia architecture. I tried and it worked perfectly when trained with enough epochs. So the final architecture for me was this:", "However, feel free to try out the first model with maxpool layers. It shall require some calculation for padding and the output height and width. Let\u2019s take a moment to look over a few things here- a) nn.Module- The nn.Module class is used in Pytorch to create a CNN. We have to overload the __init__() and forward() functions to build the network. I made use of nn.Sequential() in order to avoid writing duplicate code. Whatever is in the nn.Sequential() function gets applied to the input sequentially. Pretty neat, eh?a) elu activation- The activation function used here is elu (exponential linear unit). Unlike relu (rectified linear unit), elu speeds up the training process and also solves the vanishing gradient problem. More details and the equation of the elu function can be found here.b) Image Flattening- The flattening of the output from convolutional layers before passing to the fully-connected layers is done with the line: output.view(output.size(0), -1) .", "Optimizer and CriterionMoving on, the paper also discusses using Mean Square Error loss as the criterion and an Adam optimizer. Let\u2019s code that out! I set the learning rate to 0.0001. You can adjust it accordingly.", "Hmm, we are getting somewhere here. Before we code the final training and validation parts, let\u2019s venture into the world of GPUs!", "Pytorch and CUDAPytorch provides an easy integration with CUDA enabled GPUs (sorry AMD). This is done with a simple device() function. It can immensely speed up the training process, like 10x faster than a normal CPU. Why not take advantage of this? For that, we need to transfer our data and the model to GPU for processing. It is really easier than it sounds. We define a function that will do this for all the input it receives.", "Notice, that I have converted it to float() so that model is able to compute the inputs.", "TrainingTime to train our masterpiece! We first transfer the model to GPU, then, use the generator to get our data and that to the GPU as well. Next, we set the optimizer to not accumulate the gradients during backpropagation using the optimizer.zero_grad() function. Finally, we calculate the total train loss and divide by the batch size to the get the average training loss per epoch. Pretty straightforward.", "ValidationSame thing for validation, but this time we will make sure our model is in evaluation mode so that we do not mistakenly update the gradients and backpropagate the errors. We use model.eval() for changing the mode and to make sure the model does not track we use torch.set_grad_enabled(False). The loss is calculated in the same way.", "Saving the ModelThe final step of the code is here! After the training is complete, we save the model to use it for driving the car autonomously in our simulator. We make a state dictionary and save the model with .h5 format using torch.save().", "The Fun Stuff BeginsOne final thing before we begin testing our model, we need a file that will load our model, get the frames of the track from the simulator to process through our model and send the steering prediction back to the simulator. Fear not! I have made a drive.py file which basically a Pytorch version of Udacity\u2019s drive.py file I used in my project. You can go through the code and experiment with it if you want different throttle etc. For now, let\u2019s get copy-paste the content of the below code.", "Also, we would need a model.py file which shall contain the model architecture. Create the file and paste your network architecture. If you face any problem, feel free to take a look at my model.py file in the repo.", "Download the model.h5 file in the same directory if you had been using Google Colab to write your code. Fire up the terminal, cd to your directory and run the script with our model:", "If you have two different python version installed in your machine, use python3 instead of python. Click on allow, when you see any popups.", "Open the simulator again and now choose the autonomous mode. The car should drive on its own like a boss!", "There you go! Your very own self-driving car pipeline. How cool is that! \ud83d\ude01", "Here is a little demo of what you might expect:", "TroubleshootingYou might see the car wobble a lot or maybe it is confined to one side of the road. This might mean that the data is not augmented and generalized properly. Try to acquire more training data or augment with more randomness.", "You might also see the car not moving at all. In that case, check the terminal for any errors during the run. Most of the errors should be solved by installing the appropriate dependency of the library.", "ConclusionThanks a lot for taking the time to read my article. I really hope that this helps someone who wants to learn some concepts about the use of Deep learning in self-driving cars. Also, this is my first article related to AI and I am a total beginner so I would really appreciate if you could take some to leave any positive or negative feedback, your thoughts or other resources that you might think is a better way to build AI for self-driving cars in the comments below. Cheers folks!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Engineering graduate by profession; UI/UX designer and a developer by heart. Movies, food and tech lover."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F7f198ef4cfa2&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-self-driving-cars-7f198ef4cfa2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-self-driving-cars-7f198ef4cfa2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-self-driving-cars-7f198ef4cfa2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-self-driving-cars-7f198ef4cfa2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----7f198ef4cfa2--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----7f198ef4cfa2--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@manajitpal?source=post_page-----7f198ef4cfa2--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@manajitpal?source=post_page-----7f198ef4cfa2--------------------------------", "anchor_text": "Manajit Pal"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F296f0dd58f3e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-self-driving-cars-7f198ef4cfa2&user=Manajit+Pal&userId=296f0dd58f3e&source=post_page-296f0dd58f3e----7f198ef4cfa2---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7f198ef4cfa2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-self-driving-cars-7f198ef4cfa2&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7f198ef4cfa2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-self-driving-cars-7f198ef4cfa2&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://valohai.com/", "anchor_text": "Valohai"}, {"url": "https://blog.valohai.com/self-driving-with-valohai", "anchor_text": "their example"}, {"url": "https://valohai.com/", "anchor_text": "www.valohai.com"}, {"url": "https://in.udacity.com/course/deep-learning-pytorch--ud188", "anchor_text": "This free course"}, {"url": "https://github.com/ManajitPal/BehavioralCloning/", "anchor_text": "end-to-end deep learning model for a self-driving car in Keras"}, {"url": "https://github.com/udacity/self-driving-car-sim", "anchor_text": "Udacity\u2019s self-driving car simulator"}, {"url": "https://www.python.org/", "anchor_text": "Python"}, {"url": "https://pytorch.org/", "anchor_text": "Pytorch Framework"}, {"url": "https://colab.research.google.com/", "anchor_text": "Google Colab"}, {"url": "https://d17h27t6h515a5.cloudfront.net/topher/2016/December/584f6edd_data/data.zip", "anchor_text": "the one provided by Udacity"}, {"url": "https://github.com/ManajitPal/DeepLearningForSelfDrivingCars", "anchor_text": "available here"}, {"url": "https://colab.research.google.com/drive/1W5I8NYsavde4iy-1uiztNKwwYw7_Pfs_", "anchor_text": "available here"}, {"url": "https://arxiv.org/pdf/1604.07316v1.pdf", "anchor_text": "here"}, {"url": "https://github.com/hminle/car-behavioral-cloning-with-pytorch/", "anchor_text": "this repo"}, {"url": "http://image-net.org/challenges/posters/JKU_EN_RGB_Schwarz_poster.pdf", "anchor_text": "found here."}, {"url": "https://github.com/ManajitPal/BehavioralCloning/blob/master/model.py", "anchor_text": "Udacity\u2019s"}, {"url": "https://github.com/ManajitPal/BehavioralCloning/blob/master/model.py", "anchor_text": "drive.py"}, {"url": "https://github.com/ManajitPal/BehavioralCloning/blob/master/model.py", "anchor_text": "file"}, {"url": "https://github.com/ManajitPal/DeepLearningForSelfDrivingCars/blob/master/drive.py", "anchor_text": "ManajitPal/DeepLearningForSelfDrivingCarsThis is an implementation in Pytorch of Nvidia's model to build a deep learning neural network for self-driving cars. \u2026github.com"}, {"url": "https://medium.com/tag/deep-learning?source=post_page-----7f198ef4cfa2---------------deep_learning-----------------", "anchor_text": "Deep Learning"}, {"url": "https://medium.com/tag/self-driving-cars?source=post_page-----7f198ef4cfa2---------------self_driving_cars-----------------", "anchor_text": "Self Driving Cars"}, {"url": "https://medium.com/tag/autonomous-cars?source=post_page-----7f198ef4cfa2---------------autonomous_cars-----------------", "anchor_text": "Autonomous Cars"}, {"url": "https://medium.com/tag/cnn?source=post_page-----7f198ef4cfa2---------------cnn-----------------", "anchor_text": "Cnn"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----7f198ef4cfa2---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7f198ef4cfa2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-self-driving-cars-7f198ef4cfa2&user=Manajit+Pal&userId=296f0dd58f3e&source=-----7f198ef4cfa2---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7f198ef4cfa2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-self-driving-cars-7f198ef4cfa2&user=Manajit+Pal&userId=296f0dd58f3e&source=-----7f198ef4cfa2---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7f198ef4cfa2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-self-driving-cars-7f198ef4cfa2&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----7f198ef4cfa2--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F7f198ef4cfa2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-self-driving-cars-7f198ef4cfa2&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----7f198ef4cfa2---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----7f198ef4cfa2--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----7f198ef4cfa2--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----7f198ef4cfa2--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----7f198ef4cfa2--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----7f198ef4cfa2--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----7f198ef4cfa2--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----7f198ef4cfa2--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----7f198ef4cfa2--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@manajitpal?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@manajitpal?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Manajit Pal"}, {"url": "https://medium.com/@manajitpal/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "109 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F296f0dd58f3e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-self-driving-cars-7f198ef4cfa2&user=Manajit+Pal&userId=296f0dd58f3e&source=post_page-296f0dd58f3e--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2F296f0dd58f3e%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-self-driving-cars-7f198ef4cfa2&user=Manajit+Pal&userId=296f0dd58f3e&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}