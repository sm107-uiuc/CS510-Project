{"url": "https://towardsdatascience.com/ultimate-setup-for-your-next-python-project-179bda8a7c2c", "time": 1683002909.473511, "path": "towardsdatascience.com/ultimate-setup-for-your-next-python-project-179bda8a7c2c/", "webpage": {"metadata": {"title": "Ultimate Setup for Your Next Python Project | by Martin Heinz | Towards Data Science", "h1": "Ultimate Setup for Your Next Python Project", "description": "It's always useful to have good template for your project that satisfies all your needs, regardless of what kind of Python project you are working on..."}, "outgoing_paragraph_urls": [{"url": "https://github.com/MartinHeinz/python-project-blueprint", "anchor_text": "https://github.com/MartinHeinz/python-project-blueprint", "paragraph_index": 1}, {"url": "https://towardsdatascience.com/ultimate-setup-for-your-next-golang-project-1cc989ad2a96", "anchor_text": "here", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/Cyclomatic_complexity", "anchor_text": "here", "paragraph_index": 7}, {"url": "https://github.com/MartinHeinz/python-project-blueprint/blob/master/setup.cfg", "anchor_text": "here", "paragraph_index": 10}, {"url": "https://github.com/PyCQA/pylint/blob/master/pylintrc", "anchor_text": "here", "paragraph_index": 10}, {"url": "https://github.com/pytest-dev/pytest/issues/3062#issuecomment-393523260", "anchor_text": "this issue", "paragraph_index": 11}, {"url": "https://github.com/MartinHeinz/python-project-blueprint/blob/master/dev.Dockerfile", "anchor_text": "https://github.com/MartinHeinz/python-project-blueprint/blob/master/dev.Dockerfile", "paragraph_index": 17}, {"url": "https://towardsdatascience.com/pytest-features-that-you-need-in-your-testing-life-31488dc7d9eb", "anchor_text": "here", "paragraph_index": 30}, {"url": "https://docs.pytest.org/en/latest/fixture.html#conftest-py-sharing-fixture-functions", "anchor_text": "here", "paragraph_index": 30}, {"url": "https://github.com/MartinHeinz/python-project-blueprint", "anchor_text": "https://github.com/MartinHeinz/python-project-blueprint", "paragraph_index": 33}, {"url": "https://martinheinz.dev/blog/14", "anchor_text": "martinheinz.dev", "paragraph_index": 35}, {"url": "https://martinheinz.dev/", "anchor_text": "https://martinheinz.dev/", "paragraph_index": 37}, {"url": "https://ko-fi.com/martinheinz", "anchor_text": "https://ko-fi.com/martinheinz", "paragraph_index": 37}], "all_paragraphs": ["Whether you are working on some machine learning/AI project, building web apps in Flask or just writing some quick Python script, it\u2019s always useful to have some template for your project that satisfies all your needs, namely: predefined directory structure, all necessary config files like pytest.ini or requirements.txt, Testing, linting and static code analysis setup, CI/CD tooling, Dockerization of your app and on top of that automation with Makefile. So, here I bring you exactly that in this \"Ultimate\" all-purpose setup for your Python projects.", "TL;DR: Here is my repository with full source code and docs: https://github.com/MartinHeinz/python-project-blueprint", "When I was writing this kind of an article for Golang (here), I had a hard time figuring out ideal project structure, with Python however, it\u2019s pretty simple:", "Let\u2019s outline what we have here, starting from the top:", "Rest of the files we have here are configuration files for all tools we will use in this project. Let\u2019s jump over to the next section and explore what they do and what\u2019s in them.", "One thing that can get pretty messy when setting up Python project is the config file soup that you will end up with when you use a bunch of tools like, pylint, coverage.py, flake8 and so on. Each of these tools would like to have its own file, usually something like .flake8 or .coveragerc, which creates lots of unnecessary clutter in the root of your project. To avoid this, I merged all these files into single one - setup.cfg:", "In case you are not familiar with all of the tools used here, I will give quick description:", "With that out of the way, let\u2019s go over what we have in setup.cfg. For Flake8 we define exclusion patterns so that we don't lint code that we don't care about. Below that is an empty ignore section in case we need to ignore some rule globally. We also set max line length to 120, as keeping line length to 80 is in my opinion unreasonable with the size of today's screens. Final line sets McCabe complexity threshold to 10, if you are not familiar with cyclomatic complexity you can find out more here.", "Next up is Bandit, all we configure here is target directory, which is the name of our package. We do this so that we can avoid specifying targets on the command line.", "After that follows Coverage.py. First, we enable branch coverage, which means that in places where a line in your program could jump to more than one next line, Coverage.py tracks which of those destination lines are actually visited. Next, we omit some files that shouldn\u2019t or can\u2019t be included in coverage measurement, like tests themselves or virtual environment files. We also exclude specific lines, e.g. lines that are labeled with pragma: no cover comment. Last Coverage.py config line tells the tool to store generated reports in reports directory. This directory is created automatically if it doesn't exist already.", "The final tool we need to configure is Pylint, the configuration though, is very extensive, like more than 100 lines\u2026 So, I will leave this one out and point you the source here as well as commented and explained pylintrc in Pylint repository here.", "We went through all the tools in setup.cfg but there is one more that cannot be added to setup.cfg and that is Pytest - even though Pytest docs tell you that you can use setup.cfg, it's not exactly true... As per this issue, the option to use setup.cfg is being deprecated and there are some bugs like interpolation errors, that won't be fixed, therefore we will also need pytest.ini file for configuration of Pytest:", "The first thing we do here is set a bunch of command line arguments \u2014 we enable colors in terminal output, then we enable coverage reporting for blueprint directory, after that we enable both generations of XML and stdout ( term) coverage reports. Final 2 arguments (-ra) tell Pytest to output short summary for non-passing tests.", "On the next line, we have filterwarnings option which allows us to disable some annoying warnings in the output, for example, deprecation warnings coming out of some library which we have no control over.", "Rest of the config sets up logging. First one just turns it on and other 3 configure level, format and datetime format. Easier than explaining the format config is just seeing the output itself, which is shown in the next section.", "With all the configurations in pytest.ini, all we will need to do to run our test suite is run pytest, not even the package argument needed!", "Last actual configuration file we have is requirement.txt, which contains a list of our dependencies. All you can find in this file is a list of Python packages, one per line with the optional version of the package. As noted, the package version is optional, but I strongly suggest you lock versions in requirements.txt to avoid situations, where you might download newer, incompatible package during build and deployment, and end-up breaking your application.", "There are 2 remaining files which aren\u2019t actually config files \u2014 our Dockerfiles, namely, dev.Dockerfile and prod.Dockerfile used for development and production images respectively. I will leave those out for time being as we will explore those in a separate article where we will talk about CI/CD and deployment. You can, however, check those files out already in GitHub repository here - https://github.com/MartinHeinz/python-project-blueprint/blob/master/dev.Dockerfile.", "We have done quite a lot without even mentioning the source code of our application, but I think it\u2019s time to look at those few lines of code that are in the project skeleton:", "Only actual source code in this blueprint is this one class with a static method. This is really on needed so that we can run something, get some output and test it. This also works as entrypoint to the whole application. In a real project, you could use the run() method to initialize your application or web server.", "So, how do we actually run this piece of code?", "This short snippet in a specially named file __main__.py is what we need in our project so that we can run the whole package using python -m blueprint. The nice thing about this file and it's contents is that it will only be run with that command, therefore if we want to just import something from the source of this package without running the whole thing, then we can do so without triggering Blueprint.run().", "There\u2019s one more special file in our package and that\u2019s the __init__.py file. Usually, you would leave it empty a use it only to tell Python that the directory is a package. Here, however, we will use it to export classes, variables and functions from our package.", "Without this one line above you wouldn\u2019t be able to call Blueprint.run() from outside of this package. This way we can avoid people using internal parts of our code that should not be exposed.", "That\u2019s all for the code of our package, but what about the tests? First, let\u2019s look at the context.py", "Normally when you use someone's package, then you import it like import blueprint or from blueprint import Blueprint, to imitate this in our tests and therefore make it as close as possible to real usage we use context.py file to import the package into our test context. We also insert our project root directory into system path. This is not actually necessary when running tests with pytest, but if you for example run context.py directly with python ./tests/context.py or possibly with unittest without including the sys.path.insert..., then you would get ModuleNotFoundError: No module named 'blueprint', so this one line is a little bit of insurance policy.", "Now, let\u2019s see the example test:", "What we have here is just a single test that checks the standard output of Blueprint.run() using built-in Pytest fixture called capsys (capture system output). So, what happens when we run the test suite?", "I trimmed a few lines from the output so that you can better see the relevant parts of it. What\u2019s to note here? Well, our test passed! Other than that, we can see coverage report and we can also see that the report got written to coverage.xml as configured in pytest.ini. One more thing that we have here in the output is 2 log messages coming from conftest.py. What is that about?", "You might have noticed that apart from capsys fixture, we also used example_fixture in parameters of our small test. This fixture resides in conftest.py as should all custom fixtures we make:", "As the name implies, this really is just an example fixture. All it does is log one message, then it lets the test run and finally, it logs one more message. The nice thing about conftest.py file is that it gets automatically discovered by Pytest, so you don\u2019t even need to import it to your test files. If you want to find out more about it, then you can check out my previous post about Pytest here or docs here.", "It would be quite laborious if we were to run each of our tools separately and had to remember their arguments, even though they are always the same. Also, it would be equally annoying if later we decided to put all these tools into CI/CD (next article!), right? So, let\u2019s simplify things with Makefile:", "In this Makefile we have 4 targets. First of them - run runs our application using __main__.py we created in the root of our source folder. Next, test just runs pytest. It's that simple thanks to all the configs in pytest.ini. The longest target here - lint - runs all our linting tool. First, it runs pylint against all .py files in the project, including test files. After that it runs flake8 and finally bandit. For these 2 it runs only against sources in blueprint directory. If any of those tools find some problem with our code, it will exit with non-zero code, meaning the target will fail, which will be useful in CI/CD. Last target in this file is clean, which well... cleans our projects - it removes all the files generated by previously mentioned tools.", "In this article we\u2019ve built project skeleton, that\u2019s ready to be used for any kind of Python project you might be working on or thinking about, so if you want to play with or dig a little deeper, then check out the source code which is available in my repository here: https://github.com/MartinHeinz/python-project-blueprint. Repo also includes information on how to set up your project using convenience script, plus some more docs. Feel free to leave feedback/suggestions in the form of issue or just star it if you like this kind of content. \ud83d\ude42", "In the future, we will look into adding CI/CD into the mix with GitHub Actions and GitHub Package Registry. We will also Dockerize our project and create both debuggable and optimized production ready Docker images and add some more code quality tooling using CodeClimate and SonarCloud.", "This article was originally posted at martinheinz.dev", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "CKA | RHCE | DevOps Engineer at IBM | Working with Python, Kubernetes, Linux and more | https://martinheinz.dev/ | https://ko-fi.com/martinheinz"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F179bda8a7c2c&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fultimate-setup-for-your-next-python-project-179bda8a7c2c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fultimate-setup-for-your-next-python-project-179bda8a7c2c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fultimate-setup-for-your-next-python-project-179bda8a7c2c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fultimate-setup-for-your-next-python-project-179bda8a7c2c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----179bda8a7c2c--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----179bda8a7c2c--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@martin.heinz?source=post_page-----179bda8a7c2c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@martin.heinz?source=post_page-----179bda8a7c2c--------------------------------", "anchor_text": "Martin Heinz"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4cbd6b36e62a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fultimate-setup-for-your-next-python-project-179bda8a7c2c&user=Martin+Heinz&userId=4cbd6b36e62a&source=post_page-4cbd6b36e62a----179bda8a7c2c---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F179bda8a7c2c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fultimate-setup-for-your-next-python-project-179bda8a7c2c&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F179bda8a7c2c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fultimate-setup-for-your-next-python-project-179bda8a7c2c&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "http://twitter.com/sxoxm", "anchor_text": "@sxoxm"}, {"url": "https://github.com/MartinHeinz/python-project-blueprint", "anchor_text": "https://github.com/MartinHeinz/python-project-blueprint"}, {"url": "https://towardsdatascience.com/ultimate-setup-for-your-next-golang-project-1cc989ad2a96", "anchor_text": "here"}, {"url": "https://en.wikipedia.org/wiki/Cyclomatic_complexity", "anchor_text": "here"}, {"url": "https://github.com/MartinHeinz/python-project-blueprint/blob/master/setup.cfg", "anchor_text": "here"}, {"url": "https://github.com/PyCQA/pylint/blob/master/pylintrc", "anchor_text": "here"}, {"url": "https://github.com/pytest-dev/pytest/issues/3062#issuecomment-393523260", "anchor_text": "this issue"}, {"url": "https://github.com/MartinHeinz/python-project-blueprint/blob/master/dev.Dockerfile", "anchor_text": "https://github.com/MartinHeinz/python-project-blueprint/blob/master/dev.Dockerfile"}, {"url": "https://towardsdatascience.com/pytest-features-that-you-need-in-your-testing-life-31488dc7d9eb", "anchor_text": "here"}, {"url": "https://docs.pytest.org/en/latest/fixture.html#conftest-py-sharing-fixture-functions", "anchor_text": "here"}, {"url": "https://github.com/MartinHeinz/python-project-blueprint", "anchor_text": "https://github.com/MartinHeinz/python-project-blueprint"}, {"url": "https://github.com/navdeep-G/samplemod", "anchor_text": "Sample Python Module Repository"}, {"url": "https://docs.pytest.org/en/latest/contents.html", "anchor_text": "Pytest Docs"}, {"url": "https://github.com/PyCQA", "anchor_text": "Python Code Quality Authority"}, {"url": "https://martinheinz.dev/blog/14", "anchor_text": "martinheinz.dev"}, {"url": "https://medium.com/tag/programming?source=post_page-----179bda8a7c2c---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/software-development?source=post_page-----179bda8a7c2c---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/technology?source=post_page-----179bda8a7c2c---------------technology-----------------", "anchor_text": "Technology"}, {"url": "https://medium.com/tag/python?source=post_page-----179bda8a7c2c---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/data-science?source=post_page-----179bda8a7c2c---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F179bda8a7c2c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fultimate-setup-for-your-next-python-project-179bda8a7c2c&user=Martin+Heinz&userId=4cbd6b36e62a&source=-----179bda8a7c2c---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F179bda8a7c2c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fultimate-setup-for-your-next-python-project-179bda8a7c2c&user=Martin+Heinz&userId=4cbd6b36e62a&source=-----179bda8a7c2c---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F179bda8a7c2c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fultimate-setup-for-your-next-python-project-179bda8a7c2c&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----179bda8a7c2c--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F179bda8a7c2c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fultimate-setup-for-your-next-python-project-179bda8a7c2c&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----179bda8a7c2c---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----179bda8a7c2c--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----179bda8a7c2c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----179bda8a7c2c--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----179bda8a7c2c--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----179bda8a7c2c--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----179bda8a7c2c--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----179bda8a7c2c--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----179bda8a7c2c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@martin.heinz?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@martin.heinz?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Martin Heinz"}, {"url": "https://medium.com/@martin.heinz/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "5.4K Followers"}, {"url": "https://martinheinz.dev/", "anchor_text": "https://martinheinz.dev/"}, {"url": "https://ko-fi.com/martinheinz", "anchor_text": "https://ko-fi.com/martinheinz"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4cbd6b36e62a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fultimate-setup-for-your-next-python-project-179bda8a7c2c&user=Martin+Heinz&userId=4cbd6b36e62a&source=post_page-4cbd6b36e62a--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff723091181e3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fultimate-setup-for-your-next-python-project-179bda8a7c2c&newsletterV3=4cbd6b36e62a&newsletterV3Id=f723091181e3&user=Martin+Heinz&userId=4cbd6b36e62a&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}