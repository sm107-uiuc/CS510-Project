{"url": "https://towardsdatascience.com/fibonacci-linear-recurrences-and-eigendecomposition-in-python-54a909990c7c", "time": 1683001085.6016, "path": "towardsdatascience.com/fibonacci-linear-recurrences-and-eigendecomposition-in-python-54a909990c7c/", "webpage": {"metadata": {"title": "Fibonacci: Linear Recurrences and Eigendecomposition in Python | by Christoph Ostertag | Medium", "h1": "Fibonacci: Linear Recurrences and Eigendecomposition in Python", "description": "Today we are going to explore the infamous Fibonacci sequence and use it as an example to explain linear recurrences and eigendecomposition. You should be familiar with what a vector and a matrix is\u2026"}, "outgoing_paragraph_urls": [{"url": "https://medium.com/u/f140c5aaa3b0?source=post_page-----54a909990c7c--------------------------------", "anchor_text": "Christoph Ostertag", "paragraph_index": 65}, {"url": "https://www.talentbase.tech", "anchor_text": "https://www.talentbase.tech", "paragraph_index": 67}], "all_paragraphs": ["Today we are going to explore the infamous Fibonacci sequence and use it as an example to explain linear recurrences and eigendecomposition. You should be familiar with what a vector and a matrix is and how we can do matrix multiplication.", "The Fibonacci sequence is defined recursively as an = a(n-1) + a(n-2)", "For every element we just take the sum of the previous two elements.", "2. We compute a4 as an example", "Nested it looks something like this:", "This is what recursion does and it is not very efficient as we have four (4) function calls instead of the three (3) we had before and this becomes more and more complicated for larger n in the Fibonacci sequence.", "Let us try to be even smarter, the Fibonacci sequence seems to be a function that is linear. Thus we can define it as a matrix transformation.", "Applying the matrix transformation multiple times", "Now we got a nice way to compute the Fibonacci numbers with a matrix T, however, we still have 3 calculations for getting to a4, 9 for getting to a10 and so on.", "It is hard to find any pattern here that could help us speed up the computation of A\u2074.", "Let us consider a diagonal matrix A which has non-zero values only on its diagonal.", "Well, that is interesting, now the numbers on the diagonal just get squared, cubed and so on.", "So we can rewrite AAAA = A\u2074 as taking every element in A to the power of 4.Remark: A\u2074 means multiplying the matrix 4 times in math notation. A**4 in Python means doing taking every element in A to the power of 4. (Element-wise operation!)", "This returns the exact same result and is only a single computation step", "This is an astounding observation. However not yet very helpful, as our matrix T is not a diagonal matrix.", "Every n*n square matrix has n columns. These n columns represent coordinates. These coordinates show us how far we have to got to the", "We call this the identity matrix I.", "We say the blue matrix is defined in the standard-basis because. This means the vectors in B scale the standard basis I. But what does this mean?", "Consider i-dot = [a, c]. a tells us how many steps we have to go in the x direction and c how many steps we have to go in the c direction.", "As we see our steps are defined in the direction of i and j. We go a steps in the direction of i and j steps in the direction of j.", "Would it not be easier to say how many steps we want to go into the direction of i-dot and in the direction of j-dot? This means we would use B=[i-dot, j-dot] as our basis. We know we just go 1 step in the direction of i-dot.", "This is a diagonal matrix on which we can multiply super fast with itself by element-wise exponentiation. After we have done the complicated operation we could just transform back to our standard basis I where B is now transformed to B^n for some n times we multiplied B with itself.", "However not so fast, this actually does not work yet:", "But we have something that can work.", "A similar matrix S represents the same linear transformation in a different basis.", "So T = [S]b \u2026 S in same basis b", "Maybe this S could be a diagonal matrix.", "What happens if we square both sides?", "If we want to know what A\u00b2 is:", "This is the prove that if we find some P and its inverse for which S = P^(-1)*A*P we can do the computation of A\u00b2 (and any other power) in another basis.", "But is any of those S a diagonal matrix?", "An eigenvector v is a vector that only gets scaled(stretched) by a linear transformation by the factor \u03bb which we call an eigenvalue.", "Remember that we want to find some similar matrix S that is a diagonal matrix for which:", "If we find some eigenvectors in P that just get stretched by A instead of a normal transformation something interesting happens.", "And by transforming TP into the basis of P.", "And now we can potentiate D easily by squaring each element on the diagonal n times. Then we just transform back to A and we are done.", "So we just have to perform the following steps", "Steps 1 to 3 have to be done only once. So we only have to do steps 4 and 5 for every power n. We can solve Fibonacci rapidly now.", "We did it, the magic trick was successful! Expelliarmus", "So we know there are two eigenvalues which scale those two eigenvectors if we multiply T with them.", "The first eigenvector v1 get scaled by \u03bb1 like this:", "Tip: You can find the linearly independent eigenvectors by first finding all real and complex roots (eigenvalues) of the characteristic polynomial det((A-\u03bb)v) = 0 of T through co-factor expansion first and then solving det((A-\u03bb)v) = 0 for each eigenvalue.", "As there are a maximum of n independent eigenvectors in T P is just all the eigenvalues as columns. We find the inverse of P where P * P^(-1) = 1 with numpy.", "Tip: You can find the inverse of P by row reduction of [P I] to [I P^(-1)].", "Why are the non-diagonal elements not zero? We have some floating point inaccuracy, so let us just extract the diagonal entries we are interested in.", "Let us find some eigenvalues now. We first try to find a9 in the Fibonacci sequence which is the first entry in A\u2078[a1,a0].", "And this is exactly the same values we got from recursion. We are done! :D", "You can change c1, c2 or the initial values a0 and a1 and it will still work.", "Edit: Someone suggested that his iterative approach is faster than my approach. However that is not true and we can prove it numerically. (Mathematicians would think that is joke) If we want to lookup the 10th number of the Fibonacci sequence it is just as fast as looking up the 1000th number practically. This means we have constant lookup time 0(1) that does not depend on n.(O(log(n) actually because exponentiation takes log(n) time, but this is a minor difference.)", "In the code we compare calculating the Fibonacci numbers 100k times for either small n ranging from index 0 to 100 or big n ranging from 0 to 1000.", "This scales terrible and it already takes us 117s to calculate the first 40 Fibonacci numbers.(We calculated the first 1000 100 times in 3 seconds before!)", "Also if n becomes bigger it becomes impossible to calculate it that way because the recursive approach scales with 2^n. We only had a few billion years to calculate Fibonacci yet.", "Just calculating a0, then a1, then a2 until we are at an is much easier and more scaleable. However if we want to lookup the nth Fibonacci number it takes n steps. We had constant lookup times.", "We define a function for this:", "And test it on the same task as before, finding Fibonacci numbers 100k times for the first 100 and 1000 Fibonacci numbers. This is actually a super fast approach for small n\u2019s and also feasible for finding big n. It just takes 10 times longer to find the 1000th then the 100th Fibonacci number.", "As we see it is really fast for small n and even faster than our sophisticated code. However, for big n it takes longer.", "Reducing some of the unnecessary flexibility of our approach like setting initial values and computing T for a given", "We know that the nth Fibonacci number is a linear combination of the eigenvalues to the power n such that Fn = a*\u03bb1^n + b*\u03bb2^n for some a and some b.", "We know this to be true because this is the same thing our diagonal does, first taking the power of the eigenvalues and then linearly transforming them back into the standard basis.", "If we can find a and b we just have to compute Fn = a*\u03bb1^n + b*\u03bb2^n to find the nth Fibonacci number Fn and that makes it even easier. We already know what the two eigenvalues \u03bb1 and \u03bb2 are.", "We use numpy to solve the linear system", "This finds the solution [a b] for the linear system on the left", "Then we define a function that computes Fn", "And performs not only with close to constant lookup times 0(log(n)), but extremely fast just like we expected (3 times faster than the matrix operations)", "If you made it that far and understand most of it congratulations!You should now have a solid computational basic grasp of linear algebra.", "Don\u2019t forget to follow me to not miss out on any new posts on AI, machine learning, math and entrepreneurship! Christoph Ostertag", "Co-founder of talentbase. We help data science students to land their first job. https://www.talentbase.tech", "Co-founder of talentbase. We help data science students to land their first job. https://www.talentbase.tech"], "all_outgoing_urls": [{"url": "https://towardsdatascience.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/@christoph.ostertag?source=post_page-----54a909990c7c--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/@christoph.ostertag?source=post_page-----54a909990c7c--------------------------------", "anchor_text": "Christoph Ostertag"}, {"url": "http://mevzuforex.com/wp-content/uploads/2019/05/Fibonacci-800x445.png", "anchor_text": "http://mevzuforex.com/wp-content/uploads/2019/05/Fibonacci-800x445.png"}, {"url": "https://i.pinimg.com/originals/98/82/d5/9882d569f7e0b5665fe3b2edd5069b06.png", "anchor_text": "https://i.pinimg.com/originals/98/82/d5/9882d569f7e0b5665fe3b2edd5069b06.png"}, {"url": "https://www.smbc-comics.com/comics/1562409923-20190706.png", "anchor_text": "https://www.smbc-comics.com/comics/1562409923-20190706.png"}, {"url": "https://images.slideplayer.com/15/4546640/slides/slide_2.jpg", "anchor_text": "https://images.slideplayer.com/15/4546640/slides/slide_2.jpg"}, {"url": "https://qph.fs.quoracdn.net/main-qimg-ee385f708c4e656081d239342511a9a7", "anchor_text": "https://qph.fs.quoracdn.net/main-qimg-ee385f708c4e656081d239342511a9a7"}, {"url": "https://cdn.eventplanner.net/imgs/xnr8784_how-to-build-excitement-for-your-attendees.jpg", "anchor_text": "https://cdn.eventplanner.net/imgs/xnr8784_how-to-build-excitement-for-your-attendees.jpg"}, {"url": "https://towardsdatascience.com/ways-to-change-a-dollar-counting-in-python-generative-functions-and-series-multiplication-50aae1a167e2", "anchor_text": "Ways to Change a Dollar: Counting in PythonGenerating Functions and Series Multiplicationtowardsdatascience.com"}, {"url": "https://towardsdatascience.com/@christoph.ostertag/why-mathematicians-hate-statistics-and-machine-learning-6f5758d13cc9", "anchor_text": "Why Mathematicians hate Statistics and Machine LearningMathematicians hate statistics and machine learning because it works on problems mathematicians have no answer to. The\u2026medium.com"}, {"url": "https://towardsdatascience.com/analytics-vidhya/the-shortest-introduction-to-deep-learning-you-will-find-on-the-web-25a9975bbe1d", "anchor_text": "The Shortest Introduction To Deep Learning You Will Find On The WebThe most promising development in machine learning (ML) is deep learning. In DL we build a artificial neural network\u2026medium.com"}, {"url": "https://towardsdatascience.com/build-a-scalable-search-engine-for-fuzzy-string-matching-751bd09f6074", "anchor_text": "Build a Scalable Search Engine for Fuzzy String MatchingIn fuzzy matching our goal is to score string A to string B in terms of how close they are together. We want to find\u2026towardsdatascience.com"}, {"url": "https://medium.com/u/f140c5aaa3b0?source=post_page-----54a909990c7c--------------------------------", "anchor_text": "Christoph Ostertag"}, {"url": "https://towardsdatascience.com/@christoph.ostertag", "anchor_text": "Christoph Ostertag - MediumBusiness Information Systems student. My interests include\u2026medium.com"}, {"url": "https://towardsdatascience.com/tag/machine-learning?source=post_page-----54a909990c7c---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://towardsdatascience.com/tag/recursion?source=post_page-----54a909990c7c---------------recursion-----------------", "anchor_text": "Recursion"}, {"url": "https://towardsdatascience.com/tag/python?source=post_page-----54a909990c7c---------------python-----------------", "anchor_text": "Python"}, {"url": "https://towardsdatascience.com/tag/data-science?source=post_page-----54a909990c7c---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://towardsdatascience.com/tag/mathematics?source=post_page-----54a909990c7c---------------mathematics-----------------", "anchor_text": "Mathematics"}, {"url": "https://towardsdatascience.com/@christoph.ostertag?source=post_page-----54a909990c7c--------------------------------", "anchor_text": "More from Christoph Ostertag"}, {"url": "https://towardsdatascience.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fcd07ec8c6d48&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40christoph.ostertag%2Ffibonacci-linear-recurrences-and-eigendecomposition-in-python-54a909990c7c&newsletterV3=f140c5aaa3b0&newsletterV3Id=cd07ec8c6d48&user=Christoph+Ostertag&userId=f140c5aaa3b0&source=-----54a909990c7c---------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----54a909990c7c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----54a909990c7c--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----54a909990c7c--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----54a909990c7c--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----54a909990c7c--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----54a909990c7c--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----54a909990c7c--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/plans?source=upgrade_membership---two_column_layout_sidebar----------------------------------", "anchor_text": "Get unlimited access"}, {"url": "https://towardsdatascience.com/@christoph.ostertag?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/@christoph.ostertag?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Christoph Ostertag"}, {"url": "https://towardsdatascience.com/@christoph.ostertag/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "69 Followers"}, {"url": "https://www.talentbase.tech", "anchor_text": "https://www.talentbase.tech"}, {"url": "https://towardsdatascience.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fcd07ec8c6d48&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40christoph.ostertag%2Ffibonacci-linear-recurrences-and-eigendecomposition-in-python-54a909990c7c&newsletterV3=f140c5aaa3b0&newsletterV3Id=cd07ec8c6d48&user=Christoph+Ostertag&userId=f140c5aaa3b0&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://towardsdatascience.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}