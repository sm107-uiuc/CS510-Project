{"url": "https://towardsdatascience.com/a-gentle-introduction-to-iterators-in-c-and-python-dafece4b0f4f", "time": 1683009172.494345, "path": "towardsdatascience.com/a-gentle-introduction-to-iterators-in-c-and-python-dafece4b0f4f/", "webpage": {"metadata": {"title": "A gentle introduction to iterators in C++ and Python | by Ciar\u00e1n Cooney | Towards Data Science", "h1": "A gentle introduction to iterators in C++ and Python", "description": "Iterators are an incredibly useful programming paradigm for programmers of all levels and disciplines, including data scientists seeking to implement efficient data processing pipelines. Even if you\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/cfcooney/medium_posts", "anchor_text": "https://github.com/cfcooney/medium_posts", "paragraph_index": 23}, {"url": "http://linkedin.com/in/ciaran-cooney-42b031117/", "anchor_text": "linkedin.com/in/ciaran-cooney-42b031117/", "paragraph_index": 25}], "all_paragraphs": ["Iterators are an incredibly useful programming paradigm for programmers of all levels and disciplines, including data scientists seeking to implement efficient data processing pipelines. Even if you haven\u2019t explicitly written your own code to include iterators it is very likely that they will have been there in the background helping you run operations over elements in containers. In simple terms, iterators are used to step through elements in a container, enabling efficient processing as operations are performed. Iterators facilitate working with infinite sequences without the need to reallocate resources for all possible sequences [1]. This can help with efficient resourcing and cleaner code.", "Of course, implementations differ across programming languages. In this, the first of two posts on the topic, I will focus on providing an easy introduction to iterators in C++. In the second, I will look at how iterators are implemented in Python. Python comes with a built-in module named itertools, which enables creation of iterators to enhance looping performance, along with many other features. Look out for part 2 if you want to know more about itertools.", "Different programming languages facilitate subscripting as a method for directly accessing elements in a container (e.g. vector, array). For example, in Python the word \u2018Monday\u2019 could be accessed from the list x = [\u2018Today\u2019, \u2018is\u2019, \u2018Monday\u2019] with the code x[2]. However, a more general method, known as iterators, gives programmers indirect access to elements (this is a similar idea to pointers in C++) [2]. Basically, iterators abstract the addresses of different elements within data structures and are an extremely powerful tool for allowing data structures to interact with algorithms which are not necessarily aware of the structure they are operating on.", "Among the primary functions of an iterator is that it enables processing of elements of a container while isolating users from the internal structure of the data [3]. Iterators offer programmers efficiency gains in terms of time and memory performance, especially when working with larger datasets. They also provide convenience in that we don\u2019t need to be so concerned about the size of a list or vector, as, for example in C++, we can simply used the end() method. Use of iterators can also enhance code re-usability, particularly in cases where we change the type of container being used.", "Of course, there are situations where iterators may not be the best tool to use or simply do not work. For example, simultaneously stepping through two separate data structures in some complex way, particularly when the data in one dictates position in the other, can cause issues with iterators [4]. However, these are more advanced cases and not the domain of this post.", "In C++, a strongly typed language, types that have iterators have members that return iterators. These types have members named begin and end which return iterators corresponding to the first element and to the \u201cone past the end\u201d, respectively [5]. This pair of iterators is defined as the iterator range and denotes the range of elements in the container to be operated upon (see the image above).", "Not all iterators are equal and they can be categorised into five sub-types based on their functionality, the most powerful of which are random-access iterators, which as the name suggests allows random access to any element within a container, as opposed to sequential access [5]. In this tutorial, we will focus on random-access iterators as we apply some basic operations to strings and vectors but see [5] for more details on the other types of iterators.", "You should also be aware that an iterator type is defined by its container. For instance, should you have a vector which is of type const, its corresponding iterator will be of type const_iterator and can read from but not write elements to this vector. From C++11 onwards, there are two new functions which allow the programmer to specifically request the const_iterator type. These are cbegin and cend and are constant versions of those mentioned above. If we use these functions the iterator returned will be const even if the underlying container is not.", "So, let\u2019s look at some code\u2026", "In the first example, we simply want to capitalise the first letter in a string using the toupper() function. After initialising the string, we check that it is not empty (if (s.begin() != s.end())). Inside the if statement, we assign the iterator for the first value (s.begin()) to the variable name it. The iterator is then dereferenced (*it) so that the actual value \u2018c\u2019 is passed to the function, and also dereferenced on the left-hand side of the assignment so that the capitalised letter is assigned to the string, s. Note: dereferencing means that we extract the real value from the iterator.", "This returns the string with the first letter now capitalised i.e., s = \u201cCiaran cooney\u201d. If we want to capitalise every element in the string, we can iterate through it using the ++ operator. Here, we simply use the iterator to step through each character in turn, capitalise that character and then increment the iterator. The condition in this for loop checks when the iterator has reached the end (s.end()) of the string before exiting the loop.", "This time the iterator is used to step through each element in the string which is then capitalised: \u201cCIARAN COONEY\u201d.", "Natural Language Programming is obviously a big domain for data scientists and machine learning engineers, and although python is the de facto home for NLP it is always good to look at how other languages process data. Let\u2019s look at a couple of examples using some very basic processes common in NLP.", "The idea here is to take a string (here a first and last name) and capitalise only the first letters of both names. To help achieve this, I am using a function called split_string() which splits the string according to a delimiter and returns the individual names in a vector. First, we create a vector<string> named cont which is a container for returning the separated strings, and a delimiter (dlim) which is used to determine the character used to instantiate the split. The range operator : is then used to select each word from the cont vector in turn. Following this we do a check to ensure that the vector is not empty before creating the iterator, it, at the position of the first element. As in the previous examples, the toupper() function is used to perform the capitalisation of the first letters, producing the output \u201cCiaran Cooney\u201d.", "In the final example considering strings, let\u2019s imagine we read in a text file and place it in a vector, separated by white space. We can then use an iterator to step through the vector, print each individual element it discovers (or perform some other operation) and then stop when we get to the end of the iterator, or we discover an empty element.", "In this example, we increment the iterator until we reach the end or until an empty element has been discovered (!it->empty()). On each increment we simply dereference the iterator to print out the corresponding text string.", "The resulting output is \u201cHello there, my name is Ciaran\u201d.", "Now I am going to walk through a few examples using vectors containing integers. In this first example, we want to compare the elements of two vectors at each index and return a vector containing a 1 for when elements match and a 0 for when elements do not match.", "Here, we create two iterators, itA and ItB, from the two vectors being compared. A while loop is then instantiated and remains True until the iterator itA reaches the end of the vector vecA. At each iteration, elements in the two iterators are compared by dereferencing itA and ItB, with a 1 being appended to the results when these elements are equal. The ++ operator is once again used to increment the two iterators until the end of the sequences has been reached.", "There are many methods in C++ that facilitate additional functionality when interacting with iterators. These range from beginner to expert level but here I will demonstrate a few of the more basic examples. The advance method is used to advance the iterator it by a number of positions. The next method performs a similar task, except that it takes an iterator as one of its arguments and returns another iterator having taken a number of steps forward. The prev method, as you can probably guess, is the reverse of the next method and returns an iterator having taken a number of steps backwards. The code below is a simple demosntration of these iterator methods in action.", "Let\u2019s have a look at one final introductory example of iterators in C++. This one is a little more advanced as it attempts to insert some values into an existing vector using iterators with the advance and inserter methods. An inserter is an iterator adaptor that takes a container and yields an iterator that adds elements to the specified container [2].", "For this toy example we have two vectors: one containing a sequence of integers and another containing integers that are missing from that sequence. After creating at iterator, it, from the first sequence we advance the iterator 3 steps to the position we want to place the new sequence. The sequence range we wish to copy is they established with the begin() and end() methods. This allows us to copy the numbers 3, 4 and 5 into the first sequence using the iterator it.", "That is the end of our fairly shallow dive into iterators in C++ but I hope it will enable some of you to begin investigating all the functionality on offer. It must be said that iterators are an abstraction and not easy to fully digest at first so don\u2019t worry it it is still not totally clear how they operate. My advice is to just get your hands dirty with some coding and you will begin to see the benefits.", "All of the C++ examples and the additional functions I have used are available here: https://github.com/cfcooney/medium_posts", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "PhD in brain-computer interfaces | data science, machine learning, linguistics @ AflacNI| bikes and books | LinkedIn: linkedin.com/in/ciaran-cooney-42b031117/"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fdafece4b0f4f&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-iterators-in-c-and-python-dafece4b0f4f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-iterators-in-c-and-python-dafece4b0f4f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-iterators-in-c-and-python-dafece4b0f4f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-iterators-in-c-and-python-dafece4b0f4f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----dafece4b0f4f--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----dafece4b0f4f--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://ciaranfcooney.medium.com/?source=post_page-----dafece4b0f4f--------------------------------", "anchor_text": ""}, {"url": "https://ciaranfcooney.medium.com/?source=post_page-----dafece4b0f4f--------------------------------", "anchor_text": "Ciar\u00e1n Cooney"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc6421cc0e5d6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-iterators-in-c-and-python-dafece4b0f4f&user=Ciar%C3%A1n+Cooney&userId=c6421cc0e5d6&source=post_page-c6421cc0e5d6----dafece4b0f4f---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdafece4b0f4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-iterators-in-c-and-python-dafece4b0f4f&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdafece4b0f4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-iterators-in-c-and-python-dafece4b0f4f&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/cfcooney/medium_posts", "anchor_text": "https://github.com/cfcooney/medium_posts"}, {"url": "https://www.datacamp.com/community/tutorials/python-iterator-tutorial?utm_source=adwords_ppc&utm_campaignid=898687156&utm_adgroupid=48947256715&utm_device=c&utm_keyword=&utm_matchtype=b&utm_network=g&utm_adpostion=&utm_creative=332602034343&utm_targetid=aud-299261629574:dsa-429603003980&utm_loc_interest_ms=&utm_loc_physical_ms=1007287&gclid=CjwKCAjw8pH3BRAXEiwA1pvMsXql1oSBz6jNEo9AjQPxD-DT6dNkrNp78jD2lyznqnNy8GIUmNue5hoCYp0QAvD_BwE.", "anchor_text": "https://www.datacamp.com/community/tutorials/python-iterator-tutorial utm_source=adwords_ppc&utm_campaignid=898687156&utm_adgroupid=48947256715&utm_device=c&utm_keyword=&utm_matchtype=b&utm_network=g&utm_adpostion=&utm_creative=332602034343&utm_targetid=aud-299261629574:dsa-429603003980&utm_loc_interest_ms=&utm_loc_physical_ms=1007287&gclid=CjwKCAjw8pH3BRAXEiwA1pvMsXql1oSBz6jNEo9AjQPxD-DT6dNkrNp78jD2lyznqnNy8GIUmNue5hoCYp0QAvD_BwE."}, {"url": "https://de.wikipedia.org/wiki/Iterator.", "anchor_text": "https://de.wikipedia.org/wiki/Iterator."}, {"url": "https://www.quora.com/What-are-some-disadvantages-shortcoming-of-iterators-in-programming-languages.", "anchor_text": "https://www.quora.com/What-are-some-disadvantages-shortcoming-of-iterators-in-programming-languages."}, {"url": "https://www.geeksforgeeks.org/introduction-iterators-c/.", "anchor_text": "https://www.geeksforgeeks.org/introduction-iterators-c/."}, {"url": "https://medium.com/tag/programming?source=post_page-----dafece4b0f4f---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/cpp?source=post_page-----dafece4b0f4f---------------cpp-----------------", "anchor_text": "Cpp"}, {"url": "https://medium.com/tag/iterators?source=post_page-----dafece4b0f4f---------------iterators-----------------", "anchor_text": "Iterators"}, {"url": "https://medium.com/tag/python?source=post_page-----dafece4b0f4f---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----dafece4b0f4f---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fdafece4b0f4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-iterators-in-c-and-python-dafece4b0f4f&user=Ciar%C3%A1n+Cooney&userId=c6421cc0e5d6&source=-----dafece4b0f4f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fdafece4b0f4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-iterators-in-c-and-python-dafece4b0f4f&user=Ciar%C3%A1n+Cooney&userId=c6421cc0e5d6&source=-----dafece4b0f4f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdafece4b0f4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-iterators-in-c-and-python-dafece4b0f4f&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----dafece4b0f4f--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fdafece4b0f4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-iterators-in-c-and-python-dafece4b0f4f&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----dafece4b0f4f---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----dafece4b0f4f--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----dafece4b0f4f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----dafece4b0f4f--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----dafece4b0f4f--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----dafece4b0f4f--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----dafece4b0f4f--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----dafece4b0f4f--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----dafece4b0f4f--------------------------------", "anchor_text": ""}, {"url": "https://ciaranfcooney.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://ciaranfcooney.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Ciar\u00e1n Cooney"}, {"url": "https://ciaranfcooney.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "44 Followers"}, {"url": "http://linkedin.com/in/ciaran-cooney-42b031117/", "anchor_text": "linkedin.com/in/ciaran-cooney-42b031117/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc6421cc0e5d6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-iterators-in-c-and-python-dafece4b0f4f&user=Ciar%C3%A1n+Cooney&userId=c6421cc0e5d6&source=post_page-c6421cc0e5d6--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F25b2f20393ab&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-iterators-in-c-and-python-dafece4b0f4f&newsletterV3=c6421cc0e5d6&newsletterV3Id=25b2f20393ab&user=Ciar%C3%A1n+Cooney&userId=c6421cc0e5d6&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}