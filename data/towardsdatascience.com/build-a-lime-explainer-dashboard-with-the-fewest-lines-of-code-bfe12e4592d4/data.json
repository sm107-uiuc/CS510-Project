{"url": "https://towardsdatascience.com/build-a-lime-explainer-dashboard-with-the-fewest-lines-of-code-bfe12e4592d4", "time": 1683015618.53935, "path": "towardsdatascience.com/build-a-lime-explainer-dashboard-with-the-fewest-lines-of-code-bfe12e4592d4/", "webpage": {"metadata": {"title": "Build a LIME explainer dashboard with the fewest lines of code | by Prashanth Rao | Towards Data Science", "h1": "Build a LIME explainer dashboard with the fewest lines of code", "description": "In an earlier post, I described how to explain a fine-grained sentiment classifier\u2019s results using LIME ( Local Interpretable Model-agnostic Explanations). To recap, the following six models were\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/fine-grained-sentiment-analysis-in-python-part-2-2a92fdc0160d", "anchor_text": "an earlier post", "paragraph_index": 0}, {"url": "https://github.com/prrao87/fine-grained-sentiment/blob/master/explainer.py", "anchor_text": "the project\u2019s GitHub repo", "paragraph_index": 6}, {"url": "https://wsgi.readthedocs.io/", "anchor_text": "WSGI", "paragraph_index": 11}, {"url": "https://werkzeug.palletsprojects.com/", "anchor_text": "Werkzeug", "paragraph_index": 11}, {"url": "https://palletsprojects.com/p/jinja/", "anchor_text": "Jinja", "paragraph_index": 11}, {"url": "https://plotly.com/dash/", "anchor_text": "Dash", "paragraph_index": 16}, {"url": "https://www.streamlit.io/", "anchor_text": "Streamlit", "paragraph_index": 23}, {"url": "https://docs.streamlit.io/en/stable/develop_streamlit_components.html", "anchor_text": "Streamlit HTML component", "paragraph_index": 26}, {"url": "https://www.heroku.com/what", "anchor_text": "Heroku", "paragraph_index": 28}, {"url": "https://gunicorn.org/", "anchor_text": "gunicorn", "paragraph_index": 29}, {"url": "https://www.nginx.com/", "anchor_text": "Nginx", "paragraph_index": 29}, {"url": "https://www.digitalocean.com/community/tutorials/how-to-deploy-python-wsgi-apps-using-gunicorn-http-server-behind-nginx", "anchor_text": "acts as a reverse proxy that sits in front of the web server", "paragraph_index": 29}, {"url": "https://docs.streamlit.io/en/stable/streamlit_faq.html", "anchor_text": "manually deploy apps", "paragraph_index": 29}, {"url": "https://www.python.org/dev/peps/pep-3333/", "anchor_text": "Python specification", "paragraph_index": 30}, {"url": "https://www.tornadoweb.org/en/stable/", "anchor_text": "Tornado", "paragraph_index": 32}, {"url": "https://www.tornadoweb.org/en/stable/guide/async.html", "anchor_text": "asynchronous event loops", "paragraph_index": 32}, {"url": "https://www.475cumulus.com/single-post/2017/04/03/WSGI-Is-Not-Enough-Anymore", "anchor_text": "WSGI is Not Enough Anymore", "paragraph_index": 34}, {"url": "https://wtforms.readthedocs.io/en/stable/", "anchor_text": "WTForms", "paragraph_index": 36}, {"url": "https://flask-login.readthedocs.io/en/latest/", "anchor_text": "Flask-Login", "paragraph_index": 36}, {"url": "https://www.highcharts.com/", "anchor_text": "Highcharts", "paragraph_index": 36}, {"url": "https://d3js.org/", "anchor_text": "D3", "paragraph_index": 36}, {"url": "https://pythonhosted.org/Flask-Bootstrap/", "anchor_text": "Bootstrap", "paragraph_index": 36}, {"url": "https://plotly.com/javascript/", "anchor_text": "Plotly.js", "paragraph_index": 38}], "all_paragraphs": ["In an earlier post, I described how to explain a fine-grained sentiment classifier\u2019s results using LIME ( Local Interpretable Model-agnostic Explanations). To recap, the following six models were used to make fine-grained sentiment class predictions on the Stanford Sentiment Treebank (SST-5) dataset.", "A linear workflow was used to analyze and explain the sentiment classification results using each method. Each model was trained on 5 classes of sentiment (1 through 5), with 1 being \u201cstrongly negative\u201d, 3 being \u201cneutral\u201d and 5 being \u201cstrongly positive\u201d.", "The goal of this post is to show how to build an explainer dashboard (using any one of three frameworks) that takes in a trained model, and outputs LIME explanations for the prediction made by the model.", "Put simply, LIME generates an explanation object containing visualizations (as embedded JavaScript) that can be output to an HTML file, which can then be opened in any browser. A typical output from LIME is shown below.", "To explain a classifier\u2019s results using LIME, it can be cumbersome to have to write out individual HTML files each time an explanation needs to be made. An interactive dashboard that takes in user input is a very effective means to rapidly iterate through multiple test samples in real time, providing the user with immediate feedback. In addition, having a dashboard allows non-technical users (who may or may not know how to execute Python scripts) to be able to make their own LIME explanations on demand.", "The following sections show how we can build LIME explainer dashboards using three different frameworks: Flask, Dash and Streamlit.", "To easily reference each classifier\u2019s predict methods, the below object-oriented template is applied to enable code reuse, available in the project\u2019s GitHub repo. In a nutshell, a Python class is defined which takes in the list of variations generated by LIME (random text samples with tokens blanked out), following which we output a class probability for each sample as a Numpy array.", "Once the class probabilities for each variation is returned, this can be fed to the LimeTextExplainer class (shown below). Enabling bag-of-words ( bow) would mean that LIME doesn't consider word order when generating variations. However, the FastText and Flair models were trained considering n-grams and contextual ordering respectively, so for a fair comparison between models, the bow flag option is disabled for all explanations on SST-5.", "The exp object returned by the LIME explainer is via the explain_instance method internal to LIME, that converts the local linear model's predictions (in numerical form) to a visual, interpretable form. This can then be output as HTML.", "The below sections describe how to encapsulate all these functions into an interactive dashboard app.", "A Flask version of the LIME explainer dashboard is shown below. The user enters a piece of text, selects the number of random samples to generate for LIME, and then chooses from a given list of classifiers using the dropdown menu. Clicking on the Explain results! button then generates a LIME explanation HTML object, which is rendered in an HTML Iframe.", "Although Flask isn\u2019t a data dashboarding tool (it is a WSGI web framework that began as a wrapper around Werkzeug and Jinja), it provides a simple plugin-based architecture from which developers can build and extend interfaces for complex applications. The key strength of Flask is its robustness in a production setting and the numerous extensions around it in the Python ecosystem.", "To build a LIME explainer dashboard using Flask, it is required to know about the following pieces of technology:", "The directory structure used for the Flask app is shown below. The required styles are configured using CSS in the static/style.css file, and the HTML template to be rendered is defined in templates/index.html. Any trained sentiment classifier models go into the models directory. The explainer class is defined in lime_explainer.py and the Flask routes in app.py.", "For this use case, the application code in Flask is written in the simplest way possible. Two routes are defined (the default route '/' and the route for the LIME results, 'result'). Note that the results route uses a POST request, meaning that it only generates HTML (via Jinja) once the user inputs some information to the app and interacts with it.", "The code for the Flask LIME explainer app is available here on GitHub:", "An alternate approach to designing a LIME dashboard is using Plotly\u2019s Dash library. Dash is a framework for building analytical web applications in Python. The benefits to using Dash are twofold: developers can design applications using just Python (no JavaScript required), and they have full control over the design and structure of the app via CSS. A LIME explainer app written using Dash is demonstrated below. Just as in the case of the Flask app, clicking on the Explain results button generates a LIME explanation HTML object, which is rendered via Dash's wrapper around HTML Iframes.", "The directory structure used for the Dash app is shown below. The required styles are configured using CSS in the assets/style.css file. Unlike in the Flask example, the HTML layout of the app and the routes/interactions are defined using pure Python, in app.py. Any trained sentiment classifier models go into the models directory. The explainer class is defined in lime_explainer.py.", "The key components of a Dash application\u2019s code are described below. The first is the application layout, which is written in Python using Dash\u2019s HTML wrappers.", "Common HTML objects such as headers, labels, text inputs and Iframes can be easily added using Python constructs as shown.", "The next component is the callback, which is a reactive, functional piece of code that allows developers to observe, modify and update properties of any component in the UI. In Dash, callbacks are defined using Python\u2019s decorator syntax. Callbacks are extremely powerful ways to encode interactivity in an application, as they track states on button-clicks as well as on data updates. The primary callback used in the LIME explainer is shown below.", "As per the above construct, we pass the user\u2019s button click (either the \u201cSubmit\u201d or the \u201cClear\u201d button), as well as the states of the dropdown menu, number of samples entered in the text input, and the text sample for which we want to predict the sentiment. Tracking the state (as opposed to just the value) of each text field here is important \u2014 it allows us to tie the execution of the callback to the button click, rather than executing it every time a value in the text input is updated.", "The code for the Dash LIME explainer app is also available on GitHub:", "Another alternative is to use Streamlit to build the explainer app. This is by far the fastest approach, requiring a very basic knowledge of web development and the fewest lines of code. Unlike the Flask and Dash approaches, the Streamlit app uses its own styles and layout (no customizations via CSS are possible, at least using conventional means). The Streamlit LIME explainer app is shown in action, below.", "Because Streamlit is designed from the ground up to assist in the fast creation and sharing of web apps, the LIME dashboard app has an exceptionally simple directory structure. All the code for the web application is written in a single file, app.py - this includes widgets, structure, interactions and all user inputs to make LIME predictions. The remarkable aspect of this design is that even with all this functionality crammed into one file, it is still very concise (~40 lines of code!). As a result, we only use separate directories for application-specific entities, such as models and data.", "The entire code for the Streamlit dashboard is shown below.", "Headers are written in markdown syntax. Note that because Streamlit\u2019s API is designed for speed and ease of use, it does not allow easy access to the underlying HTML, unlike Flask and Dash. As a result, we are required to explicitly use unsafe rendering of raw HTML strings (using the unsafe_allow_html keyword) to obtain centre-aligned headers in this case. The HTML output from the LIME explainer is then rendered using a Streamlit HTML component, which is a custom component that displays the HTML string in an Iframe.", "As always, the code for the Streamlit LIME explainer app is available on GitHub:", "For the purposes of this post, all three apps were deployed using Heroku, a PaaS system that enables developers to build, run and operate applications on the cloud. Each of the three frameworks used to build the app have good deployment guides for Heroku, shown below.", "However, it is also relatively straightforward to deploy Flask or Dash apps using a production-grade WSGI web server, such as gunicorn and a load balancer such as Nginx. During deployment, Nginx acts as a reverse proxy that sits in front of the web server, to handle a large number of requests with a high degree of reliability. Similarly, Streamlit also offers a means to manually deploy apps using a combination of Docker and/or Nginx.", "The Web Server Gateway Interface (WSGI) is a Python specification developed as a standard for Python web frameworks to interact with web servers. Having such a system makes it easy for developers to place a service such as Nginx in front of the Python web application (e.g., written in Flask or Dash) as a reverse proxy that forwards all requests to the web application. A key property of WSGI-compatible servers is that they are synchronous. This means that each request blocks the server until it receives a response from the application, termed a blocking operation. The typical way WSGI servers incorporate scalability is through the use of multithreading, where a new thread is created for each request in order to be able to handle multiple requests simultaneously. This is then combined with running multiple worker processes of the web server, which does scale well, but is limited by the number of physical cores available on a given machine.", "The WSGI approach, as used by frameworks like Flask and Dash, can cap out in terms of scaling if there are a very large number of requests coming in. The way this is addressed in production systems is by scaling horizontally, i.e., adding more and more servers, and using load balancing services like Nginx that can evenly distribute the load between all servers during times of high request volumes.", "Recent Python web app frameworks like Streamlit, instead rely on a different concurrency system altogether. Streamlit uses a Tornado web server under the hood, which was designed from the ground up to use asynchronous event loops. In this system, a single thread is used, which implements non-blocking functions that execute in order of arrival. This approach can easily achieve a very high degree of concurrency in the web application, which, in apps that rely largely on I/O bound operations, can really help scale the system to handle a large volume of requests simultaneously.", "As always, there is no one single rule to decide which concurrency approach is better than the other. Depending on the exact use case and the application at hand, either a WSGI-based or asynchronous event loop-driven service can be a suitable option.", "Further reading: WSGI is Not Enough Anymore \u2014 Parts I, II and III", "This section discusses the situations in which each framework is the most suitable for the task at hand.", "The power of Flask lies in its ability to allow developers to use any combination of front-end tools to create a web application. This includes form-entry extensions, such as WTForms and Flask-Login, as well as JavaScript visualization libraries ( Highcharts or D3). In addition, Flask provides developers full access to the underlying page structure and user interactions, via HTML, CSS, jQuery and Bootstrap, allowing a huge amount of flexibility in building very complex applications based on the project\u2019s requirements.", "With regard to the LIME explainer dashboard shown in this post, Flask is an excellent option for any one of the following scenarios:", "Dash is a great option for developers that require a high degree of customizability for their applications while working primarily in a Python\u00a0environment. A number of powerful front end visualization tools (from the Plotly.js JavaScript library) are provided right out of the box, allowing developers to focus primarily on styling their apps and adding user interactions. Because Dash is built on top of Flask, it follows a similar deployment strategy as that of Flask, making it very easy to use for teams that already have experience implementing Flask apps in production.", "In general, Dash is an excellent option to build a LIME explainer dashboard in any one of the following scenarios:", "As a relative newcomer to the ecosystem, Streamlit shines in situations where data scientists need to quickly share their work with a larger team via an interactive app. It also works fabulously for an individual data scientist to quickly and interactively explore a dataset or the performance of a model on individual samples.", "For the LIME explainer dashboard, Streamlit is a great alternative to use in any of the following scenarios:", "This post highlighted three different approaches to building a LIME explainer interactive dashboard application. Streamlit is by far the least verbose and easiest to learn among all the options. Flask requires the most upfront time investment, in terms of learning the various pieces that fit together (HTML, CSS, jQuery/JavaScript, Jinja2 and HTTP request methods). Plotly Dash sits nicely in between Flask and Streamlit, in terms of complexity and initial effort to get the dashboard up and running. Depending on the composition and skill set of the team undertaking such a project, any of the three options can be the most suitable.", "The primary reason to build a LIME dashboard as shown is to allow people who aren\u2019t data scientists to examine an NLP classifier\u2019s results. Providing an interactive means to test an individual sample\u2019s results on the fly can help diagnose problems with NLP models and improve model interpretability, at least to some extent. Have fun playing with and customizing the code from each repo (shown below) for your own use case!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Engineer by training. Machine Learning practitioner. I like writing about science, technology and computing."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fbfe12e4592d4&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-lime-explainer-dashboard-with-the-fewest-lines-of-code-bfe12e4592d4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-lime-explainer-dashboard-with-the-fewest-lines-of-code-bfe12e4592d4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-lime-explainer-dashboard-with-the-fewest-lines-of-code-bfe12e4592d4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-lime-explainer-dashboard-with-the-fewest-lines-of-code-bfe12e4592d4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----bfe12e4592d4--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----bfe12e4592d4--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@tech_optimist?source=post_page-----bfe12e4592d4--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@tech_optimist?source=post_page-----bfe12e4592d4--------------------------------", "anchor_text": "Prashanth Rao"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fefdb4f4a0d1b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-lime-explainer-dashboard-with-the-fewest-lines-of-code-bfe12e4592d4&user=Prashanth+Rao&userId=efdb4f4a0d1b&source=post_page-efdb4f4a0d1b----bfe12e4592d4---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbfe12e4592d4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-lime-explainer-dashboard-with-the-fewest-lines-of-code-bfe12e4592d4&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbfe12e4592d4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-lime-explainer-dashboard-with-the-fewest-lines-of-code-bfe12e4592d4&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/tagged/hands-on-tutorials", "anchor_text": "Hands-on Tutorials"}, {"url": "https://pixabay.com/photos/doors-choices-choose-open-decision-1767563/", "anchor_text": "qimono on Pixabay"}, {"url": "https://towardsdatascience.com/fine-grained-sentiment-analysis-in-python-part-2-2a92fdc0160d", "anchor_text": "an earlier post"}, {"url": "https://github.com/prrao87/fine-grained-sentiment/blob/master/explainer.py", "anchor_text": "the project\u2019s GitHub repo"}, {"url": "https://wsgi.readthedocs.io/", "anchor_text": "WSGI"}, {"url": "https://werkzeug.palletsprojects.com/", "anchor_text": "Werkzeug"}, {"url": "https://palletsprojects.com/p/jinja/", "anchor_text": "Jinja"}, {"url": "https://github.com/prrao87/fine-grained-sentiment-app", "anchor_text": "prrao87/fine-grained-sentiment-appThis repo contains an initial prototype of an interactive application written in Flask, that explains the results of\u2026github.com"}, {"url": "https://plotly.com/dash/", "anchor_text": "Dash"}, {"url": "https://github.com/prrao87/fine-grained-sentiment-app-dash", "anchor_text": "prrao87/fine-grained-sentiment-app-dashThis repo contains the Plotly Dash equivalent of an existing interactive application, that explains the results of\u2026github.com"}, {"url": "https://www.streamlit.io/", "anchor_text": "Streamlit"}, {"url": "https://docs.streamlit.io/en/stable/develop_streamlit_components.html", "anchor_text": "Streamlit HTML component"}, {"url": "https://github.com/prrao87/fine-grained-sentiment-app-streamlit", "anchor_text": "prrao87/fine-grained-sentiment-app-streamlitThis repo contains the Streamlit equivalent of an existing interactive application, that explains the results of\u2026github.com"}, {"url": "https://www.heroku.com/what", "anchor_text": "Heroku"}, {"url": "https://stackabuse.com/deploying-a-flask-application-to-heroku/", "anchor_text": "Deploying a Flask Application to Heroku"}, {"url": "https://dash.plotly.com/deployment", "anchor_text": "Deploying Dash apps"}, {"url": "https://towardsdatascience.com/deploy-streamlit-on-heroku-9c87798d2088", "anchor_text": "How to deploy Streamlit on Heroku"}, {"url": "https://gunicorn.org/", "anchor_text": "gunicorn"}, {"url": "https://www.nginx.com/", "anchor_text": "Nginx"}, {"url": "https://www.digitalocean.com/community/tutorials/how-to-deploy-python-wsgi-apps-using-gunicorn-http-server-behind-nginx", "anchor_text": "acts as a reverse proxy that sits in front of the web server"}, {"url": "https://docs.streamlit.io/en/stable/streamlit_faq.html", "anchor_text": "manually deploy apps"}, {"url": "https://www.python.org/dev/peps/pep-3333/", "anchor_text": "Python specification"}, {"url": "https://www.tornadoweb.org/en/stable/", "anchor_text": "Tornado"}, {"url": "https://www.tornadoweb.org/en/stable/guide/async.html", "anchor_text": "asynchronous event loops"}, {"url": "https://www.475cumulus.com/single-post/2017/04/03/WSGI-Is-Not-Enough-Anymore", "anchor_text": "WSGI is Not Enough Anymore"}, {"url": "https://wtforms.readthedocs.io/en/stable/", "anchor_text": "WTForms"}, {"url": "https://flask-login.readthedocs.io/en/latest/", "anchor_text": "Flask-Login"}, {"url": "https://www.highcharts.com/", "anchor_text": "Highcharts"}, {"url": "https://d3js.org/", "anchor_text": "D3"}, {"url": "https://pythonhosted.org/Flask-Bootstrap/", "anchor_text": "Bootstrap"}, {"url": "https://plotly.com/javascript/", "anchor_text": "Plotly.js"}, {"url": "https://github.com/prrao87/fine-grained-sentiment-app", "anchor_text": "LIME explainer app: Flask"}, {"url": "https://github.com/prrao87/fine-grained-sentiment-app-dash", "anchor_text": "LIME explainer app: Dash"}, {"url": "https://github.com/prrao87/fine-grained-sentiment-app-streamlit", "anchor_text": "LIME explainer app: Streamlit"}, {"url": "https://prrao87.github.io/blog/lime-explainer-dashboards/", "anchor_text": "https://prrao87.github.io"}, {"url": "https://medium.com/tag/data-science?source=post_page-----bfe12e4592d4---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----bfe12e4592d4---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/web-development?source=post_page-----bfe12e4592d4---------------web_development-----------------", "anchor_text": "Web Development"}, {"url": "https://medium.com/tag/python?source=post_page-----bfe12e4592d4---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/hands-on-tutorials?source=post_page-----bfe12e4592d4---------------hands_on_tutorials-----------------", "anchor_text": "Hands On Tutorials"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbfe12e4592d4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-lime-explainer-dashboard-with-the-fewest-lines-of-code-bfe12e4592d4&user=Prashanth+Rao&userId=efdb4f4a0d1b&source=-----bfe12e4592d4---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbfe12e4592d4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-lime-explainer-dashboard-with-the-fewest-lines-of-code-bfe12e4592d4&user=Prashanth+Rao&userId=efdb4f4a0d1b&source=-----bfe12e4592d4---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbfe12e4592d4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-lime-explainer-dashboard-with-the-fewest-lines-of-code-bfe12e4592d4&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----bfe12e4592d4--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fbfe12e4592d4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-lime-explainer-dashboard-with-the-fewest-lines-of-code-bfe12e4592d4&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----bfe12e4592d4---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----bfe12e4592d4--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----bfe12e4592d4--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----bfe12e4592d4--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----bfe12e4592d4--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----bfe12e4592d4--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----bfe12e4592d4--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----bfe12e4592d4--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----bfe12e4592d4--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@tech_optimist?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@tech_optimist?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Prashanth Rao"}, {"url": "https://medium.com/@tech_optimist/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "473 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fefdb4f4a0d1b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-lime-explainer-dashboard-with-the-fewest-lines-of-code-bfe12e4592d4&user=Prashanth+Rao&userId=efdb4f4a0d1b&source=post_page-efdb4f4a0d1b--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F5aedbeec5972&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-lime-explainer-dashboard-with-the-fewest-lines-of-code-bfe12e4592d4&newsletterV3=efdb4f4a0d1b&newsletterV3Id=5aedbeec5972&user=Prashanth+Rao&userId=efdb4f4a0d1b&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}