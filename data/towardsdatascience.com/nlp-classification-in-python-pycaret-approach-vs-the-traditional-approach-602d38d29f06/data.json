{"url": "https://towardsdatascience.com/nlp-classification-in-python-pycaret-approach-vs-the-traditional-approach-602d38d29f06", "time": 1683007149.966178, "path": "towardsdatascience.com/nlp-classification-in-python-pycaret-approach-vs-the-traditional-approach-602d38d29f06/", "webpage": {"metadata": {"title": "NLP Text-Classification in Python: PyCaret Approach Vs The Traditional Approach | by Prateek Baghel | Towards Data Science", "h1": "NLP Text-Classification in Python: PyCaret Approach Vs The Traditional Approach", "description": "In this post we\u2019ll see a demonstration of an NLP-Classification problem with 2 different approaches in python: 1-The Traditional approach: In this approach, we will: - preprocess the given text data\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/prateek025/SMS_Spam_Ham/blob/master/SMS_Spam_Ham_Raw.csv", "anchor_text": "Link", "paragraph_index": 5}], "all_paragraphs": ["In this post we\u2019ll see a demonstration of an NLP-Classification problem with 2 different approaches in python:", "1-The Traditional approach: In this approach, we will:- preprocess the given text data using different NLP techniques- embed the processed text data with different embedding techniques- build classification models from more than one ML family on the embedded text data-see the performances of different models and then tune the hyper-parameters of some selected models- and finally, see the performance of the tuned models. Clearly, doing so in python means writing hundreds of lines of code and that may take at least two to three hours of your time.", "2- The PyCaret approach: A new approach, wherein we use a low-code Python library, PyCaret, to do all the things in the above mentioned traditional approach but we write less than 30 lines of code and get the results and insights in minutes.", "To give you an idea about the difference between the two approaches, please take a look at this rough comparison table below:", "You can see that PyCaret approach provides many more solutions and functionalities, all in less time and effort!", "Here the task at hand is to identify whether a given SMS is a Spam or a Ham. Here is a glimpse of the raw data and you can find the raw data from this Link. The data set has 5574 SMS to be classified.", "As you may have figured it out that this problem is two-staged: NLP on the raw text data, followed by Classification on the processed text data.", "Let\u2019s now begin and see the 2 approaches! I\u2019ll share a link of my code on Github at the bottom of this post.", "Before preprocessing, we\u2019ll convert the Flag column from categorical data type to numeric data type. The resultant dataset looks like this:", "Next, under the preprocessing step, I have performed the following operations on the text data:-removed HTTP tags-lowered the case -removed all punctuation and Unicode-removed stopwords-lemmatization(converting a word into its root form considering the relevant Part of Speech associated with the word)", "After performing all of the 5 operations above, the dataset looks like this:", "Before we begin with embedding, a quick exploratory analysis of most common words and most rare words might give us an idea on how Spam and Ham SMS may differ from each other.", "Generally, such exploratory analysis helps us in identifying and removing words that may have very less predictive power(because such words appear in abundance) or that they may have induced noise in the model(because such words appear so rarely). However, I have not dropped any more words from the processed text data and have moved to the embedding stage.", "I have used two embedding techniques here.a. Bag of Words method: This method creates a term document matrix, wherein every unique word/term becomes a column. In Python, we use CountVectorizer() function for BoW embedding.", "b. Term Frequency-Inverse Document Frequency method: This method creates a term document matrix, wherein some weight is applied to each term in the matrix. The weights depend on how common a word occurs in a document and in the entire corpus. In Python, we use TfidfVectorizer() function for TF-IDF embedding.", "Before deciding what models to build, I have split the data with 85% of the data(4737 rows) in the Training data set, and the remainder 15%(837 rows) in the Test data set.The testing dataset allows us to asses the model performance on the unseen data", "For convenience, I have done hyper-parameter tuning for models built on the dataset with BoW embedding. Doing same for the models on TF-IDF embedded dataset will require repeating and adding around 30\u201340 lines of code.", "I further decided to go forward with tuning the hyper-parameters for the Random Forest Classifier and the Adaboost Classifier models as these two models seem to perform better than the other two models. For hyper-parameter tuning, I have used the Grid-Search method.", "The same model performances metrics were used as they were earlier: Confusion Matrix, Accuracy score, Precision score, Recall score, ROC-AUC score. The results also display tuned hyper-parameter values, as well as the 10-Fold cross-validation value of the Accuracy score of the tuned model.", "The following were the performance results of the tuned models :", "Comparing the two tuned models, AdaBoost Classifier performs better on Cross Validation Accuracy score.", "Now let's explore the PyCaret method..!", "We\u2019ll repeat all the steps carried out under the traditional approach, but you\u2019ll notice how quick and easy this approach is.", "Before performing any ML experiment in PyCaret, you have to set up a PyCaret module environment. This allows for the reproducibility, scalability, and deployment of an ML experiment conducted for more than one time. You can see that it takes only 2 lines of command to do so.", "What is great about this function is that it automatically performs all the NLP pre-processing operations(lowering case, removing all the punctuations and stopwords, stemming, lemmatization, and other operations) on your raw text data. This entire step got completed in 21 seconds!", "PyCaret currently supports Topic Modelling embedding techniques only. In this example, we will use the Latent Dirichlet Allocation(LDA) technique and the Non-Negative Matrix Factorization(NMF) technique for embedding. Therefore, it won\u2019t be an apple to apple comparison because we used BoW embedding and TF-IDF embedding in the Traditional Method", "The embedding process is much easier in PyCaret. You can see in the snippet below that we need only 2 lines of code to embed the processed data. By default nlp module\u2019s create_model() creates 4 topics. You can change the toping numbers by passing the desired numerical value in this function.", "Using the same 2 lines of code but changing the model parameter, you can create a dataset with NMF embedding.", "In addition, PyCaret also provides options wiith multiple graphs for exploratory data analysis at this stage. Again you need just 1 line of code to do so. Though, it must be noted that the exploratory data analysis is based on the Topics created during the embedding stage.", "After NLP, the second part of the overall problem is classification. Therefore, we need a different setup environment to perform the classification experiments.", "We will build models on both the LDA embedded dataset and the NMF embedded dataset. However, we\u2019ll have to drop unnecessary variables(SMS, Dominant Topic etc.) from both the embedded datasets so that classification models can be built upon it.", "We used PyCaret\u2019s nlp module for NLP operation, similarly, we use PyCaret\u2019s classification module for Classification part of the problem. To setup Classification module just 2 lines of code of are required. In addition, we also have to specify the Target Variable and the Train-Test split ratio.", "Just like in the nlp setup where pre-processing operations are performed automatically, in the classification setup, depending upon the data, PyCaret automatically creates new features and preforms other preprocessing steps!", "If you thought, setting up PyCaret environment and getting automated feature engineering was easy, model building is even easier! All you have to do is write just one command and see the result!", "You can see PyCaret automatically built base models from 18 different ML classification families and arranged the 15 best models in descending order of Accuracy score. It further points out that for a particular performance metric what model performs the best(metric score highlighted in yellow).", "All of that done by just 1 command and results were up there in around 1 minute!", "We see Random Forest Classifier model performs the best in Accuracy. Let's tune Random Forest Classifier model.", "This is a 3 step process in PyCaret: Create a model, Tune it, Evaluate its performance.Each of the steps requires just 1 line of code!", "Tuning the Random Forest Classifier built on LDA embedded dataset:", "I repeated the same process to tune the models built on the NMF embedded data. I tuned an Extra Trees Classifier model this time with a few changes.", "It can be seen that PyCaret provides solutions, with more options and functionalities, in much fewer lines of code, and even lesser execution time when compared with the traditional method.", "I\u2019d like to further point out that comparing the performance results of the models the traditional method with the performance results of the models from the PyCaret method is not an apple to apple comparison, as both methods use different embedding techniques on the text data. We\u2019ll have to wait for a newer version of PyCaret\u2019s nlp-module that supports the embedding techniques used in the traditional method.", "However, depending upon the business problem, it is important to see that the time and the effort saved, and the insights options gained under the PyCaret method are far more valuable than getting the evaluation metrics values increased by some decimal values under the traditional method.", "Here is the rough comparison table to highlight the key differences between the two approaches again.", "Thank you for reading this post. Happy learning!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Part time Physics-Philosophy nerd, full time Data Scientist"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F602d38d29f06&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnlp-classification-in-python-pycaret-approach-vs-the-traditional-approach-602d38d29f06&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnlp-classification-in-python-pycaret-approach-vs-the-traditional-approach-602d38d29f06&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnlp-classification-in-python-pycaret-approach-vs-the-traditional-approach-602d38d29f06&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnlp-classification-in-python-pycaret-approach-vs-the-traditional-approach-602d38d29f06&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----602d38d29f06--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----602d38d29f06--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@prateek025?source=post_page-----602d38d29f06--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@prateek025?source=post_page-----602d38d29f06--------------------------------", "anchor_text": "Prateek Baghel"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F298258b6d26f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnlp-classification-in-python-pycaret-approach-vs-the-traditional-approach-602d38d29f06&user=Prateek+Baghel&userId=298258b6d26f&source=post_page-298258b6d26f----602d38d29f06---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F602d38d29f06&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnlp-classification-in-python-pycaret-approach-vs-the-traditional-approach-602d38d29f06&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F602d38d29f06&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnlp-classification-in-python-pycaret-approach-vs-the-traditional-approach-602d38d29f06&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/prateek025/SMS_Spam_Ham/blob/master/SMS_Spam_Ham_Raw.csv", "anchor_text": "Link"}, {"url": "https://github.com/prateek025/SMS_Spam_Ham/blob/master/Spam-Ham.ipynb", "anchor_text": "Complete code repository for this comparison"}, {"url": "https://pycaret.org/guide/", "anchor_text": "PyCaret: User guide and documentation"}, {"url": "https://pycaret.org/tutorial/", "anchor_text": "PyCaret: Tutorials"}, {"url": "https://medium.com/tag/data-science?source=post_page-----602d38d29f06---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----602d38d29f06---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/tag/natural-language-process?source=post_page-----602d38d29f06---------------natural_language_process-----------------", "anchor_text": "Natural Language Process"}, {"url": "https://medium.com/tag/predictive-analytics?source=post_page-----602d38d29f06---------------predictive_analytics-----------------", "anchor_text": "Predictive Analytics"}, {"url": "https://medium.com/tag/hyperparameter-tuning?source=post_page-----602d38d29f06---------------hyperparameter_tuning-----------------", "anchor_text": "Hyperparameter Tuning"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F602d38d29f06&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnlp-classification-in-python-pycaret-approach-vs-the-traditional-approach-602d38d29f06&user=Prateek+Baghel&userId=298258b6d26f&source=-----602d38d29f06---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F602d38d29f06&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnlp-classification-in-python-pycaret-approach-vs-the-traditional-approach-602d38d29f06&user=Prateek+Baghel&userId=298258b6d26f&source=-----602d38d29f06---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F602d38d29f06&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnlp-classification-in-python-pycaret-approach-vs-the-traditional-approach-602d38d29f06&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----602d38d29f06--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F602d38d29f06&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnlp-classification-in-python-pycaret-approach-vs-the-traditional-approach-602d38d29f06&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----602d38d29f06---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----602d38d29f06--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----602d38d29f06--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----602d38d29f06--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----602d38d29f06--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----602d38d29f06--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----602d38d29f06--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----602d38d29f06--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----602d38d29f06--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@prateek025?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@prateek025?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Prateek Baghel"}, {"url": "https://medium.com/@prateek025/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "22 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F298258b6d26f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnlp-classification-in-python-pycaret-approach-vs-the-traditional-approach-602d38d29f06&user=Prateek+Baghel&userId=298258b6d26f&source=post_page-298258b6d26f--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F18177f6685b6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnlp-classification-in-python-pycaret-approach-vs-the-traditional-approach-602d38d29f06&newsletterV3=298258b6d26f&newsletterV3Id=18177f6685b6&user=Prateek+Baghel&userId=298258b6d26f&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}