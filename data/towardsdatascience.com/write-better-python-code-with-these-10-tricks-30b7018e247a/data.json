{"url": "https://towardsdatascience.com/write-better-python-code-with-these-10-tricks-30b7018e247a", "time": 1683011821.4826849, "path": "towardsdatascience.com/write-better-python-code-with-these-10-tricks-30b7018e247a/", "webpage": {"metadata": {"title": "Write Better Python Code With These 10 Tricks | by Yong Cui | Towards Data Science", "h1": "Write Better Python Code With These 10 Tricks", "description": "Coding is fun, and coding in Python is even more fun because there are many different ways to accomplish the same functionalities. However, most of the time, there are preferred implementations\u2026"}, "outgoing_paragraph_urls": [{"url": "https://medium.com/better-programming/context-managers-in-python-go-beyond-with-open-as-file-85a27e392114", "anchor_text": "previous article", "paragraph_index": 14}, {"url": "https://medium.com/better-programming/top-5-mistakes-you-make-when-declaring-functions-in-python-b7a0747711a4", "anchor_text": "here", "paragraph_index": 19}, {"url": "https://www.manning.com/books/python-how-to", "anchor_text": "https://www.manning.com/books/python-how-to", "paragraph_index": 34}], "all_paragraphs": ["Coding is fun, and coding in Python is even more fun because there are many different ways to accomplish the same functionalities. However, most of the time, there are preferred implementations, which some people refer to as Pythonic. One common characteristic of these Pythonic implementations is the neatness and conciseness of the code.", "Programming in Python or any coding language is not rocket science, and it\u2019s mostly about crafting skills. If you intentionally try Pythonic coding, these techniques will soon become part of your toolkit, and you\u2019ll find it more and more natural to use them in your project. So let\u2019s explore some of these simple tricks, which I hope you\u2019ll find helpful.", "People like to work with sequences because we know the order of the elements, and we can operate these elements order-wise. In Python, strings, tuples, and lists are the most common sequence data types. We can access individual items using indexing. Like other mainstream programming languages, Python supports 0-based indexing, where we access the first element using zero within a pair of square brackets. Besides, we can also use slice objects to retrieve particular elements of the sequence, as shown in the code examples below.", "However, Python takes a step further by supporting negative indexing. Specifically, we can use -1 to refer to the last element in the sequence and count the items backward. For example, the last but one element has an index of -2 and so on. Importantly, the negative indexing can also work with the positive index in the slice object.", "Containers refer to those container data types that can store other data. Some frequently used built-in containers are tuples, lists, dictionaries, and sets. When we deal with these containers, we often need to check if they contain any elements before we perform additional operations. Indeed, we can check the length of these containers, which corresponds to the number of stored items. When the length is zero, the container is empty. The below shows you a trivial example.", "However, it\u2019s not the most Pythonic way. Instead, we can simply check the container itself, which will evaluate True when it contains elements. Although the following code shows you major container data types, such usage can also apply to strings too (i.e., any non-empty strings are True).", "We often use strings as identifiers for particular objects. For example, we can use strings for the keys in a dictionary. In a data science project, strings are often column names for the data. When we select multiple columns, we\u2019ll inevitably need to create a list of strings. Indeed, we can create strings using literals in a list. However, we\u2019ll have to write pairs of quotes to enclose each of the strings, which is kind of tedious for us \u201clazyish\u201d people. Thus, I\u2019d prefer to create a list of strings by taking advantage of the string\u2019s split() method, as shown in the code snippet below.", "As shown above, the split() method by default uses the spaces as the separators and creates a list of strings from the string. Notably, when you create a list of strings with some elements containing spaces, you can optionally use a different kind of separator (e.g., commas).", "Such usage is inspired by some built-in functionalities. For example, when you create a named tuple class, we can do this: Student = namedtuple(\u201cStudent\u201d, [\u201cname\u201d, \u201cgender\u201d, \u201cage\u201d]). The list of strings specifies the tuple\u2019s \u201cattributes.\u201d However, it\u2019s also natively supported by defining the class this way: Student = namedtuple(\u201cStudent\u201d, \u201cname gender age\u201d). For another instance, creating an Enum class supports the same alternative solutions.", "In many use cases, we need to define variables with particular values based on the conditions, and we can simply use the if\u2026else statement to check the condition. However, it requires several lines of code. If we\u2019re only dealing with just the assignment of one variable, we may want to use the ternary expression, which checks the condition and completes the assignment with just one line of code. Besides, it has a shorter form, which makes the code even more concise. Consider the following example.", "Sometimes, we can get some data from a defined function, and we can take advantage of this and write a shorthand operation of the ternary expression, as shown below.", "We often need to read data from files and write data to files. The most common way is to simply open a file using the built-in open() function, which creates a file object that we can operate. Have you encountered the following problem before?", "In the preceding code snippet, we start with a text file, which has the text of \u201cHello World!\u201d We then append some new data to the file. However, after a while, we want to work on the file again; the text file still has the old data when we read it. In other words, the appended texts are not included in the text file. Why can that happen?", "It\u2019s because we haven\u2019t closed the file object in the first place. Without closing the file, the changes can\u2019t be saved. Indeed, we can explicitly call the close() method on the file object. However, we can do this using the \u201cwith\u201d statement, which will close the file object for us automatically, as shown below. When we\u2019re done with the operation with the file, we can verify that the file is closed by accessing the file object\u2019s closed attribute.", "In a more general term, the with statement is the syntax for using context managers in Python. The previous example involves the file operation because the files are shared resources, and we\u2019re responsible for releasing these resources. Context managers can help us get the job done. As shown previously, after the file operation is over, the file gets closed automatically by using the with statement. You can learn more about context management in my previous article.", "Oftentimes we need to evaluate multiple conditions. There are several possible scenarios. For numeric values, we can have multiple comparisons for the same variable. In this case, we can chain these comparisons.", "In some other scenarios, we can have multiple equality comparisons, and we can take advantage of the following technique using the in keyword for membership testing.", "Another technique is the use of the built-in all() and any() functions for evaluating multiple conditions. Specifically, the all() function will evaluate to be True when the elements in the iterable are all True, and thus this function is suitable to replace a series of AND logical comparisons. On the other hand, the any() function will evaluate to be True when any element in the iterable is True, and thus it\u2019s suitable to replace a series of OR logical operations. Pertinent examples are shown below.", "In almost all Python projects, most of the code involves creating and calling functions. In other words, we continuously deal with function declarations and refactorings. In many scenarios, we need to call a function multiple times. Depending on varied sets of parameters, the function will operate slightly differently. However, sometimes one set of parameters may be often used than others, in which case, we should consider setting default values when we declare the functions. Consider the following trivial example.", "One thing to note is that if you\u2019re dealing with mutable data types (e.g., lists, sets) when you set the default value, make sure that you use None instead of the constructor (e.g., arg_name=[]). Because Python creates the function object where it\u2019s defined, providing the empty list will be \u201cstuck\u201d with the function object. In other words, the function object won\u2019t be created on the fly when you\u2019re calling it. Instead, you\u2019ll be dealing with the same function object, including its initially created default mutable object, in the memory, which may lead to unexpected behaviors (see here for more discussion).", "When we have multiple items in a list, tuple, or string (e.g., multiple characters), we often want to count how many there are for each item. To do that, it\u2019s possible to write some tedious code for this functionality.", "As shown above, we first had to create a set that includes only unique words. We then iterated the word set and used the count() method to find out the occurrences of each word. However, there is a better way to do it \u2014 using the Counter class, which is designed to fulfill this counting task.", "The Counter class is available in the collections module. To use the class, we simply created a generator: x.lower() for x in words, and each of the items will be counted. As you can see, the Counter object is a dict-like mapping object with each key corresponding to the unique item of the word list, while the values are the counts for these items. Pretty concise, right?", "Moreover, if you\u2019re interested in finding out the most frequently occurring items of the word list, we can take advantage of the most_common() method of the Counter object. The following code shows you this usage. You just need to specify an integer (N), which will find out the most frequent N items from the list. As a side note, the Counter object will also work with other sequence data, such as strings and tuples.", "Sorting items in a list is a prevalent task in many projects. The most basic sorting is based on the numeric or alphabetic order, and we can use the built-in sorted() function. By default, the sorted() function will sort the list (actually, it can be any iterable) in the ascending order. If we specify the reverse argument to be True, we can get the items in the descending order. Some simple usages are shown below.", "Besides these basic usages, we can specify the key argument such that complicated items can be sorted, such as a list of tuples. Consider the following example for such a case.", "The above code shows you the two advanced sorting examples by leveraging a lambda function, which is passed to the key argument. The first one is sorting the items using a descending order, while the second one is using the default ascending order. What if we want to combine these two requirements? If you think about playing with the reverse argument, you probably bark up the wrong tree, because if you\u2019re trying to sort by multiple criteria, the reverse argument will apply to all. What\u2019s the trick then? See the code snippet below.", "As you can see, by setting the reverse argument to True or False, neither worked. Instead, the trick is to negate the grades, and thus when you sort by the default ascending order, the scores will be sorted reversely because of the negation of these values. However, there is a caveat for this method, because negation can only work with numeric values, but not strings.", "Dictionaries are a potent data type that allows us to store data in the form of key-value pairs. It\u2019s required that all the keys are hashable such that under the hood, storing these data can involve the use of a hash table. Such implementation allows an O(1) efficiency for data retrieving and insertion. However, it should be noted that besides the built-in dict type, we have alternative dictionaries that we can use. Among them, I\u2019d like to discuss the defaultdict type. Unlike the built-in dict type, the defaultdict allows us to set a default factory function that creates an element when the key doesn\u2019t exist. You\u2019re probably not unfamiliar with the following error.", "Suppose that we\u2019re dealing with words, and we want to group the same characters as a list, and these lists are associated with the characters being the keys. Here\u2019s a naive implementation using the built-in dict type. Notably, it\u2019s critical to check if the dict object has the letter key, because calling the append() method can raise a KeyError exception if the key doesn\u2019t exist.", "Let\u2019s see how we can use the defaultdict to write more concise code. Although the example is trivial, it\u2019s just giving you some ideas about the defaultdict class, which saves us from dealing with non-existing keys among dictionary objects.", "You may know some of these tricks before reading this article, but I hope you still got a good refresh on these skills. Practicing these idiomatic usages in your projects will make your Python code more readable and performant.", "That\u2019s it for this piece. Thanks for reading.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Work at the nexus of biomedicine, data science & mobile dev. Author of Python How-to by Manning (https://www.manning.com/books/python-how-to)."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F30b7018e247a&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-better-python-code-with-these-10-tricks-30b7018e247a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-better-python-code-with-these-10-tricks-30b7018e247a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-better-python-code-with-these-10-tricks-30b7018e247a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-better-python-code-with-these-10-tricks-30b7018e247a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----30b7018e247a--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----30b7018e247a--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://yongcui01.medium.com/?source=post_page-----30b7018e247a--------------------------------", "anchor_text": ""}, {"url": "https://yongcui01.medium.com/?source=post_page-----30b7018e247a--------------------------------", "anchor_text": "Yong Cui"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F88ff1e2545d0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-better-python-code-with-these-10-tricks-30b7018e247a&user=Yong+Cui&userId=88ff1e2545d0&source=post_page-88ff1e2545d0----30b7018e247a---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F30b7018e247a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-better-python-code-with-these-10-tricks-30b7018e247a&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F30b7018e247a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-better-python-code-with-these-10-tricks-30b7018e247a&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@cgower?utm_source=medium&utm_medium=referral", "anchor_text": "Christopher Gower"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://medium.com/better-programming/context-managers-in-python-go-beyond-with-open-as-file-85a27e392114", "anchor_text": "previous article"}, {"url": "https://medium.com/better-programming/top-5-mistakes-you-make-when-declaring-functions-in-python-b7a0747711a4", "anchor_text": "here"}, {"url": "https://medium.com/tag/technology?source=post_page-----30b7018e247a---------------technology-----------------", "anchor_text": "Technology"}, {"url": "https://medium.com/tag/programming?source=post_page-----30b7018e247a---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----30b7018e247a---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/data-science?source=post_page-----30b7018e247a---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/python?source=post_page-----30b7018e247a---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F30b7018e247a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-better-python-code-with-these-10-tricks-30b7018e247a&user=Yong+Cui&userId=88ff1e2545d0&source=-----30b7018e247a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F30b7018e247a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-better-python-code-with-these-10-tricks-30b7018e247a&user=Yong+Cui&userId=88ff1e2545d0&source=-----30b7018e247a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F30b7018e247a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-better-python-code-with-these-10-tricks-30b7018e247a&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----30b7018e247a--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F30b7018e247a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-better-python-code-with-these-10-tricks-30b7018e247a&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----30b7018e247a---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----30b7018e247a--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----30b7018e247a--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----30b7018e247a--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----30b7018e247a--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----30b7018e247a--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----30b7018e247a--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----30b7018e247a--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----30b7018e247a--------------------------------", "anchor_text": ""}, {"url": "https://yongcui01.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://yongcui01.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Yong Cui"}, {"url": "https://yongcui01.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "5.5K Followers"}, {"url": "https://www.manning.com/books/python-how-to", "anchor_text": "https://www.manning.com/books/python-how-to"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F88ff1e2545d0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-better-python-code-with-these-10-tricks-30b7018e247a&user=Yong+Cui&userId=88ff1e2545d0&source=post_page-88ff1e2545d0--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fef441bd78519&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-better-python-code-with-these-10-tricks-30b7018e247a&newsletterV3=88ff1e2545d0&newsletterV3Id=ef441bd78519&user=Yong+Cui&userId=88ff1e2545d0&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://www.manning.com/books/python-how-to", "anchor_text": "Python How-To2023"}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}