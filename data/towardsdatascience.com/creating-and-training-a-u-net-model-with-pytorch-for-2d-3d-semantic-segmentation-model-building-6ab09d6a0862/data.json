{"url": "https://towardsdatascience.com/creating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-model-building-6ab09d6a0862", "time": 1683017190.7109098, "path": "towardsdatascience.com/creating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-model-building-6ab09d6a0862/", "webpage": {"metadata": {"title": "Creating and training a U-Net model with PyTorch for 2D & 3D semantic segmentation: Model building [2/4] | by Johannes Schmidt | Towards Data Science", "h1": "Creating and training a U-Net model with PyTorch for 2D & 3D semantic segmentation: Model building [2/4]", "description": "In the previous chapter we built a dataloader that picks up our images and performs some transformations and augmentations so that they can be fed in batches to a neural network like the U-Net. In\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/creating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-dataset-fb1f7f80fe55", "anchor_text": "previous chapter", "paragraph_index": 0}, {"url": "https://github.com/ELEKTRONN/elektronn3/blob/master/elektronn3/models/unet.py", "anchor_text": "https://github.com/ELEKTRONN/elektronn3/blob/master/elektronn3/models/unet.py", "paragraph_index": 5}, {"url": "https://github.com/jaxony/unet-pytorch", "anchor_text": "https://github.com/jaxony/unet-pytorch", "paragraph_index": 5}, {"url": "https://distill.pub/2016/deconv-checkerboard/", "anchor_text": "checkerboard artifact", "paragraph_index": 10}, {"url": "https://github.com/sksq96/pytorch-summary", "anchor_text": "pytorch-summary", "paragraph_index": 14}, {"url": "https://johschmidt42.medium.com/creating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-training-3-4-8242d31de234", "anchor_text": "next chapter", "paragraph_index": 20}, {"url": "http://M.Sc", "anchor_text": "M.Sc", "paragraph_index": 22}], "all_paragraphs": ["In the previous chapter we built a dataloader that picks up our images and performs some transformations and augmentations so that they can be fed in batches to a neural network like the U-Net. In this part, we focus on building a U-Net from scratch with the PyTorch library. The goal is to implement the U-Net in such a way, that important model configurations such as the activation function or the depth can be passed as arguments when creating the model.", "The U-Net is a convolutional neural network architecture that is designed for fast and precise segmentation of images. It has performed extremely well in several challenges and to this day, it is one of the most popular end-to-end architectures in the field of semantic segmentation.", "We can split the network into two parts: The encoder path (backbone) and the decoder path. The encoder captures features at different scales of the images by using a traditional stack of convolutional and max pooling layers. Concretely speaking, a block in the encoder consists of the repeated use of two convolutional layers (k=3, s=1), each followed by a non-linearity layer, and a max-pooling layer (k=2, s=2). For every convolution block and its associated max pooling operation, the number of feature maps is doubled to ensure that the network can learn the complex structures effectively.", "The decoder path is a symmetric expanding counterpart that uses transposed convolutions. This type of convolutional layer is an up-sampling method with trainable parameters and performs the reverse of (down)pooling layers such as the max pool. Similar to the encoder, each convolution block is followed by such an up-convolutional layer. The number of feature maps is halved in every block. Because recreating a segmentation mask from a small feature map is a rather difficult task for the network, the output after every up-convolutional layer is appended by the feature maps of the corresponding encoder block. The feature maps of the encoder layer are cropped if the dimensions exceed the one of the corresponding decoder layers.", "In the end, the output passes another convolution layer (k=1, s=1) with the number of feature maps being equal to the number of defined labels. The result is a u-shaped convolutional network that offers an elegant solution for good localization and use of context. Let\u2019s take a look at the code.", "This code is based on https://github.com/ELEKTRONN/elektronn3/blob/master/elektronn3/models/unet.py (c) 2017 Martin Drawitsch, released under MIT License, which implements a configurable (2D/3D) U-Net with user-defined network depth and a few other improvements of the original architecture. They themselves actually used the 2D code from Jackson Huang https://github.com/jaxony/unet-pytorch.", "Here is a simplified version of the code \u2014 saved in a file unet.py:", "I will not go into detail here, but rather just mention important design choices. It can be useful to view the architecture in repeating blocks in the encoder but also in the decoder path. As you can see in unet.py the DownBlock and the UpBlock help to build the architecture. Both use smaller helper functions that return the correct layer, depending on what arguments are passed , e.g. if a 2D (dim=2) or 3D (dim=3) network is wanted. The number of blocks is defined by the depth of the network.", "A DownBlock generally has the following scheme:", "A UpBlock has the following layers:", "For our Unet class we just need to combine these blocks and make sure that the correct layers from the encoder are concatenated to the decoder (skip pathways). These layers have to be cropped if their sizes do not match with the corresponding layers from the decoder. In such cases, the autocrop function is used. For merging, I concatenate along the channel dimension (see Concatenate). Instead of transposed convolutions we could also use upsampling layers (interpolation methods) that are followed by a 1x1 or 3x3 convolution block to reduce the channel dimension. Using interpolation generally gets rid of the checkerboard artifact. For 3D input consider using trilinear interpolation.", "At the end we just need to think about the parameter initialization. By default, the weights are initialized with torch.nn.init.xavier_uniform_ and the biases are initialized with zeros using torch.nn.init.zeros_.", "For details and the available parameter options, I encourage you to take a look at the code. Feel free to change the code to your needs or expand e.g. the number of activation functions.", "Let\u2019s create such a model and use it to make a prediction on some random input:", "To check weather our model is correct, we can get the model\u2019s summary with this package pytorch-summary:", "which prints out a summary like this:", "To ensure correct semantic concatenations, it is advised to use input sizes that return even spatial dimensions in every block but the last in the encoder. For example: An input size of 120\u00b2 gives intermediate output shapes of [60\u00b2, 30\u00b2, 15\u00b2] in the encoder path for a U-Net with depth=4 . A U-Net with depth=5 with the same input size is not recommended, as a maxpooling operation on odd spatial dimensions (e.g. on a 15\u00b2 input) should be avoided.", "To make our lives easier, we can numerically compute the maximum network depth for a given input dimension with a simple function:", "which tells us that that we can design a U-Net as deep as this without having to worry about semantic mismatches. Conversely, we can also numerically determine the possible input shapes dimensions for a given depth:", "which tells us that we can have 3 different input shapes with such a level 8 U-Net architecture. But I dare to say that such a network with this input size is probably not useful in practice.", "In this part we created a configurable UNet model for the purpose of semantic segmentation. Now that we have built our model, it is time to create a training loop in the next chapter.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data & Software Engineer at Datamesh GmbH. M.Sc. in Biology with exp. in artificial neural networks & deep learning. Very interested in software development."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F6ab09d6a0862&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-model-building-6ab09d6a0862&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-model-building-6ab09d6a0862&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-model-building-6ab09d6a0862&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-model-building-6ab09d6a0862&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----6ab09d6a0862--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----6ab09d6a0862--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://johschmidt42.medium.com/?source=post_page-----6ab09d6a0862--------------------------------", "anchor_text": ""}, {"url": "https://johschmidt42.medium.com/?source=post_page-----6ab09d6a0862--------------------------------", "anchor_text": "Johannes Schmidt"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb5022ff2e428&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-model-building-6ab09d6a0862&user=Johannes+Schmidt&userId=b5022ff2e428&source=post_page-b5022ff2e428----6ab09d6a0862---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6ab09d6a0862&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-model-building-6ab09d6a0862&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6ab09d6a0862&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-model-building-6ab09d6a0862&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://arxiv.org/abs/1505.04597", "anchor_text": "https://arxiv.org/abs/1505.04597"}, {"url": "https://towardsdatascience.com/creating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-dataset-fb1f7f80fe55", "anchor_text": "previous chapter"}, {"url": "https://github.com/ELEKTRONN/elektronn3/blob/master/elektronn3/models/unet.py", "anchor_text": "https://github.com/ELEKTRONN/elektronn3/blob/master/elektronn3/models/unet.py"}, {"url": "https://github.com/jaxony/unet-pytorch", "anchor_text": "https://github.com/jaxony/unet-pytorch"}, {"url": "https://distill.pub/2016/deconv-checkerboard/", "anchor_text": "checkerboard artifact"}, {"url": "https://github.com/sksq96/pytorch-summary", "anchor_text": "pytorch-summary"}, {"url": "https://johschmidt42.medium.com/creating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-training-3-4-8242d31de234", "anchor_text": "next chapter"}, {"url": "https://johschmidt42.medium.com/membership", "anchor_text": "Join Medium with my referral link - Johannes SchmidtRead every story from Johannes Schmidt (and thousands of other writers on Medium). Your membership fee directly\u2026johschmidt42.medium.com"}, {"url": "https://medium.com/tag/unet?source=post_page-----6ab09d6a0862---------------unet-----------------", "anchor_text": "Unet"}, {"url": "https://medium.com/tag/python?source=post_page-----6ab09d6a0862---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/pytorch?source=post_page-----6ab09d6a0862---------------pytorch-----------------", "anchor_text": "Pytorch"}, {"url": "https://medium.com/tag/deep-learning?source=post_page-----6ab09d6a0862---------------deep_learning-----------------", "anchor_text": "Deep Learning"}, {"url": "https://medium.com/tag/semantic-segmentation?source=post_page-----6ab09d6a0862---------------semantic_segmentation-----------------", "anchor_text": "Semantic Segmentation"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6ab09d6a0862&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-model-building-6ab09d6a0862&user=Johannes+Schmidt&userId=b5022ff2e428&source=-----6ab09d6a0862---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6ab09d6a0862&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-model-building-6ab09d6a0862&user=Johannes+Schmidt&userId=b5022ff2e428&source=-----6ab09d6a0862---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6ab09d6a0862&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-model-building-6ab09d6a0862&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----6ab09d6a0862--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F6ab09d6a0862&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-model-building-6ab09d6a0862&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----6ab09d6a0862---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----6ab09d6a0862--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----6ab09d6a0862--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----6ab09d6a0862--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----6ab09d6a0862--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----6ab09d6a0862--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----6ab09d6a0862--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----6ab09d6a0862--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----6ab09d6a0862--------------------------------", "anchor_text": ""}, {"url": "https://johschmidt42.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://johschmidt42.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Johannes Schmidt"}, {"url": "https://johschmidt42.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "392 Followers"}, {"url": "http://M.Sc", "anchor_text": "M.Sc"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb5022ff2e428&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-model-building-6ab09d6a0862&user=Johannes+Schmidt&userId=b5022ff2e428&source=post_page-b5022ff2e428--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F4ca5ac031e5a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-and-training-a-u-net-model-with-pytorch-for-2d-3d-semantic-segmentation-model-building-6ab09d6a0862&newsletterV3=b5022ff2e428&newsletterV3Id=4ca5ac031e5a&user=Johannes+Schmidt&userId=b5022ff2e428&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}