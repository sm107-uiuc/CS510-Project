{"url": "https://towardsdatascience.com/learning-rust-by-converting-python-to-rust-259e735591c6", "time": 1683011485.667918, "path": "towardsdatascience.com/learning-rust-by-converting-python-to-rust-259e735591c6/", "webpage": {"metadata": {"title": "Learning Rust by Converting Python to Rust | by Shinichi Okada | Towards Data Science", "h1": "Learning Rust by Converting Python to Rust", "description": "In this article, we are going to use a Python solution of one of Leetcode problems and convert it to Rust code. You will find not only similarities between two languages but also learn Rust programming."}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/you-want-to-learn-rust-but-you-dont-know-where-to-start-fc826402d5ba", "anchor_text": "this article", "paragraph_index": 1}, {"url": "https://leetcode.com/problems/unique-paths/", "anchor_text": "\u201cUnique Paths\u201d", "paragraph_index": 4}, {"url": "https://tech.io/snippet/qpOVDt4", "anchor_text": "solution", "paragraph_index": 6}, {"url": "https://tech.io/snippet/MbIqTol", "anchor_text": "basic Rust code", "paragraph_index": 10}, {"url": "https://www.codingame.com/playgrounds/365/getting-started-with-rust/primitive-data-types", "anchor_text": "link", "paragraph_index": 13}, {"url": "https://doc.rust-lang.org/book/ch13-01-closures.html?highlight=annotate,a,type#closure-type-inference-and-annotation", "anchor_text": "closure", "paragraph_index": 14}, {"url": "https://doc.rust-lang.org/book/ch03-03-how-functions-work.html", "anchor_text": "Functions", "paragraph_index": 15}, {"url": "https://doc.rust-lang.org/1.0.0/style/style/naming/README.html", "anchor_text": "conventional style", "paragraph_index": 15}, {"url": "https://doc.rust-lang.org/book/ch03-03-how-functions-work.html?highlight=expression,and,statement#function-bodies-contain-statements-and-expressions", "anchor_text": "Function Bodies Contain Statements and Expressions", "paragraph_index": 17}, {"url": "https://doc.rust-lang.org/reference/keywords.html", "anchor_text": "keyword", "paragraph_index": 19}, {"url": "https://learning-rust.github.io/docs/d7.std_primitives_and_preludes.html#Standard-Macros", "anchor_text": "the standard macros", "paragraph_index": 20}, {"url": "https://doc.rust-lang.org/book/ch03-02-data-types.html#the-array-type", "anchor_text": "Arrays", "paragraph_index": 32}, {"url": "https://doc.rust-lang.org/std/fmt/index.html", "anchor_text": "{:?}", "paragraph_index": 34}, {"url": "https://doc.rust-lang.org/book/ch03-02-data-types.html#the-tuple-type", "anchor_text": "Tuples", "paragraph_index": 36}, {"url": "https://doc.rust-lang.org/std/vec/struct.Vec.html", "anchor_text": "vectors", "paragraph_index": 39}, {"url": "https://doc.rust-lang.org/std/vec/index.html", "anchor_text": "doc.rust-lang.org", "paragraph_index": 40}, {"url": "https://doc.rust-lang.org/std/vec/struct.Vec.html", "anchor_text": "vector", "paragraph_index": 43}, {"url": "https://doc.rust-lang.org/std/primitive.usize.html", "anchor_text": "usize", "paragraph_index": 44}, {"url": "https://doc.rust-lang.org/std/keyword.as.html", "anchor_text": "doc.rust-lang", "paragraph_index": 45}, {"url": "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.len", "anchor_text": "len", "paragraph_index": 46}, {"url": "https://doc.rust-lang.org/std/primitive.str.html", "anchor_text": "&str", "paragraph_index": 55}, {"url": "https://doc.rust-lang.org/book/ch08-02-strings.html#what-is-a-string", "anchor_text": "String", "paragraph_index": 55}, {"url": "https://medium.com/series/learning-rust-all-about-strings-c7666812d893", "anchor_text": "link", "paragraph_index": 55}, {"url": "https://doc.rust-lang.org/std/string/trait.ToString.html", "anchor_text": "to_string", "paragraph_index": 56}, {"url": "https://doc.rust-lang.org/book/ch05-03-method-syntax.html#method-syntax", "anchor_text": "method", "paragraph_index": 59}, {"url": "https://blog.rust-lang.org/2015/05/11/traits.html", "anchor_text": "Traits", "paragraph_index": 62}, {"url": "https://doc.rust-lang.org/book/ch13-04-performance.html?highlight=zero-cost,abstractions#comparing-performance-loops-vs-iterators", "anchor_text": "Rust Programming Language", "paragraph_index": 68}, {"url": "https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html", "anchor_text": "ownership", "paragraph_index": 70}, {"url": "https://doc.rust-lang.org/book/title-page.html", "anchor_text": "Rust documentation", "paragraph_index": 70}, {"url": "https://doc.rust-lang.org/book/title-page.html", "anchor_text": "the official book", "paragraph_index": 71}, {"url": "https://blog.codewithshin.com/membership", "anchor_text": "becoming a member", "paragraph_index": 74}], "all_paragraphs": ["Rust is a statically and strongly typed systems programming language. Rust is for people who crave speed and stability in a language.", "I consider myself a Rust beginner. I started learning Rust after writing this article and I am still learning new things every day. I am at the stage where I can convert simple Python code to Rust and be able to explain what I am coding.", "In this article, we are going to use a Python solution of one of the Leetcode problems and convert it to Rust code. You will find not only similarities between the two languages but also learn Rust programming.", "You can run the code and also tweak it in the examples in this article.", "LeetCode is a very popular website where you can level up your coding skills. One of the problems is called \u201cUnique Paths\u201d where a robot is located at the top-left corner of a m x n grid. You can only move either down or right and you need to find how many unique paths there are between two points.", "For example from point A to B in the image below, there are 3 unique paths and from A to C there are 5 unique paths. The following diagram helps you to find the number of unique paths from A to each area. Since you only move down or right, you add the number above and left to find the number of the unique paths to that point.", "There must be many ways to solve this problem using Python, but we are going to use the following solution.", "We are going to convert this Python code to Rust step by step in this article.", "The above result shows that the runtime is 36 ms and the memory usage is 13.6 MB. We will compare this one with the Rust result later.", "(When I submitted it again to LeetCode, the result changes and the above one was the best one. You may have a different result.)", "We are going to start with a basic Rust code.", "Rust always runs the main function first when you run the program. We create a function called unique_pathswith two parameters mand n, which are i32 types.", "In function, we must declare the type of each parameter. Every variable, item, and value in a Rust program has a type.", "More primitive data types are in this link.", "By the way, Rust\u2019s default integer type is i32 so if you don't annotate the type of parameters in a closure and if they are integers, Rust will use i32. Rust's compiler is able to infer the types of the parameters and most variables.", "Functions use the fn keyword to start. Rust code uses a snake case as the conventional style for functions. Functions can return values and we declare their type for the return value using an arrow ->. The unique_paths returns data type of i32. Rust uses {} for the function body.", "We return the sum, m + n. Functions' bodies are made of a series of statements and ending in an expression.", "Statements are instructions that perform some action and do not return a value. Expressions evaluate to a resulting value. \u2014 Function Bodies Contain Statements and Expressions", "The expression m + n doesn't include ending semicolons because we want to return it. If you add a semicolon to the end of an expression, you turn it into a statement and it will not return a value.", "In the main() function, we use a keyword let to indicate a variable. Local variables are immutable as default, but you can use mut to make them mutable. For our case, we don\u2019t need to make it mutable.", "println!() is one of the standard macros. It parses the format string and converts it into the print format.", "pritln! fills up the placeholders in order. You can use the index and name=\"vale\".", "In the next step, we add a if-else statement. expr == expr (where expr means expression) is the equality comparison. expr || expr is the logical OR.", "If either of m or n equals 1 then we return 1. Please note no semicolon after 1 since we want to return 1.", "Rust doesn\u2019t use a bracket for the condition in if statement.", "if-else if-else has the following form.", "This may not be necessary to pass the LeetCode, but this shows you how to call the own function from within.", "If n is smaller than m, we swap the variable positions and call the own function.", "In Python, we used range as:", "The above code will output 1 to 9.", "The above code will output 1 to 10.", "Let\u2019s check which one from arrays, tuples, or vectors in Rust we can use for this purpose.", "Arrays must have the same type and fixed-length. Arrays are immutable by default and we can\u2019t use mut to change its element.", "We also can\u2019t set an array length dynamically. Because arrays have a length defined at compile time. A variable is not known at compile-time because it can vary. The compiler would not know how much space to allocate on the stack to provide storage for the array.", "If you try to print out without the {:?}, you will fail. We can\u2019t format an array with the default formatter. All the Rust data types implement Debug trait, and you can use {:?} to format it and print an array.", "So we can\u2019t use an array here.", "Tuples can have different types and have a fixed length.", "To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value.", "Again we can\u2019t use tuples since they must have a fixed length.", "Rust vectors store more than one value next to each other in memory. Vectors store values of the same type.", "A contiguous growable array type with heap-allocated contents. \u2014 doc.rust-lang.org", "The vec! macro creates a new vector that holds the values you give it.", "A vector is like a re-sizable array but all elements must be in the same type.", "So we will need to use a vector.", "The second number, the length, in vec![1; 3] needs to be usize type. We annotated m and n as i32 but we can cast types using theas keyword. We can use the as expression only converting between primitive types.", "as is most commonly used to turn primitive types into other primitive types. \u2014 doc.rust-lang", "vectors has a method len that returns the number of elements in the vector.", "We use all the above codes to get the number of unique paths.", "You may notice that #[allow(unused_variables)]. It will work without it but the compiler gives you a warning:", "To remove this warning we add #[allow(unused_variables)].", "We will see the final code for LeetCode later. Before that, we are going a step further with this code.", "We are going to apply struct, impl, and trait to the above solution. Please note that this won\u2019t work on LeetCode.", "Structs are used to encapsulate related properties into one unified data type. Structs are different from classes in other languages. For example, Rust\u2019s struct doesn\u2019t support inheritance.", "Tuples are convenient but using the index like t.0 and keeping track of the meaning of each part isn't straightforward.", "Rust structs contain named fields. We use a keyword struct and set fields with its type within the curly bracket. A structure defines data as a key-value pair.", "You may be wondering why we need to_string(). Rust has two main types of strings: &str and String. &str is called \u2018string slices\u2019. A string slice has a fixed size, and cannot be mutated. A String is stored as a vector. String is heap-allocated, growable, and not null-terminated. (More on this in this link.)", "\"John\" is a &str and since we defined the type of first_name as String in the struct, we need to convert to a String using to_string.", "We put associated functions into a impl block.", "Method parameter self, &self, and &mut self", "We added a method full_name in impl Person. The function takes &self as the first parameter. It can take one of self, &self, or &mut self.", "We use the dot operator for instance methods as in p.full_name() to access the field.", "Let\u2019s use struct and impl to our code:", "Traits are similar to interfaces in OOP languages. They are used to define the functionality a type must provide.", "We added a trait called UiquePaths with a function unique_paths. We need to update the impl using impl trait-name for struct-name.", "We instantiate it in the main function using :: notation.", "Now we implemented struct, impl, and trait.", "The following solution is adjusted for the LeetCode environment.", "Please note Runtime 0 ms. Rust does not have a runtime. Rust applies Zero-cost abstraction. There\u2019s no extra runtime overhead that you pay for certain powerful abstractions or safety features that you do have to pay a runtime cost for in other languages.", "\u2026 iterators, although a high-level abstraction, get compiled down to roughly the same code as if you\u2019d written the lower-level code yourself. Iterators are one of Rust\u2019s zero-cost abstractions, by which we mean using the abstraction imposes no additional runtime overhead. \u2014 Rust Programming Language", "Rust\u2019s memory usage was 2.1 MB comparing to 13.8 MB in Python.", "Rust has unique ways of managing heap memory and it uses a concept called ownership to manage it. I recommend that you dive into the Rust documentation to learn more about it.", "We touched the surfaces of primitive data types, type annotations, functions, statements, expressions, variables, macro, if statement, range, arrays, tuples, vectors, struct, impl, and trait. You can find more information in the official book.", "As I stated before I am still learning Rust. I appreciate expert feedback on how to improve the solution.", "I hope you learned something and are ready for the next step. There are many key concepts we couldn\u2019t cover in this article. Please stay tuned for the next post.", "Get full access to every story on Medium by becoming a member.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "A programmer and technology enthusiast with a passion for sharing my knowledge and experience."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F259e735591c6&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-rust-by-converting-python-to-rust-259e735591c6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-rust-by-converting-python-to-rust-259e735591c6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-rust-by-converting-python-to-rust-259e735591c6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-rust-by-converting-python-to-rust-259e735591c6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://me.dm/@shinichiokada", "anchor_text": "Mastodon"}, {"url": "https://towardsdatascience.com/?source=post_page-----259e735591c6--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----259e735591c6--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://blog.codewithshin.com/?source=post_page-----259e735591c6--------------------------------", "anchor_text": ""}, {"url": "https://blog.codewithshin.com/?source=post_page-----259e735591c6--------------------------------", "anchor_text": "Shinichi Okada"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa262a804b78f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-rust-by-converting-python-to-rust-259e735591c6&user=Shinichi+Okada&userId=a262a804b78f&source=post_page-a262a804b78f----259e735591c6---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F259e735591c6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-rust-by-converting-python-to-rust-259e735591c6&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F259e735591c6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-rust-by-converting-python-to-rust-259e735591c6&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@lewagon?utm_source=medium&utm_medium=referral", "anchor_text": "Le Wagon"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://towardsdatascience.com/you-want-to-learn-rust-but-you-dont-know-where-to-start-fc826402d5ba", "anchor_text": "this article"}, {"url": "https://towardsdatascience.com/you-want-to-learn-rust-but-you-dont-know-where-to-start-fc826402d5ba", "anchor_text": "You Want to Learn Rust but You Don\u2019t Know Where to StartA Complete Resource for Rust Beginnerstowardsdatascience.com"}, {"url": "https://leetcode.com/problems/unique-paths/", "anchor_text": "\u201cUnique Paths\u201d"}, {"url": "https://tech.io/snippet/qpOVDt4", "anchor_text": "solution"}, {"url": "https://tech.io/snippet/qpOVDt4", "anchor_text": "Try this Python code online."}, {"url": "https://docs.python.org/3/library/typing.html", "anchor_text": "type annotations"}, {"url": "https://tech.io/snippet/MbIqTol", "anchor_text": "basic Rust code"}, {"url": "https://tech.io/snippet/MbIqTol", "anchor_text": "Try this Rust lang online."}, {"url": "https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html?highlight=heap#the-stack-and-the-heap", "anchor_text": "defines"}, {"url": "https://learning-rust.github.io/docs/a8.primitive_data_types.html", "anchor_text": "primitive data types"}, {"url": "https://learning-rust.github.io/docs/a8.primitive_data_types.html#i8-i16-i32-i64-i128", "anchor_text": "signed integer types"}, {"url": "https://tech.io/snippet/uwnXAR8", "anchor_text": "Try this Primitive data type example online"}, {"url": "https://www.codingame.com/playgrounds/365/getting-started-with-rust/primitive-data-types", "anchor_text": "link"}, {"url": "https://doc.rust-lang.org/book/ch13-01-closures.html?highlight=annotate,a,type#closure-type-inference-and-annotation", "anchor_text": "closure"}, {"url": "https://doc.rust-lang.org/book/ch03-03-how-functions-work.html", "anchor_text": "Functions"}, {"url": "https://doc.rust-lang.org/1.0.0/style/style/naming/README.html", "anchor_text": "conventional style"}, {"url": "https://tech.io/snippet/quWpWFg", "anchor_text": "Try this Rust lang code online."}, {"url": "https://doc.rust-lang.org/book/ch03-03-how-functions-work.html?highlight=expression,and,statement#function-bodies-contain-statements-and-expressions", "anchor_text": "Function Bodies Contain Statements and Expressions"}, {"url": "https://doc.rust-lang.org/reference/keywords.html", "anchor_text": "keyword"}, {"url": "https://tech.io/snippet/ZWuAnj1", "anchor_text": "Rust variables example"}, {"url": "https://learning-rust.github.io/docs/d7.std_primitives_and_preludes.html#Standard-Macros", "anchor_text": "the standard macros"}, {"url": "https://tech.io/snippet/VKciz0J", "anchor_text": "println! macro"}, {"url": "https://tech.io/snippet/XZMM4jx", "anchor_text": "Step 2 in Rust using if statement"}, {"url": "https://tech.io/snippet/EI8viV3", "anchor_text": "if-else if-else example"}, {"url": "https://tech.io/snippet/ctjMBxw", "anchor_text": "Step 3 in Rust"}, {"url": "https://tech.io/snippet/yE8eJCK", "anchor_text": "Range .. in Rust"}, {"url": "https://tech.io/snippet/6cKeArR", "anchor_text": "Range ..= in Rust"}, {"url": "https://doc.rust-lang.org/book/ch03-02-data-types.html#the-array-type", "anchor_text": "Arrays"}, {"url": "https://tech.io/snippet/2iUgNLo", "anchor_text": "Rust array"}, {"url": "https://doc.rust-lang.org/std/fmt/index.html", "anchor_text": "{:?}"}, {"url": "https://doc.rust-lang.org/book/ch03-02-data-types.html#the-tuple-type", "anchor_text": "Tuples"}, {"url": "https://tech.io/snippet/3bfkQfa", "anchor_text": "Rust tuple"}, {"url": "https://doc.rust-lang.org/std/vec/struct.Vec.html", "anchor_text": "vectors"}, {"url": "https://doc.rust-lang.org/std/vec/index.html", "anchor_text": "doc.rust-lang.org"}, {"url": "https://doc.rust-lang.org/std/vec/struct.Vec.html", "anchor_text": "vector"}, {"url": "https://doc.rust-lang.org/std/primitive.usize.html", "anchor_text": "usize"}, {"url": "https://doc.rust-lang.org/std/keyword.as.html", "anchor_text": "doc.rust-lang"}, {"url": "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.len", "anchor_text": "len"}, {"url": "https://tech.io/snippet/qyCu9nb", "anchor_text": "the final step in Rust"}, {"url": "https://tech.io/snippet/laOPbRf", "anchor_text": "Rust struct"}, {"url": "https://doc.rust-lang.org/std/primitive.str.html", "anchor_text": "&str"}, {"url": "https://doc.rust-lang.org/book/ch08-02-strings.html#what-is-a-string", "anchor_text": "String"}, {"url": "https://medium.com/series/learning-rust-all-about-strings-c7666812d893", "anchor_text": "link"}, {"url": "https://doc.rust-lang.org/std/string/trait.ToString.html", "anchor_text": "to_string"}, {"url": "https://tech.io/snippet/qATByFz", "anchor_text": "Rust impl"}, {"url": "https://doc.rust-lang.org/book/ch05-03-method-syntax.html#method-syntax", "anchor_text": "method"}, {"url": "https://tech.io/snippet/tmTVm01", "anchor_text": "Using struct and impl"}, {"url": "https://blog.rust-lang.org/2015/05/11/traits.html", "anchor_text": "Traits"}, {"url": "https://tech.io/snippet/ufPqgv2", "anchor_text": "Using trait to our code"}, {"url": "https://doc.rust-lang.org/book/ch13-04-performance.html?highlight=zero-cost,abstractions#comparing-performance-loops-vs-iterators", "anchor_text": "Rust Programming Language"}, {"url": "https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html", "anchor_text": "ownership"}, {"url": "https://doc.rust-lang.org/book/title-page.html", "anchor_text": "Rust documentation"}, {"url": "https://doc.rust-lang.org/book/title-page.html", "anchor_text": "the official book"}, {"url": "https://blog.codewithshin.com/membership", "anchor_text": "becoming a member"}, {"url": "https://blog.codewithshin.com/subscribe", "anchor_text": "https://blog.codewithshin.com/subscribe"}, {"url": "https://towardsdatascience.com/unsinged-signed-integers-and-casting-in-rust-9a847bfc398f", "anchor_text": "Unsigned, Signed Integers and Casting in RustUnderstanding Sign-and-Magnitude, Ones\u2019 Complement, and Two\u2019s Complementtowardsdatascience.com"}, {"url": "https://medium.com/series/101-rust-tips-8f361510683c", "anchor_text": "Learning Rust: Common ConceptsSee More about All About Rust String.medium.com"}, {"url": "https://medium.com/series/learning-rust-all-about-strings-c7666812d893", "anchor_text": "Learning Rust: All about StringsString and &strmedium.com"}, {"url": "https://medium.com/tag/rust?source=post_page-----259e735591c6---------------rust-----------------", "anchor_text": "Rust"}, {"url": "https://medium.com/tag/rustlang?source=post_page-----259e735591c6---------------rustlang-----------------", "anchor_text": "Rustlang"}, {"url": "https://medium.com/tag/programming?source=post_page-----259e735591c6---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/software-development?source=post_page-----259e735591c6---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/python?source=post_page-----259e735591c6---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F259e735591c6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-rust-by-converting-python-to-rust-259e735591c6&user=Shinichi+Okada&userId=a262a804b78f&source=-----259e735591c6---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F259e735591c6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-rust-by-converting-python-to-rust-259e735591c6&user=Shinichi+Okada&userId=a262a804b78f&source=-----259e735591c6---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F259e735591c6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-rust-by-converting-python-to-rust-259e735591c6&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----259e735591c6--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F259e735591c6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-rust-by-converting-python-to-rust-259e735591c6&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----259e735591c6---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----259e735591c6--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----259e735591c6--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----259e735591c6--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----259e735591c6--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----259e735591c6--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----259e735591c6--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----259e735591c6--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----259e735591c6--------------------------------", "anchor_text": ""}, {"url": "https://blog.codewithshin.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://blog.codewithshin.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Shinichi Okada"}, {"url": "https://blog.codewithshin.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "3.3K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa262a804b78f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-rust-by-converting-python-to-rust-259e735591c6&user=Shinichi+Okada&userId=a262a804b78f&source=post_page-a262a804b78f--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fbea6b9a08c54&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-rust-by-converting-python-to-rust-259e735591c6&newsletterV3=a262a804b78f&newsletterV3Id=bea6b9a08c54&user=Shinichi+Okada&userId=a262a804b78f&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}