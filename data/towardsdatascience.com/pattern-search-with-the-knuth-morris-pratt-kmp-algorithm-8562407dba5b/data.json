{"url": "https://towardsdatascience.com/pattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b", "time": 1683018012.57661, "path": "towardsdatascience.com/pattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b/", "webpage": {"metadata": {"title": "Pattern Search with the Knuth-Morris-Pratt (KMP) algorithm | by Max Lefarov | Towards Data Science", "h1": "Pattern Search with the Knuth-Morris-Pratt (KMP) algorithm", "description": "So here you are, sitting and being interviewed for the position in your dream company. The interviewer, your fellow developer, whose seniority and proficiency are beyond doubt and cannot be\u2026"}, "outgoing_paragraph_urls": [{"url": "https://medium.com/@giri_sh/string-matching-kmp-algorithm-27c182efa387", "anchor_text": "this article on Medium", "paragraph_index": 1}], "all_paragraphs": ["So here you are, sitting and being interviewed for the position in your dream company. The interviewer, your fellow developer, whose seniority and proficiency are beyond doubt and cannot be challenged by anyone, presents you with a problem that boils down to pattern matching. Being happy and excited you announce that you would like to use a naive approach with O(nk) complexity. However, the interviewer is frowning, he\u2019s disappointed. You can see in his eyes, filled with wisdom and experience, that he\u2019s quickly losing interest in this conversation. His attention is fading and his thoughts are gravitating towards a free lunch, which he\u2019ll soon get in one of those company\u2019s legendary food courts. The rumors is that the retired Michelin chefs themselves are forging the food of gods in those shrines of catering. So what should you do, how to regain the interviewer\u2019s favor, how to make sure that you\u2019ll also be able to taste that fast-food miracle in a few months? The only way is to give your interviewer what he wants, the O(n) solution. \u201cBut which O(n) solution?!\u201d \u2014 you ask me. No worries. I got your back. Please welcome our today\u2019s guest the KMP (Knuth-Morris-Pratt) Pattern Search algorithm.", "A good overview of KMP and the reasoning behind it is provided in this article on Medium. TL;DR when doing naive pattern matching every time you\u2019ve encountered a mismatch between the pattern and the target string you move only one step forward in the target and start to re-match the entire pattern from the very beginning. KMP, on contrary, can help to skip several unnecessary comparisons, which will, of course, positively impact your complexity. How positively, you ask me? O(n) positively is KMP\u2019s answer. But how does this tricky guy do that? Well, he\u2019s using the help from his little friend an array of Longest Proper Prefix which is Suffix (LPS), which is constructed for the pattern prior to the main phase of the algorithm. First things first, let\u2019s understand what is LPS (the essential building block of KMP) and how it can be constructed, then write an algorithm to do so. Once we have it in our arsenal, KMP won\u2019t seem so scary anymore, believe me.", "As the name suggests, the LSP array contains the information about the \u201cLongest Proper Prefix which is Suffix\u201d. No worries, I was also quite confused when I\u2019ve seen this formulation for the first time. What does make a prefix \u201cProper\u201d after all? Well, believe me, or not, but it turned out that it\u2019s just any prefix of a word that is not equal to the word itself. So let\u2019s take an example. For the word ACA we have the following proper prefixes: , A, AC, and the suffixes: , A, CA, ACA. Thus, the longest proper prefix that is equal to the suffix is A.", "So the LPS array of some string at any position i contains the length of such a prefix for the sub-string from 0 till i (pattern[:(i+1)] for my Python friends out there). In the .gif below, you can see how the LPS array is constructed manually step by step for the pattern string ACABACACD. No rush here, take your time and make sure that everything is clear for you so far.", "Well, now, when we understand what is an LPS array and have seen how to construct it manually, let\u2019s write an algorithm to do so for any given pattern. I have bad news for you though. This algorithm requires us to operate two pointers (indices). Yes, I know, I know\u2026 These kinds of algorithms are also among my least favorite, partially because it\u2019s quite challenging to write them in a clean \u201cPythonic\u201d way, and partially because my short-term memory gives up quite quickly on a task of tracking more than one pointer at once. So, in order to understand the algorithm for LPS array construction, I would propose for you to think about it in terms of \u201cPhases\u201d and a state-machine. That is my favorite way of approaching a new algorithm, and I hope it might be useful for you as well. Below you\u2019ll see the picture summarizing the algorithm, followed by a detailed description in the next paragraph. If you are the kind of person who would rather read through the code than any lengthy description, please jump straight to the implementation section.", "As you might infer from the picture above, we\u2019re working on a single pattern string and using two pointers which for now carry the abstract names \u201ctop\u201d and \u201cbottom\u201d. The bottom pointer bp iterates over our pattern string. The top pointer tp is used to determine the LPS of the current sub-string. Additionally, we have the LPS array where the lengths of LPSs are stored. The size of LPS is equal to the pattern string\u2019s size and is initialized with 0s.", "The algorithm begins with \u201cPhase 1\u201d, where we move the bottom pointer and trying to find a symbol in our pattern string that is equal to the first symbol (still tracked by the tp). This phase corresponds to the search of the sub-string with the LPS of length 1 (i.e., a single-letter prefix is equal to a single-letter suffix). Once found, we can write 1 into our LPS array at the position of the bp. Now we can shift to \u201cPhase 2\u201d. Here we move both pointers while they are pointing to the equal symbols and write tp+1, i.e. the length of LPS, to the LPS at the position of the bp. In this phase we\u2019re continuously discovering the sub-string with the longer LPS with every subsequent step. But, it might very well be that we\u2019ll eventually run out of luck and come to the situation where the pointers are pointing towards two different symbols. That indicates that we\u2019ve found the sub-string whose LPS is shorter than the previous one.", "\u201cWe are in the endgame now.\u201d", "In \u201cPhase 3\u201d we roll back the top pointer to find the new LPS (which is smaller than the LPS at the previous bottom index). \u201cBut where should I place the top pointer?\u201d \u2014 you ask me. Let\u2019s figure that out. First of all, let\u2019s consider an example of such a situation to have something to look at. We\u2019ll crop one frame from our .gif example from the previous section. Please see the picture below.", "Well, we\u2019ve discovered that the symbol at the top pointer (3 in our example) doesn\u2019t match a symbol at the bottom pointer 7. Let\u2019s consider the pattern\u2019s sub-string till the bottom pointer exclusively (pattern[:bp] for those speaking Parseltongue). It\u2019s guaranteed that its prefix from 0 to tp matches the suffix staring at (bp-tp), i.e.", "(shaded with light green in our example). This always holds due to the definition of \u201cPhase 1\u201d and \u201cPhase 2\u201d. Thus we can state that patterns[:tp]\u2019s LPS, is equal to the ending part of the pattern[:bp]\u2019s suffix (shaded in blue). That allows us to move the top pointer to the next index after the patterns[:tp]\u2019s LPS, which is already stored in LPS[tp-1] (blue 1 in the example above). The described procedure is repeated until the symbol at the new top pointer position matches the symbol at the bottom pointer (transition to the second phase), or the top pointer has become 0 (back to \u201cPhase 1\u201d). The algorithm terminates when the iteration over the pattern string with the bottom pointer is completed.", "Below you can find the \u201cPythonic\u201d implementation of the algorithm for the LPS array construction. \u201cPhases\u201d are implemented in a reverse order here for the readability concerns. If you didn\u2019t skip the previous section, please replace prefi and i with the \u201ctop\u201d and \u201cbottom\u201d pointers in your mind.", "Now, finally, we\u2019re at the \u201cmain\u201d part of KMP. But actually, there\u2019s not too much to do for us in this main part. Once we have the LPS array constructed for our pattern string, KMP becomes quite similar to the naive pattern search. The only difference is that on a mismatch, instead of moving one symbol forward in a target text and starting from the very beginning of a pattern string, KMP uses LPS to continue from exactly the same place where the mismatch occurred. First, let\u2019s look at the KMP\u2019s main part \u201cPhases\u201d and the state-machine, similarly to what we did for the LPS construction. Then, we\u2019ll describe in detail how exactly KMP manages to continue from the mismatch position.", "As demonstrated in the picture above, we have a target string (black) and a pattern string (blue). We iterate over the target with the target pointer and over the pattern string with the pattern pointer. Similar to the LPS construction, the main part of KMP consists of three phases. \u201cPhase 1\u201d and \u201cPhase 2\u201d are identical to the naive pattern search. In the first phase, we\u2019re moving in a target until we find a symbol that matches the first symbol in a pattern string. That is where the transition into the second phase happens. In \u201cPhase 2\u201d both, the target and the pattern pointers, are moved while the symbols, that they point to, match. If the end of the pattern string is reached, the solution is found. If the mismatch is encountered the algorithm transitions to the third phase. That is the only phase different from the naive approach. In the naive pattern search when a mismatch is found, you\u2019re moving the target pointer one symbol forward from the place where you\u2019ve started the comparison, and the pattern pointer (index) is reset to 0. On contrary, when running KMP, the target pointer remains at the same place, but the pattern pointer is rolled back using the information from the LPS array. In order to understand how it\u2019s done, let\u2019s consider an example in the picture below.", "So we did encounter the mismatch at some point in the comparison between the pattern and the target text. E is not equal to C, what a bummer. However, we can be sure that the pattern sub-string till the pattern pointer matches the target sub-string till the target pointer (red dashed line). Otherwise, we wouldn\u2019t reach this point according to our definition of the second phase. Additionally, our LPS array for the current pattern sub-string tells us that the prefix of length 3 is equal to the suffix (shaded in green). With this information in hand, we can safely move the pattern pointer back to the fourth symbol (the first symbol after LPS) and leave the target pointer at the same place, as demonstrated below.", "It\u2019s guaranteed that the part of the pattern before the new pattern pointer matched the target string due to the definition of the LPS. It also holds true that we didn\u2019t miss any possible matches between the current target pointer and the index at which we\u2019ve started to compare last time. This shift or roll-back operation is repeated until a symbol at the new pattern pointer position matches one at the target pointer (transition to the second phase), or the pattern pointer is 0 (transition to the first phase).", "We\u2019re at the home stretch. Below you can find the code implementing the main part of KMP. As for the LPS algorithm, the \u201cPhases\u201d are written in reverse order here for better readability. patterni is our patter pointer from the above description and the target pointer holds a rather boring name i. One minor detail implemented below that was not discussed above is the search for all occurrences. I\u2019m leaving it as an exercise for the curious reader (I\u2019ll be happy to answer any question in the comments).", "So, you declare your KMP based solution to your interviewer and hope that you didn\u2019t miss some minor detail. But apparently, it\u2019s not important anymore. With each word spoken, his excitement is rising, he cannot believe his eyes. Finally, he managed to find the candidate who will be a good fit for the team\u2019s most important mission of re-implementing pattern search for every standard library in every language. Maybe you\u2019ll get that free lunch after all..", "Good luck with the behavioral questions, and let me know if I can help you with anything else \ud83d\ude03.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F8562407dba5b&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----8562407dba5b--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8562407dba5b--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://mlefarov.medium.com/?source=post_page-----8562407dba5b--------------------------------", "anchor_text": ""}, {"url": "https://mlefarov.medium.com/?source=post_page-----8562407dba5b--------------------------------", "anchor_text": "Max Lefarov"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6e9c71f9fa00&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b&user=Max+Lefarov&userId=6e9c71f9fa00&source=post_page-6e9c71f9fa00----8562407dba5b---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8562407dba5b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8562407dba5b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@ahmadirini", "anchor_text": "Ahmad Dirini"}, {"url": "https://unsplash.com/", "anchor_text": "Unsplash"}, {"url": "https://medium.com/@giri_sh/string-matching-kmp-algorithm-27c182efa387", "anchor_text": "this article on Medium"}, {"url": "https://medium.com/tag/algorithms?source=post_page-----8562407dba5b---------------algorithms-----------------", "anchor_text": "Algorithms"}, {"url": "https://medium.com/tag/pattern-matching?source=post_page-----8562407dba5b---------------pattern_matching-----------------", "anchor_text": "Pattern Matching"}, {"url": "https://medium.com/tag/coding?source=post_page-----8562407dba5b---------------coding-----------------", "anchor_text": "Coding"}, {"url": "https://medium.com/tag/coding-interviews?source=post_page-----8562407dba5b---------------coding_interviews-----------------", "anchor_text": "Coding Interviews"}, {"url": "https://medium.com/tag/software-development?source=post_page-----8562407dba5b---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8562407dba5b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b&user=Max+Lefarov&userId=6e9c71f9fa00&source=-----8562407dba5b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8562407dba5b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b&user=Max+Lefarov&userId=6e9c71f9fa00&source=-----8562407dba5b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8562407dba5b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8562407dba5b--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F8562407dba5b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----8562407dba5b---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----8562407dba5b--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----8562407dba5b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----8562407dba5b--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----8562407dba5b--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----8562407dba5b--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----8562407dba5b--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----8562407dba5b--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----8562407dba5b--------------------------------", "anchor_text": ""}, {"url": "https://mlefarov.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://mlefarov.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Max Lefarov"}, {"url": "https://mlefarov.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "73 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6e9c71f9fa00&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b&user=Max+Lefarov&userId=6e9c71f9fa00&source=post_page-6e9c71f9fa00--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F20ce47e095a9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b&newsletterV3=6e9c71f9fa00&newsletterV3Id=20ce47e095a9&user=Max+Lefarov&userId=6e9c71f9fa00&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}