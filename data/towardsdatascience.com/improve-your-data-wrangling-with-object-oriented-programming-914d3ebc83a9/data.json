{"url": "https://towardsdatascience.com/improve-your-data-wrangling-with-object-oriented-programming-914d3ebc83a9", "time": 1683004102.64447, "path": "towardsdatascience.com/improve-your-data-wrangling-with-object-oriented-programming-914d3ebc83a9/", "webpage": {"metadata": {"title": "Improve Your Data Wrangling With Object Oriented Programming | by Callum Ballard | Towards Data Science", "h1": "Improve Your Data Wrangling With Object Oriented Programming", "description": "This is the result of a simple, inescapable truth \u2014 data in the real world doesn\u2019t normally come nicely wrapped up in a Pandas dataframe with a pretty little bow on top. And since better quality data\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/worthless-in-seattle-9300b3594383", "anchor_text": "blog", "paragraph_index": 3}, {"url": "https://towardsdatascience.com/tagged/on-target", "anchor_text": "On Target", "paragraph_index": 3}, {"url": "https://www.premierleague.com/match/46858", "anchor_text": "match pages", "paragraph_index": 3}, {"url": "https://wiki.c2.com/?PascalCase", "anchor_text": "Pascal Case", "paragraph_index": 24}, {"url": "https://towardsdatascience.com/tagged/on-target", "anchor_text": "On Target", "paragraph_index": 59}, {"url": "https://www.linkedin.com/in/callum-ballard/", "anchor_text": "LinkedIn", "paragraph_index": 59}], "all_paragraphs": ["One of the dirty secrets of data science goes as follows:", "\u201cFar from spending hours discovering glorious new algorithms and developing cutting edge neural networks, you will in fact spend most of your time cleaning, munging, and manipulating data\u201d", "This is the result of a simple, inescapable truth \u2014 data in the real world doesn\u2019t normally come nicely wrapped up in a Pandas dataframe with a pretty little bow on top. And since better quality data begets better quality models, it\u2019s a part of the process that we can\u2019t just ignore.", "Some time ago, I wrote a blog about techniques for wrangling data that, despite containing mistakes, was at least structured in a dataframe. But what if you don\u2019t even have that? Recall my last blog from On Target \u2014 we were using Splinter to scrape data from match pages on the English Premier League website.", "This has given us all the data that we notionally need for the analysis/model building that we want to do. But it\u2019s not in the friendliest format \u2014 the scraping code that I wrote put everything into nested dictionaries, whose schemas look like a bit like this:", "It\u2019s worth noting that collecting this data as dictionaries in the first instance was not irrational \u2014 the number of \u2018Events\u2019 in each match is different from game to game, so we can\u2019t store them nicely in a relational table. Moreover, the dictionary method means that the match data stays associated with the MatchID, which is the unique identifier for each game and will be important later on in the modelling process.", "At any rate, we\u2019re going to need to get at this data somehow, and put it into a model-friendly format. However, the code for manipulating nested dictionaries gets messy pretty quickly, and perhaps more dangerously, dictionaries are mutable data structures \u2014 i.e. their contents can be edited. Thus, keeping the data in its present dictionary form could be risky.", "Happily, there is another way \u2014 Object Oriented Programming (OOP).", "Before diving into our specific example, let\u2019s take a step back and think about \u2018objects\u2019 at a more conceptual level \u2014 particularly in the context of Python. You may be familiar with Python being an \u2018Object Oriented Language\u2019, but what does this actually mean?", "An \u2018object\u2019, very roughly speaking, is a thing in Python that we can store to our computer\u2019s memory. So this could be a string, or a list, or a dictionary. It could also be something more abstract, such as a pandas dataframe, a matplotlib figure, or a scikit learn model.", "One key characteristic of most objects is that we can perform \u2018methods\u2019 upon them. Methods are in-built functions that are specific to a particular type of object. For example, we can \u2018call\u2019 the .lower( ) method on a string to make all the characters lower case:", "However, if we tried calling the .lower( ) method on a different type of object (for example, an integer) then we\u2019d get an error \u2014 this method doesn\u2019t make sense in the context of an object that isn\u2019t a string.", "This brings us onto the concept of \u2018Classes\u2019. In Python, a Class is a combination of two things:", "\u2018String\u2019 is an example of a Class in Python. We can create individual objects of type \u2018String\u2019 (e.g. \u201cHello World\u201d, \u201cMyString\u201d, or \u201cI Love Towards Data Science\u201d), and we have a selection of methods that we can call on them. Importantly, these methods are \u2018built into\u2019 the object.", "It\u2019s also worth noting that objects often have attributes (which we can look up). For example, a pandas dataframe has a \u2018shape\u2019 attribute, which tells us how many rows and columns it has. Similarly, the names of its columns and its index are also attributes. Of course, the attributes of two objects of the same class can be different (a different dataframe may have more or fewer columns and rows) but it would still be an object that we could call the same methods on.", "If analogies help, you could think about my pet, Sushi, as an object. In particular, she is an \u2018object\u2019 of class \u2018Cat\u2019. She therefore shares some intrinsic characteristics with other objects of the same class (i.e. other cats), however she has attributes, such as \u2018fur length\u2019 or \u2018eye color\u2019, that could be different to other cats.", "Importantly, she also comes with some \u2018built in\u2019 methods that we can perform on her, e.g. .stroke( ) .feed( ) or .playfight( ), which we\u2019d also be able to perform on other cats. Of course, if we tried to call these methods on objects of other classes, such as Lamps, Bicycles, or Biscuits, then we\u2019d get an error.", "Or at least referred to a psychological clinician.", "This is all well and good, though you may be wondering what on earth this has to do with data wrangling.", "Well, here\u2019s where things get interesting \u2014 Python lets you create your own Classes. This means that if you have data representations of things that are intrinsically similar, but with slight differences (such as our nested dictionaries containing all the match data), then it may be best to turn these into bespoke Python objects.", "Suppose I want to create a new class \u2018Match\u2019. What might objects of this class look like? As mentioned above, each match object would have a set of attributes:", "We could also define methods (remember, these are just \u2018functions\u2019, specific to the class). For example, we could have a method that outputted a dataframe showing the number of minutes each player played.", "First things first, we have to define all of this in a way that Python will understand. Let\u2019s build this definition up bit by bit.", "A class definition will always start in more or less the same way:", "The first line tells Python that you are defining a class, in the same way that \u2018def\u2019 would tell Python that you\u2019re defining a standalone function. The desired name of the class is given (standard formatting guidelines suggests you do this using Pascal Case), and then the phrase \u2018object\u2019 is put in parentheses.", "The first thing to add to this class is something known as the \u2018constructor\u2019. Remember \u2014 the whole point of this is to turn a nested dictionary (of type \u2018dictionary\u2019) into a new object (of type \u2018Match\u2019). The constructor is the function built into the Match class that will create that new object.", "The constructor\u2019s syntax is the same, regardless of the class we\u2019re defining. It is defined using the phrase __init__ (there are two underscores either side) and has two variables:", "The class\u2019 constructor assigns attributes to a newly created object. Let\u2019s start building these out for our \u2018Match\u2019 objects. Two basic attributes of each match are the unique match ID, and the week of the season that the match took place in. Both of these datapoints can be found in the first layer of our nested dictionaries:", "So the above code simply tells our constructor that our new object\u2019s match_id attribute should be equal to the value found under the input dictionary\u2019s \u2018MatchID\u2019 key. The constructor can be quite flexible with attribute assignment:", "Notice how we created the \u2018teams\u2019 attribute by combining two attributes that we\u2019d defined in the lines above? We can get more exotic with these attribution defintions \u2014 having defined an \u2018events\u2019 attribute (which extracts the list of commentary strings from the nested dictionary) we can then define a \u2018goals\u2019 attribute by filtering that list for commentary strings containing the phrase \u2018Goal!\u2019", "We can continue adding all the different attributes we need in the same way.", "Once we\u2019re done, we can start creating (or \u2018instantiating\u2019, in the technical parlance) our actual Match objects. This is very easy\u2014 we simply take the match dictionary and do the following:", "Having done this, we can see that our object has all the attributes and methods built in as we would expect.", "So now, instead of having to pass a bunch of annoying dictionary lookups (and worse) to get the data we need out of each match dictionary, we just call a simple method/attribute lookup on the match object.", "At this point, it\u2019s worth thinking about how we store these objects. Bearing in mind that a Premier League season has 760 games, storing each Match object with its own variable (as I did with the example above) is deeply impractical.", "Exactly what object management strategy to pursue is up to the individual. Personally, it was enough to store the Match objects in a single list \u2014 I was able to create this using a simple list comprehension, since the match dictionaries were themselves already in a list.", "You could also store them in a dictionary, using the match ID as the key (using a dictionary comprehension).", "You can also store objects as elements in a pandas dataframe if you\u2019re feeling especially fancy.", "Having created our Match class, there\u2019s another class we could think about creating \u2014 Events. Remember, the strings in our match events are scraped from the match commentary on the Premier League website.", "These event strings are similar, insomuch as they describe something that happened at a particular point during the match, and describe which players/teams did those things. But again, as strings, they\u2019re not especially helpful for data analysis.", "Wouldn\u2019t it be nice if there was some way to take an event string, and automatically see which player it concerned, or what time the event took place, or what the outcome of the event was? Well, OOP can do just that! In this case, we can use another trick \u2014 subclasses.", "Subclasses are a way of acknowledging that different classes can share some characteristics, but not others. As an example, let\u2019s think about the different events in a football match \u2014 we could have shots, fouls, corner kicks, substitutions, and so forth. These events all share some characteristics, for example, they will all have a timestamp telling us when in the match they took place. So we could have an \u2018Event\u2019 class that has \u2018time\u2019 as an attribute.", "However, there could be some characteristics that are specific to shots (e.g. where on the pitch the player shot from, or if the shot was a kick or a header). Evidently these attributes don\u2019t make sense for \u2018Substitution\u2019 events. We may, therefore, want a \u2018Shot\u2019 class to capture this additional information.", "Similarly, there are different types of shot \u2014 goals, saves, misses, and so forth, which may have specific attributes. Thus, we might want \u2018Goal\u2019, \u2018Save\u2019, and \u2018Miss\u2019 classes. You notice that we end up with a sort of tree of inter-connected classes:", "Note \u2014 within this tree, although each additional \u2018branch\u2019 adds new attributes, it KEEPS the attributes of the layer above. So \u2018Shots\u2019 will keep the attributes that we define in the \u2018Events\u2019 class, and \u2018Goals\u2019 will keep the extra attributes that we define in the \u2018Shots\u2019 class.", "This makes sense; every Goal is a type of Shot, and every Shot is a type of Event, so it's logical that Goals would have at least the same attributes as Events. This logic is the essence of \u2018Class Inheritance\u2019, and is one of the key motivators for us to use Subclasses. Whatsmore, we can implement this quite easily. Consider the following event string that describes a goal:", "\u201c64. Goal!Goal! Liverpool 4, Norwich City 1. Teemu Pukki (Norwich City) right footed shot from the centre of the box to the bottom left corner. Assisted by Emiliano Buendia with a through ball.\u201d", "We can declare our Event class in the same way as before, creating attributes to return the original event text (i.e. the above string), and the time during the match that it took place:", "We can then create a subclass, \u2018Shot\u2019, which is a particular type of event. Note, this time, instead of using the phrase \u2018object\u2019, we pass the name of the \u2018superclass\u2019 that we want our new subclass to inherit from (i.e. \u2018Event\u2019).", "The super().__init__ phrase simply tells Python to look at all the attributes of the superclass whenever we instantiate a new \u2018Shot\u2019 object, as well as the ones we define especially in the new subclass (which we would define within the same __init__ constructor).", "Of course, if we want to create a \u2018Goal\u2019 subclass, we can do the same again, substituting \u2018Event\u2019 for \u2018Shot\u2019 (since \u2018Goal\u2019 will be a subclass of \u2018Shot\u2019).", "n.b. I\u2019ve not included the full Event class definition here\u2014 the cell runs to nearly 200 lines of code with more regex than is generally considered healthy in a single blog\u2026", "Recall from an earlier gif that the Match class has an attribute \u2018goals\u2019. This returns a list of strings, with each string being the commentary for an individual goal in that match.", "Suppose we use one of the goals from the Match object to instantiate a Goal object, using our freshly coded \u2018Goal\u2019 class \u2014 remember we do this as follows:", "Then we see that we can start pulling information about that goal directly from the Goal object:", "Again, this is a considerably neater way of processing the data than trying to attack it with ad hoc functions, especially given the number of goals that we will have to analyse in this project!", "This is just the tip of the iceberg of the sort of data management made possible with OOP. Just to give you a flavour, here\u2019s a method I made for the Match class. Simply call .shots_table() on a Match object, and it produces a detailed pandas dataframe of all the shots taken during that match.", "Given that I already have a list of match objects, you can see how, having put in the initial legwork with OOP, I could create a dataframe documenting every single shot taken in the Premier League this season with just a couple of lines of code:", "We\u2019ve certainly come a long way from that list of nested dictionaries!", "This is the latest post in my blog column \u2018On Target\u2019, in which I\u2019ll be attempting to build out a model for \u2018Moneyballing\u2019 Fantasy Premier League. I\u2019d love to hear any comments about the blog, or any of the concepts that the piece touches on. Feel free to leave a message below, or reach out to me through LinkedIn.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Analysis Lead at Cleo AI, McKinsey & LSE Alumni, previously published in The Economist. Typically found listening to Japanese Math Rock..."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F914d3ebc83a9&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimprove-your-data-wrangling-with-object-oriented-programming-914d3ebc83a9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimprove-your-data-wrangling-with-object-oriented-programming-914d3ebc83a9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimprove-your-data-wrangling-with-object-oriented-programming-914d3ebc83a9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimprove-your-data-wrangling-with-object-oriented-programming-914d3ebc83a9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----914d3ebc83a9--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----914d3ebc83a9--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@callumballard?source=post_page-----914d3ebc83a9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@callumballard?source=post_page-----914d3ebc83a9--------------------------------", "anchor_text": "Callum Ballard"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3bcc53c95269&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimprove-your-data-wrangling-with-object-oriented-programming-914d3ebc83a9&user=Callum+Ballard&userId=3bcc53c95269&source=post_page-3bcc53c95269----914d3ebc83a9---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F914d3ebc83a9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimprove-your-data-wrangling-with-object-oriented-programming-914d3ebc83a9&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F914d3ebc83a9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimprove-your-data-wrangling-with-object-oriented-programming-914d3ebc83a9&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/tagged/on-target", "anchor_text": "ON TARGET"}, {"url": "https://towardsdatascience.com/worthless-in-seattle-9300b3594383", "anchor_text": "blog"}, {"url": "https://towardsdatascience.com/tagged/on-target", "anchor_text": "On Target"}, {"url": "https://www.premierleague.com/match/46858", "anchor_text": "match pages"}, {"url": "https://towardsdatascience.com/elevate-your-webscraping-with-splinter-a926eee7f7d9", "anchor_text": "Elevate Your Webscraping With SplinterGet even better data from your scraping by automating interactions with webpagestowardsdatascience.com"}, {"url": "https://wiki.c2.com/?PascalCase", "anchor_text": "Pascal Case"}, {"url": "https://towardsdatascience.com/tagged/on-target", "anchor_text": "On Target"}, {"url": "https://www.linkedin.com/in/callum-ballard/", "anchor_text": "LinkedIn"}, {"url": "https://medium.com/tag/python?source=post_page-----914d3ebc83a9---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----914d3ebc83a9---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/tag/on-target?source=post_page-----914d3ebc83a9---------------on_target-----------------", "anchor_text": "On Target"}, {"url": "https://medium.com/tag/data-science?source=post_page-----914d3ebc83a9---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/programming?source=post_page-----914d3ebc83a9---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F914d3ebc83a9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimprove-your-data-wrangling-with-object-oriented-programming-914d3ebc83a9&user=Callum+Ballard&userId=3bcc53c95269&source=-----914d3ebc83a9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F914d3ebc83a9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimprove-your-data-wrangling-with-object-oriented-programming-914d3ebc83a9&user=Callum+Ballard&userId=3bcc53c95269&source=-----914d3ebc83a9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F914d3ebc83a9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimprove-your-data-wrangling-with-object-oriented-programming-914d3ebc83a9&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----914d3ebc83a9--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F914d3ebc83a9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimprove-your-data-wrangling-with-object-oriented-programming-914d3ebc83a9&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----914d3ebc83a9---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----914d3ebc83a9--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----914d3ebc83a9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----914d3ebc83a9--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----914d3ebc83a9--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----914d3ebc83a9--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----914d3ebc83a9--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----914d3ebc83a9--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----914d3ebc83a9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@callumballard?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@callumballard?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Callum Ballard"}, {"url": "https://medium.com/@callumballard/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "1K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3bcc53c95269&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimprove-your-data-wrangling-with-object-oriented-programming-914d3ebc83a9&user=Callum+Ballard&userId=3bcc53c95269&source=post_page-3bcc53c95269--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F107151aaecd0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimprove-your-data-wrangling-with-object-oriented-programming-914d3ebc83a9&newsletterV3=3bcc53c95269&newsletterV3Id=107151aaecd0&user=Callum+Ballard&userId=3bcc53c95269&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}