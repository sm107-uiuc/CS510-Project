{"url": "https://towardsdatascience.com/generative-adversarial-networks-in-python-73d3972823d3", "time": 1683009031.942227, "path": "towardsdatascience.com/generative-adversarial-networks-in-python-73d3972823d3/", "webpage": {"metadata": {"title": "Generative Adversarial Networks in Python | by Sadrach Pierre, Ph.D. | Towards Data Science", "h1": "Generative Adversarial Networks in Python", "description": "Generative adversarial networks (GANs) are a set of deep neural network models used to produce synthetic data. The method was developed by Ian Goodfellow in 2014 and is outlined in the paper\u2026"}, "outgoing_paragraph_urls": [{"url": "https://arxiv.org/pdf/1406.2661.pdf", "anchor_text": "Generative Adversarial Networks", "paragraph_index": 0}, {"url": "https://towardsdatascience.com/gangogh-creating-art-with-gans-8d087d8f74a1", "anchor_text": "GANGough: Creating Art with GANs", "paragraph_index": 1}, {"url": "https://www.tensorflow.org/tutorials/generative/dcgan", "anchor_text": "here", "paragraph_index": 1}, {"url": "https://towardsdatascience.com/a-comprehensive-guide-to-convolutional-neural-networks-the-eli5-way-3bd2b1164a53", "anchor_text": "here", "paragraph_index": 8}, {"url": "https://www.kaggle.com/puneet6060/intel-image-classification", "anchor_text": "Intel Image Classification", "paragraph_index": 33}, {"url": "https://www.cs.toronto.edu/~kriz/cifar.html", "anchor_text": "CIFAR", "paragraph_index": 33}, {"url": "https://www.kaggle.com/tongpython/cat-and-dog#dog.4010.jpg", "anchor_text": "Cats & Dogs", "paragraph_index": 33}, {"url": "https://arxiv.org/pdf/1907.06571.pdf", "anchor_text": "Adversarial Video Generation of Complex Datasets", "paragraph_index": 34}, {"url": "https://www.crcv.ucf.edu/data/UCF101.php", "anchor_text": "UCF-101 Action Recognition Dataset", "paragraph_index": 34}, {"url": "https://arxiv.org/pdf/1802.04208.pdf", "anchor_text": "Adversarial Audio Synthesis", "paragraph_index": 34}, {"url": "https://chrisdonahue.com/wavegan_examples/", "anchor_text": "Speech Commands One Through Nine", "paragraph_index": 34}, {"url": "https://www.tensorflow.org/tutorials/generative/dcgan", "anchor_text": "here", "paragraph_index": 35}, {"url": "https://github.com/spierre91/medium_code/blob/master/generative_adversarial_networks/gan_tutorial.py", "anchor_text": "GitHub", "paragraph_index": 35}], "all_paragraphs": ["Generative adversarial networks (GANs) are a set of deep neural network models used to produce synthetic data. The method was developed by Ian Goodfellow in 2014 and is outlined in the paper Generative Adversarial Networks. The goal of a GAN is to train a discriminator to be able to distinguish between real and fake data while simultaneously training a generator to produce synthetic instances of data that can reliably trick the discriminator.", "A popular application of GANs was in the \u2018GANgogh\u2019 project where synthetic paintings were generated by GANs trained on paintings from wikiart.org. The independent researchers, Kenny Jones and Derrick Bonafilia, were able to generate synthetic religious, landscape, flower and portrait images with impressive performance. The article GANGough: Creating Art with GANs details the method. In this post, we will walk through the process of building a basic GAN in python which we will use to generate synthetic images of handwritten digits. Most of the code used in this post can be found on the GANs Tensorflow tutorial page, which can be found here.", "Now, let\u2019s import the necessary packages. Let\u2019s start by importing \u2018matplotlib\u2019, \u2018tensorflow.keras\u2019 layers, and the \u2018tensorflow\u2019 library. Let\u2019s also define a variable that we can use to store and clear our sessions:", "Next let\u2019s load the \u2018MNIST\u2019 data set, which is available in the \u2018tensorflow\u2019 library. The data contains images of handwritten digits and labels corresponding to the digits:", "Let\u2019s take a look at the first image in the training data:", "We can see that this is a handwritten \u20185\u2019. Next, let\u2019s reshape the data, convert the image pixels to floating point values, and normalize the pixel values to be between -1 and 1:", "Now let\u2019s define our generator model:", "We first initialize a sequential model object. We then add the first layer, which is an ordinary dense neural network layer. There are also a series of transposed convolution layers, which are convolutional layers with padding. For those unfamiliar, a convolutional layer learns matrices (kernels) of weights which are then combined to form filters used for feature extraction. Through learning the filter weights, convolutional layers learn convolved features that represent high level information about an image. Through the learned filters, these layers can perform operations like edge detection, image sharpening and image blurring. These are some examples of kernel matrices in computer vision:", "If you are interested, you can learn more about convolutional neural networks here. There are also a series of leaky \u2018ReLu\u2019 layers:", "These are modified \u2018ReLu\u2019 activations which help to alleviate the dying neuron issue, by increasing the range of the \u2018ReLu\u2019 function. There are also batch normalization layers which fix the mean and variances of each layer\u2019s inputs. This helps to improve the speed, performance, and stability of the neural network.", "The generator and discriminator networks are trained in a similar fashion to ordinary neural networks. Namely, weights are randomly initialized, a loss function and its gradients with respect to the weights are evaluated, and the weights are iteratively updated through backpropagation.", "The training process will help the generator model produce real looking images from noise and the discriminator do a better job at detecting seemingly authentic fake images. Let\u2019s see an example of input for our generator model. First, let\u2019s define our generator and initialize some noise \u2018pixel\u2019 data:", "Next, let\u2019s pass in our noise data into our \u2018generator_model\u2019 function and plot the image using \u2018matplotlib\u2019:", "We see that this is just a noisy black and white image. The goal is for our generator to learn how to produce real looking images of digits, like the one we plotted earlier, by iteratively training on this noisy data. Upon sufficient training, our generator should be able to generate authentic looking hand written digits from noisy input like what is shown above.", "Now let\u2019s define our discriminator function. This will be an ordinary convolutional neural network used for classification:", "Next, let\u2019s define our loss function and our discriminator object:", "Next, we define the loss function specific to the discriminator. This function measures how well the discriminator is able to distinguish real images from fake images. It compares the binary predictions of the discriminator to the labels on the real images and fake images, where \u20181\u2019 corresponds to real and \u20180\u2019 corresponds to fake:", "The generator loss function measure how well the generator was able to trick the discriminator:", "Since the generator and discriminator are separate neural networks they each have their own optimizers. We will use the \u2018Adam\u2019 optimizer to train our discriminator and generator:", "Next, let\u2019s define the number of epochs (which is the number of full passes over the training data), the dimension size of our noise data, and the number of samples to generate:", "We then define our function for our training loop. The \u2018@tf.function\u2019 decorator compiles the function. The \u2018train_step()\u2019 function starts by generating an image from a random noise:", "The discriminator is then used to classify real and fake images:", "We then calculate the generator and discriminator loss:", "We then calculate the gradients of the loss functions:", "We then apply the optimizer to find the weights that minimize loss and we update the generator and discriminator:", "Next, we define a method that will allow us to generate fake images, after training is complete, and save them:", "Next, we define the training method that will allow us to train the generator and discriminator simultaneously. To proceed, let\u2019s import the \u2018time\u2019 and \u2018os\u2019 modules. Let\u2019s also define a checkpoint object which will allow us to save and restore models:", "Next, we define our function which begins by iterating over the number of epochs:", "Within the loop over epochs we produce images from each training step:", "We then generate the image from the final epoch. Let\u2019s also save our model every 5 epochs:", "Finally, we can call the \u2018train()\u2019 method on the training data with the epochs parameter:", "If we run our code with two epochs we should get the following output of fake images:", "We see that the output is still very noisy. After 50 epochs we should generate the following plot (Note that this takes a few hours to run on a MacBook Pro with 16 G of memory):", "As we can see, some of the digits are recognizable while others need a bit more training to improve. Presumable, with more epochs the digits will look more authentic. I\u2019ll stop here but feel free to play around with the data and code yourself. There are many other data sets that you can use to train GANs including the Intel Image Classification dataset, CIFAR dataset, and the Cats & Dogs dataset. Other interesting applications include deep fake videos and deep fake audio.", "To get started on training a GAN on videos you can check out the paper Adversarial Video Generation of Complex Datasets. In this paper, the authors train a GAN on the UCF-101 Action Recognition Dataset, which contains videos from YouTube within 101 action categories. To get started on training a GAN on audio check out the paper Adversarial Audio Synthesis. In this paper, the authors train a GAN on the Speech Commands One Through Nine, which contains audio of drums, bird vocalizations, and much more.", "To summarize, in this post we discussed the generative adversarial network (GAN) and how to implement it in python. We showed that GANs simultaneously train two neural networks, one used for data generation and the other for data discrimination. The layers of the discriminator and generator most notably contain transposed convolution and ordinary convolution layers respectively which learn high level feature representations of images. I encourage you to try training a GAN on some other interesting data such as the speech or video data sets I mentioned above. Again, the code used in this post can be found on the GANs Tensorflow tutorial page, which can be found here. I hope you found this post useful/interesting. The code from this post is also available on GitHub. Thank you for reading!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Writer for Built In & Towards Data Science. Cornell University Ph. D. in Chemical Physics."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F73d3972823d3&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerative-adversarial-networks-in-python-73d3972823d3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerative-adversarial-networks-in-python-73d3972823d3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerative-adversarial-networks-in-python-73d3972823d3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerative-adversarial-networks-in-python-73d3972823d3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----73d3972823d3--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----73d3972823d3--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://spierre91.medium.com/?source=post_page-----73d3972823d3--------------------------------", "anchor_text": ""}, {"url": "https://spierre91.medium.com/?source=post_page-----73d3972823d3--------------------------------", "anchor_text": "Sadrach Pierre, Ph.D."}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F120b86134681&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerative-adversarial-networks-in-python-73d3972823d3&user=Sadrach+Pierre%2C+Ph.D.&userId=120b86134681&source=post_page-120b86134681----73d3972823d3---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F73d3972823d3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerative-adversarial-networks-in-python-73d3972823d3&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F73d3972823d3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerative-adversarial-networks-in-python-73d3972823d3&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.pexels.com/photo/battle-board-game-castle-challenge-277124/", "anchor_text": "Source"}, {"url": "https://arxiv.org/pdf/1406.2661.pdf", "anchor_text": "Generative Adversarial Networks"}, {"url": "https://towardsdatascience.com/gangogh-creating-art-with-gans-8d087d8f74a1", "anchor_text": "GANGough: Creating Art with GANs"}, {"url": "https://www.tensorflow.org/tutorials/generative/dcgan", "anchor_text": "here"}, {"url": "https://en.wikipedia.org/wiki/Kernel_(image_processing)", "anchor_text": "Source"}, {"url": "https://towardsdatascience.com/a-comprehensive-guide-to-convolutional-neural-networks-the-eli5-way-3bd2b1164a53", "anchor_text": "here"}, {"url": "https://www.kaggle.com/puneet6060/intel-image-classification", "anchor_text": "Intel Image Classification"}, {"url": "https://www.cs.toronto.edu/~kriz/cifar.html", "anchor_text": "CIFAR"}, {"url": "https://www.kaggle.com/tongpython/cat-and-dog#dog.4010.jpg", "anchor_text": "Cats & Dogs"}, {"url": "https://arxiv.org/pdf/1907.06571.pdf", "anchor_text": "Adversarial Video Generation of Complex Datasets"}, {"url": "https://www.crcv.ucf.edu/data/UCF101.php", "anchor_text": "UCF-101 Action Recognition Dataset"}, {"url": "https://arxiv.org/pdf/1802.04208.pdf", "anchor_text": "Adversarial Audio Synthesis"}, {"url": "https://chrisdonahue.com/wavegan_examples/", "anchor_text": "Speech Commands One Through Nine"}, {"url": "https://www.tensorflow.org/tutorials/generative/dcgan", "anchor_text": "here"}, {"url": "https://github.com/spierre91/medium_code/blob/master/generative_adversarial_networks/gan_tutorial.py", "anchor_text": "GitHub"}, {"url": "https://medium.com/tag/python?source=post_page-----73d3972823d3---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/data-science?source=post_page-----73d3972823d3---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----73d3972823d3---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/programming?source=post_page-----73d3972823d3---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/software-development?source=post_page-----73d3972823d3---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F73d3972823d3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerative-adversarial-networks-in-python-73d3972823d3&user=Sadrach+Pierre%2C+Ph.D.&userId=120b86134681&source=-----73d3972823d3---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F73d3972823d3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerative-adversarial-networks-in-python-73d3972823d3&user=Sadrach+Pierre%2C+Ph.D.&userId=120b86134681&source=-----73d3972823d3---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F73d3972823d3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerative-adversarial-networks-in-python-73d3972823d3&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----73d3972823d3--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F73d3972823d3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerative-adversarial-networks-in-python-73d3972823d3&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----73d3972823d3---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----73d3972823d3--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----73d3972823d3--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----73d3972823d3--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----73d3972823d3--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----73d3972823d3--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----73d3972823d3--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----73d3972823d3--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----73d3972823d3--------------------------------", "anchor_text": ""}, {"url": "https://spierre91.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://spierre91.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Sadrach Pierre, Ph.D."}, {"url": "https://spierre91.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "3.7K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F120b86134681&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerative-adversarial-networks-in-python-73d3972823d3&user=Sadrach+Pierre%2C+Ph.D.&userId=120b86134681&source=post_page-120b86134681--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F4efebd4f21b7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerative-adversarial-networks-in-python-73d3972823d3&newsletterV3=120b86134681&newsletterV3Id=4efebd4f21b7&user=Sadrach+Pierre%2C+Ph.D.&userId=120b86134681&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}