{"url": "https://towardsdatascience.com/from-novice-to-expert-how-to-write-a-configuration-file-in-python-273e171a8eb3", "time": 1683018297.168828, "path": "towardsdatascience.com/from-novice-to-expert-how-to-write-a-configuration-file-in-python-273e171a8eb3/", "webpage": {"metadata": {"title": "From Novice to Expert: How to Write a Configuration file in Python | by Xiaoxu Gao | Towards Data Science", "h1": "From Novice to Expert: How to Write a Configuration file in Python", "description": "When we design software, we normally put a lot of effort into writing high-quality code. But that\u2019s not enough. Good software should also take care of its eco-system, like testing, deployment\u2026"}, "outgoing_paragraph_urls": [{"url": "https://12factor.net/", "anchor_text": "The Twelve-Factor App", "paragraph_index": 4}, {"url": "http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html", "anchor_text": "code modules are connected", "paragraph_index": 5}, {"url": "http://spring.io/", "anchor_text": "Spring", "paragraph_index": 5}, {"url": "https://security.openstack.org/guidelines/dg_avoid-dangerous-input-parsing-libraries.html", "anchor_text": "security issue", "paragraph_index": 15}, {"url": "https://docs.python.org/3/library/configparser.html", "anchor_text": "Configparser", "paragraph_index": 17}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'yes'", "paragraph_index": 19}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "/", "paragraph_index": 19}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'no'", "paragraph_index": 19}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": ",", "paragraph_index": 19}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'on'", "paragraph_index": 19}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "/", "paragraph_index": 19}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'off'", "paragraph_index": 19}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": ",", "paragraph_index": 19}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'true'", "paragraph_index": 19}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "/", "paragraph_index": 19}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'false'", "paragraph_index": 19}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "and", "paragraph_index": 19}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'1'", "paragraph_index": 19}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "/", "paragraph_index": 19}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'0'", "paragraph_index": 19}, {"url": "https://github.com/theskumar/python-dotenv", "anchor_text": "python-dotenv", "paragraph_index": 24}, {"url": "https://dynaconf.readthedocs.io/en/docs_223/", "anchor_text": "Dynaconf", "paragraph_index": 28}, {"url": "https://dynaconf.readthedocs.io/en/docs_223/guides/extend.html#creating-new-loaders", "anchor_text": "custom loader", "paragraph_index": 28}, {"url": "https://dynaconf.readthedocs.io/en/docs_223/", "anchor_text": "documentation", "paragraph_index": 28}, {"url": "https://towardsdatascience.com/6-approaches-to-validate-class-attributes-in-python-b51cffb8c4ea", "anchor_text": "validator", "paragraph_index": 30}, {"url": "https://hydra.cc/", "anchor_text": "Hydra", "paragraph_index": 33}, {"url": "https://towardsdatascience.com/6-approaches-to-validate-class-attributes-in-python-b51cffb8c4ea", "anchor_text": "my previous article", "paragraph_index": 36}, {"url": "https://hydra.cc/docs/tutorials/basic/your_first_app/config_groups", "anchor_text": "config group", "paragraph_index": 37}, {"url": "https://hydra.cc/docs/tutorials/basic/running_your_app/multi-run", "anchor_text": "parameter sweep", "paragraph_index": 40}, {"url": "http://linkedin.com/in/xiaoxugao/", "anchor_text": "linkedin.com/in/xiaoxugao/", "paragraph_index": 45}], "all_paragraphs": ["When we design software, we normally put a lot of effort into writing high-quality code. But that\u2019s not enough. Good software should also take care of its eco-system, like testing, deployment, network, etc. One of the most important aspects is configuration management.", "Good configuration management should allow the software to be executed in any environment without changing the code. It helps Ops to manage all the hassle settings and it provides a view of what can happen during the process and even allows them to change the behavior during the runtime.", "The most common configuration includes credentials to the database or an external service, the hostname of the deployed server, dynamic parameters, etc.", "In this article, I want to share with you some good practices of configuration management and how we can implement them in Python. If you have more ideas, please leave your comments below.", "Before writing any configuration file, we should ask ourselves why we need an external file. Can\u2019t we just make them constants in the code? Actually, the famous The Twelve-Factor App has answered this question for us:", "A litmus test for whether an app has all config correctly factored out of the code is whether the codebase could be made open source at any moment, without compromising any credentials. Note that this definition of \u201cconfig\u201d does not include internal application config, such as config/routes.rb in Rails, or how code modules are connected in Spring. This type of config does not vary between deploys, and so is best done in the code.", "It recommends that any environment-dependent parameters such as database credentials should sit in the external file. Otherwise, they are just normal constants in the code. Another use case I see a lot is to store dynamic variables in the external file, for instance, a blacklist or whitelist. But it can also be a number within a certain range (e.g. timeout) or some free texts. These variables can possibly be the same in each environment, but the configuration file makes the software much more flexible and easy to edit. However, if it grows too much, we might consider moving it to a database instead.", "In fact, there are no constraints on the format of the configuration file as long as the code could read and parse them. But, there are some good practices.", "The most common and standardized formats are YAML, JSON, TOML and INI. A good configuration file should meet at least these 3 criteria:", "Maybe you still don\u2019t know which one is better. But if you think about it in the context of Python, then the answer would be YAML or INI. YAML and INI are well-accepted by most Python programs and packages. INI is probably the most straightforward solution with only 1 level of the hierarchy. However, there is no data type in INI, everything is encoded as a string.", "The same configuration in YAML looks like this. As you can see, YAML supports nested structures quite well (like JSON). Besides, YAML natively encodes some data types such as string, integer, double, boolean, list, dictionary, etc.", "JSON is very similar to YAML and is extremely popular as well, however, it\u2019s not possible to add comments in JSON. I use JSON a lot for internal config inside the program, but not when I want to share the config with other people.", "TOML, on the other hand, is similar to INI, but supports more data types and has defined syntax for nested structures. It\u2019s used a lot by Python package management like pip or poetry. But if the config file has too many nested structures, YAML is a better choice. The following file looks like INI, but every string value has been quoted.", "So far, I\u2019ve explained WHY and WHAT. In the next sections, I will show you the HOW.", "As usual, we start from the most basic approach, which is simply creating an external file and reading it. Python has dedicated built-in packages to parse YAML and JSON files. As you see from the code below, they actually return the same dict object, so the attribute access will be the same for both files.", "Due to security issue, it is recommended to use yaml.safe_load() instead of yaml.load() to avoid code injection in the configuration file.", "Both packages will raise a FileNotFoundError for a non-existing file. YAML throws different exceptions for a non-YAML file and an invalid YAML file, while JSON throws JSONDecoderError for both errors.", "From this onwards, I will introduce packages designed for configuration management. We start with a Python built-in package: Configparser.", "Configparser is primarily used for reading and writing INI files, but it also supports dictionary and iterable file objects as input. Each INI file consists of multiple sections where there are multiple key, value pairs. Below is an example of accessing the fields.", "Configparser doesn\u2019t guess datatypes in the config file, so every config is stored as a string. But it provides a few methods to convert strings to the correct data type. The most interesting one is the Boolean type as it\u2019s able to recognize Boolean values from 'yes'/'no', 'on'/'off', 'true'/'false' and '1'/'0'.", "As mentioned before, it could also be read from a dictionary using read_dict(), or a string using read_string() or an iterable file object using read_file().", "The validation of Configparser is not as straightforward as YAML and JSON. First, it doesn\u2019t raise a FileNotFoundError if the file doesn\u2019t exist, but instead, it raises a KeyError when it tries to access a key.", "Besides, the package \u201cignores\u201d the error of indentation. Like the example below, if you have an extra tab or space before \u201cDEBUG\u201d, then you would get a wrong value for both ENVIRONMENT and DEBUG.", "Nevertheless, Configparser is able to return ParserError for multiple errors (see the last test case). This helps us to solve problems in one shot.", "Now we move to third-party libraries. So far, I have actually missed one type of configuration file which is .env. The variables inside .env file will be loaded as environment variables by python-dotenv and can be accessed by os.getenv.", "A .env file basically looks like this. The default path is the root folder of your project.", "It is extremely easy to use. You can decide whether you want to override the existing variable in the environment with the parameter override.", "However, python-dotenv doesn\u2019t validate the .env file. If you have a .env file like this, and you want to access DEBUG, you will get None as the return without an exception.", "Dynaconf is a very powerful settings configuration for Python that supports multi-file formats: yaml, json, ini, toml and python. It can automatically load .env file and supports custom validation rules. In a short, it covers pretty much all the functionalities from the previous 3 options and even goes beyond that. For example, you can store an encrypted password and use a custom loader to decrypt the password. It\u2019s also nicely integrated with Flask, Django, and Pytest. I will not mention all the functionalities in this article, for more details, please refer to their documentation.", "Dynaconf uses .env to find all the settings file and populate settings object with the fields. If 2 settings files have the same variable, then the value will be overridden by the latest settings file.", "One of the interesting features to me is the custom validator. As mentioned before, Configparser doesn\u2019t validate INI file strictly enough, but this can be achieved within dynaconf. In this example, I check whether certain keys exist in the file and whether certain key has the correct value. If you read from YAML or TOML file which supports multiple data types, you can even check if a number is in a certain range.", "Another interesting feature is the integration with pytest. The settings for unit testing are normally different from other environments. You can use FORCE_ENV_FOR_DYNACONF to let the application read a different section in your settings file, or use monkeypatch to replace a specific key and value pair in the settings file.", "Dynaconf also supports reload() , which cleans and executes all the loaders. This is helpful if you want the application to reload the settings file during runtime. For example, the application should automatically reload the settings when the config file has been opened and modified.", "The last option is much more than just a file loader. Hydra is a framework developed by Facebook for elegantly configuring complex applications.", "Besides reading, writing, and validating config files, Hydra also comes up with a strategy to simplify the management of multi config files, override it through a command line interface, create a snapshot of each run and etc.", "Here is the basic use of hydra. +APP.NAME means adding a new field in the config, or APP.NAME=hydra1.1 to override an existing field.", "Hydra nicely integrates with @dataclass to perform basic validations such as type-checking and read-only fields. But it doesn\u2019t support __post_init__ method for advanced value checking described in my previous article.", "Hydra introduces a concept called config group. The idea is to group configs with the same type and choose one of them during the execution. For example, you can have a group \u201cdatabase\u201d with one config for Postgres, and another one for MySQL.", "When it gets more complex, you might have a layout like this in your program (an example from Hydra documentation)", "and you want to benchmark your application with different combinations of db, schema and ui, then you can run:", "Hydra supports parameter sweep with --multirun, that runs multiple jobs at the same with different config files. For instance, for the previous example, we can run:", "Then you basically start 6 jobs simultaneously", "In this article, I\u2019ve talked about configuration management in Python in terms of WHY WHAT, and HOW. Depending on the use case, a complex tool/framework isn\u2019t always better than a simple package. No matter which one you choose, you should always think about its readability, maintainability, and how spot the error as easily as possible. In fact, a config file is just another type of code.", "I hope you enjoy this article and feel free to leave your comments below.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "I\u2019m a Developer with a focus on Python and Data Engineering. I write stuff to talk to myself and the world. You can find me on linkedin.com/in/xiaoxugao/."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F273e171a8eb3&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-novice-to-expert-how-to-write-a-configuration-file-in-python-273e171a8eb3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-novice-to-expert-how-to-write-a-configuration-file-in-python-273e171a8eb3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-novice-to-expert-how-to-write-a-configuration-file-in-python-273e171a8eb3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-novice-to-expert-how-to-write-a-configuration-file-in-python-273e171a8eb3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----273e171a8eb3--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----273e171a8eb3--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@xiaoxugao?source=post_page-----273e171a8eb3--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@xiaoxugao?source=post_page-----273e171a8eb3--------------------------------", "anchor_text": "Xiaoxu Gao"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2adc5a07e772&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-novice-to-expert-how-to-write-a-configuration-file-in-python-273e171a8eb3&user=Xiaoxu+Gao&userId=2adc5a07e772&source=post_page-2adc5a07e772----273e171a8eb3---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F273e171a8eb3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-novice-to-expert-how-to-write-a-configuration-file-in-python-273e171a8eb3&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F273e171a8eb3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-novice-to-expert-how-to-write-a-configuration-file-in-python-273e171a8eb3&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@brett_jordan", "anchor_text": "Brett Jordan"}, {"url": "https://unsplash.com/", "anchor_text": "Unsplash"}, {"url": "https://12factor.net/", "anchor_text": "The Twelve-Factor App"}, {"url": "http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html", "anchor_text": "code modules are connected"}, {"url": "http://spring.io/", "anchor_text": "Spring"}, {"url": "https://security.openstack.org/guidelines/dg_avoid-dangerous-input-parsing-libraries.html", "anchor_text": "security issue"}, {"url": "https://docs.python.org/3/library/configparser.html", "anchor_text": "Configparser"}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'yes'"}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "/"}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'no'"}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": ","}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'on'"}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "/"}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'off'"}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": ","}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'true'"}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "/"}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'false'"}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "and"}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'1'"}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "/"}, {"url": "https://docs.python.org/3/library/configparser.html#supported-datatypes", "anchor_text": "'0'"}, {"url": "https://github.com/theskumar/python-dotenv", "anchor_text": "python-dotenv"}, {"url": "https://dynaconf.readthedocs.io/en/docs_223/", "anchor_text": "Dynaconf"}, {"url": "https://dynaconf.readthedocs.io/en/docs_223/guides/extend.html#creating-new-loaders", "anchor_text": "custom loader"}, {"url": "https://dynaconf.readthedocs.io/en/docs_223/", "anchor_text": "documentation"}, {"url": "https://towardsdatascience.com/6-approaches-to-validate-class-attributes-in-python-b51cffb8c4ea", "anchor_text": "validator"}, {"url": "https://hydra.cc/", "anchor_text": "Hydra"}, {"url": "https://towardsdatascience.com/6-approaches-to-validate-class-attributes-in-python-b51cffb8c4ea", "anchor_text": "my previous article"}, {"url": "https://hydra.cc/docs/tutorials/basic/your_first_app/config_groups", "anchor_text": "config group"}, {"url": "https://hydra.cc/docs/tutorials/basic/running_your_app/multi-run", "anchor_text": "parameter sweep"}, {"url": "https://docs.python.org/3.8/library/configparser.html", "anchor_text": "configparser - Configuration file parser - Python 3.9.1 documentationEdit descriptiondocs.python.org"}, {"url": "https://tech.preferred.jp/en/blog/working-with-configuration-in-python/", "anchor_text": "Best Practices for Working with Configuration in Python Applications | Preferred Networks Research\u2026Most computer applications can be configured to behave a certain way, be it via command line flags, environment\u2026tech.preferred.jp"}, {"url": "https://www.infoq.com/news/2019/10/facebook-hydra-python/", "anchor_text": "Facebook Open-Sources Hydra to Simplify Configuration Management in Python ProgramsFacebook Hydra is a new open-source framework aimed to speed up the creation of Python applications by simplifying the\u2026www.infoq.com"}, {"url": "https://medium.com/tag/python?source=post_page-----273e171a8eb3---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/software-development?source=post_page-----273e171a8eb3---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/programming?source=post_page-----273e171a8eb3---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-science?source=post_page-----273e171a8eb3---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/coding?source=post_page-----273e171a8eb3---------------coding-----------------", "anchor_text": "Coding"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F273e171a8eb3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-novice-to-expert-how-to-write-a-configuration-file-in-python-273e171a8eb3&user=Xiaoxu+Gao&userId=2adc5a07e772&source=-----273e171a8eb3---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F273e171a8eb3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-novice-to-expert-how-to-write-a-configuration-file-in-python-273e171a8eb3&user=Xiaoxu+Gao&userId=2adc5a07e772&source=-----273e171a8eb3---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F273e171a8eb3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-novice-to-expert-how-to-write-a-configuration-file-in-python-273e171a8eb3&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----273e171a8eb3--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F273e171a8eb3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-novice-to-expert-how-to-write-a-configuration-file-in-python-273e171a8eb3&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----273e171a8eb3---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----273e171a8eb3--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----273e171a8eb3--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----273e171a8eb3--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----273e171a8eb3--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----273e171a8eb3--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----273e171a8eb3--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----273e171a8eb3--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----273e171a8eb3--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@xiaoxugao?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@xiaoxugao?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Xiaoxu Gao"}, {"url": "https://medium.com/@xiaoxugao/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "9.6K Followers"}, {"url": "http://linkedin.com/in/xiaoxugao/", "anchor_text": "linkedin.com/in/xiaoxugao/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2adc5a07e772&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-novice-to-expert-how-to-write-a-configuration-file-in-python-273e171a8eb3&user=Xiaoxu+Gao&userId=2adc5a07e772&source=post_page-2adc5a07e772--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F45d7754eac8c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-novice-to-expert-how-to-write-a-configuration-file-in-python-273e171a8eb3&newsletterV3=2adc5a07e772&newsletterV3Id=45d7754eac8c&user=Xiaoxu+Gao&userId=2adc5a07e772&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}