{"url": "https://towardsdatascience.com/build-a-homebrew-current-voltage-plotter-88413dfa44d0", "time": 1683008506.356693, "path": "towardsdatascience.com/build-a-homebrew-current-voltage-plotter-88413dfa44d0/", "webpage": {"metadata": {"title": "Build A Homebrew Current/Voltage Plotter | by Don Cross | Towards Data Science", "h1": "Build A Homebrew Current/Voltage Plotter", "description": "Learn to build your own digital to analog converter (DAC). Capture and plot the electrical behavior of nonlinear devices like diodes. Open source design."}, "outgoing_paragraph_urls": [{"url": "https://en.wikipedia.org/wiki/Buffer_amplifier#Op-amp_implementation", "anchor_text": "voltage buffer", "paragraph_index": 16}], "all_paragraphs": ["Recently I was thinking about the nonlinear behavior of diodes. In college, I learned that the current through a diode is approximated by an exponential function of the voltage applied to it. I wondered how well exponential functions describe the current/voltage behavior of a real-life diode.", "I thought it would be a fun project to build something to measure and graph the behavior of a diode. I had a spare Arduino Uno sitting around, along with a breadboard and some basic electronics parts.", "Now, three days later, I have a system that works better than I had imagined. It captures data and makes graphs from it like the one shown below. Here\u2019s how you can make your own current/voltage analyzer. I provide the source code and hardware design as open source.", "For this project, I need a way to generate different voltages ranging from 0V to 5V, in finely controlled increments. A device that converts digital data into an analog voltage level is called a digital to analog converter, or DAC for short. Although the more advanced Arduino Due comes with built-in DACs, the Due costs almost twice as much as the Arduino Uno. I decided to build my own DAC from scratch and use it with the Uno. This was educational and rewarding in its own right.", "The DAC design looks like this:", "Some notes about the hardware design:", "Here is what my final build looks like:", "I use eight digital outputs from the Uno to select one of 256 different voltage levels. The network of nine resistors and the op-amp work together to implement the DAC.", "Each of the outputs (PB0, PB1, PD2, \u2026 PD7) produces an independent voltage of either 0V or 5V, as controlled by firmware running on the Uno. Because these are 8 independent outputs, there are 2\u2078=256 distinct output combinations.", "The resistors are selected as powers of two, starting at 1K, all the way to 128K. The contribution of voltage at the positive op-amp from output PD7 through the attached 1K resistor R7 is the greatest of the eight outputs, because the resistance is the smallest. With the doubling of each resistance value, the voltage that reaches the op-amp gets cut in half.", "To prove this is true, consider this diagram, redrawn to make the current flow clearer.", "X\u2080 through X\u2087 represent the voltages from the eight Uno output pins. Each can be either 0V or 5V at a given time. The total current flowing into the V\u2080 node through the resistors R\u2080 through R\u2087 must be equal to the current flowing out through R\u2088. (We can ignore any current entering the positive op-amp input, because op-amps are designed to have extremely high input impedance.) Thus:", "Using Ohm\u2019s law, each current is equal to the voltage drop across each resistor divided by corresponding resistance value:", "After splitting the fractions, collecting the V\u2080 terms on one side of the equation, and solving for V\u2080, we find:", "The denominator can be replaced by the constant R\u2032\u2248500\u2126 that represents the parallel equivalent resistance of all nine resistors:", "This final equation demonstrates that the voltage V\u2080 experienced by the op-amp\u2019s positive input is a linear, weighted sum of the eight input voltages.", "By connecting the op-amp\u2019s output to its negative input, it serves as a voltage buffer that outputs the same voltage V\u2080 as its input. This is called a unity gain configuration. The op-amp provides up to 20 mA of current to the test component while isolating the resistor network from that component.", "To make your homemade DAC as linear as possible, you need to choose the resistances close to powers of two. There\u2019s one little problem with this. Resistors are not commonly sold in values like 2K, 4K, etc.", "However, it is possible to find pairs of resistors that combine, either in series or parallel, to closely match the target values. The actual value of resistors seldom matches their nominal value. You have to measure them! I sat down with my digital ohmmeter and tried combinations until I got just the right values. It took me a couple of hours just for this resistor tuning step.", "As an example, for my 4K resistor, I found a nominal 180\u2126 resistor that measured 176.8\u2126. I also found a nominal 3.9K resistor that measured 3.83K. Soldering them in series, I ended up with a total resistance that measured 4.00K on my ohmmeter. Instead of doing the math, I found it was easier to keep sticking different resistors in series (or parallel) on a breadboard and measuring them until I got a close enough fit.", "You don\u2019t need to drive yourself crazy trying to get perfect resistances. It won\u2019t affect the accuracy of your final current/voltage plot. As you will see, the finished device will measure the voltages using two of the Uno\u2019s analog inputs, so there is no calculation or guesswork involved in the accuracy of the resulting graphs. The point is to try to cover the range of possible voltages smoothly, without any large gaps in the voltages your DAC can generate. It\u2019s good enough to get within 1% for each resistance.", "If you decide combining fixed resistors this way is too much hassle, you can instead buy a collection of eight trimmer resistors and adjust them with a screwdriver until they measure just right.", "Here is a closeup that shows a better view of the DAC on the breadboard. You can see how some of my compound resistors, most in series, a couple in parallel.", "You will need to clone the GitHub repository for this project to your computer. I have verified everything works on both Debian Linux and Windows 10. I haven\u2019t tried Mac, but it should work fine.", "The firmware is an Arduino sketch called DiodePlotFirmware.ino. It is designed to work with the Arduino IDE\u2019s serial monitor. Once you build the hardware and program it with the firmware, you can perform a quick diagnostic. I recommend your first run be with a 1K resistor as your test component. Place it in the circuit instead of the diode D1. Open up the Arduino IDE serial monitor. When you boot the system, you should see the following prompt:", "To verify the DAC is working correctly, you can connect a digital multimeter to the DAC output and measure its voltage while entering a series of commands. Connect your multimeter\u2019s negative probe to GND (I like to clip it to the metal tab on the LM7808). Connect the positive probe to the op-amp output. It should measure very close to 0V.", "Next, enter a series of commands to manually change the voltage level. Each command will be a number from 0 to 255, followed by the letter v. Press enter to submit the command. Let\u2019s start by telling the board to go to its maximum voltage:", "You should see something like the following in the serial monitor:", "The first number confirms that the value 255 (binary 11111111) has been fed into the 8 pins going into the DAC. The second number is the analog reading from the output of the DAC. It should be toward the high end of the 10-bit range of the Arduino\u2019s analog input, which is 0..1023. And your multimeter should have jumped to a value near +5.0 volts.", "The third number should be close to the value shown, assuming you have installed a 1K resistor instead of D1. It is the voltage at the top of the test component.", "If everything checks out, you are ready to proceed. Otherwise, something is wrong; unplug your power supply and USB cable, then spend some time checking your wiring. You need to diagnose and fix any mistakes before continuing.", "Once your maximum voltage checks out, try a few intermediate values. For example, try 50% voltage by entering the following command.", "Now the serial monitor should print numbers close to these (new output boldfaced):", "The first number should be exactly 128, and the remaining two numbers should be approximately half of the values of the previous 255v test. Also, your multimeter should read about +2.5V.", "Now it\u2019s time to have some fun! Let\u2019s verify linear behavior of the DAC, still using the 1K resistor in place of D1.", "First, clear the serial monitor output by pressing the \u201cClear output\u201d button in the lower right corner of the display. Then enter the following command:", "The m command runs an automated data gathering procedure that sweeps through each DAC input, 0 through 255. For each DAC value, the 1000 in front of the m tells the firmware to oversample each DAC setting 1000 times. The firmware takes 1000 successive readings of two voltages: the DAC output itself and the voltage at the top of the test component.", "The test will take a couple of minutes to run. When it is finished, you will have output that looks like the following:", "This section is optional. If you just want to use the software I provide to graph the data, you can skip to the next section. But if you want to write your own software to process the data, here I explain what all these numbers mean.", "A typical line looks like this:", "The first number, 2, is the 8-bit value that was fed into the DAC. Just like in the v command we saw before, this is a value from 0 to 255.", "The second number, 6, is the central value of the measured analog voltage coming out of the DAC. Just like in the v command, it is a value from 0 to 1023, scaled linearly from 0V to 5V.", "Now things get different. You will see a list of numbers enclosed by square brackets []. There will always be an odd number of values inside the brackets. These values are counts of how many times different voltage values were read. Because we oversampled each value 1000 times (in the 1000m command), the numbers will always add up to 1000. That is, 1+153+846=1000.", "The middle number, 153 in this case, represents how many times the measured voltage was 6 (the number to the left of the brackets). So the way to interpret 6 [1 153 846] is:", "Similarly, the remaining part of the line, 5 [590 409 1], indicates the oversampled results of the voltage measured at the test component.", "Now use your clipboard to copy and paste this data into your favorite text editor. Save the file as resistor.txt in the data directory in your clone of the GitHub repo. Open a command prompt, change to the clone\u2019s directory.", "You will need to install Python3 on your system if it isn\u2019t already there. Verify with:", "You will also need to install the Python package matplotlib for rendering the graphs. On Linux the command is:", "To confirm the plotter software is ready, enter the following command:", "Although the data files only contain n, v1, and v2, you can see in this help text that plot.py can deduce the current i using Ohm\u2019s law.", "Let\u2019s plot the current i as a function of the component voltage v2. Enter the following command:", "This should produce a graph that shows a linear relationship. After all, a resistor obeys Ohm\u2019s law, so current should be proportional to voltage. Here\u2019s what mine looks like:", "Now you are ready to test a nonlinear component. It\u2019s fun to start out with an LED, because you can also watch it slowly get brighter as the voltage increases beyond its illumination threshold. Replace the resistor with the LED, making sure to connect its anode to the resistor R9, and its cathode to GND. If you get it backwards, nothing bad will happen; it just won\u2019t light up and you\u2019ll get a flat zero-current curve. Just flip it around and run the test again.", "Be sure to clear your serial output before each test, so that you don\u2019t mix data from different tests in your output files. Follow the same procedure you did for the resistor test, running the 1000m command, saving the output to a file, and running plot.py to plot the data.", "Here is what I got testing a random red LED I had sitting around:", "If you look at the next graph, you will notice it covers the current/voltage response of a Zener diode over both positive and negative input voltages. But this circuit only produces voltages from 0V to +5V. How did I make this graph?", "It takes a little bit of manual work, but the plotter program plot.py has a trick up its sleeve. You will run two tests, one with the test component (e.g. Zener diode) forward biased. Copy and paste the data into a text file, and manually type the word FORWARD on a line by itself in front of that data.", "After all the test data, type the word REVERSE by itself on a line.", "Then flip the component around on the breadboard so that it is reverse-biased. Clear your serial output, run the test again, and paste the resulting data after the word REVERSE. You can see an example data file in your cloned repo in data/zener3v.txt. Edited for brevity, it looks like this:", "The FORWARD is optional, but it explicitly indicates that the following data are forward-biased. Forward-biased data is the default. The REVERSE keyword indicates that any data after it should be treated as reverse-biased, negative voltages.", "Also note the syntax shown in the first line that allows you to put a title at the top of your graphs: the pound sign # followed by any text inside square brackets []. The title is handy for documenting what component you tested.", "Have some fun exploring the behavior of different diodes and transistor junctions. Try plotting data for several LEDs of the same kind, to see how closely their behavior matches. Or you can try plotting the curves for LEDs of different colors to see how their \u201cturn-on\u201d voltages differ.", "This project can also be the basis for creating mathematical models of a given component. I intend to do this myself, to see how to best fit the experiment curve with exponential regression, Chebyshev polynomials, or some other technique. It would be interesting to see if software can deduce which device produced a curve by matching against a database of known regression models.", "I hope this project inspires you to think of creative adaptations. Perhaps you can use some of the ideas from it for your own inventions and experiments.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F88413dfa44d0&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-homebrew-current-voltage-plotter-88413dfa44d0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-homebrew-current-voltage-plotter-88413dfa44d0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-homebrew-current-voltage-plotter-88413dfa44d0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-homebrew-current-voltage-plotter-88413dfa44d0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----88413dfa44d0--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----88413dfa44d0--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@cosinekitty?source=post_page-----88413dfa44d0--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@cosinekitty?source=post_page-----88413dfa44d0--------------------------------", "anchor_text": "Don Cross"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe2d2166d7d92&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-homebrew-current-voltage-plotter-88413dfa44d0&user=Don+Cross&userId=e2d2166d7d92&source=post_page-e2d2166d7d92----88413dfa44d0---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F88413dfa44d0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-homebrew-current-voltage-plotter-88413dfa44d0&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F88413dfa44d0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-homebrew-current-voltage-plotter-88413dfa44d0&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://en.wikipedia.org/wiki/Buffer_amplifier#Op-amp_implementation", "anchor_text": "voltage buffer"}, {"url": "https://github.com/cosinekitty/diodeplot", "anchor_text": "https://github.com/cosinekitty/diodeplot"}, {"url": "https://medium.com/tag/arduino?source=post_page-----88413dfa44d0---------------arduino-----------------", "anchor_text": "Arduino"}, {"url": "https://medium.com/tag/programming?source=post_page-----88413dfa44d0---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/makers?source=post_page-----88413dfa44d0---------------makers-----------------", "anchor_text": "Makers"}, {"url": "https://medium.com/tag/python?source=post_page-----88413dfa44d0---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/electrical-engineering?source=post_page-----88413dfa44d0---------------electrical_engineering-----------------", "anchor_text": "Electrical Engineering"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F88413dfa44d0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-homebrew-current-voltage-plotter-88413dfa44d0&user=Don+Cross&userId=e2d2166d7d92&source=-----88413dfa44d0---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F88413dfa44d0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-homebrew-current-voltage-plotter-88413dfa44d0&user=Don+Cross&userId=e2d2166d7d92&source=-----88413dfa44d0---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F88413dfa44d0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-homebrew-current-voltage-plotter-88413dfa44d0&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----88413dfa44d0--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F88413dfa44d0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-homebrew-current-voltage-plotter-88413dfa44d0&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----88413dfa44d0---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----88413dfa44d0--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----88413dfa44d0--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----88413dfa44d0--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----88413dfa44d0--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----88413dfa44d0--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----88413dfa44d0--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----88413dfa44d0--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----88413dfa44d0--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@cosinekitty?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@cosinekitty?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Don Cross"}, {"url": "https://medium.com/@cosinekitty/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "534 Followers"}, {"url": "https://github.com/cosinekitty", "anchor_text": "https://github.com/cosinekitty"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe2d2166d7d92&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-homebrew-current-voltage-plotter-88413dfa44d0&user=Don+Cross&userId=e2d2166d7d92&source=post_page-e2d2166d7d92--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F376b6ecea8c2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-homebrew-current-voltage-plotter-88413dfa44d0&newsletterV3=e2d2166d7d92&newsletterV3Id=376b6ecea8c2&user=Don+Cross&userId=e2d2166d7d92&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}