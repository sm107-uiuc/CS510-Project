{"url": "https://towardsdatascience.com/sql-database-design-basics-with-example-8dcce4b0c687", "time": 1683011408.169178, "path": "towardsdatascience.com/sql-database-design-basics-with-example-8dcce4b0c687/", "webpage": {"metadata": {"title": "SQL Database Design Basics with Example | by Evgeniy Gribkov | Towards Data Science", "h1": "SQL Database Design Basics with Example", "description": "It is a common practice that a DB architect has to design a relational database tailored to a particular solution. One Friday evening, I was coming home from work on a commuter train, and I was\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.devart.com/dbforge/sql/studio/sql-server-database-designer.html", "anchor_text": "MS SQL Server database design", "paragraph_index": 3}, {"url": "https://www.devart.com/dbforge/sql/data-generator/", "anchor_text": "Data Generator for SQL Server", "paragraph_index": 4}, {"url": "https://www.devart.com/dbforge/sql/search/", "anchor_text": "dbForge Search", "paragraph_index": 4}, {"url": "https://www.devart.com/dbforge/sql/studio/", "anchor_text": "dbForge Studio for SQL Server", "paragraph_index": 4}, {"url": "https://www.devart.com/dbforge/sql/data-pump/", "anchor_text": "dbForge Data Pump", "paragraph_index": 4}], "all_paragraphs": ["It is a common practice that a DB architect has to design a relational database tailored to a particular solution.", "One Friday evening, I was coming home from work on a commuter train, and I was thinking of creating a kind of recruitment service. As I know that none of the existing services allows quick evaluation of a candidate, creation of intricate filters on certain skills, projects, or positions, or exclusion of certain skills, positions, or projects. The maximum range of use is filtering by companies and partially by skills.", "In these series of articles, I will indulge myself a little bit with some non-technical examples from my life in an attempt to break rigorous technical writing.", "In this part, I will write about the basics of relational database design and illustrate MS SQL Server database design for a recruitment service.", "Now, as for the articles that will follow, there, I will show you how to populate a database with data by means of Data Generator for SQL Server, and search for database data and objects with the free dbForge Search tool. I will use dbForge Studio for SQL Server to implement charts for my examples, and dbForge Data Pump to import and export data.", "To design database schemas, let us recall 7 normal forms and the very concepts of normalization and denormalization. They underlie all design rules.", "Let me give a detailed description of 7 normal forms:", "An example would be a citizen with a passport (every citizen must have a passport, and a passport is one for every citizen)", "This relationship is implemented in two ways:", "Here, the Citizen table represents the citizen entity, and the PassportData attribute (field) contains all passport data of a citizen and cannot be empty (NOT NULL)", "The Citizen table represents the citizen entity, and the PassportData table represents the entity of the citizen\u2019s passport data. The citizen entity contains the PassportID attribute (field) that refers to the primary key of the PassportData table. Whereas, the passport data entity has the CitizenID attribute (field) that refers to the CitizenID primary key of the Citizen table.", "It is also important to guarantee the integrity of both the CitizenID field and the PassportData table, to provide a one-to-one relationship. That is, the PassportID field in the Citizen table and the CitizenID field in the PassportData table must refer to the same record as if it were one entity (table) that was illustrated in paragraph 1.1.1.", "An example here would be a person who can have passport data and may not have a specified country. So, in the first case, he is a citizen of a given country, and in the second case, he is not.", "This relationship is implemented in two ways:", "Here, the Person table represents the person entity, and the PassportData attribute (field) contains all passport data of a person and can be empty (NULL)", "Here, the Person table represents the person entity, and the Passport Data table represents the person\u2019s passport data entity (that is the passport itself). The person entity contains the PassportID attribute (field) that refers to the primary key of the PassportData table. Whereas, the passport data entity has the PersonID attribute (field) in the Person table. The PassportID field of the Person table can be empty (NULL).", "It is also important to guarantee the integrity of both the PersonID field and the PassportData table, to provide a one-to-one relationship. That is, the PassportID field of the Person table and the PersonID field of the PassportData table must refer to the same records as if it were one entity (table) shown in paragraph 1.2.1, or these fields must be unspecified, that is, contain NULL.", "An illustration of this can be a parent and their children. Every parent has at least one child.", "You can implement this relationship in two ways:", "Here, the Parent table represents the parent entity, and the ChildList attribute (field) contains information about children, that is, children themselves. This field cannot be empty (NOT NULL). The ChildList field type is usually semi-structured data (NoSQL) such as XML, JSON, and so on.", "Here, the Parent table represents the parent entity, and the Child table represents the child entity. The Child table has the ParentID field that refers to the primary ParentID key of the Parent table. The ParentID field of the Child table cannot be empty (NOT NULL).", "An example would be a person who might have children or might not have any children.", "This relationship is implemented in two ways:", "Here, the Parent table represents the parent entity, and the ChildList attribute (field) contains information about children, that is children themselves. This field can be empty (NULL). The usual ChildList field type is semi-structured data (NoSQL) such as XML, JSON, and others.", "Here, the Parent table represents the parent entity, and the Child table represents the child entity. The Child table has the ParentID field that refers to the primary ParentID key of the Parent table. The ParentID field of the Child table can be empty (NULL).", "Also, there is a third way of one-entity implementation that refers to itself, on the condition that the child and the parent entities (tables) have the same set of attributes (fields) without a reference to parent:", "Here, the Person entity (table) contains the ParentID attribute (field) that refers to the primary PersonID key of the same table Person and can have an empty value (NULL).", "This is the implementation of a many-to-one relationship with an optional nature.", "This relationship mirrors the illustrated above one-to-many relationship. That is the relationship between the child entity and the parent entity, where the mandatory relationship is possible if the child has at least one parent, and if we take all children, including those in orphan houses, then such a relationship has optional nature.", "A one-to-many and many-to-one relationships can also be implemented through more than 2 entities, by adding the necessary attributes that refer to the primary keys of the corresponding entities. This implementation is similar to the examples above in paragraphs 1.1.2 and 1.2.2.", "In this case, an example would be real estate that can be owned by one person or several people. At the same time, a person can own several houses or have an ownership share of many houses.", "You can implement this relationship with NoSQL in the ways described above for the previous relationships. However, within the relational model, this relationship is normally implemented through 3 entities (tables):", "Here, the Person and RealEstate tables represent the entities of a person and real estate accordingly. These entities (tables) are related by means of the PersonRealEstate entity (table) through the PersonID and RealEstateID attributes (fields) that refer to the primary keys PersonID of the Person table and RealEstateID of the RealEstate table correspondingly. Note that the pair (PersonID; RealEstateID) is always unique for the PersonRealEstate table, thus it can be the primary key for the very PersonRealEstate linking entity (table).", "This relationship can be implemented through more than 3 entities by means of adding the necessary attributes that refer to the primary keys of the corresponding entities. Such an implementation is similar to the examples described in paragraphs 1.1.2 and 1.2.2.", "So where are the 7 normal forms, you may wonder?", "It is just that these 7 normal forms are grouped in 4 functional blocks in the text above.", "Normalization eliminates data redundancy and hence, decreases risks of data anomalies. However, normalization when decomposing entities (tables) results in a more complex query build for data manipulation (insertion, update, selection, and deletion).", "The opposite process is denormalization. It simplifies query processing for data access by means of adding redundant data (for instance, as it was mentioned above in par. 2.1.1 and 2.2.1 with the help of semi-structured data (NoSQL)).", "Are you sure that you got the point of 7 normal forms? That you really got it and not just familiarized yourself with it. Ask yourself whether, in a couple of hours, you will manage to design a database model, even with excessive entities, for any data domain or any information system. You can polish intricacies and details later by asking analytics and customer representatives.", "If this question caught you off guard, and you think accomplishing this is highly unlikely, then you know the 7 normal forms but do not understand them.", "Somehow it is not stated in the sources that these relationships between entities were not just made up but discovered. That is, from the very start, they actually existed in the real world between subjects and objects.", "In addition to that, these relationships can change, shifting from one-to-one to one-to-many, or to many-to-one, or to many-to-many, changing their mandatory nature or preserving it.", "I think you should try watching people and detecting the existing relationship both between subjects and between subjects and objects (the example above illustrated a citizen and a passport as a one-to-one relationship with mandatory nature, and a person and a passport as a one-to-one relationship that is optional).", "When you have gained insight into 7 normal forms, you can easily design a database model of any complexity for any information system.", "Apart from that, you will come to know that you can implement the relationships in many different ways, and the relationships themselves can change. Thus, the database model (schema) is a snapshot of relationships between entities at a certain point in time. Hence, it is essential to specify both entities, which are images of real-world or domain objects, and relationships between them taking future changes into account.", "A well-designed database model, with due regard to relationship change in reality and in the subject domain, does not require any alterations for a long time. It is especially vital for data storage where changes involve resaving big volumes of data, ranging from several gigabytes to many terabytes.", "Note: in a relational database model, it is the relationship between entities, and rows (tuples) are examples of these relationships. But to make it simple, we often mean entities by tables, and instances of entities by rows, and their relationship by external keys relationship.", "After we have described DB design basics in the first part of the article, let us now create a database schema for recruitment.", "First of all, we need to define which information is important for company employees who search for job applicants:", "1) Companies where an applicant used to work at.", "2) Positions that an applicant used to hold at these companies.", "3) Skills that an applicant used at work, length of their employment at each of the companies and in each position, length of each skill use.", "1) Positions that an applicant used to hold at previous places of work.", "2) Skills that an applicant used at work.", "3) Projects that an applicant took part in. In addition to that, it is important to know the applicant\u2019s length of employment in each position and in each project as well as the length of each skill use.", "Let us first identify the necessary entities:", "Company and employee have a many-to-many relationship since an employee could work for different companies, and the companies have many employees.", "The same works for position and employee, because many employees can work in one position within one company as well as in different companies. Herewith, an employee could work in different positions both within one company and at many different ones. As a result, the relationship between position and company is many-to-many as well.", "The \u201cproject\u201d entity follows the same logic: the project relates to all other above mentioned entities as many-to-many.", "For simplicity, let us say that an employee uses one set of skills in a project. Then, the relationship between project and skill is also many-to-many.", "Considering the importance of specifying an employee\u2019s length of employment at this or that company, in a particular position, and in a certain project, our database schema may have the following ER diagram:", "Here, the JobHistory table represents the entity of each employee\u2019s job history, that is, the very resume that implements the many-to-many relationship between employee, company, positions, and project.", "Project and skill relate as many-to-many, thus, they are linked with the help of the ProjectSkill entity.", "If you understand the relationship between subjects, and subjects and objects, meaning database design norms, you can create a similar schema on a piece of paper in under an hour.", "Here, we could simplify the schema and data addition, if we put skill in the project entity through semi-structured data (NoSQL) in the form of XML, JSON, or simply list the names of skills with a semicolon. But this would make it difficult to select grouping by skills and filter by certain skills.", "As you can see, designing systems is just turning objects and subjects from reality to database entities where the relationship between these entities is fixed at a certain time point, taking future changes into account. What exactly we take from reality and implement as a schema entity, and what kind of relationship we build in a model, depends on what we want from an information system in general, now and in the future. That is, which data we want to obtain for the present moment and in some time in the future.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "I am interested in everything related to the database and data. Professionally engaged in MS SQL Server as a developer and administrator."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F8dcce4b0c687&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-database-design-basics-with-example-8dcce4b0c687&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-database-design-basics-with-example-8dcce4b0c687&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-database-design-basics-with-example-8dcce4b0c687&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-database-design-basics-with-example-8dcce4b0c687&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----8dcce4b0c687--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8dcce4b0c687--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@gribkov.evg?source=post_page-----8dcce4b0c687--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@gribkov.evg?source=post_page-----8dcce4b0c687--------------------------------", "anchor_text": "Evgeniy Gribkov"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fad6d87f14fe8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-database-design-basics-with-example-8dcce4b0c687&user=Evgeniy+Gribkov&userId=ad6d87f14fe8&source=post_page-ad6d87f14fe8----8dcce4b0c687---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8dcce4b0c687&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-database-design-basics-with-example-8dcce4b0c687&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8dcce4b0c687&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-database-design-basics-with-example-8dcce4b0c687&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.piqsels.com/en/public-domain-photo-jzwoe", "anchor_text": "Piqsels"}, {"url": "https://www.devart.com/dbforge/sql/studio/sql-server-database-designer.html", "anchor_text": "MS SQL Server database design"}, {"url": "https://www.devart.com/dbforge/sql/data-generator/", "anchor_text": "Data Generator for SQL Server"}, {"url": "https://www.devart.com/dbforge/sql/search/", "anchor_text": "dbForge Search"}, {"url": "https://www.devart.com/dbforge/sql/studio/", "anchor_text": "dbForge Studio for SQL Server"}, {"url": "https://www.devart.com/dbforge/sql/data-pump/", "anchor_text": "dbForge Data Pump"}, {"url": "https://blog.devart.com/sql-database-design-basics-with-example.html", "anchor_text": "https://blog.devart.com"}, {"url": "https://medium.com/tag/sql-server?source=post_page-----8dcce4b0c687---------------sql_server-----------------", "anchor_text": "Sql Server"}, {"url": "https://medium.com/tag/data?source=post_page-----8dcce4b0c687---------------data-----------------", "anchor_text": "Data"}, {"url": "https://medium.com/tag/database?source=post_page-----8dcce4b0c687---------------database-----------------", "anchor_text": "Database"}, {"url": "https://medium.com/tag/database-design?source=post_page-----8dcce4b0c687---------------database_design-----------------", "anchor_text": "Database Design"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8dcce4b0c687&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-database-design-basics-with-example-8dcce4b0c687&user=Evgeniy+Gribkov&userId=ad6d87f14fe8&source=-----8dcce4b0c687---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8dcce4b0c687&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-database-design-basics-with-example-8dcce4b0c687&user=Evgeniy+Gribkov&userId=ad6d87f14fe8&source=-----8dcce4b0c687---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8dcce4b0c687&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-database-design-basics-with-example-8dcce4b0c687&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8dcce4b0c687--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F8dcce4b0c687&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-database-design-basics-with-example-8dcce4b0c687&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----8dcce4b0c687---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----8dcce4b0c687--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----8dcce4b0c687--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----8dcce4b0c687--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----8dcce4b0c687--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----8dcce4b0c687--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----8dcce4b0c687--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----8dcce4b0c687--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----8dcce4b0c687--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@gribkov.evg?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@gribkov.evg?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Evgeniy Gribkov"}, {"url": "https://medium.com/@gribkov.evg/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "42 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fad6d87f14fe8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-database-design-basics-with-example-8dcce4b0c687&user=Evgeniy+Gribkov&userId=ad6d87f14fe8&source=post_page-ad6d87f14fe8--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fe2e084bc4fe5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-database-design-basics-with-example-8dcce4b0c687&newsletterV3=ad6d87f14fe8&newsletterV3Id=e2e084bc4fe5&user=Evgeniy+Gribkov&userId=ad6d87f14fe8&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}