{"url": "https://towardsdatascience.com/explained-deep-learning-in-tensorflow-chapter-1-9ab389fe90a1", "time": 1683001703.171296, "path": "towardsdatascience.com/explained-deep-learning-in-tensorflow-chapter-1-9ab389fe90a1/", "webpage": {"metadata": {"title": "Explained: Deep Learning in Tensorflow \u2014 Chapter 1 | by Sonu Sharma | Towards Data Science", "h1": "Explained: Deep Learning in Tensorflow \u2014 Chapter 1", "description": "A Series titled \u201cExplained\u201d having several chapters for Deep Learning"}, "outgoing_paragraph_urls": [{"url": "http://tensorboard.dev/", "anchor_text": "TensorBoard", "paragraph_index": 1}, {"url": "https://tfhub.dev/", "anchor_text": "Tensorflow Hub", "paragraph_index": 1}, {"url": "https://www.tensorflow.org/tfx/serving/serving_basic", "anchor_text": "Tensorflow Serving", "paragraph_index": 1}, {"url": "https://medium.com/analytics-vidhya/understanding-the-search-query-part-ii-44d18892283f", "anchor_text": "More details on TF Serving", "paragraph_index": 1}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/", "anchor_text": "tf.keras", "paragraph_index": 2}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/layers/InputLayer", "anchor_text": "Input layer", "paragraph_index": 3}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense", "anchor_text": "Dense", "paragraph_index": 3}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/ModelCheckpoint", "anchor_text": "ModelCheckpoint", "paragraph_index": 7}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping", "anchor_text": "EarlyStopping", "paragraph_index": 8}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/TensorBoard", "anchor_text": "Tensorboard", "paragraph_index": 10}, {"url": "http://tensorboard.dev", "anchor_text": "tensorboard.dev", "paragraph_index": 12}, {"url": "https://colab.research.google.com/", "anchor_text": "google collaboratory", "paragraph_index": 12}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/regularizers/", "anchor_text": "L1 and L2 regularization", "paragraph_index": 16}, {"url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html", "anchor_text": "GridSearchCV", "paragraph_index": 18}, {"url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html", "anchor_text": "RandomizedSearchCV", "paragraph_index": 18}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/wrappers/scikit_learn/KerasRegressor", "anchor_text": "KerasRegressor", "paragraph_index": 18}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/wrappers/scikit_learn/KerasClassifier", "anchor_text": "KerasClassifier", "paragraph_index": 18}, {"url": "https://medium.com/analytics-vidhya/elmo-embedding-the-entire-intent-of-a-query-530b268c4cd", "anchor_text": "in the production use-case defined here", "paragraph_index": 22}, {"url": "https://www.tensorflow.org/guide/keras/custom_layers_and_models", "anchor_text": "here", "paragraph_index": 23}, {"url": "http://tensorflow.org/api_docs/python/tf/estimator/Estimator", "anchor_text": "tf.Estimator", "paragraph_index": 24}, {"url": "https://www.tensorflow.org/api_docs/python/tf/estimator", "anchor_text": "tf.estimator", "paragraph_index": 25}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras", "anchor_text": "tf.keras", "paragraph_index": 25}, {"url": "https://www.tensorflow.org/api_docs/python/tf/estimator/DNNClassifier", "anchor_text": "tf.estimator.DNNClassifier", "paragraph_index": 26}, {"url": "https://www.tensorflow.org/guide/data", "anchor_text": "tf.data", "paragraph_index": 27}, {"url": "https://www.tensorflow.org/api_docs/python/tf/feature_column", "anchor_text": "tf.feature_column", "paragraph_index": 27}, {"url": "https://www.tensorflow.org/api_docs/python/tf/estimator/Estimator", "anchor_text": "tf.estimator.Estimator", "paragraph_index": 28}, {"url": "https://www.tensorflow.org/api_docs/python/tf/estimator/train_and_evaluate", "anchor_text": "tf.estimator.train_and_evaluate", "paragraph_index": 28}, {"url": "https://www.tensorflow.org/api_docs/python/tf/estimator/TrainSpec", "anchor_text": "tf.estimator.TrainSpec", "paragraph_index": 28}, {"url": "https://www.tensorflow.org/api_docs/python/tf/estimator/EvalSpec", "anchor_text": "tf.estimator.EvalSpec", "paragraph_index": 28}, {"url": "https://pandas.pydata.org/", "anchor_text": "pandas", "paragraph_index": 29}, {"url": "https://www.google.com/search?q=sklearn.preprocessing&oq=sklearn.p&aqs=chrome.1.69i57j0l7.3087j0j7&sourceid=chrome&ie=UTF-8", "anchor_text": "sklearn.preprocessing", "paragraph_index": 29}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator", "anchor_text": "tf.keras.preprocessing.image.ImageDataGenerator", "paragraph_index": 29}], "all_paragraphs": ["We have talked a lot about the Feed Forward Neural Network in the last chapter. Now, we will talk about Tensorflow a bit and then, the implementation of FFNN in TensorFlow.", "Tensorflow provides high-level APIs: Keras and Estimator for creating deep learning models. Then, tf.data and other APIs for data preprocessing. At the lowest level, each Tensorflow operation is implemented using a highly efficient C++ code. Most of the time, we use high-level APIs only, but when we need more flexibility like handling the tensors directly, we can use lower-level APIs like tf.nn, tf.GradientTape(), etc. Tensorflow provides extensive libraries like TensorBoard for visualization, Tensorflow Hub for downloading and reusing pre-trained models. It also provides Tensorflow Serving where we can easily expose our models as REST API for production. More details on TF Serving.", "We will talk first about implementing FFNN in tf.keras. In Keras, we can create a model in three ways:", "It is quite easy to use and common as well for creating a linear stack of layers. It provides Input layer for taking input, Dense layer for creating a single layer of neural networks, in-built tf.losses to choose over a range of loss function to use, in-built tf.optimizers, in-built tf.activation, etc. We can create custom layers, loss-function, etc. as well, which we will see soon. Let\u2019s take the below FFNN as an example and will use for explanation:", "The code for the above using Sequential API:", "It is sometimes we need to build a neural network with more complex topologies or with multiple inputs or outputs and to serve this purpose Keras offers Function API. The code for the above network in Function API as you can see there is not much difference:", "It is not much widely used unless you need models that involve loops, conditional branching, and other dynamic behaviors. Simply subclass the Model class, create layers you need in the constructor, and use them to perform the computations you want in the overridden call() method. Code for the same network in Subclassing API:", "It is used to get the best possible weights of the model or to avoid overfitting. The fit method in tf.keras takes callbacks as an argument where it accepts a various range of callbacks even we can pass a custom callback as well by writing a method extending tf.keras.callbacks.Callback. ModelCheckpoint saves the checkpoint of the model at regular intervals during training. It can be used as below:", "One more callback called EarlyStopping used when a defined metric has stopped improving after a certain number of epochs (patience) which will optionally roll back to the best model. Sample as below:", "Both the checkpoints using together will save the checkpoints and interrupt the training early when there is no more progress.", "Tensorboard is a great visualization tool where we can see the scalars, graphs, etc for each and every run happening live during training as well. It reads binary log files called event files to project the data. The event files can be generated by writing a callback i.e. Tensorboard. It is as simple as writing a callback:", "In order to visualize it, you need to start the TensorBoard server by the following command:", "Alternatively, you can upload your event files to the tensorboard.dev and visualize online from google collaboratory:", "There is always a risk of vanishing/exploding gradients problems during the training, Batch Normalization addresses these problems. This technique involves adding operation in the model just before or after the activation function of each hidden layer. It just zero-center and normalize the inputs by estimating the input\u2019s mean and standard deviation. In the implementation, Keras learns four parameters per input per layer during the training by using the moving average of layers' input means and standard deviations. A huge improvement has been observed while using this in the ImageNet classification task. In tf.keras, we need to add a BatchNormalization layer before or after each hidden layer\u2019s activation function. Taking the above example:", "Gradient Clipping another popular technique to mitigate exploding gradient problems. This method is majorly used in RNN. It helps in clipping the every component of the gradient vector to a value between a range as provided. e.g.", "The above code will clip the partial derivatives of the loss between -1 and 1.", "We have already talked about a few of the techniques to avoid overfitting above, let\u2019s see other popular regularization techniques. L1 and L2 regularization involve adding some magnitude of weights to the cost function. Here is how we can implement:", "Dropout is another technique especially for the deep neural networks where every neuron has a probability of being temporarily dropped out or entirely ignored during the training process in a particular step but may be active during the next step, which is decided by a parameter p called as dropout rate. This dropout is not effective during the testing process. It can be used just after the dense layer. Implementation as below:", "Since the neural networks have too many hyperparameters to tweak, there is always a challenge to find the best combination of hyperparameters for a network. We can perform this task of selection manually by trying as many combinations as possible and see which one works best. Another way is to use GridSearchCV or RandomizedSearchCV. As these are the sklearn methods, we need to wrap the tf.keras models in objects that mimic regular sklearn regressors by using KerasRegressor or KerasClassifier respectively for Regression and classification task. It takes the method depicting the model using tf.keras API after which we can train the model by using its fit() method. But, our aim is to find the best hyperparameter for the tf.keras model, so we mention the hyperparameters name and it\u2019s range and pass it to the RandomizedSearchCV method as follow:", "The above exploration task may take several hours depending on the complexity of the model as well as the resources.", "Sometimes, we need to create a layer for which tf.keras has not provided the default implementation. The layer can be of two types: stateless and stateful.", "A stateless custom layer has no weights to learn just like the Flatten layer. For this purpose, we use tf.keras.layers.Lambda layer as follow:", "I have used this custom lambda layer in the production use-case defined here for generating ELMo Embedding of a particular sentence.", "A stateful custom layer has weights to train and can be implemented by extending/creating a subclass of tf.keras.layers.Layer class and overriding the call() method. Examples can be found here.", "tf.Estimator is another high-level API that provides flexibility while creating deep learning models. It is very much compatible with tf.data API where we can run a distributed multi-server environment without changing your model.", "The tf.estimator provides some capabilities currently still under development for tf.keras.", "The tf.keras model can be converted into tf.Estimator. There are several pre-made estimators where we need not create the computational graph or sessions, Estimator handles it already. The pre-made estimator for Feed-Forward Neural Network is tf.estimator.DNNClassifier.", "First, we need to preprocess our input dataset in terms of a dictionary of features having the key as feature name and value as the Tensor and the corresponding list of Tensors as labels. tf.data is used to load and preprocess the input data. Then, a tf.feature_column which identifies a feature name, its type, and any input pre-processing. Instantiate the model and pass the feature column as an argument and call the train method passing the input feature. Below is the code for creating FFNN:", "This is where we create the model as per our requirement from scratch that is not created by someone else. Here, the input should be preprocessed with the same tf.data API, but we need to instantiate tf.estimator.Estimator where we need to pass a model which is specified by a model_fn that returns ops necessary to perform training, evaluation, or predictions. That ops needs to be passed to tf.estimator.train_and_evaluate along with tf.estimator.TrainSpec and tf.estimator.EvalSpec. A sample code can be found below:", "As tf.data is a bit more popular for estimators as a great API for distributed model training in case of the very large training dataset where the whole data can\u2019t be loaded in RAM. It can read data from tensor_slices, multiple CSV files as tf.data.dataset where we can perform a lot of operation using the map, prefetch, batch, shuffle, padded_batch, repeat, etc. For the relatively small dataset, pandas, numpy and sklearn.preprocessing are great while using tf.keras. tf.keras also provides utility to preprocess the data ready for training and evaluation, like for image dataset tf.keras.preprocessing.image.ImageDataGenerator module provides flexibility where we can do data augmentation as well.", "That\u2019s all about Feed Forward Neural Network covered in two chapters. Watch this space for the next chapter 2 on RNN (Recurrent Neural Network and Attention).", "Book: Hands-on Machine Learning by Aurelien Geron", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Software Engineer Apple | Ex-Walmart Amazon| Search | Linkedin: ercsonu"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F9ab389fe90a1&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexplained-deep-learning-in-tensorflow-chapter-1-9ab389fe90a1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexplained-deep-learning-in-tensorflow-chapter-1-9ab389fe90a1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexplained-deep-learning-in-tensorflow-chapter-1-9ab389fe90a1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexplained-deep-learning-in-tensorflow-chapter-1-9ab389fe90a1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----9ab389fe90a1--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9ab389fe90a1--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://sonusharma-mnnit.medium.com/?source=post_page-----9ab389fe90a1--------------------------------", "anchor_text": ""}, {"url": "https://sonusharma-mnnit.medium.com/?source=post_page-----9ab389fe90a1--------------------------------", "anchor_text": "Sonu Sharma"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8693c110f327&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexplained-deep-learning-in-tensorflow-chapter-1-9ab389fe90a1&user=Sonu+Sharma&userId=8693c110f327&source=post_page-8693c110f327----9ab389fe90a1---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9ab389fe90a1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexplained-deep-learning-in-tensorflow-chapter-1-9ab389fe90a1&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9ab389fe90a1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexplained-deep-learning-in-tensorflow-chapter-1-9ab389fe90a1&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/tagged/all-about-deep-learning", "anchor_text": "All About Deep Learning"}, {"url": "http://tensorboard.dev/", "anchor_text": "TensorBoard"}, {"url": "https://tfhub.dev/", "anchor_text": "Tensorflow Hub"}, {"url": "https://www.tensorflow.org/tfx/serving/serving_basic", "anchor_text": "Tensorflow Serving"}, {"url": "https://medium.com/analytics-vidhya/understanding-the-search-query-part-ii-44d18892283f", "anchor_text": "More details on TF Serving"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/", "anchor_text": "tf.keras"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/Sequential", "anchor_text": "1. Sequential API"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/layers/InputLayer", "anchor_text": "Input layer"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense", "anchor_text": "Dense"}, {"url": "https://keras.io/models/model/\\", "anchor_text": "2. Function API"}, {"url": "https://www.tensorflow.org/guide/keras/custom_layers_and_models", "anchor_text": "3. SubClassing API / Custom Models"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/ModelCheckpoint", "anchor_text": "ModelCheckpoint"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping", "anchor_text": "EarlyStopping"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/TensorBoard", "anchor_text": "Tensorboard"}, {"url": "http://tensorboard.dev", "anchor_text": "tensorboard.dev"}, {"url": "https://colab.research.google.com/", "anchor_text": "google collaboratory"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/layers/BatchNormalization", "anchor_text": "BatchNormalization"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/regularizers/", "anchor_text": "L1 and L2 regularization"}, {"url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html", "anchor_text": "GridSearchCV"}, {"url": "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html", "anchor_text": "RandomizedSearchCV"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/wrappers/scikit_learn/KerasRegressor", "anchor_text": "KerasRegressor"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/wrappers/scikit_learn/KerasClassifier", "anchor_text": "KerasClassifier"}, {"url": "https://medium.com/analytics-vidhya/elmo-embedding-the-entire-intent-of-a-query-530b268c4cd", "anchor_text": "in the production use-case defined here"}, {"url": "https://www.tensorflow.org/guide/keras/custom_layers_and_models", "anchor_text": "here"}, {"url": "http://tensorflow.org/api_docs/python/tf/estimator/Estimator", "anchor_text": "tf.Estimator"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/estimator", "anchor_text": "tf.estimator"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras", "anchor_text": "tf.keras"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/estimator/DNNClassifier", "anchor_text": "tf.estimator.DNNClassifier"}, {"url": "https://www.tensorflow.org/guide/data", "anchor_text": "tf.data"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/feature_column", "anchor_text": "tf.feature_column"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/estimator/Estimator", "anchor_text": "tf.estimator.Estimator"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/estimator/train_and_evaluate", "anchor_text": "tf.estimator.train_and_evaluate"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/estimator/TrainSpec", "anchor_text": "tf.estimator.TrainSpec"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/estimator/EvalSpec", "anchor_text": "tf.estimator.EvalSpec"}, {"url": "https://pandas.pydata.org/", "anchor_text": "pandas"}, {"url": "https://www.google.com/search?q=sklearn.preprocessing&oq=sklearn.p&aqs=chrome.1.69i57j0l7.3087j0j7&sourceid=chrome&ie=UTF-8", "anchor_text": "sklearn.preprocessing"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator", "anchor_text": "tf.keras.preprocessing.image.ImageDataGenerator"}, {"url": "https://tensorflow.org", "anchor_text": "TensorFlowAn end-to-end open source machine learning platformtensorflow.org"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----9ab389fe90a1---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/deep-learning?source=post_page-----9ab389fe90a1---------------deep_learning-----------------", "anchor_text": "Deep Learning"}, {"url": "https://medium.com/tag/tensorflow?source=post_page-----9ab389fe90a1---------------tensorflow-----------------", "anchor_text": "TensorFlow"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----9ab389fe90a1---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/all-about-deep-learning?source=post_page-----9ab389fe90a1---------------all_about_deep_learning-----------------", "anchor_text": "All About Deep Learning"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9ab389fe90a1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexplained-deep-learning-in-tensorflow-chapter-1-9ab389fe90a1&user=Sonu+Sharma&userId=8693c110f327&source=-----9ab389fe90a1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9ab389fe90a1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexplained-deep-learning-in-tensorflow-chapter-1-9ab389fe90a1&user=Sonu+Sharma&userId=8693c110f327&source=-----9ab389fe90a1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9ab389fe90a1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexplained-deep-learning-in-tensorflow-chapter-1-9ab389fe90a1&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9ab389fe90a1--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F9ab389fe90a1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexplained-deep-learning-in-tensorflow-chapter-1-9ab389fe90a1&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----9ab389fe90a1---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----9ab389fe90a1--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----9ab389fe90a1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----9ab389fe90a1--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----9ab389fe90a1--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----9ab389fe90a1--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----9ab389fe90a1--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----9ab389fe90a1--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----9ab389fe90a1--------------------------------", "anchor_text": ""}, {"url": "https://sonusharma-mnnit.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://sonusharma-mnnit.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Sonu Sharma"}, {"url": "https://sonusharma-mnnit.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "651 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8693c110f327&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexplained-deep-learning-in-tensorflow-chapter-1-9ab389fe90a1&user=Sonu+Sharma&userId=8693c110f327&source=post_page-8693c110f327--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F4ada6b5fdec7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexplained-deep-learning-in-tensorflow-chapter-1-9ab389fe90a1&newsletterV3=8693c110f327&newsletterV3Id=4ada6b5fdec7&user=Sonu+Sharma&userId=8693c110f327&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}