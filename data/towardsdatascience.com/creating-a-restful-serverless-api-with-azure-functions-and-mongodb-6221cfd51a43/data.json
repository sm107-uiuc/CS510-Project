{"url": "https://towardsdatascience.com/creating-a-restful-serverless-api-with-azure-functions-and-mongodb-6221cfd51a43", "time": 1683003344.461271, "path": "towardsdatascience.com/creating-a-restful-serverless-api-with-azure-functions-and-mongodb-6221cfd51a43/", "webpage": {"metadata": {"title": "Creating a RESTful Serverless API with Azure Functions and MongoDB | by Will Velida | Towards Data Science", "h1": "Creating a RESTful Serverless API with Azure Functions and MongoDB", "description": "In this tutorial, we\u2019re going to build a Serverless API using HTTP Triggers in Azure Functions that uses a MongoDB Atlas backend. We\u2019re going to build an API for a hypothetical music library that\u2026"}, "outgoing_paragraph_urls": [{"url": "https://azure.microsoft.com/en-us/services/functions/", "anchor_text": "Azure Functions", "paragraph_index": 0}, {"url": "https://www.mongodb.com/cloud/atlas", "anchor_text": "MongoDB Atlas", "paragraph_index": 0}, {"url": "https://university.mongodb.com/", "anchor_text": "MongoDB University", "paragraph_index": 2}, {"url": "https://docs.microsoft.com/en-us/azure/azure-functions/", "anchor_text": "docs", "paragraph_index": 2}, {"url": "https://docs.mongodb.com/ecosystem/drivers/csharp/", "anchor_text": "the MongoDB Driver", "paragraph_index": 5}, {"url": "https://docs.atlas.mongodb.com/getting-started/", "anchor_text": "check out this guide.", "paragraph_index": 9}, {"url": "https://visualstudio.microsoft.com/vs/features/azure/", "anchor_text": "the Azure Development workload", "paragraph_index": 10}, {"url": "https://docs.mongodb.com/manual/reference/method/db.collection.insertOne/", "anchor_text": ".InsertOne()", "paragraph_index": 32}, {"url": "https://docs.mongodb.com/manual/reference/method/db.collection.find/", "anchor_text": ".Find()", "paragraph_index": 33}, {"url": "https://docs.mongodb.com/manual/reference/method/db.collection.find/", "anchor_text": "Find()", "paragraph_index": 34}, {"url": "https://docs.mongodb.com/manual/reference/method/db.collection.replaceOne/", "anchor_text": "ReplaceOne()", "paragraph_index": 36}, {"url": "https://docs.mongodb.com/manual/reference/method/db.collection.deleteOne/", "anchor_text": "DeleteOne()", "paragraph_index": 37}, {"url": "https://github.com/willvelida/serverless-mongodb-api", "anchor_text": "check out the code on GitHub", "paragraph_index": 52}, {"url": "https://github.com/willvelida", "anchor_text": "https://github.com/willvelida", "paragraph_index": 55}], "all_paragraphs": ["In this tutorial, we\u2019re going to build a Serverless API using HTTP Triggers in Azure Functions that uses a MongoDB Atlas backend. We\u2019re going to build an API for a hypothetical music library that stores information about Albums.", "We\u2019re going to build this API using C#, so you\u2019d need to at least understand the C# syntax to follow along. I\u2019m not going to go dive into huge detail about Azure Functions and the complexities behind MongoDB, I\u2019ll just be keeping it simple enough to demonstrate how they can all work together to make a simplistic API.", "If you want to learn more about MongoDB, I\u2019d highly recommend that you check out MongoDB University. They provide fantastic free courses for both developers and DBA\u2019s who want to learn all about MongoDB. If you like this article and want to learn more about Azure Functions, I suggest you check out the docs.", "MongoDB is a NoSQL document database that provides developers with flexibility when it comes to indexing and querying. Data is stored in JSON documents, which allows us to change data structures over time.", "MongoDB Atlas is essentially the managed service for MongoDB that we can use for our MongoDB clusters. We can host our MongoDB Atlas clusters on Azure, AWS or GCP.", "For C# development, we can use the MongoDB Driver to connect to our MongoDB cluster. It\u2019s important when using it during development to use a compatible driver with the Mongo version that your Atlas cluster is using.", "Azure Functions are small pieces of code that we can run in Azure without worrying too much about application infrastructure (this \u2018worry\u2019 varies from scenario to scenario. It really depends on the situation and your requirements).", "We can use specific events to trigger actions in our Functions. For this tutorial, we\u2019ll be triggering events based off HTTP requests.", "Set up the MongoDB Atlas Cluster", "Before we start coding, we need to set up our MongoDB Atlas cluster. The MongoDB documentation has a fantastic guide on how to set up your Atlas cluster, so if you haven\u2019t got one already, check out this guide.", "Once you\u2019ve created your cluster, let\u2019s create our Azure Function. I\u2019m going to use Visual Studio 2019 to develop my function. In order to develop Azure Functions using Visual Studio, make sure that you have the Azure Development workload enabled.", "Create a \u201cNew Project\u201d and click on \u201cAzure Functions\u201d. Like I said earlier, we\u2019re going to be doing this project in C# so make sure that\u2019s the language selected in the templates.", "Now that you\u2019ve selected the right template, give your API a name and set an easy to find location to save the project it.", "Now, we can select what type of Function that we wish to create. Since this is an API, I\u2019m going to create a Function with HTTP Triggers. When you create HTTP Trigger Functions, you can set what Storage account that the Function will use along with the Authorization level.", "We\u2019re not going to be doing anything with Authorization here, so just set it to \u201cAnonymous\u201d. A quick comment about authorization, if you create a Function with a certain level but decide you need to change it later, you can do this in the code, so don\u2019t fret about this setting too much. It\u2019s just to help Visual Studio generate a template for you.", "Click Create and congrats! You now have an Azure Function. It\u2019s not great though so let\u2019s do something about that.", "Sweet, now that we\u2019ve set up our function, let\u2019s grab our connection string to our MongoDB Atlas cluster.", "Head to your Atlas portal (if you\u2019re not there already) and sign in. Click the \u2018connect\u2019 button as seen below:", "Since we\u2019re connecting an application to our cluster, select the Connect Your Application option for our connection method:", "Now we have to select a driver version. Choose \u201cC#/.NET\u201d as the driver and \u201c2.5 or later\u201d as the version. Copy the connection string as we\u2019ll need it for later.", "Now, let\u2019s create a new class called Startup.cs. This class will allow us to use Dependency Injection in our Functions.", "In my Startup class, I\u2019m instantiating a Singleton instance of my MongoClient so all functions can use it. All we need here is to get our connection setting for our MongoDB Atlas cluster and pass it through as a string parameter.", "I\u2019ve put this actual connection string in my local.settings.json file which is picked up in the IConfiguration instance of config. It\u2019s not a good idea to hard code connection strings or settings into your code, so this is one method in your code that you can use to protect secrets needed for your application.", "Now let\u2019s set up our Album class. We\u2019re not going to do anything too amazing with this class. I\u2019ve kept it simple just to highlight a couple of things we need/can do to make this model work with the MongoDB Driver. The definition for our class is as follows:", "In this class, I\u2019ve given my Album an Id, Name, Artist, Price, ReleaseDate and Genre. Real simple. The two things I want to highlight here are the Id property and the AlbumName property.", "For the Id property, I\u2019ve assigned this property to be our ObjectId. This acts as the Primary Key for our MongoDB Document. The MongoDB Driver will generate this for us.", "For the AlbumName property, I\u2019ve decorated the property as a BsonElement called Name. This is what the property will be called in our document when it\u2019s persisted to MongoDB.", "We\u2019ve got pretty much everything we need to make our RESTful API, so let\u2019s start building it. For all our functions, I\u2019ve created a constructor that takes in the following parameters which will help inject our dependencies:", "I\u2019ve also created a IMongoCollection<Album> so we can work with our Album collection within our MongoDB database.", "For all our functions, so we get an Exception, I\u2019ve just logged the exception message and set our IActionResult returnValue to throw a 500 error response. Nothing complex, but simple enough for this example.", "Now let\u2019s dive into each function \ud83d\ude0a", "In this function, we pass through a request of type HttpRequest and read the body of that request. I\u2019ve used Newtonsoft.Json to deserialize my request into my Album object and I\u2019m creating a new album object with the values of our input.", "I\u2019m then using the .InsertOne() method to insert our new Album object into our MongoDB and setting my return value to a new OkObjectResult with our album object.", "In this function, I\u2019m passing through an id that will represent the id of our document. Within our try/catch statement, I\u2019ll attempt to find the album document with that id using the .Find() method on our MongoCollection and return it to the user. If we can\u2019t find it, we\u2019ll send a log message saying we can\u2019t find it and throw a 404.", "In these functions, all we\u2019re doing here is using the Find() function to find all the albums within our Album collection and return those to the user as a list. If there are albums in the collection, we\u2019ll return a 404.", "The UpdateAlbum is a little different. Here we\u2019re passing through our request body and an id. I\u2019m deserializing our body into an Album object and then setting the id that we pass through to our updatedResult item.", "I use the ReplaceOne() method to do two things. Firstly, use the id to find the album in our collection with that id and then secondly, I pass through our updatedResult Album object to replace the existing item. If we can\u2019t find this item, I\u2019ll throw a 404.", "In our DeleteAlbum function, again we pass through the id of the document that we wish to delete and use the DeleteOne() function to find the album that has that id and then delete it.", "All our methods are in place, so we can now start testing our API using Postman. Let\u2019s test each one of our functions in turn. Press F5 in Visual Studio to start our Function.", "It shouldn\u2019t take too long, but once it has finished, you should be given some URL\u2019s for each Function like so:", "Keep this console window open as these URL\u2019s are mapped to each function and we\u2019ll need to use these to trigger our Functions.", "For our CreateAlbum function, we\u2019ll need to send the following JSON payload to insert an Album into our collection. This is the payload that I\u2019ve sent:", "Paste the URL into the textbox and make sure the type is set to POST. Click \u201cSend \u201dand we should get the following response:", "Looks like it worked! Head back to your Atlas cluster, navigate to your Albums collections and click \u201cFind\u201d. We should be able to see the inserted documents with the values that we sent as part of our JSON payload.", "Let\u2019s attempt to read the item that we\u2019ve just created! Copy and paste the _id field of the item and then use it as the id paramter in our GetAlbum URL. Change the request type to GET and click \u201cSend\u201d.", "As you can see, we should see the document of the created album returned to us in the body.", "After a quick look on Wikipedia, this album covers a few more genres so we need to update our document. Using the same id, change the request type to PUT and update the body like so:", "Click \u201cSend \u201dto update our document:", "Head to your collection in Atlas and click \u201cFind\u201d. We should see the updated document persisted in MongoDB.", "Now let\u2019s test our Function to see if we can delete documents. Use the Id as the id parameter and set the request type to DELETE. Click \u201cSend \u201dto delete the document.", "Head back to Atlas and click \u201cFind \u201dagain. If it worked, the document should be deleted from our Album collection.", "In this tutorial, we learnt how we can build a really simple API using Azure Functions that uses MongoDB as a datastore. While this was a very simple project to do, hopefully, this tutorial has given you some ideas as to how you can use MongoDB in your Azure Functions.", "If you want to see the whole sample, check out the code on GitHub!", "If you have any questions, please let me know in the comment section below!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Customer Engineer at Microsoft working in the Fast Track for Azure team. GitHub: https://github.com/willvelida"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F6221cfd51a43&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-restful-serverless-api-with-azure-functions-and-mongodb-6221cfd51a43&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-restful-serverless-api-with-azure-functions-and-mongodb-6221cfd51a43&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-restful-serverless-api-with-azure-functions-and-mongodb-6221cfd51a43&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-restful-serverless-api-with-azure-functions-and-mongodb-6221cfd51a43&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----6221cfd51a43--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----6221cfd51a43--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://willvelida.medium.com/?source=post_page-----6221cfd51a43--------------------------------", "anchor_text": ""}, {"url": "https://willvelida.medium.com/?source=post_page-----6221cfd51a43--------------------------------", "anchor_text": "Will Velida"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F47ee50278c96&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-restful-serverless-api-with-azure-functions-and-mongodb-6221cfd51a43&user=Will+Velida&userId=47ee50278c96&source=post_page-47ee50278c96----6221cfd51a43---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6221cfd51a43&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-restful-serverless-api-with-azure-functions-and-mongodb-6221cfd51a43&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6221cfd51a43&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-restful-serverless-api-with-azure-functions-and-mongodb-6221cfd51a43&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://azure.microsoft.com/en-us/services/functions/", "anchor_text": "Azure Functions"}, {"url": "https://www.mongodb.com/cloud/atlas", "anchor_text": "MongoDB Atlas"}, {"url": "https://university.mongodb.com/", "anchor_text": "MongoDB University"}, {"url": "https://docs.microsoft.com/en-us/azure/azure-functions/", "anchor_text": "docs"}, {"url": "https://docs.mongodb.com/ecosystem/drivers/csharp/", "anchor_text": "the MongoDB Driver"}, {"url": "https://docs.atlas.mongodb.com/getting-started/", "anchor_text": "check out this guide."}, {"url": "https://visualstudio.microsoft.com/vs/features/azure/", "anchor_text": "the Azure Development workload"}, {"url": "https://docs.mongodb.com/manual/reference/method/db.collection.insertOne/", "anchor_text": ".InsertOne()"}, {"url": "https://docs.mongodb.com/manual/reference/method/db.collection.find/", "anchor_text": ".Find()"}, {"url": "https://docs.mongodb.com/manual/reference/method/db.collection.find/", "anchor_text": "Find()"}, {"url": "https://docs.mongodb.com/manual/reference/method/db.collection.replaceOne/", "anchor_text": "ReplaceOne()"}, {"url": "https://docs.mongodb.com/manual/reference/method/db.collection.deleteOne/", "anchor_text": "DeleteOne()"}, {"url": "https://github.com/willvelida/serverless-mongodb-api", "anchor_text": "check out the code on GitHub"}, {"url": "https://medium.com/tag/software-development?source=post_page-----6221cfd51a43---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/mongodb?source=post_page-----6221cfd51a43---------------mongodb-----------------", "anchor_text": "Mongodb"}, {"url": "https://medium.com/tag/nosql?source=post_page-----6221cfd51a43---------------nosql-----------------", "anchor_text": "NoSQL"}, {"url": "https://medium.com/tag/dotnet?source=post_page-----6221cfd51a43---------------dotnet-----------------", "anchor_text": "Dotnet"}, {"url": "https://medium.com/tag/azure?source=post_page-----6221cfd51a43---------------azure-----------------", "anchor_text": "Azure"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6221cfd51a43&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-restful-serverless-api-with-azure-functions-and-mongodb-6221cfd51a43&user=Will+Velida&userId=47ee50278c96&source=-----6221cfd51a43---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6221cfd51a43&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-restful-serverless-api-with-azure-functions-and-mongodb-6221cfd51a43&user=Will+Velida&userId=47ee50278c96&source=-----6221cfd51a43---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6221cfd51a43&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-restful-serverless-api-with-azure-functions-and-mongodb-6221cfd51a43&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----6221cfd51a43--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F6221cfd51a43&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-restful-serverless-api-with-azure-functions-and-mongodb-6221cfd51a43&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----6221cfd51a43---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----6221cfd51a43--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----6221cfd51a43--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----6221cfd51a43--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----6221cfd51a43--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----6221cfd51a43--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----6221cfd51a43--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----6221cfd51a43--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----6221cfd51a43--------------------------------", "anchor_text": ""}, {"url": "https://willvelida.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://willvelida.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Will Velida"}, {"url": "https://willvelida.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "542 Followers"}, {"url": "https://github.com/willvelida", "anchor_text": "https://github.com/willvelida"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F47ee50278c96&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-restful-serverless-api-with-azure-functions-and-mongodb-6221cfd51a43&user=Will+Velida&userId=47ee50278c96&source=post_page-47ee50278c96--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F8da54f101bbd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-restful-serverless-api-with-azure-functions-and-mongodb-6221cfd51a43&newsletterV3=47ee50278c96&newsletterV3Id=8da54f101bbd&user=Will+Velida&userId=47ee50278c96&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}