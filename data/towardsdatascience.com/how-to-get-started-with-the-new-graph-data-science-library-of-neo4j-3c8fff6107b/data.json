{"url": "https://towardsdatascience.com/how-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b", "time": 1683015890.4101949, "path": "towardsdatascience.com/how-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b/", "webpage": {"metadata": {"title": "How to get started with the Graph Data Science Library of Neo4j | by CJ Sullivan | Towards Data Science", "h1": "How to get started with the Graph Data Science Library of Neo4j", "description": "The field of graph analytics has been around for a long time. The general idea is to create a database of things connecting to other things. Those things might be people connecting to other people on\u2026"}, "outgoing_paragraph_urls": [{"url": "http://neo4j.com", "anchor_text": "Neo4j", "paragraph_index": 1}, {"url": "https://en.wikipedia.org/wiki/Cypher_(query_language)", "anchor_text": "Cypher query language", "paragraph_index": 1}, {"url": "https://neo4j.com/docs/graph-data-science/current/", "anchor_text": "Neo4j Graph Data Science Library", "paragraph_index": 1}, {"url": "https://neo4j.com/developer/graph-data-science/graph-algorithms/", "anchor_text": "Neo4j Graph Algorithms library", "paragraph_index": 1}, {"url": "https://neo4j.com/download-center/?ref=web-product-database/#community", "anchor_text": "here.", "paragraph_index": 2}, {"url": "https://github.com/mathbeveridge/gameofthrones", "anchor_text": "this repo", "paragraph_index": 8}, {"url": "https://en.wikipedia.org/wiki/Louvain_method", "anchor_text": "Louvain clustering", "paragraph_index": 30}, {"url": "https://neo4j.com/lp/book-graph-algorithms/?utm_source=google&utm_medium=cpc&utm_campaign=na-search-graph-algorithms&utm_adgroup=graph-algorithms&gclid=Cj0KCQjwufn8BRCwARIsAKzP697HaYt3oOY7a3XV-y1NeqJdjIFSRrKUhd7J95k0KANvkdi2Shv2dz4aAkEREALw_wcB", "anchor_text": "Graph Algorithms: Practical Examples in Apache Spark and Neo4j", "paragraph_index": 33}], "all_paragraphs": ["The field of graph analytics has been around for a long time. The general idea is to create a database of things connecting to other things. Those things might be people connecting to other people on social media or maybe flights between cities or any number of other examples. Graphs are regularly used to enhance search capabilities, recommend products to shoppers on e-commerce sites, detect fraud, or to map the shortest route from point A to point B.", "Neo4j has long been a key player in the world of graph databases. It historically uses the Cypher query language to interact with the database. There are many primers out there on how to analyze graphs or use Cypher. This post, instead, means to provide an introduction to how to achieve tasks in data science using the new Neo4j Graph Data Science Library (GDS)\u00b9, which represents a significant enhancement to the original Neo4j Graph Algorithms library (now deprecated). There are some fundamental shifts from Graph Algorithms to GDS, but for those who have used the former once you get the hang of the new modalities of usage it will become second nature. For the purposes of this writeup, it is not necessary to have used either to get started on solving graph problems with data science approaches.", "We will be starting with the premise that you have a running Neo4j server. If you don\u2019t already have this, you can download the open source Community Edition here. It is important to note that in order to have access to the GDS library you will want to download a version of v4 of Neo4j. The current version is always the best and offers the latest functionality of GDS (and they are always adding great new features!).", "Once you have the Neo4j server up and running, you will need to have some graph data with which to populate it. While there are some sample graphs built in to Neo4j, it can be instructive to go through how to import your own data.", "Graph data usually comes in the form of edge lists and node lists, which are typically separate files. Neo4j makes importing these files easy when they are in .csv format and we will discuss one of the easiest formats to import. Let\u2019s talk about each of these files separately.", "Node lists: in this .csv file we provide the information about the nodes \u2014 their labels. There can be many types of labels, or you can provide just a generic node ID. These labels will be used as the identifiers in node1 and node2 above. There can be any number of labels associated with a node. Good choices are things like a unique identifier, the name of the known (if known), and the generic type of the node (think of things like \u201cthis node is a person\u201d or \u201cthis node is a place,\u201d which could be used to give a node type like \u201cperson\u201d or \u201cplace\u201d). The format would look something like", "Edge lists: in this .csv file you have the information about which nodes connect to which other nodes. It also can specify the type of relationship. So the format follows something typical like", "where node1 is the starting node, node2 is the terminating node, relationship_type specifies the edge label (optional) and weight indicates the strength of that relationship (optional).", "Note that it is generally good practice (although not required) to have a header line for each file so you can keep track of what columns are what. Once you have these files, we can get them loaded into Neo4j. For the sake of this tutorial we will be using a graph of the characters from Game of Thrones (GoT). There are several sources of graph data on GoT out there, but I particularly like the one maintained by Andrew Beveridge in this repo due to its simplicity, organization, and ease of use.", "The data is conveniently broken into .csv files for both nodes and edges, one file for each season. In this tutorial I have cloned the repo onto my local machine for reading the files, but you can also choose to read them from the web.", "WARNING!!! Graph analytics is a powerful tool and will reveal some serious spoilers of GoT as we get into it! So if you don\u2019t want the series spoiled, turn back now!", "Loading data into the database is pretty straight forward using the built in LOAD CSV command. Because we are loading .csv files from our local machine, you will want to be sure to go into the neo4j.conf file and comment out the line dbms.directories.import=import in order to allow us to load files from anywhere on your local machine. There are many ways to load .csv data into the database, and I have picked on that I find the easiest below.", "We will begin by loading in the node lists using the following command:", "(This is the command to load in the season 1 file, and you can just repeat this command to load in whichever seasons you want. I have executed this command for each of the s1 through s8 files. Head\u2019s up: the season 5 filename has a mild typo in it.)", "Using the above command, I now have a series of nodes of type Character that have properties called id and name . Note that we have loaded this file in line-by-line with Id and Label corresponding to the column names available from the header line.", "Next, we will load in the edge lists with the following command:", "(Again, we will repeat the above for each of the edge files we would like to incorporate.)", "The above command creates the relationships between the characters where the edge type is :SEASON1 . I find it convenient to give each season its own edge type to allow for exploration of changes to the graph between seasons. The edge itself is weighted by the number of times the source and target characters interact. Note that on import Neo4j considers all columns to be strings, but for our future calculations we want Neo4j to know that Weight is actually an integer, so we have to recast it as such. Also observe that we have used the format (source)-[edge_type]-(target) . Because we have no arrows in this relationship indicating direction, we have created an undirected graph. If we wanted to do otherwise, this relationship would instead look like (source)-[edge_type]->(target) .", "The creation of in-memory graphs represents a revolutionary step for Neo4j. Basically, what it allows us to do is to create different graphs or subgraphs for analysis. We can run commands on portions of the database rather than the entire database. For example, in the GoT data, we might care about calculations done on the entire graph, or we might only want to do calculations on a single season. I cannot emphasize enough how this new philosophical approach opens a lot of doors for data science and machine learning on graphs!", "We will begin by creating an in-memory graph of the entire 8 seasons. There are two main ways this can be done in GDS: using a Cypher projection or a \u201cNative\u201d projection. I will use the former here since this is a pretty straight forward set of commands and it is pretty easy to understand what is going on. Native projections are pretty fast and powerful though, but beyond the scope of this tutorial. To create the in-memory graph with a Cypher projection, we use the command", "The graph creation requires three things:", "The graph name is pretty clear. But the node and edge queries require a little explanation. For speed reasons, Neo4j works on node IDs and not the actual node information. Typically these IDs tend to not map to anything other than a set of integers not related to any node or edge labels we have. But when you see id(n), this is how GDS is actually relating to that data. We obtain these IDs in the node query and then return them back in the edge query.", "Now we have a graph that we can do some math on. One of the more basic things we could do is to calculate the PageRank of every character in the graph. We can view and use these results in one of two different ways. In order to understand the difference, we consider that the bulk of GDS functions can call either the stream or write methods. The former outputs the results of the calculation to the screen. For example, to calculate PageRank on this graph and output it to the screen, we would do", "(I am just using the default values for maxIterations and dampingFactor .) Note that we are working with the node IDs from before where we convert these from their respective IDs through the gds.util.asNode(nodeId) commands to properties we recognize, like id and name .", "If we were to do this on the graph of all 8 seasons, we would find some unsurprising results. The five characters with the highest PageRank across all seasons are, in order, Tyrion, Jon, Daenerys, Cersei, and Sansa. (Don\u2019t worry\u2026Arya is #6.)", "This result is unsurprising and maybe we want to actually use it as a node property for future analyses outside of the in-memory graph. To do this, we want to use the write method, which will take the results of the calculation and write them as properties to the nodes. To do that, we do", "We can now do a simple MATCH (c:Character RETURN c.name ORDER BY c.full_pagerank DESC to see the same result as above. However, we can see that in this case the PageRank has been added as a node property called full_pagerank.", "This is interesting, but if we know anything about GoT we would expect PageRank to change with each season as characters gain and lose prominence or, well, die. To explore this theory, I am going to create two additional in-memory graphs \u2014 one for season 1 and one for season 8. For season 1, this would look something like", "and season 8 would be similar. You can check that the graphs made it in with CALL gds.graph.list() .", "Now, if I run the same PageRank calculation for season 1, I get that Ned, Tyrion, Catelyn, Jon, and Daenerys are the top 5 most influential characters. Repeating this then for season 8, I get that the top 5 are Tyrion, Jon, Daenerys, Jaime, and Sansa. Again, if you know the show, none of this is really surprising.", "One powerful tool included in the GDS Library is the ability to run Louvain clustering on in-memory graphs. To do this on the full graph of all 8 seasons and write the calculated community as a property to each node, we would run", "(Note that you will not get great modularity in doing this, but tuning the parameters for Louvain is beyond the scope of this tutorial.) If I want to get the detected community for all 8 seasons for Tyrion, we would start by getting that ID value (MATCH (c:Character {name: \u2018Tyrion\u2019}) RETURN c.name, c.full_community_id which gave me community 143, but yours will likely be different) and then finding the top PageRank characters within the same community. In my case, I would do MATCH (c:Character {full_community_id: 143}) RETURN c.name, c.full_community_id ORDER BY c.full_pagerank DESC and I would get the 5 most influential characters in Tyrion\u2019s life across all 8 seasons are Cersei, Jaime, Varys, Joffrey, and Tywin. Not surprising. I leave it as an exercise for the reader to explore other characters or look at how the detected communities change by season.", "I have really been impressed by the Neo4j move from basic querying to a formalized treatments of graphs that enable data science and machine learning. There is a lot of power here, and I have only scratched the surface in this tutorial. I hope to write others in the future discussing things like Native projections and the whole host of possibilities provided by the vector embeddings of node2vec and GraphSAGE that have moved out of alpha release in the more recent versions of the GDS Library.", "[1] M. Needham and A. Hodler, Graph Algorithms: Practical Examples in Apache Spark and Neo4j (2020), O\u2019Reilly Media.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Director of Data Science at Vail Resorts. Formerly Data Science Advocate at Neo4j, Machine Learning Engineer at GitHub."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F3c8fff6107b&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----3c8fff6107b--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----3c8fff6107b--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@cj2001?source=post_page-----3c8fff6107b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@cj2001?source=post_page-----3c8fff6107b--------------------------------", "anchor_text": "CJ Sullivan"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa9bc11f7a61b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b&user=CJ+Sullivan&userId=a9bc11f7a61b&source=post_page-a9bc11f7a61b----3c8fff6107b---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3c8fff6107b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3c8fff6107b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/tagged/getting-started", "anchor_text": "Getting Started"}, {"url": "https://creativecommons.org/licenses/by-sa/4.0", "anchor_text": "https://creativecommons.org/licenses/by-sa/4.0"}, {"url": "http://neo4j.com", "anchor_text": "Neo4j"}, {"url": "https://en.wikipedia.org/wiki/Cypher_(query_language)", "anchor_text": "Cypher query language"}, {"url": "https://neo4j.com/docs/graph-data-science/current/", "anchor_text": "Neo4j Graph Data Science Library"}, {"url": "https://neo4j.com/developer/graph-data-science/graph-algorithms/", "anchor_text": "Neo4j Graph Algorithms library"}, {"url": "https://neo4j.com/download-center/?ref=web-product-database/#community", "anchor_text": "here."}, {"url": "https://github.com/mathbeveridge/gameofthrones", "anchor_text": "this repo"}, {"url": "https://en.wikipedia.org/wiki/Louvain_method", "anchor_text": "Louvain clustering"}, {"url": "https://neo4j.com/lp/book-graph-algorithms/?utm_source=google&utm_medium=cpc&utm_campaign=na-search-graph-algorithms&utm_adgroup=graph-algorithms&gclid=Cj0KCQjwufn8BRCwARIsAKzP697HaYt3oOY7a3XV-y1NeqJdjIFSRrKUhd7J95k0KANvkdi2Shv2dz4aAkEREALw_wcB", "anchor_text": "Graph Algorithms: Practical Examples in Apache Spark and Neo4j"}, {"url": "https://medium.com/tag/graph-analytics?source=post_page-----3c8fff6107b---------------graph_analytics-----------------", "anchor_text": "Graph Analytics"}, {"url": "https://medium.com/tag/social-graph-analytics?source=post_page-----3c8fff6107b---------------social_graph_analytics-----------------", "anchor_text": "Social Graph Analytics"}, {"url": "https://medium.com/tag/data-science?source=post_page-----3c8fff6107b---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----3c8fff6107b---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/getting-started?source=post_page-----3c8fff6107b---------------getting_started-----------------", "anchor_text": "Getting Started"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3c8fff6107b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b&user=CJ+Sullivan&userId=a9bc11f7a61b&source=-----3c8fff6107b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3c8fff6107b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b&user=CJ+Sullivan&userId=a9bc11f7a61b&source=-----3c8fff6107b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3c8fff6107b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----3c8fff6107b--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F3c8fff6107b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----3c8fff6107b---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----3c8fff6107b--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----3c8fff6107b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----3c8fff6107b--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----3c8fff6107b--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----3c8fff6107b--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----3c8fff6107b--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----3c8fff6107b--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----3c8fff6107b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@cj2001?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@cj2001?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "CJ Sullivan"}, {"url": "https://medium.com/@cj2001/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "895 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa9bc11f7a61b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b&user=CJ+Sullivan&userId=a9bc11f7a61b&source=post_page-a9bc11f7a61b--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F4a60199f6d71&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b&newsletterV3=a9bc11f7a61b&newsletterV3Id=4a60199f6d71&user=CJ+Sullivan&userId=a9bc11f7a61b&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}