{"url": "https://towardsdatascience.com/level-up-your-code-with-python-decorators-c1966d78607", "time": 1683008756.9550111, "path": "towardsdatascience.com/level-up-your-code-with-python-decorators-c1966d78607/", "webpage": {"metadata": {"title": "Level up your code with Python decorators | by Alexander Bailey | Towards Data Science", "h1": "Level up your code with Python decorators", "description": "There comes a point in every Python user\u2019s life where you can level up from writing good code, to great code. Once you\u2019ve mastered core Python functionality like list comprehensions and ternary\u2026"}, "outgoing_paragraph_urls": [{"url": "https://flask.palletsprojects.com/en/1.1.x/", "anchor_text": "flask app", "paragraph_index": 3}, {"url": "https://click.palletsprojects.com/en/7.x/", "anchor_text": "click CLI", "paragraph_index": 3}], "all_paragraphs": ["There comes a point in every Python user\u2019s life where you can level up from writing good code, to great code.", "Once you\u2019ve mastered core Python functionality like list comprehensions and ternary operators, you should be ready to write more readable Python. Decorators are key to upgrading your code\u2019s readability, and here we\u2019ll cover the basics of them, as well as 3 ways to use them.", "In short, decorators are functions that wrap other functions. If there\u2019s something that you want at the start and end of a function, then decorators are here to make your life a lot easier.", "Decorators can be spotted as an @ sign before a function definition. You might have spotted them in a flask app or a click CLI but the easiest way to explain how they work, is to work through a short example.", "So let\u2019s say at the start of the function we want to print \u201cStarted\u2019\u2019 and at the end we want to print \u201cFinished\u2019\u2019. To achieve this we could do the following:", "This method works, but now our code is cluttered with print statements. The actual meat of the function could be written in just a single line but instead we\u2019ve used three! So let\u2019s make this clearer by making a new function that contains the main ingredient of our operation, and another containing just the print statements:", "At first glance you could argue this looks no clearer, as we have more code than before. At second glance you might notice that the code is much more readable from our additions. Our work here isn\u2019t done however, what if we wanted to get more out of our code?", "Let\u2019s say for example that we want to print before and after other functions too. As lazy data scientists, we don\u2019t want to write the same line of code more than once, so let\u2019s try to generalise the code we already have. We can do this with this new printer function.", "So what does the printer function do here?", "The beauty of this function is that it constructs a new function by taking our original function and adding it to the print statements before and after the passed function is executed. Now printer returns the new function handle, allowing us to take any arbitrary function and return it with print statements.", "This is where the Python decorator really comes into it\u2019s own. Now we\u2019ve written the printer function to return a modified version of our original function, all we need to do is prepend the function definition with @printer :", "Even in this simple example, when you compare the use of the printer decorator with the code we wrote at the beginning, our code is much more legible.", "There are a few nifty tricks of the trade for decorators that you can use to make your code easier to understand and read.", "For the first example, we need to write a small function to set up logging in our script:", "Now we can write our new logging decorator:", "This is slightly more complicated that the printer decorator we looked at before. This time, we wanted to build a decorator that can take an argument (the name of the logger).", "However the decorator function can only take one argument, so we wrap this function in another that can take many arguments. It takes a while to wrap your head around this inception-like function wrapping, but once you do it\u2019s an invaluable tool in the data scientist\u2019s tool-box.", "Now this is a controversial one, so hold on to your hats we could be in for a bumpy ride\u2026", "Some will say that this decorator type checks a function\u2019s inputs in a way that many would consider to be \u201cun-Pythonic\u201d. Python is a dynamically-typed language, so at the risk of ruffling too many feathers, it is important to note that in general when writing Python we should beg for forgiveness rather than ask permission.", "However if you\u2019re willing to be a little bit cheeky with the laws of Python, then you\u2019ll find this a really handy tool, especially when developing code. It makes it crystal clear when identifying wrong types that are being passed around.", "With that all in mind, here\u2019s the code:", "So now we\u2019ve ensured that the inputs to the circle_area function will only accept type ints or floats, otherwise it will raise an AssertionError.", "For this example, let\u2019s assume we\u2019re trying to access data from an API but the API only allows for a given number of requests per minute. We can write a decorator that wraps the API call and will continue to try and get the data until it\u2019s successful.", "We can use this decorator each time we request data from the api module. The decorator will keep trying until it gets the data or it hits the maximum number of allowed retries, if that\u2019s the case, a RuntimeError will be raised.", "Equally, a very similar version of this function could be used to arbitrarily catch different exceptions and deal with them in different ways. I\u2019ll leave it up to the imagine of the reader to think about new ways to use this type of decorator.", "Hopefully you now have a better idea of what a Python decorator is and feel confident using it in your codebase (if not, then I\u2019ve failed you\u2026).", "The key take away here is that if you have a function that frequently occurs at the start and end of another function, then a decorator will be your new best friend. Decorators are going to help your code to be not only more readable, but also more modular and reusable.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Scientist trying to learn something new"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fc1966d78607&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flevel-up-your-code-with-python-decorators-c1966d78607&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flevel-up-your-code-with-python-decorators-c1966d78607&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flevel-up-your-code-with-python-decorators-c1966d78607&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flevel-up-your-code-with-python-decorators-c1966d78607&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----c1966d78607--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c1966d78607--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@alexanderbailey?source=post_page-----c1966d78607--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@alexanderbailey?source=post_page-----c1966d78607--------------------------------", "anchor_text": "Alexander Bailey"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdb3e72c9d461&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flevel-up-your-code-with-python-decorators-c1966d78607&user=Alexander+Bailey&userId=db3e72c9d461&source=post_page-db3e72c9d461----c1966d78607---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc1966d78607&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flevel-up-your-code-with-python-decorators-c1966d78607&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc1966d78607&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flevel-up-your-code-with-python-decorators-c1966d78607&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.pexels.com/photo/brush-painting-the-white-wall-6368/", "anchor_text": "kaboompics"}, {"url": "https://flask.palletsprojects.com/en/1.1.x/", "anchor_text": "flask app"}, {"url": "https://click.palletsprojects.com/en/7.x/", "anchor_text": "click CLI"}, {"url": "https://medium.com/tag/programming?source=post_page-----c1966d78607---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-science?source=post_page-----c1966d78607---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/python?source=post_page-----c1966d78607---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----c1966d78607---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc1966d78607&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flevel-up-your-code-with-python-decorators-c1966d78607&user=Alexander+Bailey&userId=db3e72c9d461&source=-----c1966d78607---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc1966d78607&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flevel-up-your-code-with-python-decorators-c1966d78607&user=Alexander+Bailey&userId=db3e72c9d461&source=-----c1966d78607---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc1966d78607&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flevel-up-your-code-with-python-decorators-c1966d78607&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c1966d78607--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fc1966d78607&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flevel-up-your-code-with-python-decorators-c1966d78607&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----c1966d78607---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----c1966d78607--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----c1966d78607--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----c1966d78607--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----c1966d78607--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----c1966d78607--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----c1966d78607--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----c1966d78607--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----c1966d78607--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@alexanderbailey?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@alexanderbailey?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Alexander Bailey"}, {"url": "https://medium.com/@alexanderbailey/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "156 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdb3e72c9d461&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flevel-up-your-code-with-python-decorators-c1966d78607&user=Alexander+Bailey&userId=db3e72c9d461&source=post_page-db3e72c9d461--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff756d91c4fbd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flevel-up-your-code-with-python-decorators-c1966d78607&newsletterV3=db3e72c9d461&newsletterV3Id=f756d91c4fbd&user=Alexander+Bailey&userId=db3e72c9d461&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}