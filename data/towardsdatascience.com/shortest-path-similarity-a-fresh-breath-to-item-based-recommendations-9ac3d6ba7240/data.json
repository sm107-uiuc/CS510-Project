{"url": "https://towardsdatascience.com/shortest-path-similarity-a-fresh-breath-to-item-based-recommendations-9ac3d6ba7240", "time": 1682995643.485457, "path": "towardsdatascience.com/shortest-path-similarity-a-fresh-breath-to-item-based-recommendations-9ac3d6ba7240/", "webpage": {"metadata": {"title": "Shortest Path Similarity: A Fresh Breath to Item-based Recommendations | by Gregory Arefyev | Towards Data Science", "h1": "Shortest Path Similarity: A Fresh Breath to Item-based Recommendations", "description": "The goal of any recommendation system is to keep consumers engaged. News websites want a reader to read more news, video hostings want a watcher to watch more videos, online stores want a buyer to\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/grinya007/sp_i2i", "anchor_text": "script", "paragraph_index": 6}, {"url": "http://files.grouplens.org/datasets/movielens/ml-latest-small-README.html", "anchor_text": "MovieLens latest small", "paragraph_index": 6}, {"url": "https://en.wikipedia.org/wiki/Euclidean_vector#Dot_product", "anchor_text": "Euclidean dot product", "paragraph_index": 10}, {"url": "https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#Using_a_priority_queue", "anchor_text": "Dijkstra\u2019s algorithm with a priority queue", "paragraph_index": 19}, {"url": "https://recom.live/", "anchor_text": "https://recom.live", "paragraph_index": 22}], "all_paragraphs": ["The goal of any recommendation system is to keep consumers engaged. News websites want a reader to read more news, video hostings want a watcher to watch more videos, online stores want a buyer to buy more stuff and so forth. In this respect, a common approach is to find items, similar to what a consumer has just read/watched/bought, and suggest them as the next items to take into consideration. This type of recommendation is usually called item-based and this is what I\u2019m going to tackle.", "There\u2019s quite a steady recipe for a recommendation system, established over the past decade. In short, it reads as follows:", "My proposal is to set up paragraph 1a into the list. That is, there\u2019s an alternative to conventional collaborative filtering: Shortest path similarity algorithm.", "First of all, it doesn\u2019t suffer the cold-start problem. That is, in a situation when there\u2019s a new movie out and we know of ten people who rated the latter, also we know of twenty other movies rated by these ten people: our Cosine similarity algorithm has twenty movies to choose from for recommendations to the new one. Not much, really, especially given that ratings are not necessarily equal, which means, these twenty movies are unlikely to be similar. Whilst, Shortest path will traverse this graph as deep as you want it to, and will likely have more to put on the table, and most of these nearest twenty movies may appear to be ranked below some more distant but more relevant ones.", "Second of all, in applications, where similarity is necessary but not sufficient for the relevance, the Shortest path produces more logical recommendations. Many things we do in our lives have a causal relationship. One wouldn\u2019t make himself a coffee when he had not been going to drink it, right? We wouldn\u2019t watch the third episode of True Detective after we had watched the first, but not the second. What does the Cosine similarity algorithm know of these three episodes after examination of the user\u2019s ratings? They are nearly equally similar to each other. There\u2019s no clue to guess the order. Whilst, Shortest path does account for the order of happenings. Whenever you define the user\u2019s rating right (e.g. set up: watched entire episode: positive, stopped watching in the middle: negative, plus disregard stars, likes and others of the kind), the Shortest path predicts most probable sequence with no sweat.", "However, I don\u2019t mean to say there\u2019s something wrong with the Cosine similarity algorithm itself. It works great when you match a document against learned feature matrix to find similar documents (e.g. a search query against TFIDF matrix). Its common problem is a misapplication, Cosine similarity isn\u2019t quite suitable when used as a standalone recommendation algorithm on, for example, video hostings and news websites, where the similarity of articles doesn\u2019t necessarily convert into a high probability of click.", "Please check out the script that enables you to compare recommendations by Cosine similarity and Shortest path similarity side by side. The script is written in Python and contains a detailed explanation of implementation aspects. Recommendations are based upon MovieLens latest small dataset. Sample output looks as follows:", "Let me try to explain how it all works. Consider the following graph of five movies, that are being evaluated by five users:", "where each user gave a rating as shown in the table:", "Let\u2019s apply Cosine similarity to the given input. Actually, we only need the second figure. Let theta be the angle between vectors M1 and M2. To find the cosine of that angle we use this formula:", "derived from the formula for Euclidean dot product. Note that n = 3 in this case, we can\u2019t take into account ratings, given by U2 and U3, as their ratings for M1 are unknown. What we get is:", "Wow, looks like they\u2019re very similar, although, everything is relative. Let\u2019s see all the similarities:", "Look, M5 happens to be even more similar. Note that in real application it\u2019s always better to normalize input values (e.g. scale them proportionally so that they fall between 0 and 1). In this particular case, normalization wouldn\u2019t make any difference in ranking, but when a difference between values of similarity is getting closer to the precision limit of the floating point number, normalization comes in handy.", "Ok, so now we have some results. But not all 5 movies have gotten 4 recommendations, even though the sparsity of the input matrix isn\u2019t that high. This is what\u2019s usually called the cold-start problem, also known as the sparsity problem. Cosine similarity demands more data not only to produce better recommendations but to produce recommendations at all.", "There\u2019s another concern, which isn\u2019t that evident as the former. Similarities are mirrored. Meaning that, for instance, sim(M1-M2) = sim(M2-M1). Well, it sounds logical, as this is the similarity. But we\u2019re trying to make up recommendations in the first place. Imagine that M1 is \u201cBack to the Future\u201d and M2 is \u201cBack to the Future II\u201d. While they are equally similar in both ways, are they equally relevant as recommendations to each other? Well, you might argue that of course, Marty gets back to 1955 right at the beginning of the second episode. But let me kindly ask you to scroll a little bit up, look at the first figure and follow all arrows between M1 and M2. Right, two users have chosen to go in the same direction and none went the other way around. What if this is a valid indication of inequality of the relevance? Use deep learning to sort it out would be a good answer. But there\u2019s a simpler way.", "Let\u2019s see if the Shortest path similarity algorithm can do any good in such a situation. First of all let\u2019s flatten the original graph into a table of user paths, for clarity:", "Sweet, now, since we have a graph, we can assign different lengths to its edges. In this particular case, the most logical would be to derive lengths from movie ratings. I came up with the following formula for that:", "where v and v\u2019 are connected vertices, r_iv and r_iv\u2019 are ratings, given by i-th user, w_r_i be the weight of i-th user\u2019s opinion and w_v\u2019 be the global weight of a given recommendation candidate. However, when you would want to try the Shortest path similarity on some other data, I encourage you to think thoroughly of what is the best way to compute lengths. My proposed formula isn\u2019t crucial for the Shortest path similarity algorithm and it isn\u2019t really perfect. Cosine distance could be a great option here, by the way.", "In a real-world application, weights of a user\u2019s opinion and recommendation candidate could be derived from frequencies of occurrence in the learning data set. For instance, when a user has rated a way more movies than the average, it would make sense to reduce the weight of the latter. And if a movie is way too popular, we could reduce its weight. For simplicity, in this case, with 5 movies and 5 users, I assume that all users have equal weights and all movies have equal weights. Thereby, I ended up with the following adjacency list:", "Note that this isn\u2019t a list of recommendations yet, although, each nearest vertice will inevitably become the most relevant recommendation. Now, when it\u2019s all said and done, it\u2019s time to look for the shortest path. I propose to use Dijkstra\u2019s algorithm with a priority queue, which, for M1, will work as follows:", "From M1 it will guide us towards M2, then to M4 through M2, since there\u2019s no direct flight, then to M5 through M2 and after all to M3 through M2 and M4. After entering the graph through each of its vertices we end up with the following table of recommendations:", "Note that now we have full recommendations, we can\u2019t get more out of five movies. Although, I wouldn\u2019t say this is a great achievement here since we allowed a single user to connect some of the vertices, which isn\u2019t necessarily a good idea in a real application. But what\u2019s more important, now, even though M2 is the most relevant recommendation for M1, M1, in turn, is the least relevant to M2.", "So, it\u2019s as simple as that: follow user\u2019s path, record user\u2019s opinion on each pair of documents, find out average opinion on each pair of documents to define the distance in between, use shortest path algorithm, in which record each visited document as a recommendation to the one, you\u2019ve started from and that\u2019s it. Doing so is very natural as the goal of a recommendation system is to predict the most probable sequence of documents that a user would like to consume one after the other. There\u2019s no proof of Fermat\u2019s Theorem in my proposed Shortest path similarity algorithm. All pieces of it are superficial and broadly used in software development. If you\u2019re interested in greater details or have a dataset or application in which you\u2019d like to try Shortest path similarity: please, don\u2019t hesitate to reach out. And please check out https://recom.live, a real-time recommendation system that\u2018s based upon the Shortest path similarity.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F9ac3d6ba7240&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fshortest-path-similarity-a-fresh-breath-to-item-based-recommendations-9ac3d6ba7240&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fshortest-path-similarity-a-fresh-breath-to-item-based-recommendations-9ac3d6ba7240&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fshortest-path-similarity-a-fresh-breath-to-item-based-recommendations-9ac3d6ba7240&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fshortest-path-similarity-a-fresh-breath-to-item-based-recommendations-9ac3d6ba7240&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----9ac3d6ba7240--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9ac3d6ba7240--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@gregory_7188?source=post_page-----9ac3d6ba7240--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@gregory_7188?source=post_page-----9ac3d6ba7240--------------------------------", "anchor_text": "Gregory Arefyev"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdda707b3b49f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fshortest-path-similarity-a-fresh-breath-to-item-based-recommendations-9ac3d6ba7240&user=Gregory+Arefyev&userId=dda707b3b49f&source=post_page-dda707b3b49f----9ac3d6ba7240---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9ac3d6ba7240&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fshortest-path-similarity-a-fresh-breath-to-item-based-recommendations-9ac3d6ba7240&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9ac3d6ba7240&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fshortest-path-similarity-a-fresh-breath-to-item-based-recommendations-9ac3d6ba7240&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://en.wikipedia.org/wiki/Cosine_similarity", "anchor_text": "Cosine similarity"}, {"url": "https://en.wikipedia.org/wiki/Singular_value_decomposition", "anchor_text": "SVD"}, {"url": "https://en.wikipedia.org/wiki/Deep_learning", "anchor_text": "Deep Learning"}, {"url": "https://github.com/grinya007/sp_i2i", "anchor_text": "script"}, {"url": "http://files.grouplens.org/datasets/movielens/ml-latest-small-README.html", "anchor_text": "MovieLens latest small"}, {"url": "https://en.wikipedia.org/wiki/Euclidean_vector#Dot_product", "anchor_text": "Euclidean dot product"}, {"url": "https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#Using_a_priority_queue", "anchor_text": "Dijkstra\u2019s algorithm with a priority queue"}, {"url": "https://recom.live/", "anchor_text": "https://recom.live"}, {"url": "https://medium.com/tag/recommendation-system?source=post_page-----9ac3d6ba7240---------------recommendation_system-----------------", "anchor_text": "Recommendation System"}, {"url": "https://medium.com/tag/cosine-similarity?source=post_page-----9ac3d6ba7240---------------cosine_similarity-----------------", "anchor_text": "Cosine Similarity"}, {"url": "https://medium.com/tag/graph-theory?source=post_page-----9ac3d6ba7240---------------graph_theory-----------------", "anchor_text": "Graph Theory"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----9ac3d6ba7240---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/algorithms?source=post_page-----9ac3d6ba7240---------------algorithms-----------------", "anchor_text": "Algorithms"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9ac3d6ba7240&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fshortest-path-similarity-a-fresh-breath-to-item-based-recommendations-9ac3d6ba7240&user=Gregory+Arefyev&userId=dda707b3b49f&source=-----9ac3d6ba7240---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9ac3d6ba7240&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fshortest-path-similarity-a-fresh-breath-to-item-based-recommendations-9ac3d6ba7240&user=Gregory+Arefyev&userId=dda707b3b49f&source=-----9ac3d6ba7240---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9ac3d6ba7240&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fshortest-path-similarity-a-fresh-breath-to-item-based-recommendations-9ac3d6ba7240&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9ac3d6ba7240--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F9ac3d6ba7240&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fshortest-path-similarity-a-fresh-breath-to-item-based-recommendations-9ac3d6ba7240&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----9ac3d6ba7240---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----9ac3d6ba7240--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----9ac3d6ba7240--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----9ac3d6ba7240--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----9ac3d6ba7240--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----9ac3d6ba7240--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----9ac3d6ba7240--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----9ac3d6ba7240--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----9ac3d6ba7240--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@gregory_7188?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@gregory_7188?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Gregory Arefyev"}, {"url": "https://medium.com/@gregory_7188/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "45 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdda707b3b49f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fshortest-path-similarity-a-fresh-breath-to-item-based-recommendations-9ac3d6ba7240&user=Gregory+Arefyev&userId=dda707b3b49f&source=post_page-dda707b3b49f--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2Fdda707b3b49f%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fshortest-path-similarity-a-fresh-breath-to-item-based-recommendations-9ac3d6ba7240&user=Gregory+Arefyev&userId=dda707b3b49f&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}