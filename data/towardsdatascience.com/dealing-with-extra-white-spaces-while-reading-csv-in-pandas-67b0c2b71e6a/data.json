{"url": "https://towardsdatascience.com/dealing-with-extra-white-spaces-while-reading-csv-in-pandas-67b0c2b71e6a", "time": 1683010749.815945, "path": "towardsdatascience.com/dealing-with-extra-white-spaces-while-reading-csv-in-pandas-67b0c2b71e6a/", "webpage": {"metadata": {"title": "Dealing with extra white spaces while reading CSV in Pandas | by Vaclav Dekanovsky | Towards Data Science", "h1": "Dealing with extra white spaces while reading CSV in Pandas", "description": "Why do we care about blank spaces? Build-in pandas functions, and custom handling. Creation of 1M test data and performance test."}, "outgoing_paragraph_urls": [{"url": "https://tools.ietf.org/html/rfc4180", "anchor_text": "rfc4180", "paragraph_index": 0}, {"url": "https://github.com/vaasha/Data-Analysis_in-Examples/blob/master/White%20Spaces%20In%20CSVs/Dealing_with_white_space_in_csv_pandas.ipynb", "anchor_text": "GitHub", "paragraph_index": 2}, {"url": "https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html", "anchor_text": "read_csv documentation", "paragraph_index": 15}, {"url": "https://faker.readthedocs.io/en/master/", "anchor_text": "faker documentation here", "paragraph_index": 39}, {"url": "https://github.com/vaasha/Data-Analysis_in-Examples/blob/master/White%20Spaces%20In%20CSVs/Dealing_with_white_space_in_csv_pandas.ipynb", "anchor_text": "Jupyter notebook on github", "paragraph_index": 49}], "all_paragraphs": ["My colleague says that .csv is not an essay so we don\u2019t expect any blank spaces behind the commas (or any other separators). The same opinion had the creators of rfc4180 which is commonly understood as a guideline for CSV files. Still, the are inventive developers that feed the .csv exports with unnecessary white spaces. These extra characters are not only increasing the size of our data, but they can cause much bigger trouble.", "In this article we are going to:", "As usual, you can follow the code along with me using the Jupiter notebook containing all the exercises which is downloadable from GitHub.", "String with and without blank spaces is not the same. \"ABC\" != \" ABC\" these two ABCs are not equal, but the difference is so small that you often don\u2019t notice. Without the quotes enclosing the string you hardly would ABC != ABC . But the computer programs are incorruptible in the interpretation and if these values are a merging key, you would receive an empty result.", "Blank strings, spaces, and tabs are considered as the empty values represented as NaN in Pandas on many occasions. But an indefinite number of spaces is not turned into NaN values automatically and you can get unexpected results, because for example count(NaN) = 0 while count(\" \")= 1 .", "Even though the white spaces are almost invisible, pile millions of them into the file and they will take some space. Other time they can overflow the size limit of your database column leading to an error in the better case and trimming of the final character whos places was stolen by the blank space in front.", "Let\u2019s start exploring options we have in Python\u2019s Pandas library to deal with white spaces in the CSV. As a benchmark let\u2019s simply import the .csv with blank spaces using pd.read_csv() function.", "To describe how can we deal with the white spaces, we will use a 4-row dataset (In order to test the performance of each approach, we will generate a million records and try to process it at the end of this article). Our dataset contains these columns:", "You can see that the data are containing unnecessary white spaces and our goal is to remove them as effectively as possible.", "So that we don\u2019t have to store these data into a .csv file, which we will later read, we will pass it to Pandas using io.StringIO(data).", "In order to measure how successful we are, I\u2019ll create a function df_statistics() (see below) which iterates through all the columns and calculate:", "Optionally if a dictionary with expected lengths is provided, it will compare measured lengths or sums with the expectation which I display as a row in a dataFrame. Our benchmark achieves:", "Because .read_csv() is written in C for efficiency, it\u2019s the best option in dealing with the white spaces to use parameters of this method. For this purpose there\u2019s skipinitialspace which removes all the white spaces after the delimiter.", "Because the City column contained only leading spaces, they were all removed. The last row of the Steet column was fixed as well and the row which contained only two blank spaces turned to NaN, because two spaces were removed and pandas natively represent empty space as NaN (unless specified otherwise \u2014 see below.)", "But what to do with the blank spaces at the end of the rows, between the last character or data and the delimiter. Pandas don\u2019t have any skiptrailingspaces parameter so we have to use a different approach.", "Did you know that you can use regex delimiters in pandas? read_csv documentation says:", "In addition, separators longer than 1 character and different from '\\s+' will be interpreted as regular expressions and will also force the use of the Python parsing engine. Note that regex delimiters are prone to ignoring quoted data. Regex example: '\\r\\t'.", "In our case, we can try separator sep=\"\\s*[,]\\s*\" . \\s* mean any number of blank spaces, [,] represent comma. In Jupiter notebook, you must also specify engine=\"pyhton\" , because regex separators are processed through python script, not native c-based code. Let\u2019s check the results:", "The result seems perfect. All the undesired spaces were removed (all _diff column equal to 0), and all the columns have expected datatype and length. But all that glitters is not gold.", "There was an important note in the manual saying: regex delimiters are prone to ignoring quoted data.", "Our data were not quoted. But if it was, let\u2019s say the street would have been quoted:", "Then regex separator would not only miss the blank spaces inside the quotes, but it would also consider the quotes part of the data and our number of extra spaces would even increase:", "An even worse scenario would happen if the quotes were there for a purpose, to shield a separator inside the string, in our case comma inside the street name, from being treated as a separator. \" Downing Street, London \" protected by the quotes is a valid string containing a comma, but if we use regex separator, it will think there\u2019s another separator and fail:", "So the regex separator is really not an option.", "We can still use regular expressions, but only as a second step. We will split the CSV reading into 3 steps:", "In order to easily measure the performance of such an operation, let\u2019s use a function:", "The results are finally encouraging. All the columns have expected lengths and types. But is the performance good?", "Python has a native method to remove the front and end white spaces \u2014 .strip() and we can easily use it on our data. Because it\u2019s a string operation we need to use str.strip() and it can only be applied on string columns. For that reason, we have to check if the column is having a string format.", "Again we wrap the operation into a function so that we can use it later in the performance test. As before we will turn all empty string into NaN.", "Using str.strip() on the string columns lead to the same quality of the results. It will be interesting to compare the speed of each of the methods.", "Note: Don\u2019t use df[col].apply(len) but df[col].str.len() because apply(len) fails on the NaN values which are technically floats and not strings.", "Why were we turning all the empty strings into NaNs? By default pandas consider all of these values to be NaNs:", "It has a good reason for it because NaN values behave differently than empty strings \u201c\u201d.", "But pandas only turns an empty string \"\" into NaN, not \" \" a space, two spaces, tab or similar equivalents of the empty space. That\u2019s why we have to treat any of these characters separately after the .csv was loaded into the dataFrame.", "How fast is each of the suggested approaches? We would assume that build-in methods are the fastest, but they don\u2019t fit our purpose. Let\u2019s prepare some data in order to see the real speed of the operations.", "A few lines are always processed in a glimpse of an eye, so we need a significant amount of data in order to test the performance, let\u2019s say 1 million records. For this purpose, I wanted to try python\u2019s faker library which has a quick interface to create random names, addresses, and other data.", "I\u2019m creating a list containing a million rows and 3 columns:", "The generated dataFrame has the following parameters", "Because the addresses generated by faker contain not only commas but also line break, they will be enclosed in quotes when we export them to the csv. Example address:", "There are many methods which faker offer. If you want a single line address use .street_address() for example or .street_address() + \", \" + .city() . You can study the faker documentation here.", "To be sure, we measured reasonable processing time and were not influenced by some peak use of CPU, e.g. when antivirus software runs, we will test each of the above-described methods 7 times.", "You can release this block of code for each scenario, but it\u2019s better to use the python\u2019s ability to store functions in variables and prepare a dictionary containing all the function and iterate over it.", "Each key in the dict includes a function and it\u2019s parameters \u2014 skipinitialspace, separtor, engine etc. The path of the data is always the same so we don\u2019t have to repeat it many times as a parameter.", "We will also store the processing times and calculate the statistics using df_statistics(df)", "After a few minutes when we test all our functions, we can display the results:", "The performance test confirmed what we have expected. Build-in methods beat custom algorithms. Though since they don\u2019t achieve what we want, we can use str.strip() to remove the blank spaces from the loaded dataFrame. It\u2019s approx. 50% slower than process without the stripping, but still almost 5-times faster than using the regexes.", "You might have noticed that using skipinitialspace can beat a load without any white space handling, so combining this parameter with post-processing on the loaded dataFrame can bring even better results if speed is our concern. You can run the performance test a second time to confirm that this was not an anomaly.", "White space handling is important in case our dataset is polluted with extra spaces not only to decrease the size of the data but mainly to correctly join the data with other sources and to receive expected results of the aggregation of data and NaNs.", "Pandas contain some build-in parameters which help with the most common cases. Any further processing must be done by a custom function which decreases the speed of the process. For that reason always try to agree with your data providers to produce .csv file which meat the standards.", "You can perform all the code described in this article using this Jupyter notebook on github. The test data are not included, but you can generate them through this notebook.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data scientist who loves to explore everything and write about the topics from multiple points of view."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F67b0c2b71e6a&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdealing-with-extra-white-spaces-while-reading-csv-in-pandas-67b0c2b71e6a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdealing-with-extra-white-spaces-while-reading-csv-in-pandas-67b0c2b71e6a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdealing-with-extra-white-spaces-while-reading-csv-in-pandas-67b0c2b71e6a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdealing-with-extra-white-spaces-while-reading-csv-in-pandas-67b0c2b71e6a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----67b0c2b71e6a--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----67b0c2b71e6a--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://vdekanovsky.medium.com/?source=post_page-----67b0c2b71e6a--------------------------------", "anchor_text": ""}, {"url": "https://vdekanovsky.medium.com/?source=post_page-----67b0c2b71e6a--------------------------------", "anchor_text": "Vaclav Dekanovsky"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fed473176733b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdealing-with-extra-white-spaces-while-reading-csv-in-pandas-67b0c2b71e6a&user=Vaclav+Dekanovsky&userId=ed473176733b&source=post_page-ed473176733b----67b0c2b71e6a---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F67b0c2b71e6a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdealing-with-extra-white-spaces-while-reading-csv-in-pandas-67b0c2b71e6a&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F67b0c2b71e6a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdealing-with-extra-white-spaces-while-reading-csv-in-pandas-67b0c2b71e6a&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@kellysikkema?utm_source=medium&utm_medium=referral", "anchor_text": "Kelly Sikkema"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://tools.ietf.org/html/rfc4180", "anchor_text": "rfc4180"}, {"url": "https://github.com/vaasha/Data-Analysis_in-Examples/blob/master/White%20Spaces%20In%20CSVs/Dealing_with_white_space_in_csv_pandas.ipynb", "anchor_text": "GitHub"}, {"url": "https://stackoverflow.com/questions/51460881/pandas-typeerror-object-of-type-float-has-no-len", "anchor_text": "https://stackoverflow.com/questions/51460881/pandas-typeerror-object-of-type-float-has-no-len"}, {"url": "https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html", "anchor_text": "read_csv documentation"}, {"url": "https://faker.readthedocs.io/en/master/", "anchor_text": "faker documentation here"}, {"url": "https://github.com/vaasha/Data-Analysis_in-Examples/blob/master/White%20Spaces%20In%20CSVs/Dealing_with_white_space_in_csv_pandas.ipynb", "anchor_text": "Jupyter notebook on github"}, {"url": "https://towardsdatascience.com/exploratory-data-analysis-passport-numbers-in-pandas-4ccb567115b6", "anchor_text": "Exploratory Data Analysis \u2014 Passport Numbers in PandasExploring the leading and trailing zeros, distribution of letters and numbers, common prefixes, regular expressions\u2026towardsdatascience.com"}, {"url": "https://medium.com/tag/csv?source=post_page-----67b0c2b71e6a---------------csv-----------------", "anchor_text": "Csv"}, {"url": "https://medium.com/tag/csv-file?source=post_page-----67b0c2b71e6a---------------csv_file-----------------", "anchor_text": "Csv File"}, {"url": "https://medium.com/tag/python?source=post_page-----67b0c2b71e6a---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/data-analysis?source=post_page-----67b0c2b71e6a---------------data_analysis-----------------", "anchor_text": "Data Analysis"}, {"url": "https://medium.com/tag/pandas?source=post_page-----67b0c2b71e6a---------------pandas-----------------", "anchor_text": "Pandas"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F67b0c2b71e6a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdealing-with-extra-white-spaces-while-reading-csv-in-pandas-67b0c2b71e6a&user=Vaclav+Dekanovsky&userId=ed473176733b&source=-----67b0c2b71e6a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F67b0c2b71e6a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdealing-with-extra-white-spaces-while-reading-csv-in-pandas-67b0c2b71e6a&user=Vaclav+Dekanovsky&userId=ed473176733b&source=-----67b0c2b71e6a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F67b0c2b71e6a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdealing-with-extra-white-spaces-while-reading-csv-in-pandas-67b0c2b71e6a&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----67b0c2b71e6a--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F67b0c2b71e6a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdealing-with-extra-white-spaces-while-reading-csv-in-pandas-67b0c2b71e6a&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----67b0c2b71e6a---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----67b0c2b71e6a--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----67b0c2b71e6a--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----67b0c2b71e6a--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----67b0c2b71e6a--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----67b0c2b71e6a--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----67b0c2b71e6a--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----67b0c2b71e6a--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----67b0c2b71e6a--------------------------------", "anchor_text": ""}, {"url": "https://vdekanovsky.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://vdekanovsky.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Vaclav Dekanovsky"}, {"url": "https://vdekanovsky.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "623 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fed473176733b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdealing-with-extra-white-spaces-while-reading-csv-in-pandas-67b0c2b71e6a&user=Vaclav+Dekanovsky&userId=ed473176733b&source=post_page-ed473176733b--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F41f38caa0bb5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdealing-with-extra-white-spaces-while-reading-csv-in-pandas-67b0c2b71e6a&newsletterV3=ed473176733b&newsletterV3Id=41f38caa0bb5&user=Vaclav+Dekanovsky&userId=ed473176733b&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}