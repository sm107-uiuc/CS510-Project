{"url": "https://towardsdatascience.com/writing-a-multi-file-upload-python-web-app-with-user-authentication-8f75064b819a", "time": 1683016545.080875, "path": "towardsdatascience.com/writing-a-multi-file-upload-python-web-app-with-user-authentication-8f75064b819a/", "webpage": {"metadata": {"title": "Writing a multi-file-upload Python-web app with user authentication | by Daniel Ellis Research | Towards Data Science", "h1": "Writing a multi-file-upload Python-web app with user authentication", "description": "When building a webserver we often wish to present an idea or topic. In the case of a static website, this can be done by including the relevant information within the source files. In more dynamic\u2026"}, "outgoing_paragraph_urls": [{"url": "http://127.0.0.1:4000/upload", "anchor_text": "http://127.0.0.1:4000/upload", "paragraph_index": 7}, {"url": "http://127.0.0.1:4000/upload", "anchor_text": "http://127.0.0.1:4000/upload", "paragraph_index": 14}], "all_paragraphs": ["When building a webserver we often wish to present an idea or topic. In the case of a static website, this can be done by including the relevant information within the source files. In more dynamic examples, an API (application programming interface) can be used to pre-process information before returning it to the user.", "In this example, we design a simple flask app which only requires a user key and a web browser to work. The idea behind this is that anyone can use it, and it is a device (and operating system), independent.", "As usual, we start by installing the relevant libraries for the server. The simplest way to do this is through the use of pip (pythons package manager).", "Next, create our HTML template for the login page. To do this we start in our application directory and make a new file named templates . Within this, we create a file named upload.html and paste the following code within it.", "In essence, we have a form which contains our password input, a file upload input and a submit button. When working this will look as follows", "Next, we define a config file for our upload options. To do this create a file named config.py in your main app folder. Within this, we can specify a maximum accepted file size, the upload destination, and what file extensions we can choose to accept. Copy the code below into config.py and adjust accordingly.", "A note on file types: File extensions do not guarantee file type and we should avoid executing any uploaded files. This is why we later introduce a password \u2014 such that only approved users can upload.", "We begin with a basic flask template, which imports our information and serves the upload.html page when navigating to http://127.0.0.1:4000/upload", "Now we have our app, we can add a number of functions to ensure that we have the correct directory, and if not create it.", "We can set the maximum file upload size (using the value from config.py)", "and also check the file extensions (again defined in config.py)", "Personally, I have added these between app.secret and the @app.route sections within the code.", "Finally, we have yet to tell the program what to do upon uploading. We do so this by parsing the post request from the upload page. For information on what this means \u2014 have a read of:", "Here we check if the request.method is a POST, and if so handle any files attached. The first section deals with an empty request, whilst the second iterates through each file, checks that they have the correct file extension, and if so saves them to our desired location (upload_dest).", "Finally, before continuing on to adding passwords, we want to make sure that the upload functions as intended. To do this we run the python script, navigate to http://127.0.0.1:4000/upload, select a few files and click upload. If this has been successful, and you are using the configuration above, your files should now reside within an uploads_folder directory nested in the same folder as your app.", "So far we have created a Flask app which we can use to upload files. Next, we want to add a layer of basic security, such that we can track what files have been uploaded and by whom. In addition, this allows us to reject anyone not authorised to commit data to the directory.", "We begin by installing our database tool. This can sometimes cause problems for people, so the installation instructions for Mac and Linux have been included below.", "We start by connecting to the database. If you have ever used databases before, the pysqlcipher syntax is pretty much the same as sqlite, or any postgresql libraries. We begin by importing the libraries", "And then connecting to the database:", "Finally, we need to specify an encryption key for our database in order to be able to access the data.", "If you do not do this, or use a different key, you will receive the following error: DatabaseError: file is not a database when trying to read information from the database schema.", "Having opened our database, and entered our key, we can now create a table to store our values. We do this by executing a create table SQL command with the cursor execute function. The simplest usage case would require a name and an upload_key.", "Additionally, I have set a condition that each key has to be unique, as we are not using a user name to log on.", "Finally, we have to commit our new table to the database and close it.", "We need users to be able to use the upload tool, so we can add some using the insert command.", "As a check, we want to see if there is a name associated with the upload_key. This can be done with the select function, coupled with a where conditional.", "Now we have a database and an upload script, we can combine the two.", "Firstly we add the required library", "under the from config_simple import *line.", "If you are using the HTML code from earlier, we already have a password input field :<p> upload_key: <input name=\u201dpsw\u201d type=\u201dpassword\u201d /></p>", "As this is within the submission form we can read it as part of the POST request in the @app.route wrapper.", "We combine this with our database read to form a conditional checking if there is anyone with that access key /password.", "However, since the database can only be opened and read from the same computational thread as the website we need to place", "before the cursor.execute block, and a conn.close() after the result = line. (see app.py in the GitHub repo at the end)", "And there we have it \u2014 the most basic of submission boxes which allows for the uploading of files by pre-approved users. There are however a number of improvements that you may wish to make (these are all in the additional files shown in the GitHub repository below).", "Adding all the additional suggestions above and we the following output.", "Here we see, two files have failed, with one succeeding in the middle. In this case, it was due to invalid user credentials and an intentionally invalid filetype.", "Disclaimer: this is not the most secure method of checking credentials, however for the purposes of many tasks it can be a perfectly adequate solution.", "All the example code for this tutorial has been dumped (quite literally) into a Github repository.", "If you have any improvements, feel free to submit a pull request.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Research Software Engineer specialising in High-Performance Computing and Data Visualisation. \u2014 PhD in Atmospheric Chemistry and Masters in Theoretical Physics."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F8f75064b819a&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-a-multi-file-upload-python-web-app-with-user-authentication-8f75064b819a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-a-multi-file-upload-python-web-app-with-user-authentication-8f75064b819a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-a-multi-file-upload-python-web-app-with-user-authentication-8f75064b819a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-a-multi-file-upload-python-web-app-with-user-authentication-8f75064b819a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----8f75064b819a--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8f75064b819a--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://daniel-ellis.medium.com/?source=post_page-----8f75064b819a--------------------------------", "anchor_text": ""}, {"url": "https://daniel-ellis.medium.com/?source=post_page-----8f75064b819a--------------------------------", "anchor_text": "Daniel Ellis Research"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5e126beaa2dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-a-multi-file-upload-python-web-app-with-user-authentication-8f75064b819a&user=Daniel+Ellis+Research&userId=5e126beaa2dc&source=post_page-5e126beaa2dc----8f75064b819a---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8f75064b819a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-a-multi-file-upload-python-web-app-with-user-authentication-8f75064b819a&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8f75064b819a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-a-multi-file-upload-python-web-app-with-user-authentication-8f75064b819a&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@helloimnik?utm_source=medium&utm_medium=referral", "anchor_text": "Hello I'm Nik \ud83c\udf9e"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "http://127.0.0.1:4000/upload", "anchor_text": "http://127.0.0.1:4000/upload"}, {"url": "https://towardsdatascience.com/talking-to-python-from-javascript-flask-and-the-fetch-api-e0ef3573c451", "anchor_text": "Talking to Python from Javascript: Flask and the fetch APIUsing Python to process data required for a dynamic web interface or visualisation.towardsdatascience.com"}, {"url": "http://twitter.com/app", "anchor_text": "@app"}, {"url": "http://127.0.0.1:4000/upload", "anchor_text": "http://127.0.0.1:4000/upload"}, {"url": "https://github.com/wolfiex/FlaskPython_FileUpload", "anchor_text": "wolfiex/FlaskPython_FileUploadA simple flask upload program for multiple files requiring credentials app.py templates/upload_simple.html\u2026github.com"}, {"url": "https://medium.com/tag/flask?source=post_page-----8f75064b819a---------------flask-----------------", "anchor_text": "Flask"}, {"url": "https://medium.com/tag/python?source=post_page-----8f75064b819a---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/encrypt?source=post_page-----8f75064b819a---------------encrypt-----------------", "anchor_text": "Encrypt"}, {"url": "https://medium.com/tag/database?source=post_page-----8f75064b819a---------------database-----------------", "anchor_text": "Database"}, {"url": "https://medium.com/tag/upload?source=post_page-----8f75064b819a---------------upload-----------------", "anchor_text": "Upload"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8f75064b819a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-a-multi-file-upload-python-web-app-with-user-authentication-8f75064b819a&user=Daniel+Ellis+Research&userId=5e126beaa2dc&source=-----8f75064b819a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8f75064b819a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-a-multi-file-upload-python-web-app-with-user-authentication-8f75064b819a&user=Daniel+Ellis+Research&userId=5e126beaa2dc&source=-----8f75064b819a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8f75064b819a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-a-multi-file-upload-python-web-app-with-user-authentication-8f75064b819a&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8f75064b819a--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F8f75064b819a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-a-multi-file-upload-python-web-app-with-user-authentication-8f75064b819a&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----8f75064b819a---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----8f75064b819a--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----8f75064b819a--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----8f75064b819a--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----8f75064b819a--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----8f75064b819a--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----8f75064b819a--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----8f75064b819a--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----8f75064b819a--------------------------------", "anchor_text": ""}, {"url": "https://daniel-ellis.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://daniel-ellis.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Daniel Ellis Research"}, {"url": "https://daniel-ellis.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "335 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5e126beaa2dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-a-multi-file-upload-python-web-app-with-user-authentication-8f75064b819a&user=Daniel+Ellis+Research&userId=5e126beaa2dc&source=post_page-5e126beaa2dc--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F96febf952620&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwriting-a-multi-file-upload-python-web-app-with-user-authentication-8f75064b819a&newsletterV3=5e126beaa2dc&newsletterV3Id=96febf952620&user=Daniel+Ellis+Research&userId=5e126beaa2dc&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}