{"url": "https://towardsdatascience.com/ten-tricks-to-speed-up-your-python-codes-c38abdb89f18", "time": 1683004141.0446458, "path": "towardsdatascience.com/ten-tricks-to-speed-up-your-python-codes-c38abdb89f18/", "webpage": {"metadata": {"title": "Ten Tricks To Speed Up Your Python Codes | by Jun | Towards Data Science", "h1": "Ten Tricks To Speed Up Your Python Codes", "description": "I bet you might encounter this counterargument many times about using Python, especially from people who come from C or C++ or Java world. This is true in many cases, for instance, looping over or\u2026"}, "outgoing_paragraph_urls": [{"url": "http://numba.pydata.org/", "anchor_text": "numba", "paragraph_index": 1}, {"url": "https://www.pypy.org/", "anchor_text": "Pypy project", "paragraph_index": 1}, {"url": "https://stackoverflow.com/questions/17130975/python-vs-cpython/17130986", "anchor_text": "Cpython", "paragraph_index": 1}, {"url": "https://github.com/Perishleaf/data-visualisation-scripts/tree/master/speed_up_python_code", "anchor_text": "my Github", "paragraph_index": 4}, {"url": "https://stackoverflow.com/questions/25011078/what-does-pythonic-mean", "anchor_text": "pythonic", "paragraph_index": 11}, {"url": "https://stackoverflow.com/questions/3588776/how-is-eq-handled-in-python-and-in-what-order", "anchor_text": "__eq__", "paragraph_index": 27}, {"url": "https://docs.python.org/3.8/library/collections.html", "anchor_text": "collections", "paragraph_index": 31}, {"url": "https://www.linkedin.com/in/jun-ye-29aaa769/", "anchor_text": "Linkedin", "paragraph_index": 39}, {"url": "https://junye0798.com/", "anchor_text": "my website", "paragraph_index": 39}, {"url": "http://junye0798.com", "anchor_text": "junye0798.com", "paragraph_index": 41}], "all_paragraphs": ["I bet you might encounter this counterargument many times about using Python, especially from people who come from C or C++ or Java world. This is true in many cases, for instance, looping over or sorting Python arrays, lists, or dictionaries can be sometimes slow. After all, Python is developed to make programming fun and easy. Thus, the improvements of Python code in succinctness and readability have to come with a cost of performance.", "Having said that, many efforts have been done in recent years to improve Python\u2019s performance. We now can process large datasets in an efficient way by using numpy, scipy, pandas, and numba, as all these libraries implemented their critical code paths in C/C++. There is another exciting project, the Pypy project, which speed up Python code by 4.4 times compared to Cpython (original Python implementation).", "The downside of Pypy is that its coverage of some popular scientific modules (e.g., Matplotlib, Scipy) is limited or nonexistent which means that you cannot use those modules in code meant for Pypy.", "Other than these external resources, what can we do to speed up Python code in our daily coding practice? Today, I will share with you 10 tricks that I used a lot during my Python learning process.", "As usual, if you want to rerun codes in this post yourself, all required data and notebook can be accessed from my Github.", "Python comes with many built-in functions implemented in C, which are very fast and well maintained (Figure 1). We should at least familiar with these function names and know where to find them (some commonly used computation-related functions are abs(), len(), max(), min(), set(), sum()). Therefore, whenever we need to carry out a simple computation, we can take the right shortcut instead of writing our own version in a clumsy way.", "Let\u2019s use the built-in functions set() and sum() as examples. As you can see in Figure 2, it is 36.1 and 20.9 times faster using set() and sum() than the functions written by ourselves, respectively.", "If we just want to obtain a sorted list and do not care about the original list, sort() is a bit faster than sorted() both for basic sorting and when using key parameters (the key parameter specifies a function to be called on each list element prior to making comparisons), as shown in Figure 3.", "This is because the sort() method modifies the list in-place while sorted() builds a new sorted list and keep the original list intact. In other words, the order of values inside a_long_list itself actually already changed.", "However, sorted() is more versatile compared to sort(). This is because sorted() accepts any iterable while sort() is only defined for lists. Therefore, if we want to sort something other than a list, sorted() is the right function to use. For example, we can quickly sort a dictionary either by its keys or values (Figure 4).", "3. Use symbols instead of their names", "As shown in Figure 5, when we need an empty dictionary or list object, instead of using dict() or list(), we can directly call {} (as for an empty set, we need to use set() itself) and []. This trick may not necessarily speed-up the codes, but do make the codes more pythonic.", "Normally when we need to create a new list from an old list based on certain rules, we use a for loop to iterate through the old list and transform its values based on the rule and save in a new list. For example, let\u2019s say we want to find all even numbers from another_long_list, we can use the following codes:", "However, there is a more concise and elegant way to achieve this. As shown in Figure 6, we put the original for loop in just a single line of code. Moreover, the speed improved by almost 2 times.", "Combined with rule 3, we can turn the list into dictionaries or sets as well, just change [] as {}. Let\u2019s rewrite codes in Figure 5, we can omit the step of assignment and complete the iteration inside the symbol, like this sorted_dict3 = {key: value for key, value in sorted(a_dict.items(), key=lambda item: item[1])}.", "To break this down, start at the end. The function \u201csorted(a_dict.items(), key=lambda item: item[1])\u201d returned us a list of tuples (Figure 4). Here, we used multiple assignments to unpack the tuple, as for each tuple inside the list, we assigned key to its first item and value to its second item (as we know there are two items inside each tuple in this case). Finally, each pair of key and value was kept inside a dictionary.", "5. Use enumerate() for value and index", "Sometimes, when we iterate through a list, we want to use both its values and indices in expressions. As shown in Figure 7, we should use enumerate(), which turns values of a list into pairs of index and value. This also speed-up our code by about 2 times.", "6. Use zip() for packing and unpacking multiple iterables", "In some cases, we will need to iterate through two or more lists. We then can use zip() function, which transforms multiple lists into a single list of tuples (Figure 8). Note that the lists are better to be in the same length, otherwise, zip() stops as soon as the shorter list ends.", "Reversely, to access items in each tuple within the list, we can also unzip a list of tuple by adding an asterisk(*) and using multiple assignments, like this, letters1, numbers1 = zip(*pairs_list).", "When we want to check if a value exists inside a list or not, a clumsy way is to construct a function like this:", "Then call check_membership(value) to see if the value inside another_long_list. However, a pythonic way to do this is just to use in by calling value in another_long_list as shown in Figure 9. It just like you are asking Python literally that \u201chey python, could you please tell me if value inside another_long_list\u201d.", "To be more efficient, we should first remove duplicates from the list by using set() and then test the membership in the set object. By doing so, we reduced the number of elements that need to be check. In addition, in is a very fast operation on sets by design.", "As you can see from Figure 9, even though it took 20ms to construct the set object, this is just a one-time invest and the checking step itself only used 5.2\u00b5s. That is 1962 times improvement.", "8. Check if a variable is true", "Inevitably, we will use a lot of if statements to check for empty variables, empty lists, empty dictionaries, and so on. We can save a bit time from here as well.", "As shown in Figure 10, we do not need to explicitly state == True or is True in the if statement, instead we just use the variable name. This saves the resource used by magic function __eq__ for comparing values in both sides.", "Likewise, if we need to check if the variable is empty, we just need to say if not string_returned_from_function:.", "9. Count unique values use Counters()", "Let\u2019s say we are trying to count unique values in the list we generated in Rule 1, a_long_list. One way is to create a dictionary in which the keys are numbers and the values are counts. As we iterate the list, we can increment its count if it is already in the dictionary and add it to the dictionary if it is not.", "However, a more efficient way to do this is just using Counter() from collections in one line of code, num_counts2 = Counter(a_long_list). Yes, it is that simple. As show in Figure 11, it is about 10 times faster than the function we wrote.", "If we want to know the 10 most common numbers, the Counter() instance also has a most_common method that is very handy.", "In a word, collections is an amazing module, we should save it into our daily toolbox and use it whenever we can.", "10. Put for loop inside the function", "There might be a time that we built a function and need to reiterate this function a given number of times. An obvious way is that we build a function and then put this function into a for loop.", "However, as shown in Figure 12, instead of repeatedly executing the function 1 million time (the length of a_long_list is 1,000,000), we integrated the for loop inside the function. This saved us about 22% of running time. This is because function calls are expensive, avoid it by writing function into the list comprehension is a better choice.", "That\u2019s all! Thanks for reading this post. I hope that some tricks can be useful for you. Also, what are some other approaches that you used to speed up your Python code? I will really appreciate it if you share them by leaving a comment.", "Here are links you may be interested in:", "As always, I welcome feedback, constructive criticism, and hearing about your data science projects. I can be reached on Linkedin, and also on my website.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Analyst @Canva | PhD | Inspired by data | junye0798.com | Opinions are my own"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fc38abdb89f18&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-tricks-to-speed-up-your-python-codes-c38abdb89f18&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-tricks-to-speed-up-your-python-codes-c38abdb89f18&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-tricks-to-speed-up-your-python-codes-c38abdb89f18&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-tricks-to-speed-up-your-python-codes-c38abdb89f18&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://me.dm/@jun_ye", "anchor_text": "Mastodon"}, {"url": "https://towardsdatascience.com/?source=post_page-----c38abdb89f18--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c38abdb89f18--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@jun_ye?source=post_page-----c38abdb89f18--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@jun_ye?source=post_page-----c38abdb89f18--------------------------------", "anchor_text": "Jun"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd8f76324bf51&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-tricks-to-speed-up-your-python-codes-c38abdb89f18&user=Jun&userId=d8f76324bf51&source=post_page-d8f76324bf51----c38abdb89f18---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc38abdb89f18&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-tricks-to-speed-up-your-python-codes-c38abdb89f18&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc38abdb89f18&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-tricks-to-speed-up-your-python-codes-c38abdb89f18&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "http://numba.pydata.org/", "anchor_text": "numba"}, {"url": "https://www.pypy.org/", "anchor_text": "Pypy project"}, {"url": "https://stackoverflow.com/questions/17130975/python-vs-cpython/17130986", "anchor_text": "Cpython"}, {"url": "https://github.com/Perishleaf/data-visualisation-scripts/tree/master/speed_up_python_code", "anchor_text": "my Github"}, {"url": "https://docs.python.org/3/library/functions.html", "anchor_text": "Built-in Functions in Python 3"}, {"url": "https://stackoverflow.com/questions/25011078/what-does-pythonic-mean", "anchor_text": "pythonic"}, {"url": "https://stackoverflow.com/questions/3588776/how-is-eq-handled-in-python-and-in-what-order", "anchor_text": "__eq__"}, {"url": "https://docs.python.org/3.8/library/collections.html", "anchor_text": "collections"}, {"url": "https://docs.python.org/3/howto/sorting.html", "anchor_text": "How to sort a list using"}, {"url": "https://docs.python.org/3/howto/sorting.html", "anchor_text": "sort()"}, {"url": "https://docs.python.org/3/howto/sorting.html", "anchor_text": "and"}, {"url": "https://docs.python.org/3/howto/sorting.html", "anchor_text": "sorted()"}, {"url": "https://realpython.com/list-comprehension-python/", "anchor_text": "When to use a list comprehension in Python"}, {"url": "https://www.youtube.com/watch?v=OSGv2VnC0go", "anchor_text": "Transforming Code into Beautiful, Idiomatic Python"}, {"url": "https://medium.com/@mindfiresolutions.usa/advantages-and-disadvantages-of-python-programming-language-fd0b394f2121", "anchor_text": "Advantages and Disadvantages of Python Programming Language"}, {"url": "https://www.linkedin.com/in/jun-ye-29aaa769/", "anchor_text": "Linkedin"}, {"url": "https://junye0798.com/", "anchor_text": "my website"}, {"url": "https://medium.com/tag/python?source=post_page-----c38abdb89f18---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/list-comprehension?source=post_page-----c38abdb89f18---------------list_comprehension-----------------", "anchor_text": "List Comprehension"}, {"url": "https://medium.com/tag/coding?source=post_page-----c38abdb89f18---------------coding-----------------", "anchor_text": "Coding"}, {"url": "https://medium.com/tag/programming?source=post_page-----c38abdb89f18---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-analysis?source=post_page-----c38abdb89f18---------------data_analysis-----------------", "anchor_text": "Data Analysis"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc38abdb89f18&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-tricks-to-speed-up-your-python-codes-c38abdb89f18&user=Jun&userId=d8f76324bf51&source=-----c38abdb89f18---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc38abdb89f18&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-tricks-to-speed-up-your-python-codes-c38abdb89f18&user=Jun&userId=d8f76324bf51&source=-----c38abdb89f18---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc38abdb89f18&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-tricks-to-speed-up-your-python-codes-c38abdb89f18&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c38abdb89f18--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fc38abdb89f18&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-tricks-to-speed-up-your-python-codes-c38abdb89f18&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----c38abdb89f18---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----c38abdb89f18--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----c38abdb89f18--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----c38abdb89f18--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----c38abdb89f18--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----c38abdb89f18--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----c38abdb89f18--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----c38abdb89f18--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----c38abdb89f18--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@jun_ye?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@jun_ye?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Jun"}, {"url": "https://medium.com/@jun_ye/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "441 Followers"}, {"url": "http://junye0798.com", "anchor_text": "junye0798.com"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd8f76324bf51&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-tricks-to-speed-up-your-python-codes-c38abdb89f18&user=Jun&userId=d8f76324bf51&source=post_page-d8f76324bf51--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fe51a61d93066&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-tricks-to-speed-up-your-python-codes-c38abdb89f18&newsletterV3=d8f76324bf51&newsletterV3Id=e51a61d93066&user=Jun&userId=d8f76324bf51&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}