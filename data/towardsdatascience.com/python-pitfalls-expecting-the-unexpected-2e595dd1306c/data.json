{"url": "https://towardsdatascience.com/python-pitfalls-expecting-the-unexpected-2e595dd1306c", "time": 1683016546.09007, "path": "towardsdatascience.com/python-pitfalls-expecting-the-unexpected-2e595dd1306c/", "webpage": {"metadata": {"title": "Python Pitfalls - Expecting The Unexpected | by Martin Heinz | Towards Data Science", "h1": "Python Pitfalls - Expecting The Unexpected", "description": "Save yourself hours of debugging by avoiding these common gotchas and pitfalls in your Python code..."}, "outgoing_paragraph_urls": [{"url": "https://martinheinz.dev/blog/37?utm_source=tds&utm_medium=referral&utm_campaign=blog_post_37", "anchor_text": "martinheinz.dev", "paragraph_index": 35}, {"url": "https://martinheinz.dev/", "anchor_text": "https://martinheinz.dev/", "paragraph_index": 37}, {"url": "https://ko-fi.com/martinheinz", "anchor_text": "https://ko-fi.com/martinheinz", "paragraph_index": 37}], "all_paragraphs": ["Regardless of which programming language you\u2019re coding in, you\u2019ve probably encountered good chunk of weird and seemingly unexplainable issues that ended up being really stupid mistakes or quirks of that specific language. Python aims at being clean and simple language, yet it also has its portion of gotchas and quirks that can surprise both beginner and experienced software developers. So, to avoid unnecessary rage and frustration over some weird issue in your favourite programming language, here follows a list of common Python pitfalls, that you should try to avoid at all costs.", "Setting default arguments for a function is very common and useful for defining optional arguments or arguments that can usually use same, predefined value. Setting default argument to a mutable value such as list or dict can, however, cause unexpected behavior:", "The problem with using mutable value as default argument is that the default argument in not initialized every time the function is called. Instead, the recently used value will be passed in, which in case of mutable types is a problem. To avoid this problem, you should always use None or other immutable type instead, and perform check against the argument as shown above.", "Even though this might seem like nuisance and a problem, it\u2019s an intended behavior and it can also be exploited to make caching functions which can use the persistent mutable default argument as cache:", "Similar behavior to the default arguments above, can also be seen with dict.setdefault(key, value). In the below code we can see some surprising results:", "Even though we didn\u2019t touch the data dictionary above, it was modified by appending to default value val. That's because default value passed to setdefault is assigned directly into the dictionary when the key is missing instead of being copied from original. To avoid this issue, make sure you never reuse values when using setdefault.", "Working with floats and non-integer numbers can often be difficult and annoying, but it gets especially weird when you get into Not-a-Number and Infinity territory. So, let\u2019s demonstrate this by making a few comparisons with these values:", "The above code shows the non-reflexivity of NaN. NaN in Python will never compare as equal even when compared with itself. So, in case you need to test for NaN or inf, then you should use math.isnan() and math.isinf(). Also be careful with any other arithmetic operation when working with code that might produce NaN, as it will propagate through all operations without raising an exception.", "Python is usually clever and won\u2019t generally return NaN from math functions, e.g. math.exp(1000.0) will return OverflowError: math range error and both math.sqrt(-1.0) and math.log(0.0) will return ValueError: math domain error, but you might encounter it with Numpy or Pandas and if you do so, remember not to try comparing NaNs for equality.", "There are quote a few gotchas, pitfalls and surprises surrounding scopes and closures in Python. The most common one \u2014 I\u2019d say \u2014 is late binding in closures. Let\u2019s start with example:", "The code above shows definition of function inside a loop which is then added to a list. With each iteration the i variable increments and so does the i variable in the defined function, right? Wrong.", "Late binding causes all the functions to assume value of 2 (from last iteration). This happens because of the closure in which all the functions are defined in \u2014 the global one. Because of this all of them refer to the same i which gets mutated in the loop.", "There\u2019s more than one way to fix this, but the cleanest one in my opinion is to use functools.partial:", "With partial we can create new callable object with predefined i, forcing the variable to be bound immediately which fixes the issue. We can then supply the remaining original parameter n when we want to actually call the functions.", "Using a lot of global variables is generally discouraged and viewed as a bad practice. There are however, valid reason to use some global variables \u2014 for example to define various flags, which can be used to set log level of function.", "But what if you decide to flip (reassign) this flag? Well, it can cause a massive headache:", "Looking at the code above one might expect the value of global flag variable to change to True after execution of some_func(), but that's not the case. The some_func declares new local variable flag, sets it to True and it then disappears after end of function body. The global variable is never touched.", "There\u2019s a simple fix to this, though. We need to first declare in the function body that we want to refer to the global variable instead of using local one. We do that with global <var_name> - in this case global flag:", "Another \u201cfun\u201d issues with variables that you might run into \u2014 which is luckily much easier to debug and fix \u2014 is modification of out-of-scope variable. Similarly to previous gotcha, it\u2019s caused by manipulating variable that was defined in outer scope:", "Here we try to increment variable var inside function scope, assuming that it will modify the global one. But again, that's wrong.", "When you modify variable it becomes local to the scope, but you can\u2019t increment variable that wasn\u2019t declared before (in current scope), so UnboundLocalError is thrown.", "This again can be fixed using global <var_name> in case of global variables. This so-called scoping bug can also occur inside nested functions where you would use nonlocal <var_name> instead, to refer to variable in the nearest outer scope:", "One misconception that pretty much every Python developer has ingrained in their mind, is that tuples are defined by surrounding parenthesis. Unlike iterables like dict or set, Python tuple is defined by the comma separating its elements.", "Mistakes originating from this misconception usually arise when we try to define tuple with just single element:", "In the snippet above, we can see that it\u2019s necessary to add , after the singular element to make Python recognize it as tuple. We can also completely omit parenthesis, which is pretty common practice with return statements that return multiple values.", "Last example above shows one more similar pitfall. If you forget to separate elements with comma, Python will use implicit concatenation making it a single value of a type string. This kind of implicit concatenation can happen anywhere in the code not just when defining tuple, so always double check your strings and iterables if something fishy is happening with your program.", "When working with files and data in them we mostly just use ASCII or UTF-8 strings. From time to time however, you might have to read and write some binary data and you might be surprised with the results of indexing and iterating them:", "When indexing into binary string, instead of receiving byte string, we get integer byte value, or in other words \u2014 ordinal value of the indexed character. To avoid this \u2014 especially when reading binary file \u2014 it\u2019s best to always use text.decode('utf-8') to get proper string. If you however want to keep the original data as binary string, then you can instead use chr(c) to convert individual characters to string representation.", "Slicing and dicing is one of the most handy features of Python including the ability to specify negative indexes, but if you are not careful with those, you might get unexpected results:", "If we slice a sequence with any negative value (variable) other than -0 we will get the expected values, but if we happen to accidentally slice using [-0:] we will receive as a result a copy of whole sequence as it is equivalent to [:].", "I left my \u201cfavourite\u201d gotcha the for last. It\u2019s easy to forget whether a function returns new value or modifies original in-place. Especially, when there are generally 2 types of methods \u2014 list methods which modify the argument and return None and string methods which modify the argument in-place.", "I\u2019m guilty of making this mistake way too many times. It\u2019s easy to forget behavior of one of the many string or list methods and it can lead to hours of debugging. So, if you receive None where there should be whole string or list, then double check to make sure you're using all of the above shown methods correctly.", "It\u2019s inevitable that you will run into these or other similar gotchas and pitfalls that will cause a lot of rage and frustration. More often than not, the best way to solve any of these issues is to just step back for a moment. Go for walk. Go make a cup of coffee. Or at least take a deep breath. Most of the time all it takes to solve such an issue, is to leave it for bit and come back later.", "If that doesn\u2019t help, maybe it\u2019s time for some rubber duck debugging or to bring in another pair of eye (colleague sitting next to you). Oftentimes, when you start explaining the problem to somebody else, you will immediately realise where the problem really is.", "When you eventually find the bug and manage to solve it, take a moment to think about what you could have done to find it faster. Next time you run into similar issue you might be able to resolve it a bit more quickly.", "This article was originally posted at martinheinz.dev", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "CKA | RHCE | DevOps Engineer at IBM | Working with Python, Kubernetes, Linux and more | https://martinheinz.dev/ | https://ko-fi.com/martinheinz"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F2e595dd1306c&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-pitfalls-expecting-the-unexpected-2e595dd1306c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-pitfalls-expecting-the-unexpected-2e595dd1306c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-pitfalls-expecting-the-unexpected-2e595dd1306c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-pitfalls-expecting-the-unexpected-2e595dd1306c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----2e595dd1306c--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----2e595dd1306c--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@martin.heinz?source=post_page-----2e595dd1306c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@martin.heinz?source=post_page-----2e595dd1306c--------------------------------", "anchor_text": "Martin Heinz"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4cbd6b36e62a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-pitfalls-expecting-the-unexpected-2e595dd1306c&user=Martin+Heinz&userId=4cbd6b36e62a&source=post_page-4cbd6b36e62a----2e595dd1306c---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2e595dd1306c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-pitfalls-expecting-the-unexpected-2e595dd1306c&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2e595dd1306c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-pitfalls-expecting-the-unexpected-2e595dd1306c&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@meooooo?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Meor Mohamad"}, {"url": "https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://martinheinz.dev/blog/37?utm_source=tds&utm_medium=referral&utm_campaign=blog_post_37", "anchor_text": "martinheinz.dev"}, {"url": "https://towardsdatascience.com/ultimate-guide-to-python-debugging-854dea731e1b", "anchor_text": "Ultimate Guide to Python DebuggingLet\u2019s explore the Art of debugging using Python logging, tracebacks, decorators and more\u2026towardsdatascience.com"}, {"url": "https://towardsdatascience.com/writing-more-idiomatic-and-pythonic-code-c22e900eaf83", "anchor_text": "Writing More Idiomatic and Pythonic CodeIdioms and conventions that will make your Python code readable, effective, concise and reliable.towardsdatascience.com"}, {"url": "https://towardsdatascience.com/the-magic-of-python-context-managers-adb92ace1dd0", "anchor_text": "The Magic of Python Context ManagersRecipes for using and creating awesome Python context managers, that will make your code more readable, reliable and\u2026towardsdatascience.com"}, {"url": "https://medium.com/tag/python?source=post_page-----2e595dd1306c---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/programming?source=post_page-----2e595dd1306c---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-science?source=post_page-----2e595dd1306c---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/technology?source=post_page-----2e595dd1306c---------------technology-----------------", "anchor_text": "Technology"}, {"url": "https://medium.com/tag/software-engineering?source=post_page-----2e595dd1306c---------------software_engineering-----------------", "anchor_text": "Software Engineering"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2e595dd1306c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-pitfalls-expecting-the-unexpected-2e595dd1306c&user=Martin+Heinz&userId=4cbd6b36e62a&source=-----2e595dd1306c---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2e595dd1306c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-pitfalls-expecting-the-unexpected-2e595dd1306c&user=Martin+Heinz&userId=4cbd6b36e62a&source=-----2e595dd1306c---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2e595dd1306c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-pitfalls-expecting-the-unexpected-2e595dd1306c&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----2e595dd1306c--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F2e595dd1306c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-pitfalls-expecting-the-unexpected-2e595dd1306c&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----2e595dd1306c---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----2e595dd1306c--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----2e595dd1306c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----2e595dd1306c--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----2e595dd1306c--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----2e595dd1306c--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----2e595dd1306c--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----2e595dd1306c--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----2e595dd1306c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@martin.heinz?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@martin.heinz?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Martin Heinz"}, {"url": "https://medium.com/@martin.heinz/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "5.4K Followers"}, {"url": "https://martinheinz.dev/", "anchor_text": "https://martinheinz.dev/"}, {"url": "https://ko-fi.com/martinheinz", "anchor_text": "https://ko-fi.com/martinheinz"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4cbd6b36e62a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-pitfalls-expecting-the-unexpected-2e595dd1306c&user=Martin+Heinz&userId=4cbd6b36e62a&source=post_page-4cbd6b36e62a--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff723091181e3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-pitfalls-expecting-the-unexpected-2e595dd1306c&newsletterV3=4cbd6b36e62a&newsletterV3Id=f723091181e3&user=Martin+Heinz&userId=4cbd6b36e62a&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}