{"url": "https://towardsdatascience.com/splitting-data-sets-cac104a05386", "time": 1683000101.088023, "path": "towardsdatascience.com/splitting-data-sets-cac104a05386/", "webpage": {"metadata": {"title": "Splitting Data Sets. How top scientists simplify\u2026 | by Peter Grant | Towards Data Science", "h1": "Splitting Data Sets", "description": "Scientists offer encounter extraordinarily large data sets. This happens for a very good reason; more data gives a more thorough understanding of the phenomenon they\u2019re studying. But it also creates\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/tutorial-automatically-creating-a-performance-map-of-a-heat-pump-water-heater-7035c7f208b0", "anchor_text": "The Automated Performance Map Creation Tutorial.", "paragraph_index": 3}, {"url": "https://peter-grant.my-online.store/HPWH_Performance_Map_Tutorial_Data_Set/p6635995_20036443.aspx", "anchor_text": "companion data set", "paragraph_index": 4}, {"url": "https://towardsdatascience.com/automating-scientific-data-analysis-part-2-12331b46003", "anchor_text": "Automating Scientific Analysis Part 2", "paragraph_index": 5}, {"url": "https://towardsdatascience.com/tutorial-automatically-creating-a-performance-map-of-a-heat-pump-water-heater-7035c7f208b0", "anchor_text": "data from tests studying heat pump water heaters", "paragraph_index": 19}, {"url": "https://towardsdatascience.com/automatically-storing-results-from-analyzed-data-sets-ed918d04bc13", "anchor_text": "Automatically Storing Results from Automated Data Sets", "paragraph_index": 43}, {"url": "https://towardsdatascience.com/checking-automated-data-analysis-for-errors-a97a22a35ad7", "anchor_text": "ways to do this automatically", "paragraph_index": 56}, {"url": "https://towardsdatascience.com/checking-analyzed-laboratory-data-for-errors-4bd63bcc554d", "anchor_text": "Checking Analyzed Laboratory Data for Errors", "paragraph_index": 75}, {"url": "https://medium.com/zero-equals-false/how-to-write-scripts-that-check-data-quality-for-you-d8762dab34ca", "anchor_text": "How to Write Scripts that Check Data Quality for You", "paragraph_index": 76}, {"url": "https://medium.com/zero-equals-false/how-to-perform-multivariate-multidimensional-regression-in-python-df986c35b377", "anchor_text": "How to Automatically Generate Regressions in Python", "paragraph_index": 77}], "all_paragraphs": ["Scientists offer encounter extraordinarily large data sets. This happens for a very good reason; more data gives a more thorough understanding of the phenomenon they\u2019re studying. But it also creates a problem; as data sets gets larger they become harder and harder to understand and use.", "One excellent solution is learning how to automatically split these data sets into separate files. In that way each data file becomes a manageable about of information explaining one aspect of the phenomenon. It\u2019s easy to work with. And, by doing it automatically, you can make your life much easier with very little effort.", "This article will teach you how to do that. It will walk you through the process, and it will provide specific Python code to do it (Python 2.7).", "It does so in the context of a real life problem, often encountered in science and engineering. To understand the concepts being studied, see The Automated Performance Map Creation Tutorial.", "You can learn the concepts by reading this article. If you want to take things a step further, and leave the tutorial with confidence in your skills and useful tools, you can download the companion data set. This companion data set will allow you to test your code and check your results, ensuring that you\u2019re learning this process correctly.", "In this portion of the tutorial we will cover the process of splitting a data set containing results from multiple laboratory tests into individual files. Those files will each contain the results of a single test, and will have descriptive file names stating what data is contained within them. We will be using the techniques described in Automating Scientific Analysis Part 2.", "Without further ado, let\u2019s get started. The first step is import the Python packages that will enable the data analysis process.", "Each Python script needs to start with statements importing the required packages and capabilities. In this data file splitting script we will need:", "In this case we will pull in the entirety of both Pandas and os, but only specific functions from Bokeh. To do that, add the following code to the start of your program.", "You can see those four lines importing the stated packages. Note that the line to import pandas also specifies that pandas has been imported as pd, meaning that we can refer to pandas as \u201cpd\u201d in the rest of the code. Also note that \u201cColumnDataSource\u201d is on the code line that starts with \u201cfrom bokeh.plotting\u201d.", "Now that our packages have been imported, the next step is reading the necessary data so the script can work with it.", "Pandas has a fantastic tool for importing data sets. It\u2019s the read_csv function. In order to read a file, you call the pandas.read_csv function, specify the location of the file, and set it to a variable. There are several other modifiers you can use to customize the import if desired, but we won\u2019t be using them here.", "This command needs to be used to import two files. The first is the data set itself. If you downloaded the companion data set, it is titled \u2018COP_HPWH_f_Tamb&Tavg.csv\u2019. If we imagine that you saved the file in the folder \u2018C:\\Users\\YourName\\Documents\\AutomatedDataAnalysis\u2019 then we can import the data with the following code:", "Executing that code will cause the data set to be saved to the variable \u2018Data\u2019. Then all of Pandas data analysis capabilities can be used on the data set by referencing Data.", "The second file that will be necessary is a table describing the tests contained in the file. For the sake of learning, it\u2019s helpful if you create the table yourself. The data set contains the results from three tests, with different ambient temperatures (Ambient temperature refers to the temperature of air around the tested device). To create this data set, generate a table with the following information and save it as \u2018Test_Plan.csv\u2019 in the same folder as your data set.", "Note that you will later reference the names of the columns, so it\u2019s important to make sure that you use the same text as in the example data.", "Now that the table is created and saved, you can read it into Python by writing:", "Now that the data is read into the Python script, the next step is to identify the rows where each test ends and the next team beings.", "In order to identify where each test ends and the next test begins you need some knowledge about the tests themselves. You need to think about how the tests are being performed, and identify a condition that would indicate that one test is ending.", "In this case we\u2019re analyzing data from tests studying heat pump water heaters (HPWH), which use electricity to heat water. Since we\u2019re looking at how much electricity it consumes to heat the water, we can know that it\u2019s consuming electricity during each test. This means that each test ends when the device stops using electricity.", "We need to identify rows where the device stops using electricity. We can do this by subtracting the electricity consumption in each row from the electricity consumption in the previous row. If the result is negative, that means the HPWH is consuming less electricity than previously and the test has ended.", "We can do this by using the .shift() function on our data set. This function does what it sounds like; it shifts the data by a specified number of rows. We can use .shift() to create a new row in the data frame that contains electricity consumption, P_Elec (W), data that has been shifted by one row. We can do this with the following line of code:", "This leads to two different columns in the data frame describing the HPWHs electricity consumption. P_Elec (W) states the electricity consumption, in Watts, in each row. P_Elec_Shift (W) states the electricity consumption, in Watts, of the next row. If we subtract P_Elec (W) from P_Elec_Shift (W), rows with negative values will indicate that the HPWH has stopped heating. We can do that with the following code:", "At this point we have a data frame with a row that contains 0 in every row except rows where each test ended. We can use that information to create a list that tells us when each test ended. We\u2019ll call that list \u2018End_Of_Tests\u2019, to clearly signify that the information contained within it. We will then use the .index.tolist() function to populate that list. This can be done with the following code:", "The first line creates the empty list \u2018End_Of_Tests.\u2019 While it originally holds no data, it\u2019s ready to accept data from other commands. The second line adds data to End_Of_Tests. It says to look through Data to identify rows where \u2018P_Elec_Shift (W)\u2019 is negative, identify the index of those rows, and add them to the End_Of_Tests list.", "Now that we\u2019ve identified the rows that correspond to the end of each test we can split the data set into separate data sets, one for each test.", "The data file can be split into more manageable files using the following steps:", "The first step can be accomplished with a simple for loop that iterates through the End_Of_Tests list. This can be done with the following code:", "This creates a loop that will run x times, where x is the number of rows in End_Of_Tests/the number of tests contained in the file. Note that i will be an increasing integer (0, 1, 2, and so on) and can be used an an index. Also note that we now have an active for loop, so all future code will need to be indented until we leave the for loop.", "The second step can be accomplished by using the values of End_Of_Tests to identify the rows of Data corresponding to each test. In the first test, this means we need to select the data between the first row and the first value in End_Of_Tests. In the second test, this means we need to select the data between the first value in End_Of_Tests and the second value in End_Of_Tests. And so on for the third, and for more if we had more than three tests in this data set.", "This difference in handling between the first test (Which starts at hard-coded row 0) and the future tests (Which start at an entry in End_Of_Tests) we need an if statement that changes the code based whether or not we\u2019re pulling out the first test.", "The code then needs to use the End_Of_Test values to identify the section of Data that we want, and save it to a new data frame.", "This can be accomplished with the following code:", "The first line checks to see if this code is being executed for the first time. If it is, that means it\u2019s the first time through the loop and we\u2019re extracting the first test. If it is, the code pulls the first row of Data (Index 0) through the first entry in End_Of_Tests (Denoted with End_Of_Tests[i], which is currently End_Of_Tests[0]) and stores it in a new data frame called File_SingleTest. If it\u2019s not the first time through the code,that means we need to extract data from a test that is not the first. In that case we extract data from when the previous test ended (End_Of_Tests[i-1]) to when the current test ends (End_Of_Tests[i]) and save it to File_SingleTest.", "Note that the data is always saved to File_SingleTest. This means that the data frame containing data from a single test will always be overwritten in the next iteration. It\u2019s important to save the data before that happens!", "Now we have a data frame containing the data of a specific test. But which test is it? We need to read the data to understand what happens in that test, and compare it to the specifications in the test plan. In that way we can identify which test is in the data frame and give the data frame a descriptive name.", "Looking at the test plan, we see that the ambient temperature changes in each test. Test Number 1 has an ambient temperature of 55 degrees Fahrenheit, Test Number 2 has 70 degrees Fahrenheit, and Test 3 has 95 degrees Fahrenheit. This means that ambient temperature is our descriptor here.", "We can identify the ambient temperature during a test with the following code:", "This line reads the last 50 entries ([-50:]) of the column representing ambient temperature (\u2018T_Amb (deg F)\u2019) in the File_SingleTest data frame, and calculates the average (.mean()). It then stores that value in Temperature_Ambient. In this way we have the ambient temperature for the last few minutes of the test stored in a variable.", "The second step is to compare this value to the test plan and identify which test was performed. This is important because no test data will ever be perfect, and the average ambient temperature will not perfectly match the specification in the test plan. For example, a test with a 55 degree ambient temperature specified may actually have a 53.95 degree ambient temperature. Identifying the corresponding test makes file management easier.", "The corresponding test can be identified by 1) Calculating the difference between the average temperature in the test and the ambient temperature called for in each test, and 2) Identifying the test with the minimum difference. This can be done with the following two lines of code:", "The first line adds a new column to the Test_Plan data frame that states the absolute value of the difference between the ambient temperature called for in that test and the average ambient temperature in the active test. The second line uses the .loc() and .idxmin() functions to identify the ambient temperature specified in the test with the least error and set that ambient temperature to our Temperature_Ambient variable.", "Now we\u2019re ready to save the data in a new file.", "With a data frame containing the results from a single test, and knowledge of the conditions of that test, we can now save the results to a new file. This section will show you one of the techniques discussed in Automatically Storing Results from Automated Data Sets.", "The first step is to ensure that the folder we want to save the data in exists. We could do that manually, but this is an article about automating things! Let\u2019s program the script to do it for us.", "Let\u2019s say we want the data to be stored in the file \u2018C:\\Users\\YourName\\Documents\\AutomatingDataAnalysis\\Files_IndividualTests\u2019. To make sure that folder exists we can use the following code:", "The first line sets the path of our desired folder to the variable Folder. The second line uses the os function .path.exists() to check and see if that folder exists. If it doesn\u2019t exist, it executes the third line of code to create the folder. In this way we can ensure that it exists.", "Once the folder exists, we can use the same approach to save the data file into that folder. We specify the file name we want to use, using variables to contain data about the ambient temperature, and use the Pandas .to_csv() function to save the file where we desire. This can be done with the following code:", "The first line creates the filename we want to use. It descriptively states that it\u2019s a file containing data from testing used to create a performance map of a HPWH. The second part is more important. It takes the ambient temperature that we identified in the test plan as a variable, converts it to an integer, converts it to a string, and adds it to the filename. Now the filename contains the conditions of the test, telling you exactly what the file contains before you even open it.", "The second line does the grunt work. It combines the folder specified previously with the filename for the current data frame, and saves it. Note that it also removes the index, because saving that isn\u2019t important and helps keep files cleaner.", "Now you\u2019re at the fun part of writing this script. You get to run it. And you get to watch the program generate the results that you need for you.", "Note that this process is a bit overkill in this tutorial. The companion data set has results from three fabricated tests. It wouldn\u2019t be very hard, time consuming, or tedious to do this in a project with three tests. But what if you had 1,000 tests? Then this process becomes extremely valuable.", "There are two steps to checking your results in this process.", "The first is to ensure that you got the right files as outputs. To do that, you compare the files in your new folder to the tests called for in the test plan. There should be one file for each test, with the conditions in the file name matching the conditions called for in the test plan.", "In this process, you should see the following files in your folder:", "Notice how there are three files in that folder, and three tests specified in the test plan. Also notice how the test plan calls for tests at 55, 70, and 95 degrees, and those three temperatures are specified in the three file names. So far, it looks like everything worked correctly.", "The second step is to examine the data contained in each file. The easiest way to do that is by plotting the data and visually examining it (Though, we will be discussing ways to do this automatically later).", "A quick check is to create a plot showing the ambient temperature from each data file. This can be done with Bokeh.", "First, we need to create a new column in the data frame that gives us the test time in user-friendly terms. In minutes since the test started. We can do this by adding the following line to our program (If we assume that the time between measurements is 5 seconds):", "That gives us a user-friendly time to use as the x-axis in our plot. Then we can use bokeh to create and save the plot. We do that with the following code:", "The first line creates a figure called p1 and specifies both the size and axis labels for the plot. The second line adds red circles to the plot with the x-values specified by \u2018Time_Since Start (min)\u2019 and the y-values specified by \u2018T_Amb (deg F)\u2019. It also states that the legend reading should be \u2018Ambient Temperature\u2019.", "The plot can be saved using the gridplot and outputfile features.", "Bokeh has a handy feature called gridplot that enables you to store multiple plots in a single file. This makes it very convenient to look at related plots next to each other, comparing the data in them. This feature is not necessary for this tutorial, so we only entered our current plot (p1) in the grid. But you should know about it in case you want it in the future.", "The second line specifies where the file is to be saved. It goes in the same folder where we saved the .csv files of the data, and uses the same file name convention as before. The difference is that the data was saved in .csv files, and this is saved in a .html file.", "The third line finally saves the data.", "If you re-run the code, you\u2019ll see that same .csv files in your results folder. Additionally, you\u2019ll now find new .html files. These .html files contain the plots of the data sets.", "What would you expect to see if you open the plots?", "First, you\u2019d expect the ambient temperature recorded during the tests to be similar to the values specified in the test plan and file name. The tests at 55 degrees should have ambient temperatures around 55 degrees, and so on.", "Second, with this being real world data you shouldn\u2019t expect it to be perfect. Some values will be 54.5, others will be 55.2, and so on. Don\u2019t freak out about that.", "Third, you should expect to see the temperature adjusting at the start of the test. The original values will be at the temperature from the previous test, then the lab will need to gradually change the temperature to the new setting.", "If we open the plot from the 55 deg test, we should see exactly that. Here\u2019s what your result should look like:", "Notice how the temperature starts at 75 degrees, then rapidly decreases to 55 degrees. As expected. Notice how the average temperature throughout the test is clearly 55 degrees. As expected. Also notice how the data bounces around 55 degrees instead of being exactly on, also as expected.", "This file implies that the test was performed correctly, and the data file was split correctly. You\u2019re ready to move on to the next step!", "This article was step 1 in a tutorial teaching you how to automate your scientific data analysis. Now that the overwhelmingly large data file is split into three separate files, one for each test, we can begin to make use of those data files. The next step is to check the process the data files, performing our analysis. When the analysis is done we can then check the results to ensure that the test and calculations went correctly.", "This is a part of a series of articles teaching you all of the skills needed to automatically analyze laboratory data and develop a performance map of heat pump water heaters. The other articles in the series can be found using the following links:", "Checking Analyzed Laboratory Data for Errors", "How to Write Scripts that Check Data Quality for You", "How to Automatically Generate Regressions in Python", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Scientist at Lawrence Berkeley National Laboratory who also teaches skills you need to build a fulfilling career."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fcac104a05386&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsplitting-data-sets-cac104a05386&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsplitting-data-sets-cac104a05386&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsplitting-data-sets-cac104a05386&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsplitting-data-sets-cac104a05386&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----cac104a05386--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----cac104a05386--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://petergrant-81989.medium.com/?source=post_page-----cac104a05386--------------------------------", "anchor_text": ""}, {"url": "https://petergrant-81989.medium.com/?source=post_page-----cac104a05386--------------------------------", "anchor_text": "Peter Grant"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F985f2ff02845&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsplitting-data-sets-cac104a05386&user=Peter+Grant&userId=985f2ff02845&source=post_page-985f2ff02845----cac104a05386---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcac104a05386&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsplitting-data-sets-cac104a05386&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcac104a05386&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsplitting-data-sets-cac104a05386&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/tutorial-automatically-creating-a-performance-map-of-a-heat-pump-water-heater-7035c7f208b0", "anchor_text": "The Automated Performance Map Creation Tutorial."}, {"url": "https://peter-grant.my-online.store/HPWH_Performance_Map_Tutorial_Data_Set/p6635995_20036443.aspx", "anchor_text": "companion data set"}, {"url": "https://towardsdatascience.com/automating-scientific-data-analysis-part-2-12331b46003", "anchor_text": "Automating Scientific Analysis Part 2"}, {"url": "https://www.amazon.com/gp/product/1491957662/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1491957662&linkCode=as2&tag=1000xfaster-20&linkId=7b4c4d6384add4cc78ac8a016a8c7945", "anchor_text": "Python for Data Analysis"}, {"url": "https://www.amazon.com/gp/product/B07DWG4T95/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B07DWG4T95&linkCode=as2&tag=1000xfaster-20&linkId=c503c2259e94061c5d4af3c7408e2223", "anchor_text": "Hands-On Data Visualization with Bokeh"}, {"url": "https://towardsdatascience.com/tutorial-automatically-creating-a-performance-map-of-a-heat-pump-water-heater-7035c7f208b0", "anchor_text": "data from tests studying heat pump water heaters"}, {"url": "https://towardsdatascience.com/automatically-storing-results-from-analyzed-data-sets-ed918d04bc13", "anchor_text": "Automatically Storing Results from Automated Data Sets"}, {"url": "https://towardsdatascience.com/checking-automated-data-analysis-for-errors-a97a22a35ad7", "anchor_text": "ways to do this automatically"}, {"url": "https://towardsdatascience.com/tutorial-automatically-creating-a-performance-map-of-a-heat-pump-water-heater-7035c7f208b0", "anchor_text": "Introduction"}, {"url": "https://towardsdatascience.com/automatically-analyzing-laboratory-test-data-32c27e4e3075", "anchor_text": "Automatically Analyzing Laboratory Test Data"}, {"url": "https://towardsdatascience.com/checking-analyzed-laboratory-data-for-errors-4bd63bcc554d", "anchor_text": "Checking Analyzed Laboratory Data for Errors"}, {"url": "https://medium.com/zero-equals-false/how-to-write-scripts-that-check-data-quality-for-you-d8762dab34ca", "anchor_text": "How to Write Scripts that Check Data Quality for You"}, {"url": "https://medium.com/zero-equals-false/how-to-perform-multivariate-multidimensional-regression-in-python-df986c35b377", "anchor_text": "How to Automatically Generate Regressions in Python"}, {"url": "https://medium.com/tag/data-science?source=post_page-----cac104a05386---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----cac104a05386---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/tag/python?source=post_page-----cac104a05386---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/programming?source=post_page-----cac104a05386---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/science?source=post_page-----cac104a05386---------------science-----------------", "anchor_text": "Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fcac104a05386&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsplitting-data-sets-cac104a05386&user=Peter+Grant&userId=985f2ff02845&source=-----cac104a05386---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fcac104a05386&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsplitting-data-sets-cac104a05386&user=Peter+Grant&userId=985f2ff02845&source=-----cac104a05386---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcac104a05386&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsplitting-data-sets-cac104a05386&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----cac104a05386--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fcac104a05386&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsplitting-data-sets-cac104a05386&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----cac104a05386---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----cac104a05386--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----cac104a05386--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----cac104a05386--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----cac104a05386--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----cac104a05386--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----cac104a05386--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----cac104a05386--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----cac104a05386--------------------------------", "anchor_text": ""}, {"url": "https://petergrant-81989.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://petergrant-81989.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Peter Grant"}, {"url": "https://petergrant-81989.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "969 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F985f2ff02845&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsplitting-data-sets-cac104a05386&user=Peter+Grant&userId=985f2ff02845&source=post_page-985f2ff02845--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F90e3ec001185&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsplitting-data-sets-cac104a05386&newsletterV3=985f2ff02845&newsletterV3Id=90e3ec001185&user=Peter+Grant&userId=985f2ff02845&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}