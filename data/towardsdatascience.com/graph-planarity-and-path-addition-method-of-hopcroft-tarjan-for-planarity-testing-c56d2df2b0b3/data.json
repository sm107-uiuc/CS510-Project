{"url": "https://towardsdatascience.com/graph-planarity-and-path-addition-method-of-hopcroft-tarjan-for-planarity-testing-c56d2df2b0b3", "time": 1682993954.22297, "path": "towardsdatascience.com/graph-planarity-and-path-addition-method-of-hopcroft-tarjan-for-planarity-testing-c56d2df2b0b3/", "webpage": {"metadata": {"title": "Graph planarity and path addition method of Hopcroft-Tarjan for planarity testing | by Tung Hoang | Towards Data Science", "h1": "Graph planarity and path addition method of Hopcroft-Tarjan for planarity testing", "description": "Planar graphs play a central role in many problems in computational geometry. Determining isomorphism of chemical structures is simplified if the structures are planar. Another example is when an\u2026"}, "outgoing_paragraph_urls": [{"url": "https://en.wikipedia.org/wiki/Graph_theory", "anchor_text": "graph", "paragraph_index": 1}, {"url": "https://en.wikipedia.org/wiki/Bipartite_graph", "anchor_text": "bipartite", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/Spanning_tree", "anchor_text": "spanning tree", "paragraph_index": 4}, {"url": "https://en.wikipedia.org/wiki/Glossary_of_graph_theory_terms#subgraph", "anchor_text": "subgraph", "paragraph_index": 4}, {"url": "https://en.wikipedia.org/wiki/Depth-first_search", "anchor_text": "Depth first search", "paragraph_index": 8}, {"url": "https://en.wikipedia.org/wiki/Kuratowski%27s_theorem", "anchor_text": "Kuratowski\u2019s Theorem", "paragraph_index": 13}], "all_paragraphs": ["Planar graphs play a central role in many problems in computational geometry. Determining isomorphism of chemical structures is simplified if the structures are planar. Another example is when an engineer wishes to embed a network of components on a chip. The components are represented by wires, and no two wires may cross without creating a short circuit. This problem can be solved by treating the network as a graph and finding a planar embedding of it.", "Below are some basic concepts needed. A graph G=(V, E) is planar if it is possible to draw it on a plane so that no edges intersect, except at endpoints. Such a drawing is called a planar embedding. One example of planar graph is K4, the complete graph of 4 vertices (Figure 1).", "Not all graphs are planar. Figure 2 gives examples of two graphs that are not planar. They are known as K5, the complete graph on five vertices, and K_{3,3}, the complete bipartite graph on two sets of size 3. No matter what kind of convoluted curves are chosen to represent the edges, the attempt to embed them always fails when the last of the edges cannot be inserted without crossing over some other edge, as illustrated in the figure.", "A sequence of consecutive edges that connect u and v is called a path of G from u to v. A path is simple if all of its vertices are distinct. A path from a vertex to itself is a closed path. A closed path from v to v with one or more edges is a cycle if all its edges are distinct and the only vertex to appear twice is v. We use p: u \u21d2* v to denote that p is a path from u to v in G.", "A (directed, rooted) tree T is a directed graph with one root r, such that every vertex in T is reachable from r, no edges enter r, and exactly one edge enters every other vertex in T. The relation \u201c(v, w) is an edge in T\u201d is denoted by v \u2192 w. The relation \u201cthere is a path from v to w in T\u2019\u2019 is denoted by v \u2192* w. If v \u2192 w, v is the father of w and w is a son of v. If v \u2192* w, v is an ancestor of w and w is a descendant of v. Every vertex is an ancestor and a descendant of itself. If G is a directed graph, a tree T is a spanning tree of G if T is a subgraph of G that contains all the vertices of G.", "A subdivision of an edge (x, y) of a graph is obtained by creating a new node z, and replacing (x, y) with new edges (x, z) and (z, y). A subdivision of a graph is any graph that can be obtained from it by a sequence of subdivision operations.", "Since K5 and K_{3,3} are non-planar, it is obvious that subdivisions of these graphs are also non-planar. Therefore, a graph that has a subgraph that is a subdivision of K5 or K_{3,3} as a subgraph must be non-planar. Such a subgraph is said to be homeomorphic to a K_{3, 3} or a K5. A famous results in graph theory is the theorem of Kuratowski, which states that the absence of a subdivision of a K5 or a K_{3,3} is also sufficient for a graph to be planar.", "In general, graph algorithms require a systematic way of exploring a graph. The most important and common technique used by the planarity testing algorithms is the Depth First Search.", "Depth first search (DFS) is a method for visiting all the vertices of a graph G in a specific way. It starts from an arbitrarily chosen vertex of G as a root node, and continues moving from the current vertex to an unexplored adjacent neighbor. When the current vertex has no unexplored adjacent vertices, the traversal backtracks to the first vertex with unexplored adjacent vertices. Look at the figures below for an example of DFS.", "The edges used by the DFS to reach the vertices of G form a spanning tree T of G, called Palm Tree, or DFS Tree. So the search somehow converts G into a directed graph. The root of T is the vertex from which the visit is started. The edges of T are called tree edges, while the remaining edges of G are called back edges and are denoted by dashed curve in the palm tree. Depth first search is important because the structure of paths in a palm tree is very simple.", "An undirected graph G is connected if, for each pairs of vertices u and v, G contains a path from u to v. A connected component of a graph is a maximal connected subgraph.", "An articulation vertex in a graph is a vertex whose deletion disconnects the graph. A graph is biconnected if it has no articulation vertex. A biconnected component of a graph is a maximal biconnected subgraph.", "Kuratowski subgraph is a subgraph that has a subdivision of K5 or K_{3, 3}.", "Kuratowski\u2019s Theorem (Kuratowski [Ku30]) A finite graph is planar if and only if it does not contain Kuratowski subgraph.", "A proof of this theorem by Dirac and Schuster (1954) can be found in [BM76]. The proof is quite lengthy, in which both of the two main lemmas and the main proof of the theorem used contradiction. Another proof that using induction on the number of vertices is due to Thomassen (1980) [GT87]. Although this proof is not the shortest or easiest, it\u2019s very illuminating in that it also yields other results about planar embeddings. One result is Fary\u2019s theorem that the edges of a planar embedding of a simplicial graph can be chosen to be straight lines (others are Tutte\u2019s theorem and Whitney\u2019s theorem). Moreover, Thomassen\u2019s proof is readily converted into a planarity algorithm that is polynomial in the number of vertices.", "One might wonder if the elegant theorem above of Kuratowski could be used as a criterion to test for graph planarity in a naive way. The answer is yes, and the naive algorithm based on this theorem has exponential running time, as illustrated below.", "The degree or valence of a vertex is number of incident edges of that vertex. Let u be a vertex of degree 2 in a graph G=(V,E), and let e1 and e2 be the edges incident on u, say e1=(u,v), e2=(u, w). The graph obtained by \u201csmoothing at u\u201d has for its vertex set V/{u} and for its edge set E/{e1, e2} plus a new edge between v and w. Subdividing this new edge would invert the operation of smoothing at u. Then we have the following result, which is a consequence of Kuratowski\u2019s theorem:", "Let G be a graph. For each subset of E whose removal leaves only one nontrivial component H, construct the \u201csmoothing graph\u201d H^{smooth} by successively smoothing over every vertex of valence 2 in H, except possibly for a last vertex if H is a cycle. If some H^{smooth} is isomorphic to K5 or K_{3, 3} then the graph is nonplanar, otherwise, G is planar.", "Since there are 2^{|E|} subsets of edges to consider, this naive algorithm has exponential running time.", "Path addition algorithm of Hopcroft and Tarjan", "The best approach to the planarity problem seems to be an attempt to construct a representation of a planar embedding of the given graph. If such a presentation can be completed then the graph is planar; if not, then the graph is nonplanar. One such algorithm is the path addition method of Hopcroft and Tarjan [HT74]. They were first to show that planarity testing can be done in linear time.", "Before giving the sketch of the algorithm, we could make a few remarks in order to restrict the class of the considered graph G. It\u2019s obvious that a graph is planar if and only if all of its connected components are planar. Thus, we may assume that G is connected.", "A graph is planar if and only if all its biconnected components are planar ([Be64]). Moreover, the articulation vertices can be found in linear time ([HT73], [Ta72]), so it suffices to embed each biconnected component separately, and then connect them by their adjoining articulation vertices. Therefore, we may assume that G is biconnected.", "The following result is the well-known theorem of Euler:", "(Euler 1750) Let G be a connected planar graph, and let n, m, f denote respectively the number of vertices, edges and faces of G. Then n-m+f=2.", "This theorem can be proved by induction on the number of edges m. What we need is the following corollary:", "If G is a planar graph with n (\u2265 3) vertices and m edges, then m \u2264 3n - 6.", "Now we\u2019re ready to give the outline of the path addition method.", "Each recursive call on the algorithm requires finding a cycle and adding to it one simple path at a time. Each such new path connects two old vertices via new edges and vertices (whole pieces are sometimes flipped over, around some line; in order to do this, we need to use a corollary of the well-known Jordan Curve Theorem: a simple closed curve divides the plane into exactly two connected regions). That explains the name of \u201cpath addition method\u201d. That also explains the important use of DFS to divide the graph into simple paths which may be assembled into the cycles necessary for planarity testing. I will take the example of graph G and DFS tree T of Figure 3 above for illustration.", "Now consider the first cycle c. It will consist of a sequence of tree edges followed by one back edge in T. The numbering of vertices is such that the vertices are in order by number along the cycle. So in this example the cycle c is 1 \u2192 2 \u2192 3 \u2192 4 \u2192 5 \u2192 8 \u2192 1. When c is removed, G falls into several connected pieces. Each piece not part of the cycle will consist either of a single back edge (v, w) (piece s1 in this example), or of a tree edge (v, w) plus a subtree with root w, plus all back edges which lead from the subtree (piece s2 in this case). Each piece can go either \u201cinside\u2019\u2019 or \u201coutside\u2019\u2019 c by the Jordan Curve Theorem. When we add a piece, certain other pieces must be moved or \u201cflipped\u2019\u2019 from the inside to the outside or vice versa if necessary (to maintain the planarity) until either a piece cannot be added or the entire graph is embedded in the plane. This example does not show the \u201cflipped\u2019\u2019 case, but one can refer to Figure 4 and 5 in the article for illustration. A modification of DFS will help generating an order of paths such that all paths in one piece are generated before paths in any other piece (s1 has one path and s2 has three paths in this case), and the pieces are explored in decreasing order of v where v is the starting point of path as above.", "A piece must be embedded completely on one side of c by the Jordan Curve Theorem. To embed a segment (say s2), we find a path p in it. We choose a side, say the left, on which to embed p. We compare p with previously embedded back edges to determine if p can be embedded. If not, we move pieces which have back edges blocking p from the left to the right. If p can be embedded after moving pieces, we embed it. However, if we move pieces from the left to the right we may have to move other pieces from the right to the left. Thus it may be impossible to embed p. If so, we declare the graph nonplanar. If p can be embedded, we try to embed the rest of the piece (s2) by using the algorithm recursively. Then we try to embed the next piece. In this example, the piece s2 need to be transformed to piece s2' as shown in Figure 5.", "Although the algorithm inner working is based on the search for a planar representation of the input graph, how to actually produce a planar embedding of it was not described. Twenty years later, Mehlhorn and Mutzel filled the gap, describing how to collect, during the testing phase, the information needed to construct the planar embedding that was implicitly used to show planarity [MM96].", "Planar graphs and planarity testing play an essential role in various problems in computational geometry, including geographic information systems, point location. For example, the design of integrated circuits requires knowing when a circuit may be embedded in a plane.", "In 1974, Hopcroft and Tarjan [HT74] proposed the first linear-time planarity testing algorithm. This algorithm, also called path-addition algorithm, starts from a cycle and adds to it one path at a time. However, the algorithm is so complex and difficult to implement that several other contributions followed their breakthrough. For example, about twenty years after [HT74], Mehlhorn and Mutzel [MM96] contributed a paper to clarify how to construct the embedding of a graph that is found to be planar by the original Hopcroft and Tarjan algorithm.", "[Be64] Berge, C., The Theory of Graphs and Its Applications, Alision Doig. Methuen, London, 1964.", "[Go63] Goldstein, A. J., An efficient and constructive algorithm for testing whether a graph can be embedded in a plane, Graph and Combinatorics Conf., Contract No. NONR 1858-(21), 1963.", "[MM96] Kurt Mehlhorn and Petra Mutzel., On the embedding phase of the Hopcroft and Tarjan planarity testing algorithm., Algorithmica, 16:233\u2013242, 1996.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fc56d2df2b0b3&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-planarity-and-path-addition-method-of-hopcroft-tarjan-for-planarity-testing-c56d2df2b0b3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-planarity-and-path-addition-method-of-hopcroft-tarjan-for-planarity-testing-c56d2df2b0b3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-planarity-and-path-addition-method-of-hopcroft-tarjan-for-planarity-testing-c56d2df2b0b3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-planarity-and-path-addition-method-of-hopcroft-tarjan-for-planarity-testing-c56d2df2b0b3&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----c56d2df2b0b3--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c56d2df2b0b3--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@hoangthanhtungvn?source=post_page-----c56d2df2b0b3--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@hoangthanhtungvn?source=post_page-----c56d2df2b0b3--------------------------------", "anchor_text": "Tung Hoang"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F83796f4b68bb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-planarity-and-path-addition-method-of-hopcroft-tarjan-for-planarity-testing-c56d2df2b0b3&user=Tung+Hoang&userId=83796f4b68bb&source=post_page-83796f4b68bb----c56d2df2b0b3---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc56d2df2b0b3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-planarity-and-path-addition-method-of-hopcroft-tarjan-for-planarity-testing-c56d2df2b0b3&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc56d2df2b0b3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-planarity-and-path-addition-method-of-hopcroft-tarjan-for-planarity-testing-c56d2df2b0b3&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://en.wikipedia.org/wiki/Planarity_testing", "anchor_text": "planarity testing"}, {"url": "https://en.wikipedia.org/wiki/Graph_theory", "anchor_text": "graph"}, {"url": "https://en.wikipedia.org/wiki/Bipartite_graph", "anchor_text": "bipartite"}, {"url": "https://en.wikipedia.org/wiki/Spanning_tree", "anchor_text": "spanning tree"}, {"url": "https://en.wikipedia.org/wiki/Glossary_of_graph_theory_terms#subgraph", "anchor_text": "subgraph"}, {"url": "https://en.wikipedia.org/wiki/Depth-first_search", "anchor_text": "Depth first search"}, {"url": "https://en.wikipedia.org/wiki/Kuratowski%27s_theorem", "anchor_text": "Kuratowski\u2019s Theorem"}, {"url": "https://medium.com/tag/programming?source=post_page-----c56d2df2b0b3---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/computer-science?source=post_page-----c56d2df2b0b3---------------computer_science-----------------", "anchor_text": "Computer Science"}, {"url": "https://medium.com/tag/graph?source=post_page-----c56d2df2b0b3---------------graph-----------------", "anchor_text": "Graph"}, {"url": "https://medium.com/tag/depth-first-search?source=post_page-----c56d2df2b0b3---------------depth_first_search-----------------", "anchor_text": "Depth First Search"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc56d2df2b0b3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-planarity-and-path-addition-method-of-hopcroft-tarjan-for-planarity-testing-c56d2df2b0b3&user=Tung+Hoang&userId=83796f4b68bb&source=-----c56d2df2b0b3---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc56d2df2b0b3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-planarity-and-path-addition-method-of-hopcroft-tarjan-for-planarity-testing-c56d2df2b0b3&user=Tung+Hoang&userId=83796f4b68bb&source=-----c56d2df2b0b3---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc56d2df2b0b3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-planarity-and-path-addition-method-of-hopcroft-tarjan-for-planarity-testing-c56d2df2b0b3&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c56d2df2b0b3--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fc56d2df2b0b3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-planarity-and-path-addition-method-of-hopcroft-tarjan-for-planarity-testing-c56d2df2b0b3&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----c56d2df2b0b3---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----c56d2df2b0b3--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----c56d2df2b0b3--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----c56d2df2b0b3--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----c56d2df2b0b3--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----c56d2df2b0b3--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----c56d2df2b0b3--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----c56d2df2b0b3--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----c56d2df2b0b3--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@hoangthanhtungvn?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@hoangthanhtungvn?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Tung Hoang"}, {"url": "https://medium.com/@hoangthanhtungvn/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "24 Followers"}, {"url": "https://www.linkedin.com/in/thoang3/", "anchor_text": "https://www.linkedin.com/in/thoang3/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F83796f4b68bb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-planarity-and-path-addition-method-of-hopcroft-tarjan-for-planarity-testing-c56d2df2b0b3&user=Tung+Hoang&userId=83796f4b68bb&source=post_page-83796f4b68bb--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2F83796f4b68bb%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-planarity-and-path-addition-method-of-hopcroft-tarjan-for-planarity-testing-c56d2df2b0b3&user=Tung+Hoang&userId=83796f4b68bb&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}