{"url": "https://towardsdatascience.com/a-python-api-for-background-requests-based-on-flask-and-multi-processing-187d0e3049c9", "time": 1683001865.672537, "path": "towardsdatascience.com/a-python-api-for-background-requests-based-on-flask-and-multi-processing-187d0e3049c9/", "webpage": {"metadata": {"title": "A Solution of Rest API for Concurrent Background Requests | by Boning Zhang | Towards Data Science", "h1": "A Solution of Rest API for Concurrent Background Requests", "description": "This blog will first introduce you to Rest API, explaining its basics and what we can do using Rest API. After that, we will work together to build our first API using Python flask package. Finally\u2026"}, "outgoing_paragraph_urls": [{"url": "https://burntbit.com/a-python-api-for-background-requests-based-on-flask-and-multi-processing/", "anchor_text": "Big Data Daily", "paragraph_index": 0}, {"url": "https://www.linkedin.com/pulse/python-api-background-requests-based-flask-boning-zhang/?trackingId=5yep7JGG3P%2Fetv4XPJG%2FYQ%3D%3D", "anchor_text": "Linkedin", "paragraph_index": 0}, {"url": "https://github.com/BoningZhang/intro_api", "anchor_text": "Git", "paragraph_index": 1}, {"url": "http://host:port/equation/x+8=20", "anchor_text": "http://host:port/equation?x+8=20", "paragraph_index": 2}, {"url": "http://0.0.0.0:6060/", "anchor_text": "http://0.0.0.0:6060/", "paragraph_index": 5}, {"url": "http://0.0.0.0:6060/", "anchor_text": "http://0.0.0.0:6060/", "paragraph_index": 5}, {"url": "https://flask.palletsprojects.com/en/1.1.x/tutorial/deploy/", "anchor_text": "waitress", "paragraph_index": 6}, {"url": "https://www.codecademy.com/articles/what-is-cors", "anchor_text": "https://www.codecademy.com/articles/what-is-cors", "paragraph_index": 6}, {"url": "http://host:port/task/job_A", "anchor_text": "http://host:port/task/job_A", "paragraph_index": 8}, {"url": "http://host:port/task/job_B", "anchor_text": "http://host:port/task/job_B", "paragraph_index": 8}, {"url": "https://towardsdatascience.com/a-python-implementation-of-concurrent-consumers-for-google-cloud-platform-pub-sub-991ae8b9841d", "anchor_text": "A generic framework of concurrent consumers for Google Cloud Platform Pub/Sub", "paragraph_index": 9}], "all_paragraphs": ["This post can also be found in Big Data Daily and Linkedin.", "This blog will first introduce you to Rest API, explaining its basics and what we can do using Rest API. After that, we will work together to build our first API using Python flask package. Finally, we will work through a generic code framework for time-expensive jobs running in background using multiprocessing module. The source code of the whole project can be found at Git.", "First things first, let me briefly explain what API is and what it can help us. Simply speaking, API is a program running in a host and listening to a port to receive and respond HTTP requests sent from internet. Suppose we would like to solve an equation which is beyond our knowledge, and somebody developed a solver API running in a host, then we can call the API to get the answer by simply pasting a URL in a browser: http://host:port/equation?x+8=20. See how simple it is! If we have some complicated tasks that are not suitable to be implemented in our frontend UI, or we have credential data that we would like to separate them from our UI, API is the solution. Then what frontend needs to know is the interface to communicate to the API, and simply send requests to it. Frontend will not implement the tasks or touch the credential data.", "In the remaining part, I will show step by step to build a Python API running requests in background based on flask and multiprocessing module. These steps should be easy to follow even you have no experience with flask or API.", "As a start, let\u2019s first build a simple API to say hello to the world. For those who are already familiar with flask API, you can skip this part.", "Now, let\u2019s save it as intro_api.py and run it as \u201cpython intro_api.py\u201d. You have successfully built an API and run it. Simple enough? Then let\u2019s call it! What we need to do is just copy and paste http://0.0.0.0:6060/ in our browser. See? Our webpage shows \u201cHello, World!\u201d, this is exactly what we defined in our API. Let me explain line by line for this script. First, we import Flask package, and create an API with its name as the module\u2019s name using Flask(__name__). Then we define a function to respond to HTTP GET requests sent from the rout path, i.e. host:port/. Here the route decorator @app.route() wraps the method that will be called by the URL. It will affect your understanding of the flask API in this blog even if you have no ideas about route decorator. But there are two things I would like to emphasize about it. (1) Note that \u2018/\u2019 in @app.route(\u2018/\u2019, methods=[\u2018GET\u2019]), it defines the URL (http://0.0.0.0:6060/) used to call this method, i.e. hello_world(). (2) methods=[\u2018GET\u2019]) defines that the method will only be called by HTTP GET requests.", "Then we run this API in the local host (i.e. 0.0.0.0) and port=6060 in the main function. Note here we run it in develop environment by calling app.run(), which is not designed to be particularly efficient, stable, or secure. Let\u2019s use package waitress instead to run the API with production server. And then the host becomes the IP address of the computer running our API. Notice we use CORS package to allow cross-origin access, otherwise some modern browsers may decline to access our API. See more about CORS at https://www.codecademy.com/articles/what-is-cors.", "Next, let\u2019s do some real jobs in our API by defining another route decorator and its associated method. This method will respond to HTTP POST requests.", "Here request.json is the request body in json format. Request body will be sent from frontend UI to the backend API, it is always used to sent some additional information from frontend to the API. Remember that an API can be called many times concurrently, thus each session, i.e. call, will have its own request body. Say, A and B are both calling the API by http://host:port/task/job_A and http://host:port/task/job_B with different request bodies. Then each session will have its own request body in the memory, i.e. A and B will trigger the same function but running with different request.json variable. Notice thatthe job_id should be in the format of uuid since we define <uuid:job_id> in the decorator.", "So far so good? The above function is very straightforward, it receives a POST request and gets its body, and then runs some tasks and responds the output to the client. But what if this task is time consuming, say minutes to run a machine learning model? The program will be running smoothly until run_task(), and it will then hang there since run_task() will take several minutes to return back. And our webpage will be blocked and users have to wait for its completion without any other choices, e.g. submitting another job. This is of course not what we would like to see. A simple solution is background running of the tasks using multi-processing. Another solution is message queue, basically the API will only be designed to push job information to the message queue and then return back to the frontend, while dameon services will pull messages from the message queue and run the real tasks. More details about it can be found in my another blog: A generic framework of concurrent consumers for Google Cloud Platform Pub/Sub.", "Here we run run_task() in a background process without waiting for its completion and notify the client that job received. In this case, the webpage will be not blocked and users can do some other operations in this webpage, such as submitting another job. But the the missing point is that users will not be notified when the job is done. Then we need to record job\u2019s status in run_task().", "What if there is concurrency limit on the jobs? Let\u2019s say we can only run 4 concurrent run_task(), then the other requests should be in waiting status. Besides, let\u2019s only allow 8 concurrent requests being processed, i.e. waiting and running. In this scenario, we need a database to record the status of the requests to help check the availability of workers.", "Now we have built our first Rest API, and are exposed to the code framework of running time-expensive requests in background. Hopefully you will find it interesting and useful, and maybe you would like to build an API to let others interact with your machine learning models.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F187d0e3049c9&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-python-api-for-background-requests-based-on-flask-and-multi-processing-187d0e3049c9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-python-api-for-background-requests-based-on-flask-and-multi-processing-187d0e3049c9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-python-api-for-background-requests-based-on-flask-and-multi-processing-187d0e3049c9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-python-api-for-background-requests-based-on-flask-and-multi-processing-187d0e3049c9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----187d0e3049c9--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----187d0e3049c9--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@boning.zhangcu?source=post_page-----187d0e3049c9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@boning.zhangcu?source=post_page-----187d0e3049c9--------------------------------", "anchor_text": "Boning Zhang"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb557b7d7f871&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-python-api-for-background-requests-based-on-flask-and-multi-processing-187d0e3049c9&user=Boning+Zhang&userId=b557b7d7f871&source=post_page-b557b7d7f871----187d0e3049c9---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F187d0e3049c9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-python-api-for-background-requests-based-on-flask-and-multi-processing-187d0e3049c9&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F187d0e3049c9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-python-api-for-background-requests-based-on-flask-and-multi-processing-187d0e3049c9&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@codestorm?utm_source=medium&utm_medium=referral", "anchor_text": "Safar Safarov"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://burntbit.com/a-python-api-for-background-requests-based-on-flask-and-multi-processing/", "anchor_text": "Big Data Daily"}, {"url": "https://www.linkedin.com/pulse/python-api-background-requests-based-flask-boning-zhang/?trackingId=5yep7JGG3P%2Fetv4XPJG%2FYQ%3D%3D", "anchor_text": "Linkedin"}, {"url": "https://github.com/BoningZhang/intro_api", "anchor_text": "Git"}, {"url": "http://host:port/equation/x+8=20", "anchor_text": "http://host:port/equation?x+8=20"}, {"url": "http://0.0.0.0:6060/", "anchor_text": "http://0.0.0.0:6060/"}, {"url": "http://0.0.0.0:6060/", "anchor_text": "http://0.0.0.0:6060/"}, {"url": "https://flask.palletsprojects.com/en/1.1.x/tutorial/deploy/", "anchor_text": "waitress"}, {"url": "https://www.codecademy.com/articles/what-is-cors", "anchor_text": "https://www.codecademy.com/articles/what-is-cors"}, {"url": "http://host:port/task/job_A", "anchor_text": "http://host:port/task/job_A"}, {"url": "http://host:port/task/job_B", "anchor_text": "http://host:port/task/job_B"}, {"url": "https://towardsdatascience.com/a-python-implementation-of-concurrent-consumers-for-google-cloud-platform-pub-sub-991ae8b9841d", "anchor_text": "A generic framework of concurrent consumers for Google Cloud Platform Pub/Sub"}, {"url": "https://medium.com/tag/python?source=post_page-----187d0e3049c9---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/python-api?source=post_page-----187d0e3049c9---------------python_api-----------------", "anchor_text": "Python Api"}, {"url": "https://medium.com/tag/flask?source=post_page-----187d0e3049c9---------------flask-----------------", "anchor_text": "Flask"}, {"url": "https://medium.com/tag/background-request?source=post_page-----187d0e3049c9---------------background_request-----------------", "anchor_text": "Background Request"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----187d0e3049c9---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F187d0e3049c9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-python-api-for-background-requests-based-on-flask-and-multi-processing-187d0e3049c9&user=Boning+Zhang&userId=b557b7d7f871&source=-----187d0e3049c9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F187d0e3049c9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-python-api-for-background-requests-based-on-flask-and-multi-processing-187d0e3049c9&user=Boning+Zhang&userId=b557b7d7f871&source=-----187d0e3049c9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F187d0e3049c9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-python-api-for-background-requests-based-on-flask-and-multi-processing-187d0e3049c9&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----187d0e3049c9--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F187d0e3049c9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-python-api-for-background-requests-based-on-flask-and-multi-processing-187d0e3049c9&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----187d0e3049c9---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----187d0e3049c9--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----187d0e3049c9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----187d0e3049c9--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----187d0e3049c9--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----187d0e3049c9--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----187d0e3049c9--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----187d0e3049c9--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----187d0e3049c9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@boning.zhangcu?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@boning.zhangcu?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Boning Zhang"}, {"url": "https://medium.com/@boning.zhangcu/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "31 Followers"}, {"url": "https://www.linkedin.com/in/boning-zhang-937b1775", "anchor_text": "https://www.linkedin.com/in/boning-zhang-937b1775"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb557b7d7f871&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-python-api-for-background-requests-based-on-flask-and-multi-processing-187d0e3049c9&user=Boning+Zhang&userId=b557b7d7f871&source=post_page-b557b7d7f871--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fa3a5565edba7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-python-api-for-background-requests-based-on-flask-and-multi-processing-187d0e3049c9&newsletterV3=b557b7d7f871&newsletterV3Id=a3a5565edba7&user=Boning+Zhang&userId=b557b7d7f871&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}