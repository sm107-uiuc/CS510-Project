{"url": "https://towardsdatascience.com/debugging-in-tensorflow-392b193d0b8", "time": 1683014758.982226, "path": "towardsdatascience.com/debugging-in-tensorflow-392b193d0b8/", "webpage": {"metadata": {"title": "Debugging in TensorFlow. How to Debug a TensorFlow Training\u2026 | by Chaim Rand | Towards Data Science", "h1": "Debugging in TensorFlow", "description": "In some of my previous posts (here, here, and here), I told you a bit about how my team at Mobileye, (officially known as Mobileye, an Intel Company), uses TensorFlow, the Amazon SageMaker and Amazon\u2026"}, "outgoing_paragraph_urls": [{"url": "https://medium.com/@julsimon/making-amazon-sagemaker-and-tensorflow-work-for-you-893365184233", "anchor_text": "here", "paragraph_index": 0}, {"url": "https://medium.com/@julsimon/deep-dive-on-tensorflow-training-with-amazon-sagemaker-and-amazon-s3-12038828075c", "anchor_text": "here", "paragraph_index": 0}, {"url": "https://towardsdatascience.com/tensorflow-performance-analysis-314b56dceb59", "anchor_text": "here", "paragraph_index": 0}, {"url": "https://www.tensorflow.org/", "anchor_text": "TensorFlow", "paragraph_index": 0}, {"url": "https://aws.amazon.com/sagemaker/", "anchor_text": "Amazon SageMaker", "paragraph_index": 0}, {"url": "https://aws.amazon.com/s3/", "anchor_text": "Amazon s3", "paragraph_index": 0}, {"url": "https://www.tensorflow.org/tensorboard", "anchor_text": "TensorBoard", "paragraph_index": 9}, {"url": "https://medium.com/@chaimrand/debugging-in-tensorflow-392b193d0b8", "anchor_text": "Amazon Sagemaker Debugger", "paragraph_index": 9}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/ModelCheckpoint", "anchor_text": "keras model checkpoint callback", "paragraph_index": 18}, {"url": "https://www.tensorflow.org/api_docs/python/tf/data/Options", "anchor_text": "tf.data.Options", "paragraph_index": 22}, {"url": "https://github.com/tensorflow/tensorflow", "anchor_text": "tensorflow source code", "paragraph_index": 26}, {"url": "https://www.tensorflow.org/guide/function", "anchor_text": "TensorFlow documentation", "paragraph_index": 26}, {"url": "https://www.tensorflow.org/guide/intro_to_graphs", "anchor_text": "graph mode", "paragraph_index": 26}, {"url": "https://www.tensorflow.org/api_docs/python/tf/function", "anchor_text": "tf.function", "paragraph_index": 26}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/Model#fit", "anchor_text": "tf.keras.model.fit", "paragraph_index": 26}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/Model#compile", "anchor_text": "model.compile()", "paragraph_index": 26}, {"url": "https://www.tensorflow.org/api_docs/python/tf/debugging", "anchor_text": "tf.debugging", "paragraph_index": 29}, {"url": "https://www.tensorflow.org/api_docs/python/tf/debugging/enable_check_numerics", "anchor_text": "tf.debugging.enable_check_numerics", "paragraph_index": 29}, {"url": "https://www.tensorflow.org/api_docs/python/tf/print", "anchor_text": "tf.print", "paragraph_index": 30}, {"url": "https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html", "anchor_text": "pull the docker image used", "paragraph_index": 36}, {"url": "https://aws.amazon.com/blogs/machine-learning/using-pipe-input-mode-for-amazon-sagemaker-algorithms/", "anchor_text": "Amazon SageMaker pipe mode", "paragraph_index": 37}, {"url": "https://medium.com/@julsimon/deep-dive-on-tensorflow-training-with-amazon-sagemaker-and-amazon-s3-12038828075c", "anchor_text": "alternative methods for accessing your data from s3", "paragraph_index": 37}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/Model#fit", "anchor_text": "tf.keras.model.fit", "paragraph_index": 45}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/Model#train_step", "anchor_text": "train_step", "paragraph_index": 47}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/Model#make_train_function", "anchor_text": "make_train_function", "paragraph_index": 47}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/Model", "anchor_text": "tf.keras.model", "paragraph_index": 47}, {"url": "https://github.com/tensorflow/tensorflow/blob/v2.3.0/tensorflow/python/keras/engine/training.py#L716-L760", "anchor_text": "default implementations of the routines in github", "paragraph_index": 48}], "all_paragraphs": ["In some of my previous posts (here, here, and here), I told you a bit about how my team at Mobileye, (officially known as Mobileye, an Intel Company), uses TensorFlow, the Amazon SageMaker and Amazon s3 to train our deep neural networks on large quantities of data. In this post, I want to talk about debugging in TensorFlow.", "It is well known, that program debugging is an integral part of software development, and that the time that is spent debugging, often eclipses the time that it takes to write the original program.", "Debugging is hard, and much has been written about how to design and implement one's program in order to increase the reproducibility of bugs, and ease the process of root cause analysis.", "In machine learning, the task of debugging is complicated by the stochasticity that is inherent to machine learning algorithms, and by the fact that the algorithms are run on dedicated HW accelerators often on remote machines.", "Debugging in TensorFlow is further complicated due to the use of symbolic execution (a.k.a. graph mode), that boosts the runtime performance of the training session, but, at the same time, limits the ability to freely read arbitrary tensors in the graph, a capability that is important for debugging.", "In this post, I will expand on the difficulties of debugging TensorFlow training programs, and provide some suggestions for how to address those difficulties.", "For legal purposes, I want to clarify that despite my carefully chosen subtitle, I provide no guarantees that anything I write here will prevent you from losing your mind. On the contrary, I think that I can all but guarantee that you probably will lose your mind when debugging your TensorFlow program, despite anything I write. But, perhaps, you will lose your mind just a little bit less.", "Before we begin, let's clarify the scope of our discussion.", "In the context of this post, debugging refers to the art of identifying a bug, either in your code, or in your data, that causes your training session to abruptly break down.", "A different kind of debugging, that is out of the scope of this post, refers to the task of fixing, or tuning, a model that is not converging, or that is producing unsatisfactory predictions on a certain class of inputs (e.g. a vehicle detection model that is failing to identify pink cars). This procedure might involve defining and evaluating model metrics, collection and statistical analysis of the model artifacts (such as gradients, activations and weights), using tools such as TensorBoard and Amazon Sagemaker Debugger, hyperparameter tuning, rearchitecting, or modifying your data input using techniques such as augmentation and boosting. Tuning a model can be an extremely challenging, time consuming and often frustrating task.", "Within the realm of solving bugs in one's code or data, I like to make the distinction between two categories of bugs: bugs and monster bugs.", "By bugs I refer to issues that are relatively easy to reproduce. Examples of bugs are models with an assumption on the sizes of the input tensors that doesn't match the training data, trying to concatenate mismatched tensors, or performing a tf operation on an invalid data type. These usually don't depend on specific model states and data and are typically relatively easy to reproduce. They aren't necessarily easy to fix, but they are child's play compared to monster bugs.", "Monster bugs are bugs that occur sporadically and unpredictably. Bugs that reproduce only on a specific state of the model, a specific data sample, or a specific combination of the model state and data input, could pose a serious challenge and might constitute a monster bug.", "Here is an example of a scenario, based on true events, that is certain to increase your blood pressure:", "It's Friday afternoon and your model has been training successfully for a couple of days. The loss appears to be converging nicely, and you are starting to picture a relaxing, post-release, weekend vacation, in a getaway location of your choosing. You glance back at your screen for a moment and notice that, all of a sudden, without any warning, your loss has become NaN. \"Surely\", you think to yourself, \"this must have been due to some totally random, momentary, macrocosmic glitch\", and you immediately resume training from your last valid model checkpoint. A few more hours pass, and it happens again, and then again. Now you start to panic, the dreamy pictures of your weekend paradise now replaced with thoughts of the tantalizing effort of needing to solve a monster bug.", "We will come back to this sorrowful example in a short while. But first, let's check off some mandatory \"debugging\" check-boxes.", "Much ink has been spilled on the art of debugging and, more importantly, the art of developing debuggable code. In this section, I will mention a few techniques, as they pertain to TensorFlow applications. This list is, by no means, comprehensive.", "This is probably the most important thing I will write in this post. Always configure your training session such that it periodically saves snapshots of your model.", "Programming bugs are not the only reason why your training might break down... If you are running in the cloud, you might get a spot instance termination, or hit an internal server error. If you are running locally, there might be a power outage, or your GPU might explode. If you have been training for days, without storing intermediate checkpoints, the damage could be extreme. If you saved a checkpoint every hour, then all you lost is, at most, an hour. TensorFlow offers utilities for storing checkpoints, such as the keras model checkpoint callback. All you need to do, is to decide how frequently to capture such snapshots, by weighing the overhead of storing checkpoints, against the cost of an unplanned break down in the training session.", "I apologize to my Covid19 contemporaries for my choice of title for this subsection, I just couldn't resist. By contact tracing, I am referring to the ability to keep track of the training data that is being entered into the training pipeline.", "Suppose your training data is divided into 100,000 in tfrecord files, and that one of these files has a formatting error that crashes, or stalls, your program. One way to narrow down your search for the problematic file, is to record each file that is entered into the pipeline. Once you hit the crash you can look back at your log to see what the most recent files to be entered, were. As I have mentioned in previous posts, we train using the Amazon SageMaker pipe mode feature. A fairly recent addition to pipe mode, is a, pipe mode server side log that records the files that are being entered into the pipe.", "Recording the data that enters into pipeline can assist in one's ability to reproduce bugs, which brings us to our next point.", "The ease at which a bug can be reproduced directly impacts how easily it can be solved. We always want to write our code so as to ensure reproducibity. This is not easy in TensorFlow programs. Machine learning applications, often include reliance on the use of random variables. We randomly initialize model weights, we randomly augment data, we randomly shard our data for distributed training, we randomly apply dropouts, we shuffle our input data before each epoch, and then shuffle it again (using tf.dataset.shuffle) before creating batches. We could seed all of the pseudo-random operations with pseudo-random seeds that we record, but keep in mind that there could be many different places that introduce randomization, and keeping track of all of these could easily become a bookkeeping nightmare. I can't tell you how many times I have thought I had removed all elements of randomization, only to find that I missed one. Additionally, there are some random processes that cannot be seeded. If you use multiple processes to import your training data, you might not have any control over the order in which the data records are actually fed (e.g. if experimental_deterministic is set to false in tf.data.Options()). Of course, you could record each sample as it is entered into the pipe, but that would come at a steep, and likely prohibitive, overhead.", "The bottom line is that while it is definitely possible to build reproducible training programs, I think it's wiser to embrace the non-determinism, accept the irreproducible nature of training, and find ways to overcome this debugging limitation.", "A key technique in creating debuggable programs, is to build your application in a modular fashion. Applied to a TensorFlow training loop, this would imply the ability to test different subsets of the training pipeline, such as the dataset, the loss function, different model layers, and callbacks, separately. This is not always easy to do, as some of the training modules (such as the loss function) are pretty dependent on the other modules. But there is a lot of room for creativity. For example, one can test different functions on the input pipeline by simply iterating over the dataset while applying a subset of the dataset operations. One can test a loss function, or a callback, by creating an application that runs just the loss function or callback. One can neutralize the loss function, by replacing it with a dummy loss function. I like to build my models with multiple points of output, i.e. with the ability to easily modify the number of layers in the model so as to test the impact of different layers.", "The more thought you put in to the modularity and debuggability of your program when you are building it, the less you will suffer later on.", "If you are a regular TensorFlow user, you have probably encountered terms such as \"eager execution mode\", \"graph mode\", and the \"tf function qualifier\". You may have heard some (somewhat misleading) statements such as \"debugging in eager execution mode is a piece of cake\", or \"tensorflow 2 runs in eager execution mode\". You may, like me, have ardently dove into the tensorflow source code, trying to make sense of the different execution modes, only to have broken down in sobs, your self-esteem shattered for life. To get a full understanding of how it all works, I refer you to the TensorFlow documentation, and wish you luck. Here we will mention just the gist of it as it pertains to debugging. The most optimal way to run TensorFlow training is to run it in graph mode. Graph mode is a symbolic execution mode, which means that we don't have arbitrary access to the graph tensors. Functions that are wrapped with the tf.function qualifier, will be run in graph mode. When you train with tf.keras.model.fit, by default, the training step is executed in graph mode. Of course, the inability to access arbitrary graph tensors, makes debugging in graph mode difficult. In eager execution mode you can access arbitrary tensors, and even debug with a debugger, (provided that you place your breakpoint in the appropriate place in the model.call() function). Of course, when you run in eager execution mode, your training will run much slower. To program your model to train in eager execution mode, you need to call the model.compile() function with with the run_eagerly flag set to true.", "The bottom line is, when you are training, run in graph mode, when you are debugging, run in eager execution mode. Unfortunately, it is not uncommon for certain bugs to reproduce only in graph mode and not in eager execution mode, which is a real bummer. Also, eager execution is helpful when you are debugging in a local environment, less so in the cloud. It is often not very useful in debugging monster bugs... Unless you first find a way to reproduce the bug in your local environment, (more on this down below).", "Try to make the most of the TensorFlow logger. When you are debugging an issue, set the logger to the most informative level.", "The tf.debugging module offers a bunch of assertion utilities as well as numeric checking functions. In particular, the tf.debugging.enable_check_numerics utility can be helpful in pinpointing problematic functions.", "The tf.print function, which enables printing out arbitrary graph tensors, is an additional utility that I have found extremely useful for debugging.", "And, last but not least, add your own print logs, (in the non-graph portions of the code), to get a better feel for where your program breaks down.", "Sometimes, you will be lucky enough to get an TensorFlow error message. Unfortunately, it is not always immediately clear how to use them. I often get emails from colleagues with cryptic TensorFlow messages, begging for help. When I see messages, such as:", "I ask myself (slightly modified to make the post child friendly) \"What the bleepitybeep am I supposed to with that?\" or \"Why couldn't the friendly-loving TensorFlow engineers give me something more to work with?\". But I quickly calm myself, (sometimes with the help of an alcoholic beverage), and say, \"Chaim, stop being so spoiled. Get back to work and be thankful that you got any message at all.\" The first thing you should do, is to try to reproduce the bug in eager execution mode, and/or with a debugger. Unfortunately, as mentioned above, this doesn't always help.", "There is no arguing the fact that messages such as the ones above are not very helpful. But don't despair. Sometimes, with the help of some investigative work, you will find clues that might lead you in the right direction. Go through the call stack to see if it provides any hints. If the message includes shape sizes, try to match these up against tensors in your graph that might be of the same shape. And, of course, search online to see if others have encountered similar issues and in what scenarios. Don't despair.", "Naturally, debugging in your local environment is easier than debugging on a remote machine, or in the cloud. This is particularly true when you first create your model. Your goal should be to work through as many issues as possible in your local environment before starting to train remotely. Otherwise, you are likely to end up wasting a lot of time and money.", "To increase reproducibility, you should try to make your local environment as similar as possible to the remote environment. If you are using a docker image or virtual environment in your remote environment, try to use the same one locally. (If your remote training is on Amazon SageMaker, you can pull the docker image used.)", "Of course, there may be some elements of the remote training environment that cannot be reproduced locally. For example, you might have encountered a bug that only reproduces when using Amazon SageMaker pipe mode, which is currently only supported when running in the cloud. (In this case you might consider alternative methods for accessing your data from s3.)", "I wish I could tell you that the techniques described here will solve all your problems. But alas, such is not the case. In the next section we will return to the monster bug scenario we illustrated above, and introduce one last debugging technique.", "In the scenario we described above, after days of training, a combination of the particular state of the model and a particular training batch sample, suddenly caused the loss to become NaN.", "Let's evaluate how we can use the debugging techniques above to debug this issue.", "Ideally, we would be able to capture the input and model state right before the loss goes bananas. Then we could reproduce the issue in a controlled (local) environment, in eager execution mode and with a debugger.", "The problem is that we don't know that problem is about to happen, until it actually happens. By the time the loss is reported as NaN, the model has already been updated with NaN weights, and the batch sample that caused the error has already been iterated over.", "The solution I'd like to propose is to customize the training loop such that we record the current sample at every step, and only update the model weights if the gradients are valid. If the gradients are invalid, we will halt training and dump out the last batch sample along with the current model snapshot. This can be carried over to your local environment, where you load the model, and enter the captured data sample in eager execution mode in order to reproduce (and solve) the bug.", "We will get to the code in a moment, but first, a few words about the pros and cons of using custom training loops.", "There is an age-old dispute amongst TensorFlow users as to whether to write custom training loops or rely on high level APIs such as tf.keras.model.fit().", "Proponents of the custom training loop, herald the ability to have line by line control over how the training is performed, and the freedom to be creative. Supporters of the high level API call out the many conveniences it offers, most notably the built-in callback utilities, and distributed strategy support. Using the high level API is also presumed to ensure that you are using a bug-free, and highly optimized implementation of the training loop.", "Starting from version 2.2, TensorFlow introduced the ability to override the train_step and make_train_function routines of the tf.keras.model class. This enables one to introduce some level of customization while continuing to enjoy the conveniences of model.fit(). We will demonstrate how to override these function in such a way that enables us to capture a problematic sample input and model state for local debugging.", "In the code block below, we extend the tf.keras.models.Model object with customized implementations of the train_step and make_train_functions routines. To get a full understanding of the implementation, I recommend that you compare it to the default implementations of the routines in github. You'll notice that I have removed all of the logic relating to metrics calculation and to strategy support in order to make the code more readable. The main changes to note are:", "It is important to note, that there is a small training runtime cost to this technique that comes from reading the data from the dataset in eager execution mode, rather than graph mode. (There are no free lunches.) The precise cost will depend on the size of the model; the larger the model, the less this change will be felt. You should evaluate the overhead of this technique on your own model, and then decide whether, and how, to employ it.", "So long as us humans are involved in the development of AI applications, the prevalence of programming bugs is just about guaranteed. Designing your code with debuggability in mind, and acquiring tools and techniques for solving bugs, may prevent some serious torture down the line.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "I am a Machine Learning Algorithm Developer working on Autonomous Vehicle technologies at Mobileye."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F392b193d0b8&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdebugging-in-tensorflow-392b193d0b8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdebugging-in-tensorflow-392b193d0b8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdebugging-in-tensorflow-392b193d0b8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdebugging-in-tensorflow-392b193d0b8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----392b193d0b8--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----392b193d0b8--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://chaimrand.medium.com/?source=post_page-----392b193d0b8--------------------------------", "anchor_text": ""}, {"url": "https://chaimrand.medium.com/?source=post_page-----392b193d0b8--------------------------------", "anchor_text": "Chaim Rand"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9440b37e27fe&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdebugging-in-tensorflow-392b193d0b8&user=Chaim+Rand&userId=9440b37e27fe&source=post_page-9440b37e27fe----392b193d0b8---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F392b193d0b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdebugging-in-tensorflow-392b193d0b8&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F392b193d0b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdebugging-in-tensorflow-392b193d0b8&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@davidclode?utm_source=medium&utm_medium=referral", "anchor_text": "David Clode"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://medium.com/@julsimon/making-amazon-sagemaker-and-tensorflow-work-for-you-893365184233", "anchor_text": "here"}, {"url": "https://medium.com/@julsimon/deep-dive-on-tensorflow-training-with-amazon-sagemaker-and-amazon-s3-12038828075c", "anchor_text": "here"}, {"url": "https://towardsdatascience.com/tensorflow-performance-analysis-314b56dceb59", "anchor_text": "here"}, {"url": "https://www.tensorflow.org/", "anchor_text": "TensorFlow"}, {"url": "https://aws.amazon.com/sagemaker/", "anchor_text": "Amazon SageMaker"}, {"url": "https://aws.amazon.com/s3/", "anchor_text": "Amazon s3"}, {"url": "https://www.tensorflow.org/tensorboard", "anchor_text": "TensorBoard"}, {"url": "https://medium.com/@chaimrand/debugging-in-tensorflow-392b193d0b8", "anchor_text": "Amazon Sagemaker Debugger"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/ModelCheckpoint", "anchor_text": "keras model checkpoint callback"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/data/Options", "anchor_text": "tf.data.Options"}, {"url": "https://github.com/tensorflow/tensorflow", "anchor_text": "tensorflow source code"}, {"url": "https://www.tensorflow.org/guide/function", "anchor_text": "TensorFlow documentation"}, {"url": "https://www.tensorflow.org/guide/intro_to_graphs", "anchor_text": "graph mode"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/function", "anchor_text": "tf.function"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/Model#fit", "anchor_text": "tf.keras.model.fit"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/Model#compile", "anchor_text": "model.compile()"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/debugging", "anchor_text": "tf.debugging"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/debugging/enable_check_numerics", "anchor_text": "tf.debugging.enable_check_numerics"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/print", "anchor_text": "tf.print"}, {"url": "https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html", "anchor_text": "pull the docker image used"}, {"url": "https://aws.amazon.com/blogs/machine-learning/using-pipe-input-mode-for-amazon-sagemaker-algorithms/", "anchor_text": "Amazon SageMaker pipe mode"}, {"url": "https://medium.com/@julsimon/deep-dive-on-tensorflow-training-with-amazon-sagemaker-and-amazon-s3-12038828075c", "anchor_text": "alternative methods for accessing your data from s3"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/print", "anchor_text": "tf.prints"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/debugging/enable_check_numerics", "anchor_text": "tf.debugging.enable_check_numerics"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/Model#fit", "anchor_text": "tf.keras.model.fit"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/Model#train_step", "anchor_text": "train_step"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/Model#make_train_function", "anchor_text": "make_train_function"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/Model", "anchor_text": "tf.keras.model"}, {"url": "https://github.com/tensorflow/tensorflow/blob/v2.3.0/tensorflow/python/keras/engine/training.py#L716-L760", "anchor_text": "default implementations of the routines in github"}, {"url": "https://medium.com/tag/tensorflow?source=post_page-----392b193d0b8---------------tensorflow-----------------", "anchor_text": "TensorFlow"}, {"url": "https://medium.com/tag/debugging?source=post_page-----392b193d0b8---------------debugging-----------------", "anchor_text": "Debugging"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----392b193d0b8---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/sagemaker?source=post_page-----392b193d0b8---------------sagemaker-----------------", "anchor_text": "Sagemaker"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F392b193d0b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdebugging-in-tensorflow-392b193d0b8&user=Chaim+Rand&userId=9440b37e27fe&source=-----392b193d0b8---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F392b193d0b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdebugging-in-tensorflow-392b193d0b8&user=Chaim+Rand&userId=9440b37e27fe&source=-----392b193d0b8---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F392b193d0b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdebugging-in-tensorflow-392b193d0b8&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----392b193d0b8--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F392b193d0b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdebugging-in-tensorflow-392b193d0b8&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----392b193d0b8---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----392b193d0b8--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----392b193d0b8--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----392b193d0b8--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----392b193d0b8--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----392b193d0b8--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----392b193d0b8--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----392b193d0b8--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----392b193d0b8--------------------------------", "anchor_text": ""}, {"url": "https://chaimrand.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://chaimrand.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Chaim Rand"}, {"url": "https://chaimrand.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "324 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9440b37e27fe&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdebugging-in-tensorflow-392b193d0b8&user=Chaim+Rand&userId=9440b37e27fe&source=post_page-9440b37e27fe--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fbdff1fc03bc4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdebugging-in-tensorflow-392b193d0b8&newsletterV3=9440b37e27fe&newsletterV3Id=bdff1fc03bc4&user=Chaim+Rand&userId=9440b37e27fe&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}