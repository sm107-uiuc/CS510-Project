{"url": "https://towardsdatascience.com/graph-query-searches-part-3-a8bff845c3f1", "time": 1683008516.6753721, "path": "towardsdatascience.com/graph-query-searches-part-3-a8bff845c3f1/", "webpage": {"metadata": {"title": "Graph Query Searches (Part 3). Writing GSQL Queries using TigerGragh\u2026 | by Akash Kaul | Towards Data Science", "h1": "Graph Query Searches (Part 3)", "description": "This is part 3 of a series exploring data extraction and modeling. If you\u2019ve followed along with the series so far, welcome back!. If you\u2019re new, I\u2019ll give a brief rundown of what we\u2019ve done so far\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/using-scispacy-for-named-entity-recognition-785389e7918d", "anchor_text": "Part 1", "paragraph_index": 0}, {"url": "https://towardsdatascience.com/linking-documents-in-a-semantic-graph-732ab511a01e", "anchor_text": "Part 2", "paragraph_index": 0}, {"url": "https://towardsdatascience.com/linking-documents-in-a-semantic-graph-732ab511a01e", "anchor_text": "Part 2", "paragraph_index": 1}, {"url": "https://gofile.io/d/fyijVS", "anchor_text": "here", "paragraph_index": 1}, {"url": "https://www.youtube.com/watch?v=JARd9ULRP_I", "anchor_text": "these steps", "paragraph_index": 2}, {"url": "https://towardsdatascience.com/linking-documents-in-a-semantic-graph-732ab511a01e", "anchor_text": "Part 2", "paragraph_index": 3}, {"url": "https://docs.tigergraph.com/dev/gsql-ref/querying/accumulators", "anchor_text": "Accumulators", "paragraph_index": 8}, {"url": "https://docs.tigergraph.com/dev/gsql-ref/querying/select-statement#select-statement-data-flow", "anchor_text": "TigerGraph documentation page", "paragraph_index": 12}, {"url": "https://github.com/akash-kaul/GSQL-Query-Searches.git", "anchor_text": "GitHub page", "paragraph_index": 14}, {"url": "https://docs.tigergraph.com/dev/gsql-ref/querying/accumulators", "anchor_text": "here", "paragraph_index": 25}, {"url": "https://allenai.github.io/scispacy/", "anchor_text": "here", "paragraph_index": 38}, {"url": "https://en.wikipedia.org/wiki/Jaccard_index", "anchor_text": "here", "paragraph_index": 42}, {"url": "https://github.com/tigergraph/gsql-graph-algorithms/blob/master/algorithms/schema-free/jaccard_nbor_ap_json.gsql", "anchor_text": "TigerGraph GitHub", "paragraph_index": 42}, {"url": "https://docs.tigergraph.com/", "anchor_text": "TigerGraph documentation for GSQL", "paragraph_index": 45}, {"url": "https://plotly.com/dash/", "anchor_text": "UI platform Dash from Plotly", "paragraph_index": 45}], "all_paragraphs": ["This is part 3 of a series exploring data extraction and modeling. If you\u2019ve followed along with the series so far, welcome back!. If you\u2019re new, I\u2019ll give a brief rundown of what we\u2019ve done so far. In Part 1, we explored using NLP and entity extraction on biomedical literature related to Covid-19. In Part 2, we learned how to take our data and model it using TigerGraph Cloud. Check out those articles to get an in-depth look at how we\u2019ve done everything so far.", "Now in Part 3, we are going to look at writing graph search queries to easily analyze the data in our graph. You will need a fully formed graph to write queries. You can follow the steps in Part 2 to create a graph from scratch, or you can import the graph we created into TigerGraph Cloud. The graph, along with all of the data we used, can be found here.", "To import the graph, create a blank solution following these steps. Once on the homepage of your solution, click Import an Existing Solution.", "Unfortunately, you still have to map and load the data manually. But, I take you through exactly how to do this in Part 2 under agenda items 4 and 5.", "Before we start writing queries, we should probably understand what they are. Graph queries are essentially commands that search through a graph and perform some operation. Queries can be used to find certain vertices or edges, do computations, or even update the graph. Since graphs also have visual representations, all of this can also be done with a UI, like the one provided by TigerGraph Cloud. But, when working with large amounts of data or when trying to create fine-tuned graph searches, using a visual interface is very inefficient. Hence, we can write queries to quickly traverse a graph and extract or insert whatever data we want.", "GSQL offers lots of different methods for querying. We will focus on searches. At the core of graph searches is something called a SELECT statement. As the name suggests, the select statement is used to select a set of vertices or edges. The SELECT statement comes with several parameters to narrow down the focus of your search.", "The FROM clause specifies what type of edge or vertex you are choosing.", "The WHERE clause lets you declare specific conditions for the vertices or edges.", "The ACCUM and POST-ACCUM clauses let you handle Accumulators, which are special GSQL variables that gather information as you search (the information can be numbers, sets of vertices or edges, etc.).", "The HAVING clause, similar to the WHERE clause, lets you provide additional conditions; however, these will be applied after the previous clauses.", "The ORDER BY clause lets you order the gathered edges or vertices by some attribute value.", "Finally, the LIMIT clause constrains the number of results of your search.", "You can find all of these details, along with other parameters and query methods, on the TigerGraph documentation page.", "Almost any search you could think of for a graph can be handled with the SELECT statement and its corresponding clauses. To prove that fact, let\u2019s practice writing some queries.", "All of the following queries can be found on my GitHub page.", "These queries are in order from simplest to most complex.", "Goal: Find all publications that fall under a given license type.", "Explanation: Let\u2019s break down what our code is doing. We want to select all Publication vertices that connect to a specific License vertex. So, we traverse from all LICENSE vertices to all PUBLICATION vertices with the condition that the license id is whatever we specify (i.e. cc0, no-cc, etc.). Then, we just print our results. There are two things to notice in our print statement.", "Now, let\u2019s save and install our code. When we run it, we get an input box that looks like this:", "As an example, I entered \u2018cc0\u2019 as the license code. When I click run query, I get an image that looks like this:", "This shows each publication vertex that has the license we specified. But, this view is quite messy. We can instead view the JSON output by clicking on the <\u2026> icon on the left side. The JSON output should look like this.", "This looks much cleaner! We can also see the effects of our print statement adjustments. The name of the resulting list is \u201cPublications\u201d, and the only vertex attribute printed is the id.", "For the following queries, I will only show the JSON output.", "Goal: Find the author who has written the most publications.", "Explanation: We start by selecting AUTHOR vertices. Notice that the SELECT statement looks different here. That\u2019s because we didn\u2019t specify the edge or target vertex. Since we know the AUTHOR vertex connects to only the PUBLICATION vertex, we can use this \u201clazy\u201d syntax to save ourselves from having to specify the edge name and target vertex.", "We also get our first look at accumulators (reference the documentation here). In this case, we use a local accumulator called pubNum. A local accumulator acts as a unique variable for each vertex, and a SumAccum is a type of accumulator that stores cumulative sums.", "So how does this accumulator work? Well, as we traverse from each AUTHOR vertex to its connected PUBLICATION vertices, we add to our accumulator. So, during the ACCUM clause, the accumulator stores the number of connections (which is also the number of publications) as a variable in each AUTHOR vertex.", "The next step uses the ORDER BY clause. We use this to place the resulting authors in descending order of their accumulator value. Thus, the author with the most publications will be at the top of the list", "Finally, we use the LIMIT clause to limit the output to 1 author (the first author in the list).", "When we run the function, our output looks something like this:", "Notice the author id is \u201cnan\u201d. This is the id used when a publication has no author. So, we can see that 2437 articles have no author listed. This is good information, but not exactly what we\u2019re after. To view more results, change the limit. As an example, I\u2019ll change the limit to 5.", "Now we can see the most-published author has 173 publications (wow that\u2019s a lot!)", "We can run a similar query to the author search but instead search for the journal with the most publications.", "Goal: Find the journal(s) with the most publications", "Explanation: The code is essentially the same as before, but we instead search for journals instead of authors. We also use the print filters described earlier to make our output nicer.", "We see that \u201cArch Virol\u201d, with 205 publications, is the top journal from our search.", "Goal: Given a class type, find the publications with the most medical terms of that class.", "Example class types: DNA, DISEASE, CANCER, ORGANISM, TAXON.", "The full list can be found here.", "Explanation: This is our first look at a 2-hop search. The first hop selects all of the entities, or keywords, connected to a given class type, and the second hop finds all the publications with those entities and ranks them. As an example, let\u2019s give our query the class CANCER and select the top 5. Our output looks something like this.", "We can now see which publications have the most references to cancer as well as the number of references for each publication.", "Goal: Given a paper, find similar papers based on their shared keywords.", "We\u2019ll use Jaccard similarity to determine how closely related 2 papers are. This algorithm essentially computes the number of keywords in common between two papers over the total number of keywords. You can read more about the algorithm here. You can see an example of this formula in action, as well as many other cool graph formulas, on the TigerGraph GitHub.", "Explanation: We start by creating 4 accumulators. Each one represents a value used in the Jaccard formula. For our first SELECT statement, we select the publication matching the input doi and collect all of the edges connected to that vertex into an accumulator. For our second statement, we select all of the entities in that publication. For our third statement, we find all of the publications with any number of the entities we just gathered and find the intersection size (the number of entities in common with the original paper). Finally, we calculate our Jaccard index and sort publications with the highest similarities to be at the top of our output list.", "We can see our starting publication as well as the top 5 similar publications, each with their respective similarity score.", "If you followed along with this article, I applaud you! This material is not easy, and learning a new language like GSQL can be tricky. I hope you found this walkthrough of GSQL queries insightful. I highly recommend reading my other papers to get a better background for everything we\u2019ve covered today. If you\u2019re looking to check out more query algorithms and structures, check out the TigerGraph documentation for GSQL. If you\u2019re looking for more content, stay tuned! I\u2019ll be releasing Part 4 shortly. In this final part of the series, I\u2019ll cover how to use our graph database and queries to output information that we can visually represent using the UI platform Dash from Plotly. With that, if you have followed along for all 4 parts, you will finish a full, end-to-end application!", "If you enjoyed this paper, be sure to check out my other papers and follow me for more content like this!", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fa8bff845c3f1&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-query-searches-part-3-a8bff845c3f1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-query-searches-part-3-a8bff845c3f1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-query-searches-part-3-a8bff845c3f1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-query-searches-part-3-a8bff845c3f1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----a8bff845c3f1--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a8bff845c3f1--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@akash_kaul?source=post_page-----a8bff845c3f1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@akash_kaul?source=post_page-----a8bff845c3f1--------------------------------", "anchor_text": "Akash Kaul"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ffc0227505fc6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-query-searches-part-3-a8bff845c3f1&user=Akash+Kaul&userId=fc0227505fc6&source=post_page-fc0227505fc6----a8bff845c3f1---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa8bff845c3f1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-query-searches-part-3-a8bff845c3f1&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa8bff845c3f1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-query-searches-part-3-a8bff845c3f1&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@andrewtneel?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Andrew Neel"}, {"url": "https://unsplash.com/s/photos/search?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://towardsdatascience.com/using-scispacy-for-named-entity-recognition-785389e7918d", "anchor_text": "Part 1"}, {"url": "https://towardsdatascience.com/linking-documents-in-a-semantic-graph-732ab511a01e", "anchor_text": "Part 2"}, {"url": "https://towardsdatascience.com/linking-documents-in-a-semantic-graph-732ab511a01e", "anchor_text": "Part 2"}, {"url": "https://gofile.io/d/fyijVS", "anchor_text": "here"}, {"url": "https://www.youtube.com/watch?v=JARd9ULRP_I", "anchor_text": "these steps"}, {"url": "https://towardsdatascience.com/linking-documents-in-a-semantic-graph-732ab511a01e", "anchor_text": "Part 2"}, {"url": "https://docs.tigergraph.com/dev/gsql-ref/querying/accumulators", "anchor_text": "Accumulators"}, {"url": "https://docs.tigergraph.com/dev/gsql-ref/querying/select-statement#select-statement-data-flow", "anchor_text": "TigerGraph documentation page"}, {"url": "https://github.com/akash-kaul/GSQL-Query-Searches.git", "anchor_text": "GitHub page"}, {"url": "https://docs.tigergraph.com/dev/gsql-ref/querying/accumulators", "anchor_text": "here"}, {"url": "https://allenai.github.io/scispacy/", "anchor_text": "here"}, {"url": "https://en.wikipedia.org/wiki/Jaccard_index", "anchor_text": "here"}, {"url": "https://github.com/tigergraph/gsql-graph-algorithms/blob/master/algorithms/schema-free/jaccard_nbor_ap_json.gsql", "anchor_text": "TigerGraph GitHub"}, {"url": "https://docs.tigergraph.com/", "anchor_text": "TigerGraph documentation for GSQL"}, {"url": "https://plotly.com/dash/", "anchor_text": "UI platform Dash from Plotly"}, {"url": "https://towardsdatascience.com/using-scispacy-for-named-entity-recognition-785389e7918d", "anchor_text": "https://towardsdatascience.com/using-scispacy-for-named-entity-recognition-785389e7918d"}, {"url": "https://towardsdatascience.com/linking-documents-in-a-semantic-graph-732ab511a01e", "anchor_text": "https://towardsdatascience.com/linking-documents-in-a-semantic-graph-732ab511a01e"}, {"url": "https://gofile.io/d/fyijVS", "anchor_text": "https://gofile.io/d/fyijVS"}, {"url": "https://www.youtube.com/watch?v=JARd9ULRP_I", "anchor_text": "https://www.youtube.com/watch?v=JARd9ULRP_I"}, {"url": "https://docs.tigergraph.com/dev/gsql-ref/querying/accumulators", "anchor_text": "https://docs.tigergraph.com/dev/gsql-ref/querying/accumulators"}, {"url": "https://docs.tigergraph.com/dev/gsql-ref/querying/select-statement#select-statement-data-flow", "anchor_text": "https://docs.tigergraph.com/dev/gsql-ref/querying/select-statement#select-statement-data-flow"}, {"url": "https://github.com/akash-kaul/GSQL-Query-Searches.git", "anchor_text": "https://github.com/akash-kaul/GSQL-Query-Searches.git"}, {"url": "https://allenai.github.io/scispacy/", "anchor_text": "https://allenai.github.io/scispacy/"}, {"url": "https://github.com/tigergraph/gsql-graph-algorithms/blob/master/algorithms/schema-free/jaccard_nbor_ap_json.gsql", "anchor_text": "https://github.com/tigergraph/gsql-graph-algorithms/blob/master/algorithms/schema-free/jaccard_nbor_ap_json.gsql"}, {"url": "https://docs.tigergraph.com/", "anchor_text": "https://docs.tigergraph.com/"}, {"url": "https://plotly.com/dash/", "anchor_text": "https://plotly.com/dash/"}, {"url": "https://medium.com/tag/graph-database?source=post_page-----a8bff845c3f1---------------graph_database-----------------", "anchor_text": "Graph Database"}, {"url": "https://medium.com/tag/gsql?source=post_page-----a8bff845c3f1---------------gsql-----------------", "anchor_text": "Gsql"}, {"url": "https://medium.com/tag/data-science?source=post_page-----a8bff845c3f1---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/data-analysis?source=post_page-----a8bff845c3f1---------------data_analysis-----------------", "anchor_text": "Data Analysis"}, {"url": "https://medium.com/tag/query?source=post_page-----a8bff845c3f1---------------query-----------------", "anchor_text": "Query"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa8bff845c3f1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-query-searches-part-3-a8bff845c3f1&user=Akash+Kaul&userId=fc0227505fc6&source=-----a8bff845c3f1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa8bff845c3f1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-query-searches-part-3-a8bff845c3f1&user=Akash+Kaul&userId=fc0227505fc6&source=-----a8bff845c3f1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa8bff845c3f1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-query-searches-part-3-a8bff845c3f1&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a8bff845c3f1--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fa8bff845c3f1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-query-searches-part-3-a8bff845c3f1&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----a8bff845c3f1---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----a8bff845c3f1--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----a8bff845c3f1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----a8bff845c3f1--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----a8bff845c3f1--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----a8bff845c3f1--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----a8bff845c3f1--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----a8bff845c3f1--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----a8bff845c3f1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@akash_kaul?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@akash_kaul?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Akash Kaul"}, {"url": "https://medium.com/@akash_kaul/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "135 Followers"}, {"url": "https://www.linkedin.com/in/akash-kaul-6a8063194/", "anchor_text": "https://www.linkedin.com/in/akash-kaul-6a8063194/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ffc0227505fc6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-query-searches-part-3-a8bff845c3f1&user=Akash+Kaul&userId=fc0227505fc6&source=post_page-fc0227505fc6--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fe0f35f4f8238&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgraph-query-searches-part-3-a8bff845c3f1&newsletterV3=fc0227505fc6&newsletterV3Id=e0f35f4f8238&user=Akash+Kaul&userId=fc0227505fc6&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}