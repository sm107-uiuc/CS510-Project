{"url": "https://towardsdatascience.com/practical-cython-music-retrieval-non-negative-matrix-factorisation-fd4b2ce65457", "time": 1683016640.2216058, "path": "towardsdatascience.com/practical-cython-music-retrieval-non-negative-matrix-factorisation-fd4b2ce65457/", "webpage": {"metadata": {"title": "Practical Cython \u2014 Music Retrieval: Non Negative Matrix Factorisation | by Stefano Bosisio | Towards Data Science", "h1": "Practical Cython \u2014 Music Retrieval: Non Negative Matrix Factorisation", "description": "Welcome back to the Cython world :) This time I will show you how to implement a basic version of non-negative matrix factorisation (NMF). NMF has wide applications in data science\u00b9 \u00b2 \u00b3, music\u2074 \u2075 and\u2026"}, "outgoing_paragraph_urls": [{"url": "https://en.wikipedia.org/wiki/Non-negative_matrix_factorization", "anchor_text": "non-negative matrix factorisation", "paragraph_index": 0}, {"url": "https://ieeexplore.ieee.org/abstract/document/6634167", "anchor_text": "\u00b9", "paragraph_index": 0}, {"url": "https://www.mitpressjournals.org/doi/abs/10.1162/neco.2007.19.10.2756", "anchor_text": "\u00b2", "paragraph_index": 0}, {"url": "https://link.springer.com/article/10.1007/s10588-005-5380-5", "anchor_text": "\u00b3", "paragraph_index": 0}, {"url": "https://ieeexplore.ieee.org/abstract/document/1285860", "anchor_text": "\u2074", "paragraph_index": 0}, {"url": "https://www.mitpressjournals.org/doi/abs/10.1162/neco.2008.04-08-771", "anchor_text": "\u2075", "paragraph_index": 0}, {"url": "https://ieeexplore.ieee.org/abstract/document/5594900/", "anchor_text": "\u2076", "paragraph_index": 0}, {"url": "https://github.com/scikit-learn/scikit-learn/blob/0fb307bf3/sklearn/decomposition/_nmf.py#L1082", "anchor_text": "sklearn.decomposition.nmf", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/Principal_component_analysis", "anchor_text": "Principal Component Analysis (PCA)", "paragraph_index": 5}, {"url": "https://en.wikipedia.org/wiki/Linear_discriminant_analysis", "anchor_text": "Linear Discriminant Analysis (LDA)", "paragraph_index": 5}, {"url": "https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding", "anchor_text": "t-distributed stochastic neighbour embedding (t-SNE)", "paragraph_index": 5}, {"url": "https://en.wikipedia.org/wiki/Autoencoder", "anchor_text": "neural-network autoencoders", "paragraph_index": 5}, {"url": "https://link.springer.com/content/pdf/bbm%3A978-3-319-07917-2%2F1.pdf", "anchor_text": "here", "paragraph_index": 7}, {"url": "https://github.com/realead/indirect_buffer", "anchor_text": "indirect_buffer", "paragraph_index": 13}, {"url": "https://towardsdatascience.com/practical-cython-music-retrieval-short-time-fourier-transform-f89a0e65754d", "anchor_text": "STFT", "paragraph_index": 14}, {"url": "https://towardsdatascience.com/practical-cython-music-retrieval-short-time-fourier-transform-f89a0e65754d", "anchor_text": "previous post", "paragraph_index": 15}, {"url": "http://docs.cython.org/en/latest/src/userguide/memoryviews.html#specifying-more-general-memory-layouts", "anchor_text": "here", "paragraph_index": 21}, {"url": "https://towardsdatascience.com/practical-cython-music-retrieval-short-time-fourier-transform-f89a0e65754d", "anchor_text": "tutorial", "paragraph_index": 31}, {"url": "https://github.com/Steboss/music_retrieval/blob/master/nmf/installer/setup.py", "anchor_text": "https://github.com/Steboss/music_retrieval/blob/master/nmf/installer/setup.py", "paragraph_index": 31}, {"url": "https://medium.com/ml2vec/topic-modeling-is-an-unsupervised-learning-approach-to-clustering-documents-to-discover-topics-fdfbf30e27df", "anchor_text": "post", "paragraph_index": 34}, {"url": "https://towardsdatascience.com/practical-cython-music-retrieval-short-time-fourier-transform-f89a0e65754d", "anchor_text": "STFT spectrograms", "paragraph_index": 35}, {"url": "https://www.youtube.com/watch?v=QDWKzG5oaog", "anchor_text": "C major scale", "paragraph_index": 35}], "all_paragraphs": ["Welcome back to the Cython world :) This time I will show you how to implement a basic version of non-negative matrix factorisation (NMF). NMF has wide applications in data science\u00b9 \u00b2 \u00b3, music\u2074 \u2075 and astronomy\u2076, and its implementation gives us the opportunity to take a look at memory-views memory management in Cython.", "Thus if you are willing to know about how NMF works and how to write it up in Python, C and Cython, you are in the right place. All the codes needed for this tutorial can be found here:", "These codes are extremely useful to understand how to structure a Cython project, subdividing codes in folders and install the final package. The reference code for this implementation is inspired by sklearn.decomposition.nmf which makes use of the coordinate descent solver method.", "One of the major research topics in linear algebra (and data science) is called dimensionality reduction. The main question to address is quite simple to understand:", "is it possible to reduce a very big matrix of data into a small one, which preserves the original characteristics and can explain the underlying data behaviour?", "The resulting mathematical efforts have been commendable through all these years, as many algorithms have been devised and assessed \u2014 just to cite a few of these algorithms: Principal Component Analysis (PCA), Linear Discriminant Analysis (LDA), t-distributed stochastic neighbour embedding (t-SNE) or recently neural-network autoencoders. All these algorithms have defined parameters, which is called the number of components, which is the number of elements we want to have to describe the underlying data. Roughly each of these algorithms can decompose a matrix, whose dimensions are n x m, where n is the number of rows and m the number of columns, in a smaller matrix of dimension number_of_components x m. Most of the time, the final matrix not only has lower dimensions with respect to the original one, but it may also be a sparse representation of the original matrix. Sparsity means that many elements of the resulting matrix are 0s, which allows having a better storage and computational performance.", "NMF belongs to the dimensionality reduction family. Fig.1 shows how NMF works. A matrix V, whose dimensions are n rows and m columns, is decomposed as a product of two matrices: W whose dimensions are n x number_of_components p and H, which is a p x m matrix. This product allows to recompute each V column i as v\u1d62 = Wh\u1d62. To allow a correct reconstruction of matrix V from W and H, NMF tries \u2014 indeed the final result is an approximation of the original matrix V \u2014 to minimize a loss function, which usually is the square difference ofV \u2014 WHwhich is called Frobenius norm. Depending on the loss function there are different shades of NMF:", "Finally, both W and H are non-negative matrix, namely each of their elements is positive. This property has remarkable consequences in the computational world, as this allows a direct link to other methodologies such as PCA (if you are interested in the mathematical aspects go here ).", "Fig. 2 shows a practical scheme on how to implement NMF with Cython and C:", "To summarise, the main C function has to run a coordinate descent algorithm (CDS) to solve and find the best W and H matrix, whose product returns an approximate version of an input signal X. Thus, the elements to keep in mind for structuring the code are: W and H matrix, initialised in Cython and solved in C, the input signal X , the number of components n_components and the maximum number of iterations max_iter to run CDS for.", "Before proceeding with the code implementation, it is worth to spend few words on the buffer protocol \u201cproblem\u201d. To have a wee understanding, fig. 3 quickly shows the nature of the problem. Many Python scientific libraries, such as numpy, scipy, pandas, contain objects which access to an underlying memory array or buffer. This method is called buffer protocol (PEP 3118) and allows the continuous communication between Python wrappers and C/C++ codes. In our case, Cython\u2019s typed memoryviews support this indirect memory layout, thus 1D memoryviews can be easily send back and forth to C and Python.", "However, many other classes do not implement the buffer protocol. As an example, Numpy\u2019s N-dimensional arrays do not have an indirect memory layout, thus passing N-dimensional memoryviews converted arrays to C and read them back is not possible \u2014 there is no buffer protocol here.", "To solve this problem there are three ways:", "In this tutorial I will follow the first choice, thus all the input multi dimensional arrays are vectorized and rebuilt in C when needed. As an exercise you could experiment the indirect_buffer library :)", "The Python script creates an interface between input data and C-nmf output. The input data in this case are fictitious arrays, in order to replicate sklearn results and to test the stability of nmf code for very big input data, such as X=np.random.rand(1025, 90). nmf.play(X, 6, 100, 42, 1) calls the nmf Cython-C function, 6is the number of components, as described below. It is important to remark that any array can be used as input, as the final section will explain, so that STFT or NLP data can be used and processed through NMF.", "As we saw in my previous post, Cython files have two extension: pxd and pyx . For the sake of simplicity, this tutorial implements only pyx in order to have a quicker understanding of the Cython world.", "Cython first step import all the required dependencies along with the C code:", "The C function has the following inputs: the number of components n_components, the maximum number of iterations max_iter for CDS, the input signal X in the form of a vector float *, the initialised matrices W_cython and H_cython and constant factors such as the number of rows of X, X_rows , the number of columns, X_columns , a random state and verbose input. As pointed out above, due to the buffer protocol missing implementation in C pointers, the matrices W and H are vectorized and passed as float * . This allows to create them in Cython and pass them back after C computation.", "Secondly, the input signal X is vectorized:", "The input array X is vectorized via numpy.zeros and a simple for loop through its elements. The same logic will be built in C, in order to rebuild the input matrix X.", "Then, all the input elements can now be cast in memoryviews, so they are ready to be read in C:", "Again, it is important to stress this point: due to the buffer protocol we are not passing multi dimensional arrays to C. To simplify and also speed up the computation all the matrices, X, W and H are vectorised and passed to the C function as for a normal memoryview: &a[0], &W_cython[0], &H_cython[0] . As explained here, since the size of the current memoryviews is known, the underlying data are properly contiguous, thus it is sufficient to pass a pointer to the first memoryview element ( &a[0] ) to make them work in C.", "Once C has run the NMF matrices W and H are directly returned in Cython and converted to an array format:", "This code is designed to be easy to understand, however it requires some restructuring to be also more readable and easy to be portable among packages. This is a good final exercise for you :)", "At first, all the necessary libraries and constants are imported and defined:", "Thus, in the main float* nmf(...) function, it is possible to start by recreating the input signal X and randomly initialise the two matrices W and H. Both H and W are built from a random float Normal distributor generator. To create a random float Normal generator in C, two functions needs to be implemented. The first is float drand(...) which returns a number between 0 and 1 as the ratio between rand()and RAND_MAX. The function rand() returns an integer pseudo-random number in the range 0 to RAND_MAX . RAND_MAX value depends on your machine, but it is at least 32767. Both RAND_MAX and rand() comes from the standard library stdlib. This float precision number is then passed to random_normal which return the normal distribution cumulative value of the current number. To normalise the initialised values of H and W all the random numbers are multiplied by the normalised square-root average of the input matrix X as shown in float define_avg_element function. The average of X is normalised with respect to the number of components n_components.", "Remember that H has n_components rows and X_columns (or n_features) columns, while W has X_rows rows and n_components columns.", "Once all the matrices are read, the coordinate_descent_solver can be called. Here CDS is implemented in a single function, to understand all the calculations step by step, as follows:", "The same approach applies for H update and the final code is:", "This CDS implementation works, however, as said before, I strongly discourage such an approach, and ask you to write the function in a more general form.", "Finally, in the last step, W and H are re-vectorised and the given Cython W_cython and H_cython memoryviews are repopulated and sent back to Cython:", "As done in the previous tutorial, codes are divided in two folders: c_code, where nmf_2.c is stored and installer folder, where pyx and Python files are contained. setup.py is the installation file, which is saved in installer. The installer file follow the code here: https://github.com/Steboss/music_retrieval/blob/master/nmf/installer/setup.py , using an O3 optimisation, and standard compatibility -std=c99.", "Once the code is ready we can run setup.py as:", "build_ext is the command to build the current extension and --inplace allows to install the current package in the working directory.", "To conclude this section, I will give two practical examples of NMF. The former deals with music retrieval: is it possible to retrieve notes from mp3? The second is a topic modelling example, inspired by this very nice post.", "STFT spectrograms can be used as input data for NMF. What if a C major scale is analysed?", "Fig. 16 and 17 shows the output Wand H matrices. The former contains the spectra for each component. For example, the first component (0) refers to B4 note, whose fundamental frequency is 493.88, with a peak at 123 Hz. Component 1 and 6 are the same as they refer to C4/C5. Deviations from the actual note frequencies are due to frequency quantization by the DFT in STFT. In general individual peaks will not help in note identification, instead theharmonic profile that all peaks collectively outline is used.This example also shows that the order of the template columns in W(and the same with the activation rows of H) do not have any semantics. Indeed, the NMF decomposition does not favor any order", "H contains the activation time for each component. For example, the first note played is component 1, C4. The pairing of the nth row of H with the nth row of W describes the two elements that made up the input STFT.", "This example deals with the abc news dataset and show how versatile NMF can be. To use this dataset on my laptop I resized the input to 10'000 news headlines. After stopwords have been removed from the input, sklearn TfIdf transform is applied and the final array is given to the NMF code, with 10 components as number of topics.", "The topics can be retrieved from the H matrix, whose dimensions are n_topicsx words_in_texts.Each H rows is a component and the first 20 words are retrieved to create the topic:", "W matrix presents headline_news as rows and n_component_score as columns. Thus, for each headline we can retrieve the maximum score for each topic and correctly classify the news in a category. It is worth notice that to have a statistical contribution the NMF matrices should be minimized using the Kullback-Leibler divergence.", "I hope you like this new tutorial on Cython :) feel free to send me an email for questions or comments at: stefanobosisio1@gmail.com", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Machine Learning Engineer, PhD in Computational Chemistry. My writing covers neuroscience research, coding tutorial and social-media analyses"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Ffd4b2ce65457&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-cython-music-retrieval-non-negative-matrix-factorisation-fd4b2ce65457&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-cython-music-retrieval-non-negative-matrix-factorisation-fd4b2ce65457&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-cython-music-retrieval-non-negative-matrix-factorisation-fd4b2ce65457&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-cython-music-retrieval-non-negative-matrix-factorisation-fd4b2ce65457&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----fd4b2ce65457--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----fd4b2ce65457--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://stefanobosisio1.medium.com/?source=post_page-----fd4b2ce65457--------------------------------", "anchor_text": ""}, {"url": "https://stefanobosisio1.medium.com/?source=post_page-----fd4b2ce65457--------------------------------", "anchor_text": "Stefano Bosisio"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fff7141087b94&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-cython-music-retrieval-non-negative-matrix-factorisation-fd4b2ce65457&user=Stefano+Bosisio&userId=ff7141087b94&source=post_page-ff7141087b94----fd4b2ce65457---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffd4b2ce65457&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-cython-music-retrieval-non-negative-matrix-factorisation-fd4b2ce65457&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffd4b2ce65457&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-cython-music-retrieval-non-negative-matrix-factorisation-fd4b2ce65457&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/tagged/hands-on-tutorials", "anchor_text": "Hands-on Tutorials"}, {"url": "https://unsplash.com/photos/_efWpTtd_3I", "anchor_text": "Jung Ho Park"}, {"url": "https://medium.com/@stefanobosisio1/membership", "anchor_text": "Join Medium with my referral link - Stefano BosisioAs a Medium member, a portion of your membership fee goes to writers you read, and you get full access to every story\u2026medium.com"}, {"url": "https://en.wikipedia.org/wiki/Non-negative_matrix_factorization", "anchor_text": "non-negative matrix factorisation"}, {"url": "https://ieeexplore.ieee.org/abstract/document/6634167", "anchor_text": "\u00b9"}, {"url": "https://www.mitpressjournals.org/doi/abs/10.1162/neco.2007.19.10.2756", "anchor_text": "\u00b2"}, {"url": "https://link.springer.com/article/10.1007/s10588-005-5380-5", "anchor_text": "\u00b3"}, {"url": "https://ieeexplore.ieee.org/abstract/document/1285860", "anchor_text": "\u2074"}, {"url": "https://www.mitpressjournals.org/doi/abs/10.1162/neco.2008.04-08-771", "anchor_text": "\u2075"}, {"url": "https://ieeexplore.ieee.org/abstract/document/5594900/", "anchor_text": "\u2076"}, {"url": "https://github.com/Steboss/music_retrieval/tree/master/nmf", "anchor_text": "Steboss/music_retrievalLittle suite of python-c-cython tools to retrieve music info - Steboss/music_retrievalgithub.com"}, {"url": "https://github.com/scikit-learn/scikit-learn/blob/0fb307bf3/sklearn/decomposition/_nmf.py#L1082", "anchor_text": "sklearn.decomposition.nmf"}, {"url": "https://en.wikipedia.org/wiki/Principal_component_analysis", "anchor_text": "Principal Component Analysis (PCA)"}, {"url": "https://en.wikipedia.org/wiki/Linear_discriminant_analysis", "anchor_text": "Linear Discriminant Analysis (LDA)"}, {"url": "https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding", "anchor_text": "t-distributed stochastic neighbour embedding (t-SNE)"}, {"url": "https://en.wikipedia.org/wiki/Autoencoder", "anchor_text": "neural-network autoencoders"}, {"url": "https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence", "anchor_text": "Kullback-Leibler divergence"}, {"url": "https://link.springer.com/content/pdf/bbm%3A978-3-319-07917-2%2F1.pdf", "anchor_text": "here"}, {"url": "https://docs.python.org/3/c-api/buffer.html", "anchor_text": "buffer protocol"}, {"url": "https://github.com/realead/indirect_buffer", "anchor_text": "https://github.com/realead/indirect_buffer"}, {"url": "https://github.com/realead/indirect_buffer", "anchor_text": "indirect_buffer"}, {"url": "https://github.com/Steboss/music_retrieval/blob/master/nmf/installer/tester.py", "anchor_text": "https://github.com/Steboss/music_retrieval/blob/master/nmf/installer/tester.py"}, {"url": "https://towardsdatascience.com/practical-cython-music-retrieval-short-time-fourier-transform-f89a0e65754d", "anchor_text": "STFT"}, {"url": "https://github.com/Steboss/music_retrieval/blob/master/nmf/installer/nmf.pyx", "anchor_text": "https://github.com/Steboss/music_retrieval/blob/master/nmf/installer/nmf.pyx"}, {"url": "https://towardsdatascience.com/practical-cython-music-retrieval-short-time-fourier-transform-f89a0e65754d", "anchor_text": "previous post"}, {"url": "http://docs.cython.org/en/latest/src/userguide/memoryviews.html#specifying-more-general-memory-layouts", "anchor_text": "here"}, {"url": "https://github.com/Steboss/music_retrieval/blob/master/nmf/c_code/nmf_2.c", "anchor_text": "https://github.com/Steboss/music_retrieval/blob/master/nmf/c_code/nmf_2.c"}, {"url": "https://towardsdatascience.com/practical-cython-music-retrieval-short-time-fourier-transform-f89a0e65754d", "anchor_text": "tutorial"}, {"url": "https://github.com/Steboss/music_retrieval/blob/master/nmf/installer/setup.py", "anchor_text": "https://github.com/Steboss/music_retrieval/blob/master/nmf/installer/setup.py"}, {"url": "https://medium.com/ml2vec/topic-modeling-is-an-unsupervised-learning-approach-to-clustering-documents-to-discover-topics-fdfbf30e27df", "anchor_text": "post"}, {"url": "https://github.com/Steboss/music_retrieval/blob/master/nmf/example/nmf.ipynb", "anchor_text": "https://github.com/Steboss/music_retrieval/blob/master/nmf/example/nmf.ipynb"}, {"url": "https://towardsdatascience.com/practical-cython-music-retrieval-short-time-fourier-transform-f89a0e65754d", "anchor_text": "STFT spectrograms"}, {"url": "https://www.youtube.com/watch?v=QDWKzG5oaog", "anchor_text": "C major scale"}, {"url": "https://github.com/Steboss/music_retrieval/blob/master/nmf/example/nmf_text.ipynb", "anchor_text": "https://github.com/Steboss/music_retrieval/blob/master/nmf/example/nmf_text.ipynb"}, {"url": "https://ieeexplore.ieee.org/abstract/document/6634167", "anchor_text": "https://ieeexplore.ieee.org/abstract/document/6634167"}, {"url": "https://www.mitpressjournals.org/doi/abs/10.1162/neco.2007.19.10.2756", "anchor_text": "https://www.mitpressjournals.org/doi/abs/10.1162/neco.2007.19.10.2756"}, {"url": "https://link.springer.com/article/10.1007/s10588-005-5380-5", "anchor_text": "https://link.springer.com/article/10.1007/s10588-005-5380-5"}, {"url": "https://ieeexplore.ieee.org/abstract/document/1285860", "anchor_text": "https://ieeexplore.ieee.org/abstract/document/1285860"}, {"url": "https://www.mitpressjournals.org/doi/abs/10.1162/neco.2008.04-08-771", "anchor_text": "https://www.mitpressjournals.org/doi/abs/10.1162/neco.2008.04-08-771"}, {"url": "https://ieeexplore.ieee.org/abstract/document/5594900/", "anchor_text": "https://ieeexplore.ieee.org/abstract/document/5594900/"}, {"url": "https://medium.com/tag/cython?source=post_page-----fd4b2ce65457---------------cython-----------------", "anchor_text": "Cython"}, {"url": "https://medium.com/tag/nlp?source=post_page-----fd4b2ce65457---------------nlp-----------------", "anchor_text": "NLP"}, {"url": "https://medium.com/tag/editors-pick?source=post_page-----fd4b2ce65457---------------editors_pick-----------------", "anchor_text": "Editors Pick"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----fd4b2ce65457---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/hands-on-tutorials?source=post_page-----fd4b2ce65457---------------hands_on_tutorials-----------------", "anchor_text": "Hands On Tutorials"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ffd4b2ce65457&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-cython-music-retrieval-non-negative-matrix-factorisation-fd4b2ce65457&user=Stefano+Bosisio&userId=ff7141087b94&source=-----fd4b2ce65457---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ffd4b2ce65457&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-cython-music-retrieval-non-negative-matrix-factorisation-fd4b2ce65457&user=Stefano+Bosisio&userId=ff7141087b94&source=-----fd4b2ce65457---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffd4b2ce65457&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-cython-music-retrieval-non-negative-matrix-factorisation-fd4b2ce65457&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----fd4b2ce65457--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Ffd4b2ce65457&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-cython-music-retrieval-non-negative-matrix-factorisation-fd4b2ce65457&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----fd4b2ce65457---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----fd4b2ce65457--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----fd4b2ce65457--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----fd4b2ce65457--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----fd4b2ce65457--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----fd4b2ce65457--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----fd4b2ce65457--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----fd4b2ce65457--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----fd4b2ce65457--------------------------------", "anchor_text": ""}, {"url": "https://stefanobosisio1.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://stefanobosisio1.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Stefano Bosisio"}, {"url": "https://stefanobosisio1.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "1.1K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fff7141087b94&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-cython-music-retrieval-non-negative-matrix-factorisation-fd4b2ce65457&user=Stefano+Bosisio&userId=ff7141087b94&source=post_page-ff7141087b94--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fc36bd6421a53&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-cython-music-retrieval-non-negative-matrix-factorisation-fd4b2ce65457&newsletterV3=ff7141087b94&newsletterV3Id=c36bd6421a53&user=Stefano+Bosisio&userId=ff7141087b94&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}