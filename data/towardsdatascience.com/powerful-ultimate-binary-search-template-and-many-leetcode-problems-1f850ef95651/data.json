{"url": "https://towardsdatascience.com/powerful-ultimate-binary-search-template-and-many-leetcode-problems-1f850ef95651", "time": 1683011881.3743, "path": "towardsdatascience.com/powerful-ultimate-binary-search-template-and-many-leetcode-problems-1f850ef95651/", "webpage": {"metadata": {"title": "Powerful Ultimate Binary Search Template and Many LeetCode Problems | by Zhijun Liao | Towards Data Science", "h1": "Powerful Ultimate Binary Search Template and Many LeetCode Problems", "description": "Binary Search is quite easy to understand conceptually. Basically, it splits the search space into two halves and only keep the half that probably has the search target and throw away the other half\u2026"}, "outgoing_paragraph_urls": [], "all_paragraphs": ["Binary Search is quite easy to understand conceptually. Basically, it splits the search space into two halves and only keep the half that probably has the search target and throw away the other half that would not possibly have the answer. In this manner, we reduce the search space to half the size at every step, until we find the target. Binary Search helps us reduce the search time from linear O(n) to logarithmic O(log n). But when it comes to implementation, it\u2019s rather difficult to write a bug-free code in just a few minutes. Some of the most common problems include:", "A rather common misunderstanding of binary search is that people often think this technique could only be used in simple scenario like \u201cGiven a sorted array, find a specific value in it\u201d. As a matter of fact, it can be applied to much more complicated situations.", "After a lot of practice in LeetCode, I\u2019ve made a powerful binary search template and solved many Hard problems by just slightly twisting this template. I\u2019ll share the template with you guys in this post. I don\u2019t want to just show off the code and leave. Most importantly, I want to share the logical thinking: how to apply this general template to all sorts of problems. Hopefully, after reading this post, people wouldn\u2019t be pissed off any more when LeetCoding, \u201cHoly sh*t! This problem could be solved with binary search! Why didn\u2019t I think of that before!\u201d", "Suppose we have a search space. It could be an array, a range, etc. Usually it\u2019s sorted in ascend order. For most tasks, we can transform the requirement into the following generalized form:", "Minimize k , s.t. condition(k) is True", "The following code is the most generalized binary search template:", "What\u2019s really nice of this template is that, for most of the binary search problems, we only need to modify three parts after copy-pasting this template, and never need to worry about corner cases and bugs in code any more:", "Below I will show you guys how to apply this powerful template to many LeetCode problems.", "First, we initialize left = 1 and right = n to include all possible values. Then we notice that we don\u2019t even need to design the condition function. It\u2019s already given by the isBadVersion API. Finding the first bad version is equivalent to finding the minimal k satisfying isBadVersion(k) is True. Our template can fit in very nicely:", "Quite an easy problem. We need to search for maximal k satisfying k^2 <= x, so we can easily come up with the solution:", "There\u2019s one thing I\u2019d like to point out. Remember I say that we usually look for the minimal k value satisfying certain condition? But in this problem we are searching for maximal k value instead. Feeling confused? Don\u2019t be. Actually, the maximal k satisfying isBadVersion(k) is False is just equal to the minimal k satisfying isBadVersion(k) is True minus one. This is why I mentioned earlier that we need to decide which value to return, left or left \u2014 1 .", "Very classic application of binary search. We are looking for the minimal k satisfying nums[k] \u2265 target, and we can just copy-paste our template. Notice that our solution is correct regardless of whether the input array nums has duplicates. Also notice that the input target might be larger than all elements in nums and thus needs to placed at the end of the array. That\u2019s why we should initialize right = len(nums) instead of right = len(nums) \u2014 1 .", "The above problems are quite easy to solve, because they already give us the array to be searched. We\u2019d know that we should use binary search to solve them at first glance. However, more often are the situations where the search space and search target are not so readily available. Sometimes we won\u2019t even realize that the problem should be solved with binary search \u2014 we might just turn to dynamic programming or DFS and get stuck for a very long time.", "As for the question \u201cWhen can we use binary search?\u201d, my answer is that, If we can discover some kind of monotonicity, for example, if condition(k) is True then condition(k + 1) is True, then we can consider binary search.", "Binary search probably would not come to our mind when we first meet this problem. We might automatically treat weights as search space and then realize we\u2019ve entered a dead end after wasting lots of time. In fact, we are looking for the minimal one among all feasible capacities. We dig out the monotonicity of this problem: if we can successfully ship all packages within D days with capacity m, then we can definitely ship them all with any capacity larger than m. Now we can design a condition function, let\u2019s call it feasible, given an input capacity, it returns whether it\u2019s possible to ship all packages within D days. This can run in a greedy way: if there\u2019s still room for the current package, we put this package onto the conveyor belt, otherwise we wait for the next day to place this package. If the total days needed exceeds D, we return False, otherwise we return True.", "Next, we need to initialize our boundary correctly. Obviously capacity should be at least max(weights), otherwise the conveyor belt couldn\u2019t ship the heaviest package. On the other hand, capacity need not be more than sum(weights), because then we can ship all packages in just one day.", "Now we\u2019ve got all we need to apply our binary search template:", "If you take a close look, you would probably see how similar this problem is with LC 1011 above. Similarly, we can design a feasible function: given an input threshold, then decide if we can split the array into several subarrays such that every subarray-sum is less than or equal to threshold. In this way, we discover the monotonicity of the problem: if feasible(m) is True, then all inputs larger than m can satisfy feasible function. You can see that the solution code is exactly the same as LC 1011.", "Let\u2019s say k is the minimal value satisfying feasible function. We can prove the correctness of our solution with proof by contradiction. Assume that no subarray\u2019s sum is equal to k, that is, every subarray sum is less than k. The variable total inside feasible function keeps track of the total weights of current load. If our assumption is correct, then total would always be less than k. As a result, feasible(k-1) must be True, because total would at most be equal to k-1 and would never trigger the if-clause if total > threshold, therefore feasible(k-1) must have the same output as feasible(k), which is True. But we already know that k is the minimal value satisfying feasible function, so feasible(k-1) has to be False, which is a contradiction. So our assumption is incorrect. Now we\u2019ve proved that our algorithm is correct.", "Very similar to LC 1011 and LC 410 mentioned above. Let\u2019s design a feasible function, given an input speed, determine whether Koko can finish all bananas within H hours with hourly eating speed speed. Obviously, the lower bound of the search space is 1, and upper bound is max(piles), because Koko can only choose one pile of bananas to eat every hour.", "Now that we\u2019ve solved three advanced problems above, this one should be pretty easy to do. The monotonicity of this problem is very clear: if we can make m bouquets after waiting for d days, then we can definitely finish that as well if we wait more than d days.", "For Kth-Smallest problems like this, what comes to our mind first is Heap. Usually we can maintain a Min-Heap and just pop the top of the Heap for k times. However, that doesn\u2019t work out in this problem. We don\u2019t have every single number in the entire Multiplication Table, instead, we only have the height and the length of the table. If we are to apply Heap method, we need to explicitly calculate these m*n values and save them to a heap. The time complexity and space complexity of this process are both O(mn), which is quite inefficient. This is when binary search comes in. Remember we say that designing condition function is the most difficult part? In order to find the kth smallest value in the table, we can design an enough function, given an input num, determine whether there\u2019re at least k values less than or equal to num. The minimal num satisfying enough function is the answer we\u2019re looking for. Recall that the key to binary search is discovering monotonicity. In this problem, if num satisfies enough, then of course any value larger than num can satisfy. This monotonicity is the fundament of our binary search algorithm.", "Let\u2019s consider search space. Obviously the lower bound should be 1, and the upper bound should be the largest value in the Multiplication Table, which is m * n, then we have search space [1, m * n]. The overwhelming advantage of binary search solution to heap solution is that it doesn't need to explicitly calculate all numbers in that table, all it needs is just picking up one value out of the search space and apply enough function to this value, to determine should we keep the left half or the right half of the search space. In this way, binary search solution only requires constant space complexity, much better than heap solution.", "Next let\u2019s consider how to implement enough function. It can be observed that every row in the Multiplication Table is just multiples of its index. For example, all numbers in 3rd row [3,6,9,12,15...] are multiples of 3. Therefore, we can just go row by row to count the total number of entries less than or equal to input num. Following is the complete solution.", "In LC 410 above, we have doubt \u201cIs the result from binary search actually a subarray sum?\u201d. Here we have a similar doubt: \u201cIs the result from binary search actually in the Multiplication Table?\u201d. The answer is yes, and we also can apply proof by contradiction. Denote num as the minimal input that satisfies enough function. Let's assume that num is not in the table, which means that num is not divisible by any val in [1, m], that is, num % val > 0. Therefore, changing the input from num to num - 1 doesn't have any effect on the expression add = min(num // val, n). So enough(num) would also return True, just like enough(num). But we already know num is the minimal input satisfying enough function, so enough(num - 1) has to be False. Contradiction! The opposite of our original assumption is true: num is actually in the table.", "Very similar to LC 668 above, both are about finding Kth-Smallest. Just like LC 668, We can design an enough function, given an input distance, determine whether there're at least k pairs whose distances are less than or equal to distance. We can sort the input array and use two pointers (fast pointer and slow pointer, pointed at a pair) to scan it. Both pointers go from leftmost end. If the current pair pointed at has a distance less than or equal to distance, all pairs between these pointers are valid (since the array is already sorted), we move forward the fast pointer. Otherwise, we move forward the slow pointer. By the time both pointers reach the rightmost end, we finish our scan and see if total counts exceed k. Here is the implementation:", "Obviously, our search space should be [0, max(nums) - min(nums)]. Now we are ready to copy-paste our template:", "Nothing special. Still finding the Kth-Smallest. We need to design an enough function, given an input num, determine whether there are at least n ugly numbers less than or equal to num. Since a might be a multiple of b or c, or the other way round, we need the help of greatest common divisor to avoid counting duplicate numbers.", "After so many problems introduced above, this one should be a piece of cake. We don\u2019t even need to bother to design a condition function, because the problem has already told us explicitly what condition we need to satisfy.", "Wow, thank you so much for making it to the end, really appreciate that. As you can see from the python codes above, they all look very similar to each other. That\u2019s because I copy-pasted my template all the time. No exception. This is the strong proof of my template\u2019s powerfulness. I believe everyone can acquire this binary search template to solve many problems. All we need is just more practice to build up our ability to discover the monotonicity of the problem and to design a beautiful condition function.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F1f850ef95651&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpowerful-ultimate-binary-search-template-and-many-leetcode-problems-1f850ef95651&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpowerful-ultimate-binary-search-template-and-many-leetcode-problems-1f850ef95651&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpowerful-ultimate-binary-search-template-and-many-leetcode-problems-1f850ef95651&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpowerful-ultimate-binary-search-template-and-many-leetcode-problems-1f850ef95651&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----1f850ef95651--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----1f850ef95651--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@zhijunl?source=post_page-----1f850ef95651--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@zhijunl?source=post_page-----1f850ef95651--------------------------------", "anchor_text": "Zhijun Liao"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff7f49e28843a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpowerful-ultimate-binary-search-template-and-many-leetcode-problems-1f850ef95651&user=Zhijun+Liao&userId=f7f49e28843a&source=post_page-f7f49e28843a----1f850ef95651---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1f850ef95651&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpowerful-ultimate-binary-search-template-and-many-leetcode-problems-1f850ef95651&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1f850ef95651&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpowerful-ultimate-binary-search-template-and-many-leetcode-problems-1f850ef95651&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@leecampbell", "anchor_text": "Lee Campbell"}, {"url": "https://unsplash.com/photos/DtDlVpy-vvQ", "anchor_text": "Unsplash"}, {"url": "https://leetcode.com/problems/first-bad-version/", "anchor_text": "First Bad Version - LeetCodeYou are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of\u2026leetcode.com"}, {"url": "https://leetcode.com/problems/sqrtx/", "anchor_text": "Sqrt(x) - LeetCodeImplement int sqrt(int x). Compute and return the square root of x, where x is guaranteed to be a non-negative integer\u2026leetcode.com"}, {"url": "https://leetcode.com/problems/search-insert-position/", "anchor_text": "Search Insert Position - LeetCodeGiven a sorted array and a target value, return the index if the target is found. If not, return the index where it\u2026leetcode.com"}, {"url": "https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/", "anchor_text": "Capacity To Ship Packages Within D Days - LeetCodeA conveyor belt has packages that must be shipped from one port to another within D days. The i-th package on the\u2026leetcode.com"}, {"url": "https://leetcode.com/problems/split-array-largest-sum/", "anchor_text": "Split Array Largest Sum - LeetCodeGiven an array which consists of non-negative integers and an integer , you can split the array into non-empty\u2026leetcode.com"}, {"url": "https://leetcode.com/problems/koko-eating-bananas/", "anchor_text": "Koko Eating Bananas - LeetCodeKoko loves to eat bananas. There are N piles of bananas, the i-th pile has piles[i] bananas. The guards have gone and\u2026leetcode.com"}, {"url": "https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/", "anchor_text": "Minimum Number of Days to Make m Bouquets - LeetCodeGiven an integer array bloomDay, an integer m and an integer k. We need to make m bouquets. To make a bouquet, you need\u2026leetcode.com"}, {"url": "https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/description/", "anchor_text": "Kth Smallest Number in Multiplication Table - LeetCodeNearly every one have used the Multiplication Table. But could you find out the k-th smallest number quickly from the\u2026leetcode.com"}, {"url": "https://leetcode.com/problems/find-k-th-smallest-pair-distance/", "anchor_text": "Find K-th Smallest Pair Distance - LeetCodeLevel up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared\u2026leetcode.com"}, {"url": "https://leetcode.com/problems/ugly-number-iii/", "anchor_text": "Ugly Number III - LeetCodeLevel up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared\u2026leetcode.com"}, {"url": "https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/", "anchor_text": "Find the Smallest Divisor Given a Threshold - LeetCodeGiven an array of integers nums and an integer threshold, we will choose a positive integer divisor and divide all the\u2026leetcode.com"}, {"url": "https://leetcode.com/problems/split-array-largest-sum/discuss/89819/C%2B%2B-Fast-Very-clear-explanation-Clean-Code-Solution-with-Greedy-Algorithm-and-Binary-Search", "anchor_text": "[C++ / Fast / Very clear explanation / Clean Code] Solution with Greedy Algorithm and Binary Search"}, {"url": "https://leetcode.com/problems/find-k-th-smallest-pair-distance/discuss/109082/Approach-the-problem-using-the-%22trial-and-error%22-algorithm", "anchor_text": "Approach the problem using the \u201ctrial and error\u201d algorithm"}, {"url": "https://leetcode.com/problems/binary-search/discuss/423162/Binary-Search-101-The-Ultimate-Binary-Search-Handbook", "anchor_text": "Binary Search 101 The-Ultimate-Binary-Search-Handbook \u2014 LeetCode"}, {"url": "https://leetcode.com/problems/ugly-number-iii/discuss/387539/cpp-Binary-Search-with-picture-and-Binary-Search-Template", "anchor_text": "ugly-number-iii Binary Search with picture & Binary Search Template \u2014 LeetCode"}, {"url": "https://medium.com/tag/leetcode?source=post_page-----1f850ef95651---------------leetcode-----------------", "anchor_text": "Leetcode"}, {"url": "https://medium.com/tag/algorithms?source=post_page-----1f850ef95651---------------algorithms-----------------", "anchor_text": "Algorithms"}, {"url": "https://medium.com/tag/binary-search?source=post_page-----1f850ef95651---------------binary_search-----------------", "anchor_text": "Binary Search"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1f850ef95651&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpowerful-ultimate-binary-search-template-and-many-leetcode-problems-1f850ef95651&user=Zhijun+Liao&userId=f7f49e28843a&source=-----1f850ef95651---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1f850ef95651&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpowerful-ultimate-binary-search-template-and-many-leetcode-problems-1f850ef95651&user=Zhijun+Liao&userId=f7f49e28843a&source=-----1f850ef95651---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1f850ef95651&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpowerful-ultimate-binary-search-template-and-many-leetcode-problems-1f850ef95651&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----1f850ef95651--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F1f850ef95651&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpowerful-ultimate-binary-search-template-and-many-leetcode-problems-1f850ef95651&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----1f850ef95651---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----1f850ef95651--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----1f850ef95651--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----1f850ef95651--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----1f850ef95651--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----1f850ef95651--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----1f850ef95651--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----1f850ef95651--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----1f850ef95651--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@zhijunl?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@zhijunl?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Zhijun Liao"}, {"url": "https://medium.com/@zhijunl/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "56 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff7f49e28843a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpowerful-ultimate-binary-search-template-and-many-leetcode-problems-1f850ef95651&user=Zhijun+Liao&userId=f7f49e28843a&source=post_page-f7f49e28843a--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F53a5bd887923&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpowerful-ultimate-binary-search-template-and-many-leetcode-problems-1f850ef95651&newsletterV3=f7f49e28843a&newsletterV3Id=53a5bd887923&user=Zhijun+Liao&userId=f7f49e28843a&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}