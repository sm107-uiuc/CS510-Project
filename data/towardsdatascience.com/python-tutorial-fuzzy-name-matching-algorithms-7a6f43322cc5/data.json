{"url": "https://towardsdatascience.com/python-tutorial-fuzzy-name-matching-algorithms-7a6f43322cc5", "time": 1682995261.9017758, "path": "towardsdatascience.com/python-tutorial-fuzzy-name-matching-algorithms-7a6f43322cc5/", "webpage": {"metadata": {"title": "Python Tutorial: Fuzzy Name Matching Algorithms | by Felix Kuestahler | Towards Data Science", "h1": "Python Tutorial: Fuzzy Name Matching Algorithms", "description": "This is the fifth article of our journey into the Python data exploration world. Click on the link above, to get a list of the published articles. In statistical data sets retrieved from public\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.rosette.com/blog/overview-fuzzy-name-matching-techniques/", "anchor_text": "rosette.com", "paragraph_index": 2}, {"url": "https://github.com/talfco/clb-sentiment/tree/master/src/lesson5", "anchor_text": "Github tutorial source code", "paragraph_index": 6}, {"url": "https://en.wikipedia.org/wiki/Z3_(computer)", "anchor_text": "Wikipedia", "paragraph_index": 17}, {"url": "http://www.b-eye-network.com/view/1596", "anchor_text": "here", "paragraph_index": 19}, {"url": "http://aspell.net/metaphone/", "anchor_text": "Double Metaphone", "paragraph_index": 22}, {"url": "https://pypi.org/project/Metaphone/", "anchor_text": "available", "paragraph_index": 23}, {"url": "https://docs.pytest.org/en/latest/", "anchor_text": "Link", "paragraph_index": 26}, {"url": "https://scotch.io/tutorials/an-introduction-to-regex-in-python", "anchor_text": "following tutorial", "paragraph_index": 32}, {"url": "https://towardsdatascience.com/python-tutorial-connect-government-data-apis-by-using-the-factory-pattern-501e5c65ba6d", "anchor_text": "earlier tutorial", "paragraph_index": 36}, {"url": "https://pandas.pydata.org/pandas-docs/version/0.22/generated/pandas.DataFrame.apply.html", "anchor_text": "Panda Data Frame apply", "paragraph_index": 39}, {"url": "http://matthewtmead.com/blog/hollywood-principle-dont-call-us-well-call-you-4/", "anchor_text": "blog article of Matthew Mead", "paragraph_index": 44}, {"url": "https://datacarpentry.org/python-ecology-lesson/05-merging-data/", "anchor_text": "datacarpentry.org", "paragraph_index": 49}, {"url": "https://towardsdatascience.com/python-tutorial-connect-government-data-apis-by-using-the-factory-pattern-501e5c65ba6d", "anchor_text": "article", "paragraph_index": 57}, {"url": "https://github.com/talfco/clb-sentiment", "anchor_text": "Github project", "paragraph_index": 59}, {"url": "https://twitter.com/i/moments/1092507080307720193", "anchor_text": "here", "paragraph_index": 59}, {"url": "https://atnode.ch/", "anchor_text": "https://atnode.ch/", "paragraph_index": 61}], "all_paragraphs": ["This is the fifth article of our journey into the Python data exploration world. Click on the link above, to get a list of the published articles.", "In statistical data sets retrieved from public sources the names (of a person) are often treated the same as metadata for some other field like an email, phone number, or an ID number. This is the case in our sample sets:", "When names are your only unifying data point, correctly matching similar names takes on greater importance, however their variability and complexity make name matching a uniquely challenging task. Nicknames, translation errors, multiple spellings of the same name, and more all can result in missed matches. (rosette.com)", "That\u2019s precisely the situation we are confronted now:", "Our twitter data set contains a Name variable, which is set by the Twitter user itself. Dependent on the person\u2019s preference it may", "These leaves us with some data quality and normalization challenges, which we have to address so that we can use the Name attribute as a matching identifier.", "Some of the challenges \u2014 as well as our strategy how we want to tackle them \u2014 are described in the below table. Each of the method used to address a challenge will be explained in this article and is part of the Github tutorial source code.", "Let\u2019s start then, by addressing the challenge of Titles&Honorifics, Missing Components, and some other anomalies first.", "We are in the lucky position that our list is manageable from a number of records point of view, i.e., we can do a manual check about the anomalies and titles used in \u201cName\u201d attribute.", "Our quality review shows that the Name field seems to have a good quality (no dummy or nicknames used). However, we found some anomalies, as shown below:", "We fix these anomalies in our program in a first cleaning step. To stay generic, we use once again our yaml configuration file and add two additional parameters.", "Our country-specific yaml file is enhanced by the following entries.", "The cleansing step is called in the below method, which assesses every row of our Twitter table (its integration into the program is explained later)", "Pretty straightforward by using the String replace method", "For our next normalizing step, we introduce an approach which has its origin in the time when America was confronted with a huge wave of immigrants 100 years ago.", "The principle of the algorithm goes back to the last century, actually to the year 1918 (when the first computer was years away).", "Just as side information (should you ever participate in a millionaire quiz show), the first computer was 23 years away", "The Z3 was a German electromechanical computer designed by Konrad Zuse. It was the world\u2019s first working programmable, fully automatic digital computer. The Z3 was built with 2,600 relays, implementing a 22-bit word length that operated at a clock frequency of about 4\u20135 Hz. Program code was stored on punched film. Initial values were entered manually (Wikipedia)", "So back to 1918, in that year Robert C. Russell of the US Census Bureau invented the Soundex algorithm which is capable of indexing the English language in a way that multiple spellings of the same name could be found with only a cursory glance.", "Immigrants to the United States had a native language that was not based on Roman characters. To write their names, the names of their relatives, or the cities they arrived from, the immigrants had to make their best guess of how to express their symbolic language in English. The United States government realized the need to be able to categorize the names of private citizens in a manner that allowed for multiple spellings of the same name (e.g. Smith and Smythe) to be grouped. (read the full story here)", "The Soundex algorithm is based on a phonetical categorization of letters of the alphabet. In his patent, Russell describes the strategy assigning a numeric value to each category. For example, Johnson was mapped to J525, Miller to M460 etc.", "The Soundex algorithm evolved over time in the context of efficiency and accuracy and was replaced with other algorithms.", "For the most part, they have all been replaced by the powerful indexing system called Double Metaphone. The algorithm is available as open source and its last version was released around 2009.", "Luckily there is a Python library available, which we use in our program. We write some small wrapper methods around the algorithm and implement a compare method.", "The doublemetaphone method returns a tuple of two characters key, which are a phonetic translation of the passed in word. Our compare method shows the ranking capability of the algorithm which is quite limited.", "Let\u2019s run some verification checks to assess the efficiency of the algorithm by introducing the test_class.py which is based on the Python pytest framework.", "The pytest framework makes it easy to write small tests, yet scales to support complex functional testing for applications and libraries. (Link)", "Its usage is straightforward and, you can see the test class implementation below", "The tests result are shown below. We used two names (A+B) and were checking with some changed names (A1/A2+B1/B2/B3) the efficiency of the algorithm.", "Our small test run has shown that the following additional cleaning steps are beneficial:", "Besides getting rid of any special character, we decide to remove any Unicode character, i.e. in Switzerland, multiple German (\u00e4,\u00f6,\u00fc), French (\u00e0,\u00e9,\u00e8) or Italian umlaut are used, and we want to get rid of them as well.", "The below normalize_unicode_to_ascii method uses the unicodedata library to convert the name to ASCII and then change all character to lower case. Afterward, two regular expressions are used to remove the special characters, as well as multiple spaces.", "Regular expression operations are a powerful mechanism but not easy to understand for a novice. You may work through the following tutorial to get the first impression of this powerful approach.", "We have now all our name cleanser, normalization, and phonetic key generator methods together (bundled in the namemachting.py module) and can finally construct our name matching identifiers creation method(s) __calculate_name_matching for our two classes govAPI and GovernmentSocialMediaAnalyzer.", "Both of the classes get a new method, which we apply to their Panda data frames and each method creates three new identifier attributes (col_match1, col_match2, col_match3). The three columns can then be used to merge the two data frames.", "The method for our governmentAPI class looks as follows:", "So for our govAPI class as follows. It\u2019s an implemented method in our abstract class. The method is used for any implemented sub-class (refer to the factory design explained in our earlier tutorial)", "The implementation is straightforward, we normalize the person\u2019s name of each table (from the government API we got back three independent attributes, from the Twitter API one account name) and then calculate the two double metaphone identifier strings. All three new values we append to the passed in row.", "One question is still open: \u201cHow do we use our new methods to get the data frame enhanced by the three columns with its calculated values for each row?", "Well, that can be achieved quite easily by using the Panda Data Frame apply method, which is defined as:", "apply() can apply a function along any axis of the dataframe", "This is a nice and elegant way to do any calculation on each row or column of a data frame.", "Below you see the enhanced create_politican_from_govapi_table method. On code line 4 we newly call the apply method of the data frame (df) and pass in as a parameter our method name self.__calculate_name_matching and instruct the apply method to call our method for each row (axis=1).", "Very nifty isn\u2019t it? We didn\u2019t have to code any kind of loops which are fetching data, checking for the end of loop conditions and so on. We just have implemented the method which can be passed to the apply method.", "This kind of interaction is a well-known design principle in IT, known under the name \u201cHollywood Principle\u201d, which the excellent blog article of Matthew Mead describes as follows:", "The essence of this principle is \u201cdon\u2019t call us, we\u2019ll call you\u201d. As you know, this is a response you might hear after auditioning for a role in a Hollywood movie. And this is the same concept for the software Hollywood Principle too. The intent is to take care to structure and implement your dependencies wisely.", "Think about our implementation above. Our __calculate_name_matching method is completely decoupled of the panda data frame implementation. Our method gets just a row dictionary as an input, which we can manipulate and can give back at the end as the return value. We are completely unaware that there is a massive panda data frame implementation involved and don\u2019t have any dependency on it.", "At its most basic level, the principle is about reducing the coupling in a software system. It gets back to the well known phrase in software development: loose coupling and high cohesion. You can keep classes loosely coupled by ensuring that you don\u2019t have unnecessary references and you are referencing classes and other subsystems properly. Although the Hollywood Principle does not dictate anything about cohesion, it is an important aspect too. Cohesion is about keeping your classes true to their intent and not allowing their behavior to expand beyond its core purpose. Like high coupling, low cohesion doesn\u2019t tend to cause systems to be unstable or not work properly, but will likely lead to difficulty in maintaining the software.", "Enough design teaching for today, when we run our program both plotly politician tables are enhanced by 3 new attributes, which allows us to join them together finally (uff\u2026 quite some conceptual work we had to do)", "We now have to join the two data frames, which is one of the many combining and merging possibilities which Panda is offering. Refer to the following article by datacarpentry.org, which gives a good introduction to the overall topic.", "Another way to combine DataFrames is to use columns in each dataset that contain common values (a common unique id). Combining DataFrames using a common field is called \u201cjoining\u201d. The columns containing the common values are called \u201cjoin key(s)\u201d. Joining DataFrames in this way is often useful when one DataFrame is a \u201clookup table\u201d containing additional data that we want to include in the other.", "This is achieved by the merge method which can be applied to a Panda data frame (see code line 23 below). You have to provide as parameters", "We indicate an \u201couter left\u201d join (how=left) which can be visualized as follows", "Omitting the how parameter would result in an inner join", "\u201cInner Join\u201d means only take over rows which are matching, \u201cLeft Join\u201d means to take over ALL row of the left data frame. If there is no matching right table record, fill the relevant record with \u201cNaN\u201d values.", "Our new Plotly table CH-tw-politican-merged-list has such kind of entries.", "Well, that means our matching strategy still misses entries. Let\u2019s compare the Pie Chart of our merged table, with the initial one:", "The initial one (refer to this article) missed 51 one, with our simple merge strategy we could identify another 14 entries.", "So, we are not there yet (argh\u2026), but enough for today, in the next session we try to adapt our matching strategy so that we can reduce the unknown once again.", "The source code you can find in the corresponding Github project, a list of all other articles here.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Exploring the emerging world of decentralization. All content and opinion expressed in the context of my legal entity https://atnode.ch/"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F7a6f43322cc5&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-tutorial-fuzzy-name-matching-algorithms-7a6f43322cc5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-tutorial-fuzzy-name-matching-algorithms-7a6f43322cc5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-tutorial-fuzzy-name-matching-algorithms-7a6f43322cc5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-tutorial-fuzzy-name-matching-algorithms-7a6f43322cc5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----7a6f43322cc5--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----7a6f43322cc5--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.cloudburo.net/?source=post_page-----7a6f43322cc5--------------------------------", "anchor_text": ""}, {"url": "https://medium.cloudburo.net/?source=post_page-----7a6f43322cc5--------------------------------", "anchor_text": "Felix Kuestahler"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F15626f27740c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-tutorial-fuzzy-name-matching-algorithms-7a6f43322cc5&user=Felix+Kuestahler&userId=15626f27740c&source=post_page-15626f27740c----7a6f43322cc5---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7a6f43322cc5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-tutorial-fuzzy-name-matching-algorithms-7a6f43322cc5&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7a6f43322cc5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-tutorial-fuzzy-name-matching-algorithms-7a6f43322cc5&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/tagged/python-stat-tutorial", "anchor_text": "Python Statistic Tutorial Series"}, {"url": "https://www.rosette.com/blog/overview-fuzzy-name-matching-techniques/", "anchor_text": "rosette.com"}, {"url": "https://github.com/talfco/clb-sentiment/tree/master/src/lesson5", "anchor_text": "Github tutorial source code"}, {"url": "https://en.wikipedia.org/wiki/Z3_(computer)", "anchor_text": "Wikipedia"}, {"url": "http://creativecommons.org/licenses/by-sa/3.0/", "anchor_text": "CC BY-SA 3.0"}, {"url": "http://www.b-eye-network.com/view/1596", "anchor_text": "here"}, {"url": "https://commons.wikimedia.org/wiki/File:Arriving_at_Ellis_Island_LCCN2014710704.jpg", "anchor_text": "Commons Licence"}, {"url": "http://aspell.net/metaphone/", "anchor_text": "Double Metaphone"}, {"url": "https://pypi.org/project/Metaphone/", "anchor_text": "available"}, {"url": "https://docs.pytest.org/en/latest/", "anchor_text": "Link"}, {"url": "https://scotch.io/tutorials/an-introduction-to-regex-in-python", "anchor_text": "following tutorial"}, {"url": "https://towardsdatascience.com/python-tutorial-connect-government-data-apis-by-using-the-factory-pattern-501e5c65ba6d", "anchor_text": "earlier tutorial"}, {"url": "https://unsplash.com/photos/goholCAVTRs?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Annie Spratt"}, {"url": "https://unsplash.com/search/photos/telephone?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://pandas.pydata.org/pandas-docs/version/0.22/generated/pandas.DataFrame.apply.html", "anchor_text": "Panda Data Frame apply"}, {"url": "http://matthewtmead.com/blog/hollywood-principle-dont-call-us-well-call-you-4/", "anchor_text": "blog article of Matthew Mead"}, {"url": "https://datacarpentry.org/python-ecology-lesson/05-merging-data/", "anchor_text": "datacarpentry.org"}, {"url": "https://towardsdatascience.com/python-tutorial-connect-government-data-apis-by-using-the-factory-pattern-501e5c65ba6d", "anchor_text": "article"}, {"url": "https://github.com/talfco/clb-sentiment", "anchor_text": "Github project"}, {"url": "https://twitter.com/i/moments/1092507080307720193", "anchor_text": "here"}, {"url": "https://medium.com/tag/data-science?source=post_page-----7a6f43322cc5---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/programming?source=post_page-----7a6f43322cc5---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-exploration?source=post_page-----7a6f43322cc5---------------data_exploration-----------------", "anchor_text": "Data Exploration"}, {"url": "https://medium.com/tag/python?source=post_page-----7a6f43322cc5---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/python-stat-tutorial?source=post_page-----7a6f43322cc5---------------python_stat_tutorial-----------------", "anchor_text": "Python Stat Tutorial"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7a6f43322cc5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-tutorial-fuzzy-name-matching-algorithms-7a6f43322cc5&user=Felix+Kuestahler&userId=15626f27740c&source=-----7a6f43322cc5---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7a6f43322cc5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-tutorial-fuzzy-name-matching-algorithms-7a6f43322cc5&user=Felix+Kuestahler&userId=15626f27740c&source=-----7a6f43322cc5---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7a6f43322cc5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-tutorial-fuzzy-name-matching-algorithms-7a6f43322cc5&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----7a6f43322cc5--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F7a6f43322cc5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-tutorial-fuzzy-name-matching-algorithms-7a6f43322cc5&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----7a6f43322cc5---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----7a6f43322cc5--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----7a6f43322cc5--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----7a6f43322cc5--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----7a6f43322cc5--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----7a6f43322cc5--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----7a6f43322cc5--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----7a6f43322cc5--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----7a6f43322cc5--------------------------------", "anchor_text": ""}, {"url": "https://medium.cloudburo.net/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.cloudburo.net/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Felix Kuestahler"}, {"url": "https://medium.cloudburo.net/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "635 Followers"}, {"url": "https://atnode.ch/", "anchor_text": "https://atnode.ch/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F15626f27740c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-tutorial-fuzzy-name-matching-algorithms-7a6f43322cc5&user=Felix+Kuestahler&userId=15626f27740c&source=post_page-15626f27740c--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F1f17bfe73f81&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-tutorial-fuzzy-name-matching-algorithms-7a6f43322cc5&newsletterV3=15626f27740c&newsletterV3Id=1f17bfe73f81&user=Felix+Kuestahler&userId=15626f27740c&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}