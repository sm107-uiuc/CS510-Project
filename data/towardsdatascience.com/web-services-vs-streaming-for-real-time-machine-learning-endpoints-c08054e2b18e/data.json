{"url": "https://towardsdatascience.com/web-services-vs-streaming-for-real-time-machine-learning-endpoints-c08054e2b18e", "time": 1683010373.79399, "path": "towardsdatascience.com/web-services-vs-streaming-for-real-time-machine-learning-endpoints-c08054e2b18e/", "webpage": {"metadata": {"title": "Web services vs. streaming for real-time machine learning endpoints | by Avi Gabay | Towards Data Science", "h1": "Web services vs. streaming for real-time machine learning endpoints", "description": "Machine learning (ML) has been one of the fastest growing trends in the industry. Many companies spend time and money on marketing campaigns to show how they use ML for business automation and\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.playtika.com/", "anchor_text": "Playtika", "paragraph_index": 1}, {"url": "https://cnvrg.io/", "anchor_text": "cnvrg.io is an AI OS", "paragraph_index": 2}, {"url": "https://cnvrg.io/case-studies/playtika/", "anchor_text": "cnvrg.io unified our ML workflow", "paragraph_index": 2}, {"url": "https://cnvrg.io/mlops-machine-learning-production/", "anchor_text": "cnvrg.io\u2019s MLOps solutions", "paragraph_index": 3}, {"url": "https://cnvrg.io/platform/dataset-management/", "anchor_text": "data version control and managemen", "paragraph_index": 3}, {"url": "https://cnvrg.io/platform/machine-learning-tracking/", "anchor_text": "experiment tracking", "paragraph_index": 3}, {"url": "https://cnvrg.io/platform/machine-learning-model-deployment/", "anchor_text": "deploy ML models", "paragraph_index": 3}, {"url": "https://cnvrg.io/introducing-streaming-endpoints/", "anchor_text": "Kafka Streams", "paragraph_index": 8}, {"url": "https://cnvrg.io/integrations/kafka/", "anchor_text": "Kafka Streams", "paragraph_index": 9}, {"url": "https://cnvrg.io/platform/scalable-streaming-endpoints/", "anchor_text": "streaming feature", "paragraph_index": 10}], "all_paragraphs": ["Machine learning (ML) has been one of the fastest growing trends in the industry. Many companies spend time and money on marketing campaigns to show how they use ML for business automation and insights that in turn creates a winning product that beats out their competitors. Of course, there are few companies that actually produce and work on machine learning models that shape their user experience (and in real-time).", "Playtika\u2019s Artificial Intelligence Research is where all the magic of data science research occurs in order to produce real time game decisions to allow a better game play experience for our users. Playtika is a Game-Entertainment company that provides audiences around the world with a wide variety of games based on quality, and original content that is constantly changing and tailored to each player specifically. Playtika uses massive amounts of data to reshape the gaming landscape by tailoring user experience based on in-game actions. With over 30 million monthly active users (MAU), 10 billion daily events and over 9TB of daily processed data, Playtika is able to provide its scientists the data they need to create a continuously changing and adaptive game environment for its users based on their ingame behavior.", "As the demand to answer business needs with machine learning models increased, the Brain Engineering teams found themselves in need of a robust infrastructure that scales horizontally and can handle bursts, peaks, and fast creation of new ML Pipelines. We\u2019ve held a lot of thought about how we can handle our experiments, scaling and deployments, and found a new home-grown (Israeli) startup, built by experienced data scientists that answered our needs: meet cnvrg.io. cnvrg.io is an AI OS designed and built to organize every stage of a data-science project, including research, information collection, code writing, and model optimization at scale. cnvrg.io unified our ML workflow, and provided an MLOps solution so that our team could focus more on delivering high impact machine learning models and creating value for our business and users.", "Using cnvrg.io\u2019s MLOps solutions, we were able to decouple most of the work between our Data Scientists and ML Data Engineers. Being able to continuously write, train and deploy machine learning models to various stages (i.e. training, staging, production) in the click of a button, cnvrg.io was the answer to our processes and needs from research to production. It has all the tools provided by world known frameworks such as Amazon SageMaker, Mlflow, Kubeflow and others, in a user friendly interface, with features including data version control and management, experiment tracking, model management, model monitoring and deployment. Once our models were trained, curated and verified they were pushed to production on top of our Kubernetes Cluster ready to receive RESTful API requests for predictions and inferences. Being able to easily deploy ML models was great, but we found out that our models used various types of processes. Some models were triggered by batch processes, where once a day a scheduled Airflow task called for a Spark Process which would gather features for millions of players and then send requests for the model to predict. Other models had Kafka consumer processes that were triggered by in-game events which would then call the model for inferences. We\u2019ve seen that as Playtika\u2019s DAU grows and business pushes more player traffic to our models, we cannot always predict our peaks and that we suddenly need to handle request failure, batch partitioning and so on. We came to the understanding that just as the world of software moved from RESTful services to Streaming APIs, so should the world of ML.", "At a higher level, the main issues we encountered with REST APIs in our ML Pipelines can be summarized under the following three categories:", "As our batch processes gather millions of users and hundreds (if not thousands) of features, we could not send a single bulk request to a machine learning model over REST API and expect it to return in a reasonable amount of time (less than a few minutes \u2014 single digits). This is when our data engineers decided that it would be best to just split the batch into bulks of ~1000 Players (after doing some tuning on bulk size throughput). However, sending 1000 bulks in serial would just take too long, so we allowed parallelizing this process and therefore had multiple client threads sending requests. But, this in turn caused exhaustion of the models which introduced timeouts to the client making the call and leading for retry mechanism and the need for statistical analysis based on a dead letter queue. Client retries have created more traffic and more chaos, which lead to service exhaustion and client starvation, and what we like to call \u201cself denial of service\u201d.", "This has led us to look into circuit-breakers and rate limiting and even architecture change. Those of you who have worked extensively with microservices have probably heard of bulkhead pattern which is a type of application design that is tolerant of failure. In a bulkhead architecture, elements of an application are isolated into pools so that if one fails, the others will continue to function. It\u2019s named after the sectioned partitions (bulkheads) of a ship\u2019s hull. If the hull of a ship is compromised, only the damaged section fills with water, which prevents the ship from sinking. However, partitioning our models per group of users or requestor ID is such a large overhead in design and deployment and therefore seems like an irrelevant solution for our problem.", "So, we decided that it would be best if we go back to the origins of our system architecture and key concepts of our game architecture. Playtika\u2019s games have an event-driven service based backend. Some studios (games) have more than a couple hundred micro services deployed and communication between them is mostly performed using Kafka (our message bus). This in turn creates a system that is asynchronous (and therefore eventually consistent), fault tolerant, replayable and is highly scalable. We also know that our games and machine learning models never communicate directly using RESTful APIs. The basic reasoning behind it is that the most important parameter of our success is that the main game play and user experience will not be affected. All the extra \u201cnice to have\u201d features and insights are important, but our main goal is to keep the user excited, engaged and entertained as he keeps playing the game. Therefore all events from the game arrive at our Data Platform over public Kafka topics that are streamed to different layers of our systems including our Data Lake and Stream Processing Pipeline which decorates and normalizes the data to allow consumers such as Playtika Brain to run machine learning models. Moreover, the results of these models are pushed back to the game in the form of treatments (in game actions) or user state predictions through the same means \u2014 Kafka topics. Due to this event-driven ecosystem that Playtika has built, it only made sense to introduce streaming prediction pipelines ourselves.", "This is when we jumped on a call with cnvrg.io and discussed the possibility to package our models not only using REST API, but rather use Kafka Streams for incoming requests and outgoing inferences. For those of you who are not familiar with Kafka Streams, Kafka Streams is a client library for building applications and microservices, where the input and output data are stored in Kafka clusters. It addresses many hard problems that we encounter when using batch and REST API approach.", "Besides the great capabilities that Kafka Streams solves, stream processing itself allows us to gain better model computing performance. Since Playtika is event-driven, we usually look at throughput rather than latency. We do acknowledge that latency is important, especially in our front-end services, but many of our backend services explicitly look at the amount of messages they can handle rather than the latency for a single request. Moving to stream processing allowed us to bring our Kubernetes Pods to their most optimal deployment. We make sure that every Pod is deployed such that the amount of application threads that are running on the Node is at most N-1 where N is the number of CPUs on that node. As our models perform very little I/O and are only compute bound, we therefore want as little context switches as possible and want to make sure that every thread runs and utilizes a single CPU. So why N-1 and not N you ask? Well, we do want our beloved operating system to have its own processing unit. Therefore, by using stream processing we are able to increase our usage and performance of the underlying CPUs allowing for greater throughput.", "With all these thoughts in mind, we decided to put them into trial. This is exactly the point when our conversation with cnvrg.io got interesting and as soon as the streaming feature was in development phase we held a quick PoC with cnvrg.io which has led to the results below.", "We took a trained IMDB sentiment analysis model and deployed it in two forms. The first was using a Pod containing Nginx and Flask while the second was using a Pod containing a Kafka Streams application.", "The experiment was made on top of AWS. Each model ran on its own dedicated EC2 m5.large instances (2 CPUs, 8GB RAM).", "The REST service (model) is a Flask microservice deployed to a uWSGI server that resides behind an nginx.", "The Stream microservice is a daemon service that uses faust, a python stream processing library, to consume data from a Kafka topic and output the results to an output topic.", "The actual result parameters can be seen in the appendix section, where all graphs and tables are found.", "From the results below we discover that by using Kafka Streams we are able to increase our model throughput by up to 50% and on average by 30% when comparing to RESTful APIs. It should be noted that when looking at throughput we should look at successful throughput. This is the number of successful requests sent (ones that returned HTTP status code of 200) divided by the total number of seconds the test ran for. Due to the fact that there are failures in calculations (mostly caused by HTTP timeouts) we don\u2019t only \u201close\u201d the requests sent, we may need to replay them as retries and create even more traffic that is coming at the model.", "Another observation is that Kafka Streams microservice throughput does not diverge much over time. There\u2019s a divergence of 0.5TPS where in the webservice it reaches over 5TPS. The uniformity in throughput over time allows us to evaluate and plan the performance and scaling of our model.", "Due to the fact that Kafka Streams is fault tolerant and enables exactly once processing, there are no errors in our experiment. This does not mean that Kafka has no issues and can fail, however, in its basis it was designed to be highly available and transport billions of records. It is able to handle bursts and therefore the number of errors will always be minimal. Moreover, Kafka Streams is designed to allow exactly once processing and therefore we know that we will not cause message duplications.", "When observing REST API results (as seen in Graph-1) we see an increase in error rate after the first minute which keeps on diverging based on the load of the model instance. The client is exhausting the webservice which causes a slow down in model throughput which leads to greater latency and errors. It is clearly seen that latency and error rate correlate positively while with each other, while throughput correlates negatively with both.", "After deep analysis of our model run-time, we were able to see that moving to streaming technologies such as Kafka Streams has not only increased our model throughput during peak times, but has made our capacity planning more determinate and predictable. We are now able to handle peaks and failures without having to create satellite systems or write code to handle failures and edge cases. We have come with a rule of thumb that \u201call asynchronous predictions can be turned into streams when calculations are independent and discrete\u201d. This means that when prediction for events arriving from different players (entities) are unsusceptible (independent) and that events of the same player (entity) do not need to be grouped together (discrete), streaming technology can be applied. An example use case which this definition does not apply to is clustering problems where events must be grouped together and any kind of re-grouping will affect the label (target result).", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "problem solver, tech enthusiast & a gentleman"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fc08054e2b18e&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fweb-services-vs-streaming-for-real-time-machine-learning-endpoints-c08054e2b18e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fweb-services-vs-streaming-for-real-time-machine-learning-endpoints-c08054e2b18e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fweb-services-vs-streaming-for-real-time-machine-learning-endpoints-c08054e2b18e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fweb-services-vs-streaming-for-real-time-machine-learning-endpoints-c08054e2b18e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----c08054e2b18e--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c08054e2b18e--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@sinig?source=post_page-----c08054e2b18e--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@sinig?source=post_page-----c08054e2b18e--------------------------------", "anchor_text": "Avi Gabay"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2d93e277b6f4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fweb-services-vs-streaming-for-real-time-machine-learning-endpoints-c08054e2b18e&user=Avi+Gabay&userId=2d93e277b6f4&source=post_page-2d93e277b6f4----c08054e2b18e---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc08054e2b18e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fweb-services-vs-streaming-for-real-time-machine-learning-endpoints-c08054e2b18e&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc08054e2b18e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fweb-services-vs-streaming-for-real-time-machine-learning-endpoints-c08054e2b18e&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.playtika.com/", "anchor_text": "Playtika"}, {"url": "https://cnvrg.io/", "anchor_text": "cnvrg.io is an AI OS"}, {"url": "https://cnvrg.io/case-studies/playtika/", "anchor_text": "cnvrg.io unified our ML workflow"}, {"url": "https://cnvrg.io/mlops-machine-learning-production/", "anchor_text": "cnvrg.io\u2019s MLOps solutions"}, {"url": "https://cnvrg.io/platform/dataset-management/", "anchor_text": "data version control and managemen"}, {"url": "https://cnvrg.io/platform/machine-learning-tracking/", "anchor_text": "experiment tracking"}, {"url": "https://cnvrg.io/platform/machine-learning-model-deployment/", "anchor_text": "deploy ML models"}, {"url": "https://cnvrg.io/introducing-streaming-endpoints/", "anchor_text": "Kafka Streams"}, {"url": "https://cnvrg.io/integrations/kafka/", "anchor_text": "Kafka Streams"}, {"url": "https://cnvrg.io/platform/scalable-streaming-endpoints/", "anchor_text": "streaming feature"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----c08054e2b18e---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/ml-engineering?source=post_page-----c08054e2b18e---------------ml_engineering-----------------", "anchor_text": "ML Engineering"}, {"url": "https://medium.com/tag/data-science?source=post_page-----c08054e2b18e---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/ai?source=post_page-----c08054e2b18e---------------ai-----------------", "anchor_text": "AI"}, {"url": "https://medium.com/tag/mlops?source=post_page-----c08054e2b18e---------------mlops-----------------", "anchor_text": "Mlops"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc08054e2b18e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fweb-services-vs-streaming-for-real-time-machine-learning-endpoints-c08054e2b18e&user=Avi+Gabay&userId=2d93e277b6f4&source=-----c08054e2b18e---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc08054e2b18e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fweb-services-vs-streaming-for-real-time-machine-learning-endpoints-c08054e2b18e&user=Avi+Gabay&userId=2d93e277b6f4&source=-----c08054e2b18e---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc08054e2b18e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fweb-services-vs-streaming-for-real-time-machine-learning-endpoints-c08054e2b18e&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c08054e2b18e--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fc08054e2b18e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fweb-services-vs-streaming-for-real-time-machine-learning-endpoints-c08054e2b18e&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----c08054e2b18e---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----c08054e2b18e--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----c08054e2b18e--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----c08054e2b18e--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----c08054e2b18e--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----c08054e2b18e--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----c08054e2b18e--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----c08054e2b18e--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----c08054e2b18e--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@sinig?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@sinig?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Avi Gabay"}, {"url": "https://medium.com/@sinig/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "19 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2d93e277b6f4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fweb-services-vs-streaming-for-real-time-machine-learning-endpoints-c08054e2b18e&user=Avi+Gabay&userId=2d93e277b6f4&source=post_page-2d93e277b6f4--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F9d558c39c069&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fweb-services-vs-streaming-for-real-time-machine-learning-endpoints-c08054e2b18e&newsletterV3=2d93e277b6f4&newsletterV3Id=9d558c39c069&user=Avi+Gabay&userId=2d93e277b6f4&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}