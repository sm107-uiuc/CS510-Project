{"url": "https://towardsdatascience.com/business-intelligence-meets-data-engineering-with-emerging-technologies-8810c3eed8b1", "time": 1683009197.203028, "path": "towardsdatascience.com/business-intelligence-meets-data-engineering-with-emerging-technologies-8810c3eed8b1/", "webpage": {"metadata": {"title": "Business Intelligence meets Data Engineering with Emerging Technologies | by Simon Sp\u00e4ti | Towards Data Science", "h1": "Business Intelligence meets Data Engineering with Emerging Technologies", "description": "Today with ever-growing tools, framework and complex cloud architectures, how do we make BI easier, faster and more accessible again with data engineering?"}, "outgoing_paragraph_urls": [{"url": "https://www.sspaeti.com/blog/data-engineering-the-future-of-data-warehousing/", "anchor_text": "earlier post", "paragraph_index": 1}, {"url": "https://www.snowflake.com/", "anchor_text": "SnowflakeDB", "paragraph_index": 5}, {"url": "https://docs.snowflake.com/en/sql-reference/data-types-semistructured.html#variant", "anchor_text": "Variant", "paragraph_index": 5}, {"url": "http://danlinstedt.com/solutions-2/data-vault-basics/", "anchor_text": "data vault", "paragraph_index": 5}, {"url": "https://databricks.com/blog/2020/01/30/what-is-a-data-lakehouse.html", "anchor_text": "lakehouse", "paragraph_index": 9}, {"url": "https://databricks.com/glossary/what-is-spark-sql", "anchor_text": "Spark SQL", "paragraph_index": 9}, {"url": "https://prestodb.io/", "anchor_text": "Presto", "paragraph_index": 9}, {"url": "https://en.wikipedia.org/wiki/Data_mart", "anchor_text": "data marts", "paragraph_index": 11}, {"url": "https://www.linkedin.com/posts/sspaeti-com_four-different-data-architectures-activity-6660097384279744512--5e1", "anchor_text": "LinkedIn post", "paragraph_index": 12}, {"url": "https://www.sspaeti.com/blog/data-warehouse-vs-data-lake-etl-vs-elt/", "anchor_text": "earlier blog post", "paragraph_index": 12}, {"url": "https://delta.io/", "anchor_text": "Delta Lake", "paragraph_index": 13}, {"url": "https://databricks.com/blog/2019/02/04/introducing-delta-time-travel-for-large-scale-data-lakes.html", "anchor_text": "time-travel", "paragraph_index": 13}, {"url": "https://databricks.com/blog/2019/08/21/diving-into-delta-lake-unpacking-the-transaction-log.html", "anchor_text": "transaction log", "paragraph_index": 13}, {"url": "https://parquet.apache.org/", "anchor_text": "Apache Parquet", "paragraph_index": 13}, {"url": "https://en.wikipedia.org/wiki/Lambda_architecture", "anchor_text": "lambda architecture", "paragraph_index": 13}, {"url": "https://databricks.com/blog/2019/09/24/diving-into-delta-lake-schema-enforcement-evolution.html", "anchor_text": "schema evolution", "paragraph_index": 13}, {"url": "https://docs.databricks.com/delta/concurrency-control.html", "anchor_text": "optimistic concurrency", "paragraph_index": 13}, {"url": "https://delta.io/", "anchor_text": "delta.io", "paragraph_index": 13}, {"url": "https://databricks.com/session/keynote-from-apple", "anchor_text": "threat detection at scale", "paragraph_index": 13}, {"url": "https://databricks.com/", "anchor_text": "databricks", "paragraph_index": 14}, {"url": "https://parquet.apache.org/", "anchor_text": "Apache Parquet", "paragraph_index": 15}, {"url": "https://en.wikipedia.org/wiki/Surrogate_key", "anchor_text": "surrogate keys", "paragraph_index": 19}, {"url": "https://data-warehouses.net/glossary/dimensionalmodel.html", "anchor_text": "dimensional model", "paragraph_index": 19}, {"url": "https://danlinstedt.com/allposts/datavaultcat/dv2-keys-pros-cons/", "anchor_text": "hash keys", "paragraph_index": 20}, {"url": "https://en.wikipedia.org/wiki/Natural_key", "anchor_text": "business key", "paragraph_index": 20}, {"url": "https://danlinstedt.com/allposts/datavaultcat/dv2-keys-pros-cons/", "anchor_text": "great reasons", "paragraph_index": 21}, {"url": "https://en.wikipedia.org/wiki/Database_normalization", "anchor_text": "Normalisation", "paragraph_index": 22}, {"url": "https://www.advancinganalytics.co.uk/blog/2019/6/17/is-kimball-still-relevant-in-the-modern-data-warehouse", "anchor_text": "blog post", "paragraph_index": 22}, {"url": "https://jupyter.org/", "anchor_text": "jupyter", "paragraph_index": 24}, {"url": "https://zeppelin.apache.org/", "anchor_text": "zeppelin", "paragraph_index": 24}, {"url": "https://docs.databricks.com/notebooks/index.html", "anchor_text": "databricks", "paragraph_index": 24}, {"url": "https://en.wikipedia.org/wiki/Integrated_development_environment", "anchor_text": "IDE", "paragraph_index": 24}, {"url": "https://github.com/nteract/papermill", "anchor_text": "papermill", "paragraph_index": 26}, {"url": "https://dagster.io/", "anchor_text": "dagster", "paragraph_index": 26}, {"url": "https://dagster.readthedocs.io/en/latest/sections/learn/guides/solid/solid.html", "anchor_text": "solids", "paragraph_index": 26}, {"url": "https://www.sspaeti.com/blog/data-engineering-the-future-of-data-warehousing/#The_tool_language_Python", "anchor_text": "tooling language", "paragraph_index": 28}, {"url": "https://golang.org/", "anchor_text": "golang", "paragraph_index": 28}, {"url": "https://en.wikipedia.org/wiki/JavaScript", "anchor_text": "javascript", "paragraph_index": 28}, {"url": "https://www.scala-lang.org/", "anchor_text": "scala", "paragraph_index": 28}, {"url": "https://en.wikipedia.org/wiki/Object-oriented_language", "anchor_text": "object-oriented programming", "paragraph_index": 28}, {"url": "https://qr.ae/TWhzLf", "anchor_text": "hugely popular", "paragraph_index": 29}, {"url": "https://airflow.apache.org/", "anchor_text": "Apache Airflow", "paragraph_index": 29}, {"url": "https://qr.ae/pNrIPi", "anchor_text": "What are common alternatives to Airflow", "paragraph_index": 29}, {"url": "https://databricks.com/", "anchor_text": "Databricks", "paragraph_index": 32}, {"url": "https://www.sspaeti.com/blog/open-source-data-warehousing-druid-airflow-superset/", "anchor_text": "earlier post", "paragraph_index": 33}, {"url": "https://airflow.apache.org/", "anchor_text": "Apache Airflow", "paragraph_index": 33}, {"url": "https://druid.apache.org/", "anchor_text": "Apache Druid", "paragraph_index": 33}, {"url": "https://superset.incubator.apache.org/", "anchor_text": "Apache Superset", "paragraph_index": 33}, {"url": "https://en.wikipedia.org/wiki/Star_schema", "anchor_text": "star schema", "paragraph_index": 34}, {"url": "https://en.wikipedia.org/wiki/Idempotence", "anchor_text": "idempotency", "paragraph_index": 36}, {"url": "https://medium.com/@maximebeauchemin/functional-data-engineering-a-modern-paradigm-for-batch-data-processing-2327ec32c42a", "anchor_text": "functional programming", "paragraph_index": 36}, {"url": "https://en.wikipedia.org/wiki/Lambda_architecture", "anchor_text": "lambda architecture", "paragraph_index": 37}, {"url": "https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html", "anchor_text": "Spark Structured Streaming", "paragraph_index": 37}, {"url": "https://databricks.com/blog/2018/03/20/low-latency-continuous-processing-mode-in-structured-streaming-in-apache-spark-2-3-0.html", "anchor_text": "micro-batching", "paragraph_index": 37}, {"url": "https://databricks.com/blog/2019/09/24/diving-into-delta-lake-schema-enforcement-evolution.html", "anchor_text": "schema evolution", "paragraph_index": 40}, {"url": "https://docs.databricks.com/delta/concurrency-control.html", "anchor_text": "optimistic concurrency", "paragraph_index": 40}, {"url": "https://stackoverflow.blog/2020/05/29/why-kubernetes-getting-so-popular/", "anchor_text": "Kubernetes", "paragraph_index": 41}, {"url": "https://stackoverflow.com/a/11715598/5246670", "anchor_text": "scale-out", "paragraph_index": 41}, {"url": "https://www.openshift.com/", "anchor_text": "open-shift", "paragraph_index": 41}, {"url": "https://www.okd.io/", "anchor_text": "OKD", "paragraph_index": 41}, {"url": "https://operatorhub.io/", "anchor_text": "OperatorHub", "paragraph_index": 41}, {"url": "https://en.wikipedia.org/wiki/YAML", "anchor_text": "YAML", "paragraph_index": 42}, {"url": "https://medium.com/knative/knative-v0-3-autoscaling-a-love-story-d6954279a67a", "anchor_text": "Knative", "paragraph_index": 42}, {"url": "https://en.wikipedia.org/wiki/Docker_(software)", "anchor_text": "Docker", "paragraph_index": 42}, {"url": "https://coreos.com/rkt/", "anchor_text": "Rocket", "paragraph_index": 42}, {"url": "https://www.linkedin.com/in/seanknapp", "anchor_text": "Sean Knapp", "paragraph_index": 45}, {"url": "https://www.ascend.io/", "anchor_text": "Ascend", "paragraph_index": 45}, {"url": "https://www.datacouncil.ai/hubfs/Data%20Council/slides/nyc19/Sean-Knapp-Ascend%20-%20Intelligent%20Orchestration%20-%20Data%20Council%20NY%202019.pdf", "anchor_text": "Intelligent Orchestration: Data\u2019s missing link", "paragraph_index": 45}, {"url": "https://www.ascend.io/", "anchor_text": "Ascend", "paragraph_index": 46}, {"url": "https://github.com/pditommaso/awesome-pipeline#pipeline-frameworks--libraries", "anchor_text": "Awesome Pipeline List", "paragraph_index": 49}, {"url": "https://qr.ae/pNrIPi", "anchor_text": "common alternatives to Airflow", "paragraph_index": 49}, {"url": "http://cidrdb.org/cidr2017/papers/p111-hellerstein-cidr17.pdf", "anchor_text": "Data catalogs", "paragraph_index": 51}, {"url": "https://www.lyft.com/", "anchor_text": "Lyft", "paragraph_index": 52}, {"url": "https://github.com/lyft/amundsen", "anchor_text": "Amundsen", "paragraph_index": 52}, {"url": "https://eng.lyft.com/amundsen-lyfts-data-discovery-metadata-engine-62d27254fbb9", "anchor_text": "rating", "paragraph_index": 52}, {"url": "https://en.wikipedia.org/wiki/Platform_as_a_service", "anchor_text": "platform as a service (PaaS)", "paragraph_index": 55}, {"url": "https://www.ascend.io/", "anchor_text": "Ascend", "paragraph_index": 55}, {"url": "https://www.palantir.com/palantir-foundry/", "anchor_text": "Palantir Foundry", "paragraph_index": 55}, {"url": "https://www.sspaeti.com/blog/olap-whats-coming-next/#List_of_Cube-Replacements", "anchor_text": "earlier post", "paragraph_index": 57}, {"url": "https://www.sspaeti.com/blog/data-engineering-project-in-twenty-minutes/", "anchor_text": "Building a Data Engineering Project in 20 Minutes", "paragraph_index": 61}], "all_paragraphs": ["Today we have more requirements with ever-growing tools and framework, complex cloud architectures, and with data stack that is changing rapidly. I hear claims: \u201cBusiness Intelligence (BI) takes too long to integrate new data\u201d, or \u201cunderstanding how the numbers match up is very hard and needs lots of analysis\u201d. The goal of this article is to make business intelligence easier, faster and more accessible with techniques from the sphere of data engineering.", "In an earlier post, I pointed out what data engineering is and why it\u2019s the successor of business intelligence and data warehousing. When a data engineer is needed and what he is doing. The data engineers tooling language python and what has changed in ETL. In this post, I will focus on challenges in BI, and how to solve them with data engineering.", "But first, let\u2019s talk a second about \u201cwhat should BI do for us?\u201d", "In my terms, BI should produce a simple overview of your business, boost efficiency, and automate repetitive tasks across your organisation. In more detail:", "On the other hand, BI has some substantial problems with speed and transparency. I tried to summarise the issues I learned or heard people telling over my career as a BI engineer and specialist working with Oracle and SQL Server:", "This list is not complete by any means. Also, can any point be mitigated with special solutions (e.g. cloud-solutions with SnowflakeDB with Variant data-type for semi-structured data) or different approaches (data vault for fast integration). However, stereotypes are deeply preserved and from what I hear, still around.", "Because I encountered these bottlenecks myself, and more frequently lately, I asked myself: \u201cHow can we:", "I\u2019m aware that nowadays a lot is going on, especially in around open-source tools and framework, data ops and deployments with container-orchestration systems and the like.", "Nevertheless, I tried to collect some approaches that helped me make this complex construct more open and ease the overall experience. Some will present itself more complicated in the short term, but significantly leaner and less complex over time. You can apply each of them separately, yet the more you use, the more apparent the flow as a whole will be.", "Let\u2019s start with the first: Use a data lake or lakehouse instead of a data warehouse (DWH). This gives you speed, ability to have (semi-) unstructured data and define schema later during transformation (ELT rather than ETL). As well it will provide you with high transparency as data gets stored into a data lake open for everyone to access or analyse. It\u2019s easy to add new columns or share your data with co-workers. You can use wide distributed computation like Spark SQL or Presto to explore, join and transform your data instantly with ad-hoc queries.", "The data availability is fast, no batch needed every night as data gets deposited into the lake as a first step. It may not be clean yet, but you can directly start exploring and add transformations to do so. A common approach is to add a data lake in front of the data warehouse. This way, you have the benefit of both, instant data in the lake but also structured and cleansed at the end of the data warehouse.", "A practical overview which illustrates the components involved well is the evolution from a data warehouse over the data lake to a lakehouse. The most important part to notice is the ETL which is also the central component of data engineering overall. You see that it moved from hidden behind the data marts to the data lake architecture to the primary transformation layer in one unified block.", "Further data architectures that manifest the components in different angels you can find in my LinkedIn post or, for more information about a data warehouse and its comparison to a data lake, check out my earlier blog post.", "To support various features of a relational database in a data lake, you need transactional processing. Luckily Delta Lake is here to rescue you. Delta has many awesome features like ACID transactions, time-travel, keeping a transaction log, SQL API to write native SQL as insert, update, delete and even merge statements, open-format (Apache Parquet), unified batch and streaming source and sink (no lambda architecture needed anymore), schema evolution, optimistic concurrency. The full list and more information on delta.io. Also, check out and excellent customer example with Apple about threat detection at scale.", "As in data lakes, we commonly have distributed files, it\u2019s hard to get them structured and arranged. Especially if you want to insert, update or delete rows. Delta has different APIs, besides scala and python, it also gives you SQL API (from Spark 3.0 on or in databricks), where you can easily write an update or even merge statements on your distributed files. As it\u2019s powered by Spark, you can do this entirely at scale.", "Behind the scene is raw Apache Parquet, optimised columnar storage and highly compressed. This allows you to query your data directly out of your data lake efficiently. No initial transformation needed there.", "With slowly changing dimension (SCD) still being a thing in some cases, Delta has time-travel to solve this. It\u2019s similar to snapshotting what we did back in earlier days. But this time though with fairly cheap blob storage compared to SSDs where instead of a daily or monthly snapshots, Delta stores every batch of changes as a separate version. This gives you the power to travel back in time to older versions in case you mistakenly deleted something or if you need analytics to be pointed to specific versions. This is for as long as the retention time is set.", "These changes and snapshots are stored in a transaction log maintained by Delta. Beside time-travel, this is a kind of change data capture (CDC) with all tracked changes per table. You see which files have been affected, what operation, who did and more, and that for each transaction. This is stored in a JSON format separately. And transaction data can get big as well, Delta creates a checkpoint file every ten commits and with the entire state of the table at a point in time \u2014 in Parquet format which is fast and simple for Spark to read.", "\u201cUse less of surrogate keys, instead go back to business keys that everyone understands.\u201d", "In data warehouses, it is a common practice to use surrogate keys to address a row by a single artificial key. When this makes sense to support the dimensional model and to be sure that a row key has a unique ID, in data lakes you don\u2019t do that, to begin with. I\u2019d argue to minimise as much as possible as it makes data reading more complex in terms of understanding and communication. Surrogate keys are random Ids which gives no meaning to anybody (that\u2019s why also mostly used or seen in the background).", "In distributed systems by contract, it\u2019s not as practical anymore to have unique keys over your full data set as data getting bigger. Especially with parallelism, it\u2019s hard to parallelise and still have uniqueness. Better to use hash keys to mitigate that problem. The downside, they are even longer and less readable. So why not going back to the business key (BK, also called natural key) that your source system already generated for you? Business keys are already understood by everyone, to some degree unique (as created as a sequence in the source-system), holding the same value for the life of the data set, can be tracked and compared therefor all the way back.", "Of course, there are great reasons for surrogate keys. They give us big advantages in some ways but to what cost? We need to put a lot of work to ensure the correct granularity of facts and that dimensions get merged and cleaned together with a unique ID as the representer of one row. But again, in data lakes, we have fewer rules, and it\u2019s less rigid. We can, for example, have duplicates in the first place, and only clean and erase them later on.", "This topic also very much goes hand by hand with the question if \u201cKimball still relevant in the modern data warehouse?\u201d and \u201cNormalisation and its normal forms?\u201d. As for the latter, it\u2019s not as important anymore in terms of storage as it getting cheaper with blobs and similar storages, but still valid for analytics purposes. For more details and insights, I encourage you to check out the blog post by Simon Whiteley about this very topic.", "\u201cUse notebooks to open up the data silos.\u201d", "With notebooks (jupyter, zeppelin, databricks) everyone has access to the data, can explore and write analytics with all the advanced statistical and data science libraries. It\u2019s straightforward to set-up, no need to install a local environment or IDE, it works with your browser of choice. You can spread your visualisations by quickly sharing a link. You can also work together in the same notebook. With integrated markdowns, you explain the whole story and thought-process behind the numbers to people naturally.", "The downside of notebooks is that your code will be duplicated and scattered around the place. A little bit like everyone having their own Excels, everyone will start their own notebooks (but of course different data-wise, as the data is stored centrally). I suggest you set strict and clear rules or governance around the notebooks and starting to integrating stable notebooks into your common data pipelines.", "For a fast and smooth transition, you should have a look at papermill which allows you to parameterise, execute and analyse notebooks. Even a step further is to use dagster and either use the notebooks as a step of your pipeline (dagster integrates with papermill) or incorporate it into your pipeline fully with dedicated solids. This way, you avoid code duplication and reusing solids.", "\u201cUse python (and SQL if possible).\u201d", "Python is the tooling language of data engineers these days. Sure there is golang, javascript, scala and other popular languages, but python is still hard to beat when it comes to simplicity and multi-purpose capabilities (data science, web and others). SQL is getting again more traction, which is hugely welcome. Still, SQL will never be able to do what object-oriented programming languages are doing, that\u2019s why I think python is here for many years to stay in building data pipelines.", "Therefor use frameworks or tools that are written in python to code your pipelines. Notebooks are already supporting SQL and python, but they don\u2019t support organisation or orchestration. Better to use tools like the hugely popular and well know Apache Airflow. There are new kids in the blocks (as always), which are promising, one being the above-mentioned dagster. More in my little Quora answer on What are common alternatives to Airflow if you are interested.", "Open-source is available free for everyone, no licences involved and easy to start right away. There is no vendor-lock-in which requires sorrow discussions throughout the team(s) before buying-in a closed-source project or product.", "On the other hand, one open-source tool rarely comes along solo, which can be or get exhausting to fit and evaluate all your favourite tools and applications from the open-source zoo. Also, you need to follow-up on never-ending versions or bug-fixes that might come out and valuable to you. The idea here is you know which tools to use maybe through some suggestions of other companies or some good consultancies. And be open to trying out along the way as you are not locked-in, you can always replace or adapt later on. The learning process can be as valuable as choosing the right tool in the first place.", "You can also opt for a middle approach, something like Databricks for Spark and machine learning capabilities. You are up-and-running in an instant and lock yourself in just halfway. With Spark and notebooks under the hood with both open-sourced technologies, you can switch to your cluster by any time. You lose premium features and speed, which you can also buy and add again later on.", "A practical example I put together in an earlier post where I use the open-source technologies for building a complete data warehouse. That time back in 2018 without Delta Lake and other tools mentioned above as they weren\u2019t released that time. I used Apache Airflow, Apache Druid and Apache Superset.", "Compared to the nightly loads of traditional data warehouses, we need to load incrementally. This makes your data more modular and manageable, especially when you have a star schema. Fact tables can only be appended and dimensions only need to scan the newest transactions instead of the entire fact table.", "With the incremental approach, you switch from batch to event-driven. Your updates and inserts are independent, and you get autonomous batches. If you succeed in switching, you get a near real-time analytics solution which you can scale and parallelise those batches.", "Another approach is enforcing idempotency which is vital for the operability of pipelines and helps mainly in two ways. It guarantees that you can re-run your pipeline and it will produce the same result every time. On the other hand data scientist and analytics, people rely on point-in-time snapshots and perform historical analysis. Meaning your data should not be mutable as time progress. Otherwise, we would get different results as time goes on. That\u2019s why pipelines should be build to reproduce the same output when running with the same (business) logic and time interval. This is called idempotency and used in functional programming, which was the role model for idempotency.", "A nice side effect of event-driven and incremental loading is that you can eliminate the lambda architecture. One single data flow for batch and stream left which is perfectly in-line with Delta Lake. Well suited and a good fit for that purpose is Spark Structured Streaming with the integrated option micro-batching. That way you benefit from both worlds, as you stream and can set the latency to 0, but you can also reduce speed in processing. For example when you have a batch per hour to mitigate the overhead for looking up dimensions or specifically aggregations, which you need to perform otherwise for each stream (which might take time as well).", "\u201cDon\u2019t do structure changes (ALTER) in traditional DDL manner.\u201d", "Everyone working with data knows how painful it is to change (ALTER) a data type or rename a column. There is a whole chain of dependencies and its a lot of work without real value or impact. With the above incremental and idempotency pattern, you get this for free. This means that your changes are instead of renaming or changing business logic for a field, better be adding new fields and change your pipeline and analytics later on without breaking anything.", "With the use of Delta Lake, you also get schema evolution and optimistic concurrency which both helps you with this pain. As the first one automatically updates schema changes without breaking things. And the second will make sure that two or more users can update the same dataset without failing as long as not the same column and the corresponding data will be changed simultaneously.", "Kubernetes has become the de-facto standard for your cloud-native apps to (auto-) scale-out (horizontal instead of vertical) and to deploy your open-source zoo fast, cloud-provider-independent. No lock-in here as well. You could use open-shift or OKD. With the latest version, they added the OperatorHub where you can install as of today 133 items with just a few clicks. Databases and machine learning application that are otherwise complex to install is very much made simple.", "Some more reasons for Kubernetes are the move from infrastructure as code towards infrastructure as data, specifically as YAML. All the resources in Kubernetes that include Pods, Configurations, Deployments, Volumes, etc., can simply be expressed in a YAML file. Developers quickly write applications that run across multiple operating environments. Costs can be reduced by scaling down (even to zero with, e.g. Knative) and also by using plain python or other programming languages instead of paying for a service on Azure, AWS, Google Cloud. Its management makes it easy through its modularity and abstraction, also with the use of Containers (Docker or Rocket), and you can monitor all your applications in one place.", "\u201cUse declarative pipelining instead of imperative.\u201d", "As with Kubernetes YAML-files, you start working descriptive, meaning you define what should do rather than how. For the same, we should aim in data pipelines to eliminate as much from the how (the glues) in our DAGs and only declare the what. The tool, frameworks and platforms should take care of the how.", "Sean Knapp, the founder of the unified data-pipeline solution Ascend quotes: \u201cDeclarative programming is a paradigm that expresses the logic of a computation without describing its control flow\u2026 [in an] attempt to minimize or eliminate side effects by describing what the program must accomplish.\u201d Check out more details in his impressive presentation on Intelligent Orchestration: Data\u2019s missing link.", "This might be obvious, yet it\u2019s hard to implement. That\u2019s why Ascend offers a superior all-in-one platform where you can do this. It sorts out all how\u2019s for you and you focus on the what.", "If it so happens that you aren\u2019t having a platform like this, you might need an architecture that supports towards it. It\u2019s not something that comes naturally I would say, you need to build around this paradigm. But the rewards might be worth with faster cycles and more problem-solving approaches.", "A quick overview from where we are coming from in types of orchestration and pipeline tools:", "There is a ton of tools and framework out there if your interested check out the Awesome Pipeline List. If your interested in some alternatives to Apache Airflow that is the most popular at the moment, in my opinion, check out common alternatives to Airflow.", "\u201cUse data catalogs to have a central metadata store.\u201d", "Data catalogs are a centralised store where all your metadata data about your data lies. Nowadays synonym with metadata store, data discovery or similar. This is vital as with data lakes and other data stores you want to keep an overview and the ability to search for your data.", "A perfect example is provided by Lyft. They implemented an application on top of a data catalog called Amundsen. Amundsen does not only shows what data sets are available but also which years who created it. Furthermore, metadata of how many rows, min/max entries, etc. about a table is shown if the connected database is supported. It incorporates even a rating system where users can give feedback about a data set to give you a feeling for the data quality and how valid it is to use that very data set.", "On top, Amundsen connects data sets with dashboards and notebooks to show in which of these has been a particular data set been used. This avoids duplicated work, and you find your answers to your data questions in no time.", "\u201cUse closed-source if you don\u2019t have the developers or the time.\u201d", "As not everything mentioned above is built in one day and might not be all that mild without the necessary teams or financials, I also include the closed source platform as a service (PaaS) solutions that will cost you but gives all the advantages out-of-the-box and immediately. Two solutions I used myself are the mentioned Ascend or Palantir Foundry. There are for sure more, if you know any genuine ones, let me know.", "For more specific solutions, I see the following:", "See also a more complete list with some more alternatives for cube-replacements in my earlier post (although not fully up-to-date anymore as of Nov 2018).", "We have seen that the goal of business intelligence is to produce an overview of business and organisation-wide, and the most challenging problems to create data warehouses that are transparent, handles unstructured data formats or real-time data availability. And then how we solve them with twelve emerging data engineering technologies and approaches.", "I hope these approaches are helpful and will solve some of your challenges with your BI system. Or otherwise, help you with data architecture or reduce some complexity on the way. To do all of it it\u2019s quite a job. However, if you start and picking the most relevant for you, I guess you are on the right path forward. And possibly the most advantage, your architecture will be future-proof and prepared for big data and cloud-native solutions.", "If you don\u2019t have the time nor resources, you could pick a closed-source platform as a service that just works as we saw in the last approach, that\u2019s also fine. That will cost you more in the long run, but you are up-and-running instantly.", "To see the tools in action, check out my hands-on post Building a Data Engineering Project in 20 Minutes. That\u2019s it for now. Let me know your thoughts on this, what are your go-to tools and frameworks to solve some of the challenges? I\u2019d appreciate your comments.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Engineer & Technical Author with 15+ years of experience. I enjoy maintaining awareness of new innovative and emerging open-source technologies."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F8810c3eed8b1&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbusiness-intelligence-meets-data-engineering-with-emerging-technologies-8810c3eed8b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbusiness-intelligence-meets-data-engineering-with-emerging-technologies-8810c3eed8b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbusiness-intelligence-meets-data-engineering-with-emerging-technologies-8810c3eed8b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbusiness-intelligence-meets-data-engineering-with-emerging-technologies-8810c3eed8b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----8810c3eed8b1--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8810c3eed8b1--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://sspaeti.medium.com/?source=post_page-----8810c3eed8b1--------------------------------", "anchor_text": ""}, {"url": "https://sspaeti.medium.com/?source=post_page-----8810c3eed8b1--------------------------------", "anchor_text": "Simon Sp\u00e4ti"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F16d62f443877&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbusiness-intelligence-meets-data-engineering-with-emerging-technologies-8810c3eed8b1&user=Simon+Sp%C3%A4ti&userId=16d62f443877&source=post_page-16d62f443877----8810c3eed8b1---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8810c3eed8b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbusiness-intelligence-meets-data-engineering-with-emerging-technologies-8810c3eed8b1&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8810c3eed8b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbusiness-intelligence-meets-data-engineering-with-emerging-technologies-8810c3eed8b1&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.sspaeti.com/blog/data-engineering-the-future-of-data-warehousing/", "anchor_text": "earlier post"}, {"url": "https://en.wikipedia.org/wiki/Performance_indicator", "anchor_text": "KPIs"}, {"url": "https://www.sisense.com/glossary/self-service-bi/", "anchor_text": "self-service BI"}, {"url": "https://www.sspaeti.com/blog/why-automate-what-does-dwa-for-us/", "anchor_text": "data warehouse automation"}, {"url": "https://qr.ae/pNrL5t", "anchor_text": "Quora-post"}, {"url": "https://www.sspaeti.com/blog/data-warehouse-automation-dwa/", "anchor_text": "series"}, {"url": "https://en.wikipedia.org/wiki/Semi-structured_data", "anchor_text": "semi"}, {"url": "https://en.wikipedia.org/wiki/Unstructured_data", "anchor_text": "unstructured"}, {"url": "https://www.sspaeti.com/blog/data-warehouse-vs-data-lake-etl-vs-elt/", "anchor_text": "my earlier post"}, {"url": "https://www.snowflake.com/", "anchor_text": "SnowflakeDB"}, {"url": "https://docs.snowflake.com/en/sql-reference/data-types-semistructured.html#variant", "anchor_text": "Variant"}, {"url": "http://danlinstedt.com/solutions-2/data-vault-basics/", "anchor_text": "data vault"}, {"url": "https://databricks.com/blog/2020/01/30/what-is-a-data-lakehouse.html", "anchor_text": "lakehouse"}, {"url": "https://databricks.com/glossary/what-is-spark-sql", "anchor_text": "Spark SQL"}, {"url": "https://prestodb.io/", "anchor_text": "Presto"}, {"url": "https://en.wikipedia.org/wiki/Data_mart", "anchor_text": "data marts"}, {"url": "https://databricks.com/blog/2020/01/30/what-is-a-data-lakehouse.html", "anchor_text": "\u201cWhat is a Lakehouse?\u201d"}, {"url": "https://databricks.com/", "anchor_text": "Databricks"}, {"url": "https://www.linkedin.com/posts/sspaeti-com_four-different-data-architectures-activity-6660097384279744512--5e1", "anchor_text": "LinkedIn post"}, {"url": "https://www.sspaeti.com/blog/data-warehouse-vs-data-lake-etl-vs-elt/", "anchor_text": "earlier blog post"}, {"url": "https://delta.io/", "anchor_text": "Delta Lake"}, {"url": "https://databricks.com/blog/2019/02/04/introducing-delta-time-travel-for-large-scale-data-lakes.html", "anchor_text": "time-travel"}, {"url": "https://databricks.com/blog/2019/08/21/diving-into-delta-lake-unpacking-the-transaction-log.html", "anchor_text": "transaction log"}, {"url": "https://parquet.apache.org/", "anchor_text": "Apache Parquet"}, {"url": "https://en.wikipedia.org/wiki/Lambda_architecture", "anchor_text": "lambda architecture"}, {"url": "https://databricks.com/blog/2019/09/24/diving-into-delta-lake-schema-enforcement-evolution.html", "anchor_text": "schema evolution"}, {"url": "https://docs.databricks.com/delta/concurrency-control.html", "anchor_text": "optimistic concurrency"}, {"url": "https://delta.io/", "anchor_text": "delta.io"}, {"url": "https://databricks.com/session/keynote-from-apple", "anchor_text": "threat detection at scale"}, {"url": "https://delta.io/", "anchor_text": "delta.io"}, {"url": "https://databricks.com/", "anchor_text": "databricks"}, {"url": "https://parquet.apache.org/", "anchor_text": "Apache Parquet"}, {"url": "https://en.wikipedia.org/wiki/Surrogate_key", "anchor_text": "surrogate keys"}, {"url": "https://data-warehouses.net/glossary/dimensionalmodel.html", "anchor_text": "dimensional model"}, {"url": "https://danlinstedt.com/allposts/datavaultcat/dv2-keys-pros-cons/", "anchor_text": "hash keys"}, {"url": "https://en.wikipedia.org/wiki/Natural_key", "anchor_text": "business key"}, {"url": "https://danlinstedt.com/allposts/datavaultcat/dv2-keys-pros-cons/", "anchor_text": "great reasons"}, {"url": "https://en.wikipedia.org/wiki/Database_normalization", "anchor_text": "Normalisation"}, {"url": "https://www.advancinganalytics.co.uk/blog/2019/6/17/is-kimball-still-relevant-in-the-modern-data-warehouse", "anchor_text": "blog post"}, {"url": "https://jupyter.org/", "anchor_text": "jupyter"}, {"url": "https://zeppelin.apache.org/", "anchor_text": "zeppelin"}, {"url": "https://docs.databricks.com/notebooks/index.html", "anchor_text": "databricks"}, {"url": "https://en.wikipedia.org/wiki/Integrated_development_environment", "anchor_text": "IDE"}, {"url": "https://github.com/nteract/papermill", "anchor_text": "papermill"}, {"url": "https://dagster.io/", "anchor_text": "dagster"}, {"url": "https://dagster.readthedocs.io/en/latest/sections/learn/guides/solid/solid.html", "anchor_text": "solids"}, {"url": "https://www.sspaeti.com/blog/data-engineering-the-future-of-data-warehousing/#The_tool_language_Python", "anchor_text": "tooling language"}, {"url": "https://golang.org/", "anchor_text": "golang"}, {"url": "https://en.wikipedia.org/wiki/JavaScript", "anchor_text": "javascript"}, {"url": "https://www.scala-lang.org/", "anchor_text": "scala"}, {"url": "https://en.wikipedia.org/wiki/Object-oriented_language", "anchor_text": "object-oriented programming"}, {"url": "https://qr.ae/TWhzLf", "anchor_text": "hugely popular"}, {"url": "https://airflow.apache.org/", "anchor_text": "Apache Airflow"}, {"url": "https://qr.ae/pNrIPi", "anchor_text": "What are common alternatives to Airflow"}, {"url": "https://mattturck.com/bigdata2018/", "anchor_text": "Matt Turck"}, {"url": "https://mattturck.com/bigdata2018/", "anchor_text": "Great Power, Great Responsibility"}, {"url": "https://databricks.com/", "anchor_text": "Databricks"}, {"url": "https://www.sspaeti.com/blog/open-source-data-warehousing-druid-airflow-superset/", "anchor_text": "earlier post"}, {"url": "https://airflow.apache.org/", "anchor_text": "Apache Airflow"}, {"url": "https://druid.apache.org/", "anchor_text": "Apache Druid"}, {"url": "https://superset.incubator.apache.org/", "anchor_text": "Apache Superset"}, {"url": "https://en.wikipedia.org/wiki/Star_schema", "anchor_text": "star schema"}, {"url": "https://en.wikipedia.org/wiki/Idempotence", "anchor_text": "idempotency"}, {"url": "https://medium.com/@maximebeauchemin/functional-data-engineering-a-modern-paradigm-for-batch-data-processing-2327ec32c42a", "anchor_text": "functional programming"}, {"url": "https://en.wikipedia.org/wiki/Lambda_architecture", "anchor_text": "lambda architecture"}, {"url": "https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html", "anchor_text": "Spark Structured Streaming"}, {"url": "https://databricks.com/blog/2018/03/20/low-latency-continuous-processing-mode-in-structured-streaming-in-apache-spark-2-3-0.html", "anchor_text": "micro-batching"}, {"url": "https://databricks.com/blog/2019/09/24/diving-into-delta-lake-schema-enforcement-evolution.html", "anchor_text": "schema evolution"}, {"url": "https://docs.databricks.com/delta/concurrency-control.html", "anchor_text": "optimistic concurrency"}, {"url": "https://stackoverflow.blog/2020/05/29/why-kubernetes-getting-so-popular/", "anchor_text": "Kubernetes"}, {"url": "https://stackoverflow.com/a/11715598/5246670", "anchor_text": "scale-out"}, {"url": "https://www.openshift.com/", "anchor_text": "open-shift"}, {"url": "https://www.okd.io/", "anchor_text": "OKD"}, {"url": "https://operatorhub.io/", "anchor_text": "OperatorHub"}, {"url": "https://en.wikipedia.org/wiki/YAML", "anchor_text": "YAML"}, {"url": "https://medium.com/knative/knative-v0-3-autoscaling-a-love-story-d6954279a67a", "anchor_text": "Knative"}, {"url": "https://en.wikipedia.org/wiki/Docker_(software)", "anchor_text": "Docker"}, {"url": "https://coreos.com/rkt/", "anchor_text": "Rocket"}, {"url": "https://www.linkedin.com/in/seanknapp", "anchor_text": "Sean Knapp"}, {"url": "https://www.ascend.io/", "anchor_text": "Ascend"}, {"url": "https://www.datacouncil.ai/hubfs/Data%20Council/slides/nyc19/Sean-Knapp-Ascend%20-%20Intelligent%20Orchestration%20-%20Data%20Council%20NY%202019.pdf", "anchor_text": "Intelligent Orchestration: Data\u2019s missing link"}, {"url": "https://www.linkedin.com/in/seanknapp", "anchor_text": "Sean Knapp"}, {"url": "https://www.ascend.io/", "anchor_text": "Ascend.io"}, {"url": "https://www.datacouncil.ai/hubfs/Data%20Council/slides/nyc19/Sean-Knapp-Ascend%20-%20Intelligent%20Orchestration%20-%20Data%20Council%20NY%202019.pdf", "anchor_text": "Intelligent Orchestration"}, {"url": "https://www.ascend.io/", "anchor_text": "Ascend"}, {"url": "https://en.wikipedia.org/wiki/Cron", "anchor_text": "cron"}, {"url": "https://en.wikipedia.org/wiki/Oracle_Warehouse_Builder", "anchor_text": "Oracle OWB"}, {"url": "https://docs.microsoft.com/en-us/sql/integration-services/sql-server-integration-services?view=sql-server-ver15", "anchor_text": "SQL Server Integration Services"}, {"url": "https://www.informatica.com/", "anchor_text": "Informatica"}, {"url": "https://airflow.apache.org/", "anchor_text": "Airflow"}, {"url": "https://github.com/spotify/luigi", "anchor_text": "Luigi"}, {"url": "https://oozie.apache.org/", "anchor_text": "Oozie"}, {"url": "https://www.prefect.io/", "anchor_text": "Prefect"}, {"url": "https://github.com/quantumblacklabs/kedro", "anchor_text": "Kedro"}, {"url": "https://github.com/dagster-io/dagster/", "anchor_text": "Dagster"}, {"url": "https://www.getdbt.com/", "anchor_text": "dbt"}, {"url": "https://www.ascend.io/", "anchor_text": "Ascend"}, {"url": "https://www.palantir.com/palantir-foundry/", "anchor_text": "Palantir Foundry"}, {"url": "https://github.com/pditommaso/awesome-pipeline#pipeline-frameworks--libraries", "anchor_text": "Awesome Pipeline List"}, {"url": "https://qr.ae/pNrIPi", "anchor_text": "common alternatives to Airflow"}, {"url": "http://cidrdb.org/cidr2017/papers/p111-hellerstein-cidr17.pdf", "anchor_text": "Data catalogs"}, {"url": "https://www.lyft.com/", "anchor_text": "Lyft"}, {"url": "https://github.com/lyft/amundsen", "anchor_text": "Amundsen"}, {"url": "https://eng.lyft.com/amundsen-lyfts-data-discovery-metadata-engine-62d27254fbb9", "anchor_text": "rating"}, {"url": "https://eng.lyft.com/amundsen-lyfts-data-discovery-metadata-engine-62d27254fbb9", "anchor_text": "Lyft\u2019s data discovery & metadata engine"}, {"url": "https://eng.lyft.com/@mark_grover", "anchor_text": "Mark Grover"}, {"url": "https://en.wikipedia.org/wiki/Platform_as_a_service", "anchor_text": "platform as a service (PaaS)"}, {"url": "https://www.ascend.io/", "anchor_text": "Ascend"}, {"url": "https://www.palantir.com/palantir-foundry/", "anchor_text": "Palantir Foundry"}, {"url": "https://en.wikipedia.org/wiki/Online_analytical_processing", "anchor_text": "OLAP"}, {"url": "https://druid.apache.org/", "anchor_text": "Druid"}, {"url": "https://imply.io/", "anchor_text": "Imply.io"}, {"url": "https://www.snowflake.com/product/", "anchor_text": "Snowflake DB"}, {"url": "https://www.dremio.com/", "anchor_text": "Dremio"}, {"url": "https://arrow.apache.org/", "anchor_text": "Apache Arrow"}, {"url": "https://looker.com/", "anchor_text": "Looker"}, {"url": "https://www.sisense.com/", "anchor_text": "Sisense"}, {"url": "https://www.sspaeti.com/blog/olap-whats-coming-next/#List_of_Cube-Replacements", "anchor_text": "earlier post"}, {"url": "https://www.sspaeti.com/blog/data-engineering-project-in-twenty-minutes/", "anchor_text": "Building a Data Engineering Project in 20 Minutes"}, {"url": "https://www.sspaeti.com/blog/business-intelligence-meets-data-engineering/", "anchor_text": "sspaeti.com"}, {"url": "https://medium.com/tag/data-engineering?source=post_page-----8810c3eed8b1---------------data_engineering-----------------", "anchor_text": "Data Engineering"}, {"url": "https://medium.com/tag/business-intelligence?source=post_page-----8810c3eed8b1---------------business_intelligence-----------------", "anchor_text": "Business Intelligence"}, {"url": "https://medium.com/tag/data-lake?source=post_page-----8810c3eed8b1---------------data_lake-----------------", "anchor_text": "Data Lake"}, {"url": "https://medium.com/tag/python?source=post_page-----8810c3eed8b1---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/data-pipeline?source=post_page-----8810c3eed8b1---------------data_pipeline-----------------", "anchor_text": "Data Pipeline"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8810c3eed8b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbusiness-intelligence-meets-data-engineering-with-emerging-technologies-8810c3eed8b1&user=Simon+Sp%C3%A4ti&userId=16d62f443877&source=-----8810c3eed8b1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8810c3eed8b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbusiness-intelligence-meets-data-engineering-with-emerging-technologies-8810c3eed8b1&user=Simon+Sp%C3%A4ti&userId=16d62f443877&source=-----8810c3eed8b1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8810c3eed8b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbusiness-intelligence-meets-data-engineering-with-emerging-technologies-8810c3eed8b1&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8810c3eed8b1--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F8810c3eed8b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbusiness-intelligence-meets-data-engineering-with-emerging-technologies-8810c3eed8b1&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----8810c3eed8b1---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----8810c3eed8b1--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----8810c3eed8b1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----8810c3eed8b1--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----8810c3eed8b1--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----8810c3eed8b1--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----8810c3eed8b1--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----8810c3eed8b1--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----8810c3eed8b1--------------------------------", "anchor_text": ""}, {"url": "https://sspaeti.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://sspaeti.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Simon Sp\u00e4ti"}, {"url": "https://sspaeti.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "610 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F16d62f443877&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbusiness-intelligence-meets-data-engineering-with-emerging-technologies-8810c3eed8b1&user=Simon+Sp%C3%A4ti&userId=16d62f443877&source=post_page-16d62f443877--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F9ea091dacb7e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbusiness-intelligence-meets-data-engineering-with-emerging-technologies-8810c3eed8b1&newsletterV3=16d62f443877&newsletterV3Id=9ea091dacb7e&user=Simon+Sp%C3%A4ti&userId=16d62f443877&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}