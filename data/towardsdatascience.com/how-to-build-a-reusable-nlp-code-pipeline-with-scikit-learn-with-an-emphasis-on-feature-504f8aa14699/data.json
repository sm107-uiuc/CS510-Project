{"url": "https://towardsdatascience.com/how-to-build-a-reusable-nlp-code-pipeline-with-scikit-learn-with-an-emphasis-on-feature-504f8aa14699", "time": 1683001517.933515, "path": "towardsdatascience.com/how-to-build-a-reusable-nlp-code-pipeline-with-scikit-learn-with-an-emphasis-on-feature-504f8aa14699/", "webpage": {"metadata": {"title": "How to Build a Reusable Custom NLP Pipeline with Scikit-Learn | by Jenny Lee | Towards Data Science", "h1": "How to Build a Reusable Custom NLP Pipeline with Scikit-Learn", "description": "One of the most essential characteristics of a machine learning code pipeline is reusability. A reusable, sharable and extensible pipeline will ensure process and code integrity by enforcing\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/feature-selection-techniques-in-machine-learning-with-python-f24e7da3f36e", "anchor_text": "feature selection techniques", "paragraph_index": 6}, {"url": "https://www.python-course.eu/python3_abstract_classes.php", "anchor_text": "here", "paragraph_index": 13}], "all_paragraphs": ["One of the most essential characteristics of a machine learning code pipeline is reusability. A reusable, sharable and extensible pipeline will ensure process and code integrity by enforcing consistent use of intuitive structural elements to program flows and can therefore enhance the data scientist\u2019s development process, which is iterative by nature. In this article, I will demonstrate how to build a custom machine learning code pipeline from scratch using scikit-learn with an emphasis on the following two components:", "Both components exploit class inheritance in an analogous manner; that is, they are characterized by an underlying class structure from which more specific classes can be derived to address different kinds of supervised learning problems or project requirements. As a bonus of this article, in section 2, I will touch on a powerful concept related to inheritance, namely, abstract methods, and illustrate how it makes the proposed pipeline design so intuitive and easy to work with.", "A typical NLP task requires a great deal of feature engineering, a process that involves preparing the proper input data for training a model. This step may require transforming input text data into bag-of-words representations or multi-dimensional vectors, or it may involve writing more original user-defined functions to extract values for features like sentence length standard deviation, number of words before the main verb (a rough measure of syntactic complexity), readability score, etc. In any given project, any number of such features can be chosen to train a model or first determine feature importances, reduce the dimensionality, or conduct an ablation study.", "To allow for ease, control and flexibility in selecting or testing features, you can imagine having a kind of \u201cfeature storehouse\u201d from which you can draw any features you (or your teammate) have ever written, just when you need them. That storehouse can be represented as a class called BaseFeaturizer below, and each of its methods contains the logic for computing the value of a feature.", "Once we have defined these basic methods in BaseFeaturizer, we can derive new classes to modify any of those methods or add new ones. But perhaps the most important property of these derived classes is that they can vary according to the number and types of features they select/introduce. And that information should be defined in a consistent way across all derived classes, i.e., in the main method of each derived class, which I will name featurize.", "For example, let\u2019s say we want to train a text classification model that predicts the syntactic complexity of documents, classifying them into two discrete classes: \u201csimple\u201d and \u201ccomplex\u201d. Two potentially useful syntactic features for this task are:", "(I have somewhat arbitrarily chosen these features for this illustration, but there are various feature selection techniques one may utilize to first determine which features are the most useful and include only those in the final training.)", "Below, SyntacticComplexityFeaturizer is defined as a subclass of BaseFeaturier, and the values of the two features are computed inside featurize by calling the functions defined earlier in BaseFeaturizer. These values are stored in feature_dict for each document, and featurize returns the feature-value mappings for the entire corpus of documents.", "Here\u2019s an example of feature_dicts , the output of calling featurize on an instance of SyntacticComplexityFeaturizer.", "The output of this featurization pipeline naturally serves as input to the next component, the training pipeline. The two pipelines are isomorphic in form, as the latter, too, contains a base design (class) from which more specific training pipelines can be derived to meet different training requirements. I have named this class BaseTrainingPipeline. An important property of this class is that it inherits from ABC (short for \u201cAbstract Base Class\u201d) for reasons that will become clear soon.", "BaseTrainingPipeline can be initialized with any attributes that you may want to access later, for example, self.y_test and self.y_preds (these values are good to store for evaluation purposes), as well as self.models (all models trained on the same data). I have defined the following attributes in the __init__ function:", "Next, the class\u2019s main method, pipeline_main, contains the minimal code required to transform input text first into numeric features and then into vectors\u2014 steps that are repeated in most supervised NLP tasks. Note that the two pipelines (featurization and training) are connected through this method as the method takes FeaturizerClass as an argument, for example, SyntacticComplexityClass.", "To elaborate on an earlier point, train_model is defined as an abstract method of BaseTrainingPipeline (which makes it an abstract class). Abstract methods can be decorated with the decorator @abstractmethod, the relevant portion reproduced below:", "You can read more about abstract methods here, but in a nutshell:", "Abstract classes are classes that contain one or more abstract methods. An abstract method is a method that is declared, but contains no implementation. Abstract classes may not be instantiated, and require subclasses to provide implementations for the abstract methods. Subclasses of an abstract class in Python are not required to implement abstract methods of the parent class.", "Defining train_model as an abstract method is necessary because it provides a common functionality for all implementations of that method which are supplied by subclasses of BaseTrainingPipeline. That is, because we define train_model as a method of the base class, we can call it from another method defined in the same class (in our case, from pipeline_main ), yet because its implementation can only be provided by a subclass, we are able to define train_model in a number of different ways. One dimension along which these implementations can vary is estimator type.", "To make all this more concrete, consider two example training pipelines I have derived from BaseTrainingPipeline: ClassificationTrainingPipeline and RegressionTrainingPipeline. This separation makes intuitive sense as one deals with classifiers whose target variable is categorical/discrete while the other deals with regressors whose target variable is numerical/continuous. This allows us to support different types of supervised learning problems using the same general (training) pipeline without rewriting any part of the core elements and repeatable steps defined in pipeline_main above. Note how the implementation of train_model differs between the two cases: In ClassificationTrainingPipeline , train_model specifies new parameter settings for a model that meets a certain condition, i.e., if algorithm == \"logistic_regression\" (lines 12\u201319 below), overriding the original settings of the initialized model. RegressionTrainingPipeline does not contain such overriding settings, though it certainly may for any of its initialized models.", "Putting it all together, we can now instantiate one of these training pipelines, which takes a certain featurization class as an argument:", "Once we run this code, the values of the __init__ attributes will be updated so we can access the saved arrays like y_test and y_preds as well as the models themselves later (which you may want to pickle). At this point, you may consider extending the training pipeline to support additional steps like model evaluation, metric reporting and visualization. For example, you may add a method like the following to RegressorTrainingPipeline to predict on a heldout dataset and save a metrics report with every iteration of training:", "In this article, I have presented a step-by-step process for building a reusable, extensible ML code pipeline that can be easily adapted for diverse NLP problems. The two core components of the design \u2014 the featurization pipeline and the training pipeline \u2014 mirror each other in their basic organization, and through class inheritance and in some cases, abstract methods, they are (1) able to accommodate flexible feature definition and selection and (2) provide generalized support for training different kinds of supervised models (e.g., classification vs. regression).", "Update Dec 2019: For an alternative way to implement your ML pipeline using scikit-learn\u2019s Pipeline, check out the following post:", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F504f8aa14699&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-reusable-nlp-code-pipeline-with-scikit-learn-with-an-emphasis-on-feature-504f8aa14699&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-reusable-nlp-code-pipeline-with-scikit-learn-with-an-emphasis-on-feature-504f8aa14699&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-reusable-nlp-code-pipeline-with-scikit-learn-with-an-emphasis-on-feature-504f8aa14699&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-reusable-nlp-code-pipeline-with-scikit-learn-with-an-emphasis-on-feature-504f8aa14699&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----504f8aa14699--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----504f8aa14699--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@dzenilee?source=post_page-----504f8aa14699--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@dzenilee?source=post_page-----504f8aa14699--------------------------------", "anchor_text": "Jenny Lee"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8231fa2cbef7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-reusable-nlp-code-pipeline-with-scikit-learn-with-an-emphasis-on-feature-504f8aa14699&user=Jenny+Lee&userId=8231fa2cbef7&source=post_page-8231fa2cbef7----504f8aa14699---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F504f8aa14699&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-reusable-nlp-code-pipeline-with-scikit-learn-with-an-emphasis-on-feature-504f8aa14699&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F504f8aa14699&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-reusable-nlp-code-pipeline-with-scikit-learn-with-an-emphasis-on-feature-504f8aa14699&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests", "anchor_text": "here"}, {"url": "https://towardsdatascience.com/feature-selection-techniques-in-machine-learning-with-python-f24e7da3f36e", "anchor_text": "feature selection techniques"}, {"url": "https://www.python-course.eu/python3_abstract_classes.php", "anchor_text": "here"}, {"url": "https://towardsdatascience.com/the-triune-pipeline-for-three-major-transformers-in-nlp-18c14e20530", "anchor_text": "Text Feature Extraction With Scikit-Learn PipelineUsing 2010 primary debate transcriptstowardsdatascience.com"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----504f8aa14699---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/feature-engineering?source=post_page-----504f8aa14699---------------feature_engineering-----------------", "anchor_text": "Feature Engineering"}, {"url": "https://medium.com/tag/nlp?source=post_page-----504f8aa14699---------------nlp-----------------", "anchor_text": "NLP"}, {"url": "https://medium.com/tag/data-science?source=post_page-----504f8aa14699---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----504f8aa14699---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F504f8aa14699&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-reusable-nlp-code-pipeline-with-scikit-learn-with-an-emphasis-on-feature-504f8aa14699&user=Jenny+Lee&userId=8231fa2cbef7&source=-----504f8aa14699---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F504f8aa14699&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-reusable-nlp-code-pipeline-with-scikit-learn-with-an-emphasis-on-feature-504f8aa14699&user=Jenny+Lee&userId=8231fa2cbef7&source=-----504f8aa14699---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F504f8aa14699&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-reusable-nlp-code-pipeline-with-scikit-learn-with-an-emphasis-on-feature-504f8aa14699&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----504f8aa14699--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F504f8aa14699&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-reusable-nlp-code-pipeline-with-scikit-learn-with-an-emphasis-on-feature-504f8aa14699&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----504f8aa14699---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----504f8aa14699--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----504f8aa14699--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----504f8aa14699--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----504f8aa14699--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----504f8aa14699--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----504f8aa14699--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----504f8aa14699--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----504f8aa14699--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@dzenilee?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@dzenilee?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Jenny Lee"}, {"url": "https://medium.com/@dzenilee/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "445 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8231fa2cbef7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-reusable-nlp-code-pipeline-with-scikit-learn-with-an-emphasis-on-feature-504f8aa14699&user=Jenny+Lee&userId=8231fa2cbef7&source=post_page-8231fa2cbef7--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F630d12d64891&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-reusable-nlp-code-pipeline-with-scikit-learn-with-an-emphasis-on-feature-504f8aa14699&newsletterV3=8231fa2cbef7&newsletterV3Id=630d12d64891&user=Jenny+Lee&userId=8231fa2cbef7&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}