{"url": "https://towardsdatascience.com/text-classification-with-cnns-in-pytorch-1113df31e79f", "time": 1683014047.9337769, "path": "towardsdatascience.com/text-classification-with-cnns-in-pytorch-1113df31e79f/", "webpage": {"metadata": {"title": "Text Classification with CNNs in PyTorch | by Fernando L\u00f3pez | Towards Data Science", "h1": "Text Classification with CNNs in PyTorch", "description": "The objective of this blog is to develop a step by step text classifier by implementing convolutional neural networks. So, this blog is divided into the following sections: The text classification\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/text-classification-with-pytorch-7111dae111a6", "anchor_text": "Text Classification with LSTMs in PyTorch", "paragraph_index": 4}, {"url": "https://www.kaggle.com/c/nlp-getting-started", "anchor_text": "Real or Not? NLP with Disaster Tweets", "paragraph_index": 7}], "all_paragraphs": ["\u201cDeep Learning is more than adding layers\u201d", "The objective of this blog is to develop a step by step text classifier by implementing convolutional neural networks. So, this blog is divided into the following sections:", "The text classification problem can be addressed from different approaches, for example, considering the frequency of occurrence of words in a given text with respect to the occurrence of these words in the complete corpus.", "On the other hand, there exists other approaches where the text is modeled as a sequence of words or characters, this type of approach makes use mainly of models based on Recurrent Neural Network architectures.", "If you want to know more about text classification with LSTM recurrent neural networks, take a look at this blog: Text Classification with LSTMs in PyTorch", "However, there is another approach where the text is modeled as a distribution of words in a given space. This is achieved through the use of Convolutional Neural Networks (CNNs).", "So, we are going to start from the last mentioned approach, we are going to build a model to classify text considering the distribution in space of a set of words that make up the text using an architecture based on CNNs.", "The data used in this model was obtained from the Kaggle contest: Real or Not? NLP with Disaster Tweets", "The first lines of the dataset look like Figure 1:", "As we can see, it is necessary to create a preprocessing pipeline to load the text, clean it, tokenize it, padding it and split into train and test sets.", "Load text. Since the text we are going to work with is already in our repository, we only need to call it locally and remove some columns that will not be useful.", "Clean text. In this case, we will need to remove special symbols and numbers from the text. We are only going to work with lowercase words.", "Word tokenization. For tokenization, we are going to make use of the word_tokenize function from the nltk library (a very simple way to tokenize a sentence). After this, we will need to generate a dictionary with the \u201cx\u201d most frequent words in the dataset (this is in order to reduce the complexity of the problem). Therefore, as you can see in line 3 of code 3, tokenization is applied. In line 14 the most common \u201cx\u201d words are selected and in line 16 the dictionary of words is built (as you can see, the dictionary begins with the index 1, this is because we are reserving the index 0 to apply the padding).", "Until now each tweet is already tokenized, however we need to transform each word token into a numeric format, therefore we will use the dictionary generated in Code 3 to transform each word into its representation based on indexes.", "Padding. As you can imagine, not all tweets are the same length, however it is important that each one has the same number of words. That is why we introduced padding. Padding is implemented in order to standardize the length of each tweet. In this case, the value that we will use for padding will be the number zero (the index that we reserve when we build the vocabulary dictionary).", "Split intro train and test. The last step in this preprocessing pipeline is to divide the data into training and testing. For this we will use the function provided by scikit learn.", "The complete preprocessing class looks like:", "Great, so far we have done all the preprocessing and we already have our training and testing sets, it\u2019s time to see the model!", "The implemented model will use n-grams of words, that is, different kernel sizes will be applied to the same sentence (referring to a composition based on n-grams). Then, each of the outputs of these kernels will be reduced using the max pooling function. Finally, each of these outputs will be concatenated in a single tensor to be introduced to a linear layer which will be filtered by an activation function to obtain the final result.", "As we can see, the convolutional layers are not stacked. Each convolutional layer is defined by a specific kernel size, this size is what defines the \u201cn-gram\u201d in question. Also, each output of each convolution is reduced using max pooling. Finally each tensor is concatenated to form a single tensor that will be introduced to the linear layer.", "Now let\u2019s see how we do all this in code using the PyTorch framework. First we need to create the constructor of our neural network, for this we are going to define some important parameters as well as the convolutional, max pooling and linear layers.", "From lines 16 to 19, we are defining the different kernels for each convolution (remember that the kernel size acts as the size of the n-gram in this case).", "Line 22 refers to the definition of the number of output channels of the convolution for each layer. Line 24 refers to the number of jumps that will be considered when sliding the window (the kernel).", "In line 27 the embedding layer is defined. As we can see the number of input words (the size of the vocabulary), contains a \u201c+1\u201d this because we are considering the index that refers to the padding, in this case it is the index 0.", "From lines 30 to 33 we define each convolutional layer. Likewise, from lines 36 to 39 we define each max pooling layer.", "Finally on line 42 we define the linear layer. It is very important to note that the number of input elements for this layer is defined by a function. This is because by applying convolution and max pooling (under different kernel sizes), the size of the output tensors is modified. Likewise such output tensors will be concatenated and reduced to a 1-dimensional tensor, (flattening). That is why we implement a function to calculate such input size for the linear layer.", "The size of the output tensor for each convolution and max pooling layers is defined by the following function:", "So the function to calculate the input size for the linear layer is determined by:", "Ok, so far we have already defined the constructor. It\u2019s time to move on to the forward function, let\u2019s go for it!", "The forward function will take the vector of tokenized words and pass them through the embedding layer. Subsequently, each embedded sentence will be passed through each of the convolutional and max pooling layers, finally, the resulting vectors will be concatenated and reduced to be introduced to the linear layer.", "In line 4 the input vector is passed through the embedding layer. In lines 7, 12, 17 and 22 the convolution operation (with different kernel sizes) is applied to the embedded sequence. On line 27 each output vector is concatenated and on line 28 this vector is reduced to one dimension (flattening). Subsequently, the flattened vector is passed through a linear layer whose activation function is sigmoid.", "So the complete architecture will look like:", "Great, we already saw how to define the architecture of the neural network as well as the forward function, it is time to see the training function, let\u2019s go for it!", "As we saw in the preprocessing phase, the training and test data are ready to be implemented. However, we need to transform them to a torch-based data type as well as create the batch generator. For this we will make use of the Dataset and DataLoader modules that the PyTorch framework provides, this is how the implementation will look like:", "To make use of the class, we only need to instantiate and then initialize the data loader.", "For the training phase, we have to define the data loader (we did this in the previous step) and define the optimizer (in this case we are using the RMSprop optimizer). Once everything is ready, we can start with the training loop.", "In line 15 we are iterating for each epoch. In line 20 we are iterating for each batch using the data loader. In line 17 the model is set in training mode (this means that the gradients will be updated). In line 25 the model is fed. In line 28 the error is calculated. In line 29 the variables that host the gradients are cleaned. On line 34 the gradients are calculated. On line 37 the parameters are updated.", "Finally the predictions are saved and the evaluation function is called to obtain the accuracy for both the training and test data. So, let\u2019s see this in the next section!", "Great, we are finally in the evaluation section. Let\u2019s see how this is.", "This time we are going to use accuracy as a metric to measure the performance of the model. Although there are predefined functions to calculate it directly, this time we are going to do it manually, that is, calculating the true positives as well as the false positives.", "In this case, we are defining 0.5 as the threshold to determine if the value of the resulting class is positive or negative.", "Congratulations! We have reached the end of this tutorial blog. The code is open for any suggestions and/or comments. Feel free to fork or clone!", "In this tutorial blog we learned how to generate a text classification model using a convolution-based neural network architecture implementing the PyTorch framework.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Machine Learning Engineer | Data Scientist | Software Engineer"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F1113df31e79f&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftext-classification-with-cnns-in-pytorch-1113df31e79f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftext-classification-with-cnns-in-pytorch-1113df31e79f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftext-classification-with-cnns-in-pytorch-1113df31e79f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftext-classification-with-cnns-in-pytorch-1113df31e79f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----1113df31e79f--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----1113df31e79f--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://ferneutron.medium.com/?source=post_page-----1113df31e79f--------------------------------", "anchor_text": ""}, {"url": "https://ferneutron.medium.com/?source=post_page-----1113df31e79f--------------------------------", "anchor_text": "Fernando L\u00f3pez"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd606f5d846f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftext-classification-with-cnns-in-pytorch-1113df31e79f&user=Fernando+L%C3%B3pez&userId=d606f5d846f2&source=post_page-d606f5d846f2----1113df31e79f---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1113df31e79f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftext-classification-with-cnns-in-pytorch-1113df31e79f&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1113df31e79f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftext-classification-with-cnns-in-pytorch-1113df31e79f&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@shebster_07?utm_source=medium&utm_medium=referral", "anchor_text": "Shelby Miller"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://towardsdatascience.com/text-classification-with-pytorch-7111dae111a6", "anchor_text": "Text Classification with LSTMs in PyTorch"}, {"url": "https://www.kaggle.com/c/nlp-getting-started", "anchor_text": "Real or Not? NLP with Disaster Tweets"}, {"url": "https://github.com/FernandoLpz/Text-Classification-CNN-PyTorch", "anchor_text": "https://github.com/FernandoLpz/Text-Classification-CNN-PyTorch"}, {"url": "https://pytorch.org/docs/stable/generated/torch.nn.Conv1d.html", "anchor_text": "source"}, {"url": "https://github.com/FernandoLpz/Text-Classification-CNN-PyTorch", "anchor_text": "https://github.com/FernandoLpz/Text-Classification-CNN-PyTorch"}, {"url": "https://medium.com/tag/cnn?source=post_page-----1113df31e79f---------------cnn-----------------", "anchor_text": "Cnn"}, {"url": "https://medium.com/tag/pytorch?source=post_page-----1113df31e79f---------------pytorch-----------------", "anchor_text": "Pytorch"}, {"url": "https://medium.com/tag/python?source=post_page-----1113df31e79f---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/text?source=post_page-----1113df31e79f---------------text-----------------", "anchor_text": "Text"}, {"url": "https://medium.com/tag/neural-networks?source=post_page-----1113df31e79f---------------neural_networks-----------------", "anchor_text": "Neural Networks"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1113df31e79f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftext-classification-with-cnns-in-pytorch-1113df31e79f&user=Fernando+L%C3%B3pez&userId=d606f5d846f2&source=-----1113df31e79f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1113df31e79f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftext-classification-with-cnns-in-pytorch-1113df31e79f&user=Fernando+L%C3%B3pez&userId=d606f5d846f2&source=-----1113df31e79f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1113df31e79f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftext-classification-with-cnns-in-pytorch-1113df31e79f&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----1113df31e79f--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F1113df31e79f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftext-classification-with-cnns-in-pytorch-1113df31e79f&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----1113df31e79f---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----1113df31e79f--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----1113df31e79f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----1113df31e79f--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----1113df31e79f--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----1113df31e79f--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----1113df31e79f--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----1113df31e79f--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----1113df31e79f--------------------------------", "anchor_text": ""}, {"url": "https://ferneutron.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://ferneutron.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Fernando L\u00f3pez"}, {"url": "https://ferneutron.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "537 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd606f5d846f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftext-classification-with-cnns-in-pytorch-1113df31e79f&user=Fernando+L%C3%B3pez&userId=d606f5d846f2&source=post_page-d606f5d846f2--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F14c367392dfa&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftext-classification-with-cnns-in-pytorch-1113df31e79f&newsletterV3=d606f5d846f2&newsletterV3Id=14c367392dfa&user=Fernando+L%C3%B3pez&userId=d606f5d846f2&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}