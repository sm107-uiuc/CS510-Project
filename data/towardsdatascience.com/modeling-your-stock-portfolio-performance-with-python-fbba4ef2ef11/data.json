{"url": "https://towardsdatascience.com/modeling-your-stock-portfolio-performance-with-python-fbba4ef2ef11", "time": 1683005762.870879, "path": "towardsdatascience.com/modeling-your-stock-portfolio-performance-with-python-fbba4ef2ef11/", "webpage": {"metadata": {"title": "Modeling Stock Portfolios with Python | Towards Data Science", "h1": "Modeling Your Stock Portfolio Performance with Python", "description": "Use python to analyze stock portfolio data and learn the challenges of accurately calculating performance on a time-weighted basis, along with data viz"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/python-for-finance-stock-portfolio-analyses-6da4c3e61054", "anchor_text": "great article", "paragraph_index": 0}, {"url": "https://medium.com/u/ad21d3b5b4fd", "anchor_text": "Kevin Boller", "paragraph_index": 0}, {"url": "https://github.com/mattygyo/stock_portfolio_analysis", "anchor_text": "found and forked here", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/FIFO_and_LIFO_accounting", "anchor_text": "FIFO", "paragraph_index": 6}, {"url": "https://www.quandl.com/", "anchor_text": "Quandl", "paragraph_index": 9}, {"url": "https://iexcloud.io/", "anchor_text": "IEXFinance", "paragraph_index": 9}, {"url": "https://github.com/ranaroussi/yfinance", "anchor_text": "yfinance", "paragraph_index": 9}, {"url": "https://github.com/rsheftel/pandas_market_calendars", "anchor_text": "pandas_market_calendars", "paragraph_index": 10}, {"url": "https://pandas.pydata.org/pandas-docs/version/0.22.0/generated/pandas.date_range.html", "anchor_text": "pandas.date_range", "paragraph_index": 10}, {"url": "https://plotly.com/python/plotly-express/", "anchor_text": "Plotly Express", "paragraph_index": 65}], "all_paragraphs": ["When I first began learning Python, one of my goals was to understand how to better evaluate the financial performance of my stock portfolio. I came across a great article by Kevin Boller where he used python to compare a portfolio against the S&P 500. I highly recommend spending a few minutes reading through it to better understand the underlying financial concepts since I won\u2019t go as in-depth here.", "However, one of the things I wanted was a time series display of the data, whereas this was more a summary of a point in time. The original code also assumed stock sales would never happen, and I wanted it to reflect the reality of buying/selling positions over a dynamic time frame.", "The rest of this article will explore the process of how I structured the code, challenges to accurately calculating performance on a time-weighted basis, and how to display the end result. The files and code explained below can be found and forked here.", "Our goal here is to read a CSV file of \u2018buys\u2019 and \u2018sells\u2019 from someone\u2019s portfolio and then calculate the rate of return relative to an index across any specified timeframe. \u201cThat doesn\u2019t sound terrible!\u201d \u2014 said the arrogant voice in my head prior to starting coding. Turns out that voice is a hopeless optimist and there are actually a lot of hurdles, including:", "To better illustrate these challenges, here\u2019s a drawing that attempts to visualize a scenario:", "Looking at the illustration, the top-most table represents some fake buy/sell data in a portfolio. The section below that represents what a per-day snapshot looks like at various points across the selected timeframe. As you can see, trades prior to the start date become extremely important in calculating the active balance at the start of the timeframe. Just because I bought 100 shares of Apple before my start date does not mean it should be excluded.", "You will also notice on the bottom-middle table cost per share becomes $11.53 when selling AAPL, why is that? Because the AAPL shares were bought two days apart at different prices per share, we need to aggregate and average the cost together. This means the order of what you sell becomes important! For this article, we\u2019ll assume everything adheres to FIFO standards, which means the oldest shares bought are the first shares sold. Finally, we see that the buy for MSFT stock will be excluded since it exists outside of the timeframe, so we\u2019ll need to account for that as well in our program.", "After considering the challenges mentioned above, I decided creating a fresh \u2018daily\u2019 calculation of holdings and stock prices would be necessary to generate an accurate analysis. As an added benefit, everything mentioned in Kevin\u2019s article could also be feasible since most all calculations were based on taking a snapshot and comparing it to a later snapshot. Keeping this all in mind, we\u2019re going to take the following approach to build this:", "Now that we have a loose structure of what we want to accomplish, let\u2019s get to typing!", "The first thing we need to do is grab daily data for both the stocks we have in our portfolio, as well as the benchmark we\u2019re evaluating our portfolio against. Stock data is generally not available in an open source or free form, and although there are plenty of awesome services like Quandl or IEXFinance for hardcore analysis, they\u2019re a Ferrari to my Prius needs. Luckily, there\u2019s a brilliant library called yfinance that scrapes Yahoo Finance stock data and returns it in a structured form. So let\u2019s start by importing the libraries we\u2019ll need and the first few functions for getting the data:", "The first function we are writing is called create_market_cal and uses the pandas_market_calendars library to find all relevant trading days within a specified timeframe. This library automatically filters out non-trading days based on the market, so I don\u2019t need to worry about trying to join data to invalid dates by using something like pandas.date_range. Since my stocks are all US-based, I\u2019ll select NYSE as my calendar, and then standardize the timestamps to make them easy to join on later.", "The get_data function takes an array of stock tickers along with a start and end date, and then grabs the data using the yfinance library listed above. You\u2019ll notice the end date parameter includes a timedelta shift, this is because yfinance is exclusive of the end date you provide. Since we don\u2019t want to remember this caveat when setting our parameters, we\u2019ll shift the date+1 here using timedelta.", "Finally, the get_benchmark function just feeds into get_data and then drops the ticker symbol. Now that we have our initial functions let\u2019s run the following to assign everything to variables:", "As a point of reference, my CSV file contains the following columns and you\u2019ll want to make sure your CSV contains the same columns if you\u2019re trying to replicate:", "We now have four crucial datasets in order to proceed:", "Using this we can move forward to the next step, onward to glory!", "Now that we have these four datasets, we need to figure out how many shares we actively held during the start date specified. To do that, we\u2019re going to create two functions, portfolio_start_balance and position_adjust.", "Assigning the output to a variable should give you the active positions within your portfolio:", "So now that we can see the code let\u2019s walk through the inner workings and show what\u2019s happening in layman\u2019s terms.", "First, we supply our CSV data and start date to the portfolio_start_balance function and create a dataframe of all trades that happened before our start date. We\u2019ll then check to see if there are future sales after the start_date since we will reconstruct a snapshot of this dataframe in the end:", "We\u2019ll then create a dataframe of sales that occurred before the start_date. We need to make sure that these are all factored out of our active portfolio on the specified start_date:", "Next, we\u2019ll make a final dataframe of positions that did not have any sales occur over the specified time period:", "Now we\u2019ll loop through every sale in our sales dataframe, call our position_adjust function, and then append the output of that into our empty adj_postitions_df:", "Let\u2019s now look at how the position_adjust function works so we can fully understand what\u2019s going on here.", "First, we\u2019ll create an empty dataframe called stocks_with_sales where we\u2019ll later add adjusted positions, and another dataframe holding all of the transactions labeled as \u2018buys\u2019.", "Remember that we already filtered out \u2018buys in the future\u2019 in the portfolio_start_balance function, so no need to do it again here. You\u2019ll also notice that we\u2019re sorting by \u2018Open Date\u2019, and that will be important given we want to subtract positions using the FIFO method. By sorting the dates, we know we can move iteratively through a list of old-to-new positions:", "Now that we have all buys in a single dataframe, we\u2019re going to filter for all buys where the stock symbol matches the stock symbol of the sold position:", "You\u2019ll notice that we\u2019re using indexing to access the \u2018Symbol\u2019 column in our data. That\u2019s because using iterrows() creates a tuple from the index [0] and the series of data [1]. This is the same reason we\u2019ll use indexing when we loop through buys_before_start:", "So what\u2019s happening in the loop here is that for every buy in buys_before_start:", "Once that loops through every sales position your code will now execute the final lines of portfolio_start_balance:", "So we\u2019re taking our adjusted positions in adj_positions_df, adding back positions that never had sales, adding back sales that occur in the future, and finally filtering out any rows that position_adjust zeroed out. You should now have an accurate record of your active holdings as of the start date!", "So now that we have an accurate statement of positions held at the start date, let\u2019s create daily performance data! Our strategy is similar to what we did in step 2, in fact, we\u2019ll re-use the position_adjust method again since we\u2019ll need to account for potential sales within our date range. We\u2019ll go ahead and create two new functions, time_fill and fifo, and I\u2019ll explain what each does in more detail:", "Similar to portfolio_start_balance, our goal is to provide our dataframe of active positions, find the sales, and zero-out sales against buy positions. The main difference here is that we are going to loop through using our market_cal list with valid trading days:", "This way we can go day-by-day and see if any sales occurred, adjust positions correctly, and then return a correct snapshot of the daily data. In addition, we\u2019ll also filter to positions that have occurred before or at the current date and make sure there are only buys. We\u2019ll then add a Date Snapshot column with the current date in the market_cal loop, then append it to our per_day_balance list:", "Our fifo function takes your active portfolio positions, the sales dataframe created in time_fill, and the current date in the market_cal list. It then filters sales to find any that have occurred on the current date, and create a dataframe of positions not affected by sales:", "We\u2019ll then use our trusty position_adjust function to zero-out any positions with active sales. If there were no sales for the specific date, our function will simply append the positions_no_change onto the empty adj_positions dataframe, leaving you with an accurate daily snapshot of positions:", "Running this line of code should return back a list of all trading days within the time range specified, along with an accurate count of positions per-day:", "If you\u2019re still following along we\u2019re in the home stretch! Now that we have an accurate by-day ledger of our active holdings, we can go ahead and create the final calculations needed to generate graphs! We\u2019ll be adding an additional six functions to our code to accomplish this:", "Let\u2019s start with the last function per_day_portfolio_calcs since it will use all the other functions.", "Now that we have our positions_per_day from step 3, our goal is to pass that along with daily_benchmark, daily_adj_close, and stocks_start to this new function:", "We\u2019ll then concatenate our list of dataframes into a single list using pd.concat:", "Now that we have a single large dataframe we\u2019ll pass it to the remaining functions in per_day_portfolio_calcs.", "If we want to track daily performance we\u2019ll need to know the theoretical value of our holdings per day. This requires taking the amount of securities currently owned and then multiplying it by the daily close for each security owned.", "To do this, we provide our new single df along with the per-day data we pulled using yfinance, as well as our start date. We\u2019ll then merge our portfolio to the daily close data by joining the date of the portfolio snapshot to the date of the daily data, as well as joining on the ticker. For people more familiar with SQL this is essentially a left join:", "Once we have our merged df we\u2019ll rename the daily close to \u2018Symbol Adj Close\u2019, and then multiply the daily close by the quantity of shares owned. Dropping extra columns will return the dataframe we need to proceed:", "Now that we have an accurate daily cost of our securities, we\u2019ll want to add in our benchmark to the dataset in order to make comparisons against our portfolio:", "We start by merging our daily benchmark data to the correct snapshots by using a merge similar to the one in modified_cost_per_share:", "Now that we have daily closes for our benchmark merged to our portfolio dataset, we\u2019ll filter our daily_benchmark data based on its max and min dates. It\u2019s important to use max and min vs. your start and end date because the max/min will take into account days where the market was open:", "Great! So now we have absolute start and end closes for our benchmark in the portfolio dataset as well, which will be important when calculating returns on a daily basis.", "So now that our benchmark data is added, let\u2019s move onto the next step:", "Our goal here is to take the output of benchmark_portfolio_calcs, find the last day of close for all the stocks in the portfolio, and then add a Ticker End Date Close column to our portfolio dataset. We\u2019ll do this by once again merging to the daily stock data, filtering for the max date, and then joining based on the ticker symbol:", "Now just one more step until we generate our calculations!", "This final step takes the updated portfolio dataframe, the daily stock data from yfinance, and assigns start of year equivalent positions for the benchmark:", "We\u2019ll first filter the daily close data to its beginning date, then merge our portfolio data to it using the ticker symbol. We\u2019ll then call this close Ticker Start Date Close for convenience:", "Then we need to \u2018true up\u2019 our adjusted cost per share costs, but why? Imagine you bought Google a long time ago at $500/share, but now you want to calculate YTD returns on your position in 2020. If you use $500 as your cost basis for the beginning of 2020, you\u2019re not going to have an accurate comparison since the cost basis is from years ago. To fix this, we\u2019re going to use Numpy\u2019s where function:", "Simply put, this is saying \u2018if the open date is \u2264 the date of the start date, then Adj cost per share is equal to Ticker Start Date Close\u2019 (closing price of the stock from the min date on the yfinance data). If not, then use the existing Adj cost per share.", "The remaining part modifies the adjusted cost based on the modified cost per share, drops unneeded columns from the merge, and then calculates the equivalent amount of benchmarks shares you would have owned based on your newly calculated adjusted cost:", "Congratulations, we now have all the necessary data to calculate returns properly! Let\u2019s knock out this last section and then dive into visualizing this!", "The final step here simply takes the aggregated dataframe from all the other functions, applies a bunch of calculations against the data we\u2019ve been modifying, and returns a final dataframe:", "The first set,Benchmark Return and Ticker Return, both use a current close price divided by their beginning cost basis to calculate a return:", "Share value for each is calculated the same way, using the modified per-day quantities and equivalent benchmark shares we calculated earlier:", "We\u2019ll do the same thing again to calculate monetary gain/loss, subtracting the share value columns from the modified adjusted cost we calculated in the portfolio_start_of_year_stats function:", "Finally, we\u2019ll calculate absolute return values using the benchmark metrics we calculated earlier:", "Boom! Now let\u2019s figure out how to graph our new data and finish this up.", "So now that we went through all of that to get our daily performance data, how should we best display it? The biggest benefit of this daily data is to see how your positions perform over time, so let\u2019s try looking at our data on an aggregated basis first.", "I\u2019ve been using Plotly a lot for recent side projects, so for doing this I\u2019m going to opt for simple and go with the Plotly Express library. Since we\u2019ll need to aggregate each day\u2019s stocks into a single metric per-day, I\u2019m going to write this as a function that takes your completed dataframe and two metrics you want to plot against each other:", "As you can see, we\u2019ll supply ticker and benchmark gain/loss as the metrics, then use a groupby to aggregate the daily performance to the portfolio-level. Plotting it out should return something similar to this!", "You can also aggregate using different metrics like Abs Value Compare to see this as a single line:", "This is great, but the most useful view, in my opinion, can be generated by using the facet_col option in plotly express to generate a chart per ticker that compares the benchmark against each ticker\u2019s performance:", "We\u2019ll also use the facet_col_wrap parameter in order to limit the amount of graphs per row. Running this code should generate something similar to the output below!", "We covered a lot of ground here, and hopefully, this has been helpful for learning more about populating and analyzing financial data! There\u2019s a lot more that can be explored in the future, including:", "Hope this was helpful to anyone out there, and feel free to reach out or comment below with questions/comments. Thanks for reading!", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Ffbba4ef2ef11&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-your-stock-portfolio-performance-with-python-fbba4ef2ef11&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-your-stock-portfolio-performance-with-python-fbba4ef2ef11&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-your-stock-portfolio-performance-with-python-fbba4ef2ef11&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-your-stock-portfolio-performance-with-python-fbba4ef2ef11&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----fbba4ef2ef11--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----fbba4ef2ef11--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@mattygyo?source=post_page-----fbba4ef2ef11--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@mattygyo?source=post_page-----fbba4ef2ef11--------------------------------", "anchor_text": "Matt Grierson"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F642d1ad397ba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-your-stock-portfolio-performance-with-python-fbba4ef2ef11&user=Matt+Grierson&userId=642d1ad397ba&source=post_page-642d1ad397ba----fbba4ef2ef11---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffbba4ef2ef11&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-your-stock-portfolio-performance-with-python-fbba4ef2ef11&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffbba4ef2ef11&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-your-stock-portfolio-performance-with-python-fbba4ef2ef11&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@jamie452?utm_source=medium&utm_medium=referral", "anchor_text": "Jamie Street"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://towardsdatascience.com/python-for-finance-stock-portfolio-analyses-6da4c3e61054", "anchor_text": "great article"}, {"url": "https://medium.com/u/ad21d3b5b4fd", "anchor_text": "Kevin Boller"}, {"url": "https://github.com/mattygyo/stock_portfolio_analysis", "anchor_text": "found and forked here"}, {"url": "https://en.wikipedia.org/wiki/FIFO_and_LIFO_accounting", "anchor_text": "FIFO"}, {"url": "https://www.quandl.com/", "anchor_text": "Quandl"}, {"url": "https://iexcloud.io/", "anchor_text": "IEXFinance"}, {"url": "https://github.com/ranaroussi/yfinance", "anchor_text": "yfinance"}, {"url": "https://github.com/rsheftel/pandas_market_calendars", "anchor_text": "pandas_market_calendars"}, {"url": "https://pandas.pydata.org/pandas-docs/version/0.22.0/generated/pandas.date_range.html", "anchor_text": "pandas.date_range"}, {"url": "https://plotly.com/python/plotly-express/", "anchor_text": "Plotly Express"}, {"url": "https://medium.com/tag/data-science?source=post_page-----fbba4ef2ef11---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/programming?source=post_page-----fbba4ef2ef11---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/technology?source=post_page-----fbba4ef2ef11---------------technology-----------------", "anchor_text": "Technology"}, {"url": "https://medium.com/tag/python?source=post_page-----fbba4ef2ef11---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/finance?source=post_page-----fbba4ef2ef11---------------finance-----------------", "anchor_text": "Finance"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ffbba4ef2ef11&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-your-stock-portfolio-performance-with-python-fbba4ef2ef11&user=Matt+Grierson&userId=642d1ad397ba&source=-----fbba4ef2ef11---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ffbba4ef2ef11&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-your-stock-portfolio-performance-with-python-fbba4ef2ef11&user=Matt+Grierson&userId=642d1ad397ba&source=-----fbba4ef2ef11---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffbba4ef2ef11&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-your-stock-portfolio-performance-with-python-fbba4ef2ef11&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----fbba4ef2ef11--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Ffbba4ef2ef11&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-your-stock-portfolio-performance-with-python-fbba4ef2ef11&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----fbba4ef2ef11---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----fbba4ef2ef11--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----fbba4ef2ef11--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----fbba4ef2ef11--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----fbba4ef2ef11--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----fbba4ef2ef11--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----fbba4ef2ef11--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----fbba4ef2ef11--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----fbba4ef2ef11--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@mattygyo?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@mattygyo?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Matt Grierson"}, {"url": "https://medium.com/@mattygyo/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "346 Followers"}, {"url": "https://www.linkedin.com/in/matthewgrierson/", "anchor_text": "https://www.linkedin.com/in/matthewgrierson/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F642d1ad397ba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-your-stock-portfolio-performance-with-python-fbba4ef2ef11&user=Matt+Grierson&userId=642d1ad397ba&source=post_page-642d1ad397ba--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fbcc255d5ba5e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-your-stock-portfolio-performance-with-python-fbba4ef2ef11&newsletterV3=642d1ad397ba&newsletterV3Id=bcc255d5ba5e&user=Matt+Grierson&userId=642d1ad397ba&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}