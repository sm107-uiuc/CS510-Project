{"url": "https://towardsdatascience.com/visualizations-with-matplotlib-part-1-c9651008b6b8", "time": 1683015379.270089, "path": "towardsdatascience.com/visualizations-with-matplotlib-part-1-c9651008b6b8/", "webpage": {"metadata": {"title": "Python Data Visualization with Matplotlib \u2014 Part 1 | Rizky Maulana N | Towards Data Science", "h1": "Python Data Visualization with Matplotlib \u2014 Part 1", "description": "This is one of the most completed tutorials in visualizing your data with Matplotlib. I present to you 90+ examples generated with Matplotlib."}, "outgoing_paragraph_urls": [{"url": "https://matplotlib.org/", "anchor_text": "Matplotlib.", "paragraph_index": 0}, {"url": "https://plotly.com/dash/", "anchor_text": "Dash", "paragraph_index": 0}, {"url": "https://gka.github.io/palettes/#", "anchor_text": "link", "paragraph_index": 73}, {"url": "https://towardsdatascience.com/create-professional-plots-using-matplotlib-63a6863b7363", "anchor_text": "story", "paragraph_index": 73}, {"url": "https://gka.github.io/palettes/", "anchor_text": "link", "paragraph_index": 118}, {"url": "https://towardsdatascience.com/create-professional-plots-using-matplotlib-63a6863b7363", "anchor_text": "here", "paragraph_index": 118}, {"url": "https://towardsdatascience.com/creating-colormaps-in-matplotlib-4d4de78a04b8", "anchor_text": "here", "paragraph_index": 125}, {"url": "https://towardsdatascience.com/customizing-multiple-subplots-in-matplotlib-a3e1c2e099bc", "anchor_text": "link", "paragraph_index": 134}], "all_paragraphs": ["Data visualization aims to present the data into a more straightforward representation, such as scatter plot, density plot, bar chart, etc. It is also useful to give readers or analysts a global picture of their data. By visualizing your data, you can detect potential outliers. In Python, you can use various modules or libraries to visualize data. One of the mainstream modules is Matplotlib. You can visualize data using Matplotlib in various plotting styles. But, Matplotlib can not show you a dynamics plot. If you want to create a tremendous dynamic plot, you can use Dash from plotly (I hope to finish a story about a complete tutorial with Dash next month).", "This story will guide you on how to visualize data with Matplotlib in a various way. 90 examples maybe can inspire you to create a plot from different points of view. It is not the most completed tutorials in data visualization with Matplotlib, but I believe that this story can accommodate many people\u2019s needs, reach many disciples to be applied.", "As I mentioned before, I will guide you through creating 90 various plot examples. The examples are distributed in 11 different style plots: scatter plot, line plot, histogram 1D, 2D, marginal plot, bar chart, box plot, violin plot, pie chart, polar chart, geographic projection, 3D plot, and contour plot. You can see Figure 1 to have a general idea of this story.", "In this story, I try to focus on creating and customizing various plots. So, I assume you have known several techniques outside it, e.g., creating multiple subplots and customizing colormaps in Matplotlib. If you have not known it, I will give you some links to understand it.", "At the beginning of writing this story, I plan to write only 1 story. But, I think I need to divide it into several parts because of the reading time. If I write it all in one story, it will cost more than 40 minutes. I guess you will be bored to read it all just in one story :). So, I divide it into 2 or 3 parts. I will limit the reading time to less than 30 minutes. This is the first part. Let\u2019s start it.", "To install Matplotlib, you can install it via pip with this code", "When I write this story, I installed Matplotlib version 3.3.2. You can check it by writing this code.", "If you want to check it in Jupyter Notebook (hereafter, Jupyter), you can add ! before pip, as shown in Figure 2.", "If you want to upgrade your Matplotlib version, you can use the following code", "Again, you can add ! before pip to upgrade Matplotlib via Jupyter.", "If you have installed a different Matplotlib version with Matplotlib I used in this story, maybe you will face different results. Just write the issues you meet in the response columns below. I recommend you to save this story. So, you can continue your reading if you have limited time.", "Before we move on the first section, I need to inform you that I have customized my Matplotlib plotting style such as using LaTeX font as default, changing the font size and family, changing xtick and ytick direction and size, and adding minor tick in the x-axis and y-axis. To use LaTeX font as your default font in Matplotlib, you can use this code", "If you face some errors, you need to read the following story. I have explained the detailed procedures to deal with LaTeX font in Matplotlib", "To customize the other parameters (font size, font family, and tick params) you just write this code at the beginning of your code", "If you need to understand it in more detail, you can visit this story", "In this section, there are eight examples of scatter plots. Before creating a scatter plot, I need to generate mock data using this code", "Variable x is an array of 50 data, from 0 to 10. Variable y is the summation of the square of sin(x) and cos(x). I want to visualize variable x in the x-axis, and variable y in the y-axis in the form of a scatter plot using this code", "It is so simple. The code will show you a result, as shown in Figure 3.", "To make it more beautiful, you can reduce the size of each data and give the label using this code", "To change the color, you need to add this argument in scatter syntax", "If you want to make the axis scale is at the same scale, you can use this code", "To create an axis label for the x- and y-axis, you can add the following code", "You have labeled your scatter plot, but you have not shown it as a legend. To show it, you can use this code", "To save your plot, you can use save figure syntax as shown in the following code", "The code above will save your plot with the name of scatter2.png, resolution of 300 dots per inch, tight bbox, and white background. It is okay if you omitted bbox_inches and face color arguments, but maybe you will get a different result. Just try it.", "The code will create a scatter plot, as shown in Figure 4.", "You can see that the tick direction in the x-axis and y-axis inside the axes, and the font used is in LaTeX format. If you want to change the figure size, you can add figure size arguments inside plt.figure()", "To change the marker style, for example, I want to change from dot to cross, you can add this argument in plt.scatter", "Figure 5 is the result if you apply the code above", "There are tons of marker styles you can use in Matplotlib. You can check it at the following link.", "If you have read the documentation above, you can realize that you can use the alphabet as your marker style. I will show you the example of applying the alphabet as a marker, as shown in Figure 6.", "To generate Figure 6, I create a different function for the parameter in the x- and y-axis. Here is the code to generate it", "To visualize variable randx and randy, I run this code", "I use the Greek symbol beta as my marker style. You can change it with a different alphabet, such as a, B, C, d, or 1, 2, 3, etc.", "Customizing the size for each data", "This subsection will show you how to create a scatter plot with different sizes for each data, as shown in Figure 7.", "To create it, I generate a random position for variable randx and randy, from 0 to 100 using this code", "For your reminder, I generate random data using Numpy. In generating a random number, Numpy only generates it in a range of 0 to 1. As I know, it is a convention in generating a random number (not only in Numpy), just from 0 to 1. To modify it, you can multiply it by 100. So, you will get a random number in the range of 0 to 100.", "After that, I generate a random integer size for each data from 50 to 200, using this code", "To visualize it, you just add the argument of the size that will be applied in each data, using this code", "The additional syntax in creating Figure 7 is inserting the minor tick in the x- and y-axis. To insert it, you need to import submodule MultipleLocator using this code", "After that, you can add this syntax to insert minor axis", "Here is the full code to generate Figure 7.", "You can change the color using colormaps. It means that data with different sizes will be color-coded by a different color. You can add color arguments in plt.scatter() like this", "To embed the colorbar, you can use this code", "You will get a plot, as shown in Figure 8.", "Here is the full code to generate Figure 8.", "You can change the colormaps using this argument", "You can check this link to understand all of the colormaps provided by Matplotlib", "In this tutorial, I have created my own colormaps by combining colormaps Blues and Oranges, as shown in Figure 9.", "To combine it, I use this code", "I create my own colormaps named orange_blue. To understand how to create and customize your own colormaps in Matplotlib, you can read it in the following link", "To apply it, I just change color arguments c = orange_blue. You can check the result in Figure 11.", "Here is the full code to generate Figure 11.", "This the end of this section, creating a scatter plot with Matplotlib. If you face some errors, you can leave a comment in the response columns.", "To make a line plot in Matplotlib, I will generate mock data using this code", "To visualize variable x and y in the form of a line plot, you need to use the following simple code", "The code above will generate a figure, as shown in Figure 12.", "You can change the line style of the line plot in Matplotlib using this argument", "The argument above should be inserted in plt.plot() syntax. In this tutorial, I will show you four different line style; they are", "To generate it automatically, I use looping to make it simple. Here is the full code", "I will distribute the 4 different line styles in one figure. It means that I need to create 4 axes in a figure. In Matplotlib, you can generate it by customizing subplots using GridSpec(), subplot(), and add_subplot(). In this session, I use GridSpec() syntax. I create 4 axes (2 rows and 2 columns) with width and height space equals 0.25 (see lines 6 to 12). As I mentioned at the beginning, I will only focus on customizing plots. If you need more explanation in customizing subplots in Matplotlib, you can visit this link", "If you run the code above, it will create a figure, as shown in Figure 13.", "The code will simply generate 4 different line styles, with labels and annotations for each line style. Matplotlib provides many line styles you can use. You can choose your favorite line styles via this link", "To customize the line width for your line plot, you can use this argument", "I present you with 4 different line width, as shown in Figure 14.", "I use a similar technique to create Figure 14. Here is the full code.", "This subsection will guide you to create a mark every feature. To understand it, I will show the result first, as shown in Figure 15.", "In Figure 15, I create a circle mark for every 5 data. You can create it with this argument", "You need to place the argument \u2018o\u2019 in the third position.", "To change the line color, you can apply a similar concept to change the scatter color, as shown in the following code", "I want to show you how to generate 4 different colors and 4 different marks using looping, as shown in Figure 16.", "You can reproduce Figure 16 with this code", "4 different colors I used are colorblind-friendly. I get it from this link. To understand how to create colorblind-friendly palettes using that link, you read this story.", "To demonstrate an error bar in line plot, I need to generate the error, using this code", "The code will generate random numbers from 0.1 to 0.3 for noise_x and from 0.3 to 0.7 for noise_y. To insert the error bar for the y-axis, you can use this code", "Figure 17 is an example of error bar in line plot.", "You can create Figure 17 with this code.", "To insert error bar in the x-axis, you can use this argument", "You can see the example of inserting an error bar in the x- and y-axis in Figure 18.", "You can use this code to reproduce Figure 18.", "If you want to visualize your data without a line plot, only the error bar, you can use this argument", "The code above will show a plot, as shown in Figure 19.", "To visualize the error, you can also use this code", "The fill_between arguments are data for the x-axis, upper limit, and lower limit for the filled area. In the code above, it is represented by y + noise and y-noise. You need to lower the transparency of the filled area. Here is the full code", "If you run the code above, you will get a result, as shown in Figure 20.", "Inserting the vertical and horizontal lines", "You can insert a horizontal and a vertical line with this code", "You need to define horizontal lines in the first argument, followed by the horizontal line\u2019s starting point and ending point. For the vertical line, it has similar arguments.", "Figure 21 is an example of inserting a horizontal and vertical line.", "To generate Figure 21, you can use this code", "In Figure 21, the legend is placed outside the axes. You can realize it in line 17.", "This subsection will guide you to make a filled area between two vertical lines, as shown in Figure 22.", "To reproduce Figure 22, you can use this code", "You need to know the important thing in creating a filled area in Matplotlib, you need to set a suitable y-axis limit.", "This section will explain how to make a histogram in 1D and 2D. I will tell you about the 1D histogram first. Before visualizing a 1D histogram, I will make a mock data, a Normal distributed random number, using this code.", "In default, Numpy will generate a normal distributed random number with mean/median (mu) equals 0 and variance (sigma) equals 1. In the code above, I change mu to 15 and sigma to 2. To visualize variable x in 1D histogram, you can use this code", "The code will show a figure, as shown in Figure 23.", "Matplotlib will generate 10 bins for a 1D histogram as the default setting. If you want to change the bins number, you can use this argument.", "The argument will generate a 1D histogram with 40 bins, as shown in Figure 24.", "Here is the full code to create Figure 24.", "You can also limit the range of histogram using this argument", "The argument will let histogram only shows the data from 12 to 18, as shown in Figure 25.", "You can reproduce Figure 25 with this code.", "I also change the histogram color using a color argument.", "You can create a horizontal histogram, as shown in Figure 26.", "You need to use this argument to create a horizontal histogram", "To create Figure 25, you can run this code.", "If you want to show the border from each histogram, you can use this argument.", "I want to make the histogram border in black color, as shown in Figure 26.", "To generate Figure 26, you can use this full code.", "You can show many histograms in a single figure, as shown in Figure 27.", "In Figure 27, I generate three normal distributions, with different mu and sigma. You can reproduce Figure 27 with this code.", "You can make it prettier by changing the histograms\u2019 transparency, as shown in Figure 28.", "If you need the full code to create Figure 28, you can read the code below. The difference with the previous code is just in the alpha argument.", "You can also generate Figure 28 using a looping, as shown in this code", "After see the code above, maybe you have an imagination to create a lot of histogram (more than 3) in a single figure. I will accommodate it :D. Here is the code to create and visualize 10 histograms in a single figure cleanly.", "If you run the code above, you will get a result, as shown in Figure 29.", "You can generate many colors merely using this link. After generating the palettes, just copy and paste it into your code. The detailed procedure of generating the palettes is provided here.", "You can generate a 2D histogram with Matplotlib, as shown in Figure 30.", "To create Figure 30, I need to generate 2 normal distribution with this code.", "To visualize variable x and y in the 2D histogram, you can use this code.", "As in the 1D histogram, Matplotlib will generate 10 bins as the default setting for the 2D histogram. To change it, you can apply the same argument as in the 1D histogram, as shown in the code below.", "You can see the modified bins number of the 2D histogram in Figure 31.", "You also can change the colormaps of your 2D histogram using this argument", "I want to change the colormaps from Viridis (default colormaps from Matplotlib) to my own colormaps named orange_blue. I have explained how to create your own colormaps in the previous section, or you can read it here.", "Here is the full code for modifying the colormaps used in the 2D histogram.", "If you run the code above, it will create a figure, as shown in Figure 32.", "You can limit the range of counts for each (change the limit of the colorbar) by applying this argument into plt.hist2d().", "I use \u2018jet\u2019 colormaps with the lower limit for the colorbar equlas 5 and for the upper limit is 25. The code will generate a figure, as shown in Figure 33.", "I try to change the generated random number counts from 10000 to 100000 using this code.", "The code will show a result, as shown in Figure 34.", "Figure 34 peaked at around 0 and distributed around -1 to 1 because I did not change the value of mu and sigma.", "This subsection will tell how to create a marginal distribution, as shown in Figure 35.", "Figure 35 is built by scatter plot and 2 histogram. To create it, you need to understand how to customize the subplots or axes in a single figure. Figure 35 is constructed by 25 axes (5 columns and 5 rows). The detailed is shown in Figure 36. You can create Figure 36 with this code. You need to read this link to understand it.", "Figure 35 shows the transformation of Figure 36. I merge some grids in Figure 36 to only 3 bigger grids. The first grid combines grids 0 to grids 3 (rows 1, column 0 to column 3). I will fill the first grid with the histogram plot. The second grid merges 16 grids from rows 1 to rows 4 and from column 0 to column 3. The last grid is built by combining grids 9, 14, 19, and 24 (rows 1, 2, 3, 4, and column 4).", "To create the first grid, you can use this code.", "After that, add the code below to insert 1D histogram", "To create the second grid, you can add this code to the code above", "Add this code to generate scatter plot in the second grid.", "Here is the code to generate the third grid and its histogram. You need to insert the code below into the first grid code", "You can combine it all, as shown in the following code.", "Next, I will change the scatter plot in the second grid with the 2D histogram, as shown in Figure 37.", "You can reproduce Figure 37 with this code.", "Please leave some comments in the response column if you meet some errors.", "If you want to visualize your data with a bar chart, this is suitable for you. Before I create a bar chart in Matplotlib, as usual, I want to create the mock data to be shown. I want to create data in the Math exam score for six persons. To create it, I use the following code.", "I generate the Math exam scores from 60 to 100. To visualize it, you can use this code.", "After adding some information, I generate a bar chart, as shown in Figure 38.", "Here is the full code to generate Figure 38.", "After that, I create some more mock data for Physics, Biology, and Chemistry exam scores using this code.", "You can create a table, in Python we call it DataFrame, using Pandas. The DataFrame I create from the mock data is shown in Figure 39.", "As a default, I did not insert the code on how to create the DataFrame. But, if you need it, you leave your request in the response column.", "Then, I visualize it, as shown in Figure 40.", "To create Figure 40, you can use this code.", "or use this code if you want use a looping.", "You can use a horizontal bar chart with this code.", "I want to present Figure 40 in the form of horizontal bar chart and in various colors. Here is the full code to generate it.", "After you run the code above, you will get a result, as shown in Figure 41.", "You can insert the error bar in the horizontal bar chart using this argument", "I create the error using integer random number from 1 to 3, as mentioned in the variable noise. After adding some elements for my horizontal bar chart, I show it, as shown in Figure 42.", "You can reproduce Figure 42 with this code.", "Maybe, you realize that my mock data (with error) is not realistic. You can not meet an exam score with the uncertainty. But, I think it is still a good example in understanding the bar chart in Matplotlib.", "This is the end of part 1. As I mentioned before, I try to limit the reading time (less than 30 minutes), so you can enjoy the reading. This part only covers 4 from 11 sections, scatter plot, line plot, histogram, and bar chart. In the next part, I will show the tutorials to create a box plot, violin plot, pie chart, polar chart, geographic projection, 3D plot, and contour plot. If the next part is consuming more than 30 minutes, I will divide it again.", "Data visualization is significant in analyzing data from small data or big data in the technological era. We need it to have a global picture of our data. Various types of visualization you can use with Matplotlib. This is just a small part of python plotting with Matplotlib.", "That\u2019s all. Thanks for reading this story. Comment and share if you like it. I also recommend you follow my account to get a notification when I post my new story. In a couple of days, I will publish Part 2 for Visualizations with Matplotlib.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Python Programmer || Data Scientist || Bayesian Astronomer"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fc9651008b6b8&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizations-with-matplotlib-part-1-c9651008b6b8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizations-with-matplotlib-part-1-c9651008b6b8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizations-with-matplotlib-part-1-c9651008b6b8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizations-with-matplotlib-part-1-c9651008b6b8&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----c9651008b6b8--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c9651008b6b8--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://rizman.medium.com/?source=post_page-----c9651008b6b8--------------------------------", "anchor_text": ""}, {"url": "https://rizman.medium.com/?source=post_page-----c9651008b6b8--------------------------------", "anchor_text": "Rizky Maulana Nurhidayat"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4614e8d3f678&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizations-with-matplotlib-part-1-c9651008b6b8&user=Rizky+Maulana+Nurhidayat&userId=4614e8d3f678&source=post_page-4614e8d3f678----c9651008b6b8---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc9651008b6b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizations-with-matplotlib-part-1-c9651008b6b8&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc9651008b6b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizations-with-matplotlib-part-1-c9651008b6b8&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@tateisimikito?utm_source=medium&utm_medium=referral", "anchor_text": "Jukan Tateisi"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://matplotlib.org/", "anchor_text": "Matplotlib."}, {"url": "https://plotly.com/dash/", "anchor_text": "Dash"}, {"url": "https://towardsdatascience.com/5-powerful-tricks-to-visualize-your-data-with-matplotlib-16bc33747e05", "anchor_text": "5 Powerful Tricks to Visualize Your Data with MatplotlibHow to use LaTeX font, create zoom effect, outbox legend, continuous error, and adjust box pad margintowardsdatascience.com"}, {"url": "https://towardsdatascience.com/create-professional-plots-using-matplotlib-63a6863b7363", "anchor_text": "Create Professional Plots Using MatplotlibCustomizing Matplotlib with style sheets and rcParams, and choosing colorblind-friendly palettestowardsdatascience.com"}, {"url": "https://matplotlib.org/api/markers_api.html", "anchor_text": "matplotlib.markers \u2014 Matplotlib 3.3.2 documentationFunctions to handle markers; used by the marker functionality of and . All possible markers are defined here: marker\u2026matplotlib.org"}, {"url": "https://matplotlib.org/3.3.2/tutorials/colors/colormaps.html", "anchor_text": "Choosing Colormaps in Matplotlib \u2014 Matplotlib 3.3.2 documentationMatplotlib has a number of built-in colormaps accessible via . There are also external libraries like [palettable] and\u2026matplotlib.org"}, {"url": "https://towardsdatascience.com/creating-colormaps-in-matplotlib-4d4de78a04b8", "anchor_text": "Creating Colormaps in MatplotlibA guide to creating and customizing your own colormaps from a list of colorstowardsdatascience.com"}, {"url": "https://towardsdatascience.com/customizing-multiple-subplots-in-matplotlib-a3e1c2e099bc", "anchor_text": "Customizing Multiple Subplots in MatplotlibA guide to creating complex subplots in Matplotlib using subplot, add_subplot, and GridSpectowardsdatascience.com"}, {"url": "https://matplotlib.org/2.1.2/api/_as_gen/matplotlib.pyplot.plot.html", "anchor_text": "matplotlib.pyplot.plot \u2014 Matplotlib 3.3.2 documentationPlot y versus x as lines and/or markers. Call signatures: The coordinates of the points or line nodes are given by x\u2026matplotlib.org"}, {"url": "https://gka.github.io/palettes/#", "anchor_text": "link"}, {"url": "https://towardsdatascience.com/create-professional-plots-using-matplotlib-63a6863b7363", "anchor_text": "story"}, {"url": "https://gka.github.io/palettes/", "anchor_text": "link"}, {"url": "https://towardsdatascience.com/create-professional-plots-using-matplotlib-63a6863b7363", "anchor_text": "here"}, {"url": "https://towardsdatascience.com/creating-colormaps-in-matplotlib-4d4de78a04b8", "anchor_text": "here"}, {"url": "https://towardsdatascience.com/customizing-multiple-subplots-in-matplotlib-a3e1c2e099bc", "anchor_text": "link"}, {"url": "https://towardsdatascience.com/5-powerful-tricks-to-visualize-your-data-with-matplotlib-16bc33747e05", "anchor_text": "5 Powerful Tricks to Visualize Your Data with MatplotlibHow to use LaTeX font, create zoom effect, outbox legend, continuous error, and adjust box pad margintowardsdatascience.com"}, {"url": "https://towardsdatascience.com/matplotlib-styles-for-scientific-plotting-d023f74515b4", "anchor_text": "Matplotlib Styles for Scientific PlottingCustomizing Matplotlib for your scientific data visualizationtowardsdatascience.com"}, {"url": "https://towardsdatascience.com/creating-colormaps-in-matplotlib-4d4de78a04b8", "anchor_text": "Creating Colormaps in MatplotlibA guide to creating and customizing your own colormaps from a list of colorstowardsdatascience.com"}, {"url": "https://towardsdatascience.com/customizing-multiple-subplots-in-matplotlib-a3e1c2e099bc", "anchor_text": "Customizing Multiple Subplots in MatplotlibA guide to creating complex subplots in Matplotlib using subplot, add_subplot, and GridSpectowardsdatascience.com"}, {"url": "https://towardsdatascience.com/introduction-to-big-data-a-simple-code-to-read-1-25-billion-rows-c02f3f166ec9", "anchor_text": "Introduction to Big Data with Vaex \u2014 A Simple Code to Read 1.25 Billion RowsRead and visualize 1.25 billion rows of Galaxy simulation data with Python effectivelytowardsdatascience.com"}, {"url": "https://medium.com/tag/data-science?source=post_page-----c9651008b6b8---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/data-visualization?source=post_page-----c9651008b6b8---------------data_visualization-----------------", "anchor_text": "Data Visualization"}, {"url": "https://medium.com/tag/data-analysis?source=post_page-----c9651008b6b8---------------data_analysis-----------------", "anchor_text": "Data Analysis"}, {"url": "https://medium.com/tag/programming?source=post_page-----c9651008b6b8---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/python?source=post_page-----c9651008b6b8---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc9651008b6b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizations-with-matplotlib-part-1-c9651008b6b8&user=Rizky+Maulana+Nurhidayat&userId=4614e8d3f678&source=-----c9651008b6b8---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc9651008b6b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizations-with-matplotlib-part-1-c9651008b6b8&user=Rizky+Maulana+Nurhidayat&userId=4614e8d3f678&source=-----c9651008b6b8---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc9651008b6b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizations-with-matplotlib-part-1-c9651008b6b8&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c9651008b6b8--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fc9651008b6b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizations-with-matplotlib-part-1-c9651008b6b8&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----c9651008b6b8---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----c9651008b6b8--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----c9651008b6b8--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----c9651008b6b8--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----c9651008b6b8--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----c9651008b6b8--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----c9651008b6b8--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----c9651008b6b8--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----c9651008b6b8--------------------------------", "anchor_text": ""}, {"url": "https://rizman.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://rizman.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Rizky Maulana Nurhidayat"}, {"url": "https://rizman.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "1.6K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4614e8d3f678&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizations-with-matplotlib-part-1-c9651008b6b8&user=Rizky+Maulana+Nurhidayat&userId=4614e8d3f678&source=post_page-4614e8d3f678--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F7562918b9a2d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizations-with-matplotlib-part-1-c9651008b6b8&newsletterV3=4614e8d3f678&newsletterV3Id=7562918b9a2d&user=Rizky+Maulana+Nurhidayat&userId=4614e8d3f678&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}