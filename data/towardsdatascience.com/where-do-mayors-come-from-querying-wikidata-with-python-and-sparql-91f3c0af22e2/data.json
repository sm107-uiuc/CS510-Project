{"url": "https://towardsdatascience.com/where-do-mayors-come-from-querying-wikidata-with-python-and-sparql-91f3c0af22e2", "time": 1682994073.884886, "path": "towardsdatascience.com/where-do-mayors-come-from-querying-wikidata-with-python-and-sparql-91f3c0af22e2/", "webpage": {"metadata": {"title": "Where do Mayors Come From?. Imagine you wanted to have a list of\u2026 | by Nikolai Janakiev | Towards Data Science", "h1": "Where do Mayors Come From?", "description": "Imagine you wanted to have a list of all sons of painters that were also painters or you wanted to know which mayor was born the furthest away. What would have otherwise taken a lot of tedious\u2026"}, "outgoing_paragraph_urls": [{"url": "https://janakiev.com/wikidata-mayors/", "anchor_text": "interactive visualization", "paragraph_index": 1}, {"url": "https://github.com/njanakiev/wikidata-mayors", "anchor_text": "repository", "paragraph_index": 1}, {"url": "https://www.wikidata.org/", "anchor_text": "Wikidata", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/Linked_data", "anchor_text": "Linked Open Data (LOD)", "paragraph_index": 2}, {"url": "https://foundation.wikimedia.org/wiki/Home", "anchor_text": "Wikimedia Foundation", "paragraph_index": 2}, {"url": "https://www.youtube.com/watch?v=OM6XIICm_qo", "anchor_text": "TED talk", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/Semantic_Web", "anchor_text": "Semantic Web", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/DBpedia", "anchor_text": "DBpedia", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/FOAF_(ontology)", "anchor_text": "Friend of a Friend (FOAF)", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/GeoNames", "anchor_text": "GeoNames", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/UMBEL", "anchor_text": "Upper Mapping and Binding Exchange Layer (UMBEL)", "paragraph_index": 2}, {"url": "https://creativecommons.org/publicdomain/zero/1.0/", "anchor_text": "CC0 1.0", "paragraph_index": 3}, {"url": "https://query.wikidata.org/", "anchor_text": "SPARQL endpoint", "paragraph_index": 3}, {"url": "https://www.wikidata.org/w/api.php", "anchor_text": "REST API", "paragraph_index": 3}, {"url": "https://www.wikidata.org/wiki/Help:Statements", "anchor_text": "statements", "paragraph_index": 4}, {"url": "https://www.wikidata.org/wiki/Help:Items", "anchor_text": "item", "paragraph_index": 4}, {"url": "https://www.wikidata.org/wiki/Help:Properties", "anchor_text": "property", "paragraph_index": 4}, {"url": "https://www.wikidata.org/wiki/Help:Qualifiers", "anchor_text": "qualifiers", "paragraph_index": 4}, {"url": "https://en.wikipedia.org/wiki/Resource_Description_Framework", "anchor_text": "RDF", "paragraph_index": 5}, {"url": "https://query.wikidata.org/#SELECT%20%3Fcountry%20%3FcountryLabel%20WHERE%20%7B%0A%20%20%3Fcountry%20wdt%3AP463%20wd%3AQ458.%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20%0A%20%20%20%20bd%3AserviceParam%20wikibase%3Alanguage%20%22%5BAUTO_LANGUAGE%5D%2Cen%22.%20%0A%20%20%7D%0A%7D", "anchor_text": "here", "paragraph_index": 6}, {"url": "https://query.wikidata.org/", "anchor_text": "https://query.wikidata.org/", "paragraph_index": 6}, {"url": "https://www.wikidata.org/wiki/Property:P463", "anchor_text": "member of (P463)", "paragraph_index": 7}, {"url": "https://www.wikidata.org/wiki/Q458", "anchor_text": "European Union (Q458)", "paragraph_index": 7}, {"url": "https://en.wikibooks.org/wiki/SPARQL/Prefixes", "anchor_text": "here", "paragraph_index": 7}, {"url": "https://en.wikipedia.org/wiki/Kingdom_of_the_Netherlands", "anchor_text": "Kingdom of the Netherlands", "paragraph_index": 9}, {"url": "https://www.wikidata.org/wiki/Q29999", "anchor_text": "Q29999", "paragraph_index": 9}, {"url": "https://en.wikipedia.org/wiki/Netherlands", "anchor_text": "Netherlands", "paragraph_index": 9}, {"url": "https://www.wikidata.org/wiki/Q55", "anchor_text": "Q55", "paragraph_index": 9}, {"url": "https://www.youtube.com/watch?v=WBcn-lzTJbk", "anchor_text": "video", "paragraph_index": 9}, {"url": "https://www.wikidata.org/wiki/Q183", "anchor_text": "Germany (Q183)", "paragraph_index": 10}, {"url": "https://www.wikidata.org/wiki/Property:P1082", "anchor_text": "population (P1082)", "paragraph_index": 10}, {"url": "https://www.wikidata.org/wiki/Property:P3529", "anchor_text": "median income (P3529)", "paragraph_index": 10}, {"url": "https://www.wikidata.org/wiki/Property:P18", "anchor_text": "image (P18)", "paragraph_index": 10}, {"url": "https://query.wikidata.org/#SELECT%20%0A%20%20%3Fcountry%20%3FcountryLabel%20%0A%20%20%3Fcapital%20%3FcapitalLabel%0A%20%20%3Fpopulation%20%3Farea%20%3FmedianIncome%0AWHERE%20%7B%0A%20%20%3Fcountry%20wdt%3AP463%20wd%3AQ458.%0A%20%20%3Fcountry%20wdt%3AP36%20%3Fcapital.%0A%20%20%3Fcountry%20wdt%3AP1082%20%3Fpopulation.%0A%20%20%3Fcountry%20wdt%3AP2046%20%3Farea.%0A%20%20%3Fcountry%20wdt%3AP3529%20%3FmedianIncome.%0A%20%20%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%22.%20%7D%0A%7D", "anchor_text": "here", "paragraph_index": 11}, {"url": "https://query.wikidata.org/#SELECT%20%0A%20%20%3Fcountry%20%3FcountryLabel%20%0A%20%20%3Fcapital%20%3FcapitalLabel%0A%20%20%3Fpopulation%20%3Farea%20%3FmedianIncome%0AWHERE%20%7B%0A%20%20%3Fcountry%20wdt%3AP463%20wd%3AQ458.%0A%20%20%3Fcountry%20wdt%3AP36%20%3Fcapital.%0A%20%20%20%20%0A%20%20OPTIONAL%20%7B%20%3Fcountry%20wdt%3AP1082%20%3Fpopulation%20%7D%0A%20%20OPTIONAL%20%7B%20%3Fcountry%20wdt%3AP2046%20%3Farea%20%7D%0A%20%20OPTIONAL%20%7B%20%3Fcountry%20wdt%3AP3529%20%3FmedianIncome%20%7D%0A%20%20%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%22.%20%7D%0A%7D", "anchor_text": "here", "paragraph_index": 13}, {"url": "https://query.wikidata.org/#SELECT%20DISTINCT%20%0A%20%20%3Fcountry%20%3FcountryLabel%20%3Fcapital%20%3FcapitalLabel%20%3Fpopulation%20%0A%20%20%3Fmayor%20%3FmayorLabel%20%3Fbirth_place%20%3Fbirth_placeLabel%20%3Fbirth_date%20%3Fage%0AWHERE%20%7B%0A%20%20%3Fcountry%20wdt%3AP463%20wd%3AQ458.%0A%20%20%3Fcountry%20wdt%3AP36%20%3Fcapital.%0A%20%20OPTIONAL%20%7B%20%3Fcapital%20wdt%3AP1082%20%3Fpopulation.%20%7D%0A%20%20%0A%20%20%3Fcapital%20p%3AP6%20%3Fstatement.%0A%20%20%3Fstatement%20ps%3AP6%20%3Fmayor.%0A%20%20FILTER%20NOT%20EXISTS%20%7B%20%3Fstatement%20pq%3AP582%20%3Fend_date%20%7D%0A%20%20%20%20%0A%20%20%3Fmayor%20wdt%3AP19%20%3Fbirth_place.%0A%20%20%3Fmayor%20wdt%3AP569%20%3Fbirth_date.%0A%20%20BIND%28year%28now%28%29%29%20-%20year%28%3Fbirth_date%29%20AS%20%3Fage%29%0A%20%20%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20%0A%20%20%20%20bd%3AserviceParam%20wikibase%3Alanguage%20%22%5BAUTO_LANGUAGE%5D%2Cen%22.%20%0A%20%20%7D%0A%7D", "anchor_text": "here", "paragraph_index": 15}, {"url": "https://www.wikidata.org/wiki/Property:P36", "anchor_text": "capital (P36)", "paragraph_index": 16}, {"url": "https://www.wikidata.org/wiki/Q220", "anchor_text": "Rome (Q220)", "paragraph_index": 18}, {"url": "https://www.wikidata.org/wiki/Property:P6", "anchor_text": "head of government (P6)", "paragraph_index": 18}, {"url": "https://www.wikidata.org/wiki/Property:P582", "anchor_text": "end time (P582)", "paragraph_index": 18}, {"url": "https://en.wikibooks.org/wiki/SPARQL/WIKIDATA_Qualifiers,_References_and_Ranks", "anchor_text": "SPARQL/WIKIDATA Qualifiers, References and Ranks", "paragraph_index": 19}, {"url": "http://docs.python-requests.org/en/master/", "anchor_text": "request", "paragraph_index": 20}, {"url": "https://query.wikidata.org/sparql", "anchor_text": "https://query.wikidata.org/sparql", "paragraph_index": 21}, {"url": "https://pandas.pydata.org/", "anchor_text": "Pandas", "paragraph_index": 21}, {"url": "https://www.wikidata.org/wiki/Property:P625", "anchor_text": "coordinate location (P625)", "paragraph_index": 25}, {"url": "https://en.wikibooks.org/wiki/SPARQL/WIKIDATA_Precision,_Units_and_Coordinates", "anchor_text": "Precision, Units and Coordinates", "paragraph_index": 25}, {"url": "https://geopy.readthedocs.io/en/stable/", "anchor_text": "geopy", "paragraph_index": 28}, {"url": "https://janakiev.com/blog/gps-points-distance-python/", "anchor_text": "tutorial", "paragraph_index": 28}, {"url": "https://github.com/njanakiev/wikidata-mayors/blob/master/load_european_mayors.py", "anchor_text": "script", "paragraph_index": 30}, {"url": "https://janakiev.com/wikidata-mayors/", "anchor_text": "here", "paragraph_index": 30}, {"url": "https://github.com/njanakiev/wikidata-mayors", "anchor_text": "repository", "paragraph_index": 30}, {"url": "https://github.com/njanakiev", "anchor_text": "Github", "paragraph_index": 32}, {"url": "https://twitter.com/njanakiev", "anchor_text": "Twitter", "paragraph_index": 32}, {"url": "https://at.linkedin.com/in/nikolai-janakiev", "anchor_text": "LinkedIn", "paragraph_index": 32}, {"url": "https://janakiev.com/about/", "anchor_text": "homepage", "paragraph_index": 32}, {"url": "http://delivery.acm.org/10.1145/2630000/2629489/p78-vrandecic.pdf?ip=188.23.116.132&id=2629489&acc=OA&key=4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35%2EB8CD93A2515AABD1&__acm__=1533116941_da1ef0b41c8a6ea97e62187e7e72de90", "anchor_text": "Wikidata: a free collaborative knowledge base.", "paragraph_index": 33}, {"url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial", "anchor_text": "SPARQL tutorial", "paragraph_index": 33}, {"url": "https://www.wikidata.org/wiki/Wikidata:Tours", "anchor_text": "Wikidata Tours", "paragraph_index": 33}, {"url": "https://dumps.wikimedia.org/wikidatawiki/entities/", "anchor_text": "Wikidata dumps", "paragraph_index": 33}, {"url": "https://www.mediawiki.org/wiki/Wikibase/DataModel", "anchor_text": "Wikibase data model", "paragraph_index": 33}, {"url": "https://www.wikidata.org/wiki/Wikidata:Tools/For_programmers", "anchor_text": "Tools for programmers", "paragraph_index": 33}, {"url": "http://janakiev.com/", "anchor_text": "http://janakiev.com/", "paragraph_index": 36}], "all_paragraphs": ["Imagine you wanted to have a list of all sons of painters that were also painters or you wanted to know which mayor was born the furthest away. What would have otherwise taken a lot of tedious research is now possible within a simple query on Wikidata with SPARQL. In this article, you will see how to build queries for Wikidata with Python and SPARQL by taking a look where mayors in Europe are born.", "All the code for this article and the interactive visualization can be found in this repository.", "Wikidata is a free and collaborative Linked Open Data (LOD) knowledge base which can be edited by humans and machines. The project started 2012 by the Wikimedia Foundation as an effort to centralize interwiki links, info-boxes and enable rich queries. Its ambitious goal is to structure the whole human knowledge in a way that is machine readable and it speaks well to the vision of Tim Berners-Lee in his TED talk of 2009. Surprisingly, the idea of the Semantic Web existed already in 2001 which was comprised of Linked Data. There have been many projects preceding Wikidata. There is DBpedia which is based on the info-boxes in Wikipedia, Friend of a Friend (FOAF) which is an ontology to describe relationships in social networks, GeoNames which provides a database with geographical names, Upper Mapping and Binding Exchange Layer (UMBEL) which is a knowledge graph of concepts and entities and a whole set of others, but Wikidata seems to be the most ambitious project between them.", "It works in a similar way to Wikipedia and it is build on the work of contributors. All of the data there is free (under the CC0 1.0 aka public domain) while anyone can edit and contribute to it. On most (if not all) Wikipedia pages, there is a Wikidata Item link to its corresponding item in Wikidata, where you can find the linked information listed. Note that you can still find holes, but as it is a community effort, this is growing and becoming better over time with every contribution. To access the structured data you can query Wikidata by using its SPARQL endpoint which enables you to run advanced queries, or by using its REST API.", "But you might ask, what are those Wikidata items? In this diagram, you can see the structure of a Wikidata item. Each of them has a list of statements, which are triples in the form SUBJECT - PREDICATE - OBJECT (e.g. Douglas Adams is educated at the St John\u2019s College). In Wikidata the subject is referred to an item and the predicate is referred to as property. Each property has a value, which can be again an item, text, number, date, or GPS coordinates among others. Each value can have additional qualifiers which have additional information with other property-value pairs such as start time. This structure will be important when you start to express queries with SPARQL.", "SPARQL? Is this yet another SQL derivative? Since you are dealing with linked data and not your usual relational data you need a different way to query the database (also called triplestore), but it is fairly similar and fairly straight forward to use. SPARQL is a query language used to retrieve data stored as RDF (Resource Description Framework) and it is standardized by the W3C. It is a powerful language to query Linked data and has been chosen for Wikidata. The syntax is similar to SQL, but it has some differences for people trained in SQL. One key difference is that in SQL you tend to avoid JOIN clauses as they can slow down queries, but in SPARQL the queries mostly consist of joins. But hang in there and let\u2019s take a look at such a query. In this example, we want to list all countries in the European Union:", "You can try this query yourself here. Note that you can test and play with each query at https://query.wikidata.org/. The editor there offers a handful of useful features. If you hover over the properties and items in the editor you will get information about them and the editor additionally offers auto-completion. You will also find a list of examples which are quite handy when starting fresh. OK, moving on.", "Starting with the SELECT clause, you define the variables you want to get (variables are prefixed with a question mark). Inside the WHERE clause, you set restrictions which mostly take the form of the triples you have seen previously. The statement ?country wdt:P463 wd:Q458. collects all items which have the property member of (P463) with object European Union (Q458) into the variable country. As you can see, the statements read like a sentence (country is a member of the European Union). You also notice that there are the prefixes wd: and wdt: which are considered shortcut abbreviations in SPARQL (you can find a list of the built in prefixes here). These denote items with wd: and properties with wdt:. We will cover more complicated prefixes later on in this tutorial when you will get deeper into the SPARQL data representation.", "Finally, you will see a confusing part SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } within the query. This snippet is responsible for retrieving labels for the collected items into an additional variable with Label postfix in the specified language (in this case English). In this query, this would be the countryLabel variable storing the label for the country variable. Note that the label is only retrieved for items that have a label in the particular language selected (in this case \"en\" for English), as there might be items that are not translated into this particular language.", "Interesting side-note: When running the query you will notice Kingdom of the Netherlands with Wikidata item Q29999 in the list of European countries. Surprisingly, Netherlands (Q55) is a constituent country of the Kingdom of the Netherlands, but it is not a country. It is similar to how England is part of the United Kingdom. This video does a great job explaining the situation if you were puzzled.", "Let\u2019s now explore other properties of the countries we have selected. If you take a look at Germany (Q183), then you can see a whole host of properties like population (P1082), median income (P3529) or even images with the image (P18) property. SPARQL enables us to retrieve those too which leads us to the next query:", "You can try this query here.", "Remember that we said SPARQL consists mostly of joins? Her you can see that each statement is such a join adding more links. After trying this query you will notice that the list of countries became shorter. The reason for this is that each country item that has no population, area or median income as a property is ignored by the query. You can imagine those triples also as a filter constraining the triples that only match this query. We can add the OPTIONAL clause which will leave those variables empty if the query cannot find triples within this clause:", "You can try this query here. Now you see in the table that you will find all countries again with more additional information:", "We continue our journey with a more complicated query which we will unpack step by step. Our goal is now to get for all countries, the capital, the population, the mayor, his birthday and finally his birthplace. The resulting query looks like this:", "You can try this query here.", "Let\u2019s unpack what is happening here. First, you start by getting the capital of the country which you simply get via the capital (P36) property. Next, you get to a more complicated part. To understand how to get to the mayor you have to look at the SPARQL Data Representation in this diagram:", "This does look confusing, but don\u2019t give up just yet. You just need to focus on the data that you need. This graph of the data representation shows the ways you can traverse it to get to various pieces of information with SPARQL starting from an item (in the graph shown as wd:Q1234). You can see on the left the classical path we took in our previous triples by using the wdt: prefix which leads to the value which can be another item, a numeric value (e.g. the population as in one of the previous queries) or various other data types.", "If you take a look at an item like Rome (Q220), you will notice that there are various statements for the head of government (P6). You want to get the one which has no end date. You can do this by traversing to the statement node with the p: prefix and storing it in the statement variable. From this variable, you can get the mayor with the ps: prefix. You could have done that with wdt: as you already have learned but you want to go one step further. You want to get to end time (P582) which is stored as a qualifier in the statement. You can traverse to the qualifier with the pq: prefix which would give us the end date, but you want mayors without an end date. This can be done by using the FILTER NOT EXISTS clause which excludes all triples with statement node that have an end date.", "In the final part, you collect the birthplace, the birth date and the age of the mayor. In order to calculate his age, you can use the BIND expression. This expression can be used to bind some expression to a variable (in our case the age variable). For this expression, we subtract the year of the birth date with the current year. This concludes this query. You can dig deeper in SPARQL/WIKIDATA Qualifiers, References and Ranks which describes the data representation in further detail. Make sure to play a bit around with this query to get a better sense of it, since it did cover a wide variety of topics.", "You have seen how to work with SPARQL and you can also download the resulting tables in the editor, but how do you automate the whole process? You can access the Wikidata SPARQL endpoint also with Python, which enables you to directly load and analyze the data you have queried. To do this, you will employ the wonderful request module which does a great job at doing HTTP requests with all its necessary tooling. You can create the request by adding the query as a parameter as follows.", "You have packed the query in the query variable and you need to additionally supply requests with the SPARQL endpoint URL which is https://query.wikidata.org/sparql. By default this would return an XML, but if you want to use JSON as an output file, you can add this also to your request. The API supports besides XML and JSON also TSV, CSV and Binary RDF. This request returns a JSON with all the rows collected from the query, which you can use to collect the rows into a Pandas DataFrame with this snippet:", "Let\u2019s explore the collected data visually and compare the various properties for each country:", "Great! Now let\u2019s continue to the more advanced queries.", "In our final query, you will see where mayors are born by adding the coordinates to the query. In order to get the latitude and longitude coordinates as variables, you need to add the following statements:", "In the first line, you traverse the graph of the previously shown data representation. The slash in p:P625/psv:P625 means that you continue to the Value node of the coordinate location (P625) without using a separate variable for the Statement node. Then, wikibase:geoLatitude and wikibase:geoLongitude are responsible for retrieving the latitude and longitude from the Value node respectively. For more information, take a look at the documentation for Precision, Units and Coordinates. You start again with the query which you send to the SPARQL endpoint with the requests library:", "Now, you need convert the resulting JSON data to a Pandas DataFrame to work with the data further:", "With this dataset you can now explore the age of the mayors and the population of the capital they are serving:", "So the oldest mayor of a European capital seems to be housing in Madrid. Next, let\u2019s take a look at how far away mayors are born from the capital. For this, you can use the geopy package to calculate the distance between the coordinates. This tutorial covers this topic if you are curious why we can\u2019t just use euclidean distance on GPS coordinates (spoiler: the earth is not flat). To calculate the distance you can use the distance() function and the meters (.m) attribute from the distance:", "Here you can see that most mayors tend to be mostly born in or close to the city where they later serve (note, that the chart is in log-scale). You can see that Athens leads the exceptions with their current mayor (Giorgos Kaminis) born in New York, USA and Paris with their current mayor (Anne Hidalgo) born in San Fernando, Spain. From there the distances drop significantly.", "To get a list of all mayors in Europe in Wikidata, take a look at this script, which is more involved as it has to deal with some exceptions (like mayors born in countries that do not exist anymore) and the queries need to be done for each country separately because there is a limit on the queries. The final interactive visualization can be found here and the complete code including this notebook can be found in this repository.", "You have learned how to work with Wikidata and SPARQL and also how to integrate it with Python and Pandas. Wikidata is a great database that enables queries and discoveries that would not be possible with ordinary searches on your favorite search engine. This opens up exciting new possibilities to do data science and exploratory data analysis and a fascinating new way to learn about relationships and curious findings in our accumulated human knowledge.", "Thanks for reading! If you generally have some feedback or want to collaborate, feel free to contact me. You can find me on Github, Twitter, LinkedIn or you can find my email on my homepage.", "A good read covering the history and an overview of Wikidata can be found in the article Wikidata: a free collaborative knowledge base. by Vrande\u010di\u0107, D., & Kr\u00f6tzsch, M. (2014). There is a great SPARQL tutorial covering many of the things mentioned here and goes into much more depth into understanding SPARQL. If you are excited about Wikidata and want to contribute, there are Wikidata Tours that can guide you through the process. If you plan on doing large queries, make sure to take a look at the publicly downloadable Wikidata dumps which are regularly updated dumps of the whole Wikidata data set and here is a documentation on the Wikibase data model. Wikidata provides also a list of Tools for programmers.", "Here is an unstructured list of resources that contain useful documentation, tutorials or examples that use Wikidata.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "I write about all things data // data science / data engineering / data visualization / GIS // http://janakiev.com/"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F91f3c0af22e2&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhere-do-mayors-come-from-querying-wikidata-with-python-and-sparql-91f3c0af22e2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhere-do-mayors-come-from-querying-wikidata-with-python-and-sparql-91f3c0af22e2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhere-do-mayors-come-from-querying-wikidata-with-python-and-sparql-91f3c0af22e2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhere-do-mayors-come-from-querying-wikidata-with-python-and-sparql-91f3c0af22e2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----91f3c0af22e2--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----91f3c0af22e2--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@njanakiev?source=post_page-----91f3c0af22e2--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@njanakiev?source=post_page-----91f3c0af22e2--------------------------------", "anchor_text": "Nikolai Janakiev"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Feb95fc687c6a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhere-do-mayors-come-from-querying-wikidata-with-python-and-sparql-91f3c0af22e2&user=Nikolai+Janakiev&userId=eb95fc687c6a&source=post_page-eb95fc687c6a----91f3c0af22e2---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F91f3c0af22e2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhere-do-mayors-come-from-querying-wikidata-with-python-and-sparql-91f3c0af22e2&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F91f3c0af22e2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhere-do-mayors-come-from-querying-wikidata-with-python-and-sparql-91f3c0af22e2&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://janakiev.com/wikidata-mayors/", "anchor_text": "interactive visualization"}, {"url": "https://github.com/njanakiev/wikidata-mayors", "anchor_text": "repository"}, {"url": "https://janakiev.com/wikidata-mayors/", "anchor_text": "Where do Mayors Come From?"}, {"url": "https://www.wikidata.org/", "anchor_text": "Wikidata"}, {"url": "https://en.wikipedia.org/wiki/Linked_data", "anchor_text": "Linked Open Data (LOD)"}, {"url": "https://foundation.wikimedia.org/wiki/Home", "anchor_text": "Wikimedia Foundation"}, {"url": "https://www.youtube.com/watch?v=OM6XIICm_qo", "anchor_text": "TED talk"}, {"url": "https://en.wikipedia.org/wiki/Semantic_Web", "anchor_text": "Semantic Web"}, {"url": "https://en.wikipedia.org/wiki/DBpedia", "anchor_text": "DBpedia"}, {"url": "https://en.wikipedia.org/wiki/FOAF_(ontology)", "anchor_text": "Friend of a Friend (FOAF)"}, {"url": "https://en.wikipedia.org/wiki/GeoNames", "anchor_text": "GeoNames"}, {"url": "https://en.wikipedia.org/wiki/UMBEL", "anchor_text": "Upper Mapping and Binding Exchange Layer (UMBEL)"}, {"url": "https://creativecommons.org/publicdomain/zero/1.0/", "anchor_text": "CC0 1.0"}, {"url": "https://query.wikidata.org/", "anchor_text": "SPARQL endpoint"}, {"url": "https://www.wikidata.org/w/api.php", "anchor_text": "REST API"}, {"url": "https://www.wikidata.org/wiki/Help:Statements", "anchor_text": "statements"}, {"url": "https://www.wikidata.org/wiki/Help:Items", "anchor_text": "item"}, {"url": "https://www.wikidata.org/wiki/Help:Properties", "anchor_text": "property"}, {"url": "https://www.wikidata.org/wiki/Help:Qualifiers", "anchor_text": "qualifiers"}, {"url": "https://en.wikibooks.org/wiki/SPARQL/WIKIDATA_Qualifiers,_References_and_Ranks", "anchor_text": "SPARQL/WIKIDATA Qualifiers, References and Ranks"}, {"url": "https://en.wikipedia.org/wiki/Resource_Description_Framework", "anchor_text": "RDF"}, {"url": "https://query.wikidata.org/#SELECT%20%3Fcountry%20%3FcountryLabel%20WHERE%20%7B%0A%20%20%3Fcountry%20wdt%3AP463%20wd%3AQ458.%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20%0A%20%20%20%20bd%3AserviceParam%20wikibase%3Alanguage%20%22%5BAUTO_LANGUAGE%5D%2Cen%22.%20%0A%20%20%7D%0A%7D", "anchor_text": "here"}, {"url": "https://query.wikidata.org/", "anchor_text": "https://query.wikidata.org/"}, {"url": "https://www.wikidata.org/wiki/Property:P463", "anchor_text": "member of (P463)"}, {"url": "https://www.wikidata.org/wiki/Q458", "anchor_text": "European Union (Q458)"}, {"url": "https://en.wikibooks.org/wiki/SPARQL/Prefixes", "anchor_text": "here"}, {"url": "https://en.wikipedia.org/wiki/Kingdom_of_the_Netherlands", "anchor_text": "Kingdom of the Netherlands"}, {"url": "https://www.wikidata.org/wiki/Q29999", "anchor_text": "Q29999"}, {"url": "https://en.wikipedia.org/wiki/Netherlands", "anchor_text": "Netherlands"}, {"url": "https://www.wikidata.org/wiki/Q55", "anchor_text": "Q55"}, {"url": "https://www.youtube.com/watch?v=WBcn-lzTJbk", "anchor_text": "video"}, {"url": "https://www.wikidata.org/wiki/Q183", "anchor_text": "Germany (Q183)"}, {"url": "https://www.wikidata.org/wiki/Property:P1082", "anchor_text": "population (P1082)"}, {"url": "https://www.wikidata.org/wiki/Property:P3529", "anchor_text": "median income (P3529)"}, {"url": "https://www.wikidata.org/wiki/Property:P18", "anchor_text": "image (P18)"}, {"url": "https://query.wikidata.org/#SELECT%20%0A%20%20%3Fcountry%20%3FcountryLabel%20%0A%20%20%3Fcapital%20%3FcapitalLabel%0A%20%20%3Fpopulation%20%3Farea%20%3FmedianIncome%0AWHERE%20%7B%0A%20%20%3Fcountry%20wdt%3AP463%20wd%3AQ458.%0A%20%20%3Fcountry%20wdt%3AP36%20%3Fcapital.%0A%20%20%3Fcountry%20wdt%3AP1082%20%3Fpopulation.%0A%20%20%3Fcountry%20wdt%3AP2046%20%3Farea.%0A%20%20%3Fcountry%20wdt%3AP3529%20%3FmedianIncome.%0A%20%20%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%22.%20%7D%0A%7D", "anchor_text": "here"}, {"url": "https://query.wikidata.org/#SELECT%20%0A%20%20%3Fcountry%20%3FcountryLabel%20%0A%20%20%3Fcapital%20%3FcapitalLabel%0A%20%20%3Fpopulation%20%3Farea%20%3FmedianIncome%0AWHERE%20%7B%0A%20%20%3Fcountry%20wdt%3AP463%20wd%3AQ458.%0A%20%20%3Fcountry%20wdt%3AP36%20%3Fcapital.%0A%20%20%20%20%0A%20%20OPTIONAL%20%7B%20%3Fcountry%20wdt%3AP1082%20%3Fpopulation%20%7D%0A%20%20OPTIONAL%20%7B%20%3Fcountry%20wdt%3AP2046%20%3Farea%20%7D%0A%20%20OPTIONAL%20%7B%20%3Fcountry%20wdt%3AP3529%20%3FmedianIncome%20%7D%0A%20%20%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%22.%20%7D%0A%7D", "anchor_text": "here"}, {"url": "https://query.wikidata.org/#SELECT%20DISTINCT%20%0A%20%20%3Fcountry%20%3FcountryLabel%20%3Fcapital%20%3FcapitalLabel%20%3Fpopulation%20%0A%20%20%3Fmayor%20%3FmayorLabel%20%3Fbirth_place%20%3Fbirth_placeLabel%20%3Fbirth_date%20%3Fage%0AWHERE%20%7B%0A%20%20%3Fcountry%20wdt%3AP463%20wd%3AQ458.%0A%20%20%3Fcountry%20wdt%3AP36%20%3Fcapital.%0A%20%20OPTIONAL%20%7B%20%3Fcapital%20wdt%3AP1082%20%3Fpopulation.%20%7D%0A%20%20%0A%20%20%3Fcapital%20p%3AP6%20%3Fstatement.%0A%20%20%3Fstatement%20ps%3AP6%20%3Fmayor.%0A%20%20FILTER%20NOT%20EXISTS%20%7B%20%3Fstatement%20pq%3AP582%20%3Fend_date%20%7D%0A%20%20%20%20%0A%20%20%3Fmayor%20wdt%3AP19%20%3Fbirth_place.%0A%20%20%3Fmayor%20wdt%3AP569%20%3Fbirth_date.%0A%20%20BIND%28year%28now%28%29%29%20-%20year%28%3Fbirth_date%29%20AS%20%3Fage%29%0A%20%20%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20%0A%20%20%20%20bd%3AserviceParam%20wikibase%3Alanguage%20%22%5BAUTO_LANGUAGE%5D%2Cen%22.%20%0A%20%20%7D%0A%7D", "anchor_text": "here"}, {"url": "https://www.wikidata.org/wiki/Property:P36", "anchor_text": "capital (P36)"}, {"url": "https://en.wikibooks.org/wiki/SPARQL/WIKIDATA_Qualifiers,_References_and_Ranks", "anchor_text": "SPARQL/WIKIDATA Qualifiers, References and Ranks"}, {"url": "https://www.wikidata.org/wiki/Q220", "anchor_text": "Rome (Q220)"}, {"url": "https://www.wikidata.org/wiki/Property:P6", "anchor_text": "head of government (P6)"}, {"url": "https://www.wikidata.org/wiki/Property:P582", "anchor_text": "end time (P582)"}, {"url": "https://en.wikibooks.org/wiki/SPARQL/WIKIDATA_Qualifiers,_References_and_Ranks", "anchor_text": "SPARQL/WIKIDATA Qualifiers, References and Ranks"}, {"url": "http://docs.python-requests.org/en/master/", "anchor_text": "request"}, {"url": "https://query.wikidata.org/sparql", "anchor_text": "https://query.wikidata.org/sparql"}, {"url": "https://pandas.pydata.org/", "anchor_text": "Pandas"}, {"url": "https://www.wikidata.org/wiki/Property:P625", "anchor_text": "coordinate location (P625)"}, {"url": "https://en.wikibooks.org/wiki/SPARQL/WIKIDATA_Precision,_Units_and_Coordinates", "anchor_text": "Precision, Units and Coordinates"}, {"url": "https://geopy.readthedocs.io/en/stable/", "anchor_text": "geopy"}, {"url": "https://janakiev.com/blog/gps-points-distance-python/", "anchor_text": "tutorial"}, {"url": "https://github.com/njanakiev/wikidata-mayors/blob/master/load_european_mayors.py", "anchor_text": "script"}, {"url": "https://janakiev.com/wikidata-mayors/", "anchor_text": "here"}, {"url": "https://github.com/njanakiev/wikidata-mayors", "anchor_text": "repository"}, {"url": "https://github.com/njanakiev", "anchor_text": "Github"}, {"url": "https://twitter.com/njanakiev", "anchor_text": "Twitter"}, {"url": "https://at.linkedin.com/in/nikolai-janakiev", "anchor_text": "LinkedIn"}, {"url": "https://janakiev.com/about/", "anchor_text": "homepage"}, {"url": "http://delivery.acm.org/10.1145/2630000/2629489/p78-vrandecic.pdf?ip=188.23.116.132&id=2629489&acc=OA&key=4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35%2EB8CD93A2515AABD1&__acm__=1533116941_da1ef0b41c8a6ea97e62187e7e72de90", "anchor_text": "Wikidata: a free collaborative knowledge base."}, {"url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial", "anchor_text": "SPARQL tutorial"}, {"url": "https://www.wikidata.org/wiki/Wikidata:Tours", "anchor_text": "Wikidata Tours"}, {"url": "https://dumps.wikimedia.org/wikidatawiki/entities/", "anchor_text": "Wikidata dumps"}, {"url": "https://www.mediawiki.org/wiki/Wikibase/DataModel", "anchor_text": "Wikibase data model"}, {"url": "https://www.wikidata.org/wiki/Wikidata:Tools/For_programmers", "anchor_text": "Tools for programmers"}, {"url": "https://tools.wmflabs.org/wikidata-exports/rdf/", "anchor_text": "RDF Exports from Wikidata"}, {"url": "https://www.wikidata.org/wiki/Wikidata:List_of_properties", "anchor_text": "Wikidata:List of properties"}, {"url": "https://www.wikidata.org/wiki/Wikidata:Database_reports", "anchor_text": "Wikidata:Database reports"}, {"url": "https://www.wikidata.org/wiki/Wikidata:Database_reports/List_of_properties/Top100", "anchor_text": "Wikidata:Database reports/List of properties/Top100"}, {"url": "https://www.wikidata.org/wiki/Wikidata:Introduction", "anchor_text": "Wikidata:Introduction"}, {"url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries", "anchor_text": "Wikidata:SPARQL queries"}, {"url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples", "anchor_text": "Wikidata:SPARQL queries examples"}, {"url": "https://www.wikidata.org/wiki/Wikidata:Creating_a_bot", "anchor_text": "Wikidata:Creating a bot"}, {"url": "https://noniq.at/0016/wikidata-sparql-introduction/", "anchor_text": "Querying Wikidata About Vienna\u2019s Tram Lines: An Introduction to SPARQL"}, {"url": "http://ramiro.org/notebook/us-presidents-causes-of-death/", "anchor_text": "How US Presidents Died According to Wikidata"}, {"url": "https://de.slideshare.net/_Emw/an-ambitious-wikidata-tutorial", "anchor_text": "An Ambitious Wikidata Tutorial \u2014 SlideShare"}, {"url": "https://angryloki.github.io/wikidata-graph-builder/", "anchor_text": "Wikidata Graph Builder"}, {"url": "http://histropedia.com", "anchor_text": "Histropedia"}, {"url": "https://medium.com/tag/semanticweb?source=post_page-----91f3c0af22e2---------------semanticweb-----------------", "anchor_text": "Semanticweb"}, {"url": "https://medium.com/tag/data-science?source=post_page-----91f3c0af22e2---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/wikidata?source=post_page-----91f3c0af22e2---------------wikidata-----------------", "anchor_text": "Wikidata"}, {"url": "https://medium.com/tag/sparql?source=post_page-----91f3c0af22e2---------------sparql-----------------", "anchor_text": "Sparql"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F91f3c0af22e2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhere-do-mayors-come-from-querying-wikidata-with-python-and-sparql-91f3c0af22e2&user=Nikolai+Janakiev&userId=eb95fc687c6a&source=-----91f3c0af22e2---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F91f3c0af22e2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhere-do-mayors-come-from-querying-wikidata-with-python-and-sparql-91f3c0af22e2&user=Nikolai+Janakiev&userId=eb95fc687c6a&source=-----91f3c0af22e2---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F91f3c0af22e2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhere-do-mayors-come-from-querying-wikidata-with-python-and-sparql-91f3c0af22e2&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----91f3c0af22e2--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F91f3c0af22e2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhere-do-mayors-come-from-querying-wikidata-with-python-and-sparql-91f3c0af22e2&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----91f3c0af22e2---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----91f3c0af22e2--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----91f3c0af22e2--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----91f3c0af22e2--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----91f3c0af22e2--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----91f3c0af22e2--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----91f3c0af22e2--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----91f3c0af22e2--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----91f3c0af22e2--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@njanakiev?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@njanakiev?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Nikolai Janakiev"}, {"url": "https://medium.com/@njanakiev/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "387 Followers"}, {"url": "http://janakiev.com/", "anchor_text": "http://janakiev.com/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Feb95fc687c6a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhere-do-mayors-come-from-querying-wikidata-with-python-and-sparql-91f3c0af22e2&user=Nikolai+Janakiev&userId=eb95fc687c6a&source=post_page-eb95fc687c6a--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F7f0d9728bcd1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhere-do-mayors-come-from-querying-wikidata-with-python-and-sparql-91f3c0af22e2&newsletterV3=eb95fc687c6a&newsletterV3Id=7f0d9728bcd1&user=Nikolai+Janakiev&userId=eb95fc687c6a&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}