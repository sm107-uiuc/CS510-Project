{"url": "https://towardsdatascience.com/data-structures-2-skip-lists-d36b58191d69", "time": 1683011564.6144829, "path": "towardsdatascience.com/data-structures-2-skip-lists-d36b58191d69/", "webpage": {"metadata": {"title": "Data Structures 2: Skip Lists. A probabilistic alternative to balanced\u2026 | by Gunavaran Brihadiswaran | Towards Data Science", "h1": "Data Structures 2: Skip Lists", "description": "Binary trees can be used to represent abstract data types such as dictionaries and ordered lists. However, when we insert elements in order, there is a high tendency that we end up with a degenerate\u2026"}, "outgoing_paragraph_urls": [], "all_paragraphs": ["Binary trees can be used to represent abstract data types such as dictionaries and ordered lists. However, when we insert elements in order, there is a high tendency that we end up with a degenerate data structure that performs poorly (eg. inserting 2,3,4,5,6,7,8 in order to a binary tree). That\u2019s why we often use balanced tree structures that rearrange the tree structure as operations are carried out. Skip lists can be used as alternatives to balanced trees (they might even perform well depending on the constraints). Since they are not as popular as balanced tree structures, I thought writing this article as the second one in my Data Structure series might be useful.", "Linked List is a very familiar data structure which is simple and easy to implement. The following diagram illustrates a sorted singly linked list where each node contains a pointer to its right neighbor.", "Sorted Linked List Operations and Time Complexity", "The common operations we look for are Search, Insert, and Delete. Let\u2019s have a look at the pseudocodes.", "Search (list, searchKey) //find the searchKey through linear search Insert (node, newNode) //insert newNode as the right neighbor of node newnode.next \u2190 node.next node.next \u2190 newNode Delete (node) //delete the right neighbor of node obsoleteNode \u2190 node.next node.next \u2190 node.next.next free(obsoleteNode)", "where n is the length of the linked list (or number of nodes in the linked list)", "The Skip Lists provide the solution to these drawbacks.", "Let\u2019s do some modifications to our linked list. In our original linked list, each node has a pointer only to its right neighbor. For every other node, let us add a pointer to the node which is two ahead. The following diagram would give a better idea.", "For a linked list, we have to traverse through n nodes during a search operation (in the worst-case scenario). Now, after our modification, we only need to traverse through n/2 + 1 nodes. For example, if we have to search for the value 80,", "We start at the header, at the highest level. It points to the node with value 10. 80 is greater than 10, so we move to the node with value 10. It points to 28 which is again less than 80. We continue in this way until we reach 70. It points to the node with value 90. As 90 is greater than 80, we go one level below. Now the pointer points to 80. Mission Accomplished!!! We traversed through only 4 nodes instead of 7 (which would be the case for a typical linked list).", "Let us go one step further and add a pointer to every fourth node which points to the node which is four ahead. The following diagram demonstrates the new structure.", "How about the search now? We need to traverse only through n/4 + 2 nodes. If we search for 80,", "We can continue to do so in such a way that every (2\u02e3)th node has a pointer 2\u02e3 nodes ahead. We can easily observe some significant features in our new data structure, which we haven\u2019t named yet.", "Now we can search in time O(log n), even in the worst-case scenario, which is a significant improvement compared to a linked list. This is what we call a Perfect Skip List (finally we have given a name to our new data structure \ud83d\ude0a). Even though search performance is good, insertion and deletion are difficult now because it is very difficult to maintain this pattern as new nodes can be inserted anywhere or any existing node might get deleted. After every insertion/deletion, we cannot restructure the entire list. How do we handle it? Through randomization.", "Let us relax our constraints a little bit. Earlier we said, each level should have half the number of elements as the level below it. Now let us expect each level to have half the number of elements as the level below it.", "Let\u2019s suppose that I have a coin. When I insert a new node, I would toss my coin (any number of times) until I get a tail. The number of consecutive heads I obtained would decide how many levels I should add to that particular node.", "The following diagram clearly illustrates how to insert 35 to the list.", "Step 1: Insert 35 and create a pointer to the right neighbor.Step 2: Toss the coin. Step 3: As it is a HEADS, add one level, and connect it to the closest node in the right with at least 2 levels. Connect the closest node in the left side with at least 2 levelsStep 4: Toss the coin again.Step 5: As it is a TAILS, terminate.", "Suppose if we had obtained another HEADS before getting the TAILS, then our current node would have three levels while header and NIL would have only 2 levels. In such a case, we should add additional levels to the header and NIL nodes as well. The header and NIL nodes should always have the same number of levels as the node with the maximum number of levels.", "I believe that the diagram itself explains everything.", "The search operation is done in the exact same way as in the perfect skip list.", "The coin toss event is the one that introduces randomization. Since the probability of getting HEADS is 0.5, we are trying to recreate a randomized skip list which is similar to our perfect skip list, where each level has only half the number of elements compared to the level below.", "What would happen to the time and memory consumption as well as the skip list structure if we use a different probabilistic function is an interesting topic.", "[You can read more on this topic from the resource provided at the bottom]", "It is also important to note that, we are sacrificing memory to improve performance. Adding additional levels means adding more pointers (each pointer consumes 8 bytes on a 64-bit system).", "One last important question. Why do we call it a skip list? Because we are skipping nodes during traversal (if you haven\u2019t figured it out by now \ud83d\ude02)", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "A Computer Science Research Student who loves to do Research, Write and Travel"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fd36b58191d69&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-2-skip-lists-d36b58191d69&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-2-skip-lists-d36b58191d69&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-2-skip-lists-d36b58191d69&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-2-skip-lists-d36b58191d69&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----d36b58191d69--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----d36b58191d69--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://gunavaran.medium.com/?source=post_page-----d36b58191d69--------------------------------", "anchor_text": ""}, {"url": "https://gunavaran.medium.com/?source=post_page-----d36b58191d69--------------------------------", "anchor_text": "Gunavaran Brihadiswaran"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb3d9fe6d7e11&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-2-skip-lists-d36b58191d69&user=Gunavaran+Brihadiswaran&userId=b3d9fe6d7e11&source=post_page-b3d9fe6d7e11----d36b58191d69---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd36b58191d69&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-2-skip-lists-d36b58191d69&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd36b58191d69&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-2-skip-lists-d36b58191d69&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://medium.com/tag/programming?source=post_page-----d36b58191d69---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/computer-science?source=post_page-----d36b58191d69---------------computer_science-----------------", "anchor_text": "Computer Science"}, {"url": "https://medium.com/tag/skip-list?source=post_page-----d36b58191d69---------------skip_list-----------------", "anchor_text": "Skip List"}, {"url": "https://medium.com/tag/data-structures?source=post_page-----d36b58191d69---------------data_structures-----------------", "anchor_text": "Data Structures"}, {"url": "https://medium.com/tag/algorithms?source=post_page-----d36b58191d69---------------algorithms-----------------", "anchor_text": "Algorithms"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd36b58191d69&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-2-skip-lists-d36b58191d69&user=Gunavaran+Brihadiswaran&userId=b3d9fe6d7e11&source=-----d36b58191d69---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd36b58191d69&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-2-skip-lists-d36b58191d69&user=Gunavaran+Brihadiswaran&userId=b3d9fe6d7e11&source=-----d36b58191d69---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd36b58191d69&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-2-skip-lists-d36b58191d69&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----d36b58191d69--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fd36b58191d69&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-2-skip-lists-d36b58191d69&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----d36b58191d69---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----d36b58191d69--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----d36b58191d69--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----d36b58191d69--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----d36b58191d69--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----d36b58191d69--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----d36b58191d69--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----d36b58191d69--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----d36b58191d69--------------------------------", "anchor_text": ""}, {"url": "https://gunavaran.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://gunavaran.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Gunavaran Brihadiswaran"}, {"url": "https://gunavaran.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "135 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb3d9fe6d7e11&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-2-skip-lists-d36b58191d69&user=Gunavaran+Brihadiswaran&userId=b3d9fe6d7e11&source=post_page-b3d9fe6d7e11--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F2718a94533dd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-2-skip-lists-d36b58191d69&newsletterV3=b3d9fe6d7e11&newsletterV3Id=2718a94533dd&user=Gunavaran+Brihadiswaran&userId=b3d9fe6d7e11&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}