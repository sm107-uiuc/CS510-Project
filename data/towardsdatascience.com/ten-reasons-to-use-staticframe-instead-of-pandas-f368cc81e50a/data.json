{"url": "https://towardsdatascience.com/ten-reasons-to-use-staticframe-instead-of-pandas-f368cc81e50a", "time": 1683013821.005218, "path": "towardsdatascience.com/ten-reasons-to-use-staticframe-instead-of-pandas-f368cc81e50a/", "webpage": {"metadata": {"title": "Ten Reasons to Use StaticFrame Instead of Pandas | Towards Data Science", "h1": "Ten Reasons to Use StaticFrame Instead of Pandas", "description": "How the interfaces and immutable data structures of StaticFrame reduce opportunities for error and increase maintainability of DataFrame-processing Python."}, "outgoing_paragraph_urls": [{"url": "https://raw.githubusercontent.com/InvestmentSystems/static-frame/master/doc/images/animate-display-config.svg", "anchor_text": "terminal animation", "paragraph_index": 14}, {"url": "http://static-frame.readthedocs.io", "anchor_text": "documentation", "paragraph_index": 51}, {"url": "https://github.com/InvestmentSystems/static-frame", "anchor_text": "project site", "paragraph_index": 51}], "all_paragraphs": ["If you work with data in Python, you probably use Pandas. Pandas provides nearly instant gratification: sophisticated data processing routines can be implemented in a few lines of code. However, if you have used Pandas on large projects over many years, you may have had some challenges. Complex Pandas applications can produce Python code that is hard to maintain and error-prone. This happens because Pandas provides many ways to do the same thing, has inconsistent interfaces, and broadly supports in-place mutation. For those coming from Pandas, StaticFrame offers a more consistent interface and reduces opportunities for error. This article demonstrates ten reasons you might use StaticFrame instead of Pandas.", "After years of using Pandas to develop back-end financial systems, it became clear to me that Pandas was not the right tool for the job. Pandas\u2019 handling of labeled data and missing values, with performance close to NumPy, certainly accelerated my productivity. And yet, the numerous inconsistencies in Pandas\u2019 API led to hard-to-maintain code. Further, Pandas\u2019s support for in-place mutation led to serious opportunities for error. So in May of 2017, I began implementing a library more suitable for critical production systems.", "Now, after years of development and refinement, we are seeing excellent results in our production systems by replacing Pandas with StaticFrame. Libraries and applications written with StaticFrame are easier to maintain and test. And we often see StaticFrame out-perform Pandas in large-scale, real-world use cases, even though, for many isolated operations, StaticFrame is not yet as fast as Pandas.", "What follows are ten reasons to favor using StaticFrame over Pandas. As the primary author of StaticFrame, I am certainly biased in this presentation. However, having worked with Pandas since 2013, I hope to have some perspective to share.", "All examples use Pandas 1.0.3 and StaticFrame 0.6.20. Imports use the following convention:", "An application programming interface (API) can be consistent in where functions are located, how functions are named, and the name and types of arguments those functions accept. StaticFrame deviates from Pandas\u2019s API to support greater consistency in all of these areas.", "To create a sf.Series or a sf.Frame, you need constructors. Pandas places its pd.DataFrame constructors in two places: on the root namespace (pd, as commonly imported) and on the pd.DataFrame class.", "For example, JSON data is loaded from a function on the pd namespace, while record data (an iterable of Python sequences) is loaded from the pd.DataFrame class.", "Even though Pandas has specialized constructors, the default pd.DataFrame constructor accepts a staggering diversity of inputs, including many of the same inputs as pd.DataFrame.from_records().", "For the user, there is little benefit to this diversity and redundancy. StaticFrame places all constructors on the class they construct, and as much as possible, narrowly focuses their functionality. As they are easier to maintain, explicit, specialized constructors are common in StaticFrame. For example, sf.Frame.from_json() and sf.Frame.from_dict_records():", "Being explicit leads to lots of constructors. To help you find what you are looking for, StaticFrame containers expose an interface attribute that provides the entire public interface of the calling class or instance as a sf.Frame. We can filter this table to show only constructors by using a sf.Frame.loc[] selection.", "Pandas displays its containers in diverse ways. For example, a pd.Series is shown with its name and type, while a pd.DataFrame shows neither of those attributes. If you display a pd.Index or pd.MultiIndex, you get a third approach: a string suitable for eval() which is inscrutable when large.", "StaticFrame offers a consistent, configurable display for all containers. The display of sf.Series, sf.Frame, sf.Index, and sf.IndexHierarchy all share a common implementation and design. A priority of that design is to always make explicit container classes and underlying array types.", "As much time is spent visually exploring the contents of these containers, StaticFrame offers numerous display configuration options, all exposed through the sf.DisplayConfig class. For persistent changes, sf.DisplayConfig instances can be passed to sf.DisplayActive.set(); for one-off changes, sf.DisplayConfig instances can be passed to the container\u2019s display() method.", "While pd.set_option() can similarly be used to set Pandas display characteristics, StaticFrame provides more extensive options for making types discoverable. As shown in this terminal animation, specific types can be colored or type annotations can be removed entirely.", "Pandas displays inconsistent behavior in regard to ownership of data inputs and data exposed from within containers. In some cases, it is possible to mutate NumPy arrays \u201cbehind-the-back\u201d of Pandas, exposing opportunities for undesirable side-effects and coding errors.", "For example, if we supply a 2D array to a pd.DataFrame, the original reference to the array can be used to \u201cremotely\u201d change the values within the pd.DataFrame. In this case, the pd.DataFrame does not protect access to its data, serving only as a wrapper of a shared, mutable array.", "Similarly, sometimes NumPy arrays exposed from the values attribute of a pd.Series or a pd.DataFrame can be mutated, changing the values within the pd.DataFrame.", "With StaticFrame, there is no vulnerability of \u201cbehind the back\u201d mutation: as StaticFrame manages immutable NumPy arrays, references are only held to immutable arrays. If a mutable array is given at initialization, an immutable copy will be made. Immutable arrays cannot be mutated from containers or from direct access to underlying arrays.", "While immutable data reduces opportunities for error, it also offers performance advantages. For example, when replacing column labels with sf.Frame.relabel(), underlying data is not copied. Instead, references to the same immutable arrays are shared between the old and new containers. Such \u201cno-copy\u201d operations are thus fast and light-weight. This is in contrast to what happens when doing the same thing in Pandas: the corresponding Pandas method, df.DataFrame.rename(), is forced to make a defensive copy of all underlying data.", "While Pandas permits in-place assignment, sometimes such operations cannot provide an appropriate derived type, resulting in undesirable behavior. For example, a float assigned into an integer pd.Series will have its floating-point components truncated without warning or error.", "With StaticFrame\u2019s immutable data model, assignment is a function that returns a new container. This permits evaluating types to ensure that the resultant array can completely contain the assigned value.", "StaticFrame uses a special assign interface for performing assignment function calls. On a sf.Frame, this interface exposes a sf.Frame.assign.loc[] interface that can be used to select the target of assignment. Following this selection, the value to be assigned is passed through a function call.", "Pandas has separate functions for iteration and function application. For iteration on a pd.DataFrame there is pd.DataFrame.iteritems(), pd.DataFrame.iterrows(), pd.DataFrame.itertuples(), and pd.DataFrame.groupby(); for function application on a pd.DataFrame there is pd.DataFrame.apply() and pd.DataFrame.applymap().", "But since function application requires iteration, it is sensible for function application to be built on iteration. StaticFrame organizes iteration and function application by providing families of iterators (such as Frame.iter_array() or Frame.iter_group_items()) that, with a chained call to apply(), can also be used for function application. Functions for applying mapping types (such as map_any() and map_fill()) are also available on iterators. This means that once you know how you want to iterate, function application is a just a method away.", "For example, we can create a sf.Frame with sf.Frame.from_records():", "We can iterate over a columns values with sf.Series.iter_element(). We can use the same iterator to do function application by using the apply() method found on the object returned from sf.Series.iter_element(). The same interface is found on both sf.Series and sf.Frame.", "For row or column iteration on a sf.Frame, a family of methods allows specifying the type of container to be used for the iterated rows or columns, i.e, with an array, with a NamedTuple, or with a sf.Series (iter_array(), iter_tuple(), iter_series(), respectively). These methods take an axis argument to determine whether iteration is by row or by column, and similarly expose an apply() method for function application. To apply a function to columns, we can do the following.", "Applying a function to a row instead of a column simply requires changing the axis argument.", "Group-by operations are just another form of iteration, with an identical interface for iteration and function application.", "An efficient use of a pd.DataFrame is to load initial data, then produce derived data by adding additional columns. This approach leverages the columnar organization of types and underlying arrays: adding new columns does not require re-allocating old columns.", "StaticFrame makes this approach less vulnerable to error by offering a strict, grow-only version of a sf.Frame called a sf.FrameGO. For example, once a sf.FrameGO is created, new columns can be added while existing columns cannot be overwritten or mutated in-place.", "This limited form of mutation meets a practical need. Further, converting back and forth from a sf.Frame to a sf.FrameGO (using Frame.to_frame_go() and FrameGO.to_frame()) is a no-copy operation: underlying immutable arrays can be shared between the two containers.", "Pandas models all date or timestamp values as NumPy datetime64[ns] (nanosecond) arrays, regardless of if nanosecond-level resolution is practical or appropriate. This creates a \u201cY2262 problem\u201d for Pandas: dates beyond 2262\u201304\u201311 cannot be expressed. While I can create a pd.DatetimeIndex up to 2262\u201304\u201311, one day further and Pandas raises an error.", "As indices are often used for date-time values far less granular than nanoseconds (such as dates, months, or years), StaticFrame offers the full range of NumPy typed datetime64 indices. This permits exact date-time type specification, and avoids the limits of nanosecond-based units.", "While not possible with Pandas, creating an index of years or dates extending to 3000 is simple with StaticFrame.", "Hierarchical indices permit fitting many dimensions into one. Using hierarchical indices, n-dimensional data can be encoded into a single sf.Series or sf.Frame.", "A key feature of hierarchical indices is partial selection at arbitrary depths, whereby a selection can be composed from the intersection of selections at each depth level. Pandas offers numerous ways to express those inner depth selections.", "One way is by overloading pd.DataFrame.loc[]. When using Pandas\u2019s hierarchical index (pd.MultiIndex), the meaning of positional arguments in a pd.DataFrame.loc[] selection becomes dynamic. It is this that makes Pandas code using hierarchical indices hard to maintain. We can see this by creating a pd.DataFrame and setting a pd.MultiIndex.", "Similar to 2D arrays in NumPy, when two arguments are given to pd.DataFrame.loc[], the first argument is a row selector, the second argument is a column selector.", "Yet, in violation of that expectation, sometimes Pandas will not use the second argument as a column selection, but instead as a row selection in an inner depth of the pd.MultiIndex.", "To handle this ambiguity, Pandas offers two alternatives. If a row and a column selection is required, the expected behavior can be restored by wrapping the hierarchical row selection within a pd.IndexSlice[] selection modifier. Or, if an inner-depth selection is desired without using a pd.IndexSlice[], the pd.DataFrame.xs() method can be used.", "This inconsistency in the meaning of the positional arguments given to pd.DataFrame.loc[] is unnecessary and makes Pandas code harder to maintain: what is intended from the usage of pd.DataFrame.loc[] becomes ambiguous without a pd.IndexSlice[]. Further, providing multiple ways to solve this problem is also a shortcoming, as it is preferable to have one obvious way to do things in Python.", "StaticFrame\u2019s sf.IndexHierarchy offers more consistent behavior. We will create an equivalent sf.Frame and set a sf.IndexHierarchy.", "Unlike Pandas, StaticFrame is consistent in what positional sf.Frame.loc[] arguments mean: the first argument is always a row selector, the second argument is always a column selector. For selection within a sf.IndexHierarchy, the sf.HLoc[] selection modifier is required to specify selection at arbitrary depths within the hierarchy. There is one obvious way to select inner depths. This approach makes StaticFrame code easier to understand and maintain.", "It is natural to think index and column labels on a pd.DataFrame are unique identifiers: their interfaces suggest that they are like Python dictionaries, where keys are always unique. Pandas indices, however, are not constrained to unique values. Creating an index on a pd.DataFrame with duplicates means that, for some single-label selections, a pd.Series will be returned, but for other single-label selections, a pd.DataFrame will be returned.", "Pandas support of non-unique indices makes client code more complicated by having to handle selections that sometimes return a pd.Series and other times return a pd.DataFrame. Further, uniqueness of indices is often a simple and effective check of data coherency.", "Some Pandas interfaces, such as pd.concat() and pd.DataFrame.set_index(), provide an optional check of uniqueness with a parameter named verify_integrity. Surprisingly, by default Pandas disables verify_integrity.", "In StaticFrame, indices are always unique. Attempting to set a non-unique index will raise an exception. This constraint eliminates opportunities for mistakenly introducing duplicates in indices.", "StaticFrame is designed to work in environments side-by-side with Pandas. Going back and forth is made possible with specialized constructors and exporters, such as Frame.from_pandas() or Series.to_pandas().", "The concept of a \u201cdata frame\u201d object came long before Pandas 0.1 release in 2009: the first implementation of a data frame may have been as early as 1991 in the S language, a predecessor of R. Today, the data frame finds realization in a wide variety of languages and implementations. Pandas will continue to provide an excellent resource to a broad community of users. However, for situations where correctness and code maintainability are critical, StaticFrame offers an alternative designed to be more consistent and reduce opportunities for error.", "For more information about StaticFrame, see the documentation or project site.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Chief Technology Officer at Research Affiliates, a global leader in investment strategies and research."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Ff368cc81e50a&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-reasons-to-use-staticframe-instead-of-pandas-f368cc81e50a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-reasons-to-use-staticframe-instead-of-pandas-f368cc81e50a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-reasons-to-use-staticframe-instead-of-pandas-f368cc81e50a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-reasons-to-use-staticframe-instead-of-pandas-f368cc81e50a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----f368cc81e50a--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----f368cc81e50a--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@flexatone?source=post_page-----f368cc81e50a--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@flexatone?source=post_page-----f368cc81e50a--------------------------------", "anchor_text": "Christopher Ariza"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6a4f500b1e4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-reasons-to-use-staticframe-instead-of-pandas-f368cc81e50a&user=Christopher+Ariza&userId=6a4f500b1e4f&source=post_page-6a4f500b1e4f----f368cc81e50a---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff368cc81e50a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-reasons-to-use-staticframe-instead-of-pandas-f368cc81e50a&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff368cc81e50a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-reasons-to-use-staticframe-instead-of-pandas-f368cc81e50a&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://raw.githubusercontent.com/InvestmentSystems/static-frame/master/doc/images/animate-display-config.svg", "anchor_text": "terminal animation"}, {"url": "http://static-frame.readthedocs.io", "anchor_text": "documentation"}, {"url": "https://github.com/InvestmentSystems/static-frame", "anchor_text": "project site"}, {"url": "https://medium.com/tag/python?source=post_page-----f368cc81e50a---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/pandas?source=post_page-----f368cc81e50a---------------pandas-----------------", "anchor_text": "Pandas"}, {"url": "https://medium.com/tag/numpy?source=post_page-----f368cc81e50a---------------numpy-----------------", "anchor_text": "Numpy"}, {"url": "https://medium.com/tag/immutability?source=post_page-----f368cc81e50a---------------immutability-----------------", "anchor_text": "Immutability"}, {"url": "https://medium.com/tag/interface-design?source=post_page-----f368cc81e50a---------------interface_design-----------------", "anchor_text": "Interface Design"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff368cc81e50a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-reasons-to-use-staticframe-instead-of-pandas-f368cc81e50a&user=Christopher+Ariza&userId=6a4f500b1e4f&source=-----f368cc81e50a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff368cc81e50a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-reasons-to-use-staticframe-instead-of-pandas-f368cc81e50a&user=Christopher+Ariza&userId=6a4f500b1e4f&source=-----f368cc81e50a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff368cc81e50a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-reasons-to-use-staticframe-instead-of-pandas-f368cc81e50a&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----f368cc81e50a--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Ff368cc81e50a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-reasons-to-use-staticframe-instead-of-pandas-f368cc81e50a&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----f368cc81e50a---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----f368cc81e50a--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----f368cc81e50a--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----f368cc81e50a--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----f368cc81e50a--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----f368cc81e50a--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----f368cc81e50a--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----f368cc81e50a--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----f368cc81e50a--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@flexatone?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@flexatone?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Christopher Ariza"}, {"url": "https://medium.com/@flexatone/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "29 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6a4f500b1e4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-reasons-to-use-staticframe-instead-of-pandas-f368cc81e50a&user=Christopher+Ariza&userId=6a4f500b1e4f&source=post_page-6a4f500b1e4f--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F7c0ea2340027&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ften-reasons-to-use-staticframe-instead-of-pandas-f368cc81e50a&newsletterV3=6a4f500b1e4f&newsletterV3Id=7c0ea2340027&user=Christopher+Ariza&userId=6a4f500b1e4f&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}