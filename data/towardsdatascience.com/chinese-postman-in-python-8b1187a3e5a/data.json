{"url": "https://towardsdatascience.com/chinese-postman-in-python-8b1187a3e5a", "time": 1683016192.304991, "path": "towardsdatascience.com/chinese-postman-in-python-8b1187a3e5a/", "webpage": {"metadata": {"title": "Chinese Postman in Python. Detailed Implementation & Explanation\u2026 | by Araz Sharma | Towards Data Science", "h1": "Chinese Postman in Python", "description": "The article is divided in the following sections, for the convenience of the reader, and it is advised to go through all sections in order. The Chinese Postman Problem was first investigated by the\u2026"}, "outgoing_paragraph_urls": [], "all_paragraphs": ["Today, I\u2019m going to explain and implement the popular \u2018Chinese Postman\u2019 Algorithm.", "The article is divided in the following sections, for the convenience of the reader, and it is advised to go through all sections in order.", "The Chinese Postman Problem was first investigated by the Chinese mathematician Kwan Mei-Ko in the early 1960\u2019s. He posed the question, that what if a Postman (in his case a Chinese Postman, hence the name :D) wishes to travel along all the streets in a city, deliver letters and come back to his post office, with the least possible distance.", "Since we live in the age of Internet, where e-mails and instant messaging have taken over the traditional letters, I will revamp the problem to suit this generation \ud83d\ude03", "Let\u2019s imagine you are on an amazing vacation, in an ancient beautiful city. We\u2019ll have to imagine this, given the current scenario, and wait until the Covid-19 pandemic blows away to try this out.", "You seek a tour of this city, and being a passionate tourist, and let\u2019s say a photographer; starting from your hotel, you wish to visit every street in this city at least once, and come back to your hotel. (Street Photography is your hobby :D)", "However, you have a big backpack to carry, camera equipment, rations, etc. This puts a physical limit on how much you can walk. Moreover, you don\u2019t have all the time in the world to meander and keep wandering all day, seeking all streets one by one. (Though that sounds lovely!)", "You wish to know what the minimum possible distance to accomplish this tour is, and how to do so?", "Well, after reading this article, you will be able to implement a python program, which would return you the minimum distance required to make your tour, if you feed in the map of the city as a Graph!", "Speaking in terms of Graph Theory, the problem is to simply find the Path Distance of the Euler\u2019s Circuit in a graph. However, a graph can only have an Euler\u2019s Circuit (or also known as Euler\u2019s Cycle), if all the degrees of its vertices are even.", "So if we have a graph with all even vertices, the Euler\u2019s Circuit in that graph would traverse each edge exactly once.", "This covers one of the cases of our Algorithm: If our graph has all even vertices, we simply need to return the sum of all weights of edges in that graph.", "But the world isn\u2019t a perfect place now, is it? The possibility of finding graph of a city with all even vertices is very unlikely. In fact, one doesn\u2019t even find such graphs in their exam question papers, leave alone ancient cities (I\u2019m a student too :D)", "So what happens in case of a graph having some odd vertices? This is where the Chinese Postman Algorithm steps up.", "2. Determine all the possible pairings of odd vertices.", "3. For each pairing, we find the edges that connect the odd vertices with the shortest possible path.", "4. From the above combinations, we select the one with the shortest total length.", "5. We compute the minimum distance for Chinese Postman by taking into account the new shortest extra edges added.", "Before I dive into each of the steps, I will elaborate on what parts of the algorithm I\u2019ll be explaining in detail, and the parts which are Pre-Requisites.", "So now we are equipped with an Algorithm to get the minimum distance for the tour of the Ancient City. I will be demonstrating each step through python code blocks, and the entire code will be attached at the end. Please note that the implementations done by me are possibly not the most efficient of those existing out in the community, but, they reflect the ideas and approach required by an average student to code this algorithm :D", "II. Implementing Dijkstra\u2019s Algorithm as a function", "III. Finding Odd Degree Vertices with a function", "IV. Generating all Pairings of Odd Vertices with Recursion", "V. Selecting Optimal Pairing with help of Dijkstra\u2019s Function", "VI. Implementing function to get sum of all edges", "VII. Combining all Code Blocks together", "VIII. Giving Chinese Postman Distance as Output for a Graph Input", "We are taking an undirected, positive weighted graph as our input. We will store it in form of a list of lists, as shown in the code block.", "Note: we can take user input to get graph in runtime, but since it would be cumbersome to enter the values one by one, we are taking pre-defined graphs to make our life easier \ud83d\ude04", "As shown in the code block, we take 2 graphs as our input.", "The objective of this algorithm is to find the shortest possible route, thus also distance, between given 2 nodes in a graph. It is of the category of a Greedy Algorithm, which tries to find the optimal path by seeking the nearest neighbors and adjusting itself. The only major drawback for Dijkstra\u2019s is that it fails when weights are negative, where we use the Bellman Ford or other algorithms to find the shortest path.", "The code block shows the approach taken to implement this algorithm, for a given set of source and destination vertexes of a graph. To find more details on implementation of this algorithm, see references.", "The decision to implement the steps for odd vertices depends on the very fact if odd vertices are present in our graph. If they aren\u2019t, we can take a chill pill & just return the sum of all weights of edges\ud83d\ude0e Otherwise we need to call in Chinese Postman for backup \ud83d\udc4a", "As our input graph is weighted and undirected, to find the degree of each vertex is not difficult. We just need to count number of non-zero entries for each node of the graph.", "We do so by running a simple nested for loop, and keeping count for degrees of each vertex. Once we have degrees of each vertex, we use list comprehension to find the odd ones, and store the vertex number in another list called: odds, which we will need in future.", "Keep in mind, the number of odd vertices in input graphs will always be even by the Handshaking Theorem.", "This step is often considered the most difficult part of this Algorithm to implement, and requires a lot of thought and effort. When I first solved this problem on my own, I spent almost 3\u20134 hours to come up with an algorithm to generate these pairings! However, the result was extremely satisfying and rewarding \ud83d\udd25 I would encourage you to do the same, and give this step some thought. If you think and proceed logically, you might be able to solve this.", "This Algorithm was made by me, but it might not be unique or original, in the sense that someone may have followed the same thought process and come up with a similar algorithm. However I am extremely proud to have thought this on my own, and this is one of the reasons for me to write this article, to share my approach, for the benefit of the community :)", "Our task is to get all possible pairings, which include all odd vertices. For example if the odd vertices are: A,B,C & D, the possible pairings are:-", "This may look straightforward, but as the number of odd vertices increase, the numbers of such combinations increase exponentially. For example, for 10 odd vertices, there are 945 possible combinations!", "Thus, to solve this problem, we must approach it rationally. If we observe how these pairs are being combined for a small number of vertices, we can generalize that for any number of vertices.", "Refer the diagram given below. I have written down all unique pairs, for 6 odd vertices: A, B, C, D, E & F.", "Each column contains the pairs, starting with each of A, B, C, D, E & F. Now any combination of pairings must include all of odd vertices, which are from A to F. So if we consider the first possible combination:", "We observe a pattern emerging here. If we are somehow able to keep track of vertices we have already used, then with recursion, we can easily get all possible combinations of pairings. Refer to the diagram below. Here I have visualized how we can get all combinations through each of the branches in a recursion like tree. We see that we will get 15 total combinations for 6 odd vertices.", "We first need a function which can give us all unique pairs, in the order as shown in Figure 1. We define a function \u2018gen_pairs\u2019, which uses a simple nested loop to fetch all the unique pairs. Since we want these pairs to be grouped by the columns starting with each letter, we make a list of lists -> \u2018pairs\u2019, where each column is a list. As shown in the code block, the function takes the odds list, which has all odd vertices, and returns pairs.", "Now we come to our Recursion Function. To make a recursion function, we always need to think of 2 cases:-", "\u00a7 The Base Case, where we return some output, or stop the recursion", "\u00a7 The General Cases where we perform some computation and call our function again", "We need two lists for input to the recursion function:", "The recursion will be done in the \u2018pairs\u2019 list we previously generated, and the function will be called each time by slicing the list -> pairs[1:]", "The recursion will only stop, when we finally get one combination. But since the ending pair of the combination can be from any of the columns, we check this condition by matching if the length of a combination list is equal to \u2018Number of Vertices/ 2\u2019. The reason for the condition is that since we will have pairs of 2, the total number of pairs will be \u2018Number of Vertices\u2019/2. Thus we pre-define a variable \u2018l\u2019, which is given the value: (len(pairs) + 1)//2", "(Note: We use the pairs list to check this condition, as the logic is same. Feel free to use \u2018odds\u2019 to get this condition)", "As shown in the code block, the code is short and sweet :D The cases just check if any of the letters in the pairs are in our done list, and if they aren\u2019t, then we consider that pair for the combination.", "I have also attached a Debugging version of this code, which I originally used while making this function. If you want to understand how the function is working at each recursion call, then it is recommended to remove some of my comments and run it.", "Firstly, if you\u2019ve reached this far, then I commend you for your efforts, and I have some good news for you. All of the heavy work is done! \ud83c\udf8a", "We now seek the pairing, where the total distance between the pairs is minimal. For example if we have odd vertices as: A, B, C & D", "\u00b7 Using Dijkstra\u2019s, let\u2019s say minimum distance between A & B is: 20", "\u00b7 Using Dijkstra\u2019s, let\u2019s say minimum distance between C & D is: 10", "This is also illustrated in the diagram shown below. (All values are considered randomly to demonstrate the process)", "This is implemented in the code block below. We store the all distances in a list, and get the minimum of them as the extra distance needed to complete the Chinese Postman Distance", "The code block below uses simple nested loops to get sum of weights of all edges. We will need this to get sum of weights of input graph, which will be added with the extra distance computed by the minimum odd pairing.", "Congratulations! You made it to the very end \ud83d\ude03 All that remains is to call & use all the functions we wrote in one single function. Keep in mind, we need to account for both the cases for an input graph:", "\u00a7 If all vertices are even: we return Chinese Postman distance as sum of all weights", "\u00a7 If there are odd vertices: we compute odd pairings, get the minimum distance from the optimal one, and add it to the sum of all weights", "The below code block has the final compiled function, which when called with a graph, will return the minimum distance required to traverse all edges of the graph at least once, and return to the starting vertex.", "Now, you will successfully be able to find the Chinese Postman distance from the above code. However, some doubts might linger in your mind, as to how this is actually working \u2754", "The below figure contains a simple graph with all even vertices. The Euler Circuit in this follows the arrows, which are from A -> B -> C -> D -> A. We see that the minimum distance we need to cover, to be able to visit all edges at least once, & come back to our starting vertex is same as sum of all weights of edges.", "Now consider an addition to this graph as shown in the next figure. Now we have 2 odd vertices. Since the only pairing available here is AD, we get the minimum distance between them as the minimum pairing distance.", "Now to visualize how we are completing the tour, let\u2019s add a new edge along the shortest distance between the selected pairing AD", "We see that this edge will make the graph have all even vertices. Now if we consider the Euler Circuit here, we will see that we need to traverse this new edge to reach back to our starting point. Thus, the total minimum distance for the Chinese Postman is the sum of all weights of the original graph, plus the weight of the added edge(s). That was precisely what our code was doing, without having to add an edge explicitly.", "So the above diagrams convey the brilliance behind the Chinese Postman Algorithm!", "Now you can visit any city in the world, make its map into a graph, feed it to your code, and get the minimum distance required for you to make the \u2018Chinese Postman Tour\u2019 :D", "Attached is the entire code for implementing the Chinese Postman Algorithm. If you also want the path for the minimum distance, then you can check out Fleury\u2019s Algorithm, which can be used to display the Euler Circuit in the modified graph.", "I\u2019m very grateful to my University Graph Theory Professor Dr. Surabhi Narayan for teaching me these concepts and sparking my interest in this area :D", "I hope you enjoyed this article, and are now well prepared to implement this algorithm on your own!", "Below are some references to read more about the Chinese Postman Algorithm and Dijkstra\u2019s Algorithm.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "3rd Year Student pursuing Bachelors of Technology in Computer Science Engineering at PES University, Bangalore. ML & AI Enthusiast, Published Poet and Author :D"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F8b1187a3e5a&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchinese-postman-in-python-8b1187a3e5a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchinese-postman-in-python-8b1187a3e5a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchinese-postman-in-python-8b1187a3e5a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchinese-postman-in-python-8b1187a3e5a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----8b1187a3e5a--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8b1187a3e5a--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://arazsharma1103.medium.com/?source=post_page-----8b1187a3e5a--------------------------------", "anchor_text": ""}, {"url": "https://arazsharma1103.medium.com/?source=post_page-----8b1187a3e5a--------------------------------", "anchor_text": "Araz Sharma"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5c1b839b849&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchinese-postman-in-python-8b1187a3e5a&user=Araz+Sharma&userId=5c1b839b849&source=post_page-5c1b839b849----8b1187a3e5a---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8b1187a3e5a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchinese-postman-in-python-8b1187a3e5a&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8b1187a3e5a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchinese-postman-in-python-8b1187a3e5a&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@masoncbjpg?utm_source=medium&utm_medium=referral", "anchor_text": "Mason B."}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://unsplash.com/@jackgisel?utm_source=medium&utm_medium=referral", "anchor_text": "Jack Gisel"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://unsplash.com/@anniespratt?utm_source=medium&utm_medium=referral", "anchor_text": "Annie Spratt"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://www.geeksforgeeks.org/chinese-postman-route-inspection-set-1-introduction/", "anchor_text": "https://www.geeksforgeeks.org/chinese-postman-route-inspection-set-1-introduction/"}, {"url": "https://en.wikipedia.org/wiki/Route_inspection_problem", "anchor_text": "https://en.wikipedia.org/wiki/Route_inspection_problem"}, {"url": "https://www.youtube.com/watch?v=XB4MIexjvY0", "anchor_text": "https://www.youtube.com/watch?v=XB4MIexjvY0"}, {"url": "https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/", "anchor_text": "https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/"}, {"url": "https://unsplash.com/@mattragland?utm_source=medium&utm_medium=referral", "anchor_text": "Matt Ragland"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://medium.com/tag/python?source=post_page-----8b1187a3e5a---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/algorithms?source=post_page-----8b1187a3e5a---------------algorithms-----------------", "anchor_text": "Algorithms"}, {"url": "https://medium.com/tag/recursion?source=post_page-----8b1187a3e5a---------------recursion-----------------", "anchor_text": "Recursion"}, {"url": "https://medium.com/tag/graph-theory?source=post_page-----8b1187a3e5a---------------graph_theory-----------------", "anchor_text": "Graph Theory"}, {"url": "https://medium.com/tag/programming?source=post_page-----8b1187a3e5a---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8b1187a3e5a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchinese-postman-in-python-8b1187a3e5a&user=Araz+Sharma&userId=5c1b839b849&source=-----8b1187a3e5a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8b1187a3e5a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchinese-postman-in-python-8b1187a3e5a&user=Araz+Sharma&userId=5c1b839b849&source=-----8b1187a3e5a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8b1187a3e5a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchinese-postman-in-python-8b1187a3e5a&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8b1187a3e5a--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F8b1187a3e5a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchinese-postman-in-python-8b1187a3e5a&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----8b1187a3e5a---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----8b1187a3e5a--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----8b1187a3e5a--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----8b1187a3e5a--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----8b1187a3e5a--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----8b1187a3e5a--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----8b1187a3e5a--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----8b1187a3e5a--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----8b1187a3e5a--------------------------------", "anchor_text": ""}, {"url": "https://arazsharma1103.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://arazsharma1103.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Araz Sharma"}, {"url": "https://arazsharma1103.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "8 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5c1b839b849&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchinese-postman-in-python-8b1187a3e5a&user=Araz+Sharma&userId=5c1b839b849&source=post_page-5c1b839b849--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F72d47617d858&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchinese-postman-in-python-8b1187a3e5a&newsletterV3=5c1b839b849&newsletterV3Id=72d47617d858&user=Araz+Sharma&userId=5c1b839b849&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}