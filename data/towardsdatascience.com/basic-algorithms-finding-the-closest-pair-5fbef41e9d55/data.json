{"url": "https://towardsdatascience.com/basic-algorithms-finding-the-closest-pair-5fbef41e9d55", "time": 1683003794.756568, "path": "towardsdatascience.com/basic-algorithms-finding-the-closest-pair-5fbef41e9d55/", "webpage": {"metadata": {"title": "Basic Algorithms \u2014 Finding the Closest Pair | by Keita Miyaki | Towards Data Science", "h1": "Basic Algorithms \u2014 Finding the Closest Pair", "description": "Writing cost-efficient algorithms is one of the keys to succeed as a data scientist, and in the previous article we used split-conquer method in counting inversions in an array, which is far less\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/basic-algorithms-counting-inversions-71aaa579a2c0", "anchor_text": "the previous article", "paragraph_index": 0}], "all_paragraphs": ["Writing cost-efficient algorithms is one of the keys to succeed as a data scientist, and in the previous article we used split-conquer method in counting inversions in an array, which is far less costly than brute force method. This time, we will see how another split-conquer algorithm finds the closest pair of points from a set of points on a two-dimensional plane.", "Looking up at the sky at Times Square or downtown Tokyo, we would find the closest pair of stars quite easily, because you can see only a few stars there. If you are in the middle of nowhere, the infinite number of stars in the dark night sky would make it impossible to determine the pair.", "It is no different for computers; when they determine the closest pairs of points on a plane, the more points the dataset has, the longer it takes for algorithms to find the couple with the least distance. The cost increase is more than linear to the number of points, and we try to write an algorithm which contains the cost growth as low as possible. The split-conquer method works well in this challenge, in a similar way with the algorithm to count inversions.", "The brute-force way is, like one that counts inversions in an array, to calculate the distances of every pair of points in the universe. For n number of points, we would need to measure n(n-1)/2 distances and the cost is square to n, or \u0398(n\u00b2). With two loops, the code for this algorithm can be written as follows.", "Now we think of a better way whose cost would be O(nlgn). It is possible with presorting and the split-conquer method. To presort the array on one of the coordinates, we also use the slit-conquer method, the merge-sort algorithm.", "We sort the arrays with an algorithm called merge-sort, which is faster than brute-force sorting algorithms. The merge-sort algorithm splits the array, sorts the subarrays (as a recursive step), compares the youngest numbers in two subarrays and picks the younger, and repeats it until both subarrays are exhausted. Each of the recursive steps costs just \u0398(n) so that the total cost of the algorithm stays at \u0398(nlgn).", "As stated above, we aim to write an algorithm which finds the closest pair of points at a cost of O(nlgn). With a split-conquer algorithm whose recursive steps cost O(n) each would suffice. The algorithm divides the array into subarrays and the key is to see if the closest pair across the two subarrays.", "The split conquer algorithm sorts the array by X coordinate, divides the sorted array into two, apply the algorithm recursively to the subarrays, and check whether or not there exists a pair with a shorter distance than that found in subarrays.", "The last step, looking at the pairs across subarrays, needs some tricks to keep the cost at a linear level (e.g. O(n)). First, we will make a subset of the input, which consists of points within d distance from the midpoint in terms of X coordinate; d is the shortest distance between the pair within subarrays. If we find the closest pair across the subarrays, the pair of points should exist within distance d from the line dividing the array into subarrays.", "In the example shown in the right hand side, the closest pair within subarrays is determined in the right subarray (note that the point on the dashed line belongs to the left subarray) and its distance is d.", "If the closest pair exists across the left and right subarrays, the points should be within the range of d from the dashed line dividing the array into the two subarrays. Therefore, we can look at the subset within the shaded range.", "Second, we sort the subset we obtained in the previous step by Y coordinate. We show that we have to look at sets of only eight consecutive points each in the sorted subset.", "As shown in the figure, the maximum number of points that can exist in 2d*d rectangle across right and left subarrays is eight (points on the dashed line duplicate; two belong to the left subarray and another two are in the right).", "Third, we look at each set of eight consecutive points in the subset sorted on the Y coordinate. If we find a pair whose distance is less than d, it means the closest pair exists across the subarrays. This step costs O(n), and the total cost of this recursive algorithm stays at O(nlgn).", "We learned that the split-conquer algorithm we developed performs faster than brute-force one. Let\u2019s compare the actual performance of two algorithms. In the chart below, the cost (execution time) of two algorithms are shown by different sizes of arrays. The two lines clearly indicate that the split-conquer method has an advantage as the sample size increases. This result proves the importance of coding efficiently, as discussed in the previous article too.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Keita is an aspiring data scientist with expertise in finance and investment, a proud Japanese national, a chef, Judo black belt, a calligrapher, and a drunkard"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F5fbef41e9d55&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbasic-algorithms-finding-the-closest-pair-5fbef41e9d55&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbasic-algorithms-finding-the-closest-pair-5fbef41e9d55&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbasic-algorithms-finding-the-closest-pair-5fbef41e9d55&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbasic-algorithms-finding-the-closest-pair-5fbef41e9d55&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----5fbef41e9d55--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----5fbef41e9d55--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://keita-miyaki.medium.com/?source=post_page-----5fbef41e9d55--------------------------------", "anchor_text": ""}, {"url": "https://keita-miyaki.medium.com/?source=post_page-----5fbef41e9d55--------------------------------", "anchor_text": "Keita Miyaki"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Faf1c982100b3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbasic-algorithms-finding-the-closest-pair-5fbef41e9d55&user=Keita+Miyaki&userId=af1c982100b3&source=post_page-af1c982100b3----5fbef41e9d55---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5fbef41e9d55&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbasic-algorithms-finding-the-closest-pair-5fbef41e9d55&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5fbef41e9d55&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbasic-algorithms-finding-the-closest-pair-5fbef41e9d55&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/basic-algorithms-counting-inversions-71aaa579a2c0", "anchor_text": "the previous article"}, {"url": "https://unsplash.com/@remypnt?utm_source=medium&utm_medium=referral", "anchor_text": "R\u00e9my Penet"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://medium.com/tag/data-science?source=post_page-----5fbef41e9d55---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/divide-and-conquer?source=post_page-----5fbef41e9d55---------------divide_and_conquer-----------------", "anchor_text": "Divide And Conquer"}, {"url": "https://medium.com/tag/python?source=post_page-----5fbef41e9d55---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/algorithms?source=post_page-----5fbef41e9d55---------------algorithms-----------------", "anchor_text": "Algorithms"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5fbef41e9d55&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbasic-algorithms-finding-the-closest-pair-5fbef41e9d55&user=Keita+Miyaki&userId=af1c982100b3&source=-----5fbef41e9d55---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5fbef41e9d55&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbasic-algorithms-finding-the-closest-pair-5fbef41e9d55&user=Keita+Miyaki&userId=af1c982100b3&source=-----5fbef41e9d55---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5fbef41e9d55&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbasic-algorithms-finding-the-closest-pair-5fbef41e9d55&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----5fbef41e9d55--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F5fbef41e9d55&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbasic-algorithms-finding-the-closest-pair-5fbef41e9d55&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----5fbef41e9d55---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----5fbef41e9d55--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----5fbef41e9d55--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----5fbef41e9d55--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----5fbef41e9d55--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----5fbef41e9d55--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----5fbef41e9d55--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----5fbef41e9d55--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----5fbef41e9d55--------------------------------", "anchor_text": ""}, {"url": "https://keita-miyaki.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://keita-miyaki.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Keita Miyaki"}, {"url": "https://keita-miyaki.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "127 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Faf1c982100b3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbasic-algorithms-finding-the-closest-pair-5fbef41e9d55&user=Keita+Miyaki&userId=af1c982100b3&source=post_page-af1c982100b3--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F5b17020054ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbasic-algorithms-finding-the-closest-pair-5fbef41e9d55&newsletterV3=af1c982100b3&newsletterV3Id=5b17020054ff&user=Keita+Miyaki&userId=af1c982100b3&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}