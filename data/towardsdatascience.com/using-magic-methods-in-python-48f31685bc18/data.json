{"url": "https://towardsdatascience.com/using-magic-methods-in-python-48f31685bc18", "time": 1683002014.904168, "path": "towardsdatascience.com/using-magic-methods-in-python-48f31685bc18/", "webpage": {"metadata": {"title": "Using Magic Methods in Python. How Magic Methods Can Enhance our\u2026 | by Stephen Fordham | Towards Data Science", "h1": "Using Magic Methods in Python", "description": "They\u2019re everything in object-oriented Python. They\u2019re special methods that you can define to add \u201cmagic\u201d to your classes. They\u2019re always surrounded by double underscores, for example__init__. They're\u2026"}, "outgoing_paragraph_urls": [{"url": "https://gist.github.com/StephenFordham/d62b97ac0ffb5af552579391287e8570", "anchor_text": "gist", "paragraph_index": 32}, {"url": "https://github.com/StephenFordham", "anchor_text": "https://github.com/StephenFordham", "paragraph_index": 35}], "all_paragraphs": ["They\u2019re everything in object-oriented Python. They\u2019re special methods that you can define to add \u201cmagic\u201d to your classes. They\u2019re always surrounded by double underscores, for example__init__. They're also not as well documented as they need to be. All of the magic methods for Python appear in the same section in the Python docs, but they're scattered about and only loosely organized. There's hardly an example to be found in that section.", "To rectify a perceived lack of documentation on magic methods, I have complied some plain-English examples of how to use Python\u2019s magic methods.", "To begin, lets create a fictitious use case. In this scenario, I would like to create a class that creates dictionary objects, that only accept either integers or floats as their values.", "If any other data types, for example; strings, lists, tuples are added as a value to our custom dictionary object, an exception will be raised, specifying to the user that this custom dict object can only accept integers and floats as it\u2019s values.", "In order to implement this, we will make use of the following magic methods:", "To begin, I first create a custom class called CustomIntFloat, and I pass dict into the argument inheritance list. This means, that the object that we create will behave exactly like a dictionary, except in the places where we choose to selectively modify this behavior.", "I then create an __init__ method to construct my CustomIntFloat dict object. This object takes a key and value in it\u2019s argument list, which I have set to the None type by default. The reason for this being, is that, if a user creates an object of the CustomIntFloat class, without passing a key or value, an empty dict will be created. I create a simple conditional which says: if the key is not passed, the key parameter is assigned the argument None by default, and an empty dict is created by referencing the CustomIntFloat object, with the class attribute empty_dict.", "Following on, if the user specifies a key of length one, and a corresponding value that is an instance of the int or float class, the key and the value will be set in the object.", "Finally, in the else statement, if the user specifies multiple keys and values as an iterable, the iterables will be zipped by the zip function and assigned the variable name zipped. I loop over zipped, and check that the value is of type int or float. If it is not, a custom CustomIntFloatError exception is raised.", "When we raise a CustomIntFloatError exception, we are really creating an instance of the CustomIntFloatError class and printing it at the same time.", "As such, this custom error class needs __init__ and __str__ magic methods. The instance we create takes the value passed, and sets it as an attribute value in the CustomIntFloatError class.", "This means, when an error message is raised, the value passed to the __init__ of CustomIntFloat can be set as an attribute (self.value)in the CustomIntFloatError class and easily inspected.", "When invalid input is specified, the CustomIntFloatError exception is raised and the object is not constructed. A useful error message informs the user that only integers and floats are valid values.", "Similarly, when you attempt to instantiate the object z (that has been commented out), with multiple keys and values, the same exception will be raised, informing the user that \u2018three\u2019 is not valid input.", "__setitem__ is a magic method that is invoked when we set a key and a value in the dictionary. Once the CustomIntFloat object has been constructed, if the user attempts to add a value that is not of type int or float, the same CustomIntFloatError exception will be raised. I have included a code snippet below that shows how to set a key and a value as intended.", "Invalid input results in a CustomIntFloatError exception being raised as shown below.", "For those interested, the source code for the code presented can be found on my GitHub page here:", "By inheriting through built-in classes like the dict, we can customize our behavior through the re-implementation of magic methods. This has many benefits.", "Importantly, the user does not need to learn any new syntax. When the user wants to add a key and a value to the CustomIntFloat dict object, they just add it in the usual way. The only difference is that we have selectively chosen to allow only values of type int and float. If the user specifies any other type, a custom error message usefully instructs them where they went wrong, and what type of values are expected.", "We can also take advantage of the mathematical operators in Python with magic methods. Lets see how we can use magic methods, like __add__, __sub__, and __mul__ in our own custom object that we create.", "Operators, like +, -, /, and * are polymorphic methods. As can be shown below in the Python prompt, the plus sign (+), is polymorphic, and can be used to concatenate strings, sum up integers, and combined lists together. This is possible, because all these types, str, list, and int have an add method in their respective classes. Python simply converts the + sign to an __add__ method call on the object that called it (see examples below).", "This means we can take advantage of the + sign in our own objects if we include a __add__ method in our class.", "Here, we are creating a class called NumOperations. This class creates NumOperations objects. When a user of this class, passes a list to the arguments list of the __init__, that list is set as an attribute in the NumOperations object and named, .math_list.", "When the NumOperations object(s) have been constructed, we can conveniently utilize the magic methods to work with these custom objects and broadcast a mathematical operation.", "To illustrate, the magic method __sub__ takes 2 NumOperations objects, zips their lists together and iterates other their corresponding list of tuples. The second element in the tuple is subtracted from the first and that value is appended to a new list, called minuslst, and passed as the argument to the NumOperations constructor.", "This now returns a new NumOperations object.", "This broadcasting is being performed under the __sub__ method. This means that we can take advantage of the minus (-) operator.", "The magic method, __repr__ has been re-implemented to return a string representation of the list set in the new object. This has been modified, so that when a user prints the output of two NumOperations objects, the user will see something which they might expect.", "Here a list where the elements have been subtracted from one another;", "Both __add__, and __mul__ have a similar method implementation as __sub__, but use a list comprehension to cut down on the number of lines of code that are needed.", "This broadcasting behavior is similar to that found in data analysis packages, such as Pandas and Numpy.", "The __add__ and __mul__ methods are also made to work with two NumOperations objects. This means the user can take advantage of the plus operator, + and the multiplication operator *. As can be seen, in the example below, q is the result of x * y, which returns a new NumOperations object. When we print q, we get a string representation of the boradcasting operation as a list.", "For interested parties, the source code is available by following the link to my GitHub gist.", "We can make our custom designed objects work with Python operators, like the plus, minus and multiplication signs. This is very powerful functionality, and part of the power comes from the ability to communicate very easily what the object does. The user does not need to learn any new methods, they can simply add, subtract or multiply the NumOperations objects together and when they print the resultant object, they will see output that they might expect.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Articles on Data Science and Programming https://github.com/StephenFordham"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F48f31685bc18&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-magic-methods-in-python-48f31685bc18&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-magic-methods-in-python-48f31685bc18&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-magic-methods-in-python-48f31685bc18&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-magic-methods-in-python-48f31685bc18&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----48f31685bc18--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----48f31685bc18--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@stephenfordham?source=post_page-----48f31685bc18--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@stephenfordham?source=post_page-----48f31685bc18--------------------------------", "anchor_text": "Stephen Fordham"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5d3f46276e7e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-magic-methods-in-python-48f31685bc18&user=Stephen+Fordham&userId=5d3f46276e7e&source=post_page-5d3f46276e7e----48f31685bc18---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F48f31685bc18&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-magic-methods-in-python-48f31685bc18&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F48f31685bc18&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-magic-methods-in-python-48f31685bc18&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@donramxn", "anchor_text": "Ram\u00f3n Salinero"}, {"url": "https://unsplash.com/photos/vEE00Hx5d0Q", "anchor_text": "Unsplash"}, {"url": "https://gist.github.com/StephenFordham/d62b97ac0ffb5af552579391287e8570", "anchor_text": "gist"}, {"url": "https://medium.com/tag/programming?source=post_page-----48f31685bc18---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-science?source=post_page-----48f31685bc18---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----48f31685bc18---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/software-development?source=post_page-----48f31685bc18---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----48f31685bc18---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F48f31685bc18&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-magic-methods-in-python-48f31685bc18&user=Stephen+Fordham&userId=5d3f46276e7e&source=-----48f31685bc18---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F48f31685bc18&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-magic-methods-in-python-48f31685bc18&user=Stephen+Fordham&userId=5d3f46276e7e&source=-----48f31685bc18---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F48f31685bc18&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-magic-methods-in-python-48f31685bc18&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----48f31685bc18--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F48f31685bc18&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-magic-methods-in-python-48f31685bc18&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----48f31685bc18---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----48f31685bc18--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----48f31685bc18--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----48f31685bc18--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----48f31685bc18--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----48f31685bc18--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----48f31685bc18--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----48f31685bc18--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----48f31685bc18--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@stephenfordham?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@stephenfordham?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Stephen Fordham"}, {"url": "https://medium.com/@stephenfordham/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "977 Followers"}, {"url": "https://github.com/StephenFordham", "anchor_text": "https://github.com/StephenFordham"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5d3f46276e7e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-magic-methods-in-python-48f31685bc18&user=Stephen+Fordham&userId=5d3f46276e7e&source=post_page-5d3f46276e7e--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fbd4ed43cae00&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-magic-methods-in-python-48f31685bc18&newsletterV3=5d3f46276e7e&newsletterV3Id=bd4ed43cae00&user=Stephen+Fordham&userId=5d3f46276e7e&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}