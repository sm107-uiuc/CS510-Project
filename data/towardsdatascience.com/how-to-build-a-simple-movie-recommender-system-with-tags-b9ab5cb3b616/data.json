{"url": "https://towardsdatascience.com/how-to-build-a-simple-movie-recommender-system-with-tags-b9ab5cb3b616", "time": 1683001698.879018, "path": "towardsdatascience.com/how-to-build-a-simple-movie-recommender-system-with-tags-b9ab5cb3b616/", "webpage": {"metadata": {"title": "How to Build a Simple Movie Recommender System with Tags | by Johnson Kuan | Towards Data Science", "h1": "How to Build a Simple Movie Recommender System with Tags", "description": "Let\u2019s suppose you\u2019re launching the next great subscription video-on-demand (SVOD) streaming service and you\u2019ve secured the rights to stream all major movie titles released in the past 100 years\u2026"}, "outgoing_paragraph_urls": [{"url": "https://en.wikipedia.org/wiki/Recommender_system", "anchor_text": "recommender system", "paragraph_index": 1}, {"url": "https://en.wikipedia.org/wiki/Cold_start_(computing)", "anchor_text": "cold start problem", "paragraph_index": 2}, {"url": "https://movielens.org", "anchor_text": "MovieLens", "paragraph_index": 3}, {"url": "https://grouplens.org/datasets/movielens/", "anchor_text": "public dataset", "paragraph_index": 3}, {"url": "https://www.imdb.com/title/tt0119217/", "anchor_text": "Good Will Hunting", "paragraph_index": 3}, {"url": "https://en.wikipedia.org/wiki/Recommender_system#Content-based_filtering", "anchor_text": "content-based", "paragraph_index": 4}, {"url": "https://github.com/JohnsonKuan/movie-rec-tags", "anchor_text": "here", "paragraph_index": 7}, {"url": "https://www.imdb.com/title/tt0210945/", "anchor_text": "Remember the Titans", "paragraph_index": 9}, {"url": "https://www.imdb.com/title/tt0114709/", "anchor_text": "Toy Story", "paragraph_index": 13}, {"url": "https://www.imdb.com/title/tt0816692/", "anchor_text": "Interstellar", "paragraph_index": 20}, {"url": "https://cs.stanford.edu/~quocle/paragraph_vector.pdf", "anchor_text": "paper", "paragraph_index": 26}, {"url": "https://en.wikipedia.org/wiki/Cosine_similarity", "anchor_text": "cosine similarity", "paragraph_index": 27}, {"url": "https://umap-learn.readthedocs.io/en/latest/", "anchor_text": "UMAP", "paragraph_index": 28}], "all_paragraphs": ["Let\u2019s suppose you\u2019re launching the next great subscription video-on-demand (SVOD) streaming service and you\u2019ve secured the rights to stream all major movie titles released in the past 100 years. Congrats on this incredible feat!", "Now that\u2019s a lot of movies. Without some sort of recommender system, you\u2019re concerned that users may be inundated over time with movies they don\u2019t care about. This could drive customer churn which is the last thing you want!", "So you decide to build a movie recommender system. Since your service is new, you don\u2019t have enough data yet on what movies are being watched by which users. This is known as the cold start problem and it precludes you from recommending movies based only on the historical viewership of users.", "Luckily, even without adequate viewership data we can still build a decent recommender system with movie metadata. That\u2019s where MovieLens comes in. MovieLens provides a public dataset with keyword tags for each movie. These tags are quite informative. For example, check out the top community tags below for Good Will Hunting.", "In the rest of this post, I\u2019ll answer three business questions that are critical to building a simple content-based recommender system with tags from MovieLens:", "Excerpt from wikipedia page on content-based recommender systems:", "\u201cContent-based filtering methods are based on a description of the item and a profile of the user\u2019s preferences. These methods are best suited to situations where there is known data on an item (name, location, description, etc.), but not on the user. Content-based recommenders treat recommendation as a user-specific classification problem and learn a classifier for the user\u2019s likes and dislikes based on product features.\u201d", "The code for this analysis can be found here along with the data and Conda environment YAML file for you to easily reproduce the results.", "There are about 10K unique movies and 1K unique tags in the MovieLens tags genome dataset. Each movie has a relevance score for every tag so that\u2019s about 10M movie-tag pairs. The relevance score ranges from 0 to 1.", "Not every tag is relevant for a movie so we need to only keep the most relevant tags. First, we can rank order the tags for each movie based on the relevance score. For example, below top 10 tags for Remember the Titans. Note that the relevance scores are well above 0.9 which indicate that they\u2019re very relevant tags.", "Next, we confirm in the chart below that higher ranked tags for a movie tend to have higher median relevance scores. Tags in the 1st rank for a movie have a median relevance score of almost 1. We can see that the median relevance score gradually decreases as we go down to the 50th rank.", "To find the most relevant tags for a movie, we can keep the top N tags for a movie based on relevance score. Here, we need to pick N carefully. If N is small, we have very relevant but few tags. If N is large, we have many tags but a lot of them could be irrelevant.", "Chart below shows the percent change in median relevance score as we go from tags in the 1st to 100th rank. We see an inflection point around the 50th rank when the relevance score starts to become more stable. Thus, we can chose N = 50 as a reasonable number of tags to keep for each movie. Note that this is quite a simple \u201celbow method\u201d styled approach which can be optimized later.", "Now we can get the list of top 50 tags for each movie which we\u2019ll use in the next sections. For example, below top 50 tags for Toy Story.", "Before generating movie recommendations for a user, we need a way to measure the similarity between movies based on their top 50 tags. In content-based recommender systems, users will be recommended movies that are similar to movies they\u2019ve already watched.", "Here, I\u2019ll demonstrate two ways of measuring similarity:", "The first approach with Jaccard Index measures the similarity between two sets A and B as the size of the intersection divided by the size of the union. When measuring the similarity between movies, we can compute this index for the two sets of movie tags.", "For example, let\u2019s say we have three movies below and their top 3 tags:", "Intuitively, we can see that movie A is more similar to B than C. This is because movies A and B share two tags (space, friendship) whereas movies A and C don\u2019t share any tags.", "Below top 10 movies similar to Good Will Hunting based on Jaccard Index. For viewers of Good Will Hunting, these look like reasonable recommendations. Note that I included Good Will Hunting on the list to show that the Jaccard Index = 1 when comparing a movie with itself.", "Below top 10 movies similar to Interstellar based on Jaccard Index. For viewers of Interstellar, these also look like reasonable recommendations.", "To further illustrate the effectiveness of Jaccard Index, see below word cloud based on tag frequency from movies similar to Interstellar. Here, we can see which tags are more prominent in the similarity calculation (e.g. science fiction, great ending, dystopic future, philosophical, cerebral).", "Cosine Similarity of Movie Vectors (aka Content Embeddings)", "The first approach with Jaccard Index helped us build an intuition about what it means to be similar with tags. The second approach here with cosine similarity is a bit more complex. It requires that we represent our movies as a vector. Here, a vector is just a set of numbers.", "For example, we can represent the same movies before as a set of three real numbers:", "Intuitively, again we can see that movie A is more similar to B than C. This is because movies A and B have closer numbers in each dimension (e.g. 1.1 vs 1.3 in the first dimension).", "To find a good vector representation of movies, I use the Doc2Vec (PV-DBOW) technique from this paper which takes a movie (document) and learns a mapping to a latent K dimensional vector space based on its tags (words in the document). I won\u2019t go into the details here, but this is how we can represent movies as a vector based on tags.", "Once we can represent each movie as a vector, we can compute the cosine similarity between vectors to find movies that are similar. I won\u2019t go into the details of cosine similarity here, but at a high level it tells us how similar movie vectors are to each other which we can use to generate recommendations.", "Below I visualize the movie vectors in 2D with UMAP which is a popular non-linear dimensionality reduction technique. We can see that movies that are closer together in this vector space are more similar (e.g. Toy Story and Monsters, Inc.).", "Now that we can measure the similarity between movies with tags, we can start generating movie recommendations to users.", "Remember that in content-based recommender systems, users will be recommended movies that are similar to movies they\u2019ve already watched. If the user has only seen one movie (e.g. Good Will Hunting), we can simply use the Jaccard Index (or Cosine Similarity) as before to generate a list of similar movies to recommend.", "More realistically, a user will have watched a set of movies and we need to generate recommendations based on the combined attributes of these movies.", "One simple way is to compute a user vector as an average of the movie vectors that they\u2019ve seen. These user vectors can represent the user\u2019s profile of movie preferences.", "For example, if a user has only seen movies A and B below:", "Below are movies that I watch and enjoy. How do we generate movie recommendations using tags from these movies?", "Interstellar, Good Will Hunting, Gattaca, Almost Famous, The Shawshank Redemption, Edge of Tomorrow, Jerry Maguire, Forrest Gump, Back to the Future", "Well my user vector would be an average of the movie vectors for the nine movies above. I can take my user vector and find the most similar movies (based on cosine similarity) that I haven\u2019t watched yet. Below are my movie recommendations which are surprisingly good considering we\u2019re only using movie tags here! Feel free to play with the notebook and generate your own recommendations.", "Below summary of our content-based recommender system. Note that we can precompute the user vector and similarity scores in a batch process to speedup the serving of recommendations if we deploy our system as an API.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fb9ab5cb3b616&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-simple-movie-recommender-system-with-tags-b9ab5cb3b616&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-simple-movie-recommender-system-with-tags-b9ab5cb3b616&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-simple-movie-recommender-system-with-tags-b9ab5cb3b616&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-simple-movie-recommender-system-with-tags-b9ab5cb3b616&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----b9ab5cb3b616--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----b9ab5cb3b616--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@johnson.h.kuan?source=post_page-----b9ab5cb3b616--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@johnson.h.kuan?source=post_page-----b9ab5cb3b616--------------------------------", "anchor_text": "Johnson Kuan"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb152ddf632a3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-simple-movie-recommender-system-with-tags-b9ab5cb3b616&user=Johnson+Kuan&userId=b152ddf632a3&source=post_page-b152ddf632a3----b9ab5cb3b616---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb9ab5cb3b616&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-simple-movie-recommender-system-with-tags-b9ab5cb3b616&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb9ab5cb3b616&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-simple-movie-recommender-system-with-tags-b9ab5cb3b616&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@dmjdenise?utm_source=medium&utm_medium=referral", "anchor_text": "Denise Jans"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://en.wikipedia.org/wiki/Recommender_system", "anchor_text": "recommender system"}, {"url": "https://en.wikipedia.org/wiki/Cold_start_(computing)", "anchor_text": "cold start problem"}, {"url": "https://movielens.org", "anchor_text": "MovieLens"}, {"url": "https://grouplens.org/datasets/movielens/", "anchor_text": "public dataset"}, {"url": "https://www.imdb.com/title/tt0119217/", "anchor_text": "Good Will Hunting"}, {"url": "https://en.wikipedia.org/wiki/Recommender_system#Content-based_filtering", "anchor_text": "content-based"}, {"url": "https://github.com/JohnsonKuan/movie-rec-tags", "anchor_text": "here"}, {"url": "https://www.imdb.com/title/tt0210945/", "anchor_text": "Remember the Titans"}, {"url": "https://www.imdb.com/title/tt0114709/", "anchor_text": "Toy Story"}, {"url": "https://en.wikipedia.org/wiki/Jaccard_index", "anchor_text": "Jaccard Index"}, {"url": "https://en.wikipedia.org/wiki/Cosine_similarity", "anchor_text": "Cosine Similarity"}, {"url": "https://www.imdb.com/title/tt0816692/", "anchor_text": "Interstellar"}, {"url": "https://cs.stanford.edu/~quocle/paragraph_vector.pdf", "anchor_text": "paper"}, {"url": "https://en.wikipedia.org/wiki/Cosine_similarity", "anchor_text": "cosine similarity"}, {"url": "https://umap-learn.readthedocs.io/en/latest/", "anchor_text": "UMAP"}, {"url": "https://medium.com/tag/data-science?source=post_page-----b9ab5cb3b616---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----b9ab5cb3b616---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/recommender-systems?source=post_page-----b9ab5cb3b616---------------recommender_systems-----------------", "anchor_text": "Recommender Systems"}, {"url": "https://medium.com/tag/recommendation-system?source=post_page-----b9ab5cb3b616---------------recommendation_system-----------------", "anchor_text": "Recommendation System"}, {"url": "https://medium.com/tag/movies?source=post_page-----b9ab5cb3b616---------------movies-----------------", "anchor_text": "Movies"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb9ab5cb3b616&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-simple-movie-recommender-system-with-tags-b9ab5cb3b616&user=Johnson+Kuan&userId=b152ddf632a3&source=-----b9ab5cb3b616---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb9ab5cb3b616&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-simple-movie-recommender-system-with-tags-b9ab5cb3b616&user=Johnson+Kuan&userId=b152ddf632a3&source=-----b9ab5cb3b616---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb9ab5cb3b616&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-simple-movie-recommender-system-with-tags-b9ab5cb3b616&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----b9ab5cb3b616--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fb9ab5cb3b616&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-simple-movie-recommender-system-with-tags-b9ab5cb3b616&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----b9ab5cb3b616---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----b9ab5cb3b616--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----b9ab5cb3b616--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----b9ab5cb3b616--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----b9ab5cb3b616--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----b9ab5cb3b616--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----b9ab5cb3b616--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----b9ab5cb3b616--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----b9ab5cb3b616--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@johnson.h.kuan?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@johnson.h.kuan?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Johnson Kuan"}, {"url": "https://medium.com/@johnson.h.kuan/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "112 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb152ddf632a3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-simple-movie-recommender-system-with-tags-b9ab5cb3b616&user=Johnson+Kuan&userId=b152ddf632a3&source=post_page-b152ddf632a3--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F773523d3db0a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-simple-movie-recommender-system-with-tags-b9ab5cb3b616&newsletterV3=b152ddf632a3&newsletterV3Id=773523d3db0a&user=Johnson+Kuan&userId=b152ddf632a3&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}