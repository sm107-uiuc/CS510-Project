{"url": "https://towardsdatascience.com/how-to-represent-the-game-state-of-2048-a1518c9775eb", "time": 1683014577.8457541, "path": "towardsdatascience.com/how-to-represent-the-game-state-of-2048-a1518c9775eb/", "webpage": {"metadata": {"title": "How to represent the game state of 2048 | by Dorian Lazar | Towards Data Science", "h1": "How to represent the game state of 2048", "description": "In the last article about solving this game, I have shown at a conceptual level how the minimax algorithm can be applied to solving the 2048 game. But to put those ideas into practice, we need a way\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.nablasquared.com/how-to-represent-the-game-state-of-2048/", "anchor_text": "here", "paragraph_index": 33}, {"url": "https://www.nablasquared.com/", "anchor_text": "https://www.nablasquared.com/", "paragraph_index": 35}], "all_paragraphs": ["In the last article about solving this game, I have shown at a conceptual level how the minimax algorithm can be applied to solving the 2048 game. But to put those ideas into practice, we need a way of representing the state of the game and do operations on it. I chose to do so in an object-oriented fashion, through a class which I named Grid. This class holds the game state and offers us the methods we need for further implementing the minimax algorithm (in the next article).", "In case you missed my previous article, here it is:", "Now, let\u2019s start implementing the Grid class in Python.", "Inside the Grid class, we will hold the game state as a matrix with tile numbers in it, and where we have empty squares, we will hold a 0. In Python, we\u2019ll use a list of lists for that and store this into the matrix attribute of the Grid class.", "An example of this representation is shown below:", "In our implementation, we will need to pass this matrix around a little bit; we will get it from one Grid object, use then to instantiate another Grid object, etc. So, to avoid side effects that can arise from passing it by reference, we will use the deepcopy() function, hence we need to import it. Another thing that we will import is Tuple, and List from typing; that\u2019s because we\u2019ll use type hints.", "The simplest thing we can start with is to create methods for setting and getting the matrix attribute of the class. Then we will create a method for placing tiles on the board; for that, we\u2019ll just set the corresponding element of the matrix to the tile\u2019s number. The input row/col params are 1-indexed, so we need to subtract 1; the tile number is assigned as-is.", "Then we will define the __init__() method which will be just setting the matrix attribute.", "For the minimax algorithm, we\u2019ll need to test Grid objects for equality. We will consider 2 Grid objects to be equal when the 2 object\u2019s matrices are the same, and we\u2019ll use the __eq__() magic method to do so. We iterate through all the elements of the 2 matrices, and as soon as we have a mismatch, we return False, otherwise True is returned at the end.", "Next, we create a utility method. This method evaluates \u201chow good\u201d our game grid is. There could be many possible choices for this, but here we use the following metric (as described in the previous article): sum all the elements of the matrix and divide by the number of non-zero elements.", "The next piece of code is a little tricky. We need to check if Max can do one of the following moves: up, down, left, right. The code for each of these moves is quite similar, so I will explain only one of these moves: up which is implemented in the .canMoveUp() method.", "When we want to do an \u201cup\u201d move, things can change only vertically. There\u2019s no interaction between different columns of the board. So, we can run the code independently for each column.", "We can do this in a for loop:", "And we don\u2019t necessarily need to check all columns. As soon as we encounter a column that allows something to be changed in the \u201cup\u201d move we return True. If there is no such column, we return False at the end.", "For each column, we do the following: we start at the bottom and move upwards until we encounter a non-empty (> 0) element. After we see such an element, how we can know if an \u201cup\u201d move changes something in this column? 2 possible things can produce a change: either there is an empty square where a tile can move, or there are 2 adjacent tiles that are the same.", "The code highlighted below is responsible for finding the down most non-empty element:", "The piece of code highlighted below returns True as soon as it finds either an empty square where a tile can be moved or a possible merge between 2 tiles.", "Below is the code with all these methods which work similarly with the .canMoveUp() method.", "We will need a method that returns the available moves for Max and Min. For Max that would be a subset of the moves: up, down, left, right. We will represent these moves as integers; each direction will have associated an integer:", "In the .getAvailableMovesForMax() method we check if we can move in each of these directions, using our previously created methods, and in case the result is true for a direction, we append the corresponding integer to a list which we will return at the end of the method.", "The .getAvailableMovesForMin() method will return, the cross product between the set of empty places on the grid and the set {2, 4}. This return value will be a list of tuples of the form (row, col, tile), where row and col are 1-indexed coordinates of the empty cells, and tile is one of {2, 4}.", "The .getChildren() takes a parameter that can be either \u201cmax\u201d or \u201cmin\u201d and returns the appropriate moves using one of the 2 previous methods. These are the moves that lead to the children game states in the minimax algorithm\u2019s tree.", "For the minimax algorithm, we need a way of establishing if a game state is terminal. As I said in the previous article, we will consider a game state to be terminal if either there are no available moves, or a certain depth is reached. But checking for the depth condition would be easier to do inside the minimax algorithm itself, not inside this class. So, by the .isTerminal() method we will check only if there are available moves for Max or Min. A simple way to do this, is to use .getAvailableMovesForMin() or .getAvailableMovesForMax() to return a list with all the moves and if it is empty return True, otherwise False. But a more efficient way is to return False as soon as we \u201csee\u201d an available move and at the end, if no False was returned, then return True.", "The .isGameOver() method is just a shorthand for .isTerminal(who=\u201dmax\u201d), and it will be used as an ending condition in our game solving loop (in the next article).", "The methods below are for taking one of the moves up, down, left, right. This time we actually do these moves, don\u2019t just check if they can be done. The code for each movement direction is similar, so, I will explain only the up move.", "The up move can be done independently for each column. We will have a for loop that iterates over the columns. For each column, we will initialize variables w and k to 0. w holds the location of the next write operation. k stores the tile value of the last encountered non-empty cell.", "And here is an example of how it works for a given column:", "Then we create a wrapper around the above 4 methods and name it .move(), which does a move in the direction given as a parameter.", "Another thing that we need is the move\u2019s \u201cinverse\u201d method. .move() takes as a parameter a direction code and then does the move. Now, we want a method that takes as parameter another Grid object, which is assumed to be a direct child by a call to .move() and returns the direction code that generated this parameter. We name this method .getMoveTo().", "This method works by creating copies of the current object, then calling in turn .up(), .down(), .left(), .right() on these copies, and tests for equality against the method\u2019s parameter. And where the equality is True, we return the appropriate direction code.", "Below is the full code of the Grid class:", "And that\u2019s all for this article. In the next one (which is the last about 2048 and minimax) we will see how we can control the game board of a web version of this game, implement the minimax algorithm, and watch it playing better than us (\u2026or at least better than me).", "I hope you found this information useful and thanks for reading!", "This article is also posted on my own website here. Feel free to have a look!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Passionate about Data Science, AI, Programming & Math | Owner of \u2207\u00b2 https://www.nablasquared.com/"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fa1518c9775eb&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-represent-the-game-state-of-2048-a1518c9775eb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-represent-the-game-state-of-2048-a1518c9775eb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-represent-the-game-state-of-2048-a1518c9775eb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-represent-the-game-state-of-2048-a1518c9775eb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----a1518c9775eb--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a1518c9775eb--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://dorianlazar.medium.com/?source=post_page-----a1518c9775eb--------------------------------", "anchor_text": ""}, {"url": "https://dorianlazar.medium.com/?source=post_page-----a1518c9775eb--------------------------------", "anchor_text": "Dorian Lazar"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F79574042e17b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-represent-the-game-state-of-2048-a1518c9775eb&user=Dorian+Lazar&userId=79574042e17b&source=post_page-79574042e17b----a1518c9775eb---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa1518c9775eb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-represent-the-game-state-of-2048-a1518c9775eb&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa1518c9775eb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-represent-the-game-state-of-2048-a1518c9775eb&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/tagged/playing-2048-with-minimax", "anchor_text": "Playing 2048 with Minimax Algorithm"}, {"url": "https://towardsdatascience.com/playing-2048-with-minimax-algorithm-1-d214b136bffb", "anchor_text": "How to apply Minimax to 20482048 \u2014 a simple game, but programming a computer to solve it is not trivialtowardsdatascience.com"}, {"url": "https://towardsdatascience.com/how-to-control-the-game-board-of-2048-ec2793db3fa9", "anchor_text": "How to control the game board of 2048\u2026and finish implementing the minimax algorithmtowardsdatascience.com"}, {"url": "https://www.nablasquared.com/how-to-represent-the-game-state-of-2048/", "anchor_text": "here"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----a1518c9775eb---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/algorithms?source=post_page-----a1518c9775eb---------------algorithms-----------------", "anchor_text": "Algorithms"}, {"url": "https://medium.com/tag/python?source=post_page-----a1518c9775eb---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/programming?source=post_page-----a1518c9775eb---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/playing-2048-with-minimax?source=post_page-----a1518c9775eb---------------playing_2048_with_minimax-----------------", "anchor_text": "Playing 2048 With Minimax"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa1518c9775eb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-represent-the-game-state-of-2048-a1518c9775eb&user=Dorian+Lazar&userId=79574042e17b&source=-----a1518c9775eb---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa1518c9775eb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-represent-the-game-state-of-2048-a1518c9775eb&user=Dorian+Lazar&userId=79574042e17b&source=-----a1518c9775eb---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa1518c9775eb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-represent-the-game-state-of-2048-a1518c9775eb&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a1518c9775eb--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fa1518c9775eb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-represent-the-game-state-of-2048-a1518c9775eb&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----a1518c9775eb---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----a1518c9775eb--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----a1518c9775eb--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----a1518c9775eb--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----a1518c9775eb--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----a1518c9775eb--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----a1518c9775eb--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----a1518c9775eb--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----a1518c9775eb--------------------------------", "anchor_text": ""}, {"url": "https://dorianlazar.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://dorianlazar.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Dorian Lazar"}, {"url": "https://dorianlazar.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "593 Followers"}, {"url": "https://www.nablasquared.com/", "anchor_text": "https://www.nablasquared.com/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F79574042e17b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-represent-the-game-state-of-2048-a1518c9775eb&user=Dorian+Lazar&userId=79574042e17b&source=post_page-79574042e17b--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F9fdaa579c06&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-represent-the-game-state-of-2048-a1518c9775eb&newsletterV3=79574042e17b&newsletterV3Id=9fdaa579c06&user=Dorian+Lazar&userId=79574042e17b&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}