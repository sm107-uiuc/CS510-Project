{"url": "https://towardsdatascience.com/turn-amazon-s3-into-a-spatio-temporal-database-40f1a210e943", "time": 1682996944.247798, "path": "towardsdatascience.com/turn-amazon-s3-into-a-spatio-temporal-database-40f1a210e943/", "webpage": {"metadata": {"title": "Turn Amazon S3 into a spatio-temporal database! | by David Moten | Towards Data Science", "h1": "Turn Amazon S3 into a spatio-temporal database!", "description": "S3 is Amazon\u2019s virtually unlimited storage offering. You can store files of any size in S3 Buckets and they will be stored redundantly on multiple devices across multiple facilities in a region. For\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/davidmoten/sparse-hilbert-index", "anchor_text": "sparse-hilbert-index", "paragraph_index": 14}, {"url": "https://github.com/apache/commons-csv", "anchor_text": "commons-csv", "paragraph_index": 16}, {"url": "https://github.com/ReactiveX/RxJava", "anchor_text": "RxJava", "paragraph_index": 24}, {"url": "https://aws.amazon.com/athena/", "anchor_text": "Athena", "paragraph_index": 31}, {"url": "https://stackoverflow.com/questions/52472054/how-do-you-get-athena-presto-to-recognize-parquet-index", "anchor_text": "1", "paragraph_index": 33}], "all_paragraphs": ["S3 is Amazon\u2019s virtually unlimited storage offering. You can store files of any size in S3 Buckets and they will be stored redundantly on multiple devices across multiple facilities in a region. For files that you want to interact with frequently standard storage costs are about 3c (US) per GB per month. If you mark your data for storage in S3 Glacier then the cost is 0.4c per GB per month and you can bring it back to standard status in a few hours if required.", "I store vessel movement data from a big chunk of the world\u2019s surface in S3, and I configure older data to move to Glacier automatically. One day may have as many as 27 million records and in Comma Separated Values (CSV) format take up 2.4GB. In fact I store the raw data (AIS NMEA) in S3 and a Java Lambda trigger creates a CSV version.", "One of the things I love about cloud services is discovering sweet spots in terms of cost and capability and I wondered if I could quickly and cheaply query this data set in S3.", "It turns out that files in S3 are randomly accessible. I can specify a byte range using a Range HTTP request header and that\u2019s all that will be returned (without a latency penalty).", "Random access enables index lookups. If I know approximately where in a file my records are by using an index then I can grab only that chunk of the file and extract the information I want.", "A window query in 2, 3 or more dimensions is a search for data within a box of the same number of dimensions. For example if I have spatio-temporal data for the whole US then a window query might be to find records in a particular suburb of Chicago over lunchtime on a particular day.", "How do GIS systems perform window queries on 2D spatial and spatio-temporal data?", "Spatial queries are commonly done with R-Trees which is a reasonably complex data structure. Searching tree structures represented in flat files can mean making a number of random access reads as the tree is traversed. More importantly the reads are serial in nature in that I don\u2019t know the next read location till I\u2019ve completed the previous read. More discrete serial reads means more delays especially if I\u2019m reading a flat file in S3 and experience latency with each read.", "At 3 or more dimensions a popular technique for indexing is to map the multi-dimensional region to a single dimension using a space-filling curve. One good choice for that space-filling curve is the Hilbert Curve. Chop your 3D domain up into a regular grid of 1024x1024x1024 cells then a Hilbert curve made up of a single wiggly line will visit all 1m points.", "As an interlude, here are a couple of 2D examples of that wiggly line called the Hilbert Curve.", "Here\u2019s a 3 dimensional animation of the Hilbert Curve:", "The Hilbert curve has some nice locality properties because it makes no big jumps, the next value on the curve is only ever one unit away. This means that if two points have indexes that are close to each other then they will be geometrically close to each other as well. The converse is not guaranteed.", "Now that all the data points are mapped to one dimension I can sort them in that dimension and then use simple one-dimension database index lookup techniques. When you index a column in a database table you end up with the ability to find the exact rows in each table corresponding to a value in that column. However, there can be as many entries in the index as rows in the table. If you use what\u2019s called a sparse index then you have the positions of some rows but you might have to do a bit of extra reading after them to find others. A sparse index can be much smaller than a full index, say 0.1% of the size of a full index.", "I\u2019m beating around the bush here, so let\u2019s get to the punch line. If I sort my 27 million records (2.4GB of CSV) in ascending value of a Hilbert index with one million points (10 bits) and then create a small sparse index file (440K) I\u2019ve got the ability to do fast window queries via random access on my data. I can even do the search in parallel because I know in advance where my records are (approximately). Ideally I\u2019ve got queries in mind that are quite small in space and time though I found queries unconstrained in time can work pretty well too.", "There are some curly issues to deal with here in terms of translating a search box into ranges on the Hilbert curve (perhaps coarsening the ranges if there are too many of them) and from there to accessing byte ranges pointed to by the index. Fortunately these issues are handled for you by a java library called sparse-hilbert-index which I knocked up and published on GitHub.", "Let\u2019s try an example. My CSV input data looks like this:", "I create a sorted data file and a Hilbert index by running this code (with thanks to commons-csv):", "13 minutes later on an i5 laptop the sort of 27 million CSV records is complete and the index file is created.", "I then deploy input-sorted.csv (2.4GB) and input-sorted.csv.idx to an S3 bucket and try querying the data like below. First I\u2019ll count the number of records in the Sydney region for an hour. I\u2019m going to make things easier and suppose the data is in a publicly accessible bucket so I don\u2019t need to authenticate (but only do this if your data is not sensitive).", "Load the index file (which you can cache locally if you want):", "The search above found 2389 records in 169ms over a not-very-zippy corporate internet connection. 3347 records were read (a hit ratio of 0.71). Some level of wasted effort is a consequence of the sparse index but of course we don\u2019t need a GIS system on the server!", "Interestingly enough if we query the dataset for the Sydney (Australia) region for the whole time dimension (24 hours) then the performance is still reasonable: 6720ms to return 36940 records with a hit ratio of 0.55. 37 chunks (sections of the S3 object pointed to by index entries) were read (partially) with an average time to first byte (TTFB) of 114ms (thus the latency of our internet connection is responsible for 4200ms of the elapsed time). Being closer to S3 (say in EC2 or Lambda) can offer a significant time saving but another trick up our sleeve is to read concurrently from S3.", "In the above search command you\u2019ll see that the concurrency parameter was set to 1. I\u2019ve found that an optimal number over a mediocre internet connection for this dataset on S3 is 8; that is, 8 chunks are retrieved simultaneously, parsed, filtered and merged. The query that took 6720ms (mainly because of the unconstrained time dimension) now takes 839ms!", "I did test runs from EC2 (t2.large) as well and as expected the time to first byte came down, to about 50ms. With concurrency the the all-day query went down to 380ms. With latency down I presume seek times start to play a stronger role and the sweet spot for the concurrency level seems to be about 4.", "The api used to retrieve records from searches offers streaming functionality via the RxJava library.", "Bear in mind that CSV is not the most efficient method of storing and retrieving data. More targeted binary formats may make your queries many times faster.", "The number of entries in the sparse index has a large effect on the hit ratio ( a measure of how many records you read to find what you requested). If you can cache index files locally or put them on faster storage then you may go for a larger number of entries in each index file. Experimentation is the way to go. Create multiple indexes for the same file of various sizes and see what suits your querying patterns best.", "Generally speaking if your queries are tailored so that they don\u2019t return a lot of records then your response time should be of the order mentioned above. Searching with unconstrained dimensions (like time in the query earlier) may work but I\u2019d suggest having only one dimension unconstrained.", "When you perform a search you can specify the withStats option to view various metrics about the search:", "I\u2019ve run through an example with 3 dimensions but a sparse Hilbert index will work well for 2 dimensions as well. So S3 can become your 2D spatial database as well.", "Note that Azure Blob Storage and Google Cloud Storage also offer random access via the HTTP Range header. You can use those storage options as well with the sparse-hilbert-index library.", "That\u2019s a good question! Especially as AWS offer Athena on CSV files (and other formats) in S3 buckets that can can do a full scan of a 2GB CSV file in 1.5 seconds!", "The sparse-hilbert-index approach may appeal when you consider the costs of running many many indexed searches across a lot of data compared to full scans. Athena costs are low ($US5/TB data scanned for queries) but may become significant at some scale. In some cases the consequent power consumption from doing a lot of full scan searches may also be ethically challenging (and also rather hard to calculate). I think it\u2019s hard to compete with Athena on big file search but there may be some edge cases that favour sparse-hilbert-index!", "To add fuel to the fire, Athena supports the Parquet format which can be indexed such that every page has min-max statistics. If you sort the data on the field you want to query (in our case we would add a calculated Hilbert index column) then Athena can in theory do indexed lookups itself (untested). Athena still has to look at the statistics for every page (1Mb by default) so it\u2019s not quite as efficient theoretically as sparse-hilbert-index that knows exactly what pages to search. Note that as of June 2019 Athena does not support indexed Parquet formats for faster access (1). When or if support arrives it will be worth experimenting with!", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F40f1a210e943&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-amazon-s3-into-a-spatio-temporal-database-40f1a210e943&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-amazon-s3-into-a-spatio-temporal-database-40f1a210e943&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-amazon-s3-into-a-spatio-temporal-database-40f1a210e943&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-amazon-s3-into-a-spatio-temporal-database-40f1a210e943&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----40f1a210e943--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----40f1a210e943--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@davidmoten?source=post_page-----40f1a210e943--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@davidmoten?source=post_page-----40f1a210e943--------------------------------", "anchor_text": "David Moten"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F59fde4b49f6c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-amazon-s3-into-a-spatio-temporal-database-40f1a210e943&user=David+Moten&userId=59fde4b49f6c&source=post_page-59fde4b49f6c----40f1a210e943---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F40f1a210e943&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-amazon-s3-into-a-spatio-temporal-database-40f1a210e943&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F40f1a210e943&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-amazon-s3-into-a-spatio-temporal-database-40f1a210e943&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.researchgate.net/figure/Spatio-temporal-query-and-spatio-temporal-bucket_fig1_220113571", "anchor_text": "researchgate.net"}, {"url": "https://github.com/davidmoten/sparse-hilbert-index", "anchor_text": "sparse-hilbert-index"}, {"url": "https://github.com/apache/commons-csv", "anchor_text": "commons-csv"}, {"url": "https://github.com/ReactiveX/RxJava", "anchor_text": "RxJava"}, {"url": "https://aws.amazon.com/athena/", "anchor_text": "Athena"}, {"url": "https://stackoverflow.com/questions/52472054/how-do-you-get-athena-presto-to-recognize-parquet-index", "anchor_text": "1"}, {"url": "https://github.com/davidmoten/sparse-hilbert-index", "anchor_text": "sparse-hilbert-index"}, {"url": "https://medium.com/tag/java?source=post_page-----40f1a210e943---------------java-----------------", "anchor_text": "Java"}, {"url": "https://medium.com/tag/geospatial?source=post_page-----40f1a210e943---------------geospatial-----------------", "anchor_text": "Geospatial"}, {"url": "https://medium.com/tag/search?source=post_page-----40f1a210e943---------------search-----------------", "anchor_text": "Search"}, {"url": "https://medium.com/tag/s3?source=post_page-----40f1a210e943---------------s3-----------------", "anchor_text": "S3"}, {"url": "https://medium.com/tag/programming?source=post_page-----40f1a210e943---------------programming-----------------", "anchor_text": "Programming"}, {"url": "http://creativecommons.org/publicdomain/zero/1.0/", "anchor_text": "No rights reserved"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F40f1a210e943&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-amazon-s3-into-a-spatio-temporal-database-40f1a210e943&user=David+Moten&userId=59fde4b49f6c&source=-----40f1a210e943---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F40f1a210e943&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-amazon-s3-into-a-spatio-temporal-database-40f1a210e943&user=David+Moten&userId=59fde4b49f6c&source=-----40f1a210e943---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F40f1a210e943&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-amazon-s3-into-a-spatio-temporal-database-40f1a210e943&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----40f1a210e943--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F40f1a210e943&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-amazon-s3-into-a-spatio-temporal-database-40f1a210e943&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----40f1a210e943---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----40f1a210e943--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----40f1a210e943--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----40f1a210e943--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----40f1a210e943--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----40f1a210e943--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----40f1a210e943--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----40f1a210e943--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----40f1a210e943--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@davidmoten?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@davidmoten?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "David Moten"}, {"url": "https://medium.com/@davidmoten/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "19 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F59fde4b49f6c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-amazon-s3-into-a-spatio-temporal-database-40f1a210e943&user=David+Moten&userId=59fde4b49f6c&source=post_page-59fde4b49f6c--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2F59fde4b49f6c%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-amazon-s3-into-a-spatio-temporal-database-40f1a210e943&user=David+Moten&userId=59fde4b49f6c&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}