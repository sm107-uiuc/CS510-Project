{"url": "https://towardsdatascience.com/clean-machine-learning-code-bd32bd0e9212", "time": 1683001196.034723, "path": "towardsdatascience.com/clean-machine-learning-code-bd32bd0e9212/", "webpage": {"metadata": {"title": "Clean Machine Learning Code. Practical Software Engineering\u2026 | by Moussa Taifi PhD | Towards Data Science", "h1": "Clean Machine Learning Code", "description": "Machine learning (ML) pipelines are software pipelines after all. They are full of needless complexity and repetition. This is mixed with thick opacity, rigidity, and viscosity of design. With these\u2026"}, "outgoing_paragraph_urls": [{"url": "https://leanpub.com/cleanmachinelearningcode", "anchor_text": "https://leanpub.com/cleanmachinelearningcode", "paragraph_index": 0}, {"url": "https://www.amazon.com/Thoughtful-Machine-Learning-Python-Test-Driven/dp/1491924136", "anchor_text": "Thoughful Machine Learning with Python, Book", "paragraph_index": 47}, {"url": "http://www.moussataifi.com/books", "anchor_text": "www.moussataifi.com/books", "paragraph_index": 50}], "all_paragraphs": ["Checkout my latest (in progress) book about this topic with code examples, in-depth discussions, and more! https://leanpub.com/cleanmachinelearningcode", "Machine learning (ML) pipelines are software pipelines after all. They are full of needless complexity and repetition. This is mixed with thick opacity, rigidity, and viscosity of design. With these issues, ML failures are growing in importance at an unprecedented pace. We have seen the self-driving cars hitting pedestrians in Arizona. We learnt about the gender bias of large scale translation system. We saw how simple masks hacked face id systems in smartphones. We heard about other \u201csmart\u201d systems making bad decisions (e.g. Knight Capital). It is time to talk more about our responsibility in machine learning craftsmanship.", "As a global data science community, the autonomous systems we build can be costly, dangerous and even deadly. Adding to the problem is the inexperienced workforce of this 5 to 10yrs old craft. As of 2019, 40% of data scientists in the USA have less than 5 years of experience. We, as a community, are experiencing a boom in ML development and usage. This is like previous software engineering booms in the early 2000s. This expansion manifests itself with a menagerie of constructs, abstractions, framework, and workflows. This multitude of integration challenges reminds us of old software problems. Some of the issues present in the ML software engineering practice are new. But the majority of the software engineering concerns have a historical smell. Going back to the early days of software engineering can help with today\u2019s ML problems.", "Following in the footsteps of the Clean Code method we can see direct parallels/analogies. All ML software we build is software after all. Replacing \u201cSoftware\u201d with \u201cMachine Learning Component\u201d in the original principles is interesting. It puts a new spin on old tricks.", "So first, what are the benefits of clean machine learning code? There are at least two of them here. If these benefits interest you, keep on reading:", "1. Clean Code reduces the cost of change of your machine learning pipelines.", "2. Clean Code increases the optimal responsiveness to change of your machine learning pipelines.", "Readers familiar with the Clean Code/Architecture books will notice one thing. I am extrapolating from those texts. This is to expose the cross-cutting concerns in ML and traditional software engineering. Please go buy the books to support the original author. Now that we got that out of the way, here comes the main \u201cadapted\u201d principles of clean machine learning code.", "We don\u2019t really need principles, rules, constraints, and Waffle makers. Well, maybe waffle makers. But the next few points are abstract principles we can use to promote clean code. These techniques can seem sometimes too extreme. Yet, they are easier to understand than a multi-author model pipeline. Add to that 5 different team members that included 10 assumptions each. Let\u2019s see what these component-level principles are, and how they can benefit the practice.", "Two machine learning components are coupled when at least one of them uses the other. The less these ML components know about each other, the looser they are coupled. An ML component that is only loosely coupled to its environment can be more easily changed, or replaced than a strongly coupled component.", "Cohesion is the degree to which machine learning elements of a whole belong together. Think peanut butter and jelly. Methods and fields in a single machine learning class, as well as classes of an ML component, should have high cohesion. High cohesion in ML classes and ML components results in simpler, more easily understandable machine learning code structure and design. This is similar to the Single Responsibility Principle but at the component level. Things that change for the same reasons and at the same time should be grouped together. ML components that do change for different reasons or at different times should be kept separate.", "ML software systems have to commonly be maintained, extended and changed for a long time. Keeping change local reduces involved costs and risks for the machine learning pipelines. Keeping ML components changes local means that there are boundaries in the design which changes do not cross.", "We normally build machine learning software by adding, extending or changing component features. However, removing ML elements is important so that the overall design of the machine learning pipeline can be kept as simple as possible. When an ML block gets too complicated, it has to be removed and replaced with one or more simpler ML blocks.", "Break your machine learning system down into Data/ML components into sizes you can grasp within your mind. The goal is to predict the consequences of changes easily (dependencies, control flow, etc,\u2026). Machine learning classes should be around 100 lines. Machine learning methods such as transform, fit, predict and predict_proba methods should max out at 15 lines.", "Being able to test a machine learning component in ISOLATION is a sign of good architecture. Not being able to test a machine learning component in isolation is a sign of a crony architecture.", "What are some useful Software Design Principles to achieve the above goals?", "The SOLID software design principles were collected/refined by Robert Martin, \u201cUncle Bob\u201d, in his excellent books. These principles aim to give practical guidance to software engineers. They act as strong guidelines that are as applicable to traditional software as to machine learning software. Let\u2019s see what happens when we adapt them to the machine learning domain, shall we?", "A machine learning component should have one, and only one, reason to change.", "To determine if a class/function has many responsibilities check the actors it is serving [4]. A warning sign is when there is more than one actor that could ask for changes to this component. There is a high chance that the component contains more than a single responsibility. The owner needs to split this component into more fine-grained logical parts.", "In the above diagram, the MLModel class will have to change due to many sources. Here we have the fitting method, schema of the input data and metric publishing. This class reacts to changes in data processing, feature engineering, and model selection. The owner needs to partition this class into machine learning sub-components.", "You should be able to extend the behavior of a machine learning component without modifying it.", "For example, in this diagram, the ModelManager started by using the SimpleFeaturizer class. However, in version 2, it needed to use the SuperFeaturizer. Due to the tight coupling, it was not possible to swap in the SuperFeaturizer. To support the new SuperFeaturizer would require changing the ModelManager class.", "This is a violation of the open-closed principle: Old code should not have to change to add functionality.", "The solution is to abstract away the Featurizer in an interface/abstract class. Then we make the dependency arrows point towards the abstract components. After the modification the SimpleFeaturizer and SuperFeaturizer are interchangeable. The ModelManager can use either one without knowing the internals of each strategy. Besides, the two Featurizers do not need to know about the ModelManager. This way the developer can test them in isolation. In more dynamic languages like Python, there is no explicit need to build the interface. That is unless there is strict type checking using the \u201cisinstance\u201d method. The important part is to design the interacting classes to point toward abstraction. By making the ModelManager only aware of the interface it can use either type of Featurizers. This allows the developer to add a third SuperDuperFeaturizer without any changes to the ModelManager or the other sub-classes of Featurizer. This is true as long as the Featurizers implement the shared interface. The ModelManager can ignore the implementation details of the concrete sub-classes. Hardwiring components usually makes the model space exploration tedious, viscous and slow. This helps the experimental velocity of model types, architectures, and other model customizations.", "We want to cut the amount of old ML code that needs to change to add the new ML code. This is done by partitioning the full ML pipeline into components. Then we arrange those components into acyclic directed graphs. To achieve that we make the dependencies arrows point towards abstract components. This allows us to isolate the components that we want to protect from change and/or that are more stable. Information hiding and directional control protect the stable ML components. The fast-moving ML components also benefit from being free to change at will.", "Coming soon, still cooking an example\u2026", "Make fine-grained machine learning components interfaces that are client-specific.", "An example of an interface segregation strategy is in the above diagram. Here an ML component, ImageFeaturizer, depends on another component DataGenerator for the function gen_images. The DataGenerator has many other unrelated operations: gen_text and gen_rows.", "The problem is that changing gen_text in component DataGenerator might lead to the need to change component ImageFeaturizer.", "This is even if ImageFeaturizer does not care about gen_text in the DataGenerator.", "The goal of this principle is to avoid depending on components with extra baggage. This extra functionality might impact users laterally. Users may need to implement unnecessary functions to be compatible with their dependencies. This principle advises to create client-specific interfaces. This is considered better than one big generic interface for all clients.", "Depend on machine learning pipeline abstractions, not on machine learning pipeline concretions.", "Dependency arrows should point toward the stable components in your machine learning pipeline. If you expect an unstable component to change often, protect the components that need to depend on it. The dependency inversion of control design method helps do that.", "This principle allows for a plugin architecture. The application can be extended with external plugins. This is done by creating interfaces. These interfaces isolate the application core components from the plugins.", "Take the interaction between a ModelTrainer class and various machine learning libraries. The ModelTrainer goal is to build some sort of classifier. Depending on the predictive performance we might need different libraries. Here the candidates are Scikit-Learn, Tensorflow, and PyTorch.", "The application\u2019s core goal is not: \u201cLet\u2019s use one of these excellent libraries in our project\u201d. The core goal is to build models/applications that bring value to users. The ML libraries are details that should not interfere with the application core.", "Dependency injection is a method to perform this dependency inversion. It helps isolate the core classification application from the ML library plugins. First, we make the model trainer depend on the ModelBuilder interface. This makes the ModelTrainer able to use any model builder implementation interchangeably. However, we can take this further. The ModelTrainer is a high-level component that should not know about low-level concerns. These low-level concerns are in the individual implementations. To resolve this we can use an assembler. This \u201cwires\u201d the model builder implementation with the model trainer at run time. The ModelTrainer can ignore the specific model builder the application is using. This removes the dependency from the model trainer to the model builder implementations.", "All this design effort has one major benefit. You are able to test your components in isolation. The more tests we add, the more coverage we get for the components. This leads the developers to trust the code they are interacting with. This is not only reserved for established software engineering components. It can be applied to machine learning components as well.The key aspect of TDML is that it must not be used as an afterthought. The tests must be written before the code. Writing the tests after the code is a lost battle.", "The relationship between machine learning tech debt and the Clean Code guidelines was explored in [5]. We can match common large production machine learning pipelines problems to the clean code concepts we covered.", "Entanglement comes from ML data and code being deeply intertwined. This leads to the violation of the SRP principle. Another manifestation of the SRP violation is the presence of glue code components. These bring a large set of semi-related functionality in one big interconnected system.", "Hidden feedback loops occur when the deployed models change future training distributions. The model influences the actions of clients. Then the clients react by generating different outcomes than seen in the past. In fact, each re-training of the model with this new data allows an EXTERNAL source of change to modify your software DIRECTLY!. This is a clear violation of the Open-Close Principle. The model is potentially open to change by directly adapting to new data. Some visible feedback loops can be protected against by iteratively applying the OCP, however some hidden feedback is harder to detect. One example is \u201caggregated features\u201d. Weekly sums take a while to adapt to new data. The models will need new versions of the training code to handle this change in the ml pipeline. If the system is not following the OCP principle, changes will be costly and developers might decide to postpone the changes. This delay accentuates the feedback loops that tend to compound. Following the OCP principle can help mitigate these feedback loops faster.", "Undeclared consumers start appearing when a component provides a generic interface. This allows for generic undifferentiated access. The ISP guideline encourages the developer to build client-specific interfaces. This principle leads to finer interfaces and reduces the risk of having undeclared consumers.", "Pipeline jungles usually appear at the same time as the Glue code problem. This represents how the application transforms/moves data around the various components. Pipelines operate at the lowest abstraction level. This is where actual data gets moved and transformed, and we end up with very rigid concretions. This means that the pipeline cannot be modified without torturing the code. The goal of this torture is to support the many experimental code paths. To do that developers create duplicate code and unhealthy dependencies. The OCP and ISP principles are violated, to get something working. The developers start creating a web of dependencies that go against the DIP principle. The dependencies start going towards the concrete implementations. The more stable/abstract classes and constructs design is postponed. This strategy intertwines feature engineering steps with model selection steps. Model training with model publishing. It becomes hard to test in isolation. Testing the feature engineering step without the model selection step becomes tricky. Testing the model publishing without the model training gets harder. The developers can remedy pipeline jungles by refactoring using the SRP, ISP, OCP and DIP principles.", "Here is a probable scenario if we don\u2019t take ownership of our profession by building and applying principles and best practices:", "I hope this little excursion to the land of the Clean Code world helped. You now can hopefully use this as a starting point to keep your machine learning craftsmanship up to high standards.", "Please note that the opinions expressed in this post are my own and not necessarily those of my employer.", "4. Robert Martin about the single responsibility principle:", "5. Thoughful Machine Learning with Python, Book", "6. Example Python Code from dboyliao:", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Senior Data Science Platform Engineer \u2014 CS PhD\u2014 Cloudamize-Appnexus-Xandr-AT&T-Microsoft \u2014 Books: www.moussataifi.com/books"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fbd32bd0e9212&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclean-machine-learning-code-bd32bd0e9212&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclean-machine-learning-code-bd32bd0e9212&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclean-machine-learning-code-bd32bd0e9212&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclean-machine-learning-code-bd32bd0e9212&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----bd32bd0e9212--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----bd32bd0e9212--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://farmi.medium.com/?source=post_page-----bd32bd0e9212--------------------------------", "anchor_text": ""}, {"url": "https://farmi.medium.com/?source=post_page-----bd32bd0e9212--------------------------------", "anchor_text": "Moussa Taifi PhD"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F215bedf6878d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclean-machine-learning-code-bd32bd0e9212&user=Moussa+Taifi+PhD&userId=215bedf6878d&source=post_page-215bedf6878d----bd32bd0e9212---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbd32bd0e9212&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclean-machine-learning-code-bd32bd0e9212&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbd32bd0e9212&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclean-machine-learning-code-bd32bd0e9212&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://leanpub.com/cleanmachinelearningcode", "anchor_text": "https://leanpub.com/cleanmachinelearningcode"}, {"url": "https://xandr.att.jobs/job/new-york/data-science-platform-engineer-python-scikit-learn-tensorflow-keras-adtech-marketplace/25348/13937710", "anchor_text": "https://xandr.att.jobs/job/new-york/data-science-platform-engineer-python-scikit-learn-tensorflow-keras-adtech-marketplace/25348/13937710"}, {"url": "https://www.youtube.com/watch?v=NeXQEJNWO5w", "anchor_text": "https://www.youtube.com/watch?v=NeXQEJNWO5w"}, {"url": "https://www.bbv.ch/images/bbv/pdf/downloads/V2_Clean_Code_V3.pdf", "anchor_text": "https://www.bbv.ch/images/bbv/pdf/downloads/V2_Clean_Code_V3.pdf"}, {"url": "https://cleancoders.com", "anchor_text": "https://cleancoders.com"}, {"url": "https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html", "anchor_text": "https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html"}, {"url": "https://www.amazon.com/Thoughtful-Machine-Learning-Python-Test-Driven/dp/1491924136", "anchor_text": "Thoughful Machine Learning with Python, Book"}, {"url": "https://github.com/dboyliao/SOLID", "anchor_text": "https://github.com/dboyliao/SOLID"}, {"url": "https://medium.com/tag/software-engineering?source=post_page-----bd32bd0e9212---------------software_engineering-----------------", "anchor_text": "Software Engineering"}, {"url": "https://medium.com/tag/ml-engineering?source=post_page-----bd32bd0e9212---------------ml_engineering-----------------", "anchor_text": "ML Engineering"}, {"url": "https://medium.com/tag/data-science?source=post_page-----bd32bd0e9212---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/production?source=post_page-----bd32bd0e9212---------------production-----------------", "anchor_text": "Production"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----bd32bd0e9212---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbd32bd0e9212&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclean-machine-learning-code-bd32bd0e9212&user=Moussa+Taifi+PhD&userId=215bedf6878d&source=-----bd32bd0e9212---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbd32bd0e9212&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclean-machine-learning-code-bd32bd0e9212&user=Moussa+Taifi+PhD&userId=215bedf6878d&source=-----bd32bd0e9212---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbd32bd0e9212&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclean-machine-learning-code-bd32bd0e9212&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----bd32bd0e9212--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fbd32bd0e9212&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclean-machine-learning-code-bd32bd0e9212&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----bd32bd0e9212---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----bd32bd0e9212--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----bd32bd0e9212--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----bd32bd0e9212--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----bd32bd0e9212--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----bd32bd0e9212--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----bd32bd0e9212--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----bd32bd0e9212--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----bd32bd0e9212--------------------------------", "anchor_text": ""}, {"url": "https://farmi.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://farmi.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Moussa Taifi PhD"}, {"url": "https://farmi.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "412 Followers"}, {"url": "http://www.moussataifi.com/books", "anchor_text": "www.moussataifi.com/books"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F215bedf6878d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclean-machine-learning-code-bd32bd0e9212&user=Moussa+Taifi+PhD&userId=215bedf6878d&source=post_page-215bedf6878d--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F524d0004e06d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclean-machine-learning-code-bd32bd0e9212&newsletterV3=215bedf6878d&newsletterV3Id=524d0004e06d&user=Moussa+Taifi+PhD&userId=215bedf6878d&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}