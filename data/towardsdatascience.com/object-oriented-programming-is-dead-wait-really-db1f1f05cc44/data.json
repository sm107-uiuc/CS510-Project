{"url": "https://towardsdatascience.com/object-oriented-programming-is-dead-wait-really-db1f1f05cc44", "time": 1683014122.3945549, "path": "towardsdatascience.com/object-oriented-programming-is-dead-wait-really-db1f1f05cc44/", "webpage": {"metadata": {"title": "Object-oriented programming is dead. Wait, really? | by Ari Joury, PhD | Towards Data Science", "h1": "Object-oriented programming is dead. Wait, really?", "description": "Programming in the 1960s had a big problem: computers weren\u2019t that powerful yet, and somehow they needed to split the capacities between data structures and procedures. This meant that if you had a\u2026"}, "outgoing_paragraph_urls": [{"url": "https://medium.com/javascript-scene/the-forgotten-history-of-oop-88d71b9b2d9f", "anchor_text": "split the capacities", "paragraph_index": 0}, {"url": "https://archive.org/details/byte-magazine-1981-08/page/n75/mode/2up", "anchor_text": "until 1981", "paragraph_index": 3}, {"url": "https://www.linkedin.com/jobs/object-oriented-programming-jobs/", "anchor_text": "market", "paragraph_index": 3}, {"url": "https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53", "anchor_text": "criticism", "paragraph_index": 4}, {"url": "http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf", "anchor_text": "another decade later", "paragraph_index": 8}, {"url": "https://www.defprogramming.com/quotes-by/joe-armstrong/", "anchor_text": "proclaimed", "paragraph_index": 18}, {"url": "https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53", "anchor_text": "viral story", "paragraph_index": 26}, {"url": "https://towardsdatascience.com/want-to-get-started-in-functional-programming-enter-scala-ea71e5cfe5f8", "anchor_text": "functional programming", "paragraph_index": 37}, {"url": "https://towardsdatascience.com/why-developers-are-falling-in-love-with-functional-programming-13514df4048e", "anchor_text": "gaining traction", "paragraph_index": 40}, {"url": "https://medium.com/better-programming/object-oriented-programming-the-trillion-dollar-disaster-92a4b666c7c7", "anchor_text": "harsh criticism", "paragraph_index": 40}, {"url": "https://arijoury.medium.com/membership", "anchor_text": "https://arijoury.medium.com/membership", "paragraph_index": 49}], "all_paragraphs": ["Programming in the 1960s had a big problem: computers weren\u2019t that powerful yet, and somehow they needed to split the capacities between data structures and procedures.", "This meant that if you had a large set of data, you couldn\u2019t do that much with it without pushing a computer to its limits. On the other hand, if you needed to do a lot of things, you couldn\u2019t use too much data or the computer would take forever.", "Then Alan Kay came around in 1966 or 1967 and theorized that one could use encapsulated mini-computers that didn\u2019t share their data, but rather communicated through messaging. This way, compute resources could be used much more economically.", "Despite the ingenuity of the idea, it would take until 1981 until object-oriented programming hit the mainstream. Since then, however, it hasn\u2019t stopped attracting new and seasoned software developers alike. The market for object-oriented programmers is as busy as ever.", "But in recent years, the decade-old paradigm has received more and more criticism. Could it be that, four decades after object-oriented programming hit the masses, technology is outgrowing this paradigm?", "The main idea behind object-oriented programming is as simple as can be: you try to break a program in parts that are as powerful as the whole. It follows that you couple pieces of data and those functions that only get used on the data in question.", "Note that this only covers the notion of encapsulation, that is, data and functions that sit inside an object are invisible to the outside. One can only interact with the contents of an object through messages, typically called getter and setter functions.", "What is not contained in the initial idea, but is considered essential to object-oriented programming today, are inheritance and polymorphism. Inheritance basically means that developers can define subclasses that have all the properties that their parent class has. This wasn\u2019t introduced to object-oriented programming until 1976, a decade after its conception.", "Polymorphism came to object-oriented programming another decade later. In basic terms, it means that a method or an object can serve as a template for others. In a sense it\u2019s a generalization of inheritance, because not all properties of the original method or object need to be transmitted to the new entity; instead, you can choose to override properties.", "What\u2019s special about polymorphism is that even if two entities depend on each other in the source code, a called entity works more like a plugin. This makes life easier for developers because they don\u2019t have to worry about dependencies at runtime.", "It\u2019s worth mentioning that inheritance and polymorphism aren\u2019t exclusive to object-oriented programming. The real differentiator is encapsulating pieces of data and the methods that belong to them. In a time where compute resources were a lot scarcer than today, this was a genius idea.", "Once object-oriented programming hit the masses, it transformed the way developers see code. What prevailed before the 1980s, procedural programming, was very machine-oriented. Developers needed to know quite a bit about how computers work to write good code.", "By encapsulating data and methods, object-oriented programming made software development more human-centered. It matches human intuition that the method drive() belongs to the data group car, but not to the group teddybear.", "When inheritance came around, that was intuitive, too. It makes perfect sense that Hyundai is a subgroup of car and shares the same properties, but PooTheBear does not.", "This sounds like a powerful machinery. The problem, however, is that programmers who only know object-oriented code will force this way of thinking on everything they do. It\u2019s like when people see nails everywhere because all they have is a hammer. As we will see below, when your toolbox contains only a hammer, that can lead to fatal problems.", "Imagine you\u2019re setting up a new program, and you\u2019re thinking about designing a new class. Then you think back to a neat little class that you\u2019ve created for another project, and you realize that it would be perfect for what you\u2019re currently trying to do.", "No problem! You can reuse the class from the old project for your new one.", "Except for the fact that this class may actually be a subclass of another class, so now you need to include the parent class too. Then you realize that the parent class depends on other classes as well, and you end up including heaps of code.", "The creator of Erlang, Joe Armstrong, famously proclaimed:", "The problem with object-oriented languages is they\u2019ve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.", "That pretty much says it all. It\u2019s fine to reuse classes; in fact, it can be a major virtue of object-oriented programming.", "But don\u2019t take it to the extreme. Sometimes you\u2019re better off writing a new class instead of including masses of dependencies for the sake of DRY (don\u2019t repeat yourself).", "Imagine you\u2019ve successfully reused a class from another project for your new code. What happens if the base class changes?", "It can corrupt your entire code. You might not even have touched it. But one day your project works like a charm, the next day it doesn\u2019t because somebody changed a minor detail in the base class that ends up being crucial for your project.", "The more you use inheritance, the more maintenance you potentially have to do. So even though reusing code seems very efficient in the short term, it can get costly in the long run.", "Inheritance is this cute little thing where we can take properties of one class and transfer it to others. But what if you want to mix the properties of two different classes?", "Well, you can\u2019t do it. At least not in an elegant way. Consider for example the class Copier. (I borrowed this example, as well as some info about the problems presented here, from Charles Scalfani\u2019s viral story Goodbye, Object Oriented Programming.) A copier scans the content of a document and prints it on an empty sheet. So should it be the subclass of Scanner, or of Printer?", "There simply is no good answer. And even though this problem isn\u2019t going to break your code, it comes up often enough to be frustrating.", "In the diamond problem, the question was which class Copier is a subclass of. But I lied to you \u2014 there is a neat solution. Let Copier be the parent class, and Scanner and Printer be subclasses that only inherit a subset of the properties. Problem fixed!", "That\u2019s neat. But what if your Copier is only black-and-white, and your Printer can handle color, too? Isn\u2019t Printer in that sense a generalization of Copier? What if Printer is connected to WiFi, but Copier is not?", "The more properties you heap on a class, the more difficult it becomes to establish proper hierarchies. Really, you\u2019re dealing with clusters of properties, where Copier shares some, but not all properties of Printer, and vice versa. And if you try to stick that into hierarchies, and you have a big complex project, this might lead you to a messy disaster.", "You might say, alright, then we\u2019ll just do object-oriented programming without hierarchies. Instead, we could use clusters of properties, and inherit, extend, or override properties as needed. Sure, that would be a bit messy, but it would be an accurate representation of the problem at hand.", "There\u2019s just one problem. The whole point of encapsulation is to keep pieces of data safe from one another and thus make computing more efficient. This doesn\u2019t work without strict hierarchies.", "Consider what happens if an object A overrides the hierarchy by interacting with another object B. It doesn\u2019t matter what relationship A has with B, except that B is not the direct parent class. Then A must contain a private reference to B, because otherwise, it couldn\u2019t interact.", "But if A contains the information that the children of B also have, then that information can be modified in multiple places. Therefore, the information about B isn\u2019t safe anymore, and encapsulation is broken.", "Although many object-oriented programmers build programs with this kind of architecture, this isn\u2019t object-oriented programming. It\u2019s just a mess.", "What these five problems have in common is that they implement inheritance where it\u2019s not the best solution. Since inheritance wasn\u2019t even included in the original form of object-oriented programming, I wouldn\u2019t call these problems inherent to object orientation. They\u2019re just examples of a dogma taken too far.", "Not only object-oriented programming can be overdone, though. In pure functional programming, it\u2019s extremely difficult to process user input or print messages on a screen. Object-oriented or procedural programming is much better for these purposes.", "Still, there are developers who try to implement these things as pure functions and blow their code up to dozens of lines that nobody can understand. Using another paradigm, they could have easily reduced their code to a couple of readable lines.", "Paradigms are a bit like religions. They\u2019re good in moderation \u2014 arguably, Jesus, Mohamed and Buddha said some pretty cool stuff. But if you follow them to the last little detail, you might end up making the lives of yourself and of people around you quite miserable.", "The same goes for programming paradigms. There\u2019s no doubt that functional programming is gaining traction, whereas object-oriented programming has attracted some harsh criticism in the last few years.", "It makes sense to get informed about new programming paradigms and use them when appropriate. If object-oriented programming is the hammer that makes developers see nails wherever they go, is that a reason to throw the hammer out the window? No. You add a screwdriver to your toolbox, and maybe a knife or a pair of scissors, and you choose your tool based on the problem at hand.", "Functional and object-oriented programmers alike, stop treating your paradigms like a religion. They\u2019re tools, and they all have their use somewhere. What you use should only depend on what problems you are solving.", "At the end of the day, the \u2014 admittedly rather heated \u2014 debate of functional versus object-oriented programming boils down to this: could we be reaching the end of the era of object-oriented programming?", "More and more problems are coming up where functional programming is often the more efficient option. Think data analysis, machine learning, and parallel programming. The more you get into those fields, the more you\u2019ll love functional programming.", "But if you look at the status quo, there are a dozen offers for object-oriented programmers to one offer for functional coders. That doesn\u2019t mean you won\u2019t get a job if you prefer the latter; functional developers are still pretty scarce these days.", "The most likely scenario is that object-oriented programming will stay around for another decade or so. Sure, the avant-garde is functional, but that doesn\u2019t mean you should ditch object-oriented yet. It\u2019s still incredibly good to have in your repertoire.", "So don\u2019t throw object-oriented programming out of your toolbox in the next few years. But make sure that it\u2019s not the only tool you have.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Lost in my thoughts, mostly about tech. https://arijoury.medium.com/membership"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fdb1f1f05cc44&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-is-dead-wait-really-db1f1f05cc44&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-is-dead-wait-really-db1f1f05cc44&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-is-dead-wait-really-db1f1f05cc44&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-is-dead-wait-really-db1f1f05cc44&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----db1f1f05cc44--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----db1f1f05cc44--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://arijoury.medium.com/?source=post_page-----db1f1f05cc44--------------------------------", "anchor_text": ""}, {"url": "https://arijoury.medium.com/?source=post_page-----db1f1f05cc44--------------------------------", "anchor_text": "Ari Joury, PhD"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F593908e0206&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-is-dead-wait-really-db1f1f05cc44&user=Ari+Joury%2C+PhD&userId=593908e0206&source=post_page-593908e0206----db1f1f05cc44---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdb1f1f05cc44&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-is-dead-wait-really-db1f1f05cc44&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdb1f1f05cc44&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-is-dead-wait-really-db1f1f05cc44&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@vale_zmeykov?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Vale Zmeykov"}, {"url": "https://unsplash.com/s/photos/geometry-human?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://medium.com/javascript-scene/the-forgotten-history-of-oop-88d71b9b2d9f", "anchor_text": "split the capacities"}, {"url": "https://archive.org/details/byte-magazine-1981-08/page/n75/mode/2up", "anchor_text": "until 1981"}, {"url": "https://www.linkedin.com/jobs/object-oriented-programming-jobs/", "anchor_text": "market"}, {"url": "https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53", "anchor_text": "criticism"}, {"url": "https://towardsdatascience.com/why-developers-are-falling-in-love-with-functional-programming-13514df4048e", "anchor_text": "Why developers are falling in love with functional programmingFrom Python to Haskell, the trend isn\u2019t going away anytime soontowardsdatascience.com"}, {"url": "http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf", "anchor_text": "another decade later"}, {"url": "https://unsplash.com/@windows?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Windows"}, {"url": "https://unsplash.com/collections/9691452/business?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://www.defprogramming.com/quotes-by/joe-armstrong/", "anchor_text": "proclaimed"}, {"url": "https://unsplash.com/@windows?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Windows"}, {"url": "https://unsplash.com/collections/9691452/business?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53", "anchor_text": "viral story"}, {"url": "https://unsplash.com/@daugirl?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Emma Dau"}, {"url": "https://unsplash.com/collections/9691452/business?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://towardsdatascience.com/want-to-get-started-in-functional-programming-enter-scala-ea71e5cfe5f8", "anchor_text": "functional programming"}, {"url": "https://towardsdatascience.com/why-developers-are-falling-in-love-with-functional-programming-13514df4048e", "anchor_text": "gaining traction"}, {"url": "https://medium.com/better-programming/object-oriented-programming-the-trillion-dollar-disaster-92a4b666c7c7", "anchor_text": "harsh criticism"}, {"url": "https://medium.com/madhash/what-is-better-functional-programming-or-object-oriented-9a116c704420", "anchor_text": "What is better \u2014 Functional programming or Object Oriented?You\u2019re probably asking the wrong questionmedium.com"}, {"url": "https://medium.com/tag/programming?source=post_page-----db1f1f05cc44---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/object-oriented?source=post_page-----db1f1f05cc44---------------object_oriented-----------------", "anchor_text": "Object Oriented"}, {"url": "https://medium.com/tag/functional-programming?source=post_page-----db1f1f05cc44---------------functional_programming-----------------", "anchor_text": "Functional Programming"}, {"url": "https://medium.com/tag/software-development?source=post_page-----db1f1f05cc44---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----db1f1f05cc44---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fdb1f1f05cc44&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-is-dead-wait-really-db1f1f05cc44&user=Ari+Joury%2C+PhD&userId=593908e0206&source=-----db1f1f05cc44---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fdb1f1f05cc44&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-is-dead-wait-really-db1f1f05cc44&user=Ari+Joury%2C+PhD&userId=593908e0206&source=-----db1f1f05cc44---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdb1f1f05cc44&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-is-dead-wait-really-db1f1f05cc44&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----db1f1f05cc44--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fdb1f1f05cc44&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-is-dead-wait-really-db1f1f05cc44&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----db1f1f05cc44---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----db1f1f05cc44--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----db1f1f05cc44--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----db1f1f05cc44--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----db1f1f05cc44--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----db1f1f05cc44--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----db1f1f05cc44--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----db1f1f05cc44--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----db1f1f05cc44--------------------------------", "anchor_text": ""}, {"url": "https://arijoury.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://arijoury.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Ari Joury, PhD"}, {"url": "https://arijoury.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "6.2K Followers"}, {"url": "https://arijoury.medium.com/membership", "anchor_text": "https://arijoury.medium.com/membership"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F593908e0206&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-is-dead-wait-really-db1f1f05cc44&user=Ari+Joury%2C+PhD&userId=593908e0206&source=post_page-593908e0206--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F1b4593a6442&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fobject-oriented-programming-is-dead-wait-really-db1f1f05cc44&newsletterV3=593908e0206&newsletterV3Id=1b4593a6442&user=Ari+Joury%2C+PhD&userId=593908e0206&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}