{"url": "https://towardsdatascience.com/bellman-ford-single-source-shortest-path-algorithm-on-gpu-using-cuda-a358da20144b", "time": 1683012722.712242, "path": "towardsdatascience.com/bellman-ford-single-source-shortest-path-algorithm-on-gpu-using-cuda-a358da20144b/", "webpage": {"metadata": {"title": "Bellman-Ford Single Source Shortest Path Algorithm on GPU using CUDA | by Raj Sengo | Towards Data Science", "h1": "Bellman-Ford Single Source Shortest Path Algorithm on GPU using CUDA", "description": "Parallel algorithm to compute shortest distance from a source vertex to all other vertices in a connected graph"}, "outgoing_paragraph_urls": [{"url": "http://users.diag.uniroma1.it/challenge9/download.shtml", "anchor_text": "The Center for Discrete Mathematics and Theoretical Computer Science. 9th DIMACS Implementation Challenge", "paragraph_index": 3}, {"url": "https://developer.nvidia.com/cuda-zone", "anchor_text": "Compute Unified Device Architecture CUDA (Compute Unified Device Architecture) is a parallel computing platform and APIs created by Nvidia", "paragraph_index": 5}, {"url": "https://portal.tacc.utexas.edu/user-guides/maverick2", "anchor_text": "Texas Advanced Computing Center (TACC) Maverick2 supercomputer", "paragraph_index": 12}, {"url": "https://github.com/stephanGarland", "anchor_text": "Stephan Garland", "paragraph_index": 15}, {"url": "http://www.ece.utexas.edu/people/faculty/vijay-garg", "anchor_text": "Dr. Vijay Garg", "paragraph_index": 15}], "all_paragraphs": ["Traversing large graphs to compute different information has various use cases in the real-world like social media networks, communication networks, search engine indexing & page rank, VLSI design and biological network analysis. Bellman-Ford, Dijkstra\u2019s and Delta Stepping are widely used Single Source Shortest Path Algorithm (SSSP) algorithms. Dijkstra\u2019s algorithm provides a work efficient implementation, whereas Bellman-Ford provides scope for easy parallel implementation. Delta Stepping algorithm introduces a trade-off between the two. This article presents three parallel implementation techniques to accelerate the Bellman-Ford SSSP algorithm using Compute Unified Device Architecture (CUDA) on General-purpose computing on graphics processing units (GPGPU). We also compare the performance of all three variations on large graphs. We observed that the run time of a sequential implementation can be reduced by 99.4% for a sparse graph with 400k vertices and 1 million edges with optimized CUDA implementation.", "A Graph G = (V, E) where V is set of vertices and E is set of Edges. An edge (u,v,w) is a path from node u to v and its weight is w. If we think the nodes as cities, then the edges are routes between the cities and weights are the distance between the cities.", "In the above example graph, SSSP from source vertex \u201cA\u201d to all other vertices is given by the blue arrows. i.e A \u2192 C \u2192 D \u2192 B \u2192 E", "We used two different types of large graphs. USA road network graph data sets from DIMACS Shortest Paths Implementation challenge (The Center for Discrete Mathematics and Theoretical Computer Science. 9th DIMACS Implementation Challenge) and random generated graphs using SPRAND tool by Cherkassky, Goldberg and Radzik (Reference [1])", "A graph G(V, E) is generally represented via an adjacency matrix or adjacency list. For a sparse graph such as road networks, adjacency list is the preferred representation, since it takes less space. Compressed Sparse Row (CSR) representation is an alternate form of an adjacency list, in which the lists of vertices are packed into one single large array. We found that this representation is suitable for CUDA implementation (Reference [2], [3]). As shown in the below figure, four arrays are used to represent the graph; a vertex array V that stores all the vertices, an index array I that stores the starting position of the adjacency list of edges for each V[i], an edge array E, and a weight array W that stores the weights of each edge. I[i+1]\u2212I[i] provides the number of edges of V[i]", "An increase in the use of general-purpose computing on graphics processing units (GPGPU) gives us massive scale parallel computing capabilities. The GPGPU is based on single instruction, multiple thread (SIMT) execution model in which each thread executes the same code. Compute Unified Device Architecture CUDA (Compute Unified Device Architecture) is a parallel computing platform and APIs created by Nvidia. It exposes GPU parallelism for general-purpose computing and retains performance. It\u2019s developed based on industry-standard C++. CUDA consists of a small set of extensions to enable heterogeneous programming.", "The GPGPU consists of several streaming multiprocessors (SMs). Each SM consists of several streaming processors(SPs). Each SM has its memory, known as shared memory, which is shared across all the SPs in the SM. From a developer\u2019s standpoint GPUs can be viewed as grids, SMs can be viewed as blocks and SPs can be viewed as threads. The kernel is the piece of code executed by threads. Each thread has its ID that plays a vital role in determining which part of the input data to be accessed by the thread.", "Bellman-Ford algorithm is a simple algorithm which uses edge relaxation technique. It relaxes all the edges, | V | \u2212 1 times. Where | V | is the number of vertices in the graph. It can also work on the graph with negative weight edges provided there is no negative edge cycle. For this study, only graphs with positive edge weights were considered.", "It\u2019s a technique to correct the approximate distances with the correct ones. In the following graph below, d[u] is the distance from source \u201cs\u201d to \u201cu\u201d and d[v] is the distance from source \u201cs\u201d to \u201cv\u201d. There is an edge between \u201cu\u201d and \u201cv\u201d with weight \u201cw\u201d. if the distance of v is more than the distance of u + weight of (u, v) then the distance of v is updated with the distance of u + weight of (u, v).", "In our first approach, we introduced a monolithic CUDA kernel in which each vertex of the graph is assigned to a separate thread. Each thread relaxes all the outgoing edges of the vertex identified by the thread ID. In this approach, the number of GPU blocks is calculated during run time based on the number of vertices in the input graph. This type of kernel assumes we have adequate threads to cover all vertices of the input graph.", "In our second technique to accelerate the parallel implementation, we used grid stride in the CUDA kernel. The stride is calculated using blockDim.x * gridDim.x, which is equal to the total number threads in the grid. As an example, if there are 1024 threads in the grid, thread 0 will process the vertex at indices 0, 1024, 2048, etc. This grid stride loop approach provides scalability and thread reuse. It also ensures that no thread is idle and every thread does an equal amount of work", "To further optimize the performance, we introduced a boolean array F of size |V|. This array is initialized to false at the beginning for all vertices of the graph. The source is set to true. When a vertex is updated with a shorter distance from the source as part of the relaxation, its corresponding flag in the F array is set to true. This indicates that all the outgoing edges from that vertex need further relaxation in the next iteration. The relax kernel uses this information and relaxes only if the flag is set to true for the corresponding vertex. This approach combined with the grid-stride loop reduces the work done by each thread that is not necessary hence ensures further speed up of the overall execution.", "We used the Texas Advanced Computing Center (TACC) Maverick2 supercomputer system to analyze the performance of all our implementations on large graphs. Maverick2 has Nividia GeForce GTX 1080 Ti GPU device with 28 SMs and 128 SPs per SM and 11GB of global memory. Each SM has around 49 KB of shared memory.", "Our analysis reveals that version 3 of the implementation performed the best. The performance was even better on randomly generated dense graphs in comparison with sparse real-world road network graphs. First, we recorded that the basic sequential implementation took 3.25 hours to perform SSSP calculation on a sparse New York road network graph with 400k+ vertices, and over 1 million edges. In comparison, CUDA version-1 took 39 seconds, version-2 took 42 seconds, and version-3 took 16 seconds to compute the same. We also observed that version 2 i.e grid-stride loop kernel performed better for larger graphs with more than 1 million vertices and 4 million edges. The performance was even better for the randomly generated dense graphs. This indicates that the overhead of launching a new thread block reduces with the introduction of the grid-stride loop, which ensures the block size does not increase as the input increases, thus allowing each thread to handle more work. The table below shows the elapsed run time of our Bellman-Ford implementations for various large graphs.", "We presented three variations of parallel implementations of Bellman-Ford single source shortest path algorithm on GPU using CUDA. The kernel with grid-stride loop and the logic to relax edges only when needed, performed better for larger graphs from 1\u201310 million edges. We used CSR representation in our implementations. This approach takes more space for dense graphs. Further study can be done to use an alternate format (like adjacency matrix) for dense graphs and use of shared memory inside the CUDA blocks to study the performance.", "This blog post is based on a term paper that I and my partner Stephan Garland submitted for the Parallel Algorithms class at The University of Texas, Austin, Summer 2020. Many thanks to Dr. Vijay Garg for the well structured and wonderfully taught Parallel Algorithms class.", "[1]Boris Cherkassky, Andrew V. Goldberg and Tomasz Radzik. Shortest Paths Algorithms: Theory And Experimental Evaluation. Mathematical Programming, pages 129\u2013174. 1993.", "[2]Pankhari Agarwal and Maitreyee Dutta. New Approach of Bellman-Ford Algorithm on GPU using Compute Unified Design Architecture (CUDA). International Journal of Computer Applications (0975\u20138887, 110 \u2014 \u211613.2015.", "[3]Pawan Harish and P. J. Narayanan. Accelerating large graph algorithms on the GPU using CUDA. Center for Visual Information Technology, International Institute of Information Technology Hyderabad, INDIA.", "[6]Cyril Zeller, NVIDIA Corporation, CUDA C/C++ Basics, Supercomputing 2011 Tutorial", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Software Professional, Machine Learning / AI Enthusiast. Master of Science in Software Engineering from The University of Texas, Austin."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fa358da20144b&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbellman-ford-single-source-shortest-path-algorithm-on-gpu-using-cuda-a358da20144b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbellman-ford-single-source-shortest-path-algorithm-on-gpu-using-cuda-a358da20144b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbellman-ford-single-source-shortest-path-algorithm-on-gpu-using-cuda-a358da20144b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbellman-ford-single-source-shortest-path-algorithm-on-gpu-using-cuda-a358da20144b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----a358da20144b--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a358da20144b--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@raj.sengo?source=post_page-----a358da20144b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@raj.sengo?source=post_page-----a358da20144b--------------------------------", "anchor_text": "Raj Sengo"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F851f5e5bfa92&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbellman-ford-single-source-shortest-path-algorithm-on-gpu-using-cuda-a358da20144b&user=Raj+Sengo&userId=851f5e5bfa92&source=post_page-851f5e5bfa92----a358da20144b---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa358da20144b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbellman-ford-single-source-shortest-path-algorithm-on-gpu-using-cuda-a358da20144b&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa358da20144b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbellman-ford-single-source-shortest-path-algorithm-on-gpu-using-cuda-a358da20144b&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@magict1911?utm_source=medium&utm_medium=referral", "anchor_text": "Timo Volz"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "http://users.diag.uniroma1.it/challenge9/download.shtml", "anchor_text": "The Center for Discrete Mathematics and Theoretical Computer Science. 9th DIMACS Implementation Challenge"}, {"url": "https://developer.nvidia.com/cuda-zone", "anchor_text": "Compute Unified Device Architecture CUDA (Compute Unified Device Architecture) is a parallel computing platform and APIs created by Nvidia"}, {"url": "https://portal.tacc.utexas.edu/user-guides/maverick2", "anchor_text": "Texas Advanced Computing Center (TACC) Maverick2 supercomputer"}, {"url": "https://github.com/stephanGarland", "anchor_text": "Stephan Garland"}, {"url": "http://www.ece.utexas.edu/people/faculty/vijay-garg", "anchor_text": "Dr. Vijay Garg"}, {"url": "https://github.com/sengorajkumar/gpu_graph_algorithms", "anchor_text": "https://github.com/sengorajkumar/gpu_graph_algorithms"}, {"url": "https://medium.com/tag/bellman-ford-algorithm?source=post_page-----a358da20144b---------------bellman_ford_algorithm-----------------", "anchor_text": "Bellman Ford Algorithm"}, {"url": "https://medium.com/tag/cuda?source=post_page-----a358da20144b---------------cuda-----------------", "anchor_text": "Cuda"}, {"url": "https://medium.com/tag/parallel-computing?source=post_page-----a358da20144b---------------parallel_computing-----------------", "anchor_text": "Parallel Computing"}, {"url": "https://medium.com/tag/nvidia?source=post_page-----a358da20144b---------------nvidia-----------------", "anchor_text": "Nvidia"}, {"url": "https://medium.com/tag/shortest-path?source=post_page-----a358da20144b---------------shortest_path-----------------", "anchor_text": "Shortest Path"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa358da20144b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbellman-ford-single-source-shortest-path-algorithm-on-gpu-using-cuda-a358da20144b&user=Raj+Sengo&userId=851f5e5bfa92&source=-----a358da20144b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa358da20144b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbellman-ford-single-source-shortest-path-algorithm-on-gpu-using-cuda-a358da20144b&user=Raj+Sengo&userId=851f5e5bfa92&source=-----a358da20144b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa358da20144b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbellman-ford-single-source-shortest-path-algorithm-on-gpu-using-cuda-a358da20144b&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a358da20144b--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fa358da20144b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbellman-ford-single-source-shortest-path-algorithm-on-gpu-using-cuda-a358da20144b&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----a358da20144b---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----a358da20144b--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----a358da20144b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----a358da20144b--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----a358da20144b--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----a358da20144b--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----a358da20144b--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----a358da20144b--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----a358da20144b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@raj.sengo?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@raj.sengo?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Raj Sengo"}, {"url": "https://medium.com/@raj.sengo/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "13 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F851f5e5bfa92&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbellman-ford-single-source-shortest-path-algorithm-on-gpu-using-cuda-a358da20144b&user=Raj+Sengo&userId=851f5e5bfa92&source=post_page-851f5e5bfa92--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2F851f5e5bfa92%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbellman-ford-single-source-shortest-path-algorithm-on-gpu-using-cuda-a358da20144b&user=Raj+Sengo&userId=851f5e5bfa92&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}