{"url": "https://towardsdatascience.com/comprehending-python-list-comprehensions-ii-lost-in-new-york-e8af27038f4b", "time": 1683017593.957484, "path": "towardsdatascience.com/comprehending-python-list-comprehensions-ii-lost-in-new-york-e8af27038f4b/", "webpage": {"metadata": {"title": "Python List Comprehensions II: Lost in NY | by Joe Marx | Towards Data Science", "h1": "Python List Comprehensions II: Lost in NY", "description": "As you undoubtedly remember from my last article on the subject, list comprehensions allow for more dynamic, readable, and efficient list creation. However, there is far more to a comprehension than\u2026"}, "outgoing_paragraph_urls": [{"url": "https://medium.com/analytics-vidhya/comprehending-python-list-comprehensions-a-beginners-guide-7c97841c4eb0", "anchor_text": "last article on the subject", "paragraph_index": 0}, {"url": "https://medium.com/analytics-vidhya/comprehending-python-list-comprehensions-a-beginners-guide-7c97841c4eb0", "anchor_text": "Last time", "paragraph_index": 1}, {"url": "https://www.jquery-az.com/python-modulo/", "anchor_text": "modulo operator", "paragraph_index": 2}, {"url": "https://matthew-brett.github.io/teaching/string_formatting.html", "anchor_text": "read about it here", "paragraph_index": 16}], "all_paragraphs": ["As you undoubtedly remember from my last article on the subject, list comprehensions allow for more dynamic, readable, and efficient list creation. However, there is far more to a comprehension than just putting items in a list from an existing iterable. We can make more powerful comprehensions by using conditional statements, introducing more than one dummy variable, and leveraging other Python class comprehensions like dictionary comprehensions.", "Last time we looked at how to make a basic list comprehension. Now we\u2019re gonna go a bit deeper. Let\u2019s look at our example [x+5 for x in range(6)] from last time. Recall that this loops through the iterable range(6) and adds 5 to each one. We get back a list [5,6,7,8,9,10] . But what if we wanted to add some more power to that statement? What if we wanted a list of only the even numbers? We can do this by adding an if statement to our list comprehension.", "First we ask, how can we determine if a number is even? We can use the modulo operator, which divides one number by a second number then returns the remainder. We can use this operator to divide each number by 2 and check if it returns a 0, which would mean it\u2019s even. For example: 24 \u00f7 2 = 0 with no remainder so 24 % 2 == 0 returns True. In a list comprehension, if we want to return a list of items that only fit specific qualifications, we add an if statement after the iterable, in the case of our example:", "Note the output list has less items than was in the iterable we looped through.", "We also can return a list that tells either x + 5 or that it\u2019s odd by adding an else statement after the if statement. PLOT TWIST: however, when you do an if/else statement in a list comprehension, you put it BEFORE the for statement. In this case:", "(Why you would want an output list like that is for you to figure out.)", "If you try to put an if/else at the end of the list comprehension you\u2019ll get a SyntaxError. Same goes if you try to put JUST an if statement before the for statement. This can be hard to keep straight so one way to remember, is to say out loud the logic of the list comprehension as a sentence.", "FIRST though, let\u2019s remind ourselves of a few things: that whatever goes before that for statement gets spit out into your final list. With an if/else statement, either one thing happens or the other, so you\u2019re going to have an entry in your final list for every item in the iterable. The if alone at the end will pare down the number of entries in your final list because it only gets put in it IF it fits your criteria.", "So first without conditionals a logic sentence would be:", "\u201cPut THIS in my list FOR each ITEM in my ITERABLE.\u201d", "With just an if/else statement we\u2019d say:", "\u201cEither put THIS in my list IF it\u2019s even, or ELSE put in THIS other thing FOR each ITEM in my ITERABLE.", "For just an if statement, we\u2019d say :", "\u201cPut THIS in the list FOR each ITEM in my ITERABLE but only IF it\u2019s even.\u201d", "If you have a dictionary that you\u2019d like to use as your iterable for a list comprehension there are several ways to do it. If you only want to work with the keys, you can simply call dict.keys() as the item to loop through, whereas you can call dict.values() to have your dummy variable loop through each of the values in the dictionary key, value pair. However, one very powerful use-case is to be able to access both. To do this we call dict.items() to loop through. When we to run this code:", "Note that the list is made of tuples: the key and the value bound together. We can access them more powerfully by changing our for statement slightly.", "Let\u2019s break that code down. We are taking each key/value pair into a string that introduces them by their nicknames. If you haven\u2019t encountered the string.format() method, read about it here and come back. The real power here is that you are able to use the key and value pairs together, create conditionals using them, etc. As we introduce more of these concepts, the expressiveness of our code increases.", "Ok, now that you are a seasoned professional with list comprehensions, let\u2019s look at how this translates to other comprehensions. The syntax for making a dictionary is incredibly similar. The only difference is there are now two things to write for each entry: a key and a value. Using pseudp-code, you write this as {key: value for dummy variable in iterable}", "Ok, let\u2019s see if we can put this all together. Let\u2019s say you were left home by yourself while your family was away on vacation and you\u2019re only 8 years old. Meanwhile, a pair of cartoonish burglars make it clear they know your house is unprotected and they\u2019re gonna break in and rob you. We\u2019ve all been there!", "The good news is, you\u2019re not just a violent borderline-sociopathic genius-child, you\u2019re also a programming prodigy. You run several advanced computer break-in simulations on ways you can protect your house and it spits out a Python list of hundreds of defensive maneuvers you can try in your house and the percentage they will permanently injure Joe Pesc \u2014 I mean the burglars. You only want a list of the tactics that have over a 75 percent chance of committing irreparable harm on them. Let\u2019s take a look at the first three items from your list:", "Ok, so if we want to use code to give us just the names of the tactics that will be most effective, we could want to make a dictionary that has the names of each tactic as a key and its probability as a value.", "To do this we can call on the .split() method we used in the first article to divide the words, select the second word (index[1]) and make that a key, then select the first word (index [0]), coerce it to type int then set that to the value. Try doing this on your own before checking your work below.", "Now we can bring it all together by doing a list comprehension using the dictionary as an iterable and using a conditional if the dictionary value is greater than 75. Again try this on your own then see below the solution:", "Et viol\u00e0! You run this on the complete list and now you have dozens of options you can use to nearly murder those burglars! You save the house, and with the help of your neighbor who you once thought was scary, those two won\u2019t be able to hurt you ever again until maybe next year under similar circumstances\u2026", "You\u2019re now an expert on the basics of Python comprehensions! Use these in your code and you\u2019ll have more readable, marginally faster, and more concise code. There are so many use cases for comprehensions, we haven\u2019t scratched the surface, but now you should have the tools to figure them out as they come up. Note there are also generator and set comprehensions that we haven\u2019t touched, but they follow very similar syntax. Thanks for reading, now go write some awesome comprehensions!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Actor turned Data Scientist looking for applause some other way"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fe8af27038f4b&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-python-list-comprehensions-ii-lost-in-new-york-e8af27038f4b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-python-list-comprehensions-ii-lost-in-new-york-e8af27038f4b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-python-list-comprehensions-ii-lost-in-new-york-e8af27038f4b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-python-list-comprehensions-ii-lost-in-new-york-e8af27038f4b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----e8af27038f4b--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----e8af27038f4b--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://joebrowz.medium.com/?source=post_page-----e8af27038f4b--------------------------------", "anchor_text": ""}, {"url": "https://joebrowz.medium.com/?source=post_page-----e8af27038f4b--------------------------------", "anchor_text": "Joe Marx"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8dad240d123c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-python-list-comprehensions-ii-lost-in-new-york-e8af27038f4b&user=Joe+Marx&userId=8dad240d123c&source=post_page-8dad240d123c----e8af27038f4b---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe8af27038f4b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-python-list-comprehensions-ii-lost-in-new-york-e8af27038f4b&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe8af27038f4b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-python-list-comprehensions-ii-lost-in-new-york-e8af27038f4b&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@cgower?utm_source=medium&utm_medium=referral", "anchor_text": "Christopher Gower"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://medium.com/analytics-vidhya/comprehending-python-list-comprehensions-a-beginners-guide-7c97841c4eb0", "anchor_text": "last article on the subject"}, {"url": "https://medium.com/analytics-vidhya/comprehending-python-list-comprehensions-a-beginners-guide-7c97841c4eb0", "anchor_text": "Last time"}, {"url": "https://www.jquery-az.com/python-modulo/", "anchor_text": "modulo operator"}, {"url": "https://unsplash.com/@ratushny?utm_source=medium&utm_medium=referral", "anchor_text": "Dmitry Ratushny"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://matthew-brett.github.io/teaching/string_formatting.html", "anchor_text": "read about it here"}, {"url": "https://medium.com/tag/python?source=post_page-----e8af27038f4b---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/data-science?source=post_page-----e8af27038f4b---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/programming?source=post_page-----e8af27038f4b---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/coding?source=post_page-----e8af27038f4b---------------coding-----------------", "anchor_text": "Coding"}, {"url": "https://medium.com/tag/software-development?source=post_page-----e8af27038f4b---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe8af27038f4b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-python-list-comprehensions-ii-lost-in-new-york-e8af27038f4b&user=Joe+Marx&userId=8dad240d123c&source=-----e8af27038f4b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe8af27038f4b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-python-list-comprehensions-ii-lost-in-new-york-e8af27038f4b&user=Joe+Marx&userId=8dad240d123c&source=-----e8af27038f4b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe8af27038f4b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-python-list-comprehensions-ii-lost-in-new-york-e8af27038f4b&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----e8af27038f4b--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fe8af27038f4b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-python-list-comprehensions-ii-lost-in-new-york-e8af27038f4b&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----e8af27038f4b---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----e8af27038f4b--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----e8af27038f4b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----e8af27038f4b--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----e8af27038f4b--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----e8af27038f4b--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----e8af27038f4b--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----e8af27038f4b--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----e8af27038f4b--------------------------------", "anchor_text": ""}, {"url": "https://joebrowz.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://joebrowz.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Joe Marx"}, {"url": "https://joebrowz.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "23 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8dad240d123c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-python-list-comprehensions-ii-lost-in-new-york-e8af27038f4b&user=Joe+Marx&userId=8dad240d123c&source=post_page-8dad240d123c--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2F8dad240d123c%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-python-list-comprehensions-ii-lost-in-new-york-e8af27038f4b&user=Joe+Marx&userId=8dad240d123c&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}