{"url": "https://towardsdatascience.com/facial-recognition-happiness-bbb3c4293d1d", "time": 1682997603.127601, "path": "towardsdatascience.com/facial-recognition-happiness-bbb3c4293d1d/", "webpage": {"metadata": {"title": "How to Build a Smile Detector. Detect Happiness in Python (Tutorial) | by Rohan Gupta | Towards Data Science", "h1": "How to Build a Smile Detector", "description": "Using OpenCV \u2014 The most intuitive way around facial detection."}, "outgoing_paragraph_urls": [{"url": "https://medium.com/swlh/the-intuition-behind-facial-detection-the-viola-jones-algorithm-29d9106b6999", "anchor_text": "The Viola-Jones Algorithm.", "paragraph_index": 3}, {"url": "https://github.com/opencv/opencv/tree/master/data/haarcascades", "anchor_text": "Haar Cascade GitHub Repository.", "paragraph_index": 8}, {"url": "https://github.com/opencv/opencv/blob/master/data/haarcascades/haarcascade_eye.xml", "anchor_text": "haarcascade_eye.xml", "paragraph_index": 9}, {"url": "https://github.com/opencv/opencv/blob/master/data/haarcascades/haarcascade_smile.xml", "anchor_text": "haarcascade_smile.xml", "paragraph_index": 9}, {"url": "https://github.com/opencv/opencv/blob/master/data/haarcascades/haarcascade_frontalface_default.xml", "anchor_text": "haarcascade_frontalface_default.xml", "paragraph_index": 9}], "all_paragraphs": ["Businesses strive to deliver the most important product of all: happiness.", "Why? Happiness might just be more than a chemical reaction. A happy customer is more likely to walk through the door again, and data on happiness can help businesses understand which products would do better and have a higher retention rate. Machines can learn to recognize happiness and in this tutorial, I\u2019m going to show you how to create a facial recognition model that can do so.", "Let\u2019s start with the basics. How do we express happiness? On the face, it\u2019s mostly through our eyes and smiles. We naturally infer that someone is happy when we see a smile on their face. A smile can have many variations, but its shape is mostly similar to a flatter kind of \u2018U\u2019 shaped figure.", "In the next steps, I\u2019m going to put down my code and explain what I did to build the happiness detector. To understand the intuition behind the algorithm, check out this previous article on The Viola-Jones Algorithm.", "What you need to build happiness detector:", "I\u2019m using Spyder on Anaconda, but you could also use Jupyter Nb I suppose. Once you have everything, get on the IDE (code editor).", "You should have a screen like this if you\u2019re using spyder. Before you start coding, make sure to download the haar cascades (next section)", "As I had explained in the article cited above, the Viola-Jones algorithm uses haar-like features to detect facial properties. The cascade is a series of filters that will apply one after the other to detect a face through its features.", "These filters are stored in their own XML files in the Haar Cascade GitHub Repository.", "To build our happiness detector, we need these 3 XML Files: - haarcascade_eye.xml- haarcascade_smile.xml- haarcascade_frontalface_default.xml", "These are the cascades for the face, eyes, and smiles. We must have each one of these features if our image is of a happy face. Obtain the code from each of these links, place it into a text editor and save your files according to the names mentioned above. Put all three XML files into the same folder where you will start a python notebook. Now that we have our Haar Cascades, let\u2019s head over to the virtual environment.", "The only library you need to import is OpenCV. Even though it is a very powerful object-recognition tool, it is not the most powerful one. There are newer better ones out there, but OpenCV still delivers a lot of value and is a good way to understand the basics of object recognition. After importing OpenCV (cv2), I called each of the cascades that were downloaded. For this, I just need to use the OpenCV function called CascadeClassifier.", "Before you define the function for detection, you should know that it is going to be applied to single images, which are then put together to get the end result.", "Since the Viola-Jones algorithm works with grayscale images, I input the first argument of this function as grayscale. However, I also want the final output to have the original image in color, so I input another argument img for the original image. Next, I will need to get the coordinates of the rectangles that will detect the face. To define these coordinates, I took 4 tuples: x, y, w, and h. x & y are coordinates of the upper left corner, while w & h are width and height of rectangles respectively. I stored these tuples in a variable face and then used another one of OpenCV's functions called detectMultiScale to actually get these coordinates. So we use our object Cascade_face and apply the detectMultiScale method to it with 3 arguments:- grayscale as the image is being analyzed in b&w- a scale factor of 1.3 (size of the image will be reduced 1.3x)- a minimum number of accepted neighbor zones: 5 neighbors.", "Next, to actually draw the rectangles I create a \u2018for loop\u2019 with our 4 tuples x_face, y_face, h_face, w_face in faces. In the for loop, I used the rectangle function, which is another OpenCV function. This actually draws the rectangle on your face and is given the following arguments: - \u2018img\u2019 because we want rectangle drawn on our original colored image. - coordinates of the upper left corner: x and y- coordinates of the lower right corner: w and h- color of rectangle: I chose a blueish color.- The thickness of edges of rectangles: I picked 2. (doesn\u2019t really matter but 2 is a good choice)", "Note: The code below is in continuation (I\u2019ve put it all together at the bottom)", "Now that I\u2019m done with the face, I\u2019m going to detect the eyes. This is the only part that\u2019s slightly tricky and a bit harder to understand. Basically, the lines above mention that you are looking for eyes within the face, and so the face becomes our \u201cregion of interest\u201d. Since the algorithm works with grayscale images, we input the argument for grayscale. However, I also want to get the colored image, so I will add another argument for the colored image. Essentially, there are 2 regions of interests: one for the grayscale image and one for the original colored image. Subsequently, I create ri_grayscale on the grayscale image with the range of coordinates of the rectangles y:y+h and x:x+w. Then, on the colored image, I create ri_color with the same coordinates for the rectangles.", "For the eyes, I repeated the first step with the faces and create an object called eye with cascase_eye and use the detectMultiScale method to find the 4 tuples. I changed the scale factor to 1.2 and the minimum neighbors to 18. ( I had to experiment with these values to get perfect results).", "Next, I created a for loop for the eyes as well. You can copy-paste the previous one, just need to change the tuple names and choose a different color.", "Then again for the smile, I repeat the same steps that I did for the face and eyes. When using the detectMultiScale method, I used a scale factor of 1.7 and minimum neighbors of 20. (As I said before, this requires some experimentation to figure out).Once all that is done you just return the original frame.", "I started by creating an object called vc and used the VideoCapture class from OpenCV. It takes only one argument: 0 or 1.0 if you use an internal webcam, 1 if it is external.", "Since the detection function works for a single image, I now have to create some sort of loop that allows it to run over a series of images. So I start an infinite while loop which I will break later by using a break function. Now the next lines may seem confusing, but basically, the read method from VideoCapture gets two elements: one of which is the last frame coming from the webcam. Since you only want that, use _, img because the read method returns 2 frames and you only want this one. Now I need to call this method from the VideoCapture class.", "I use the cvtColor function that will convert the colored img to grayscale since it needs a b&w frame for the detect function. I call it grayscale and take the cvtColor class, which takes 2 arguments: - the frame (img)- cv2.COLOR_BGR2GRAY \u2014 does an average of Blue-green-red to get right shades of grey.Now I created a new variable called \u2018final\u2019 and this will be the result of the detect function. Within \u2018final\u2019, I use the detection function with arguments grayscale and img.", "The imshow function is another OpenCV function that allows us to view the original material coming from the webcam with the rectangle animations. It displays the processed images in an animated way.", "Then I used another function to close the window when I\u2019m done using it. I applied an if condition which will terminate the application every time I press the \u2018q\u2019 button on the keyboard. This will break the while loop to end the process. Finally, I used the release method to turn off the webcam and the DestroyAllWindows function to terminate the windows.", "I\u2019ve pasted my complete code put together below just in case there\u2019s any confusion from the excerpts above.", "At first, there were many reasons why the model didn\u2019t work. It would detect a non-smiling face as a smile too. I had to work with the scale factor, as well as the minimum neighbors to get a perfect result.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Scientist/Analyst/Writer \u2014 I love spreading knowledge."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fbbb3c4293d1d&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffacial-recognition-happiness-bbb3c4293d1d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffacial-recognition-happiness-bbb3c4293d1d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffacial-recognition-happiness-bbb3c4293d1d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffacial-recognition-happiness-bbb3c4293d1d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----bbb3c4293d1d--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----bbb3c4293d1d--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@rohanguptaa33?source=post_page-----bbb3c4293d1d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@rohanguptaa33?source=post_page-----bbb3c4293d1d--------------------------------", "anchor_text": "Rohan Gupta"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff463f1bf80e2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffacial-recognition-happiness-bbb3c4293d1d&user=Rohan+Gupta&userId=f463f1bf80e2&source=post_page-f463f1bf80e2----bbb3c4293d1d---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbbb3c4293d1d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffacial-recognition-happiness-bbb3c4293d1d&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbbb3c4293d1d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffacial-recognition-happiness-bbb3c4293d1d&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@nate_dumlao?utm_source=medium&utm_medium=referral", "anchor_text": "Nathan Dumlao"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://cutt.ly/HwrN0KU", "anchor_text": "https://cutt.ly/HwrN0KU"}, {"url": "https://medium.com/swlh/the-intuition-behind-facial-detection-the-viola-jones-algorithm-29d9106b6999", "anchor_text": "The Viola-Jones Algorithm."}, {"url": "https://docs.anaconda.com/anaconda/navigator/", "anchor_text": "https://docs.anaconda.com/anaconda/navigator/"}, {"url": "https://opencv.org/", "anchor_text": "https://opencv.org/"}, {"url": "https://cutt.ly/rwrN978", "anchor_text": "https://cutt.ly/rwrN978"}, {"url": "https://github.com/opencv/opencv/tree/master/data/haarcascades", "anchor_text": "Haar Cascade GitHub Repository."}, {"url": "https://github.com/opencv/opencv/blob/master/data/haarcascades/haarcascade_eye.xml", "anchor_text": "haarcascade_eye.xml"}, {"url": "https://github.com/opencv/opencv/blob/master/data/haarcascades/haarcascade_smile.xml", "anchor_text": "haarcascade_smile.xml"}, {"url": "https://github.com/opencv/opencv/blob/master/data/haarcascades/haarcascade_frontalface_default.xml", "anchor_text": "haarcascade_frontalface_default.xml"}, {"url": "https://medium.com/tag/opencv-python?source=post_page-----bbb3c4293d1d---------------opencv_python-----------------", "anchor_text": "Opencv Python"}, {"url": "https://medium.com/tag/facial-recognition?source=post_page-----bbb3c4293d1d---------------facial_recognition-----------------", "anchor_text": "Facial Recognition"}, {"url": "https://medium.com/tag/tutorial?source=post_page-----bbb3c4293d1d---------------tutorial-----------------", "anchor_text": "Tutorial"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----bbb3c4293d1d---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----bbb3c4293d1d---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbbb3c4293d1d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffacial-recognition-happiness-bbb3c4293d1d&user=Rohan+Gupta&userId=f463f1bf80e2&source=-----bbb3c4293d1d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbbb3c4293d1d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffacial-recognition-happiness-bbb3c4293d1d&user=Rohan+Gupta&userId=f463f1bf80e2&source=-----bbb3c4293d1d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbbb3c4293d1d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffacial-recognition-happiness-bbb3c4293d1d&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----bbb3c4293d1d--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fbbb3c4293d1d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffacial-recognition-happiness-bbb3c4293d1d&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----bbb3c4293d1d---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----bbb3c4293d1d--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----bbb3c4293d1d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----bbb3c4293d1d--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----bbb3c4293d1d--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----bbb3c4293d1d--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----bbb3c4293d1d--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----bbb3c4293d1d--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----bbb3c4293d1d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@rohanguptaa33?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@rohanguptaa33?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Rohan Gupta"}, {"url": "https://medium.com/@rohanguptaa33/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "567 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff463f1bf80e2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffacial-recognition-happiness-bbb3c4293d1d&user=Rohan+Gupta&userId=f463f1bf80e2&source=post_page-f463f1bf80e2--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ffa9b9e13a272&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffacial-recognition-happiness-bbb3c4293d1d&newsletterV3=f463f1bf80e2&newsletterV3Id=fa9b9e13a272&user=Rohan+Gupta&userId=f463f1bf80e2&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}