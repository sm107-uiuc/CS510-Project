{"url": "https://towardsdatascience.com/creating-a-plant-pet-toxicity-classifier-13b8ba6289e6", "time": 1683016217.069789, "path": "towardsdatascience.com/creating-a-plant-pet-toxicity-classifier-13b8ba6289e6/", "webpage": {"metadata": {"title": "Training with Controlled Randomness | by Kenichi Nakanishi | Towards Data Science", "h1": "Training with Controlled Randomness", "description": "In Part 1: Building a Database, we\u2019ve scraped the web for information on plants and how toxic they are to pets, cross-referenced the fields against a second database, then finally downloaded unique\u2026"}, "outgoing_paragraph_urls": [{"url": "https://kenichinakanishi.medium.com/creating-a-plant-pet-toxicity-classifier-a29587f3f04c", "anchor_text": "Part 1: Building a Database", "paragraph_index": 0}, {"url": "https://github.com/fastai/fastbook", "anchor_text": "book", "paragraph_index": 2}, {"url": "https://github.com/fastai/fastbook/blob/master/03_ethics.ipynb", "anchor_text": "data ethics", "paragraph_index": 2}, {"url": "https://pypi.org/project/fastai/#history", "anchor_text": "rapidly updated", "paragraph_index": 3}, {"url": "https://forums.fast.ai/t/solved-reproducibility-where-is-the-randomness-coming-in/31628/23", "anchor_text": "discussion", "paragraph_index": 4}, {"url": "https://colab.research.google.com/notebooks/io.ipynb", "anchor_text": "directly link", "paragraph_index": 6}, {"url": "https://github.com/fastai/fastbook/blob/master/05_pet_breeds.ipynb", "anchor_text": "Chapter 5", "paragraph_index": 11}, {"url": "https://github.com/fastai/fastbook/blob/master/05_pet_breeds.ipynb", "anchor_text": "presizing", "paragraph_index": 20}, {"url": "https://docs.fast.ai/vision.augment#aug_transforms", "anchor_text": "list of flip, rotate, zoom, warp, lighting transforms", "paragraph_index": 21}, {"url": "https://docs.fast.ai/data.load", "anchor_text": "represents a Python iterable over a dataset with extended functionality", "paragraph_index": 23}, {"url": "http://www.image-net.org/", "anchor_text": "ImageNet", "paragraph_index": 29}, {"url": "https://blog.slavv.com/a-gentle-intro-to-transfer-learning-2c0b674375a0", "anchor_text": "this excellent blog post for a more in-depth explanation", "paragraph_index": 29}, {"url": "https://towardsdatascience.com/understanding-learning-rates-and-how-it-improves-performance-in-deep-learning-d0d4059c1c10", "anchor_text": "discriminative learning rate", "paragraph_index": 30}, {"url": "https://towardsdatascience.com/understanding-learning-rates-and-how-it-improves-performance-in-deep-learning-d0d4059c1c10", "anchor_text": "blog posts", "paragraph_index": 32}, {"url": "https://fastai1.fast.ai/callbacks.one_cycle.html", "anchor_text": "one cycle policy", "paragraph_index": 33}, {"url": "https://arxiv.org/abs/1803.09820", "anchor_text": "Leslie Smith\u2019s work", "paragraph_index": 34}, {"url": "https://arxiv.org/pdf/1706.10239.pdf", "anchor_text": "better at generalization", "paragraph_index": 34}, {"url": "https://towardsdatascience.com/finding-good-learning-rate-and-the-one-cycle-policy-7159fe1db5d6#:~:text=In%20particular%2C%20he%20suggests%201,learning%20rate%20using%20range%20test.&text=This%20helps%20the%20network%20to,and%20land%20better%20flatter%20minima.", "anchor_text": "excellent post by Nachiket Tanksdale", "paragraph_index": 34}, {"url": "https://towardsdatascience.com/creating-a-plant-pet-toxicity-classifier-a29587f3f04c", "anchor_text": "Part 1.", "paragraph_index": 37}, {"url": "https://medium.com/r?url=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-plant-pet-toxicity-classifier-a29587f3f04c", "anchor_text": "each folder of images was downloaded off Google Images based on the scientific name of each plant.", "paragraph_index": 39}], "all_paragraphs": ["In Part 1: Building a Database, we\u2019ve scraped the web for information on plants and how toxic they are to pets, cross-referenced the fields against a second database, then finally downloaded unique images for each class through Google Images. In this part, we will be training baseline neural networks (using the new fast.ai framework) to identify the species of plant based on a picture. We\u2019ll then assess how good the dataset we\u2019ve put together is for training a neural network, and looking for ways to improve this.", "The main goals herein will be comparing the effects of changing the number of images per class, and how we can try to compare each training run fairly by controlling randomness.", "I\u2019ve found fast.ai to be an extremely useful framework (that sits atop the PyTorch libraries) for diving right into machine learning. An analogy Jeremy Howard (founding researcher at fast.ai) has used is akin to learning how to play football \u2014 do we want to study the precise physics and mechanics of how to kick a ball, or get amongst it and learn as we go? The latter has been much more engaging, and we can pick up important bits of theory as we go thanks to the vast resources available online. One such example is fast.ai\u2019s own book, which gives a very good overview of the process and contains a particularly interesting chapter on data ethics.", "fast.ai is being rapidly updated, which calls for the installation of specific package versions for reproducibility. We\u2019re going to simply import everything we need (and stuff we need later) into the global namespace for ease of use.", "In order to compare training runs, we need to control the sources of randomness that are present in the system (augmentations, splitting, etc.) While a lot of discussion on this topic is present, I\u2019ve found that for Colabs the use of the following function prior to creating the DataBlock will allow for reproducible results even between kernel restarts. You\u2019ll also need to set num_workers = 0 (or 1) in your DataLoader, but it is 0 by default and we will not be changing it herein.", "Note that results will change if you call any functions that use the set randomness (e.g. learn.dls.show_batch()) or if you change the GPU used (e.g. Tesla P100 vs V100 on Colabs). This can result in a need to factory reset the runtime and reconnecting until the same GPU is provided.", "Right now, the data is saved in individual class-labelled folders in Google Drive, with 150 images (.jpgs) per class. Colab can directly link to your Google Drive, but simply pointing your learner at the drive and proceeding with training will significantly slow down the process due to the constant need to transfer images for each batch of training.", "To get around this, we can recursively copy the folder containing each subfolder directly into the current kernel (however, this can be relatively slow if you have a large number of small files).", "Recursive means that cp copies the contents of directories, and if a directory has subdirectories they are copied too.", "If this method is too slow, we can first download the files, zip them up and upload that zipped file to Google Drive. Then, every time we need the data, we can simply download that file and unzip it in the kernel.", "Either way, the work we put in here to ensure our images are present on the Colabs kernel will save a lot of time during training.", "Now, our data is present directly in the kernel and can be easily accessed during training. To use the data, fast.ai has developed a flexible system called the DataBlock API. At a high level, the DataBlock simply serves as a list of instructions when building batches and our DataLoaders. This is discussed in more detail in Chapter 5 of the fastai book.", "Our DataBlock will look like this:", "The splitterdefines which of the images will be in the training dataset and validation dataset. There are many ways to approach this, but herein we prepare a function that looks at the path holding all the folders containing the images for each class and returns a DataFrame containing that pairs a class to each image.", "Now that we have this DataFrame, we can choose exactly how we\u2019d like to do our splitting. To enable future k-fold validation, lets prepare a way to generate stratified folds, which preserves the percentage of samples for each class. We do this with the help of sklearn\u2019s StratifiedKFold function, passing in the appropriate columns of our DataFrame as the X and y .", "Great! Now we have a DataFrame (df_cnn in the above example) that contains the Class,Path and an is_valid label.", "Additionally, as we\u2019d like to compare how training goes between datasets with different numbers of images as fairly as possible, we don\u2019t want to use a random train/validation split each time. If we did so, the differences in images used for training and validation would inherently change the model performance. To control for this, we first do a shuffle stratified split on all the images (see a below). Then, after we remove any images from the dataset, we do an inner join onto the previously defined split such that any images still remain in the same training or validation set as before (creating a pseudo-stratified split, see b below, as we can\u2019t guarantee the exact same ratio of images remain in each set).", "Fixing all randomness may typically not be a good idea as getting high variation between different runs may give you a hint that something is wrong. Natural variations in score can help you to achieve even better scores if you use cross-validation.", "As previously mentioned, the splitting is defined within theDataBlock for the DataLoader, and here we use a get_dataloader function to automate the process.", "This function begins with the definition ofget_x, get_y, splitter, item_tfms and batch_tfms. Here,get_x and get_y tell our DataBlock to look at the appropriate columns in a DataFrame to find the image paths and labels respectively. As discussed, splitter identifies the images as training or validation using the \u2018is_valid\u2019 column.", "For our transforms, we follow a presizing strategy, where item_tfms resizes each image to a dimension significantly larger than the target training dimensions, and batch_tfms composes all of the common augmentation operations (including a resize to the final target size) into one combined operation for the GPU.", "Note that the batch_tfms here use the base aug_transforms defined by fastai, which apply a list of flip, rotate, zoom, warp, lighting transforms, then apply a normalization using the ImageNet stats. We add a clause for the addition of a random erasing transform, which will be discussed later. Finally, each of these snippets are put to use in the definition of the DataBlock, as discussed previously.", "We then check if a split_path to a set of images with which we should prepare a \u2018master\u2019 stratified split has been defined, and if so, apply an inner join of the images in our img_path to define our pseudo stratified split. Otherwise, we generate a stratified split for the images in img_path. This process encompasses the previous two functions (create_path_df and stratified_split), taking the parameters defined previously.", "The output of the function is a DataLoader, which represents a Python iterable over a dataset with extended functionality, supporting things such as automated batching, shuffling and multi-process data loading.", "Again, to make things more convenient for us down the line, we\u2019re going to wrap everything we\u2019ve written so far into a function that defines the parameters and feeds them through the fastai convenience function cnn_learner to finally get out our learner.", "Here, we set a few parameters for our default learner. We\u2019ll use 224x224 px size images, with a batch size of 64. A pretrained ResNet34 architecture be used, a classic and reliable neural network. The parameters of the optimization function we\u2019re using (Adam) are also then defined in the body of the function, before calling the random_seed function to fix all randomness. We also set up a range of useful callbacks that will save the results as a .csv as well as show the training and validation losses in a plot, live during training. Finally, we create the learner using a fastai convenience function that takes in all the separate items we prepared earlier, before adding an option to switched to mixed-precision training.", "Phew! We\u2019re ready for training. It was a lot of work to get to this point, and it isn\u2019t necessary to set up things in this way. However, taking the effort to wrap things up into a single neat function will pay dividends later on as we can now easily alter a range of parameters (in a consistent way) including the number of images in the dataset and the architecture of the neural network. Doing so will make everything just that bit neater and avoid the need to copy and paste sections of code each time, reducing the probability of making mistakes.", "As we can see in thecreate_simple_cnn_learner function, we will start with a simple but robust CNN, ResNet34. Let\u2019s first create a learner that will use only 1/3 of the dataset (50 out of 150 images for each class).", "We can then take a look at the images using", "A transfer learning procedure will be used to fine tune the network for our images using the weights pretrained from ImageNet. The basic idea behind transfer learning is that the pretrained ResNet34 model created by thecreate_simple_cnn_learner function will already have a decent idea at identifying things that existed in the ImageNet dataset. As the images we\u2019re using won\u2019t be significantly different from the real-world images used in ImageNet \u2014 it makes sense that we don\u2019t want to mess around with the weights too much. The theory and decisions to take when using transfer learning can be more nuanced, see this excellent blog post for a more in-depth explanation.", "Here, we will train our model with the weights in the initial layers frozen (only training the weights of the last fully connected layers) before unfreezing everything and doing a \u2018fine-tune\u2019 train on all the weights at relatively lower discriminative learning rates. This means that the learning rates will be staggered from small (in the early layers) to relatively larger (as we approach the final layers), in groups of layers which are defined by fastai. Intuitively, this has to do with the details of the image being looked at by each layer. Early layers tend to look at the broad strokes of the image such as gradients, edges and corners, all details whose weights won\u2019t need to be re-trained to any significant degree. Vice-versa for the later layers.", "The above code lays out the basic transfer learning procedure we will use herein to train our classifiers. Fixed learning rates and epochs will be used to compare training runs, with 10 epochs used for training the model head, and a further 10 epochs for fine-tuning the network. Note that enumerate_params is a little function that tells us how many frozen and unfrozen parameters exist for a given learner when called.", "Many excellent blog posts exist that explain the importance of selecting appropriate learning rates for the problem at hand. As it isn\u2019t the focus of this post, we won\u2019t be going into too much detail. Here (following the advice of Leslie N. Smith, as many others do), we\u2019ve used the built-in fastai function learn.lr_find()to plot the losses against the learning rates and pick a value a bit before the minimum where the loss still improves, to determine the appropriate learning rate(s) for each step of the transfer process.", "In practice, we use the fit_one_cycle function, with the learning rates used representing the maximum learning rate in a one cycle policy with cosine annealing, as can be seen below. Note that the x-axis below represents the number of batches passed through the learner.", "This policy is a result of Leslie Smith\u2019s work on hyper-parameters (learning rate, momentum and weight decay) combined with tweaks from fastai, offering fast results in the training of complex models. Intuitively, we can think of the policy as beginning with a lower value to warm-up the training. As we progress, the learning rate increases and momentum decreases in order to encourage the optimizer to quickly investigate new areas of the loss function, acting as a regularization method, typically landing in areas with flatter minima (which are better at generalization). In the final part of the 1-cycle policy, decreasing learning rates allow the optimizer to enter a steeper local minimum inside flatter area. See this excellent post by Nachiket Tanksdale for a more detailed explanation.", "After running baseline_fit(learn), a single training run will end up looking something like this.", "We can see the usefulness of the ShowGraphCallback(), which can give us an indication of when overtraining is occurring. Typically we might look for the divergence in the training and validation loss, and we should be particularly careful if the validation loss starts to increase.", "Now that we have everything set up, we can start to do some interesting comparisons. Let\u2019s start with comparing how our top 5 accuracy varies as we change the number of images (using our pct_images parameter while creating the learner) from our data collection in Part 1.", "While the total training time scales linearly with the number of images, we see that the top 5 accuracy of the models experience a drop off when 150 images are used per class. Uh-oh. Typically we\u2019d expect more images to give us a better result!", "The problem has to do with the quality of images we\u2019ve downloaded to create our database. Recall that each folder of images was downloaded off Google Images based on the scientific name of each plant. Let\u2019s take a look at an early search result vs. a later one from a random class, say Peperomia peltifolia.", "Ah ha! Many more than 150 search results have to be looked at before we can generate 150 unique images per class (430+ for just this random class.) As we dive deeper and deeper into the search results, our results will get less and less relevant. This will result in images like drawings, graphs and fact sheets \u2014 which are all bad at training our model to do what we want it to do (classify a plant based on a natural photo.) Indeed, our comparison of training results suggests that trying to use more than 100 images per class starts to harm our model due to the inclusion of many poor training examples.", "We\u2019d like to do some cleaning up of these images without having to manually examine each of the files in the 500+ folders. Join us in Section 3: Targeting and Removing Bad Training Data as we look at a few approaches for doing exactly that.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F13b8ba6289e6&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-plant-pet-toxicity-classifier-13b8ba6289e6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-plant-pet-toxicity-classifier-13b8ba6289e6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-plant-pet-toxicity-classifier-13b8ba6289e6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-plant-pet-toxicity-classifier-13b8ba6289e6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----13b8ba6289e6--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----13b8ba6289e6--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://kenichinakanishi.medium.com/?source=post_page-----13b8ba6289e6--------------------------------", "anchor_text": ""}, {"url": "https://kenichinakanishi.medium.com/?source=post_page-----13b8ba6289e6--------------------------------", "anchor_text": "Kenichi Nakanishi"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9d8da6789697&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-plant-pet-toxicity-classifier-13b8ba6289e6&user=Kenichi+Nakanishi&userId=9d8da6789697&source=post_page-9d8da6789697----13b8ba6289e6---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F13b8ba6289e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-plant-pet-toxicity-classifier-13b8ba6289e6&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F13b8ba6289e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-plant-pet-toxicity-classifier-13b8ba6289e6&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/tagged/petsafe-plants-fastai", "anchor_text": "Classifying Pet-Safe Plants with fast.ai"}, {"url": "https://unsplash.com/@mancity17", "anchor_text": "David Clarke"}, {"url": "https://unsplash.com/", "anchor_text": "Unsplash"}, {"url": "https://kenichinakanishi.medium.com/creating-a-plant-pet-toxicity-classifier-a29587f3f04c", "anchor_text": "Part 1: Building a Database"}, {"url": "https://github.com/fastai/fastbook", "anchor_text": "book"}, {"url": "https://github.com/fastai/fastbook/blob/master/03_ethics.ipynb", "anchor_text": "data ethics"}, {"url": "https://medium.com/p/13b8ba6289e6#a60d", "anchor_text": "A Training Baseline"}, {"url": "https://medium.com/p/13b8ba6289e6#b088", "anchor_text": "Imports and Seeding Randomness"}, {"url": "https://medium.com/p/13b8ba6289e6#5e92", "anchor_text": "Loading Data into Colabs"}, {"url": "https://medium.com/p/13b8ba6289e6#043b", "anchor_text": "DataBlock and DataLoader(s)"}, {"url": "https://medium.com/p/13b8ba6289e6#e4a2", "anchor_text": "Stratified Splitting"}, {"url": "https://medium.com/p/13b8ba6289e6#736d", "anchor_text": "Creating the DataBlock and DataLoader"}, {"url": "https://medium.com/p/13b8ba6289e6#d872", "anchor_text": "Creating the Learner"}, {"url": "https://medium.com/p/13b8ba6289e6#826a", "anchor_text": "Training the Model(s)"}, {"url": "https://medium.com/p/13b8ba6289e6#0a40", "anchor_text": "How do we choose the Learning Rates?"}, {"url": "https://medium.com/p/13b8ba6289e6#3c2d", "anchor_text": "An Example Training Run"}, {"url": "https://medium.com/p/13b8ba6289e6#6feb", "anchor_text": "Training the Model(s)"}, {"url": "https://medium.com/p/13b8ba6289e6#1539", "anchor_text": "Why aren\u2019t more images better?"}, {"url": "https://pypi.org/project/fastai/#history", "anchor_text": "rapidly updated"}, {"url": "https://forums.fast.ai/t/solved-reproducibility-where-is-the-randomness-coming-in/31628/23", "anchor_text": "discussion"}, {"url": "https://colab.research.google.com/notebooks/io.ipynb", "anchor_text": "directly link"}, {"url": "https://github.com/fastai/fastbook/blob/master/05_pet_breeds.ipynb", "anchor_text": "Chapter 5"}, {"url": "https://gist.github.com/kenichinakanishi/c210a52f74a4d17e1462afc0d6087a04", "anchor_text": "Creation of the DataBlock and DataLoader."}, {"url": "https://github.com/fastai/fastbook/blob/master/05_pet_breeds.ipynb", "anchor_text": "presizing"}, {"url": "https://docs.fast.ai/vision.augment#aug_transforms", "anchor_text": "list of flip, rotate, zoom, warp, lighting transforms"}, {"url": "https://docs.fast.ai/data.load", "anchor_text": "represents a Python iterable over a dataset with extended functionality"}, {"url": "https://gist.github.com/kenichinakanishi/00440867d8beac0d4df9cd0c552d0403", "anchor_text": "Creation of a basic cnn learner."}, {"url": "http://www.image-net.org/", "anchor_text": "ImageNet"}, {"url": "https://blog.slavv.com/a-gentle-intro-to-transfer-learning-2c0b674375a0", "anchor_text": "this excellent blog post for a more in-depth explanation"}, {"url": "https://towardsdatascience.com/understanding-learning-rates-and-how-it-improves-performance-in-deep-learning-d0d4059c1c10", "anchor_text": "discriminative learning rate"}, {"url": "https://towardsdatascience.com/understanding-learning-rates-and-how-it-improves-performance-in-deep-learning-d0d4059c1c10", "anchor_text": "blog posts"}, {"url": "https://fastai1.fast.ai/callbacks.one_cycle.html", "anchor_text": "one cycle policy"}, {"url": "https://arxiv.org/abs/1803.09820", "anchor_text": "Leslie Smith\u2019s work"}, {"url": "https://arxiv.org/pdf/1706.10239.pdf", "anchor_text": "better at generalization"}, {"url": "https://towardsdatascience.com/finding-good-learning-rate-and-the-one-cycle-policy-7159fe1db5d6#:~:text=In%20particular%2C%20he%20suggests%201,learning%20rate%20using%20range%20test.&text=This%20helps%20the%20network%20to,and%20land%20better%20flatter%20minima.", "anchor_text": "excellent post by Nachiket Tanksdale"}, {"url": "https://towardsdatascience.com/creating-a-plant-pet-toxicity-classifier-a29587f3f04c", "anchor_text": "Part 1."}, {"url": "https://medium.com/r?url=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-plant-pet-toxicity-classifier-a29587f3f04c", "anchor_text": "each folder of images was downloaded off Google Images based on the scientific name of each plant."}, {"url": "https://medium.com/tag/fastai?source=post_page-----13b8ba6289e6---------------fastai-----------------", "anchor_text": "Fastai"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----13b8ba6289e6---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/image-classification?source=post_page-----13b8ba6289e6---------------image_classification-----------------", "anchor_text": "Image Classification"}, {"url": "https://medium.com/tag/fastai-datablocks-api?source=post_page-----13b8ba6289e6---------------fastai_datablocks_api-----------------", "anchor_text": "Fastai Datablocks Api"}, {"url": "https://medium.com/tag/petsafe-plants-fastai?source=post_page-----13b8ba6289e6---------------petsafe_plants_fastai-----------------", "anchor_text": "Petsafe Plants Fastai"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F13b8ba6289e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-plant-pet-toxicity-classifier-13b8ba6289e6&user=Kenichi+Nakanishi&userId=9d8da6789697&source=-----13b8ba6289e6---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F13b8ba6289e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-plant-pet-toxicity-classifier-13b8ba6289e6&user=Kenichi+Nakanishi&userId=9d8da6789697&source=-----13b8ba6289e6---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F13b8ba6289e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-plant-pet-toxicity-classifier-13b8ba6289e6&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----13b8ba6289e6--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F13b8ba6289e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-plant-pet-toxicity-classifier-13b8ba6289e6&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----13b8ba6289e6---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----13b8ba6289e6--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----13b8ba6289e6--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----13b8ba6289e6--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----13b8ba6289e6--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----13b8ba6289e6--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----13b8ba6289e6--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----13b8ba6289e6--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----13b8ba6289e6--------------------------------", "anchor_text": ""}, {"url": "https://kenichinakanishi.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://kenichinakanishi.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Kenichi Nakanishi"}, {"url": "https://kenichinakanishi.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "33 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9d8da6789697&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-plant-pet-toxicity-classifier-13b8ba6289e6&user=Kenichi+Nakanishi&userId=9d8da6789697&source=post_page-9d8da6789697--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F46e23b30274b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-a-plant-pet-toxicity-classifier-13b8ba6289e6&newsletterV3=9d8da6789697&newsletterV3Id=46e23b30274b&user=Kenichi+Nakanishi&userId=9d8da6789697&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}