{"url": "https://towardsdatascience.com/magic-methods-in-python-through-small-code-snippets-6a18ed0a150", "time": 1683011282.7196128, "path": "towardsdatascience.com/magic-methods-in-python-through-small-code-snippets-6a18ed0a150/", "webpage": {"metadata": {"title": "Magic Methods in Python through Small Code Snippets | by Stephen Fordham | Towards Data Science", "h1": "Magic Methods in Python through Small Code Snippets", "description": "Magic or dunder methods are built-in methods automatically available to the user upon the substantiation of a class. Magic methods are usually surrounded by double underscores on either side of the\u2026"}, "outgoing_paragraph_urls": [{"url": "https://gist.github.com/StephenFordham/de6d189a14dcd3978719784efab893f0", "anchor_text": "here", "paragraph_index": 34}, {"url": "https://github.com/StephenFordham", "anchor_text": "https://github.com/StephenFordham", "paragraph_index": 36}], "all_paragraphs": ["Magic or dunder methods are built-in methods automatically available to the user upon the substantiation of a class. Magic methods are usually surrounded by double underscores on either side of the method name. Everyone knows the most basic magic method, __init__. It is the way that we can define the initialisation behaviour of an object. There are however, many more magic methods. To find the directory of magic methods available to you, simply run the built-in Python function dir() on the name of your class.", "Here, the directory of attributes, including the magic methods are output as a list when the dir() function is run on two built-in classes, dict and list.", "To help users understand magic methods better, I have created a short example-led guide detailing how the standard default behaviour of a built-in magic method can be manipulated for a selection of useful magic methods.", "The examples presented throughout however, come with a warning. If you modify the behaviour of a magic method, and you package your code up into a module intended to be used by other programmers, they may reasonably expect default behaviour for the magic methods. My advice therefore, is to make it explicitly clear to an audience if any method\u2019s default behaviour has been overridden.", "The aim for this tutorial is to provide some short snippet examples, illustrating how magic methods can selectively customised. The examples presented are deliberately short to help showcase the inner workings.", "To begin, I will create a contrived example based on restaurants. In this example I have a class where the user can pass the weekday earnings as as list to the init constructor. The list passed gets set as an attribute in the object.", "Lets propose we have two restaurants in 2 cities and we would like to know the combined earnings for each day of the week, Monday through to Friday. We can easily implement this behaviour in our class by overriding the magic method, __add__(self, other).", "In the magic add method, we perform a list comprehension, where we zip two lists together, iterate over the now zipped lists, and sum the zipped elements to produce a single numeric integer for each day of the week. The list comprehension is assigned to the variable, retval. Finally, the method can return a Restaurants object, with this new list\u00a0(retval)\u00a0passed.", "In order to get the output we desire, we must now implement another magic method, the__str__(self) method. This method, takes the list attribute and returns it. When the str method is called, which is what happens when we print an object, the new list will be shown, as illustrated below in the code snippet.", "To provide insight, when we use the plus operator, the call to the add method is made__add__(self, other). Here, both self and other represent objects of the Restaurants class. This is best illustrated in the example below. We can call the add method explicitly as shown on line 4, but that seems less, well, \u2018magical\u2019.", "The __iadd__ method method can also be implemented in the Restaurants class. To demonstrate how __iadd__ could be used, lets propose we have 2 restaurants in the same city and we would like a single numeric integer for the takings of those 2 restaurants.", "We can override the __iadd__ method. We can use the built-in Python sum function to sum the entries for week 1 in both restaurants, and save the result in the variable named retval, which can then be returned.", "Now, when we call the assignment operation, += on our objects, this call will resolve to the method call, iadd. For this example, there may be simpler ways to get the answer requested, but I wanted to demonstrate the workings of the __iadd__ method.", "We can also customise the indexing in our Restaurants class. Lets propose we would like to have the dual situation where the user can index a weekday\u2019s takings using either standard indexing of the list we passed upon object creation, or choose to index the weekday evenings by typing in the name of the weekday to retrieve the takings on that day.", "To do this, we can define custom behaviour for the getitem method. This method is invoked when a container is indexed. In the getitem method, a dictionary is defined, with the days of the week as keys, and the values as the corresponding numeric integer.", "When getitem is called, which happens when we index our object as shown, if the day of the week passed in, matches any key from weekday_dict, we retrieve the value from the weekday key provided. This returns a numeric integer, which can be used to index our original list of takings.", "As shown, we can index, wk1_city_1 with \u2018Monday\u2019 and we get back the value of 10. We can also choose to preserve the original indexing method by including the else statement shown. In this way, we have introduced greater flexibility into our class, through multiple ways of indexing.", "We can also implement the greater than or equal to, and less than or equal to magic methods into our class design. Lets propose we would like to determine which restaurant in city 1 or city 2 performed better in terms of takings. We can do this by implementing the following methods which return booleans:", "Defines behaviour for the greater-than-or-equal-to operator, >=.", "Defines behaviour for the less-than-or-equal-to operator, <=.", "When we use these operator, under the hood they resolve to the corresponding, ge/le magic method call.", "Now, we can use the greater than, or less than or equal to operators on our objects. As shown, wk1_city_1 returned a boolean False when the operator >=was invoked\u00a0against\u00a0wk1_city_2.", "Custom behaviour can be implemented when attributes are set in the object. In the contrived restaurant example we have been using throughout this tutorial, the magic methods we have incorporated into our class, rely on a list being passed and set as an attribute in the object. In addition, we would like all the elements within the list to be numeric integers. These two conditions can be defined, in the magic setattr method.", "First, we check whether the argument passed to the value parameter, in the setattr method is a list using the built-in isinstance method. If the user passes in any other object, a TypeError exception will be raised, with a useful message informing the user how the class is intended to be used. Next, we can iterate through the list, making sure each element is in fact an integer or float. This makes sense in the context of measuring weekday earnings for the restaurant.", "If both conditionals are satisfied, we can set the attribute in the objects dictionary using the syntax:", "As shown, if an element, such as 20 is passed as the string \u201820\u2019, a valueError exception is raised and the user is reminded what the expected input should be.", "Be careful how you call setattr. In the first example shown\u00a0below, the object.attribute syntax will call the method you are already in. In this case, an endless recursive loop will\u00a0be\u00a0invoked.", "Custom behaviour can be invoked when a user attempts to access an attribute that does not exist (either at all or yet). This can be useful for catching and redirecting common misspellings, giving warnings about using deprecated attributes.", "This can be achieved via the magic method, getattr. In the example, when the user calls the correctly named attribute on the object, the object attribute\u2019s value is returned.", "If the attribute they call on the object does not exist, the custom getattr method can raise an AttributeError exception, informing the user, which attributes can be accessed.", "The __repr__ method defines behaviour for when repr is called on an instance of your class. The major difference between the str and repr magic methods are the intended audience. repr is intended to produce output that is mostly machine-readable, for example it could be valid Python code, whereas str output is intended to be human-readable.", "Without custom behaviour defined for repr, when we print the object, the console output informs the user that the object is a Restaurants object, and gives the address in memory with the hex code. This can be structured more informatively by customising repr. The class name can be returned, followed by the list. When printed, as shown below, we now have valid Python code, equivalent to when we create an instance of the Restaurants class.", "Magic methods can extend the functionality of our class, and in some cases preserve existing default behaviour. This approach was adopted when custom behaviour was implemented for indexing a container using getitem.", "One caveat when using magic methods, is that the user may expect default behaviour, so you must explain this via error messages or a readme doc. Magic methods do have the benefit, when used appropriately, to be intuitive. The add method for example, gave output the user might expect. In addition, the user does not need to learn new method names.", "This tutorial served as a primer to demonstrate how to use magic methods. The complete code for these examples can be found here. Enjoy using magic methods in your class design!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Articles on Data Science and Programming https://github.com/StephenFordham"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F6a18ed0a150&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmagic-methods-in-python-through-small-code-snippets-6a18ed0a150&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmagic-methods-in-python-through-small-code-snippets-6a18ed0a150&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmagic-methods-in-python-through-small-code-snippets-6a18ed0a150&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmagic-methods-in-python-through-small-code-snippets-6a18ed0a150&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----6a18ed0a150--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----6a18ed0a150--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@stephenfordham?source=post_page-----6a18ed0a150--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@stephenfordham?source=post_page-----6a18ed0a150--------------------------------", "anchor_text": "Stephen Fordham"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5d3f46276e7e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmagic-methods-in-python-through-small-code-snippets-6a18ed0a150&user=Stephen+Fordham&userId=5d3f46276e7e&source=post_page-5d3f46276e7e----6a18ed0a150---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6a18ed0a150&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmagic-methods-in-python-through-small-code-snippets-6a18ed0a150&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6a18ed0a150&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmagic-methods-in-python-through-small-code-snippets-6a18ed0a150&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/photos/3n7DdlkMfEg", "anchor_text": "Unsplash"}, {"url": "https://gist.github.com/StephenFordham/de6d189a14dcd3978719784efab893f0", "anchor_text": "here"}, {"url": "https://medium.com/tag/data-science?source=post_page-----6a18ed0a150---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/programming?source=post_page-----6a18ed0a150---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/coding?source=post_page-----6a18ed0a150---------------coding-----------------", "anchor_text": "Coding"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----6a18ed0a150---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/tag/python-programming?source=post_page-----6a18ed0a150---------------python_programming-----------------", "anchor_text": "Python Programming"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6a18ed0a150&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmagic-methods-in-python-through-small-code-snippets-6a18ed0a150&user=Stephen+Fordham&userId=5d3f46276e7e&source=-----6a18ed0a150---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6a18ed0a150&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmagic-methods-in-python-through-small-code-snippets-6a18ed0a150&user=Stephen+Fordham&userId=5d3f46276e7e&source=-----6a18ed0a150---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6a18ed0a150&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmagic-methods-in-python-through-small-code-snippets-6a18ed0a150&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----6a18ed0a150--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F6a18ed0a150&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmagic-methods-in-python-through-small-code-snippets-6a18ed0a150&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----6a18ed0a150---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----6a18ed0a150--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----6a18ed0a150--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----6a18ed0a150--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----6a18ed0a150--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----6a18ed0a150--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----6a18ed0a150--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----6a18ed0a150--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----6a18ed0a150--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@stephenfordham?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@stephenfordham?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Stephen Fordham"}, {"url": "https://medium.com/@stephenfordham/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "977 Followers"}, {"url": "https://github.com/StephenFordham", "anchor_text": "https://github.com/StephenFordham"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5d3f46276e7e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmagic-methods-in-python-through-small-code-snippets-6a18ed0a150&user=Stephen+Fordham&userId=5d3f46276e7e&source=post_page-5d3f46276e7e--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fbd4ed43cae00&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmagic-methods-in-python-through-small-code-snippets-6a18ed0a150&newsletterV3=5d3f46276e7e&newsletterV3Id=bd4ed43cae00&user=Stephen+Fordham&userId=5d3f46276e7e&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}