{"url": "https://towardsdatascience.com/create-a-custom-deep-reinforcement-learning-environment-in-ue4-cf7055aebb3e", "time": 1683016605.037444, "path": "towardsdatascience.com/create-a-custom-deep-reinforcement-learning-environment-in-ue4-cf7055aebb3e/", "webpage": {"metadata": {"title": "Creating a Custom Deep Reinforcement Learning Environment | by Aaron Krumins | Towards Data Science", "h1": "Creating a Custom Deep Reinforcement Learning Environment", "description": "While the scope of reinforcement learning (RL) is likely to soon extend far beyond computer simulation, today the main location for training RL agents is within the digital environment. In the world\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.unrealengine.com/marketplace/en-US/product/mindmaker-ai-plugin", "anchor_text": "MindMaker", "paragraph_index": 4}, {"url": "https://unrealengine.com/marketplace/en-US/product/neurostudio-self-learning-ai", "anchor_text": "MindMaker Deep Reinforcement Learning", "paragraph_index": 6}, {"url": "https://www.unrealengine.com/marketplace/en-US/product/mindmaker-ai-plugin", "anchor_text": "MindMaker AI Plugin", "paragraph_index": 6}], "all_paragraphs": ["While the scope of reinforcement learning (RL) is likely to soon extend far beyond computer simulation, today the main location for training RL agents is within the digital environment. In the world of artificial intelligence, simulators are often the environments in which an algorithm functions.", "For humans, we are born directly into our simulator and it requires no effort on our part to go on functioning. We call this simulator the universe and it exists whether we believe in it or not. Similarly, the laws of physics apply whether you acknowledge them or not. They require no effort or acquiescence on our part. A synthetic agent possessed of reinforcement learning such as a robot or video game character, however, has no direct access to any world except that which we provide it through artificial sense organs. By itself, it exists as little more than a complex set of instructions for building a learning agent, not unlike a genetic code. It has no body or senses, no environment in which to act. Initially, at least, it is far easier for such agents to interact in virtual worlds within a computer than our own physical world since their instructions are comprised of software rather than organic compounds like DNA.", "In a virtual world, the agent can easily gain access to all sorts of information about its simulator that is difficult to discover in our own physical world. If it wants to know about the physics of its virtual world, it can simply query the variables in which the programmer stored this information. In the physical world, there is no lookup table in which this information is stored. Instead, such properties must be ascertained the hard way, through learning. It is also far safer to have these reinforcement learners confined to virtual worlds during their exploration period since when they make a \u201cmistake,\u201d it has limited repercussions, at worst causing the computer on which they run to crash( an exception are algorithms with access to the Internet, like some computer viruses or stock trading bots which have far greater capacity for real world damage) . Artificial agents can also learn much faster within virtual worlds since they are not limited by many of the environmental variables of our physical world. This is crucial when the reinforcement learning process requires thousands or millions of training iterations to get a sense of the desired associations for it to reach its strategic goal.", "The simulator is therefore a pivotal additional element to the reinforcement learning equation. In this article we will explore how to bridge the gap between algorithm and simulator \u2014 creating a custom reinforcement learning environment in the process. Until recently OpenAI Gym was one of the best candidates for experimenting with RL agents; however this had its limitations. One can only watch an agent learn to play Atari Pong so many times before the crudeness of the pixelated environments begins to grate upon the nerves.", "Today there are better options \u2014 with a free plugin called MindMaker, one can deploy the same cutting edge RL Algorithms that work in OpenAI Gym on the most graphically realistic simulation environment known to humankind. Yes, I\u2019m talking about Unreal Engine 4 from the makers of Fortnight. Thanks to blueprint integration you can customize your DRL algorithm with an easy to use GUI rather than needing to dive into the code. So without further preliminaries, lets get started creating a custom RL environment in Unreal Engine 4.", "In this example we will go about recreating a classic RL training environment, the legendary cart pole task. The goal of the project is to teach a cart to balance a pole by moving side to side in the appropriate manner. It is similar to the balancing games played by children in which they learn to steady a broom on the tip of one\u2019s finger. The example has some interesting corollaries for such things as learning to use a steering wheel in the case of a self-driving car or teaching a robot to balance while standing upright. We will be creating this learning environment from scratch, demonstrating how easy it is to create a custom RL training task within UE4.", "To begin download the the MindMaker Deep Reinforcement Learning package from the UE Marketplace. This contains the starter content that we will be using to create the cart pole environment (a finished version of the Cart-pole example is also included with the free MindMaker AI Plugin). Open the maps folder and locate the map called \u201cMindMakerStarterContent\u201d. After opening this, navigate to the folder named \u201cMindMakerStarterContent\u201d. This will look similar to the default 3rd person starter content provided by UE4, with the difference that several non-standard blueprints are included.", "Before proceeding we need to make one change to the project settings, setting the frame rate to 30. This is to ensure that we get a smooth response from the physics engine and the cart doesn\u2019t get stuck hanging in mid air as it falls down. Go to the Edit drop down, and click project settings. Search for frame rate, its located under Engine General Settings, and change the Use Fixed Frame rate check box to true. Than set the frame rate to 30.", "Now Rename BlankMindMakerActorBP blueprint, to \u201cCart_BP\u201d. Make sure to delete the other Mindmaker assets that won\u2019t be used before proceeding, specifically MindMakerCharacterControler and MindMakerCharacterBP which refer to the 3rd person character if you were building an RL agent based upon the 3rd person blueprints. Next open Cart_BP in the blueprints editor and navigate to the viewport tab. From the left side green button \u201cadd component menu\u201d find 1M_Cube object and place one in the viewport window. Change its z scale to .2 and make sure the enable gravity checkbox in it\u2019s properties is set to true. Click the add component menu again and add a sphere over the cube so it sticks out the top. Change its z scale to .3. and the z location to 10. Hurrah, we now have our basic cart shape. Return to the map and drag your Cart_BP blueprint onto the map so you see the combined shapes appearing there. Now change the x scale at the map level of your cart .3, this effect both the shapes that make up the cart.", "Now we need a cylinder to balance on top of the cart. Create a new blueprint of class actor and name it Cyl_BP. Open it and from the left side green button \u201cadd component menu\u201d click cylinder and drag it into the viewport. Change the scale of the cylinder so the X and Y dimensions measure .2 instead of 1. Got to the map level, select the cylinder and make sure that the simulate physics checkbox under properties is set to True as well as the enable gravity one. Change the linear dampening and angular dampening to 11. These are both under properties. Now go to the event graph and create two new float variables within the cylinder blueprint, called cylroll, cylpitch. Next create a variable of type Cart_BP, that will serve a reference to the cart since we will need to communicate with variables contained in Cart_BP. Return to the map, select your cylinder and from the Default menu you should now see the Cart_BP variable we just created. Click it and select the Cart_BP reference from under your map name. This is so that Cart_BP variable within the cylinder blueprint points to the Cart_BP blueprint. Return to the cylinder blueprint and create a bool variable called start which will function as an identifier for when the cylinder has tipped over and needs to be reset. Make the default value for Start set to true.", "Now we will add some logic that detects when the cylinder has tipped over and resets it. This can be done by adding an event tick node that will continually check to see if the cylinder has fallen. Connect the event tick to a branch node that will fire when any one of the variables cylroll, cylpitch, are inclined more than 30 degrees or less than 30 degrees. We will update these variables based on the physics of the cylinder at the map level blueprint. We also want the branch node to fire when the training period for the cart is complete, even if the cylinder has not fallen over yet, so that it can be reset when the number of training episodes is complete and we are ready to evaluate the AI. So we add a reference to the TrainingComplete variable contained in Cart_BP. TrainingComplete is one of the default MindMakerVariables that comes with the package. Whenever any of these conditions are True, we set the Start bool to false, essentially stopping training until the cart and pole are reset.", "The next two nodes are for the logic of resetting the cart and pole to their original position using the set World location node and the move component node. The x, y and z coordinates for these will be somewhat particular to where exactly you placed the cart and pole on the map to begin with. You can find this info by clicking on them at the map and jotting down their x y and z coordinates. Last we need a node setting the Start bool to true, so that the MindMaker learning engine in Cart_BP will know that the cart has been reset and to begin training again. Next we set TrainingComplete variable to false, so that we don\u2019t continually reset the cart during any demonstration episodes that follow training.", "This completes the cylinder blueprint. Return to the map and drag in CYL_BP so that the cylinder appears roughly on top of the cart.", "Getting updates on our cylinder physics can be a tricky and must be done at the map level. To do so FIRST CLICK THE CYLINDER ON THE MAP SO IT IS SELECTED AND OUTLINED IN YELLOW. Than open the map level blueprint. Now right click on the event graph and you will see an option \u201cCreate a Reference to Cyl_BP\u201d. This is only there because you first selected the cylinder in the map window, and cannot otherwise be accessed.", "Create two of such references. From the first one, drag off a GetActorRotation node. From its return value, find a \u201cBreak Actor Rotator\u201d node. Now go to the other Cyl_BP reference and drag off a \u201cSet Cylroll\u201d node. This is getting a reference to CylRoll variable your created in Cyl_BP. Do the same for CylPitch as well. Now connect all these to their corresponding break actor rotator nodes. Now add an event tick node and connect the two Set variable nodes to it. With that done, your variables in Cyl_BP will be updated in real time with values about the roll and pitch of the cylinder.", "Next we move to the Cart_BP that we first created, as this is where the machine learning will take place. It already will contain many default variables and functions that are used with MindMaker because it was copied from the BlankMindMakerActorBP.", "The first step in customizing Cart_BP will be to open it and click on the function on the left side called \u201cCheckReward\u201d. Rewards are the building blocks of Reinforcement Learning and we will need to tell the agent precisely what it is trying to optimize through this reward function. In this case we want it to be rewarded for each \u201cepisode\u201d of the game in which it keeps the cylinder upright. To do this will use a branch statement, the equivalent of an \u201cif than else\u201d. We have several conditions to check so we will attach the branch node to an OR node. Next create a variable called cylinder of type Cyl_BP, which will be used to access our cylinder variables. Go back to the map level blueprint, select the default tab, and you should see your Cyl_BP variable, click the dropdown and select the Cyl_BP object that should be listed under your map name. Again, this so that your Cylinder variable reflects values from Cyl_BP. Go back to the event graph for Cart_BP and from the OR node of your branch drag off conditionals for the pitch and roll of the cylinder, that is Cylpitch and Cylroll, and set them to greater than 30 and less than -30. Now from the True part of the branch, drag off a node setting the variable reward to itself plus one. This will increment the reward for every episode of the game in which the cylinder remains upright. If false, we set the reward variable to zero, resetting everything because the cylinder has fallen over. That\u2019s it for the reward function.", "Next open the MakeObservations function in Cart_BP. We need to get a reference to the pitch of the cylinder, so that RL algorithm can learn to optimize around it. Similar to the reward function, grab the cylinder variable drag it in, and pull out the get cylpitch variable. Plug this in to the Append node of Set Observations.", "We are almost done! Last we need to modify the display code, so that the environment gets updated with actions taken by the agent. Go to the main event graph and find the \u201cDelay For Display\u201d section of logic. Before the MakeObersvations function gets called, add a MoveComponentTo node and from the component reference on it, drag off a link to get \u201cMindMakerStaticMesh\u201d. This is essentially the combined objects that make up the cart. From the same \u201cMindMakerStaticMesh\u201d node, drag off a \u201cget relative location\u201d node from the transform heading. Right click on the gold pin of that node and select \u201cSplit struct pin\u201d. Now we can alter the x y and z variables relating to our cart so that it moves depending on the action the RL algorithm has selected for it.", "At this point in the blueprint, the action variable will already have been automatically updated in the \u201cRecieveAction\u201d function. MindMaker handles the generation of actions and they are received in UE via the ReceiveAction function so that afterwards, we move the agent according to the action selected. Now we just need to feed the Observations and Rewards from those actions back into the MindMaker RL algorithm until it generates better actions, in a kind of virtuous loop. This is the magic of reinforcement learning.", "Coming back to the MoveComponentTo node, find the TargetRelativeLocation pin and drag of a MakeVector node. Connect the relative location Y and the relative location Z to their corresponding pins in the MakeVectorNode. The only one we want to change is the X value, since this is the plane in which the cart will move, ie side to side. So drag off an additional node from Relative X location and add the \u201cactionselected\u201d variable to it. Now that is complete, we need to add a delay so that when the cylinder is falling and gets reset, everything is temporarily paused and MindMaker doesn\u2019t just continue generating actions \u201cmindlessly\u201d. To do this create a branch node after the set members in MindMakerCustomStruct node. The branch should check the status of the Boolean Start variable we created in our Cyl_BP . From the false pin, drag of a node to a delay call, setting this .1 seconds, and then reconnect it to the branch node, in a loop. From the true pin, it should just connect up to the Emit node that was there before.", "Our last and final job is to configure the LaunchMindMaker function to work with the environment we have created. Fortunately, this is pretty simple. The first thing we need to do is choose which RL algorithm to train with. For this task we will use Proximal Policy Optimization, or PPO2 from the dropdown. Next we set the number of training episodes, lets try 1000 to begin with. For the number of evaluation episodes set this to 100. To make things more fun, lets allow the agent to use a continuous action space instead of a discrete set of actions. So rather than just moving the cart one space to the right or left, it can move it fractionally, making the action space infinitely larger and more difficult. In the action space section we need to specify the range over which the agent can take actions, let's do between 1 and -1. This is an extremely large space when you consider the decimal values between 1 and -1. This is entered in the format used by OPEN AI to define action spaces and should read \u201clow=-1, high=1,shape=(1,)\u201d", "Now we need to set the observation space. The RL algorithm in the MindMaker learning engine will be receiving observations about the cylinders pitch, and for our purpose let\u2019s say these will range from -100 to 120 so enter \u201clow=np.array([-100]), high=np.array([120]),dtype=np.float32\u201d This is again from the OpenAI format for observation spaces. Next, if we wanted to use any custom parameters for our RL algorithm, there\u2019s a lot there that can be tweaked. I include a screenshot of one setup that seems to work well for this task.", "That\u2019s it, we're ready to roll! Return to the map level viewport and hit play to begin training. You should see the MindMaker learning engine begin manipulating the cart. The size of the of movements it makes, essentially the random actions it is performing to learn how to balance the cart, will stream across the screen. After a thousand repetitions or so, it should have learned to balance the cart. In many cases, this may be done by taking very small movements that don\u2019t cause the cart to fall.", "In summary, we have seen how plugins such as MindMaker are extending the scope of reinforcement learning, opening up new frontiers in both video game AI and machine learning. This extends far beyond toy problems such as the one we have encountered here, impacting both scientific and technical fields including robotic simulation, autonomous driving, generative architecture, procedural graphics and much more. In this way, plugins like MindMaker bridge an important gap between simulator, algorithm and reality.", "As an example, recently one of the founders of the company DeepMind expressed an interest in discovering a room temperature superconductor using reinforcement learning. For such a goal, the issue of creating the right simulator could be incredibly difficult since the simulator would have to capture all the properties of physics and chemistry that interact in superconductors. While the reinforcement learning algorithm needed to solve such a task could be represented in a few pages of code and only require a laptop computer to run, the simulator necessary to model the environment in which superconductors operate could be so complicated that it would requires years of programming and giant supercomputers to run on. Many of the most obscure properties of physics interact in superconductors and one would need to capture a sizeable portion of these in order to be confident that the solution obtained by the reinforcement learner applied to our physical reality and not just the reality of the simulator. It is therefore crucially important when working with RL algorithms to have access to top of the line simulators such as Unreal Engine.", "The use of Unreal Engine\u2019s blueprint functionality also decreases the barriers to entry in the field of machine learning. Developers with little to no coding experience can dive in and start using the same algorithms as machine learning professionals, all without needing to get their hands dirty tinkering with Python or Tensorflow code.", "If you have questions or inquiries, feel free to leave them here or reach out to me personally. In upcoming articles, I will explore related topics such as the dark art of reward engineering \u2014 more specifically, how one sculpts suitable reward functions to use with their custom RL agent.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Aaron Krumins is the author of \u201cOutsmarted \u2014 The Promise and Peril of Reinforcement Learning\u201d and currently works as a freelance machine learning consultant"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fcf7055aebb3e&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-a-custom-deep-reinforcement-learning-environment-in-ue4-cf7055aebb3e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-a-custom-deep-reinforcement-learning-environment-in-ue4-cf7055aebb3e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-a-custom-deep-reinforcement-learning-environment-in-ue4-cf7055aebb3e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-a-custom-deep-reinforcement-learning-environment-in-ue4-cf7055aebb3e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----cf7055aebb3e--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----cf7055aebb3e--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://aaron-krumins.medium.com/?source=post_page-----cf7055aebb3e--------------------------------", "anchor_text": ""}, {"url": "https://aaron-krumins.medium.com/?source=post_page-----cf7055aebb3e--------------------------------", "anchor_text": "Aaron Krumins"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F700bb1fd579c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-a-custom-deep-reinforcement-learning-environment-in-ue4-cf7055aebb3e&user=Aaron+Krumins&userId=700bb1fd579c&source=post_page-700bb1fd579c----cf7055aebb3e---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcf7055aebb3e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-a-custom-deep-reinforcement-learning-environment-in-ue4-cf7055aebb3e&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcf7055aebb3e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-a-custom-deep-reinforcement-learning-environment-in-ue4-cf7055aebb3e&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://michaeljcole.github.io/wiki.unrealengine.com/", "anchor_text": "wiki.unrealengine.com"}, {"url": "https://www.youtube.com/watch?v=kNmNKnDQvgo", "anchor_text": "https://www.youtube.com/watch?v=kNmNKnDQvgo"}, {"url": "https://www.unrealengine.com/marketplace/en-US/product/mindmaker-ai-plugin", "anchor_text": "MindMaker"}, {"url": "https://unrealengine.com/marketplace/en-US/product/neurostudio-self-learning-ai", "anchor_text": "MindMaker Deep Reinforcement Learning"}, {"url": "https://www.unrealengine.com/marketplace/en-US/product/mindmaker-ai-plugin", "anchor_text": "MindMaker AI Plugin"}, {"url": "https://medium.com/tag/reinforcement-learning?source=post_page-----cf7055aebb3e---------------reinforcement_learning-----------------", "anchor_text": "Reinforcement Learning"}, {"url": "https://medium.com/tag/deep-learning?source=post_page-----cf7055aebb3e---------------deep_learning-----------------", "anchor_text": "Deep Learning"}, {"url": "https://medium.com/tag/videogames?source=post_page-----cf7055aebb3e---------------videogames-----------------", "anchor_text": "Videogames"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----cf7055aebb3e---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----cf7055aebb3e---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fcf7055aebb3e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-a-custom-deep-reinforcement-learning-environment-in-ue4-cf7055aebb3e&user=Aaron+Krumins&userId=700bb1fd579c&source=-----cf7055aebb3e---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fcf7055aebb3e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-a-custom-deep-reinforcement-learning-environment-in-ue4-cf7055aebb3e&user=Aaron+Krumins&userId=700bb1fd579c&source=-----cf7055aebb3e---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcf7055aebb3e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-a-custom-deep-reinforcement-learning-environment-in-ue4-cf7055aebb3e&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----cf7055aebb3e--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fcf7055aebb3e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-a-custom-deep-reinforcement-learning-environment-in-ue4-cf7055aebb3e&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----cf7055aebb3e---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----cf7055aebb3e--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----cf7055aebb3e--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----cf7055aebb3e--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----cf7055aebb3e--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----cf7055aebb3e--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----cf7055aebb3e--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----cf7055aebb3e--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----cf7055aebb3e--------------------------------", "anchor_text": ""}, {"url": "https://aaron-krumins.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://aaron-krumins.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Aaron Krumins"}, {"url": "https://aaron-krumins.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "176 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F700bb1fd579c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-a-custom-deep-reinforcement-learning-environment-in-ue4-cf7055aebb3e&user=Aaron+Krumins&userId=700bb1fd579c&source=post_page-700bb1fd579c--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F2b84a10369ed&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-a-custom-deep-reinforcement-learning-environment-in-ue4-cf7055aebb3e&newsletterV3=700bb1fd579c&newsletterV3Id=2b84a10369ed&user=Aaron+Krumins&userId=700bb1fd579c&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}