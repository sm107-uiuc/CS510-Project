{"url": "https://towardsdatascience.com/checking-analyzed-laboratory-data-for-errors-4bd63bcc554d", "time": 1683001778.71887, "path": "towardsdatascience.com/checking-analyzed-laboratory-data-for-errors-4bd63bcc554d/", "webpage": {"metadata": {"title": "Checking Analyzed Laboratory Data for Errors | by Peter Grant | Towards Data Science", "h1": "Checking Analyzed Laboratory Data for Errors", "description": "It\u2019s very common that scientists find themselves with large data sets. Sometimes it comes in the form of gigabytes worth of data in a single file. Other times it\u2019s hundreds of files, each containing\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/tutorial-automatically-creating-a-performance-map-of-a-heat-pump-water-heater-7035c7f208b0", "anchor_text": "first post in this tutorial", "paragraph_index": 2}, {"url": "https://towardsdatascience.com/tutorial-automatically-creating-a-performance-map-of-a-heat-pump-water-heater-7035c7f208b0", "anchor_text": "you might want to read it", "paragraph_index": 2}, {"url": "https://peter-grant.my-online.store/HPWH_Performance_Map_Tutorial_Data_Set/p6635995_20036443.aspx", "anchor_text": "companion data set", "paragraph_index": 3}, {"url": "https://towardsdatascience.com/splitting-data-sets-cac104a05386", "anchor_text": "split the data set into multiple files", "paragraph_index": 3}, {"url": "https://towardsdatascience.com/automatically-analyzing-laboratory-test-data-32c27e4e3075", "anchor_text": "third part", "paragraph_index": 5}, {"url": "https://medium.com/zero-equals-false/how-to-write-scripts-that-check-data-quality-for-you-d8762dab34ca", "anchor_text": "How to Write Scripts that Check Data Quality for You", "paragraph_index": 38}, {"url": "https://medium.com/zero-equals-false/how-to-perform-multivariate-multidimensional-regression-in-python-df986c35b377", "anchor_text": "How to Automatically Generate Regressions in Python", "paragraph_index": 39}], "all_paragraphs": ["It\u2019s very common that scientists find themselves with large data sets. Sometimes it comes in the form of gigabytes worth of data in a single file. Other times it\u2019s hundreds of files, each containing a small amount of data. Either way, it\u2019s hard to manage. Hard to make sense of. Hard for your computer to process. You need a way to simplify the process, to make the data set more manageable, and to help you keep track of everything.", "That\u2019s what this tutorial is all about. We\u2019re in the process of writing Python scripts that will automatically analyze all of the data for you and store the data with meaningful, intuitive file names. All while using an example taken from actual research, so you know that the skills you\u2019re developing are practical and useful.", "The first post in this tutorial introduced the concepts of the tutorial. If the terms \u201cheat pump water heater\u201d, \u201ccoefficient of performance (COP)\u201d, and \u201cperformance map\u201d don\u2019t mean anything to you, you might want to read it.", "The second post introduced the companion data set, and split the data set into multiple files with user-friendly names.", "The companion data set is a valuable part of the tutorial process, as it allows you to follow along. You can write the exact same code that I\u2019ll present, run the code, see the results, and compare it to results I present. In that way, you can ensure that you\u2019re doing it right.", "In the third part of the tutorial we created a script that analyzed each of the individual data files. In this process we 1) Filtered the data to only examine the relevant portions, 2) Identified the timestep in the data, 3) Calculated the change in stored energy in the tank during each timestep, 4) Calculated the COP of the heat pump at each timestep, 5) Generated regressions expressing the COP as a function of the water temperature in each test, and 6) Saved the results for future use.", "At the end of that process we are left with one of the most important questions in the process. Has the process up to now worked right? There are a number of problems that could have arisen. The experimentalist could have made a mistake running the test, leading to erroneous data. A sensor could have broken leading to lost data. There could be an error in the data processing code leading to weird results even though the input data is correct.", "This post will show you how to manually check the data for errors. This step is important as it teaches you all of the concepts involved in error checking, such as how to think through what\u2019s important in the test and how to examine the data to ensure that everything worked correctly. This will set us up for the next phase of the tutorial which will focus on doing this automatically.", "The starting point for this phase of the tutorial will be the same program from last time. We\u2019ll be adding new code inside the for loop analyzing the data, and taking advantage of the fact that we have already imported bokeh for plotting purposes.", "The first step is to think about what could have gone wrong, and what potential errors we need to check for.", "In order to identify the important error checks we need to consider what parts of the test are important. For these tests, I\u2019ve identified the following points:", "In order to check all of these items manually we need to create plots that present the water temperature, ambient temperature, and electricity consumption over the course of the test.", "To create the necessary plots for each test we must add the code to plot each item within the for loop. In this way each plot is created for a single test, then the program moves on to the next test and creates the plots for that test as well.", "Fortunately, we imported the necessary bokeh functions in the previous article and don\u2019t need to worry about it this time. This means that we can dive right in by writing a line of code to create the first plot object presenting the water temperature in the tank. This is done with the following line.", "This line references the bokeh function \u2018figure\u2019 to create a figure object. It\u2019s assigned to the variable \u2018p1\u2019 so we can edit that figure by referencing p1 in the future. Within the function it sets the width of the plot to 800 pixels, the height to 400 pixels, the x-axis label to \u2018Time (min)\u2019 and the y-axis label to \u2018Water Temperature (deg F)\u2019. We now have the structure of a plot that we can add data to as needed.", "Data is added by editing the figure to add new data series. A new line is used for each data series added, and the data can be added by referencing the data frames used in the data analysis. To add the water temperature data to the plot we use the following code:", "Each line of the above code adds a new data series to the plot. The lines call the p1.circle function, stating that the new data series will be represented as circles on the plot. Within the function call, the first item is the x data and the second is the y data. You can see that each data series represents adds the time since the start of the test in minutes as the x data, and a different water temperature as the y data. There are nine data series, with the first eight representing direct water temperature measurements from the data and the ninth representing the calculated average water temperature. The legend specification for each data series states how the data series should be represented in the legend, and the color specifies the color to be used for the circles in the plot. The circle colors were chosen to use lighter blues at the top of the tank and darker blues at the bottom.", "Finally, we want to specify the location of the legend. If not the legend will likely cover a part of the data set obscuring the information that we need to see. We can locate it in the bottom right of the plot by adding the line:", "This completes the first plot, so we can move on to the second plot representing the ambient temperature. This follows the same process of creating a plot object and adding a data series to it. Since you\u2019ve already seen the process, this will be presented with less detail and discussion.", "This creates a similar plot, but it only has one data series which shows the \u2018T_Amb (deg F)\u2019 column from the data frame. Note that the y axis label has also changed to show the change in the data set.", "The third plot we need shows the COP during the test. Similarly to the ambient temperature, this plot will be presented with less discussion since you\u2019re already familiar with the process. The third plot is created with the following code:", "The new addition to this code is the addition of a line presenting the COP of the device as calculated using the regression from the last article. This is called using the p3.line function. Traditionally a line is used for simulated data. The x data for this line is then created using a numpy array ranging from 72 to 140.1 with a step size of 0.1. Note that since Python does not include the final entry in an array this actually creates data points ranging from 72 to 140. The y data uses the same range as the input to our COP regression, then plots the calculated COP values. The legend and color entries are the same as in the previous plots.", "That code creates the three plots, but it doesn\u2019t actually save them. Bokeh saves the plots as a user-defined array in a .html file. To save the plots we need to specify the array and the .html file, then save the data. We can do this with the following code:", "The first line creates a gridplot object consisting of three lists. In this format, each list represents the plots to put in each row. Since the data is entered as three separate lists, each containing a single plot, the plots will be presented in a single column in the .html file. If we wanted to have multiple columns, we could add multiple entries into the lists.", "The output_file function specifies the desired name of the file and the title to have on the .html file when opened. In this case, we use dynamic naming to give the plot the same name as the data file, but with a .html ending instead of a .csv. The \u2018Filename_Test[:-4]\u2019 code removes the \u2018.csv\u2019 from the name of the file. When specifying the filename we add \u2018.html\u2019 to ensure that it saves as a .html file. When specifying the title we don\u2019t bother including the extension. Finally, we save the .html file containing the plots to the computer with save(p).", "We can check the quality of the data and analysis by examining the plots to ensure that they show what we need to see. Let\u2019s discuss that through examining the three plots that we just created for the 55 deg F ambient temperature test.", "The first plot showed the temperature of water at each depth in the tank over the course of the test. It is presented below.", "In this test, we can see that every measurement started at 72 degrees Fahrenheit. This is exactly what we expected to see. Additionally, the final temperature reported by each measurement was 140 degrees Fahrenheit. Again, this was exactly what we expected to see. Finally, we see that the temperature in each measurement gradually increases, as we expect to see when it\u2019s being slowly heated by a heat pump. This plot shows that the data met the expectations we have for this data set.", "Remember that this is fabricated data, not actual test measurements. I did not add any randomization in to the data when creating it, and that is why this data set is remarkably smooth. Do not ever, ever expect things to be this smooth when working with real data.", "The second plot we discussed was the ambient temperature. This can be seen in the plot below.", "Notice how this data is a bit more random than the water temperatures. Instead of sitting directly at the 55 deg F specified in the test it bounces from 54 deg F to 56 deg F. This is because I added a small amount of randomization to the ambient temperature in the companion data set. This was to provide a bit more of an understanding of what you should expect to see in real data. How do you check to ensure that the ambient temperature was close enough to the specified 55 deg F when it\u2019s not exactly at the setpoint?", "In this case, it\u2019s safe to say that the test was set to 55 deg F as requested. I say this because the average of the data is clearly close to the data. I also think it\u2019s safe to say that the equipment was well controlled. I say this because the temperature was always close to the set temperature; while it varied from 54 to 56 deg F, it certainly never moved as low as 45 deg F or as high as 70 deg F.", "The final plot showed the calculated and regressed COP of the heat pump as a function of water temperature. It is shown below.", "In this case we can see that the measured COP of the heat pump gradually decreases from 72 to 140 deg F. This is expected, as the increased water temperature makes it harder to transfer water from the refrigerant to the water. The gradual drop, as opposed to sudden or jerky changes in COP, is also expected. We can also see that the COP falls in the anticipated 2\u20139 range.", "All told, these three plots all show that the data fits within our specifications and indicate that the test and calculations were performed correctly.", "In this article, we covered adding code to automatically plot the data sets as they\u2019re analyzed, how to think about checking the data, and how to examine the plots to manually validate both the experiments and the calculations. This is an important step as results from a project based on bad data or bad calculations are not valuable.", "However, this isn\u2019t the best way to perform this error checking. If you perform projects with hundreds or thousands of tests manually checking the plots for each test gets time consuming, which means both expensive and tedious. It\u2019s much better to add a new section to the program that automatically compares the values coming from the experiments and from the calculations to user-specified thresholds. In this way we code can automatically identify tests or calculations that do not meet expectations, flag the potential errors, and report those potential errors to the user. We\u2019ll cover this topic in the next article.", "This is a part of a series of articles teaching you all of the skills needed to automatically analyze laboratory data and develop a performance map of heat pump water heaters. The other articles in the series can be found using the following links:", "How to Write Scripts that Check Data Quality for You", "How to Automatically Generate Regressions in Python", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Scientist at Lawrence Berkeley National Laboratory who also teaches skills you need to build a fulfilling career."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F4bd63bcc554d&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchecking-analyzed-laboratory-data-for-errors-4bd63bcc554d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchecking-analyzed-laboratory-data-for-errors-4bd63bcc554d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchecking-analyzed-laboratory-data-for-errors-4bd63bcc554d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchecking-analyzed-laboratory-data-for-errors-4bd63bcc554d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----4bd63bcc554d--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----4bd63bcc554d--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://petergrant-81989.medium.com/?source=post_page-----4bd63bcc554d--------------------------------", "anchor_text": ""}, {"url": "https://petergrant-81989.medium.com/?source=post_page-----4bd63bcc554d--------------------------------", "anchor_text": "Peter Grant"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F985f2ff02845&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchecking-analyzed-laboratory-data-for-errors-4bd63bcc554d&user=Peter+Grant&userId=985f2ff02845&source=post_page-985f2ff02845----4bd63bcc554d---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4bd63bcc554d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchecking-analyzed-laboratory-data-for-errors-4bd63bcc554d&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4bd63bcc554d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchecking-analyzed-laboratory-data-for-errors-4bd63bcc554d&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/tutorial-automatically-creating-a-performance-map-of-a-heat-pump-water-heater-7035c7f208b0", "anchor_text": "first post in this tutorial"}, {"url": "https://towardsdatascience.com/tutorial-automatically-creating-a-performance-map-of-a-heat-pump-water-heater-7035c7f208b0", "anchor_text": "you might want to read it"}, {"url": "https://peter-grant.my-online.store/HPWH_Performance_Map_Tutorial_Data_Set/p6635995_20036443.aspx", "anchor_text": "companion data set"}, {"url": "https://towardsdatascience.com/splitting-data-sets-cac104a05386", "anchor_text": "split the data set into multiple files"}, {"url": "https://towardsdatascience.com/automatically-analyzing-laboratory-test-data-32c27e4e3075", "anchor_text": "third part"}, {"url": "https://towardsdatascience.com/tutorial-automatically-creating-a-performance-map-of-a-heat-pump-water-heater-7035c7f208b0", "anchor_text": "Introduction"}, {"url": "https://towardsdatascience.com/splitting-data-sets-cac104a05386", "anchor_text": "Splitting Data Sets"}, {"url": "https://towardsdatascience.com/automatically-analyzing-laboratory-test-data-32c27e4e3075", "anchor_text": "Automatically Analyzing Laboratory Test Data"}, {"url": "https://medium.com/zero-equals-false/how-to-write-scripts-that-check-data-quality-for-you-d8762dab34ca", "anchor_text": "How to Write Scripts that Check Data Quality for You"}, {"url": "https://medium.com/zero-equals-false/how-to-perform-multivariate-multidimensional-regression-in-python-df986c35b377", "anchor_text": "How to Automatically Generate Regressions in Python"}, {"url": "https://medium.com/tag/python?source=post_page-----4bd63bcc554d---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----4bd63bcc554d---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/tag/data-science?source=post_page-----4bd63bcc554d---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/automation?source=post_page-----4bd63bcc554d---------------automation-----------------", "anchor_text": "Automation"}, {"url": "https://medium.com/tag/programming?source=post_page-----4bd63bcc554d---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4bd63bcc554d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchecking-analyzed-laboratory-data-for-errors-4bd63bcc554d&user=Peter+Grant&userId=985f2ff02845&source=-----4bd63bcc554d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4bd63bcc554d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchecking-analyzed-laboratory-data-for-errors-4bd63bcc554d&user=Peter+Grant&userId=985f2ff02845&source=-----4bd63bcc554d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4bd63bcc554d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchecking-analyzed-laboratory-data-for-errors-4bd63bcc554d&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----4bd63bcc554d--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F4bd63bcc554d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchecking-analyzed-laboratory-data-for-errors-4bd63bcc554d&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----4bd63bcc554d---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----4bd63bcc554d--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----4bd63bcc554d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----4bd63bcc554d--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----4bd63bcc554d--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----4bd63bcc554d--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----4bd63bcc554d--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----4bd63bcc554d--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----4bd63bcc554d--------------------------------", "anchor_text": ""}, {"url": "https://petergrant-81989.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://petergrant-81989.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Peter Grant"}, {"url": "https://petergrant-81989.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "969 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F985f2ff02845&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchecking-analyzed-laboratory-data-for-errors-4bd63bcc554d&user=Peter+Grant&userId=985f2ff02845&source=post_page-985f2ff02845--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F90e3ec001185&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fchecking-analyzed-laboratory-data-for-errors-4bd63bcc554d&newsletterV3=985f2ff02845&newsletterV3Id=90e3ec001185&user=Peter+Grant&userId=985f2ff02845&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}