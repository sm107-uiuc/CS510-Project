{"url": "https://towardsdatascience.com/separation-of-concerns-in-software-design-aaad847b3b44", "time": 1683002975.1338959, "path": "towardsdatascience.com/separation-of-concerns-in-software-design-aaad847b3b44/", "webpage": {"metadata": {"title": "Separation of Concerns in Software Design | by Alexey Naumov | Towards Data Science", "h1": "Separation of Concerns in Software Design", "description": "Applying the fundamental Computer Science principles for improving the quality of the software at all levels"}, "outgoing_paragraph_urls": [{"url": "https://en.wikipedia.org/wiki/Separation_of_concerns", "anchor_text": "separation of concerns", "paragraph_index": 0}, {"url": "https://martinfowler.com/bliki/FunctionLength.html", "anchor_text": "bloat up in size", "paragraph_index": 4}, {"url": "https://refactoring.guru/extract-method", "anchor_text": "refactor", "paragraph_index": 5}, {"url": "https://en.wikipedia.org/wiki/Coupling_(computer_programming)", "anchor_text": "coupling", "paragraph_index": 8}, {"url": "https://en.wikipedia.org/wiki/Cohesion_(computer_science)", "anchor_text": "cohesion", "paragraph_index": 8}, {"url": "https://www.techopedia.com/definition/9476/spaghetti-code", "anchor_text": "Spaghetti code", "paragraph_index": 21}, {"url": "https://dzone.com/articles/layered-architecture-is-good", "anchor_text": "layers", "paragraph_index": 31}, {"url": "https://blog.izs.me/2013/08/designing-apis-for-asynchrony/", "anchor_text": "releasing Zalgo", "paragraph_index": 56}, {"url": "https://twitter.com/nallexn", "anchor_text": "Twitter", "paragraph_index": 61}, {"url": "https://nalexn.github.io/feed.xml", "anchor_text": "RSS", "paragraph_index": 61}], "all_paragraphs": ["The separation of concerns (SoC) is one of the most fundamental principles in software development.", "SoC is so crucial that 2 out of 5 SOLID principles (Single Responsibility and Interface Segregation) are direct derivations from this concept.", "The principle is simple: don\u2019t write your program as one solid block, instead, break up the code into chunks that are finalized tiny pieces of the system each able to complete a simple distinct job.", "In this article, I elaborate on applying this profound principle at all levels of abstraction: from the programming code inside each function and the design of the modules to the overall app\u2019s architecture, all for achieving the characteristics of what we call a qualitative software.", "If we take the lowest level (the actual programming code), SoC instructs us to avoid writing long complex functions. When the function starts to bloat up in size, this is the red flag that the method is possibly taking care of too many things at once.", "In such a case SoC pushes us to refactor it, turning into a more laconic and descriptive revision. During this process, parts of the original algorithm get exported and encapsulated in separate smaller functions with a private access level. We gain the code clarity, and chunks of the algorithm eventually become reusable by other parts, even if we initially didn\u2019t expect this to happen.", "At a bit higher level, this principle tells us to group the functions under self-contained modules, each responsible for the fulfillment of a single set of tasks that have a clear logical correlation.", "The process very much resembles what we had to do for functions: estrange less-closely related functionality and group up the features serving the same distinct purpose.", "The application of the Separation of Concerns involves two processes: reduction of coupling and increasing cohesion.", "Cohesion is the measure of similarity by the set of duties, level of details, and locality. For example, functions drawCircle and drawTriangle are cohesive enough to belong to the same module responsible for drawing, and it feels natural to put these two functions close to each other in the code (high similarity ~ high cohesion).", "Coupling, on the other hand, is the measure of dependence of the part on the rest of the system (low dependence ~ loose coupling).", "The aforementioned drawCircle and drawTriangle can be used by another function drawCybertruck. We can be tempted to put this function in the drawing module as well, but drawCyberthuck may be dependant on the physics engine and the external state. So this will make the whole drawing module much less reusable and closely coupled with a few other components.", "You can tell that primitive drawing functions and drawCyberthuck belong to different levels of abstraction and logic complexity, thus they need to reside in different modules.", "And if at some point we decide to use the drawing module in another project \u2014 there will be no dependency on the physics engine, so we\u2019ll be able to extract it easier.", "A quick way to remember which attribute should be increased or decreased:", "A good example of the code with high cohesion (low dispersion) is the use of closure callbacks instead of the delegate methods.", "I should note here that the code examples are written in Swift in the context of iOS app development, but there are not too many and they show the concept well.", "Consider this code for sending a networking request:", "Imagine if URLSession had a delegate-based API for making the requests: all the responses would be delivered to a single function handle(response: URLResponse, for request: URLRequest)", "This would make the networking much more error-prone and tedious, as the logic for handling all the responses would now have to be tied to that one function.", "With the callback-based API, the action and the result of the action are handled in one place, making it much easier to track the execution flow.", "If we need to jump around between the functions or modules as we\u2019re following the logic of the algorithm, this means the code has low cohesion, which is often referred to as a Spaghetti code.", "Adherence to the principle of Separation of Concerns helps to improve numerous characteristics of the codebase:", "As you can see, coupling and cohesion are the characteristics that ultimately affect the convenience of working with the code from the programmer\u2019s perspective.", "For a bunch of modules with distinct responsibilities and clear purpose we still need to outline a global strategy to how the modules should refer to each other.", "If we don\u2019t introduce this strategy we may end up with a system with entangled relations and hard-to-track data flows.", "The primary goal of the system\u2019s design is to outline the boundaries for the module\u2019s awareness of each other.", "Every existing architectural pattern provides this strategy. Take we, for example, the Model-View-Controller, we would see that the View is not allowed to interact with the Model directly and should use the Controller as the intermediary.", "It seems to me that these strategies often come from the general idea that permissiveness is not good. This, in my opinion, leads to either over-engineered solutions or conversely to the systems with insufficient decoupling of the responsibilities.", "I tend to think that the system\u2019s design requires a much more formal approach with clear metrics and motivation.", "We already saw that SoC, when applied to the functions and modules, always led to more reusable, testable and maintainable code. So why not take the cohesion and coupling as those metrics and apply the SoC at the application\u2019s level?", "That\u2019s how we get to segregating the modules into layers. This is not a concrete architectural pattern, but rather a high-level specification for that strategy I was talking about.", "The modules get grouped in layers, the same way we\u2019d form a module from the set of distinct functions.", "The resulting set of modules within one layer has high cohesion based on the similar duties in the system and the same level of abstraction, while communication and environment awareness between the layers is very much restricted to achieve loose coupling.", "We\u2019re not only constraining the communication \u2014 the layers with higher environment specifics at the bottom (Repositories, such as a database wrapper or a networking service) are forbidden to directly refer to anything defined in the higher layers (business logic or UI).", "So if we take just the networking service that talks to the backend, it should know nothing about the rest of the system and only provide the API for sending the requests.", "The business logic layer will be aware of and using that Repository, but it should have no idea if any UI is attached to the system.", "The UI layer is aware of the business logic modules and uses their APIs to read the up-to-date data and trigger actions, but at the same time, it knows nothing about the Repository, as the business logic hides the factual underlying infrastructure from it.", "This way we can guarantee intrinsic testability of the whole system, where each layer either doesn\u2019t even know the other exists or is decoupled to such a high degree that can easily be surrounded by mocks in tests.", "Although decoupling of the business logic and the UI is a standard move, I found it surprising that the majority of the popular patterns we have for iOS do not stress the importance of decoupling the business logic from the data gateways, such as a networking layer.", "So many times did I see the requests being sent right from the view controllers or other business logic modules. Same thing with the database queries, UserDefaults, and any other local or remote data storages.", "As you may guess, I don\u2019t like the tight coupling here. But it\u2019s not just coupling between the modules, which is more or less tolerable.", "We\u2019re talking about a tight coupling between the inputs for the algorithm and the algorithm itself. Such code is nearly impossible to test or evolve.", "There are multiple reasons why you don\u2019t want to embed direct read-write operations in your business logic, thus being unable to easily swap the real calls with mocked ones:", "The latter case is notorious. Of course, in an ideal world, this should never happen, but it does, and more often than you may think. Even CI won\u2019t save you.", "The app would stop working, and the first person to be blamed will be YOU, the mobile engineer. YOUR app broke. And YOU\u2019ll have to offer excuses and look pathetic during the first minutes after the failure was uncovered.", "Imagine the CEO of your company is presenting the app on an important event for investors, and THIS happens.", "The ideal way out would be: the app does not crash, but instead, gracefully shows a user-friendly error message. We\u2019re handing our boss another device with a build that runs in offline mode using mocked demo data, and the presentation continues, with the accident passed almost unnoticed.", "Offline demo mode? It sounds like a lot of work! But it\u2019s not if you\u2019ve decoupled and abstracted away from the data gateways.", "When we have a business logic module that queries the data from elsewhere, we need to extract the concern of accessing that external data resources to a separate module and hide the unnecessary query details behind a facade.", "This is how a Repository is formed.", "Let\u2019s see an example. We have a ViewController that loads and displays a list of some items:", "The first thing to do is to introduce the ListRepository protocol and refactor the ViewController to use it:", "And now we have the freedom to substitute the implementation that actually works with the backend:", "or a dummy repository that serves the demo data even in offline mode:", "With this setup, the app can be configured to work with either real networking API or with a mocked data, which we also can save in bundled resources instead of hardcoding.", "For the above example I should also note that when we\u2019re implementing a stub for an asynchronous API call, we should always maintain it\u2019s asynchronicity (trigger the callback from inside DispatchQueue.main.async). Otherwise, we'll be releasing Zalgo.", "You can see the Repository taking an intrinsic part in the Clean Architecture variant I proposed for the SwiftUI apps:", "Separation of Concerns is that giant on whose shoulders stands many buzzword patterns we know today. Just that principle alone provides the required guidance for dramatic improvement of the software quality at all levels.", "Don\u2019t overlook it when writing the code or designing the architecture. Loose coupling and high cohesion are your friends!", "Separate the algorithms from the inputs and outputs for better testability, and your software will be rock-solid even without SOLID :)", "Follow me on Twitter to stay tuned about the coming posts! By the way, all my articles are available without the paywall in my tech blog (RSS):", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Faaad847b3b44&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseparation-of-concerns-in-software-design-aaad847b3b44&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseparation-of-concerns-in-software-design-aaad847b3b44&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseparation-of-concerns-in-software-design-aaad847b3b44&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseparation-of-concerns-in-software-design-aaad847b3b44&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----aaad847b3b44--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----aaad847b3b44--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@nalexn?source=post_page-----aaad847b3b44--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@nalexn?source=post_page-----aaad847b3b44--------------------------------", "anchor_text": "Alexey Naumov"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F1c1a0c9cea4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseparation-of-concerns-in-software-design-aaad847b3b44&user=Alexey+Naumov&userId=1c1a0c9cea4&source=post_page-1c1a0c9cea4----aaad847b3b44---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Faaad847b3b44&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseparation-of-concerns-in-software-design-aaad847b3b44&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Faaad847b3b44&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseparation-of-concerns-in-software-design-aaad847b3b44&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@onevibe", "anchor_text": "Aaron Greenwood"}, {"url": "https://unsplash.com/photos/x9zy_1oHjqw", "anchor_text": "Unsplash"}, {"url": "https://en.wikipedia.org/wiki/Separation_of_concerns", "anchor_text": "separation of concerns"}, {"url": "https://martinfowler.com/bliki/FunctionLength.html", "anchor_text": "bloat up in size"}, {"url": "https://refactoring.guru/extract-method", "anchor_text": "refactor"}, {"url": "https://en.wikipedia.org/wiki/Coupling_(computer_programming)", "anchor_text": "coupling"}, {"url": "https://en.wikipedia.org/wiki/Cohesion_(computer_science)", "anchor_text": "cohesion"}, {"url": "https://www.techopedia.com/definition/9476/spaghetti-code", "anchor_text": "Spaghetti code"}, {"url": "https://en.wikipedia.org/wiki/Don%27t_repeat_yourself", "anchor_text": "DRY principle"}, {"url": "https://en.wikipedia.org/wiki/Behavior-driven_development", "anchor_text": "BDD"}, {"url": "https://en.wikipedia.org/wiki/The_Mythical_Man-Month", "anchor_text": "it is usually slower"}, {"url": "https://dzone.com/articles/layered-architecture-is-good", "anchor_text": "layers"}, {"url": "https://blog.izs.me/2013/08/designing-apis-for-asynchrony/", "anchor_text": "releasing Zalgo"}, {"url": "https://medium.com/swlh/clean-architecture-for-swiftui-6d6c4eb1cf6a", "anchor_text": "Clean Architecture for SwiftUIAre VIPER, MVVM, Clean Swift (VIP), RIBs or ELM suitable for a SwiftUI project?medium.com"}, {"url": "https://twitter.com/nallexn", "anchor_text": "Twitter"}, {"url": "https://nalexn.github.io/feed.xml", "anchor_text": "RSS"}, {"url": "https://nalexn.github.io/?utm_source=xm", "anchor_text": "Alexey NaumoviOS development best practices, software architecture design, functional reactive programming, Swift, SwiftUI, Combine\u2026nalexn.github.io"}, {"url": "https://medium.com/tag/programming?source=post_page-----aaad847b3b44---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/software-development?source=post_page-----aaad847b3b44---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/separation-of-concerns?source=post_page-----aaad847b3b44---------------separation_of_concerns-----------------", "anchor_text": "Separation Of Concerns"}, {"url": "https://medium.com/tag/ios-app-development?source=post_page-----aaad847b3b44---------------ios_app_development-----------------", "anchor_text": "IOS App Development"}, {"url": "https://medium.com/tag/mobile-app-development?source=post_page-----aaad847b3b44---------------mobile_app_development-----------------", "anchor_text": "Mobile App Development"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Faaad847b3b44&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseparation-of-concerns-in-software-design-aaad847b3b44&user=Alexey+Naumov&userId=1c1a0c9cea4&source=-----aaad847b3b44---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Faaad847b3b44&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseparation-of-concerns-in-software-design-aaad847b3b44&user=Alexey+Naumov&userId=1c1a0c9cea4&source=-----aaad847b3b44---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Faaad847b3b44&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseparation-of-concerns-in-software-design-aaad847b3b44&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----aaad847b3b44--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Faaad847b3b44&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseparation-of-concerns-in-software-design-aaad847b3b44&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----aaad847b3b44---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----aaad847b3b44--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----aaad847b3b44--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----aaad847b3b44--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----aaad847b3b44--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----aaad847b3b44--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----aaad847b3b44--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----aaad847b3b44--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----aaad847b3b44--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@nalexn?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@nalexn?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Alexey Naumov"}, {"url": "https://medium.com/@nalexn/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "409 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F1c1a0c9cea4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseparation-of-concerns-in-software-design-aaad847b3b44&user=Alexey+Naumov&userId=1c1a0c9cea4&source=post_page-1c1a0c9cea4--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F90419ae1fa36&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseparation-of-concerns-in-software-design-aaad847b3b44&newsletterV3=1c1a0c9cea4&newsletterV3Id=90419ae1fa36&user=Alexey+Naumov&userId=1c1a0c9cea4&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}