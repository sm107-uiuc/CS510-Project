{"url": "https://towardsdatascience.com/pytorch-tidbits-measuring-streams-and-times-de0c7bae85da", "time": 1683010026.7772312, "path": "towardsdatascience.com/pytorch-tidbits-measuring-streams-and-times-de0c7bae85da/", "webpage": {"metadata": {"title": "PyTorch Tidbits: Measuring Streams and Times | by Stefan Schroedl | Towards Data Science", "h1": "PyTorch Tidbits: Measuring Streams and Times", "description": "A typical PyTorch training loop contains code to keep track of training and testing metrics; they help us monitor progress and draw learning curves. Let\u2019s say for a classification task, we are using\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/pytorch/examples/blob/master/imagenet/main.py#L359", "anchor_text": "ImageNet demo code", "paragraph_index": 3}, {"url": "https://en.wikipedia.org/wiki/Aggregate_function", "anchor_text": "decomposable aggregation function", "paragraph_index": 6}, {"url": "https://en.wikipedia.org/wiki/Streaming_algorithm", "anchor_text": "approximation algorithms", "paragraph_index": 8}, {"url": "https://github.com/stefan-schroedl/pymeter", "anchor_text": "here", "paragraph_index": 19}], "all_paragraphs": ["A typical PyTorch training loop contains code to keep track of training and testing metrics; they help us monitor progress and draw learning curves.", "Let\u2019s say for a classification task, we are using binary cross entropy as training loss, and we are also interested in accuracy. After each epoch, we measure the same on a held out validation data set. We want to write periodic progress information to the console as well as to Tensorboard (or any other of your favorite dashboard tools).", "Note the pattern of recording a number of successive values, then computing statistics over it. While this snippet is simple enough, there is some amount of repetition, and logging starts to obscure the main algorithmic core. the more metrics and statistics (say, standard deviations in addition to the means) we want to track.", "This was already recognized in the ImageNet demo code, which contains an auxiliary class for this purpose:", "Pretty straightforward to use: We create an AverageMeter instance m, repeatedly call m.update(loss), and at the end of an epoch retrieve the average as m.avg.", "Admittedly, this is a rather modest class; nevertheless, tracking statistics like this is ubiquitous when writing machine learning applications in Python. Therefore, it might be worthwhile to have a closer look at this concept, as it lends itself to multiple extensions.", "Surely you have noticed in the first listing that storing each single loss value is a bit naive; instead, we only need to incrementally update the sum and number of elements. Most data-crunching languages such as SQL or PigLatin typically call this a decomposable aggregation function; it only records a constant number of sufficient statistics, and updates in a commutative and associative fashion. Common aggregation functions are minimum, maximum, and standard deviation (for that we require the sum of squared values). It is easy to come up with other useful metrics: The most recent value, the percentage of zero or very small values, absolute minima and maxima. Our update function becomes:", "The average and standard deviation can be extracted with the following simple properties:", "If we don\u2019t limit ourselves to constant space and time requirement, we can of course implement more complex aggregation functions, either as the exact or one of the many known approximation algorithms for k-most frequent, k-smallest, and unique elements.", "As a shortcut, the incremental add operator += can serve as an alias for update. Addition means updating a copy. The standard __len__ function defaults to count. It is convenient to retrieve values as a dictionary, and to have a suitable string representation.", "Two Meters can aggregate metrics in two concurrent threads, and we want to summarize them together. The extension of the update function is straightforward:", "So far, we have assumed our values are native Python numbers. But sometimes we want to look at statistics over PyTorch Tensors (such as model activations, weights, and their gradients). We define the semantics of updating a Meter with an array to be the same as updating it with each individual element.", "Recall that PyTorch Tensors are convertible into NumPy ndarrays by sharing the underlying memory; so when we want both, one can be reduced to the other:", "We want to provide the user with one update function, and not to have to remember to choose update_scalar, update_tensor, or update_meter. Unfortunately, unlike strongly-typed languages such as C++, Python doesn\u2019t allow parameter overloading, but we can move the common functionality to an abstract base class and create a dispatch:", "When tracking more than one metrics, the code can be simplified by using a dictionary whose keys and values are the names and aggregators of metrics, respectively. The operations for aggregating two MeterDicts, or a MeterDict and a Meter, are straightforward.", "When we were growing up as software engineers, the horrors of global variables have been drilled into our heads. But sometimes that makes us forget that global variables can indeed be useful in a few cases; they can save us from passing around the same or non-essential arguments in functions, or from repeatedly spelling out long class reference chains. Existing examples in Python are logging and the random number generator. In our implementation of the training loop, we started using member variables of our Engine class for tracking statistics, but it turned out to be too cumbersome \u2014 e.g., worker threads in the PyTorch DataLoader don\u2019t have direct access to the Engine, so how can we share metrics easily? We argue that it can be useful to share a singleton, global MeterDict for metrics tracking across the application.", "For human-readable output, numbers should always be appropriately formatted, e.g., by rounding to significant digits. Moreover, log files can contain a lot of output; we can search for things we are interested in using tools like grep, but for this too work it helps using a uniform format and keeping related information in the same line. We define a formatter class that registers one or several Meters, and whose string representation is the desired logging output.", "Putting everything together, our initial, naive training loop can now be written as follows:", "For diagnostic and monitoring purposes, it is useful to log execution times to Tensorboard, by default. Typically, such measurements are averaged over a number of invocations, which suggests aggregating using a Meter. It can be instructive to look at both the wall clock time and the CPU time, so our timing functions will provide both (distinguished by a suffix). Sometimes we want to time code sections, which call for a context manager (class Timing); for complete function calls, we would prefer a decorator, @timed. All these functions allow an optional MeterDict argument, but they default to the global MeterDict.", "The complete code for this article is available here; I hope you find it useful in your next python ML project!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Head of Machine Learning @ Atomwise \u2014 Deep Learning for Better Medicines, Faster. Formerly Amazon, Yahoo, DaimlerChrysler."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fde0c7bae85da&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-tidbits-measuring-streams-and-times-de0c7bae85da&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-tidbits-measuring-streams-and-times-de0c7bae85da&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-tidbits-measuring-streams-and-times-de0c7bae85da&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-tidbits-measuring-streams-and-times-de0c7bae85da&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----de0c7bae85da--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----de0c7bae85da--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://stefan-schroedl.medium.com/?source=post_page-----de0c7bae85da--------------------------------", "anchor_text": ""}, {"url": "https://stefan-schroedl.medium.com/?source=post_page-----de0c7bae85da--------------------------------", "anchor_text": "Stefan Schroedl"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4c3954a88def&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-tidbits-measuring-streams-and-times-de0c7bae85da&user=Stefan+Schroedl&userId=4c3954a88def&source=post_page-4c3954a88def----de0c7bae85da---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fde0c7bae85da&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-tidbits-measuring-streams-and-times-de0c7bae85da&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fde0c7bae85da&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-tidbits-measuring-streams-and-times-de0c7bae85da&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/pytorch/examples/blob/master/imagenet/main.py#L359", "anchor_text": "ImageNet demo code"}, {"url": "https://en.wikipedia.org/wiki/Aggregate_function", "anchor_text": "decomposable aggregation function"}, {"url": "https://en.wikipedia.org/wiki/Streaming_algorithm", "anchor_text": "approximation algorithms"}, {"url": "https://github.com/stefan-schroedl/pymeter", "anchor_text": "here"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----de0c7bae85da---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/python?source=post_page-----de0c7bae85da---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/statistics?source=post_page-----de0c7bae85da---------------statistics-----------------", "anchor_text": "Statistics"}, {"url": "https://medium.com/tag/programming?source=post_page-----de0c7bae85da---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/pytorch?source=post_page-----de0c7bae85da---------------pytorch-----------------", "anchor_text": "Pytorch"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fde0c7bae85da&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-tidbits-measuring-streams-and-times-de0c7bae85da&user=Stefan+Schroedl&userId=4c3954a88def&source=-----de0c7bae85da---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fde0c7bae85da&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-tidbits-measuring-streams-and-times-de0c7bae85da&user=Stefan+Schroedl&userId=4c3954a88def&source=-----de0c7bae85da---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fde0c7bae85da&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-tidbits-measuring-streams-and-times-de0c7bae85da&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----de0c7bae85da--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fde0c7bae85da&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-tidbits-measuring-streams-and-times-de0c7bae85da&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----de0c7bae85da---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----de0c7bae85da--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----de0c7bae85da--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----de0c7bae85da--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----de0c7bae85da--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----de0c7bae85da--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----de0c7bae85da--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----de0c7bae85da--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----de0c7bae85da--------------------------------", "anchor_text": ""}, {"url": "https://stefan-schroedl.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://stefan-schroedl.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Stefan Schroedl"}, {"url": "https://stefan-schroedl.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "245 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4c3954a88def&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-tidbits-measuring-streams-and-times-de0c7bae85da&user=Stefan+Schroedl&userId=4c3954a88def&source=post_page-4c3954a88def--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2F4c3954a88def%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-tidbits-measuring-streams-and-times-de0c7bae85da&user=Stefan+Schroedl&userId=4c3954a88def&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}