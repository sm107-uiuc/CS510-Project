{"url": "https://towardsdatascience.com/reinforcement-learning-from-scratch-designing-and-solving-a-task-all-within-a-python-notebook-48c40021da4", "time": 1682994294.759006, "path": "towardsdatascience.com/reinforcement-learning-from-scratch-designing-and-solving-a-task-all-within-a-python-notebook-48c40021da4/", "webpage": {"metadata": {"title": "Reinforcement Learning from Scratch: Designing and Solving a Task All Within a Python Notebook | by Philip Osborne, PhD Researcher | Towards Data Science", "h1": "Reinforcement Learning from Scratch: Designing and Solving a Task All Within a Python Notebook", "description": "In this article, I will introduce a new project that attempts to help those learning Reinforcement Learning by fully defining and solving a simple task all within a Python notebook. The environment\u2026"}, "outgoing_paragraph_urls": [{"url": "https://artint.info/html/ArtInt_227.html", "anchor_text": "https://artint.info/html/ArtInt_227.html", "paragraph_index": 34}, {"url": "https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.quiver.html", "anchor_text": "https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.quiver.html", "paragraph_index": 43}], "all_paragraphs": ["In this article, I will introduce a new project that attempts to help those learning Reinforcement Learning by fully defining and solving a simple task all within a Python notebook. The environment and basic methods will be explained within this article and all the code is published on Kaggle in the link below. In addition, I have created a \u201cMeta\u201d notebook that can be forked easily and only contains the defined environment for others to try, adapt and apply their own code to.", "When I first started learning about Reinforcement Learning I went straight into replicating online guides and projects but found I was getting lost and confused. \u201cWhy do the results show this? What does this parameter do? What does the environment act in this way?\u201d were all some of the questions I began asking myself. It wasn\u2019t until I took a step back and started from the basics of first fully understanding how the probabilistic environment is defined and building up a small example that I could solve on paper that things began to make more sense. However, I found it hard to find environments that I could apply my knowledge on that didn\u2019t need to be imported from external sources.", "Therefore, I set myself a challenge:", "Can I fully define and find the optimal actions for a task environment all self-contained within a Python notebook?", "By following my work I hope that that others may use this as a basic starting point for learning themselves.", "Very simply, I want to know the best action in order to get a piece of paper into a bin (trash can) from any position in a room. I can throw the paper in any direction or move one step at a time.", "Although simple to a human who can judge location of the bin by eyesight and have huge amounts of prior knowledge regarding the distance a robot has to learn from nothing.", "This defines the environment where the probability of a successful throw are calculated based on the direction in which the paper is thrown and the current distance from the bin.", "For example, in the image below we have three people labelled A, B and C. A and B both throw in the correct direction but person A is closer than B and so will have a higher probability of landing the shot.", "Person C is closer than person B but throws in the completely wrong direction and so will have a very low probability of hitting the bin. This may seem illogical that person C would throw in this direction but, as we will show more later, an algorithm has to try a range of directions first to figure out where the successes are and will have no visual guide as to where the bin is.", "To create the environment in python, we convert the diagram into 2-d dimensions of x and y values and use bearing mathematics to calculate the angles thrown. We used normalised integer x and y values so that they must be bounded by -10 and 10.", "The probability of a successful throw is relative to the distance and direction in which it is thrown. Therefore, we need to calculate two measures:", "Distance MeasureAs shown in the plot above, the position of person A in set to be (-5,-5). This is their current state and their distance from the bin can be calculated using the Euclidean distance measure:", "For the final calculations, we normalise this and reverse the value so that a high score indicates that the person is closer to the target bin:", "Because we have fixed our 2-d dimensions between (-10, 10), the max possible distance the person could be is sqrt{(100) + (100)} = sqrt{200} from the bin. Therefore our distance score for person A is:", "Person A then has a decision to make, do they move or do they throw in a chosen direction. For now, let imagine they choose to throw the paper, their first throw is at 50 degrees and the second is 60 degrees from due north. The direction of the bin from person A can be calculated by simple trigonometry:", "Therefore, the first throw is 5 degrees off the true direction and the second is 15 degrees.", "When we consider that good throws are bounded by 45 degrees either side of the actual direction (i.e. not throwing the wrong way) then we can use the following to calculate how good this chosen direction is. Any direction beyond the 45 degree bounds will produce a negative value and be mapped to probability of 0:", "Both are fairly close but their first throw is more likely to hit the bin.", "We therefore calculate our probability of a successful throw to be relative to both these measures:", "Although the previous calculations were fairly simple, some considerations need to be taken into account when we generalise these and begin to consider that the bin or current position are not fixed.", "In our previous example, person A is south-west from the bin and therefore the angle was a simple calculation but if we applied the same to say a person placed north-east then this would be incorrect. Furthermore, because the bin can be placed anywhere we need to first find where the person is relative to this, not just the origin, and then used to to establish to angle calculation required.", "This is summarised in the diagram below where we have generalised each of the trigonometric calculations based on the person\u2019s relative position to the bin:", "With this diagram in mind, we create a function that calculates the probability of a throw\u2019s success from only given position relative to the bin.", "We then calculate the bearing from the person to the bin following the previous figure and calculate the score bounded within a +/- 45 degree window. Throws that are closest to the true bearing score higher whilst those further away score less, anything more than 45 degrees (or less than -45 degrees) are negative and then set to a zero probability.", "Lastly, the overall probability is related to both the distance and direction given the current position as shown before.", "Note: I have chosen 45 degrees as the boundary but you may choose to change this window or could manually scale the probability calculation to weight the distance of direction measure differently.", "We re-calculate the previous examples and find the same results as expected.", "Now that we have this as a function, we can easily calculate and plot the probabilities of all points in our 2-d grid for a fixed throwing direction.", "The probabilities are defined by the angle we set in the previous function, currently this is 45 degrees but this can reduced or increased if desired and the results will change accordingly. We may also want to scale the probability differently for distances.", "For example, the probability when the paper is thrown at a 180 degree bearing (due South) for each x/y position is shown below.", "Animated Plot for All Throwing Directions", "To demonstrate this further, we can iterate through a number of throwing directions and create an interactive animation. The code becomes a little complex and you can always simply use the previous code chunk and change the \u201cthrow_direction \u201d parameter manually to explore different positions. However this helps explore the probabilities and can be found in the Kaggle notebook.", "The aim is for us to find the optimal action in each state by either throwing or moving in a given direction. Because we have known probabilities, we can actually use model-based methods and will demonstrate this first and can use value-iteration to achieve this via the following formula:", "Value iteration starts with an arbitrary function V0 and uses the following equations to get the functions for k+1 stages to go from the functions for k stages to go (https://artint.info/html/ArtInt_227.html).", "The calculation of MOVE actions are fairly simple because I have defined the probability of a movements success to be guaranteed (equal to 1). Therefore, the Q value of, for example, action (1,1) from state (-5,-5) is equal to:", "for now, the rewards are also all 0 therefore the value for this first calculation is simply:", "All move actions within the first update will be calculated similarly. Value is added to the system from successful throws. Therefore, we can calculate the Q value for a specific throw action. Previously, we found the probability of throw direction 50 degrees from (-5,-5) to be equal to 0.444. Therefore, the Q value for this action updates accordingly:", "Again the rewards are set to 0 and the positive value of the bin is 1 while the negative value of the bin is -1. Therefore we have:", "It becomes clear that although moving following the first update doesn\u2019t change from the initialised values, throwing at 50 degrees is worse due to the distance and probability of missing.", "Once each Q(s,a) is calculated for all states and actions, the value of each state, V(s), is updated as the maximum Q value for this state. The process is repeated back and forth until the results converge.", "There is not set limit for how many times this needs to be repeated and is dependent on the problem. Because our environment is so simple, it actually converges to the optimal policy within just 10 updates.", "We first show the best action based on throwing or moving by a simple coloured scatter shown below.", "Although the chart shows whether the optimal action is either a throw or move it doesn\u2019t show us which direction these are in. Therefore, we will map each optimal action to a vector of u and v and use these to create a quiver plot (https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.quiver.html).", "We define the scale of the arrows and use this to define the horizontal component labelled u. For movement actions, we simply multiply the movement in the x direction by this factor and for the throw direction we either move 1 unit left or right (accounting for no horizontal movement for 0 or 180 degrees and no vertical movement at 90 or 270 degrees).", "The horizontal component is then used to calculate the vertical component with some basic trigonometry where we again account for certain angles that would cause errors in the calculations.", "We see that some states have multiple best actions. Those directly north, east, south of west can move in multiple directions whereas the states (1,1), (1,-1),(-1,-1) and (-1,1) can either move or throw towards the bin.", "Lastly, I decided to show the change of the optimal policy over each update by exporting each plot and passing into a small animation.", "We will now imagine that the probabilities are unknown to the person and therefore experience is needed to find the optimal actions.", "First, let\u2019s try to find the optimal action if the person starts in a fixed position and the bin is fixed to (0,0) as before.", "We will be applying Q-learning and initialise all state-action pairs with a value of 0 and use the update rule:", "We give the algorithm the choice to throw in any 360 degree direction (to a whole degree) or to move to any surrounding position of the current one. There are therefore 8 places it can move: north, north-east, east, etc.", "When it chooses to throw the paper, it will either receive a positive reward of +1 or a negative of -1 depending on whether it hits the bin or not and the episode ends.", "It will need to establish by a number of trial and error attempts where the bin is located and then whether it is better to move first or throw from the current position.", "First, as before, we initialise the Q-table with arbitrary values of 0.", "For now, the start of the episode\u2019s position will be fixed to one state and we also introduce a cap on the number of actions in each episode so that it doesn\u2019t accidentally keep going endlessly.", "Each episode ends naturally if the paper is thrown, the action the algorithm performs is decided by the epsilon-greedy action selection procedure whereby the action is selected randomly with probability epsilon and greedily (current max) otherwise. To balance the random selection slightly between move or throwing actions (as there are only 8 move actions but 360 throwing actions) I decided to give the algorithm a 50/50 chance of moving or throwing then will subsequently pick an action randomly from these.", "As before, the random movement action cannot go beyond the boundary of the room and once found we update the current Q(s,a) dependent upon the max Q(s\u2019,a) for all possible subsequent actions. For example, if we move from -9,-9 to -8,-8, Q( (-9,-9), (1,1) ) will update according the the maximum of Q( (-8,-8), a ) for all possible actions including the throwing ones.", "If the algorithms throws the paper, the probability of success is calculated for this throw and we simulate whether in this case it was successful and receives a positive terminal reward or was unsuccessful and receives a negative terminal reward.", "The algorithm continues to update the Q values for each state-action pair until the results converge.", "We will analyse the effect of varying parameters in the next post but for now simply introduce some arbitrary parameter choices of: \u2014 num_episodes = 100 \u2014 alpha = 0.5 \u2014 gamma = 0.5 \u2014 epsilon = 0.2 \u2014 max_actions = 1000 \u2014 pos_terminal_reward = 1 \u2014 neg_terminal_reward = -1", "Running the algorithm with these parameters 10 times we produce the following \u2018optimal\u2019 action for state -5,-5:", "Clearly these are not aligned which heavily suggests the actions are not in fact optimal. Therefore, we need to consider how the parameters we have chosen effect the output and what can be done to improve the results.", "We have introduced an environment from scratch in Python and found the optimal policy. Furthermore, I have begun to introduce the method for finding the optimal policy with Q-learning.", "I will continue this in a follow up post and improve these initial results by varying the parameters. For now, I hope this demonstrates enough for you to begin trying their own algorithms on this example.", "If you have any questions, please feel free to comment below or on the Kaggle pages.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "PhD Research Student in Artificial Intelligence at the University of Manchester (UK)."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F48c40021da4&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freinforcement-learning-from-scratch-designing-and-solving-a-task-all-within-a-python-notebook-48c40021da4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freinforcement-learning-from-scratch-designing-and-solving-a-task-all-within-a-python-notebook-48c40021da4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freinforcement-learning-from-scratch-designing-and-solving-a-task-all-within-a-python-notebook-48c40021da4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freinforcement-learning-from-scratch-designing-and-solving-a-task-all-within-a-python-notebook-48c40021da4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----48c40021da4--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----48c40021da4--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@PhilipOsborne?source=post_page-----48c40021da4--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@PhilipOsborne?source=post_page-----48c40021da4--------------------------------", "anchor_text": "Philip Osborne, PhD Researcher"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3e06d9b2f907&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freinforcement-learning-from-scratch-designing-and-solving-a-task-all-within-a-python-notebook-48c40021da4&user=Philip+Osborne%2C+PhD+Researcher&userId=3e06d9b2f907&source=post_page-3e06d9b2f907----48c40021da4---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F48c40021da4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freinforcement-learning-from-scratch-designing-and-solving-a-task-all-within-a-python-notebook-48c40021da4&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F48c40021da4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freinforcement-learning-from-scratch-designing-and-solving-a-task-all-within-a-python-notebook-48c40021da4&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.kaggle.com/osbornep/-reinforcement-learning-from-scratch-in-python", "anchor_text": "Reinforcement Learning from Scratch in PythonBeginner's Guide to Finding the Optimal Actions of a Defined Environmentwww.kaggle.com"}, {"url": "https://www.kaggle.com/osbornep/rl-from-scratch-part-1-defining-the-environment", "anchor_text": "RL from Scratch Part 1: Defining the Environment | KaggleEdit descriptionwww.kaggle.com"}, {"url": "https://artint.info/html/ArtInt_227.html", "anchor_text": "https://artint.info/html/ArtInt_227.html"}, {"url": "https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.quiver.html", "anchor_text": "https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.quiver.html"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----48c40021da4---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/data-science?source=post_page-----48c40021da4---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/reinforcement-learning?source=post_page-----48c40021da4---------------reinforcement_learning-----------------", "anchor_text": "Reinforcement Learning"}, {"url": "https://medium.com/tag/learning?source=post_page-----48c40021da4---------------learning-----------------", "anchor_text": "Learning"}, {"url": "https://medium.com/tag/guides-and-tutorials?source=post_page-----48c40021da4---------------guides_and_tutorials-----------------", "anchor_text": "Guides And Tutorials"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F48c40021da4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freinforcement-learning-from-scratch-designing-and-solving-a-task-all-within-a-python-notebook-48c40021da4&user=Philip+Osborne%2C+PhD+Researcher&userId=3e06d9b2f907&source=-----48c40021da4---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F48c40021da4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freinforcement-learning-from-scratch-designing-and-solving-a-task-all-within-a-python-notebook-48c40021da4&user=Philip+Osborne%2C+PhD+Researcher&userId=3e06d9b2f907&source=-----48c40021da4---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F48c40021da4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freinforcement-learning-from-scratch-designing-and-solving-a-task-all-within-a-python-notebook-48c40021da4&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----48c40021da4--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F48c40021da4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freinforcement-learning-from-scratch-designing-and-solving-a-task-all-within-a-python-notebook-48c40021da4&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----48c40021da4---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----48c40021da4--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----48c40021da4--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----48c40021da4--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----48c40021da4--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----48c40021da4--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----48c40021da4--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----48c40021da4--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----48c40021da4--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@PhilipOsborne?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@PhilipOsborne?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Philip Osborne, PhD Researcher"}, {"url": "https://medium.com/@PhilipOsborne/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "1.4K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3e06d9b2f907&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freinforcement-learning-from-scratch-designing-and-solving-a-task-all-within-a-python-notebook-48c40021da4&user=Philip+Osborne%2C+PhD+Researcher&userId=3e06d9b2f907&source=post_page-3e06d9b2f907--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fd303f870a526&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freinforcement-learning-from-scratch-designing-and-solving-a-task-all-within-a-python-notebook-48c40021da4&newsletterV3=3e06d9b2f907&newsletterV3Id=d303f870a526&user=Philip+Osborne%2C+PhD+Researcher&userId=3e06d9b2f907&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}