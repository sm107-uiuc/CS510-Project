{"url": "https://towardsdatascience.com/practice-with-python-comprehensions-af6f484a6e1e", "time": 1683016593.9057522, "path": "towardsdatascience.com/practice-with-python-comprehensions-af6f484a6e1e/", "webpage": {"metadata": {"title": "Practice With Python Comprehensions | by Arun Jagota | Towards Data Science", "h1": "Practice With Python Comprehensions", "description": "For data preparation and feature extraction. Abstracted into two patterns, aggregator and transformer, that operate on collections. The former builds a scalar, the latter a new collection."}, "outgoing_paragraph_urls": [], "all_paragraphs": ["In this post, we practice with Python comprehensions on a variety of examples in data preparation and feature extraction. We hope to give the reader a sense of the varied tasks one can do with this one Python mechanism. This post will also be of interest to data science neophytes.", "First, let\u2019s start by enumerating two core data patterns that occur repeatedly in data science modeling. In data preparation and in feature extraction. Even in machine learning algorithms, especially ones that operate on vectors and matrices.", "The patterns are aggregator and transformer. Both operate on python collections.", "An aggregator computes a scalar from a collection that summarizes some aspects of it. Examples include sum values in a list, find the maximum value in a list, find the length of a list, etc.", "A transformer maps a collection to another collection. An example is converting a vector of counts to a vector of probabilities. The transformer pattern is useful in feature extraction.", "While these patterns seem conceptually straightforward, practicing coding them in Python will help the reader recognize when to apply them and then implement them easily.", "Python comprehensions will be especially useful in implementing transformers.", "Let\u2019s get into it. First, let\u2019s set the stage. We will focus on three types of data.", "A feature vector is just a collection capturing the values of some fixed set of attributes we wish to model. Say we want to describe a house with three features: number of bedrooms, number of bathrooms, square footage. We could model this as a python list whose elements are the values of the three features. So [4, 2, 2000] would represent a house with four bedrooms, two bathrooms, and whose square footage is 2000.", "A bag of words representation of a text document captures the number of times each word appears in it. In python, it\u2019s convenient to represent a bag of words with a dictionary. Here is an example.", "We will represent a binary image by a two-dimensional python list. Here is an example.", "Say we want to know the total number of words in the document from its bag. In python we just do", "Say we want to compute the number of black pixels in our image. In python, we would do", "We use NumPy because it supports aggregators on arrays of arbitrary shape. Our image is two-dimensional.", "Say we want to transform our bag of words representation of a document to a probability distribution over words. The latter is length-normalized, which property is appealing in some use cases. In python, we would do", "The second line uses a dictionary comprehension.", "Consider our image and imagine it was gray-scale instead. This just means that image[i][j] is a value between 0 and 1, not just at its extremes. For downstream processing, we might want to transform this image into a binary one. In python, we could do", "In the last line, what we are doing might be called two-dimensional list comprehension.", "Say we have an array of input vectors. We\u2019d like to transform it into an array of feature vectors.", "Take our house example. It\u2019s reasonable to speculate that the various dimensions are correlated. That is, bigger houses will have more bedrooms, more bathrooms, and higher square footage. We might be curious about deriving a single feature from the three. It might, perhaps, discriminate between big and small houses sufficiently well.", "Starting naive, let\u2019s define our feature as the product of the three values in the input vector. So we are transforming from a three-dimensional to a one-dimensional space. (Sometimes, less can be more.) In python, we could transform an array of input vectors into an array of feature vectors as follows.", "Generally, feature extraction is more involved than we see in our simple example. We can abstract out all the complexity into a function to_feature_vector(x)that takes the input vector x as a parameter. Then we simply use this function in our comprehension", "Next, let\u2019s see an example involving missing data", "The similarity of feature vectors (with missing data)", "Say we have two numeric vectors X and Y of the same dimensionality and with some values missing. In python, X and Y might be lists of the same length with some values being None. We\u2019d like to compute a similarity metric on the two vectors, taking into account their missing values.", "Below we will compute the so-called dot product after ignoring dimensions in which X or Y has the value None.", "Let\u2019s see a numeric example. Let\u2019s look at three feature vectors from our houses example:", "dp(X,Y) and dp(X,Z) are 3600016 and 1000002 respectively. This indicates that X and Y are more similar than X and Z. This makes intuitive sense.", "That said, dp can give very misleading results if the input vectors are not suitably normalized. This is because the components of the vectors are at different scales. In our example, the number of bedrooms and the number of bathrooms will generally range from 0 to 6 whereas the square footage may range between 100s and 1000s.", "Consider our house example. As discussed in the last paragraph, square footage is at a very different scale than the first two (number of bedrooms, number of bathrooms). Let\u2019s see an example of the issue this difference in scale causes.", "Ok, let\u2019s normalize! This normalization will operate on feature columns, one per feature. We will divide the value in a feature column by the L2 norm of that column. What is L2 norm? What you see on the rhs of the line containing denombelow.", "normalize(fc)inputs a feature column and normalizes it.", "Next, let\u2019s prepare the three feature columns so that we can use normalize(fc).", "So fcs[i] is the list of values of feature i.", "The normalized square footages in the three houses are about the same. The normalized number of bedrooms and bathrooms in the second house are way lower than those in the first and the third houses. As it should be.", "The next step is to use dp on the normalized feature vectors. For this, we first need to transform the normalized feature columns into normalized feature vectors.", "X, Y, and Z are now the normalized versions of the feature vectors of the three houses.", "In this post, we covered some of the core issues that arise repeatedly in data representation, preparation, and feature extraction with simple examples. We covered examples involving numeric feature vectors, and how to normalize them, accounting for missing data. We also covered bags of words examples and operating on binary images.", "The common denominator in all these examples was that we used Python comprehensions. The take-away message from this is that learning and practicing just this one mechanism in Python is very helpful in data science settings.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "PhD, Computer Science, neural nets. 14+ years in industry: data science algos developer. 24+ patents issued. 50 academic pubs. Blogs on ML/data science topics."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Faf6f484a6e1e&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractice-with-python-comprehensions-af6f484a6e1e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractice-with-python-comprehensions-af6f484a6e1e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractice-with-python-comprehensions-af6f484a6e1e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractice-with-python-comprehensions-af6f484a6e1e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----af6f484a6e1e--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----af6f484a6e1e--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://jagota-arun.medium.com/?source=post_page-----af6f484a6e1e--------------------------------", "anchor_text": ""}, {"url": "https://jagota-arun.medium.com/?source=post_page-----af6f484a6e1e--------------------------------", "anchor_text": "Arun Jagota"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fef9ed921edad&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractice-with-python-comprehensions-af6f484a6e1e&user=Arun+Jagota&userId=ef9ed921edad&source=post_page-ef9ed921edad----af6f484a6e1e---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Faf6f484a6e1e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractice-with-python-comprehensions-af6f484a6e1e&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Faf6f484a6e1e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractice-with-python-comprehensions-af6f484a6e1e&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@hiteshchoudhary?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Hitesh Choudhary"}, {"url": "https://unsplash.com/s/photos/python?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://medium.com/tag/data-preparation?source=post_page-----af6f484a6e1e---------------data_preparation-----------------", "anchor_text": "Data Preparation"}, {"url": "https://medium.com/tag/feature-extraction?source=post_page-----af6f484a6e1e---------------feature_extraction-----------------", "anchor_text": "Feature Extraction"}, {"url": "https://medium.com/tag/transformers?source=post_page-----af6f484a6e1e---------------transformers-----------------", "anchor_text": "Transformers"}, {"url": "https://medium.com/tag/aggregator?source=post_page-----af6f484a6e1e---------------aggregator-----------------", "anchor_text": "Aggregator"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Faf6f484a6e1e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractice-with-python-comprehensions-af6f484a6e1e&user=Arun+Jagota&userId=ef9ed921edad&source=-----af6f484a6e1e---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Faf6f484a6e1e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractice-with-python-comprehensions-af6f484a6e1e&user=Arun+Jagota&userId=ef9ed921edad&source=-----af6f484a6e1e---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Faf6f484a6e1e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractice-with-python-comprehensions-af6f484a6e1e&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----af6f484a6e1e--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Faf6f484a6e1e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractice-with-python-comprehensions-af6f484a6e1e&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----af6f484a6e1e---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----af6f484a6e1e--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----af6f484a6e1e--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----af6f484a6e1e--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----af6f484a6e1e--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----af6f484a6e1e--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----af6f484a6e1e--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----af6f484a6e1e--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----af6f484a6e1e--------------------------------", "anchor_text": ""}, {"url": "https://jagota-arun.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://jagota-arun.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Arun Jagota"}, {"url": "https://jagota-arun.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "685 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fef9ed921edad&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractice-with-python-comprehensions-af6f484a6e1e&user=Arun+Jagota&userId=ef9ed921edad&source=post_page-ef9ed921edad--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F1638f1de39a6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractice-with-python-comprehensions-af6f484a6e1e&newsletterV3=ef9ed921edad&newsletterV3Id=1638f1de39a6&user=Arun+Jagota&userId=ef9ed921edad&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}