{"url": "https://towardsdatascience.com/in-the-beginning-there-was-void-f3fdfa2830c", "time": 1683004727.064555, "path": "towardsdatascience.com/in-the-beginning-there-was-void-f3fdfa2830c/", "webpage": {"metadata": {"title": "In the beginning, there was void * | by Vincent Vanhoucke | Towards Data Science", "h1": "In the beginning, there was void *", "description": "In honor of the imminent release of \u2018Software Engineering at Google\u2019, which I highly recommend, I thought I\u2019d relate a tale of how software evolution and feature creep can go wrong in ways which\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.oreilly.com/library/view/software-engineering-at/9781492082781/", "anchor_text": "Software Engineering at Google", "paragraph_index": 0}, {"url": "https://en.wikipedia.org/wiki/Tony_Hoare", "anchor_text": "Tony Hoare", "paragraph_index": 0}, {"url": "https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/", "anchor_text": "billion dollar mistake", "paragraph_index": 0}, {"url": "https://en.wikipedia.org/wiki/Dennis_Ritchie", "anchor_text": "Dennis Richie", "paragraph_index": 0}, {"url": "https://queue.acm.org/detail.cfm?id=2010365", "anchor_text": "most expensive one-byte mistake", "paragraph_index": 0}, {"url": "https://en.wikipedia.org/wiki/Dot_product", "anchor_text": "dot products", "paragraph_index": 1}, {"url": "https://software.intel.com/sites/landingpage/IntrinsicsGuide/", "anchor_text": "SSE intrinsics", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/Duff%27s_device", "anchor_text": "Duff\u2019s device", "paragraph_index": 2}, {"url": "https://www.cs.utexas.edu/users/pingali/CS378/2008sp/papers/gotoPaper.pdf", "anchor_text": "Goto paper", "paragraph_index": 4}, {"url": "https://research.google.com/pubs/pub37631.html", "anchor_text": "nifty paper", "paragraph_index": 5}, {"url": "https://static.googleusercontent.com/media/research.google.com/en//archive/large_deep_networks_nips2012.pdf", "anchor_text": "deep learning codebase", "paragraph_index": 6}, {"url": "https://research.google/pubs/pub36575/", "anchor_text": "Google-wide profiling", "paragraph_index": 6}, {"url": "http://eigen.tuxfamily.org/index.php?title=Main_Page", "anchor_text": "Eigen", "paragraph_index": 7}, {"url": "https://landing.google.com/sre/", "anchor_text": "SRE", "paragraph_index": 7}, {"url": "http://tensorflow.org/", "anchor_text": "TensorFlow", "paragraph_index": 10}, {"url": "https://twitter.com/tituswinters?lang=en", "anchor_text": "Titus Winters", "paragraph_index": 11}, {"url": "https://static.googleusercontent.com/media/research.google.com/en//archive/large_deep_networks_nips2012.pdf", "anchor_text": "DistBelief", "paragraph_index": 12}, {"url": "https://en.wikipedia.org/wiki/Jeff_Dean_(computer_scientist)", "anchor_text": "Jeff Dean", "paragraph_index": 12}, {"url": "https://www.hyrumslaw.com/", "anchor_text": "Hyrum\u2019s law", "paragraph_index": 12}], "all_paragraphs": ["In honor of the imminent release of \u2018Software Engineering at Google\u2019, which I highly recommend, I thought I\u2019d relate a tale of how software evolution and feature creep can go wrong in ways which, while feeling great at every step of the journey, yield a net outcome a decade later that is a disaster with a surprisingly large blast radius. This is my modest parallel to Tony Hoare\u2019s \u2018billion dollar mistake\u2019, or Dennis Richie\u2019s \u2018most expensive one-byte mistake\u2019 and, coincidentally, it involves both pointers and zero-terminated data-structures.", "It all begins innocently enough. The year is 2009. A colleague of mine has a large number of dot products that need to be sped up to improve the scalability of a large-scale optimization problem. At the time, floating-point computation isn\u2019t a common bottleneck for our workloads, and we don\u2019t have off-the-shelf solutions readily available: bringing in a BLAS library is overkill, and there are simpler and definitely more fun things to do for someone like myself, who loves to write gnarly math code and mess around with vectorized Intel instructions.", "No sweat, I\u2019ll hack together a quick dot-product implementation using SSE intrinsics, and some hand-tuned unrolling for good measure. There is a very clever way to leverage the terrifyingly beautiful Duff\u2019s device and express unrolling without abusing the pre-processor, at the cost of an equally scandalous abuse of the C syntax. I love it. One wrinkle: SSE instructions like to operate on 16-byte aligned data. Our toolchain doesn\u2019t always provide that guarantee at the time, and compiler hints are still somewhat compiler-specific. No problem: I\u2019ll just allocate a bigger buffer and add a data pointer to the closest 16-byte boundary to enforce alignment.", "But wait, if I\u2019m going to put a restriction on how the data gets allocated, it is now very tempting to make sure the contract is enforced via proper typing. So let\u2019s wrap that naked pointer into a new data structure: float * becomes something like aligned_scoped_array<float>. Hey, this opens up new possibilities: dealing with edge effects, when using SSE instructions, is always most of the actual code, and easily alleviated when doing linear algebra by zero-padding the data up to multiples of 16 bytes, which plays nicely with my data alignment tricks. Great: let\u2019s enforce that in the data structure, since we now control it. Done, it\u2019s all very very fast now. Moving on.", "Wait. Did someone say linear algebra? Can we process those dot products in batches instead? By then we\u2019re really into BLAS territory, but let\u2019s not rewrite everything just for a basic matrix multiply: just add another dimension to the array, a function that performs the 2D multiplication, and we\u2019re good to go. Aligning and padding the data also means we can step through it without any further pointer indirection, which makes the code short and elegant. Of course, anyone who has read any of the literature on BLAS, notably the seminal Goto paper on the topic, knows that short and elegant probably leaves a ton of performance on the table, because considerations around cache performance can get quite complicated. The right answer is likely not to try to roll out your own implementation, but \u2026 it\u2019s fun and it feels like progress, right?", "Hang on. Can you do the same for quantized representations? Oh, but yes! In fact, I wrote this nifty paper on how mixing unsigned and signed fixed-point representations works amazingly well for neural networks. BLAS has nothing to offer in the space of fixed-point math, while all alignment and padding considerations still apply. So I\u2019ll just add a specialization for int8*uint8 products, and we\u2019re done. Magic.", "By now, you\u2019re probably beginning to see a pattern. Feature creep, slightly suboptimal decisions at every step of the way, the illusion of progress and decisions that are increasingly difficult to walk back from. Fast forward a few years down the road, and my one-off wrapper for a naked pointer has become a fully-fledged, tentacular matrix library, pedantically called FastMatrix. It supports x86, ARM and CUDA. It handles float, double, int8, uint8, int16 and int32. It compiles for Android and iOS. It has moved to a general \u2018util\u2019 directory in our shared codebase. It is being used by deep learning codebase as well as a growing number of projects, most of which I have never heard of. It is also sitting in a respectable position on the list of biggest consumers of CPU cycles on our Google-wide profiling dashboard. What\u2019s not to love?", "Well. It also has a terrible, maddeningly inconsistent API, in part because different hardware vendors have optimized for different data types and layouts, and I failed to abstract away those implementation details. It is also stuck in an evolutionary dead-end: forcing control of the data layout just to save a few CPU cycles and lines of code turns out to be a terrible idea, because much of the benefit disappears in all the data movements that it typically forces the users to go through. Its mere existence impedes progress towards better-supported, more comprehensive, BLAS-aware solutions such as the awesome Eigen library, which has gained support for fixed-point operations in the meantime. Its CUDA port is full of antipatterns, which I cringe at seeing cut-and-pasted elsewhere in the codebase. We also made a misguided attempt at supporting dynamic dispatch of some of the algorithms across instruction sets, which, if the caller isn\u2019t careful, may cause leakage of compilation units for the wrong platform into one\u2019s binary, and cause obscure crashes that are near impossible to tie back to the original root cause because the binary doesn\u2019t even have to invoke the offending code to be tainted. Oops. It\u2019s all fun and games until ads SRE come a-knocking.", "Did I ever mention Google that rejected me when I first applied as a software engineer? They may have had a point. That library needed to die.", "But by then, all these major design flaws had also paid short-term dividends: it is pretty fast. It\u2019s there. Due to the somewhat loose, C-like API, it\u2019s easy to add features to it, or copy-paste it piecemeal. Removing some of the most egregious maintenance nightmares would likely either cost thousands of CPU cores, or hundreds of software engineer hours: performance-sensitive code is extremely difficult to reason about, because while it\u2019s safe to assume it has decent coverage for correctness, performance coverage is very difficult to achieve: a 10% speed regression could cost a mere microsecond or overload a datacenter, and you may not be able to tell the difference until someone deploys a binary with your changes a few months after the change is committed. By then, other repositories that I had no visibility into had started to rely on it, including its gnarliest implementation details, and I\u2019d reached pandemic-levels of infection.", "The year is now 2020. It\u2019s been a decade. The monster is not entirely dead, though I\u2019ve hacked a great number of its heads. Its demise recently got a significant boost from a die-hard fan of the library, who has fortuitously decided to leave the company. Don\u2019t tell them: I gleefully deleted all their code the very same day. In my 12 years here, I have proudly removed more than 1.5M lines of code from our repository, yet these tendrils stubbornly remain. In retrospect, the best decision I made in recent years was to insist that TensorFlow not depend on any of it.", "Donald Knuth famously said that no code is ever fully debugged until its last user has died. Obviously, Knuth doesn\u2019t work at Google, or he might have said \u2018\u2026 its last user and all of their colleagues \u2026\u2019. Even if the code is dead, some of its antipatterns survive, either in people\u2019s heads or via good old-fashioned copypasta. Titus Winters, co-author of the aforementioned book, loves to say that \u2018Software Engineering is programming integrated over time.\u2019 One issue is that the time constants involved can be measured in decades, and rarely does someone stay in any job long enough to see their mistakes unfold. Decisions made locally, incrementally, can quickly poison an entire codebase and become terrifyingly difficult to walk back from, particularly as people move on to other, shinier problems.", "When I started working on the DistBelief codebase a number of years later, I immediately noticed something surprising: the innermost structure that held the neural networks was a naked \u2018void *\u2019, nothing more. I looked up who wrote that heresy, and, of course, that turned out to be Jeff Dean. Oh. I timidly asked: \u2018Jeff \u2026 but whyyy???\u2019 His answer was simply: \u2018well, we don\u2019t know what we\u2019re doing yet, so let\u2019s not bake any assumptions into the data structures that we can\u2019t walk back from.\u2019 Sure enough, the right data layout to use in this context was extremely non-obvious: you can use one to optimize for forward inference on CPU, but it penalizes the speed of the backward pass during training, and the backward pass is roughly 2X more expensive than the forward pass. But in production you mostly just run inference, so that may be the right tradeoff? It depends, because on GPU it\u2019s almost exactly the other way around. These tradeoffs took some time to settle, and eventually we codified a type system, a layout and removed the naked pointer. The lesson? Sometimes it is better to let Hyrum\u2019s law (another noted co-author of the upcoming book) work in your favor and defer API contracts until you understand how your users will (ab)use them, instead of committing to an API early and becoming its victim.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "I am a Distinguished Scientist at Google, working on Machine Learning and Robotics."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Ff3fdfa2830c&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fin-the-beginning-there-was-void-f3fdfa2830c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fin-the-beginning-there-was-void-f3fdfa2830c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fin-the-beginning-there-was-void-f3fdfa2830c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fin-the-beginning-there-was-void-f3fdfa2830c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----f3fdfa2830c--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----f3fdfa2830c--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://vanhoucke.medium.com/?source=post_page-----f3fdfa2830c--------------------------------", "anchor_text": ""}, {"url": "https://vanhoucke.medium.com/?source=post_page-----f3fdfa2830c--------------------------------", "anchor_text": "Vincent Vanhoucke"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2879ca55026a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fin-the-beginning-there-was-void-f3fdfa2830c&user=Vincent+Vanhoucke&userId=2879ca55026a&source=post_page-2879ca55026a----f3fdfa2830c---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff3fdfa2830c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fin-the-beginning-there-was-void-f3fdfa2830c&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff3fdfa2830c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fin-the-beginning-there-was-void-f3fdfa2830c&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.rawpixel.com/image/412442/free-illustration-image-pink-star-doodle", "anchor_text": "RawPixel"}, {"url": "https://www.oreilly.com/library/view/software-engineering-at/9781492082781/", "anchor_text": "Software Engineering at Google"}, {"url": "https://en.wikipedia.org/wiki/Tony_Hoare", "anchor_text": "Tony Hoare"}, {"url": "https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/", "anchor_text": "billion dollar mistake"}, {"url": "https://en.wikipedia.org/wiki/Dennis_Ritchie", "anchor_text": "Dennis Richie"}, {"url": "https://queue.acm.org/detail.cfm?id=2010365", "anchor_text": "most expensive one-byte mistake"}, {"url": "https://en.wikipedia.org/wiki/Dot_product", "anchor_text": "dot products"}, {"url": "https://software.intel.com/sites/landingpage/IntrinsicsGuide/", "anchor_text": "SSE intrinsics"}, {"url": "https://en.wikipedia.org/wiki/Duff%27s_device", "anchor_text": "Duff\u2019s device"}, {"url": "https://www.cs.utexas.edu/users/pingali/CS378/2008sp/papers/gotoPaper.pdf", "anchor_text": "Goto paper"}, {"url": "https://research.google.com/pubs/pub37631.html", "anchor_text": "nifty paper"}, {"url": "https://static.googleusercontent.com/media/research.google.com/en//archive/large_deep_networks_nips2012.pdf", "anchor_text": "deep learning codebase"}, {"url": "https://research.google/pubs/pub36575/", "anchor_text": "Google-wide profiling"}, {"url": "http://eigen.tuxfamily.org/index.php?title=Main_Page", "anchor_text": "Eigen"}, {"url": "https://landing.google.com/sre/", "anchor_text": "SRE"}, {"url": "http://tensorflow.org/", "anchor_text": "TensorFlow"}, {"url": "https://twitter.com/tituswinters?lang=en", "anchor_text": "Titus Winters"}, {"url": "https://static.googleusercontent.com/media/research.google.com/en//archive/large_deep_networks_nips2012.pdf", "anchor_text": "DistBelief"}, {"url": "https://en.wikipedia.org/wiki/Jeff_Dean_(computer_scientist)", "anchor_text": "Jeff Dean"}, {"url": "https://www.hyrumslaw.com/", "anchor_text": "Hyrum\u2019s law"}, {"url": "https://medium.com/tag/software-development?source=post_page-----f3fdfa2830c---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/coding?source=post_page-----f3fdfa2830c---------------coding-----------------", "anchor_text": "Coding"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----f3fdfa2830c---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/api?source=post_page-----f3fdfa2830c---------------api-----------------", "anchor_text": "API"}, {"url": "https://medium.com/tag/software-engineering?source=post_page-----f3fdfa2830c---------------software_engineering-----------------", "anchor_text": "Software Engineering"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff3fdfa2830c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fin-the-beginning-there-was-void-f3fdfa2830c&user=Vincent+Vanhoucke&userId=2879ca55026a&source=-----f3fdfa2830c---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff3fdfa2830c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fin-the-beginning-there-was-void-f3fdfa2830c&user=Vincent+Vanhoucke&userId=2879ca55026a&source=-----f3fdfa2830c---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff3fdfa2830c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fin-the-beginning-there-was-void-f3fdfa2830c&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----f3fdfa2830c--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Ff3fdfa2830c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fin-the-beginning-there-was-void-f3fdfa2830c&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----f3fdfa2830c---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----f3fdfa2830c--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----f3fdfa2830c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----f3fdfa2830c--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----f3fdfa2830c--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----f3fdfa2830c--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----f3fdfa2830c--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----f3fdfa2830c--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----f3fdfa2830c--------------------------------", "anchor_text": ""}, {"url": "https://vanhoucke.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://vanhoucke.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Vincent Vanhoucke"}, {"url": "https://vanhoucke.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "4.2K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2879ca55026a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fin-the-beginning-there-was-void-f3fdfa2830c&user=Vincent+Vanhoucke&userId=2879ca55026a&source=post_page-2879ca55026a--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F95d37ee307f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fin-the-beginning-there-was-void-f3fdfa2830c&newsletterV3=2879ca55026a&newsletterV3Id=95d37ee307f&user=Vincent+Vanhoucke&userId=2879ca55026a&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}