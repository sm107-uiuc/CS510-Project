{"url": "https://towardsdatascience.com/connecting-pois-to-a-road-network-358a81447944", "time": 1682995879.203779, "path": "towardsdatascience.com/connecting-pois-to-a-road-network-358a81447944/", "webpage": {"metadata": {"title": "Connecting and interpolating POIs to a road network | by Yuwen Chang | Towards Data Science", "h1": "Connecting and interpolating POIs to a road network", "description": "When we work with network analysis, our objects of analysis (represented as nodes or vertices) should be connected through a graph, with defined adjacencies and edge weights. However, we often gather\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/UDST/pandana", "anchor_text": "pandana", "paragraph_index": 4}, {"url": "http://www.urbansim.com/home", "anchor_text": "UrbanSim", "paragraph_index": 4}, {"url": "https://towardsdatascience.com/measuring-pedestrian-accessibility-97900f9e4d56", "anchor_text": "post", "paragraph_index": 4}, {"url": "https://geoffboeing.com/2016/11/osmnx-python-street-networks", "anchor_text": "this page", "paragraph_index": 8}, {"url": "http://toblerity.org/rtree/tutorial.html", "anchor_text": "R-tree", "paragraph_index": 10}, {"url": "https://blog.mapbox.com/a-dive-into-spatial-search-algorithms-ebd0c5e39d2a", "anchor_text": "see this post if you need a quick refresher", "paragraph_index": 10}, {"url": "https://stackoverflow.com/questions/50194077/shapely-unable-to-split-line-on-point-due-to-precision-issues", "anchor_text": "here", "paragraph_index": 15}], "all_paragraphs": ["When we work with network analysis, our objects of analysis (represented as nodes or vertices) should be connected through a graph, with defined adjacencies and edge weights. However, we often gather data from different sources and need to integrate them manually. The process is actually a bit more complicated than I had imagined.", "Let us look at this example. In the scenario of analyzing Points of Interest (POIs) in a city, we may have a pedestrian network retrieved from OpenStreetMap and a set of restaurants queried from Yelp. One common approach is to snap the POIs to the nearest vertices (nodes, junctions, road bends) on the network. While this is a very simple and efficient way to implement, some problems with this method include (1) ignoring the edge between the POI and the network, and (2) inconsistent snapping results depending on the availability of nearby vertices.", "In other words, although the walking distance of a POI to the network based on the snapping result may be somehow attributed to the vertex as the access impedance (e.g., distance or walk time), we still lose some geospatial information (e.g., the actual location of the POI and the footway to access it). Moreover, if the only nearby road segment is a long and straight one with few vertices, the snapping distance will not be a realistic one. While map matching techniques, as usually adopted in GPS trajectory recovery, address a similar problem, it often returns a calibrated trajectory itself instead of modifying the actual network.", "In the reference, you may find some of the questions raised by the community, and yet, the solutions I have found are not very comprehensive or ready-to-use as a geoprocessing tool. For my use case, it will be best to create a Python function that will be handy whenever I want to merge a set of points into the network.", "Just for the record, I am using the pandana package developed by UrbanSim to model urban accessibility to amenities. You can see how this is done in this post. However, for at least two reasons, I would like to manually craft my own network. First, I would like to have my outputs calculated based on buildings instead of junctions; therefore, attaching buildings (or whatever I wanted to later on) to the network is a must. Second, pandana acts exactly the same as what we have discussed previously when handling the POI snapping:", "The pois are connected to the closest node in the Pandana network which assumes no impedance between the location of the variable and the location of the closest network node.", "So, to work things out, let us break down the process into several steps:", "As easy as these may sound, let us discuss the key issues within step 4 to step 6. Do keep in mind that the most important goal for me is the scalability in terms of processing time. Singapore, for instance, has 185k buildings 120k pedestrian road segments, and while this process may be a one-time effort, we really do not want it to take hours or days to finish. The first naive proof-of-concept version of the function I wrote was still running (after a day and a night) by the time I have the optimized version crafted and debugged and tested and visualized and presented and\u2026 well, you know what I mean.", "Be noted that the osmnx package has trimmed redundant nodes (see section 3 on this page) in the network retrieved from OpenStreetMap, meaning nodes that are just a bend in the road instead of a junction linking more than two edges will be removed. This is important because it makes graph calculation and our processing more efficient while saving space. However, with commonly adopted snapping method, we might want to keep as many of these nodes as possible as they may make the snapping result better as compared to sparse nodes. In the extreme case where there are numerous nodes, the result will be the same as our proposed approach.", "In order to make a projection and then interpolate a PAP, we need to determine which edge we are actually making the projection. While shapely.project and shapely.intersection can be applied to MultiLineString, it does not return the target LineString segment and the results are not stable with some unreasonable projections present.", "Therefore, we need to locate the nearest edge by ourselves. A better way to do this is to have our edges stored in a proper data structure. Since we are storing LineString instead of Point, I choose to go with R-tree and not k-d tree (see this post if you need a quick refresher). This stores each edge as a rectangle bounding box, making it very easy to query efficiently. While one may use rtree.nearest, this may yield undesirable results. My understanding is that the distance being measured is actually that between the Point and the \"rectangle\", not the LineString. A more comprehensive way (and scalable later on for variations of nearest edge) is to query k-nearest neighbor (kNN) based on R-tree and then calculate the actual distances to each LineString inside the box.", "With the nearest edge, we can easily get PAP with line.interpolate(line.project(point)).", "a. Determine edges and nodes to update:", "Since there can be more than one PAP on each edge, we want to process them all together instead of repeating the process. We group all PAPs by the lines they are projected onto (i.e., the nearest edge).", "b. Split the edges with careful processing", "Next, we may easily get all the line segments with the shapely.ops.split function (split A\u2014B with P1, P2 returns A\u2014P1, P1\u2014P2, P2\u2014B). But, whenever one thinks that is the easiest part, that is often where bugs may bug you. So I ended up coming across a precision issue as discussed here. Simply put, when I project and interpolate a Point on a LineString, the returned PAP does NOT intersect with the LineString, making it unable to be used to split the line. In order to solve this, we need to snap the LineString to the PAP. This results in a very slight change that is not recognizable to us but ensures the intersection is valid and, therefore, enabling the split.", "All updates including this one are just mere table manipulation and will not be discussed here. Note that we used GeoDataFrame to store shapefiles and converted the CRS into epsg=3857 to calculate the road length in meters.", "As you may have already known, one biggest difference between a geospatial network and an abstract graph structure (e.g., social network) is that the edges in the former are also concrete objects and have shapes. This is why we have to navigate our way through these edges and manipulate them. In a social network, it will not make sense to implement this node-to-edge interpolation.", "I believe there is definitely room for improvement for this function. For example, using cython to optimize the code may achieve better performance. One may also try to carry out these geoprocessing steps with PostGIS, which I haven't tried yet since I prefer having it done in Python currently. However, given the current runtime of 7 minutes for the Singapore data (the aforementioned buildings to the pedestrian network scenario), it should be acceptable at the moment. For hundreds of POIs, this process should be done within seconds (if not a second).", "I am also considering a multi-directional kNN connection extension. To illustrate the use case, imagine that the ideal bus stop is at your back door, but the nearest footway yielded by this method connects your house to the road at the front door. This gives you an unrealistic walk time and route calculation when you are to take a bus at your back door. Simply establish kNN connections may not fully solve this problem, as they may all be segments at the front door. Thus, fetching reasonable kNN edges from different directions of the Point will be desirable.", "If you have any ideas for improvement or perhaps know an even easier way to complete this task, do leave a comment to share with us!", "These are the posts where I start off with this problem:", "There are many other posts that I have gone through, below are some of them:", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F358a81447944&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconnecting-pois-to-a-road-network-358a81447944&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconnecting-pois-to-a-road-network-358a81447944&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconnecting-pois-to-a-road-network-358a81447944&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconnecting-pois-to-a-road-network-358a81447944&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----358a81447944--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----358a81447944--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@ywchang?source=post_page-----358a81447944--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@ywchang?source=post_page-----358a81447944--------------------------------", "anchor_text": "Yuwen Chang"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F58149ad98f95&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconnecting-pois-to-a-road-network-358a81447944&user=Yuwen+Chang&userId=58149ad98f95&source=post_page-58149ad98f95----358a81447944---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F358a81447944&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconnecting-pois-to-a-road-network-358a81447944&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F358a81447944&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconnecting-pois-to-a-road-network-358a81447944&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/ywnch/toolbox", "anchor_text": "here"}, {"url": "https://github.com/UDST/pandana", "anchor_text": "pandana"}, {"url": "http://www.urbansim.com/home", "anchor_text": "UrbanSim"}, {"url": "https://towardsdatascience.com/measuring-pedestrian-accessibility-97900f9e4d56", "anchor_text": "post"}, {"url": "https://osmnx.readthedocs.io/en/stable/index.html", "anchor_text": "osmnx"}, {"url": "https://geoffboeing.com/2016/11/osmnx-python-street-networks", "anchor_text": "this page"}, {"url": "http://toblerity.org/rtree/tutorial.html", "anchor_text": "R-tree"}, {"url": "https://blog.mapbox.com/a-dive-into-spatial-search-algorithms-ebd0c5e39d2a", "anchor_text": "see this post if you need a quick refresher"}, {"url": "https://stackoverflow.com/questions/50194077/shapely-unable-to-split-line-on-point-due-to-precision-issues", "anchor_text": "here"}, {"url": "https://gis.stackexchange.com/questions/100119/how-to-make-a-routable-graph-from-a-point-and-a-line-shapefile-using-networkx", "anchor_text": "How to make a routable graph from a Point and a Line shapefile, using Networkx?"}, {"url": "https://gis.stackexchange.com/questions/396/nearest-neighbor-between-point-layer-and-line-layer/438", "anchor_text": "Nearest neighbor between point layer and line layer?"}, {"url": "https://gis.stackexchange.com/questions/27452/create-closest-point-on-multilinestring-to-use-in-shortest-path", "anchor_text": "Create closest point on multilinestring to use in shortest_path()"}, {"url": "https://gis.stackexchange.com/questions/120955/understanding-use-of-spatial-indexes-with-rtree", "anchor_text": "Understanding use of spatial indexes with RTree"}, {"url": "https://gis.stackexchange.com/questions/268518/split-line-by-nearest-points-using-geopandas", "anchor_text": "Split line by nearest points using geopandas"}, {"url": "https://stackoverflow.com/questions/46170577/find-closest-line-to-each-point-on-big-dataset-possibly-using-shapely-and-rtree", "anchor_text": "Find closest line to each point on big dataset, possibly using shapely and rtree"}, {"url": "https://medium.com/tag/data-science?source=post_page-----358a81447944---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/gis?source=post_page-----358a81447944---------------gis-----------------", "anchor_text": "GIS"}, {"url": "https://medium.com/tag/openstreetmap?source=post_page-----358a81447944---------------openstreetmap-----------------", "anchor_text": "Openstreetmap"}, {"url": "https://medium.com/tag/python?source=post_page-----358a81447944---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F358a81447944&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconnecting-pois-to-a-road-network-358a81447944&user=Yuwen+Chang&userId=58149ad98f95&source=-----358a81447944---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F358a81447944&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconnecting-pois-to-a-road-network-358a81447944&user=Yuwen+Chang&userId=58149ad98f95&source=-----358a81447944---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F358a81447944&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconnecting-pois-to-a-road-network-358a81447944&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----358a81447944--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F358a81447944&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconnecting-pois-to-a-road-network-358a81447944&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----358a81447944---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----358a81447944--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----358a81447944--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----358a81447944--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----358a81447944--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----358a81447944--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----358a81447944--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----358a81447944--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----358a81447944--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@ywchang?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@ywchang?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Yuwen Chang"}, {"url": "https://medium.com/@ywchang/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "151 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F58149ad98f95&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconnecting-pois-to-a-road-network-358a81447944&user=Yuwen+Chang&userId=58149ad98f95&source=post_page-58149ad98f95--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2F58149ad98f95%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconnecting-pois-to-a-road-network-358a81447944&user=Yuwen+Chang&userId=58149ad98f95&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}