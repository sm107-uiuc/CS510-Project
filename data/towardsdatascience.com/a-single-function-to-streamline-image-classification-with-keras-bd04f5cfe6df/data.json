{"url": "https://towardsdatascience.com/a-single-function-to-streamline-image-classification-with-keras-bd04f5cfe6df", "time": 1683000409.8713531, "path": "towardsdatascience.com/a-single-function-to-streamline-image-classification-with-keras-bd04f5cfe6df/", "webpage": {"metadata": {"title": "A single function to streamline image classification with Keras | by Tirthajyoti Sarkar | Towards Data Science", "h1": "A single function to streamline image classification with Keras", "description": "We show, how to construct a single, generalized, utility function to pull images automatically from a directory and train a con neural net."}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/introduction-to-deep-learning-with-keras-17c09e4f0eb2", "anchor_text": "Keras", "paragraph_index": 0}, {"url": "https://www.analyticsvidhya.com/blog/2018/02/pytorch-tutorial/", "anchor_text": "PyTorch", "paragraph_index": 0}, {"url": "https://towardsdatascience.com/keras-vs-pytorch-for-deep-learning-a013cb63870d", "anchor_text": "powerful yet simple to use", "paragraph_index": 0}, {"url": "http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf", "anchor_text": "convolution, max pooling, optimizers", "paragraph_index": 1}, {"url": "https://machinelearningmastery.com/adam-optimization-algorithm-for-deep-learning/", "anchor_text": "ADAM", "paragraph_index": 1}, {"url": "https://towardsdatascience.com/a-look-at-gradient-descent-and-rmsprop-optimizers-f77d483ef08b", "anchor_text": "RMSprop", "paragraph_index": 1}, {"url": "https://www.kaggle.com/alxmamaev/flowers-recognition", "anchor_text": "downloaded from the Kaggle website here", "paragraph_index": 5}, {"url": "https://github.com/tirthajyoti/Deep-learning-with-Python/blob/master/Notebooks/Keras_flow_from_directory.ipynb", "anchor_text": "here in my Github repo", "paragraph_index": 9}, {"url": "https://colab.research.google.com/notebooks/basic_features_overview.ipynb", "anchor_text": "Google Colab", "paragraph_index": 13}, {"url": "https://stackoverflow.com/questions/46986398/import-data-into-google-colaboratory", "anchor_text": "loading and pre-processing the datasets", "paragraph_index": 13}, {"url": "https://keras.io/preprocessing/image/", "anchor_text": "official description", "paragraph_index": 19}, {"url": "https://realpython.com/introduction-to-python-generators/", "anchor_text": "Python generator object", "paragraph_index": 29}, {"url": "https://github.com/tirthajyoti/Deep-learning-with-Python/blob/master/Notebooks/Keras_flow_from_directory.ipynb", "anchor_text": "Here is the code again", "paragraph_index": 32}, {"url": "https://realpython.com/introduction-to-python-generators/", "anchor_text": "Python generator", "paragraph_index": 35}, {"url": "https://en.wikipedia.org/wiki/Abstraction_(computer_science)", "anchor_text": "abstraction", "paragraph_index": 41}, {"url": "https://github.com/tirthajyoti?tab=repositories", "anchor_text": "GitHub", "paragraph_index": 76}, {"url": "https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/", "anchor_text": "add me on LinkedIn", "paragraph_index": 76}, {"url": "https://twitter.com/tirthajyotiS", "anchor_text": "follow me on Twitter.", "paragraph_index": 76}], "all_paragraphs": ["Plenty has been written about deep learning frameworks such as Keras and PyTorch, and how powerful yet simple to use they are for constructing and playing with wonderful deep learning models.", "There are so many tutorials/articles already written about model architecture and optimizers\u2014 the concept of convolution, max pooling, optimizers such as ADAM or RMSprop.", "What if, all you wanted, is a single function to pull automatically images from a specified directory on your disk, and give you back a fully trained neural net model, ready to be used for prediction?", "Therefore, in this article, we focus on how to use a couple of utility methods from the Keras (TensorFlow) API to streamline the training of such models (specifically for a classification task) with a proper data pre-processing.", "In the end, we aim to write a single utility function, which can take just the name of your folder where training images are stored, and give you back a fully trained CNN model.", "We use a dataset consisting of 4000+ images of flowers for this demo. The dataset can be downloaded from the Kaggle website here.", "The data collection is based on the data Flickr, Google images, Yandex images. The pictures are divided into five classes,", "For each class, there are about 800 photos. Photos are not high resolution, about 320 x 240 pixels. Photos are not reduced to a single size, they have different proportions.", "However, they come organized neatly in five directories named with the corresponding class labels. We can take advantage of this organization and apply the Keras methods to streamline the training of our convolutional network.", "The full Jupyter notebook is here in my Github repo. Feel free to fork and extend it, and give it a star if you like it.", "We will use bits and pieces of the code in this article to show the important parts for illustration.", "It is recommended to run this script on a GPU (with TensorFlow-GPU), as we will build a CNN with five convolutional layers and consequently, the training process with thousands of images can be computationally intensive and slow if you are not using some sort of GPU.", "For the Flowers dataset, a single epoch took ~ 1 minute on my modest laptop with NVidia GTX 1060 Ti GPU (6 GB Video RAM), Core i-7 8770 CPU, 16 GB DDR4 RAM.", "Alternatively, you can take advantage of Google Colab, but loading and pre-processing the datasets can be a bit of hassle there.", "Note that the first part of the data pre-processing section of the notebook code is not essential for the training of the neural net. This set of code is just for illustration purpose and showing a few training images as an example.", "On my laptop, the data is stored in a folder one level above my Notebooks folder. Here is the organization,", "With some basic Python code, we can traverse the sub-directories, count the images, and show a sample of them.", "Note, the pictures vary in their sizes and aspect ratios.", "This is where the actual magic happens.", "The official description of the ImageDataGenerator class says \"Generate batches of tensor image data with real-time data augmentation. The data will be looped over (in batches).\"", "Basically, it can be used to augment image data with a lot of built-in pre-processing such as scaling, shifting, rotation, noise, whitening, etc. Right now, we just use the rescale attribute to scale the image tensor values between 0 and 1.", "Here is a useful article on this aspect of the class.", "But the real utility of this class for the current demonstration is the super useful method flow_from_directory which can pull image files one after another from the specified directory.", "Note that, this directory just has to be the top-level directory where all the sub-directories of individual classes can be stored separately. The flow_from_directory method automatically scans through all the sub-directories and sources the images along with their appropriate labels.", "We can specify the class names (as we did here with the classes argument) but this is optional. However, we will later see, how this can be useful for selective training from a large trove of data.", "Another useful argument is the target_size, which lets us resize the source images to a uniform size of 200 x 200, no matter the original size of the image. That is some cool image-processing right there with a simple function argument.", "We also specify the batch size. If you leave batch_size unspecified, by default, it will be set to 32.", "We choose the class_mode as categorical as we are doing a multi-class classification here.", "When you run this code, the Keras function scans through the top-level directory, finds all the image files, and automatically labels them with the proper class (based on the sub-directory they were in).", "But wait, there is more. This is a Python generator object and that means it will be used to \u2018yield\u2019 the data one by one during the training. This significantly reduces the problem of dealing with a very large dataset, whose contents cannot be fitted into memory at one go. Look at this article to understand it better,", "As promised, we will not spend time or energy on analyzing the code behind the CNN model. In brief, it consists of five convolutional layers/max-pooling layers and 128 neurons at the end followed by a 5 neuron output layer with a softmax activation for the multi-class classification.", "We use RMSprop with an initial learning rate of 0.001.", "Here is the code again. Feel free to experiment with the network architecture and the optimizer.", "We discussed before what cool things the train_generator object does with the flow_from_directory method and with its arguments.", "Now, we utilize this object in the fit_generator method of the CNN model, defined above.", "Note the steps_per_epoch argument to fit_generator. Since train_generator is a generic Python generator, it never stops and therefore the fit_generator will not know where a particular epoch is ending and the next one is starting. We have to let it know the steps in a single epoch. This is, in most cases, the length of the total training sample divided by the batch size.", "In the previous section, we found out the total sample size as total_sample. Therefore, in this particular case, the steps_per_epoch is set to int(total_sample/batch_size) which is 34. Therefore, you will see 34 steps per epoch in the training log below.", "We can check the accuracy/loss with the usual plot code.", "OK. What have we accomlished so far?", "We have been able to utilize Keras ImageDataGenerator and fit_generator methods to pull images automatically from a single directory, label them, resize and scale them, and flow them one by one (in batches) for training a neural network.", "Can we encapsulate all of these in a single function?", "One of the central goals of making useful software/computing systems is abstraction i.e. hide the gory details of internal computation and data manipulation and present a simple and intuitive working interface/ API to the user.", "Just as a practice towards that goal, we can try to encapsulate the process we followed above, in a single function. Here is the idea,", "When you are designing a high-level API, why not go for more generalization than what is required for this particular demo with flowers dataset? With that in our mind, we can think of providing additional arguments to this function for making it applicable to other image classification cases (we will see an example soon).", "Specifically, we provide the following arguments in the function,", "Of course, we could have provided additional arguments corresponding to the whole model architecture or optimizer settings. This article is not focused on such issues, and therefore, we keep it compact.", "Again, the full code is in the Github repo. Below, we just show the docstring portion to emphasis on the point of making it a flexible API,", "Now we test our train_CNN function by simply supplying a folder/directory name and getting back a trained model which can be used for predictions!", "Let\u2019s also suppose that we want to train only for \u2018daisy\u2019, \u2018rose\u2019, and \u2018tulip\u2019 now and ignore the other two flowers\u2019 data. We simply pass on a list to the classes argument. In this case, don't forget to set the num_classes argument to 3. You will notice how the steps per epoch are automatically reduced to 20 as the number of training samples is less than the case above.", "Also, note that the verbose is set to 0 by default in the function above, and therefore you need to specify explicitly verbose=1 if you want to monitor the progress of the training epoch-wise!", "Basically, we are able to get a fully trained CNN model with 2 lines of code now!", "This is an acid test for the utility of such a function.", "Can we just take it and apply to another dataset without much modification?", "A rich yet manageable image classification dataset is Caltech-101. By manageable I meant, not as large as the ImageNet database, which requires massive hardware infrastructure to train, and therefore, out of bounds, for testing cool ideas quickly on your laptop, yet diverse enough for practicing and learning the tricks and trades of convolutional neural networks.", "Caltech-101 is an image dataset of diverse types of objects belonging to 101 categories. There are about 40 to 800 images per category. Most categories have about 50 images. The size of each image is roughly 300 x 200 pixels.", "The dataset was built by none other than Prof. Fei Fei Li and her colleagues (Marco Andreetto, and Marc \u2018Aurelio Ranzato) at Caltech in 2003 when she was a graduate student there. We can surmise, therefore, that Caltech-101 was a direct precursor for her work on the ImageNet.", "We downloaded the dataset and uncompressed the contents in the same Data folder as before. The directory looks like following,", "So, we have what we want \u2014 a top-level directory with sub-directories containing training images.", "And then, the same two lines as before,", "All we did is to pass on the address of this directory to the function and choose what categories of the image we want to train the model for. Let\u2019s say we want to train the model for classification between \u2018cup\u2019 and \u2018crab\u2019. We can just pass their names as a list to the classes argument as before.", "Also, note that we may have to reduce the batch_size significantly for this dataset as the total number of training images will be much lower compared to the Flowers dataset and if the batch_size is higher than the total sample then we will have steps_per_epoch equal to 0 and that will create an error during training.", "Voila! The function finds the relevant images (130 of them in total) and trains the model, 4 per batch, i.e. 33 steps per epoch.", "So, we saw how easy it was to just pass on the training images\u2019 directory address to the function and train a CNN model with our chosen classes.", "Is the model any good? Let\u2019s find out by testing it with random pictures downloaded from the internet.", "Remember, the Caltech-101 dataset was created by Fei Fei Li and colleagues back in 2003. So, there is little chance that any of the newer images on the internet will be in the dataset.", "We downloaded following random pictures of \u2018crabs\u2019 and \u2018cups\u2019.", "After some rudimentary image processing (resizing and dimension expansion to match the model), we get the following result,", "The model predicted the class correctly for the crab test image.", "The model predicted the class correctly for the cup test image.", "But what about for this one?", "So, the model predicts the test image as a cup. Almost fair, isn\u2019t it?", "So far, inside the fit_generator we only had a train_generator object for training. But what about a validation set? It follows exactly the same concept as a train_generator. You can randomly split from your training images a validation set and set them aside in a separate directory (same sub-directory structures as the training directory) and you should be able to pass that on to the fit_generator function.", "There is even a method of flow_from_dataframe for the ImageDataGenerator class, where you can pass on the names of the image files as contained in a Pandas DataFrame and the training can proceed.", "Feel free to experiment with these extensions.", "In this article we went over a couple of utility methods from Keras, that can help us construct a compact utility function for efficiently training a CNN model for an image classification task. If we can organize training images in sub-directories under a common directory, then this function may allow us to train models with a couple of lines of codes only.", "This makes sense since rather than individually scraping and pre-processing images using other libraries (such as PIL or Scikit-image), with these built-in classes/methods and our utility function, we can keep the code/data flow entirely within Keras and train a CNN model in a compact fashion.", "If you have any questions or ideas to share, please contact the author at tirthajyoti[AT]gmail.com. Also, you can check the author\u2019s GitHub repositories for other fun code snippets in Python, R, and machine learning resources. If you are, like me, passionate about machine learning/data science, please feel free to add me on LinkedIn or follow me on Twitter.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Sr. Director of AI/ML platform | Stories on Artificial Intelligence, Data Science, and ML | Speaker, Open-source contributor, Author of multiple DS books"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fbd04f5cfe6df&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-single-function-to-streamline-image-classification-with-keras-bd04f5cfe6df&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-single-function-to-streamline-image-classification-with-keras-bd04f5cfe6df&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-single-function-to-streamline-image-classification-with-keras-bd04f5cfe6df&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-single-function-to-streamline-image-classification-with-keras-bd04f5cfe6df&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----bd04f5cfe6df--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----bd04f5cfe6df--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@tirthajyoti?source=post_page-----bd04f5cfe6df--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@tirthajyoti?source=post_page-----bd04f5cfe6df--------------------------------", "anchor_text": "Tirthajyoti Sarkar"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fcb9d97d4b61a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-single-function-to-streamline-image-classification-with-keras-bd04f5cfe6df&user=Tirthajyoti+Sarkar&userId=cb9d97d4b61a&source=post_page-cb9d97d4b61a----bd04f5cfe6df---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbd04f5cfe6df&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-single-function-to-streamline-image-classification-with-keras-bd04f5cfe6df&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbd04f5cfe6df&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-single-function-to-streamline-image-classification-with-keras-bd04f5cfe6df&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/introduction-to-deep-learning-with-keras-17c09e4f0eb2", "anchor_text": "Keras"}, {"url": "https://www.analyticsvidhya.com/blog/2018/02/pytorch-tutorial/", "anchor_text": "PyTorch"}, {"url": "https://towardsdatascience.com/keras-vs-pytorch-for-deep-learning-a013cb63870d", "anchor_text": "powerful yet simple to use"}, {"url": "http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf", "anchor_text": "convolution, max pooling, optimizers"}, {"url": "https://machinelearningmastery.com/adam-optimization-algorithm-for-deep-learning/", "anchor_text": "ADAM"}, {"url": "https://towardsdatascience.com/a-look-at-gradient-descent-and-rmsprop-optimizers-f77d483ef08b", "anchor_text": "RMSprop"}, {"url": "https://www.kaggle.com/alxmamaev/flowers-recognition", "anchor_text": "downloaded from the Kaggle website here"}, {"url": "https://github.com/tirthajyoti/Deep-learning-with-Python/blob/master/Notebooks/Keras_flow_from_directory.ipynb", "anchor_text": "here in my Github repo"}, {"url": "https://colab.research.google.com/notebooks/basic_features_overview.ipynb", "anchor_text": "Google Colab"}, {"url": "https://stackoverflow.com/questions/46986398/import-data-into-google-colaboratory", "anchor_text": "loading and pre-processing the datasets"}, {"url": "https://keras.io/preprocessing/image/", "anchor_text": "official description"}, {"url": "https://medium.com/@arindambaidya168/https-medium-com-arindambaidya168-using-keras-imagedatagenerator-b94a87cdefad", "anchor_text": "Image Augmentation using Keras ImageDataGeneratorA blog for implementation of our custom generator in combination with Keras\u2019 ImageDataGenerator to perform various\u2026medium.com"}, {"url": "https://realpython.com/introduction-to-python-generators/", "anchor_text": "Python generator object"}, {"url": "https://towardsdatascience.com/pythons-list-generators-what-when-how-and-why-2a560abd3879", "anchor_text": "Python\u2019s Generator Expressions: Fitting Large Datasets into MemoryGenerator Expressions are an interesting feature in Python, which allows us to create lazily generated iterable objects\u2026towardsdatascience.com"}, {"url": "https://github.com/tirthajyoti/Deep-learning-with-Python/blob/master/Notebooks/Keras_flow_from_directory.ipynb", "anchor_text": "Here is the code again"}, {"url": "https://realpython.com/introduction-to-python-generators/", "anchor_text": "Python generator"}, {"url": "https://en.wikipedia.org/wiki/Abstraction_(computer_science)", "anchor_text": "abstraction"}, {"url": "https://github.com/tirthajyoti?tab=repositories", "anchor_text": "GitHub"}, {"url": "https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/", "anchor_text": "add me on LinkedIn"}, {"url": "https://twitter.com/tirthajyotiS", "anchor_text": "follow me on Twitter."}, {"url": "https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/", "anchor_text": "Tirthajyoti Sarkar - Sr. Principal Engineer - Semiconductor, AI, Machine Learning - ON\u2026Making data science/ML concepts easy to understand through writing: https://medium.com/@tirthajyoti Open-source and fun\u2026www.linkedin.com"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----bd04f5cfe6df---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----bd04f5cfe6df---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/technology?source=post_page-----bd04f5cfe6df---------------technology-----------------", "anchor_text": "Technology"}, {"url": "https://medium.com/tag/deep-learning?source=post_page-----bd04f5cfe6df---------------deep_learning-----------------", "anchor_text": "Deep Learning"}, {"url": "https://medium.com/tag/data-science?source=post_page-----bd04f5cfe6df---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbd04f5cfe6df&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-single-function-to-streamline-image-classification-with-keras-bd04f5cfe6df&user=Tirthajyoti+Sarkar&userId=cb9d97d4b61a&source=-----bd04f5cfe6df---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbd04f5cfe6df&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-single-function-to-streamline-image-classification-with-keras-bd04f5cfe6df&user=Tirthajyoti+Sarkar&userId=cb9d97d4b61a&source=-----bd04f5cfe6df---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbd04f5cfe6df&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-single-function-to-streamline-image-classification-with-keras-bd04f5cfe6df&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----bd04f5cfe6df--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fbd04f5cfe6df&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-single-function-to-streamline-image-classification-with-keras-bd04f5cfe6df&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----bd04f5cfe6df---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----bd04f5cfe6df--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----bd04f5cfe6df--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----bd04f5cfe6df--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----bd04f5cfe6df--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----bd04f5cfe6df--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----bd04f5cfe6df--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----bd04f5cfe6df--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----bd04f5cfe6df--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@tirthajyoti?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@tirthajyoti?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Tirthajyoti Sarkar"}, {"url": "https://medium.com/@tirthajyoti/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "12.5K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fcb9d97d4b61a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-single-function-to-streamline-image-classification-with-keras-bd04f5cfe6df&user=Tirthajyoti+Sarkar&userId=cb9d97d4b61a&source=post_page-cb9d97d4b61a--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fb285331282ca&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-single-function-to-streamline-image-classification-with-keras-bd04f5cfe6df&newsletterV3=cb9d97d4b61a&newsletterV3Id=b285331282ca&user=Tirthajyoti+Sarkar&userId=cb9d97d4b61a&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}