{"url": "https://towardsdatascience.com/how-to-generate-pseudo-random-datasets-in-python-start-from-scratch-with-numpy-faker-c5661e3bc58b", "time": 1683009737.088408, "path": "towardsdatascience.com/how-to-generate-pseudo-random-datasets-in-python-start-from-scratch-with-numpy-faker-c5661e3bc58b/", "webpage": {"metadata": {"title": "How to generate pseudo-random datasets in Python: start from scratch with Numpy & Faker | by Edoardo Romani | Towards Data Science", "h1": "How to generate pseudo-random datasets in Python: start from scratch with Numpy & Faker", "description": "You are about to start on your next data project but you immediately run into an obstacle: the data you are looking to use is not easily accessible. No matter the use case, the goal of this article\u2026"}, "outgoing_paragraph_urls": [{"url": "https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population", "anchor_text": "Wikipedia page", "paragraph_index": 30}, {"url": "https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population", "anchor_text": "data source", "paragraph_index": 32}, {"url": "https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population", "anchor_text": "URL", "paragraph_index": 33}, {"url": "https://numpy.org/doc/stable/reference/generated/numpy.where.html", "anchor_text": "np.where", "paragraph_index": 49}, {"url": "https://landing.mailerlite.com/webforms/landing/k1n3r2", "anchor_text": "here", "paragraph_index": 55}, {"url": "https://edoardoromani.com/", "anchor_text": "https://edoardoromani.com/", "paragraph_index": 57}], "all_paragraphs": ["You are about to start on your next data project but you immediately run into an obstacle: the data you are looking to use is not easily accessible.", "This can happen for a variety of reasons, such as:", "These are common problems equally faced by:", "A) Entrepreneurs looking to develop MVPs for their next data solution", "B) Data Analysts looking to mock-up a data visualization solution", "C) Analytics Consultants looking to develop Proof-of-Concept solutions for their clients", "No matter the use case, the goal of this article is to take you to a brief example of how you can use Python to generate a pseudo-random dataset which aims to resemble real-world data as much as possible.", "Although generating pseudo-random data will inevitably have limits given:", "the activity can be vital in order to get initial liftoff for your data project, and get you to a point where you can show the potential of your data solution to either an investor or to your next client.", "The activity may even convince your counterpart to actually share real-world data with you, which is your ultimate goal. In the consulting industry, where such counterparts are your actual clients and gatekeepers to the data, this happens quite often, once the viability of a data solution\u2019s initial exploration is positively assessed.", "Let\u2019s now go through a sample and simple data generation workflow in Python, within which you will mainly make use of the Numpy and Faker packages.", "Let\u2019s imagine you have to generate a dataset featuring a list of insurance claims requests coming from a specific market segment. You are no insurance expert and want to come up with at least 200,000 rows of insurance claims that have at least some resemblance to reality, so that you can use this data for your application\u2019s sample user interface you will be creating on the front-end.", "You look online and you find nothing of the sort, since your new application will be covering a market niche which you identified as an industry white-space.", "A good starting point here is what I call \u201cAsk the experts\u201d. Practically, this can mean:", "The goal of this activity is to get to know as much contextual information for you to generate data in a way that is as close as possible to the reality of the market segment(s) you are trying to represent. In this example, this can mean asking about the geographical split of the data (i.e. if 30% of the claims in your market come from Australia and Japan, you would want your data to reflect this) and any other question that is relevant for the problem at hand.", "The key here is to keep gathering useful information in iterative fashion, so that as you generate the data you can go back to your sources and check your results against them, and adjust your data generation activity accordingly.", "This is probably the most important step in order to derive meaningful generated samples of data, and it surely takes quite some time as you would want to consider all sorts of variables and relationships.", "Once you are done with this first critical step, it is time to use some Python code to come up with your data!", "Let\u2019s now go through the code required to generate 200,000 lines of random insurance claims coming from clients.", "2. Generate 200,000 random insurance clients and relevant variables", "2.1 Customer Names, Address, Company Name, Claim Reason, Confidentiality Level", "The first five variables you can generate are the customer name, home address, company (for which let\u2019s say the each customer works as an employee), reason for the insurance claim, and the level of data confidentiality attached to the claim.", "Implicitly you have also defined the sample size n_names=200,000 in this case. You can use fake.name() to generate n_names names and store them into the names list. You can also use fake.company() and fake.address() to generate fake customer addresses and company names.", "Suppose the experts from step 1 told you that the usual types of reasons for making a claim are either \u201cMedical\u201d, \u201cTravel\u201d, \u201cPhone\u201d, or \u201cOther\u201d. To each of these reasons is attached a certain level of data confidentiality (ranging from \u201cVery Low\u201d to \u201cHigh\u201d) for the customer which you also want to consider. You can do this by defining a dictionary (here called claim_confidentiality_dict) which stores and maps each claim reason to its relative data confidentiality level.", "Let\u2019s suppose that you also read a reputable industry report that states that the distribution of all claims is heavily skewed towards medical reasons for claiming, which represent 55% of all claim reasons, and that the other claim reasons each represent an equal share of the remaining 45%. You can then create a claim_reasons list using the random.choice function, setting the length of the list equal to n_names (200,000) and the probability of a given claim reason to be picked with the p parameter. This parameter is a list containing the available probabilities for each reason, and allows us to extract a meaningful distribution of 200,000 claim reasons to pair with our client names.", "Finally, you can also generate a column of all confidentiality levels which is then mapped to the 200,000 claim_reasons column you just generated. To do so, you can use the previously defined claim_confidentiality_dict dictionary as a lookup reference to generate a confidentiality level at index i which is paired with the same index position of the claim_reasons list.", "Having created all five columns, you can now put them together into a pandas DataFrame object of name df. and call df.head() to visualize the first 5 rows of your brand new 200,000 rows by 5 columns dataset.", "2.2 Country, Sales Manager, Claim Amount", "Let\u2019s now see how you can add in a Country column, which identifies the customer\u2019s nationality, as well as the customer\u2019s claim amount and assigned sales manager required to handle a claim.", "You want this insurance company to operate all over the world and therefore the sample of 200,000 clients will hypothetically have country frequencies which are equal the to the probability of a particular customer of being from country X, given its total population.", "You can therefore use the Wikipedia page listing all countries and relative populations to determine the probability of picking a customer from a particular country. You first need to import a list of countries and a list of their populations.", "Let\u2019s break down the code to do so below:", "You first define the URL variable, which points to the online data source. You then set up two empty lists, countries_list and pop_list, which you will use to store data coming from the web-page.", "In Python you can scrape web-pages with the Beautiful Soup and Requests packages. You can fetch the relevant URL content with the request.get method. Then, you can extract its text with the .text method, and finally parse it into a Beautiful Soup object.", "Then, in order to locate the table containing the list and countries and populations within the HTML, you can inspect the code of the page (this can be done by clicking Ctrl + Shift + I on Google Chrome) and see that the table element you are interested in has a class of wikitable. You can then iterate over its rows (\u201ctr\u201d) elements, and for each row of the table (the data component in the code), you can extract the corresponding country and population element.", "Once extracted, you can append them to countries_list and pop_list, and move to the next element, until you will have reached the end of the table.", "With the next three lines of code you can then just obtain the top 100 countries by population returned from the Wikipedia page (the table on the web page has the list of countries and populations already ordered so by picking the first 100 elements of the list you are immediately picking the countries with the highest populations), as well as the list of the associated population sizes.", "You then obtain the corresponding probabilities by dividing the population of each country by the total population of the top 100 countries, and use those probabilities as weights for picking random countries to attach to the newly created Country column which you insert into the df dataset.", "The final two lines of code also assign a Claim Manager to each claim of the dataset, by assuming that there are a total of 5 claim_managers (simplification) with equal probability of being assigned a claim.", "You know need to generate a \u201cClaim Amount\u201d column. You know that each claim amount tends to vary depending on the reason of the claim.", "Below are typical ranges for each claim reason category you have obtained from another industry report:", "How to go about assigning a claim amount within the given range to each row, based on its Claim Reason category?", "You can initialize an empty \u201cClaim Amount\u201d column and then fill it with random integers within the given ranges assigned to each category. Claim amounts are generated with the np.random.randint(low,high) available with numpy. You can then call df.head() on the dataset to get a glimpse of what you have come up with so far.", "2.3 Premium paid and Claim Request Output", "The last three columns you want to create are:", "Let\u2019s suppose your market research has also identified that in your given segment premiums paid are on average higher than the average claim amount in a given category by a factor of 8. And let\u2019s say you also know that your dataset wants to feature an insurance company which automatically pays out claims on amounts that are 6% or less of their average category premiums, for efficiency reasons (since the company does not want to spend time validating the justifications behind a certain claim as the small amounts do not justify the big efforts that have to be made to do so).", "You can start by calculating your average claim amount by category as shown below, by using pandas groupby followed by mean() called on the Claim Reason column. You can then multiply each average claim amount by 8 to obtain you average category premiums, and store them in a list. Once done, you can create a new Category Premium column that states the average premium amount for each row, based on the claim reason of that particular row.", "You are then able to create the Premium to Amount Ratio column by simply dividing the Claim Amount column by the Category Premium column.", "If you break this down by category, you can see than on average, each claim represents around 13% of the category premium", "Let\u2019s now compute the last column, the Claim Request output, by assigning a value of \u201cYes\u201d to all claims which show a Premium/Amount ratio of less than 6%. You can create the new column easily by using the np.where function and visualize the whole dataset by calling it to the console.", "You are done! You have managed to generate a 200,000 rows and 11 columns of pseudo-random data ready to be used for project.", "This dataset is by no means a closed solution, and you can scale this approach up or down, according to your data generation needs.", "Remember that the key step is the first one. Here, you are trying to collect as much context-knowledge as possible about the problem so that, even though you are still coming up with randomized rows, you can start to build some degree of logic and coherence into your first attempt.", "I encourage you to approach data generation as an iterative exercise. Python is a great programming language for building up data from scratch but the real value will be added when you will instill your skills and intuition about the use case within your code, so that the output can be as (pseudo)-random as possible.", "Subject matter experts , online sources and your team are in this sense your best aid.", "Access my free Data Science resource checklist here", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Ops & Analytics professional based in London, UK. https://edoardoromani.com/"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fc5661e3bc58b&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-generate-pseudo-random-datasets-in-python-start-from-scratch-with-numpy-faker-c5661e3bc58b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-generate-pseudo-random-datasets-in-python-start-from-scratch-with-numpy-faker-c5661e3bc58b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-generate-pseudo-random-datasets-in-python-start-from-scratch-with-numpy-faker-c5661e3bc58b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-generate-pseudo-random-datasets-in-python-start-from-scratch-with-numpy-faker-c5661e3bc58b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://me.dm/@edoromani1", "anchor_text": "Mastodon"}, {"url": "https://towardsdatascience.com/?source=post_page-----c5661e3bc58b--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c5661e3bc58b--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://edoromani1.medium.com/?source=post_page-----c5661e3bc58b--------------------------------", "anchor_text": ""}, {"url": "https://edoromani1.medium.com/?source=post_page-----c5661e3bc58b--------------------------------", "anchor_text": "Edoardo Romani"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F90a4cd0da51c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-generate-pseudo-random-datasets-in-python-start-from-scratch-with-numpy-faker-c5661e3bc58b&user=Edoardo+Romani&userId=90a4cd0da51c&source=post_page-90a4cd0da51c----c5661e3bc58b---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc5661e3bc58b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-generate-pseudo-random-datasets-in-python-start-from-scratch-with-numpy-faker-c5661e3bc58b&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc5661e3bc58b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-generate-pseudo-random-datasets-in-python-start-from-scratch-with-numpy-faker-c5661e3bc58b&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@patrickian4?utm_source=medium&utm_medium=referral", "anchor_text": "Patrick Fore"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://pypi.org/project/Faker/", "anchor_text": "aker"}, {"url": "https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population", "anchor_text": "Wikipedia page"}, {"url": "https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population", "anchor_text": "data source"}, {"url": "https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population", "anchor_text": "URL"}, {"url": "https://numpy.org/doc/stable/reference/generated/numpy.where.html", "anchor_text": "np.where"}, {"url": "https://landing.mailerlite.com/webforms/landing/k1n3r2", "anchor_text": "here"}, {"url": "https://edo-romani1.medium.com/membership", "anchor_text": "Join Medium with my referral link - Edoardo RomaniAs a Medium member, a portion of your membership fee goes to writers you read, and you get full access to every story\u2026edo-romani1.medium.com"}, {"url": "https://medium.com/tag/python?source=post_page-----c5661e3bc58b---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/programming?source=post_page-----c5661e3bc58b---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data?source=post_page-----c5661e3bc58b---------------data-----------------", "anchor_text": "Data"}, {"url": "https://medium.com/tag/editors-pick?source=post_page-----c5661e3bc58b---------------editors_pick-----------------", "anchor_text": "Editors Pick"}, {"url": "https://medium.com/tag/numpy?source=post_page-----c5661e3bc58b---------------numpy-----------------", "anchor_text": "Numpy"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc5661e3bc58b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-generate-pseudo-random-datasets-in-python-start-from-scratch-with-numpy-faker-c5661e3bc58b&user=Edoardo+Romani&userId=90a4cd0da51c&source=-----c5661e3bc58b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc5661e3bc58b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-generate-pseudo-random-datasets-in-python-start-from-scratch-with-numpy-faker-c5661e3bc58b&user=Edoardo+Romani&userId=90a4cd0da51c&source=-----c5661e3bc58b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc5661e3bc58b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-generate-pseudo-random-datasets-in-python-start-from-scratch-with-numpy-faker-c5661e3bc58b&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c5661e3bc58b--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fc5661e3bc58b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-generate-pseudo-random-datasets-in-python-start-from-scratch-with-numpy-faker-c5661e3bc58b&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----c5661e3bc58b---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----c5661e3bc58b--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----c5661e3bc58b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----c5661e3bc58b--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----c5661e3bc58b--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----c5661e3bc58b--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----c5661e3bc58b--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----c5661e3bc58b--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----c5661e3bc58b--------------------------------", "anchor_text": ""}, {"url": "https://edoromani1.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://edoromani1.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Edoardo Romani"}, {"url": "https://edoromani1.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "696 Followers"}, {"url": "https://edoardoromani.com/", "anchor_text": "https://edoardoromani.com/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F90a4cd0da51c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-generate-pseudo-random-datasets-in-python-start-from-scratch-with-numpy-faker-c5661e3bc58b&user=Edoardo+Romani&userId=90a4cd0da51c&source=post_page-90a4cd0da51c--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fd30297792fb1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-generate-pseudo-random-datasets-in-python-start-from-scratch-with-numpy-faker-c5661e3bc58b&newsletterV3=90a4cd0da51c&newsletterV3Id=d30297792fb1&user=Edoardo+Romani&userId=90a4cd0da51c&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}