{"url": "https://towardsdatascience.com/julias-most-awesome-features-be51f798f140", "time": 1683007923.8076339, "path": "towardsdatascience.com/julias-most-awesome-features-be51f798f140/", "webpage": {"metadata": {"title": "Julia\u2019s Most Awesome Features. Five of my favorite features in the\u2026 | by Emma Boudreau | Towards Data Science", "h1": "Julia\u2019s Most Awesome Features", "description": "Within the bounds of programming languages are programming concepts and paradigms. Many languages take advantage of both their paradigm, as well as interesting generic programming concepts to create\u2026"}, "outgoing_paragraph_urls": [], "all_paragraphs": ["Within the bounds of programming languages are programming concepts and paradigms. Many languages take advantage of both their paradigm, as well as interesting generic programming concepts to create features to differentiate themselves from other languages. However, these features are often limited in scope, and sometimes aren\u2019t used frequently enough to even justify being around.", "The Julia programming language is an interesting case because unlike most languages, Julia has some killer defining features that make it capable of various different things that you might not expect to go together. Though there is certainly an enormous list of fantastic features that the Julia language utilizes, these are five of those features that I find the most useful and engaging.", "Although macros are certainly not a new concept to programming, their implementation in Julia is rather unique and in my subjective opinion rather well done. Macros are \u201c shortcuts\u201d that can be used to quickly and effectively access functions, and are incredibly useful when working with functional applications of the Julia language. In Julia, you can define a macro by simply using \u201c macro.\u201d", "And we can use the macro by adding the @ symbol before the name of the macro. The parameters can be added with white-space, no parenthesis or commas necessary!", "If you are familiar with the Julia language and have used it even relatively, chances are you are familiar with Julia\u2019s high-performance dispatch. Using a syntactical expression in Julia, we can create different functions that handle different types with the same methods using parametric polymorphism. To do this, we just use the equal operator.", "An amazing side-effect you might not have noticed about Julia\u2019s dispatch is that all Julia functions can be universally used on any type. Consider this example:", "I want to make a type that uses the push function to add data to an array that is contained within a struct.", "The push!() function is part of Julia\u2019s Base, and in most other languages we would instead need to write an entirely new identifier specific to our module in order to avoid conflicts. This is especially true with using the standard library included with that language. However, in Julia we can just dispatch push!() to handle our type:", "Even some Julia programmers might not realize this, but syntactical expressions are responsible for the entire methodology behind how we write Julia code. In essence, using a syntactical expression we can set any expression or variable equal to any expression or variable. This is how dispatch works, as well, as all we are doing is setting a method with specific parameter types equal to a corresponding method.", "Aside from dispatch, however, there are several ways that we can use syntactical expressions. For example, we could set a method equal to an expression:", "If you\u2019d like to learn more about syntactical expressions, and learn about some cool ways to do them, I have an article all about them here:", "Julia handles concepts like metaprogramming in a really interesting way. The packages for metaprogramming, and similar concepts are typically segmented while still being included with Julia\u2019s base. This makes Julia\u2019s base take far less time to pre-compile while still being loaded with awesome features. In order to metaprogram in Julia, the two functions you should start with are Meta.parse() and eval(). Eval is contained within the Julia core, and will not need to be imported, whereas Meta is a module contained within Base.", "The first step to evaluating a meta expression is to parse it. This will turn a regular string into an expression type that eval() is able to handle.", "Okay, I get it\u2026 Parallel computing is not necessarily a \u201c feature,\u201d per se, but what is impressive about Julia\u2019s parallel computing is just how amazing of a job Julia Computing has done with it. Unlike many other languages, Julia comes with a ridiculous amount of GPU support out of the box. The core Julia language supports graphics arrays and processing that you simply cannot get anywhere else. Having parallel computing tightly integrated into Julia with types and functions specifically designed to handle it is far more powerful than in most languages where this is an afterthought. Additionally, Julia has all kinds of neat packages for parallel computing alongside industry standards like CUDA and OpenCL.", "The Julia programming language has a whole host of incredible features that definitely make using the language worth-while. With all of the unique ways to approach problems, there is rarely a time where you can\u2019t be creative to get something done in the language. On top of that, Julia comes with all of the advantages that it normally boasts, as well. These are some of my favorites, but I would be interested in knowing what other programmers love in the language, as well. (Leave a comment if you\u2019d like to share!)", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fbe51f798f140&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-most-awesome-features-be51f798f140&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-most-awesome-features-be51f798f140&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-most-awesome-features-be51f798f140&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-most-awesome-features-be51f798f140&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----be51f798f140--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----be51f798f140--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://emmettgb.medium.com/?source=post_page-----be51f798f140--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=post_page-----be51f798f140--------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-most-awesome-features-be51f798f140&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c----be51f798f140---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbe51f798f140&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-most-awesome-features-be51f798f140&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbe51f798f140&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-most-awesome-features-be51f798f140&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "http://julialang.org", "anchor_text": "http://julialang.org"}, {"url": "https://github.com/JuliaGPU", "anchor_text": "https://github.com/JuliaGPU"}, {"url": "https://towardsdatascience.com/syntactical-expressions-are-awesome-dc9ba5f25911", "anchor_text": "Syntactical Expressions Are AWESOME!Using the power of Julia\u2019s syntax to assert anything and everything.towardsdatascience.com"}, {"url": "https://github.com/JuliaGPU", "anchor_text": "https://github.com/JuliaGPU"}, {"url": "https://medium.com/tag/programming?source=post_page-----be51f798f140---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/julia?source=post_page-----be51f798f140---------------julia-----------------", "anchor_text": "Julia"}, {"url": "https://medium.com/tag/computer-science?source=post_page-----be51f798f140---------------computer_science-----------------", "anchor_text": "Computer Science"}, {"url": "https://medium.com/tag/gpu?source=post_page-----be51f798f140---------------gpu-----------------", "anchor_text": "Gpu"}, {"url": "https://medium.com/tag/macro?source=post_page-----be51f798f140---------------macro-----------------", "anchor_text": "Macro"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbe51f798f140&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-most-awesome-features-be51f798f140&user=Emma+Boudreau&userId=ea170050148c&source=-----be51f798f140---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbe51f798f140&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-most-awesome-features-be51f798f140&user=Emma+Boudreau&userId=ea170050148c&source=-----be51f798f140---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbe51f798f140&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-most-awesome-features-be51f798f140&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----be51f798f140--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fbe51f798f140&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-most-awesome-features-be51f798f140&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----be51f798f140---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----be51f798f140--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----be51f798f140--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----be51f798f140--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----be51f798f140--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----be51f798f140--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----be51f798f140--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----be51f798f140--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----be51f798f140--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://emmettgb.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "4.6K Followers"}, {"url": "https://twitter.com/emmettboudgie", "anchor_text": "https://twitter.com/emmettboudgie"}, {"url": "https://github.com/emmettgb", "anchor_text": "https://github.com/emmettgb"}, {"url": "https://ems.computer/", "anchor_text": "https://ems.computer/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-most-awesome-features-be51f798f140&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff16bf42bb45f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fjulias-most-awesome-features-be51f798f140&newsletterV3=ea170050148c&newsletterV3Id=f16bf42bb45f&user=Emma+Boudreau&userId=ea170050148c&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}