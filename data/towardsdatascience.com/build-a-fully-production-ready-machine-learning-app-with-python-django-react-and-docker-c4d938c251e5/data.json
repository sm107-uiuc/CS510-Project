{"url": "https://towardsdatascience.com/build-a-fully-production-ready-machine-learning-app-with-python-django-react-and-docker-c4d938c251e5", "time": 1683013788.8073258, "path": "towardsdatascience.com/build-a-fully-production-ready-machine-learning-app-with-python-django-react-and-docker-c4d938c251e5/", "webpage": {"metadata": {"title": "Build a fully production ready machine learning app with Python Django, React, and Docker | by Mausam Gaurav | Towards Data Science", "h1": "Build a fully production ready machine learning app with Python Django, React, and Docker", "description": "Familiarity with Python, JavaScript, HTML, CSS, and some basic Linux commands. Although I would try to explain everything as much as I can, if you have some difficulty in understanding any concept\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.postman.com/downloads/", "anchor_text": "here", "paragraph_index": 3}, {"url": "https://datagraphi.com/blog/post/2019/12/19/rest-api-guide-productionizing-a-machine-learning-model-by-creating-a-rest-api-with-python-django-and-django-rest-framework", "anchor_text": "previous article", "paragraph_index": 4}, {"url": "https://www.python.org/downloads/", "anchor_text": "download section", "paragraph_index": 8}, {"url": "https://www.postgresql.org/download/", "anchor_text": "download section", "paragraph_index": 26}, {"url": "http://127.0.0.1:8000/admin/", "anchor_text": "http://127.0.0.1:8000/admin/", "paragraph_index": 38}, {"url": "https://datagraphi.com/blog/post/2019/12/19/rest-api-guide-productionizing-a-machine-learning-model-by-creating-a-rest-api-with-python-django-and-django-rest-framework", "anchor_text": "posts", "paragraph_index": 42}, {"url": "https://github.com/MausamGaurav/PredictionAPIWithDjangoRESTDemoApp/blob/master/APIProjectFolder/Prediction/classifier/IRISRandomForestClassifier.joblib", "anchor_text": "github", "paragraph_index": 42}, {"url": "https://scikit-learn.org/stable/modules/model_persistence.html", "anchor_text": "docs", "paragraph_index": 44}, {"url": "http://www.example.com/api/...)", "anchor_text": "http://www.example.com/api/...)", "paragraph_index": 49}, {"url": "http://www.our-final-app.com/api/predict/", "anchor_text": "http://www.our-final-app.com/api/predict/", "paragraph_index": 51}, {"url": "http://127.0.0.1:8000/api/predict/", "anchor_text": "http://127.0.0.1:8000/api/predict/", "paragraph_index": 53}, {"url": "http://localhost:8000/api/predict/", "anchor_text": "http://localhost:8000/api/predict/", "paragraph_index": 53}, {"url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS", "anchor_text": "CORS", "paragraph_index": 77}, {"url": "https://github.com/adamchainz/django-cors-headers", "anchor_text": "page", "paragraph_index": 85}, {"url": "https://nodejs.org/en/download/", "anchor_text": "official site", "paragraph_index": 87}, {"url": "https://classic.yarnpkg.com/en/docs/install", "anchor_text": "yarn", "paragraph_index": 88}, {"url": "http://127.0.0.1:3000.", "anchor_text": "http://127.0.0.1:3000.", "paragraph_index": 90}, {"url": "https://datagraphi.com/blog/post/2020/1/25/hands-on-guide-to-key-concepts-of-react-js", "anchor_text": "article which I had previously written", "paragraph_index": 91}, {"url": "https://material-ui.com/", "anchor_text": "Material UI", "paragraph_index": 92}, {"url": "https://material-ui.com/", "anchor_text": "Material UI", "paragraph_index": 94}, {"url": "http://127.0.0.1:3000/", "anchor_text": "http://127.0.0.1:3000/", "paragraph_index": 104}, {"url": "https://redux.js.org/basics/reducers", "anchor_text": "official guide", "paragraph_index": 118}, {"url": "https://material-ui.com/components/slider/", "anchor_text": "material-ui.com", "paragraph_index": 144}, {"url": "https://datagraphi.com/blog/post/2020/8/30/docker-guide-build-a-fully-production-ready-machine-learning-app-with-react-django-and-postgresql-on-docker", "anchor_text": "https://datagraphi.com/blog/post/2020/8/30/docker-guide-build-a-fully-production-ready-machine-learning-app-with-react-django-and-postgresql-on-docker", "paragraph_index": 156}], "all_paragraphs": ["Familiarity with Python, JavaScript, HTML, CSS, and some basic Linux commands. Although I would try to explain everything as much as I can, if you have some difficulty in understanding any concept please refer to the official documentation of Django, React, Docker, or any other documentation as necessary.", "You would need to have Python, Node, Postgres and Docker installed on your system. Python and Node come with their default package managers i.e. pip and npm respectively. I would use these package managers for this article, but feel free to use any other package manager which works for you. For this article, I used Python 3.7.4, Node 12.16.2, Postgres 12.3, and Docker 19.03.12. Docker was installed as the Docker Desktop version which comes pre-packaged with docker-compose, version 1.26.2 in my case.", "I used VS Code as my editor as this is a free editor with many features and a built-in terminal which comes very handy for our use case. Again feel free to use an editor of your choice.", "For this project, as you would also see, later on, we would be creating REST APIs. To test the APIs we create, you would need to install Postman. You can get it from here.", "We are going to create a simple machine learning application with Django REST framework, which predicts the species of a sample flower based on measurements of its features i.e. the sepal and petal dimensions \u2014 length and width. We have already covered this is in great detail in a previous article. Please familiarize your self with that article. We would use the same Django application here and make some modifications as required. In the previous article, the Django application was connected with a SQLite database. For this article, however, we would use Postgres as our database, as Postgres is better suited for production builds. Django comes packaged with a great admin dashboard. With the admin dashboard, we can register users to our application, who can then interact with our machine learning application to make predictions. Our Django application thus would serve the purpose of our backend and admin tasks.", "Once a user has been created, they would be able to login to a portal \u2014 the frontend, and interact with our machine learning model running on the backend through REST APIs. The user would be able to perform two things:", "The Docker part is optional. If you are interested only in knowing how to integrate Django and React together to create a simple but robust machine learning app, you may skip this section in the article.", "The reason we would use docker is not only because this is pretty much the standard for productionising applications, but also, as you would see, that it allows to seamlessly integrate all our developed work in a single docker workflow which is platform-independent and allows making deployments much easier with simple docker commands, in contrast to running individual applications with multiple commands. We would also add Nginx to our docker workflow which would allow us to serve both our Django and React applications running within Docker containers.", "Ensure you have Python 3.7 + installed in your system. Check the official Python download section if possible.", "Create an empty project folder called \u2018DockerDjangoReactProject\u2019. Open a terminal, navigate to this folder, type \u2018code .\u2019,", "and hit enter. This would open VS Code with this folder set as the project/work folder.", "We would first create a local python environment to store all python packages required for our backend app within this environment. There are a few different ways to create a Python environment. Here we would use the \u2018virtualenv\u2019 method. First, ensure you have the \u2018virtualenv\u2019 package installed in your base Python install. If not, install it by performing \u2018pip install virtualenv\u2019.", "Next, create your local python environment with \u2018virtualenv\u2019 as below. Again, you may need to prefix the below with \u2018python3 -m\u2019 as required.", "Activate your python environment as below with \u2018localPythonEnv\\Scripts\\activate\u2019. Note that I am using windows, and the equivalent command on Linux and Mac is \u2018source localPythonEnv/bin/activate\u2019. Once the environment has been activated you do not need to prefix any python command with \u2018python3 -m\u2019.", "Create a requirements.txt file within our project folder, which contains the below information about all Python packages we need for our project. You may omit the version numbers from the below to get the latest packages instead:", "From within the project folder, perform the below command to install all of these packages in our local Python environment.", "Create a new folder called backend within our DockerDjangoReactProject folder.", "From within the backend folder create a new Django project by running the below command. We would call our Django project mainapp.", "By default, when Django creates a project it then creates an app within the project folder with the same name as the project.", "That is why we are calling our app mainapp from the beginning so that when we go inside the project folder which has other apps as well, we know which the main app is. Now rename the outer mainapp folder to just 'django_app'.", "So finally our folder structure within the backend folder should look like below:", "Navigate to the django_app folder from the command line", "and create a new Django app by performing the below.", "You would see that a new app has been created side by side the \u2018mainapp\u2019.", "The \u2018mainapp\u2019 is, as the name suggests, the main app which would serve our Django application. However, all other functionality would be performed by other custom apps we create, such as the prediction app in our case. We would add another app called \u2018users\u2019 later on.", "Open the settings.py file in the mainapp folder. Add our new app \u2018prediction\u2019 in the installed apps section at the bottom.", "Ensure that you have PostgreSQL 12+ installed. Check the official PostgreSQL download section if possible. I used the pgAdmin which comes with official windows download, to create a new empty database called \u2018predictiondb\u2019. Note that the first time pgAdmin opens up in your browser you would need to specify a default user and password. You may add \u2018postgres_user\u2019 as the user and \u2018postgres_password\u2019 as the password.", "Create a file called local_settings.py in our mainapp folder.", "This would be used to override some of the settings.py file settings. Open the settings.py file and add the following at the very end.", "Now we would provide our PostgreSQL connection settings in the local_settings.py file. Open the local_settings.py file and add the following information:", "As you could see in the above settings, the \u2018NAME\u2019 attribute is the name of your database, while the \u2018USER\u2019 and \u2018PASSWORD\u2019 would need to be the same you would have used while setting up pgAdmin or PostgreSQL on your system.", "At this point, we need to migrate our existing schema to a database. This is because normally within Django, we create data models to interact with databases. Although at this point we have just added only one app, prediction, and not defined any data model, if you go to the INSTALLED_APPS section in the settings.py file, you would see that a number of default apps already exist. Some of these pre-installed apps already have their models (or schemas defined). So that our django_app schema/models are consistent with the database we need to perform a migration first before going further.", "Ensure that you are in the django_app folder and the local Python environment is activated. Perform python manage.py migrate.", "If your local database can correctly connect to your django_app then you should see messages such as below in your terminal.", "Next, we are going to create a superuser/admin for our project. This is so that the superuser can log in to an admin dashboard, monitor the project and add users as we would see later on. Run the command \u2018python manage.py createsuperuser\u2019. This would ask you for user details and password. Provide them and press enter every time.", "Once the superuser has been created, the terminal would display \u2018Superuser created successfully. \u2018 in the end. Note that this superuser information would be stored in the PostgreSQL database we created earlier. This is why we needed to perform the migration before-hand so that our django_app data model for the users is in-sync with a users table within the PostgreSQL server.", "From the django_app folder run the command \u2018python manage.py runserver\u2019.", "If you followed the above steps correctly, you would see a message similar to the following in the command line.", "If you go to the http://127.0.0.1:8000/admin/ route, you would see an admin panel as shown below. You can log in to the admin view with the superuser name and password you created earlier. That superuser is the admin for our Django application.", "Upon logging in you would be able to see the below.", "Click on the + Add Users. You would see that as the admin of the django_app you can add users very easily.", "Press Ctrl+C on your terminal and close the django_app running server.", "We already created our prediction machine learning model in one of our previous posts. You may refer to the article to see how the machine learning model was created. Create a folder called \u2018mlmodel\u2019 in the prediction app folder. Copy the file \u2018IRISRandomForestClassifier.joblib\u2019 which we created in our previous post to this \u2018mlmodel\u2019 folder. For your convenience, the file is stored here on github.", "Edit the apps.py file in the prediction app folder so that it looks like below:", "The reason we are loading the ml model in our apps.py file is that in this manner the classifier is loaded only once, when a session connection is made to our Django application, reducing overhead. We are loading the trained and saved classifier back into memory with the \u2018joblib\u2019 load method as suggested by the official scikit-learn docs.", "Next, we are going to create an API view in our prediction app. Since we are going to create REST APIs with the help of the Django Rest Framework which we installed earlier through the requirements.py file, be sure to add \u2018rest_framework\u2019 as an app in the settings.py file.", "Now, edit the views.py file in our prediction app folder such that it looks like below:", "So we have created a class-based view \u2018IRIS_Model_Predict\u2019 which inherits from the default APIView of django rest_framework. Basically this view takes JSON input data from a URL request(which we would define below), processes the data and makes prediction from the loaded machine learning model defined in the apps.py file.", "Next, we need to define the routes for our backend application. One of the routes, the admin route, you have just seen above which takes you to the admin view. Open the urls.py file in the mainapp folder. Make changes so that the urls.py file looks like below.", "So basically we are saying that any route starting with /api/ (such as http://www.example.com/api/...) should take us to prediction.urls file which would contain the remainder of the route.", "To define the remainder of the route, create a urls.py file in the prediction app folder. The file should contain the below.", "This is saying that we are adding \u2018predict\u2019 to the URL path /api/ so that if we make api URL requests such as http://www.our-final-app.com/api/predict/ we would be taken to the IRIS_Model_Predict view, from which we should get a predicted response back for a sample iris flower data sent along with the request.", "Restart our django_app server by performing \u2018python manage.py runserver\u2019 as before.", "Open Postman to make a new POST request. Since our django_app is running on the local server we would be making an API request to either http://127.0.0.1:8000/api/predict/ or http://localhost:8000/api/predict/. We would be sending the below sample iris flower data as JSON to make a prediction.", "Make the request from Postman as below. The JSON sample flower data should be sent in the Body->raw->JSON format.", "You would see that the loaded machine learning model predicted the flower species for the sample as \u201csetosa\u201d.", "This means that our prediction API is working correctly.", "Although our prediction API is working correctly, in a real-world situation we would want to restrict access to API requests made to our application to registered users only. Therefore we want to add functionality, where registered users can be authenticated. The way this would work in our case is as below:", "To create the login view as described above, and to return tokens upon login we would use a package called django-rest-auth which we already installed with the requirements.py file before.", "In our installed apps in settings.py add \u2018rest_framework.authtoken\u2019 and \u2018rest_auth\u2019 as applications as shown below:", "We then need to migrate our app schemas for the newly added apps to the database with \u2018python manage.py migrate\u2019.", "This would create a new table called \u2018authtoken_token\u2019 in our database. You can see this from pgAdmin.", "You could also see the same table in the Django admin view. This table would store the tokens created for all the users and delete them whenever a user logs out.", "Now we need to create an app called \u2018users\u2019 within our django_app which can handle user login/logout through REST APIs, return a token upon login and expire a token upon logout. Luckily all of this would be very easy to handle because we already installed the django-rest-auth. However, we need to create our \u2018users\u2019 app first. Stop the django_app server if it is running and run the below command:", "Like before add \u2018users\u2019 as an installed app in the INSTALLED_APPS section in the mainapp.settings.py file. Note that we have re-arranged the list below so the prediction and users are both at the bottom.", "Open the views.py file in the users folder.", "Modify the file to look like below.", "So essentially we are just going to use the LoginView from rest_auth as it is and for logout, we ensure that only the user who is logged in is able to log themselves out by authenticating with the token they received while logging in. This is what the authentication and permission classes in the APILogoutView do. Now we need to do one more thing before testing our API login and logout views. We need to actually define the API URL requests to perform the login and logout (views). Just like before add the line \u2018path(\u2018api/auth/\u2019, include(\u2018users.urls\u2019))\u2019 to the urls.py file in the \u2018mainapp\u2019. Note that we would need to add this line above the previous \u2018path(\u2018api/\u2019, include(\u2018prediction.urls\u2019))\u2019 line. This is so that Django doesn\u2019t get confused and sent everything starting with \u2018api\u2019 to the prediction app. So, the urls.py file in the \u2018mainapp\u2019 should look like below.", "Just like before, create a urls.py file in the users app and put the below code in the urls.py file.", "Now with the URLs and views created, we should be able to test our API login and logout views through Postman. If everything was set up correctly we should be able to get a token back from the server once we log in. Restart the django_app server and open Postman. Now make a post request to \u2018http://127.0.0.1:8000/api/auth/login/' with the superuser login details you created as the request data as shown below. Note: in the screenshots below and onwards I would be using \u2018sample_user\u2019 as the user for demo.", "You should be able to get a token as the response as shown above. If you go to the admin portal, you would be able to see the token for the user.", "This means that our login API is working correctly. Now we need to check the logout API. Open a new tab in Postman and add a post request to \u2018http://127.0.0.1:8000/api/auth/logout/'. In the headers tab, add a new key called \u2018Authorization\u2019 with the value as Token followed by the token you received earlier.", "Hit send and you should see a message.", "If you now go to your admin panel and refresh, you would see that the token has been removed from the server.", "Now we need to add this authentication functionality to our REST API prediction view so that only registered users can perform the prediction. This is really simple. Just add the below lines to our IRIS_Model_Predict view.", "So, the views.py in our prediction app would look like below.", "This is because you now need to first log in, receive a token and then send that token for authentication along with the prediction API request. Since, you have logged out, log in with Postman again and provide the newly received Token as an Authorization header along with the JSON iris flower data for making the request.", "So we have added authentication to our prediction REST API. Now before we go to the front-end, we need to do a few more things. First, we need to add a password update feature using REST APIs. Secondly, we need to enable Cross-Origin Resource Sharing (CORS) so that our front-end can make a request to our back-end while running on the same physical server.", "In the users.views.py file import \u2018PasswordChangeView\u2019 from \u2018rest_auth.views\u2019 and create the \u2018APIPasswordUpdateView\u2019 class as below. We only need to add the \u2018TokenAuthentication\u2019 as an authentication method this time. The users.views.py file would look like below.", "Now we need to define the URL route for the API. Open the users.urls.py file and change it as below.", "Now we can test this with Postman as shown below. Do not forget to provide our authentication token in the Authorization header as before. And in the body, we need to provide our new password two times with the fields \u2018new_password1\u2019 and \u2018new_password2\u2019.", "Note that this time we are using the form-data fields in Postman to send the data, rather than the JSON format used before. If everything works you would see the message.", "If we don\u2019t add CORS then we won\u2019t be able to make REST API calls to our Django Application from the React frontend running on our local machine and also when we set up Docker for our production environment. To add CORS, we need to install a package called \u2018django-cors-headers\u2019 which we have already installed with our requirements.txt file before. We need to add \u2018corsheaders\u2019 as an installed app in the mainapp.settings.py file (below rest_auth).", "Just below the installed apps section, you would need to modify the MIDDLEWARE as below, i.e. we have to the cors middleware at the very top:", "Open the local_settings.py file and add the below at the bottom.", "That\u2019s it, we have set up CORS for our Django application. You may change the settings for more advanced options by referring to the official developer page. But for now, we should be good to go.", "Now onwards to our front-end React application \ud83c\udf7a!!", "Ensure that you have Node installed on your system. If not, download it from the official site and install it. Create a new folder called frontend within our DockerDjangoReactProject folder. From the terminal cd into the frontend folder. We are going to create a new project/app called react_app. Enter the below code, \u2018npx create-react-app react_app\u2019, from the terminal.", "The above would take some minutes to complete, as node would download a number of packages to create the app which we are calling react_app. Therefore I would advise that you take a small break until the process finishes. If you face issues with npx, you may use yarn instead to create our frontend app. To use yarn, install yarn, and perform the below.", "When the react_app has been created, cd into the react_app folder and perform \u2018npm start\u2019.", "This would start the development server at http://127.0.0.1:3000. You can open the server index page at this URL and you would see something like below in your browser.", "If you want to learn some basic concepts of React, then you may refer to this article which I had previously written. But in this current article, we would only discuss what is required.", "We can take a similar approach to our django_app in the react_app, where we first create the views and then define the URLs which would take us to these views. First, we would create our Login view. Create a new folder inside our src folder called \u2018components\u2019. Create a new file called \u2018Login.js\u2019 inside the \u2018components\u2019 folder. I would be using a package called Material UI to create my components. This is because Material UI already contains some very well designed components and we could use them directly. Install material UI as below.", "Note that whatever packages we are installing would need to be installed from within the react_app folder. Once installed you could see these packages in the \u2018package.json\u2019 file. You may also use yarn if npm was creating some issues for you.", "Once material UI has installed go the website of Material UI, on the left-hand side-bar you would find the templates sub-section under the \u2018Getting Started\u2019 section. On the templates page, you would find the link to the source code of a sign-in template.", "Copy the code and paste it into the Login.js file we just created. We would make further modifications to our template page. But first, we need to create the routes/URLs to take us to this login page so that we can view this in our browser. We would need to install a package called \u2018react-router-dom\u2019, install it by doing either of the below.", "Create a new file called \u2018Urls.js\u2019 in the \u2018src\u2019 folder at the same level at the App.js file. The Urls.js file should contain the below.", "So basically what this is saying that if the browser route has the exact path \u2018login\u2019 in that case the Urls.js should return the Login view from the \u2018Login.js\u2019 file.", "To see this in action open the App.js file in the src folder and make the below modifications.", "Also, remove all unnecessary files in the src folder which were previously used by App.js or index.js \u2014 App.css, logo.svg, index.css. Remove the line \u2018import \u2018./index.css\u2019;\u2019 from index.js.", "Now if you got to \u2018http://localhost:3000/login' from your browser you would see the login page is displayed.", "This means that our basic route/URL and view setup is working in the React frontend. We need to remove the \u2018Remember me\u2019, \u2018Forgot password?\u2019 and \u2018Don\u2019t have an account? Sign Up\u2019 components from the Login view. In the Login.js file, remove the following.", "We also need a user name field instead of an email field. Also, change the name of the default export function to Login from the previous \u2018SignIn\u2019 and remove the Copyright function at the top and the reference to it inside the Login function. The Login.js file should look like below.", "So the browser login page would look like below.", "Before going any further let us also add a home view. This is so that once a user has logged in, he is redirected to a home page. At this point, if you go to the home page at http://127.0.0.1:3000/ you would just see a blank page. This is because we modified our App.js before to only add a view for a single URL route \u2014 the login route. Go the material UI website -> Components -> App Bar and copy the code for the \u2018Simple App Bar\u2019. Inside our components folder create a file called \u2018TopBar.js\u2019 and paste the copied code inside it. Now create a file called Footer.js inside the components folder with the below content.", "Now create another file inside the components folder called \u2018 Layout.js\u2019. The Layout.js should contain the below code.", "We would use the Layout.js page to layout our home page. Note that for our simple application using a layout is simply an over-kill. However, I still wanted to demonstrate it as it is considered a good design principle to design different pages of a website using a layout. So basically the way the layout would work is that we would pass an individual component representing the body of a web page as props to the Layout function and the Layout would add a TopBar at the top of that page and a footer at the bottom. As simple as that !! The interesting bit in the Layout function is the \u2018props.children\u2019. This is what would retrieve the content of the page passed as props to the Layout function and display it in between the TopBar and the Footer.", "Now create a simple Home page which would just display the text Home Page at the moment. The Home.js file inside components should look like below.", "Now we need to create the URL route for our home page just as we did for the login page. Modify the Urls.js file in the src folder as below.", "If you go to the home URL in your browser you would see the text", "displayed but you wouldn\u2019t see the TopBar and the Footer. To use the layout as discussed above, i.e. see both TopBar and the Footer, modify the App.js file as below.", "After making the above change in App.js, if you go to the home page you would see the below. Note that in the above the Urls component is passed to the Layout component which renders anything returned by the Urls component with the props.children as discussed before.", "If you again go the login page you would see that the Login page has the TopBar and Footer applied as well.", "Cool ! this is what we wanted. As you could see that our layout is working correctly.", "Change the News text in the TopBar.js component to be \u2018Iris Species Predictor\u2019. Also, remove the menu icon button on the left as we want our app to be as simple as possible.", "We are going to define a settings.js file just as we have in the \u2018mainapp\u2019 in our django_app. The file just defines some basic settings variables \u2014 API_SERVER and the SESSION_DURATION. The API_SERVER defines the URL at which our django_app backend is running. This URL would be different for the development and production environments, as in production we would be hosting our app on a cloud server. Therefore instead of changing it within the actual code, we are defining a settings file, where we can change the values really easily. The other environment variable SESSION_DUARTION defines the time after which the user is automatically logged out from the browser. The setting.js file should be created in the src folder with the below content.", "At this point, we have added a basic route and template view for user login. To add real login functionality we would need to make an API call to our backend to authenticate. Also, we would need to store the API token after successful login in the browser, so that, once a user has logged in, they can use this API key for making further requests to our backend. We are going to use Redux to accomplish this. For all of these, we would need to install the following packages. Just like before perform either of the below.", "Redux in React can be a bit tricky at first. I won\u2019t go in much detail but simply describe the basic philosophy here. Normally in React, components have State. Class-based components, by definition, have state associated with them. It is also possible to define the state for functional components with React Hooks like useState(). Therefore, components have individual states. If we wanted to pass the state of one component to another component then we could do that with props. These props can get really complicated if we have a number of components dependent on the same state variables. Therefore we wanted to have something like a global state. There are many ways of achieving this in React such as React Context. However, generally by design Context was designed to simplify passing props. Redux is another, but more widely accepted way of creating a global state for an application. In Redux we have the concept of Store which is further represented by three basic concepts:", "You may go through the official guide to understand these in detail, but in essence, the philosophy of Redux in React is really simple:", "Whenever an Action is dispatched, the Reducer makes changes to the state objects in the Store. The Store is the object that brings the actions, reducers and the state objects together.", "Let\u2019s begin by creating the store for our application. Create a folder called \u2018store\u2019 in our src folder. In the store-folder create a file called \u2018authActionTypes.js\u2019 with the below content. This defines the action types.", "Create another file in the store-folder called \u2018authActions.js\u2019 with the below content. If you read the comments below, what these auth actions do, are quite self-explanatory. Also please note that in some of the functions below, we are using \u2018axios\u2019 to make rest API calls to our backend. Further the \u2018localStorage\u2019 stores information in the browser namely the retrieved token and expiration time. You might ask why we are using the localStorage of the browser when we already are going to use to a Redux store, to store global variables. This is because the Redux store would only be available per tab or per session in the browser. Once a user closes the app on one of the tabs, the store would not exist. That is this store would only exist in the memory. That is why we are using localStorage so that once a user has logged in, they are not required to login to the app on every tab. There are some other ways to accomplish this such as redux-persist, but for simplicity, we are just going to use the localStorage. The other reason is that we don\u2019t only want the global state but also some of the dispatch(action)s of the Redux store to be available globally.", "So we have defined the action types, action functions and some functions which return a dispatch(action) combination. Now we want to define the reducer. The reducer is what actually defines our application global state and the methods to change these states. The official documentation defines a reducer as below.", "The reducer is a pure function that takes the previous state and an action, and returns the next state.", "As you would see below the reducer is a fairly simple definition of our initial state and the methods to change these state whenever an action is dispatched to the store. An example of an action dispatched to a store could be:", "Now let us define our reducer which would change the global state variables depending upon the action dispatched. Create a file called \u2018authReducer.js\u2019 in our store-folder with the below content.", "Hereby we have created our Redux store. Our application src should look like below.", "With all our important pieces setup, we are ready to implement the login functionality! We now need to tell our application to use the above redux store. The entry point of our application is the index.js page. Open the index.js file and modify it so that it looks like below.", "As you could see, we import the authReducer we created before and then create the redux store. This redux store is then made available to all components of our application (including the main App component!) by wrapping the App component with the Provider wrapper in the entry-point index.js file.", "From here on our individual components can access this global store with the connect higher-order wrapper and two custom functions \u2014 mapStateToProps and mapDispatchToProps. Example of the App component is shown first. Modify the App.js file as below. Below, in our App component, when the App is first loaded, we want to dispatch the authCheckState() function (i.e. \u2014 check whether a token already exists in the browser and the token has not expired. If so we would want to dispatch the \u2018authSuccess\u2019 action to the store, which would basically update the Redux state to reflect the user is authenticated. If not, the Redux state would be changed to reflect that the user is logged out). Also, three custom objects are derived from the Redux store \u2014 isAuthenticated, token and the logout function \u2014 which are then passed down as props to all other components.", "Next, we would connect the Login component with the Redux store to use some further Redux store objects which were not passed down from the App component as props. Modify the Login.js file as below.", "In the above the following changes were made.", "Note that in the above we don\u2019t need a mapStateToProps as we don\u2019t need any other Redux store state variable. Hence instead of the \u2018mapStateToProps\u2019 function, we are just passing null to the connect wrapper at the bottom. We do, however, need the dispatch authLogin function so we are using the \u2018mapDispatchToProps\u2019 function. Further in the Login functional component, we define state with the \u2018useState\u2019 hook. The component states username and password are updated with the onChange={handleFormFieldChange} clause and the \u2018handleSubmit\u2019 arrow function is invoked when the user submits the form.", "To verify whether our login functionality is working with the Redux store, you would need to install the \u2018Redux DevTools \u2018 extension for Chrome. Open the frontend login page and ensure the Redux DevTools extension is working. Also, ensure that both the Django server and the PostgreSQL service is running on your system. You should now try to login with the superuser or any other user you created with the Django backend. If everything was set up properly you would see the Redux authentication dispatch actions in the Redux DevTools extension similar to the below.", "If you click on the state tab, you would also see the global state variables in the auth Redux store as below.", "You could also check the local storage in your browser and you would see that our authentication token and the expiration time (+5 hours from login in our case as per the settings.js file) has been set up as well.", "Fantastic!! Looks like our Redux store for authentication is working perfectly.", "To redirect to the home page once authenticated (or actually the previous page as normally happens in most web applications) modify the Login.js component as below. With the useEffect, we ensure that as soon as the user is authenticated they are redirected to the previous page.", "After making the above page, if you authenticated already as in the previous section and the Login page was left open, you would see that you already have been redirected to your home page.", "In addition to the above, there is another functionality that we want. We also want that if a user is not authenticated and tries to open the home page or any other page of our application, the user is redirected to the login page. To accomplish this, the Urls.js file in our src folder should be changed as below.", "Make the following change in the TopBar.js file. Basically we want to display a logout button if the user is authenticated, else display nothing (because if the user is not authenticated they would already be on the login page as per the second functionality change we made in the last section).", "Awesome !! You can now hit the logout button and see the logout in action in the Redux DevTools extension.", "Okay so much just to get the authentication working. However, the good thing is that we covered one of the trickiest React concepts, Redux, in a structured manner and hopefully this would help you in a number of other projects.", "Without further ado, let\u2019s create the user interface to interact with our machine learning model. This user interface would appear on the home page. So, as soon as the user is redirected to the home page after login, they would see this interface. Modify the Home.js file to look like below.", "The code is pretty much self-explanatory. We have created four sliders using a custom slider created using the Material UI theme. This may appear complicated but actually is not. As all of this has been taken from the official Slider examples from material-ui.com. You may refer to these examples. We have created two functional component state variables with the React hook, useState. The \u2018dimension\u2019 state variable is an object while the \u2018prediction\u2019 is just a string. When the user changes the sliders the dimension state variable is updated using the spread operator. When the user hits the \u2018PREDICT\u2019 button, a post API call is made to the predict REST API we created earlier. If the API call is made successfully the predicted IRIS species is displayed to the user. If an error occurs, that is displayed as an alert. The prediction user interface would look like below in the browser.", "After entering the flower dimensions using the sliders, you can press the \u2018PREDICT\u2019 button and see the prediction in action!", "Before we go to the Docker section, we need to do one last thing \u2014 add the password update functionality. First, we need to create the PasswordUpdate view. Create a new file called \u2018PasswordUpdate.js\u2019 in the components folder. I just copied the Login.js file, renamed it to PasswordUpdate.js and made some changes to create this view. The content of this file is shown below.", "So in this view, there are two password text fields. As before the state variables have been added using useState for these fields. Once the user makes changes to any of these fields, if the fields don\u2019t match the error attribute of the fields would become active. Also, the helper text below the field would show that the passwords didn\u2019t match in red. When the user hits submit, in the handleSubmit function, if the passwords are still not matching this would display an alert to the user. If the passwords are the same, then the handleSubmit function would make a post API call to the REST API password update URL. If the server sends an OK response, then the success state variable, also created using useState, would become true. If the success state is true, our PasswordUpdate component would display a message, \u2018Password update successful!\u2019 at the top.", "To see all of this in action let\u2019s create the URL route which would take us to the view. In the Urls.js file make the below changes.", "The final Urls.js file would look like below.", "Also, change the TopBar.js file so that we can see two more buttons at the top right, one of which would take us to the PasswordUpdate view and the other one to our home page. We are also adding the home page button because, after the password update, the user can then click this button to return to the home page. The TopBar.js would look like below.", "Now time to see our Password Update in action. Click the \u2018Update Password\u2019 button from the Top Bar which would now appear following the above changes.", "On the password update page, if your passwords don\u2019t match you would see the error similar to below.", "If you entered both the passwords as same and the server returned a status code of 200 (OK) upon pressing the \u2018UPDATE PASSWORD\u2019 button, you would see something like below.", "You may now click the home button on the Top Bar to return to your home page and do any more predictions you wanted.", "So there you go. We have created a simple and elegant machine-learning prediction interface for our end-users using React \ud83c\udf7a! Now onwards to wrapping our machine learning application in Docker \ud83c\udf7a\ud83c\udf7a!!", "The Docker part of the article is on my wesbite, here \u2014 https://datagraphi.com/blog/post/2020/8/30/docker-guide-build-a-fully-production-ready-machine-learning-app-with-react-django-and-postgresql-on-docker, where I originally created this article. Hope you enjoy that as well \ud83c\udf7a!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Building technology at a challenger European bank | AI and emerging tech advocate | Engineer | Artist \u2b50Follow me for more content.\u2b50"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fc4d938c251e5&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-fully-production-ready-machine-learning-app-with-python-django-react-and-docker-c4d938c251e5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-fully-production-ready-machine-learning-app-with-python-django-react-and-docker-c4d938c251e5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-fully-production-ready-machine-learning-app-with-python-django-react-and-docker-c4d938c251e5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-fully-production-ready-machine-learning-app-with-python-django-react-and-docker-c4d938c251e5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----c4d938c251e5--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c4d938c251e5--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@mausam.gaurav?source=post_page-----c4d938c251e5--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@mausam.gaurav?source=post_page-----c4d938c251e5--------------------------------", "anchor_text": "Mausam Gaurav"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc88cf90afe62&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-fully-production-ready-machine-learning-app-with-python-django-react-and-docker-c4d938c251e5&user=Mausam+Gaurav&userId=c88cf90afe62&source=post_page-c88cf90afe62----c4d938c251e5---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc4d938c251e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-fully-production-ready-machine-learning-app-with-python-django-react-and-docker-c4d938c251e5&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc4d938c251e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-fully-production-ready-machine-learning-app-with-python-django-react-and-docker-c4d938c251e5&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@victor_g?utm_source=medium&utm_medium=referral", "anchor_text": "Victor Garcia"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://www.postman.com/downloads/", "anchor_text": "here"}, {"url": "https://datagraphi.com/blog/post/2019/12/19/rest-api-guide-productionizing-a-machine-learning-model-by-creating-a-rest-api-with-python-django-and-django-rest-framework", "anchor_text": "previous article"}, {"url": "https://www.python.org/downloads/", "anchor_text": "download section"}, {"url": "https://www.postgresql.org/download/", "anchor_text": "download section"}, {"url": "http://127.0.0.1:8000/", "anchor_text": "http://127.0.0.1:8000/"}, {"url": "http://127.0.0.1:8000/admin/", "anchor_text": "http://127.0.0.1:8000/admin/"}, {"url": "https://datagraphi.com/blog/post/2019/12/19/rest-api-guide-productionizing-a-machine-learning-model-by-creating-a-rest-api-with-python-django-and-django-rest-framework", "anchor_text": "posts"}, {"url": "https://github.com/MausamGaurav/PredictionAPIWithDjangoRESTDemoApp/blob/master/APIProjectFolder/Prediction/classifier/IRISRandomForestClassifier.joblib", "anchor_text": "github"}, {"url": "https://scikit-learn.org/stable/modules/model_persistence.html", "anchor_text": "docs"}, {"url": "http://www.example.com/api/...)", "anchor_text": "http://www.example.com/api/...)"}, {"url": "http://www.our-final-app.com/api/predict/", "anchor_text": "http://www.our-final-app.com/api/predict/"}, {"url": "http://127.0.0.1:8000/api/predict/", "anchor_text": "http://127.0.0.1:8000/api/predict/"}, {"url": "http://localhost:8000/api/predict/", "anchor_text": "http://localhost:8000/api/predict/"}, {"url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS", "anchor_text": "CORS"}, {"url": "https://github.com/adamchainz/django-cors-headers", "anchor_text": "page"}, {"url": "https://nodejs.org/en/download/", "anchor_text": "official site"}, {"url": "https://classic.yarnpkg.com/en/docs/install", "anchor_text": "yarn"}, {"url": "http://127.0.0.1:3000.", "anchor_text": "http://127.0.0.1:3000."}, {"url": "https://datagraphi.com/blog/post/2020/1/25/hands-on-guide-to-key-concepts-of-react-js", "anchor_text": "article which I had previously written"}, {"url": "https://material-ui.com/", "anchor_text": "Material UI"}, {"url": "https://material-ui.com/", "anchor_text": "Material UI"}, {"url": "http://127.0.0.1:3000/", "anchor_text": "http://127.0.0.1:3000/"}, {"url": "https://redux.js.org/basics/reducers", "anchor_text": "official guide"}, {"url": "https://material-ui.com/components/slider/", "anchor_text": "material-ui.com"}, {"url": "https://datagraphi.com/blog/post/2020/8/30/docker-guide-build-a-fully-production-ready-machine-learning-app-with-react-django-and-postgresql-on-docker", "anchor_text": "https://datagraphi.com/blog/post/2020/8/30/docker-guide-build-a-fully-production-ready-machine-learning-app-with-react-django-and-postgresql-on-docker"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----c4d938c251e5---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/python?source=post_page-----c4d938c251e5---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/django?source=post_page-----c4d938c251e5---------------django-----------------", "anchor_text": "Django"}, {"url": "https://medium.com/tag/react?source=post_page-----c4d938c251e5---------------react-----------------", "anchor_text": "React"}, {"url": "https://medium.com/tag/docker?source=post_page-----c4d938c251e5---------------docker-----------------", "anchor_text": "Docker"}, {"url": "http://creativecommons.org/licenses/by/4.0/", "anchor_text": "Some rights reserved"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc4d938c251e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-fully-production-ready-machine-learning-app-with-python-django-react-and-docker-c4d938c251e5&user=Mausam+Gaurav&userId=c88cf90afe62&source=-----c4d938c251e5---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc4d938c251e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-fully-production-ready-machine-learning-app-with-python-django-react-and-docker-c4d938c251e5&user=Mausam+Gaurav&userId=c88cf90afe62&source=-----c4d938c251e5---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc4d938c251e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-fully-production-ready-machine-learning-app-with-python-django-react-and-docker-c4d938c251e5&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c4d938c251e5--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fc4d938c251e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-fully-production-ready-machine-learning-app-with-python-django-react-and-docker-c4d938c251e5&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----c4d938c251e5---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----c4d938c251e5--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----c4d938c251e5--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----c4d938c251e5--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----c4d938c251e5--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----c4d938c251e5--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----c4d938c251e5--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----c4d938c251e5--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----c4d938c251e5--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@mausam.gaurav?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@mausam.gaurav?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Mausam Gaurav"}, {"url": "https://medium.com/@mausam.gaurav/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "75 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc88cf90afe62&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-fully-production-ready-machine-learning-app-with-python-django-react-and-docker-c4d938c251e5&user=Mausam+Gaurav&userId=c88cf90afe62&source=post_page-c88cf90afe62--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F3c5c3c4276ab&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-fully-production-ready-machine-learning-app-with-python-django-react-and-docker-c4d938c251e5&newsletterV3=c88cf90afe62&newsletterV3Id=3c5c3c4276ab&user=Mausam+Gaurav&userId=c88cf90afe62&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}