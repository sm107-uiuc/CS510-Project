{"url": "https://towardsdatascience.com/spotify-sentiment-analysis-8d48b0a492f2", "time": 1683007744.101513, "path": "towardsdatascience.com/spotify-sentiment-analysis-8d48b0a492f2/", "webpage": {"metadata": {"title": "Spotify Sentiment Analysis. Applying sentiment analysis to song\u2026 | by Lowri Williams | Towards Data Science", "h1": "Spotify Sentiment Analysis", "description": "Have you ever wondered what kind of data surrounds the music you listen to? So many different music apps are applying sophisticated data science and machine learning techniques to our music data and\u2026"}, "outgoing_paragraph_urls": [{"url": "https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/", "anchor_text": "data", "paragraph_index": 1}, {"url": "https://www.musixmatch.com/lyrics/Prince/When-Doves-Cry", "anchor_text": "song lyrics", "paragraph_index": 5}, {"url": "https://spotify-sentiment-analysis.herokuapp.com/", "anchor_text": "where it\u2019s hosted", "paragraph_index": 10}, {"url": "https://developer.spotify.com/dashboard/", "anchor_text": "Spotify for Developers", "paragraph_index": 38}, {"url": "http://127.0.0.1:5000/spotify_sentiment_analysis.", "anchor_text": "http://127.0.0.1:5000/spotify_sentiment_analysis.", "paragraph_index": 42}, {"url": "https://developer.spotify.com/documentation/general/guides/authorization-guide/", "anchor_text": "authorisation guide", "paragraph_index": 44}, {"url": "https://www.musixmatch.com/", "anchor_text": "Musixmatch", "paragraph_index": 64}, {"url": "https://developer.musixmatch.com/", "anchor_text": "page", "paragraph_index": 65}, {"url": "https://spotify-sentiment-analysis.herokuapp.com/", "anchor_text": "where it\u2019s hosted", "paragraph_index": 82}, {"url": "https://ko-fi.com/lowri_williams", "anchor_text": "buying me a coffee", "paragraph_index": 83}], "all_paragraphs": ["Have you ever wondered what kind of data surrounds the music you listen to? So many different music apps are applying sophisticated data science and machine learning techniques to our music data and are getting pretty cool outputs. Spotify, for example, is one of the most popular apps and is powered by the music we listen to, the songs we like, and the playlists we create and follow to produce a personalised product for its users and community.", "When I looked at the data that Spotify collects, I noticed that they collect audio features from the music itself. So the levels of acousticness, danceability, energy, tempo, etc. But the feature which stood out the most was audio valence.", "Audio Valence: A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).", "So, from this attribute, Spotify can generate playlists for us with more upbeat, positive songs, or more mellow and negative songs. Whereas this is clever, I recently ran into some inaccurate results \u2014 I had sad songs in the positive playlist that Spotify had generated for me. I wondered what had decided to put it there.", "If we look at the audio features surrounding the 80\u2019s classic \u2018When Doves Cry\u2019 by Prince, Spotify\u2019s results show that it\u2019s a lively song \u2014 which is true, it has a pretty funky beat! \ud83d\udd7a\ud83c\udffb\ud83d\udd4a\ufe0f", "But there is a contradiction in terms of the valence score it's associated with (0.84 indicates a positive valence) and what the song lyrics express. Although listeners can have their own interpretation of the meaning of lyrics, this song uses doves and purple violets, which are both well-known symbols for love, to express what was once before the constant arguments between a couple who were in love. The following lyrics are just some examples which show the expression of heartbreak and sadness:", "\u201cHow can you just leave me standing?Alone in a world that\u2019s so cold?\u2026Why do we scream at each other?This is what it sounds like when doves cry\u201d", "Given this finding, I quickly became interested in the idea of whether we can gain even more insight into the valence of the music we\u2019re listening to by diving deeper into the music itself and applying sentiment analysis to the lyrics of the songs in our playlists.", "Sentiment Analysis: Automatically identifying opinions or sentiment expressed in text to determine whether the writer\u2019s attitude is positive, negative, or neutral.", "In this case, I developed a Spotify Sentiment Analysis app where Spotify users can learn more about the sentiment of their songs.", "This post talks about the development of the app. I tried to make the text as simple and as clear as possible while still providing technical details. Regardless, things might get a bit geeky. So hang tight and if you make it to the end, make sure to hit the like button. But if you want to skip the tech-talk and go straight to using the app, head over to where it\u2019s hosted.", "For those of you who are not familiar with the framework, Flask allows you to create web apps with Python. If I\u2019m wanting to implement something that looks nice, I\u2019ll turn to Flask and use a free Bootstrap theme as a base for the interface. That\u2019s really what Flask is for \u2014 it\u2019s designed to make getting started quick and easy, with the ability to scale up to more complex apps.", "In this part of the post, I decided to give a quick breakdown as to how I set up and build my Flask apps. I\u2019ve used Flask several times now, but when I first used it, I noticed that the documentation was a little confusing to get a quick grasp of. So, here\u2019s a quick and general explanation of how I do it.", "Python uses virtual environments to maintain different versions of packages for different apps. You can set up different virtual environments for each app and have control of the versions of the packages those apps use.", "Head over to your terminal and navigate to wherever you want your Flask app\u2019s directory to live using cd name_of_directory. Here, we'll create a directory called spotify_sentiment_analysis and then we'll navigate to it using cd.", "The virtual environment is included in Python 3, so we'll create one without having to install anything. The first venv in the command is the name of the Python virtual environment package, and the second is the virtual environment name that I'm going to use for this particular environment.", "We should now have created a virtual environment. To be able to use it, we need to activate it and then install Flask in it using pip. To confirm that the virtual environment successfully installed Flask, we can start the Python interpreter and import Flask.", "No output is a good output and means that Flask was installed correctly and is ready to be used! \ud83d\udca1", "This application is going to exist in a package. What that means is that, in Python, a sub-directory that includes a __init__.py file is considered a package and can be imported. We're going to create a package called app - this will host the application. To do that, make sure you're in the right directory (in this case, spotify_sentiment_analysis) and create a new directory called app. Whilst we're at the terminal, we can create the empty file __init__.py.", "The __init__.py file is then going to contain a script which creates the application object as an instance of class that Flask has imported from its package. The __name__ variable passed to the Flask class is a predefined Python variable, which is set to the name of the module in which it's used. We then import the routes module, which doesn't exist yet but is imported after we declare the app variable. This is because the routes module imports the app variable.", "So, what goes in the routes module? The routes are all the different URLs that the Flask app implements. In Flask, application routes are written as Python functions called view functions which are mapped to one or more route URL. Let's create the route module routes.py in our app directory and create a view function.", "Here, we\u2019ve created a view function. The @app.route above the function is called a decorator, which creates an association between the URL given as an argument and the function. In this example, the decorator is associated with the /index URL. This means that when a web browser requests this URL, Flask is going to be able to include this function and pass the return value of it back to the browser as a response. We'll see this in practise later.", "To complete the application, we need to have a script at the top-level of the directory that defines the Flask app instance. I'll call it spotify_sentiment_analysis.py and include the following single line that imports the application instance.", "Just to make sure that we have the correct project structure, here\u2019s the current directory in our virtual environment.", "When it comes to running the app, Flask needs to be told how to import it by setting the FLASK_APP environment variable. We can then run the app using flask run.", "The output from flask run indicated that the server is running on the IP address 127.0.0.1:5000, which is always the local address of your computer, otherwise called your localhost. In a web browser, navigate to that URL. You'll notice that when the URL ends with /index, we'll see the simple message declared in our view functions. Change the URL to something else, like /home and you'll see that the URL is not found because we didn't create it.", "Templates help separate the presentation and design of the web application from the Python logic. In Flask, templates are written in separate files, usually HTML files, which are stored in a templates directory inside the application package. Let\u2019s create the templates directory, making sure that we don\u2019t name it with a capital \u2018t\u2019 otherwise it won\u2019t be recognised. The directory should now look like the following structure.", "Inside our templates directory, we can create HTML files which will not only present our nice web interface, but we\u2019ll also be able to parse variables and results from Python to our front end. Let\u2019s create an HTML file called index.html and save it in our templates directory.", "If you\u2019re familiar with HTML, you\u2019ll see that line 4 looks a little odd! Here, we\u2019re in fact parsing the variable user which we'll create in Python to be displayed on the front end. The {{ ... }} is essentially a placeholder for your Python variables.", "If we jump back to routes.py, we need to declare the variable user. We then convert the template into a complete HTML page using Flask's render_template() function. This function needs to be imported. It takes the template filename and the declared Python variables, and returns the same template but with all the placeholders in it replaced with those variables.", "We can also render conditional statements and for loops into our templates, but I won't be covering those here.", "Let\u2019s assume we have set up several view functions and we want to be able to navigate from one page to another. Easy! We can navigate and direct to pages using HTML\u2019s href tag. But instead of directing to the whole URL of your application, we can just use the URL we declared in our decorators, for example, /index.", "The last thing I wanted to quickly cover when setting up a Flask app\u2019s environment is where to put the styling of our pages. By that I mean, where do we put the files that make our application look awesome! Well, to do that we have to create one last directory in our app directory called static. In this directory, you\u2019d expect to find all the CSS and image files that you need for your app. To connect the styling or image files to your HTML, you just navigate your stylesheet to static/....", "If you\u2019re still with me, great!", "Following from the previous explanation of how to set up and start building a Flask app, I\u2019ve gone ahead and created two view functions, one for my login page and the other for my main page. The login page is where I want the user to be presented to my application and when they click the button, they\u2019ll authenticate themselves as a Spotify user using their credentials and access their own music.", "The main page is where the results of the sentiment analysis will be displayed. Now, I\u2019ve been cheeky here and have gone to Spotify\u2019s site and saved the styling of the HTML of their main page after you login. But I just wanted to declare that the copyright of their code and their design is their own, and the purpose of this project is for fun only.", "You might notice that the image is not displayed where your Spotify profile picture would usually be. That\u2019s because that profile picture is stored by Spotify and is rendered to the page once you\u2019ve logged in. The same methodology applies here \u2014 we\u2019ve not pulled any data yet, but once we do, we\u2019ll put the logged-in user\u2019s profile picture there to make it more personalised.", "Thanks to Spotify\u2019s API, I\u2019m able to extract and explore the songs I enjoy listening to \u2014 the ones that made me click that like button. To gain access to your Spotify data using the API, you\u2019ll first need to do an initial setup using the following steps:", "\u2022 Login to the Spotify for Developers website using your Spotify credentials.", "\u2022 You\u2019ll be presented with your dashboard where you can \u2018create a new application\u2019.", "\u2022 From the application dashboard page, select \u2018edit settings\u2019.", "\u2022 Provide a name and description to your application.", "\u2022 Then, set the redirect URI as the location you want the user to be directed to once the API authenticates the access. As I\u2019m using Flask, I\u2019ll set it as the main HTML page on my localhost: http://127.0.0.1:5000/spotify_sentiment_analysis.", "\u2022 Click save and make a note of your Client ID and Client Secret keys. We\u2019ll need these in the next step.", "Now that we have our Flask environment setup, the beginning of a design, and our Spotify API keys, we can start accessing our music data. To have the end-user approve your app access to their Spotify data and features, or to have your app fetch data from Spotify, you need to authorise your application. Spotify\u2019s authorisation guide describes how you can be authorised in two ways:", "\u2022 App Authorisation: Spotify authorises your app to access the Spotify Platform (APIs, SDKs and Widgets).", "\u2022 User Authorisation: Spotify, as well as the user, grant your app permission to access and/or modify the user\u2019s data. Calls the Spotify Web API require authorisation by your user. To get that authorisation, your application generates a call to the authorisation endpoint, passing along a list of the scopes for which access permission is sought.", "Here, we\u2019ll let the user authorise us access to their music data. We want it to be personalised to me and to others who want to use it, so it makes sense that we access individual user data.", "Making authorised requests involves 3 parties: the Spotify server, your application, and the end-user data and controls:", "Remember those keys you noted down from your Spotify dashboard? Here\u2019s where you\u2019ll need them. \ud83d\udd11", "First, let\u2019s declare the variables CLIENT_ID and CLIENT_SECRET as our the keys. These will be string type. We'll then set up some required Spotify URLs and server-side parameters. Pay particular attention to the REDIRECT_URI. This is the redirect URI that you declared when you set up your keys in the previous section. Remember, this is the URL you want your user to be redirected to once they've authenticated. Lastly, we want to parse all of the above information through to Spotify to retrieve the data.", "We'll need to set up another view point. This time, the view point won't be returning a template. It will be parsing the API information and redirecting us to our REDIRECT_URI. Also, note that we need to import redirect from the Flask library, as well as urllib and quote from urllib.parse. One last thing - we need to connect our button on our login HTML page to the authorisation function. Head over to that file, and include /spotify_authentication in your href tag to reference the corresponding view point.", "Altogether, our routes.py should now be looking something like this:", "Now that the authentication is set up, what do we expect to see? Well, if you run your Flask app and click on the login button on your welcome page, you should be redirected to Spotify\u2019s authentication page! \ud83c\udf89", "The authentication page should look something like this. Once you fill in your Spotify details, you should then be redirected to your redirect URI and see your main page.", "Now for the fun part. The user has authenticated access to their Spotify data \u2014 but how do we retrieve it?", "When the authorization code has been received, you will need to exchange it with an access token by making a POST request to the Spotify Accounts service, this time to its /api/token endpoint: POST https://accounts.spotify.com/api/token.", "The body of this request needs to contain some parameters, which are going to be included as base64-encodings in the header. In this case, we're going to import request from Flask's library and also the following libraries: base64, requests, and json.", "Once you run your Flask app and the authentication token is successful, the response from the Spotify Accounts service has the status code 200 and the following JSON data:", "Cool! I can see my username, how many followers I have, the URL to my profile, my profile picture, and what type of account I have. Because this is a JSON object, I can assign the relevant information to variables.", "Remember the placeholder for the profile picture in the template of the main page? Well, we can parse the profile_url variable by placing {{ profile_url }} as the href of the profile picture element in the HTML of the main page and render the template. I can also display the latest 6 songs from my playlist.", "Ok, now to access the music data. We can retrieve the songs we have liked by directing our authentication token towards the user profile endpoint. The music data contains all kinds of information. We\u2019re interested in when we added the song to our playlist, the name of the song, the name of the artist, the album cover, the URL of the song, and the ID of the track.", "Again, as this is a JSON object, I can access the relevant information. As we\u2019re dealing with several songs, I\u2019ll create a dataframe to structure the data.", "Once we have access to the songs in our Spotify playlists, we need their lyrics. Spotify doesn\u2019t have this feature \u2014 which is a shame. However, there are several other resources we can use to match lyrics to the songs.", "Musixmatch is a song lyric platform who\u2019s community is made of millions of music fans worldwide, building the best knowledge of lyrics, including translated lyrics. In comparison to other song lyric sites, Musixmatch seemed to have the best results in terms of the correctness of the lyrics and the number of songs they covered. But the best thing about the site is that it has an API.", "Registering for the API key is quick and simple. Head over to their developer\u2019s page and sign up for an account. Their free plan lets you make 2k API calls each day and retrieves only 30% of the lyrics in each song.", "To gain the song lyrics, you\u2019ll first need to an initial setup using the following steps:", "\u2022 Register for a Musixmatch developer account and login.", "\u2022 You\u2019ll be presented with your dashboard where you can \u2018register for an API key\u2019.", "\u2022 Provide a name and description to your application.", "\u2022 Click save and make a note of your API key.", "Various techniques and methodologies have been developed to address automatically identifying the sentiment expressed in the text. In this post, I\u2019ll use VADER, a Python sentiment analysis library, to classify whether the song lyrics in my playlist are positive, negative, or neutral.", "A very simple approach to sentiment analysis is by using a list of words which have been labelled according to their semantic orientation. For example, we can assume that the word \u201cgood\u201d has a positive valence, whereas the word \u201cbad\u201d has a negative one. VADER uses this technique and provides a percentage score which represents the proportion of lyrics which fall in each sentiment category. It also provides a compound score which is computed by summing the valence scores of each word and then normalising the scores to be between -1 (most extreme negative) and +1 (most extreme positive).", "What\u2019s nice about VADER is the fact that we don\u2019t have to pre-process the text in any way! We can feed the song lyrics into VADER\u2019s sentiment function and retrieve the compound scores for each song. Remember, Musixmatch allows access to only the first 30% of the lyrics for each song if you use the free API. So, granted, the results may not be as accurate as we\u2019d like them to be.", "First, we\u2019ll import musixmatch from Musixmatch\u2019s Python library and the SentimentIntensityAnalyzer function from VADER\u2019s Python library. I\u2019ll declare my Musixmatch API key, initialise the sentiment analyser from VADER, and then iterate over the song names and artists from the dataframe, parsing them through Musixmatch\u2019s lyrics matcher. I\u2019ll then calculate whether the compound sentiment score is above or beneath the thresholds so that we can assign them with the positive, negative, or neutral label.", "Once I\u2019ve retrieved the compound scores for each of the songs in my playlist, I can start thinking about how to visualise the results. One of my favourite charts to use recently is radar charts, or web or spider charts. For those of you who don\u2019t know, a radar chart is a two-dimensional chart type designed to plot one or more series of values over multiple variables. Each variable has its own axis, and all axes are joined in the centre of the figure.", "Let\u2019s assume we want to graph the monthly average compound score for positive, negative, and neutral songs. I can calculate the monthly average sentiment score by grouping my dataframe by the Date column and averaging the compound scores. I can then produce the following radar chart using ChartJS.", "Cool! Out of the 320 songs I have in my playlist, we can see that I listen to a mix of positive and negative songs. What\u2019s interesting is that in December 2019, I liked more positive music. That could probably be explained by the Christmas jingles I must\u2019ve been listening to. I seem to very rarely listen to music that can be classified as expressing neutral sentiment. As I\u2019m writing this (end of April 2020), it seems that I\u2019ve been listening to more positive music.", "We can extract the overall top-scoring positive and negative tunes and put them in a nice looking scorecard. The cover image of the song can also be extracted from the data collected from Spotify.", "We can also compare the sentiment analysis results with Spotify\u2019s audio valence scores. We can parse the IDs for each of the tracks from my playlist and parse them through the audio features endpoint. If we average the scores for all songs classified as positive, negative, or neutral, we can compare both measures using a simple bar chart. What\u2019s promising is that, although we\u2019re applying sentiment analysis on 30% of the lyrics of a song, the results appear to be relatively similar to Spotify\u2019s audio valence scores.", "So, what have I learnt from this analysis?", "It\u2019s been really interesting to gain insight into the music I listen to, as well as applying sentiment analysis on the song lyrics \u2014 my music taste seems to be more positive than I thought it was! What I might look at in a future post is how to extract keywords from the song lyrics. This opens the door to other natural language processing projects, where I can look into using machine learning to classify songs based on what they\u2019re about.", "This project is something I really enjoyed doing. So, I went ahead and further expanded the Flask app to include some other features. If you want to see more about the sentiment of your songs, head over to where it\u2019s hosted.", "If you enjoyed following this post, don\u2019t forget to like and share or show kudos by buying me a coffee! \u2615", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F8d48b0a492f2&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspotify-sentiment-analysis-8d48b0a492f2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspotify-sentiment-analysis-8d48b0a492f2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspotify-sentiment-analysis-8d48b0a492f2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspotify-sentiment-analysis-8d48b0a492f2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----8d48b0a492f2--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8d48b0a492f2--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://lowri-a-williams.medium.com/?source=post_page-----8d48b0a492f2--------------------------------", "anchor_text": ""}, {"url": "https://lowri-a-williams.medium.com/?source=post_page-----8d48b0a492f2--------------------------------", "anchor_text": "Lowri Williams"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe98db206e1b3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspotify-sentiment-analysis-8d48b0a492f2&user=Lowri+Williams&userId=e98db206e1b3&source=post_page-e98db206e1b3----8d48b0a492f2---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8d48b0a492f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspotify-sentiment-analysis-8d48b0a492f2&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8d48b0a492f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspotify-sentiment-analysis-8d48b0a492f2&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/", "anchor_text": "data"}, {"url": "https://www.musixmatch.com/lyrics/Prince/When-Doves-Cry", "anchor_text": "song lyrics"}, {"url": "https://spotify-sentiment-analysis.herokuapp.com/", "anchor_text": "where it\u2019s hosted"}, {"url": "https://developer.spotify.com/dashboard/", "anchor_text": "Spotify for Developers"}, {"url": "http://127.0.0.1:5000/spotify_sentiment_analysis.", "anchor_text": "http://127.0.0.1:5000/spotify_sentiment_analysis."}, {"url": "https://developer.spotify.com/documentation/general/guides/authorization-guide/", "anchor_text": "authorisation guide"}, {"url": "https://www.musixmatch.com/", "anchor_text": "Musixmatch"}, {"url": "https://developer.musixmatch.com/", "anchor_text": "page"}, {"url": "https://spotify-sentiment-analysis.herokuapp.com/", "anchor_text": "where it\u2019s hosted"}, {"url": "https://ko-fi.com/lowri_williams", "anchor_text": "buying me a coffee"}, {"url": "https://medium.com/tag/data-science?source=post_page-----8d48b0a492f2---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/sentiment-analysis?source=post_page-----8d48b0a492f2---------------sentiment_analysis-----------------", "anchor_text": "Sentiment Analysis"}, {"url": "https://medium.com/tag/python?source=post_page-----8d48b0a492f2---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/flask?source=post_page-----8d48b0a492f2---------------flask-----------------", "anchor_text": "Flask"}, {"url": "https://medium.com/tag/editors-pick?source=post_page-----8d48b0a492f2---------------editors_pick-----------------", "anchor_text": "Editors Pick"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8d48b0a492f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspotify-sentiment-analysis-8d48b0a492f2&user=Lowri+Williams&userId=e98db206e1b3&source=-----8d48b0a492f2---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8d48b0a492f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspotify-sentiment-analysis-8d48b0a492f2&user=Lowri+Williams&userId=e98db206e1b3&source=-----8d48b0a492f2---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8d48b0a492f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspotify-sentiment-analysis-8d48b0a492f2&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8d48b0a492f2--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F8d48b0a492f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspotify-sentiment-analysis-8d48b0a492f2&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----8d48b0a492f2---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----8d48b0a492f2--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----8d48b0a492f2--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----8d48b0a492f2--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----8d48b0a492f2--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----8d48b0a492f2--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----8d48b0a492f2--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----8d48b0a492f2--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----8d48b0a492f2--------------------------------", "anchor_text": ""}, {"url": "https://lowri-a-williams.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://lowri-a-williams.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Lowri Williams"}, {"url": "https://lowri-a-williams.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "233 Followers"}, {"url": "https://lowriwilliams.co.uk", "anchor_text": "https://lowriwilliams.co.uk"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe98db206e1b3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspotify-sentiment-analysis-8d48b0a492f2&user=Lowri+Williams&userId=e98db206e1b3&source=post_page-e98db206e1b3--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff5f2750d6328&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspotify-sentiment-analysis-8d48b0a492f2&newsletterV3=e98db206e1b3&newsletterV3Id=f5f2750d6328&user=Lowri+Williams&userId=e98db206e1b3&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}