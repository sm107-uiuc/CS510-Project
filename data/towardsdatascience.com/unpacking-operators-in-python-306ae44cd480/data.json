{"url": "https://towardsdatascience.com/unpacking-operators-in-python-306ae44cd480", "time": 1683012816.830147, "path": "towardsdatascience.com/unpacking-operators-in-python-306ae44cd480/", "webpage": {"metadata": {"title": "Unpacking Operators in Python. Using the * and ** unpacking operators\u2026 | by Luay Matalka | Towards Data Science", "h1": "Unpacking Operators in Python", "description": "In this tutorial, we will learn how to use the asterisk (*) operator to unpack iterable objects, and two asterisks (**) to unpack dictionaries. In addition, we will discuss how we can pack several\u2026"}, "outgoing_paragraph_urls": [{"url": "https://lmatalka90.medium.com/membership", "anchor_text": "link", "paragraph_index": 34}], "all_paragraphs": ["In this tutorial, we will learn how to use the asterisk (*) operator to unpack iterable objects, and two asterisks (**) to unpack dictionaries. In addition, we will discuss how we can pack several values into one variable using the same operator. And lastly, we will discuss what *args and **kwargs are and when they can be used.", "Let\u2019s say we have a list:", "And we define a function that takes in 5 arguments and returns their sum:", "And we want to find the sum of all the elements in num_list. Well, we can accomplish this by passing in all the elements of num_list to the function num_sum. Since num_list has five elements in it, the num_sum function contains five parameters, one for each element in num_list.", "One way to do this would be to pass the elements by using their index as follows:", "However, there is a much easier way to do this, and that\u2019s by using the * operator. The * operator is an unpacking operator that will unpack the values from any iterable object, such as lists, tuples, strings, etc\u2026", "For example, if we want to unpack num_list and pass in the 5 elements as separate arguments for the num_sum function, we could do so as follows:", "And that\u2019s it! The asterisk, *, or unpacking operator, unpacks num_list, and passes the values, or elements, of num_list as separate arguments to the num_sum function.", "Note: For this to work, the number of elements in num_list must match the number of parameters in the num_sum function. If they don\u2019t match, we would get a TypeError.", "We can also use the asterisk, *, or unpacking operator, with built-in functions in python, such as print:", "Let\u2019s say we have another list:", "And we want to print all the elements in both num_list and num_list_2. We can use the unpacking operator, *, to accomplish this as follows:", "Both num_list and num_list_2 are unpacked. Then, all the elements are passed in to print as separate arguments.", "We can also create a new list that contains all the elements from num_list and num_list_2:", "num_list and num_list_2 are unpacked, resulting in their elements constituting the elements of the newly made list, new_list.", "Note: We could have simply added num_list and num_list_2 to create new_list. However, this was just to portray the functionality of the unpacking operator.", "Let\u2019s say that we have a string assigned to the variable name:", "And we want to break this name up into 3 parts, with the first letter being assigned to a variable, the last letter being assigned to another variable, and everything in the middle assigned to a third variable. We can do so as follows:", "And that\u2019s it! Since name is a string, and strings are iterable objects, we can unpack them. The values on the right side of the assignment operator will be assigned to the variables on the left depending on their relative position in the iterable object. As such, the first letter of \u2018Michael\u2019 is assigned to the variable first, which would be \u2018M\u2019 in this case. The last letter, \u2018l\u2019, is assigned to the variable last. And the variable middle will contain all the letters between \u2018M\u2019 and \u2018l\u2019 in the form of a list: [\u2018i\u2019, \u2018c\u2019, \u2018h\u2019, \u2018a\u2019, \u2018e\u2019].", "Note: The first and last variables above are called mandatory variables, as they must be assigned concrete values. The middle variable, due to using the * or unpacking operator, can have any number of values, including zero. If there are not enough values to unpack for the mandatory variables, we will get a ValueError.", "For example, if we used the following assignment instead:", "Then the variable first will be assigned \u2018m\u2019, the variable last will be assigned \u2018a\u2019, and the variable middle will just be an empty list since there are no other values to assign to it.", "We can also use the * operator to pack multiple values into a single variable. For example:", "The reason for using a trailing comma after *names is because the left side of the assignment must be a tuple or list. Therefore, the names variable now contains all the names on the right side in the form of a list.", "Note: This is what we do when we define functions that can receive a varying number of arguments! That is the concept of *args and **kwargs!", "For example, let\u2019s say we have a function, names_tuple, that takes in names as arguments and returns them back. However, the number of names that we pass in to this function can vary. Well, we can\u2019t just choose a number of parameters that this function would have since the number of positional arguments can change with each calling of the function. We can instead use the * operator to pack the arguments passed in into a tuple as follows:", "No matter what number of positional arguments we pass in when we call the names_tuple function, the *args argument will pack the positional arguments into a tuple, similar to the *names assignment above.", "To pass in a varying number of keyword or named arguments, we use the ** operator when defining a function. The ** unpacking operator will pack the varying number of named arguments we pass in into a dictionary.", "Note: When using the * operator to create a parameter that receives a varying number of positional arguments when defining a function, it is common to use the parameter name args (and kwargs to receive a varying number of keyword or named arguments). However, any names can be chosen for these parameters.", "What happens when we try to use the * operator with a dictionary?", "Notice how it printed the keys of the dictionary and not the values? To unpack a dictionary, we need to use the ** unpacking operator. However, since each value is associated with a specific key, the function that we pass these arguments to must have parameters with the same names as the keys of the dictionary being unpacked. For example:", "This dict_sum function has three parameters: a, b, and c. These three parameters are named the same as the keys of num_dict. Therefore, once we pass in the unpacked dictionary using the ** operator, it\u2019ll assign in the values of the keys according to the corresponding parameter names:", "Thus, the values, or arguments, for the a, b, and c parameters in dict_sum will be 1, 2, and 3, respectively. And the sum of these three values is 6.", "Just like with lists, the ** operator can be used to merge two or more dictionaries:", "If you enjoy reading stories like these and want to support me as a writer, consider signing up to become a Medium member. It\u2019s $5 a month, giving you unlimited access to stories on Medium. If you sign up using my link, I\u2019ll earn a small commission.", "In this tutorial, we learned how to use the * operator to unpack iterable objects and the ** operator to unpack dictionaries. We also learned many ways to utilize these operators to accomplish many different tasks. In addition, we briefly discussed the concept of packing with *args and **kwargs by using the * and ** operators when defining functions that receive a varying number of positional or named arguments.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Cloud Data Engineer with a passion for teaching."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F306ae44cd480&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funpacking-operators-in-python-306ae44cd480&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funpacking-operators-in-python-306ae44cd480&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funpacking-operators-in-python-306ae44cd480&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funpacking-operators-in-python-306ae44cd480&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----306ae44cd480--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----306ae44cd480--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://lmatalka90.medium.com/?source=post_page-----306ae44cd480--------------------------------", "anchor_text": ""}, {"url": "https://lmatalka90.medium.com/?source=post_page-----306ae44cd480--------------------------------", "anchor_text": "Luay Matalka"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F58bd20ab66d4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funpacking-operators-in-python-306ae44cd480&user=Luay+Matalka&userId=58bd20ab66d4&source=post_page-58bd20ab66d4----306ae44cd480---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F306ae44cd480&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funpacking-operators-in-python-306ae44cd480&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F306ae44cd480&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funpacking-operators-in-python-306ae44cd480&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@markusspiske?utm_source=medium&utm_medium=referral", "anchor_text": "Markus Spiske"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://towardsdatascience.com/the-walrus-operator-in-python-a315e4f84583", "anchor_text": "The Walrus Operator in PythonLearn what the walrus operator is and how to use it in Pythontowardsdatascience.com"}, {"url": "https://towardsdatascience.com/ternary-operators-in-python-49c685183c50", "anchor_text": "Ternary Operators in PythonImprove your Python code with ternary operators!towardsdatascience.com"}, {"url": "https://towardsdatascience.com/iterables-and-iterators-in-python-849b1556ce27", "anchor_text": "Iterables and Iterators in PythonIterables, iterators, and iteration in Pythontowardsdatascience.com"}, {"url": "https://lmatalka90.medium.com/membership", "anchor_text": "link"}, {"url": "https://lmatalka90.medium.com/membership", "anchor_text": "Join Medium with my referral link \u2014 Luay MatalkaRead every story from Luay Matalka (and thousands of other writers on Medium). Your membership fee directly supports\u2026lmatalka90.medium.com"}, {"url": "https://medium.com/tag/programming?source=post_page-----306ae44cd480---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-science?source=post_page-----306ae44cd480---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/technology?source=post_page-----306ae44cd480---------------technology-----------------", "anchor_text": "Technology"}, {"url": "https://medium.com/tag/software-development?source=post_page-----306ae44cd480---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----306ae44cd480---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F306ae44cd480&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funpacking-operators-in-python-306ae44cd480&user=Luay+Matalka&userId=58bd20ab66d4&source=-----306ae44cd480---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F306ae44cd480&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funpacking-operators-in-python-306ae44cd480&user=Luay+Matalka&userId=58bd20ab66d4&source=-----306ae44cd480---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F306ae44cd480&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funpacking-operators-in-python-306ae44cd480&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----306ae44cd480--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F306ae44cd480&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funpacking-operators-in-python-306ae44cd480&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----306ae44cd480---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----306ae44cd480--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----306ae44cd480--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----306ae44cd480--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----306ae44cd480--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----306ae44cd480--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----306ae44cd480--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----306ae44cd480--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----306ae44cd480--------------------------------", "anchor_text": ""}, {"url": "https://lmatalka90.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://lmatalka90.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Luay Matalka"}, {"url": "https://lmatalka90.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "1K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F58bd20ab66d4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funpacking-operators-in-python-306ae44cd480&user=Luay+Matalka&userId=58bd20ab66d4&source=post_page-58bd20ab66d4--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Feb71491826a1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funpacking-operators-in-python-306ae44cd480&newsletterV3=58bd20ab66d4&newsletterV3Id=eb71491826a1&user=Luay+Matalka&userId=58bd20ab66d4&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}