{"url": "https://towardsdatascience.com/stacked-auto-encoder-as-a-recommendation-system-for-movie-rating-prediction-33842386338", "time": 1683005893.157939, "path": "towardsdatascience.com/stacked-auto-encoder-as-a-recommendation-system-for-movie-rating-prediction-33842386338/", "webpage": {"metadata": {"title": "Intuitive Introduction to Stacked Auto-encoder and Creation as Movie Rating System | by Luke Sun | Towards Data Science", "h1": "Intuitive Introduction to Stacked Auto-encoder and Creation as Movie Rating System", "description": "Introduction on Stacked Auto-encoder and Technical Walk-through on Model Creation using Pytorch"}, "outgoing_paragraph_urls": [{"url": "https://medium.com/@vistaxjtu/restricted-boltzmann-machine-how-to-create-a-recommendation-system-for-movie-review-45599a406deb", "anchor_text": "article", "paragraph_index": 0}, {"url": "https://grouplens.org/datasets/movielens/", "anchor_text": "here", "paragraph_index": 4}, {"url": "https://pytorch.org/tutorials/beginner/blitz/neural_networks_tutorial.html#define-the-network", "anchor_text": "here", "paragraph_index": 28}, {"url": "https://discuss.pytorch.org/t/clone-and-detach-in-v0-4-0/16861", "anchor_text": "here", "paragraph_index": 29}, {"url": "https://github.com/luke4u/Movie-Rating-Prediction", "anchor_text": "Github", "paragraph_index": 36}], "all_paragraphs": ["In the previous article, we created a Restricted Boltzmann Machine model for movie review prediction: like or not. Now, I will walk through how to build an auto-encoder model for movie rating prediction from 0 to 5. It is split into 6 parts.", "Auto-encoder is a type of directed neural network, which aims to generate outputs as identical as inputs. As Figure 1 shows, inputs are encoded and decoded through hidden layers, producing outputs which are then compared to the inputs. Afterward, back-propagation is performed to update weights. Repeat this iteration for training purposes.", "There are different types of auto-encoders, including stacked auto-encoders, sparse auto-encoders, denoising auto-encoders, and deep auto-encoders. For stacked auto-encoders which will be built here, it contains multiple encoding or decoding layers in the middle as shown in Figure 2, whereas the basic auto-encoder framework only has 1 hidden layer.", "We are tasked by a well-known video streaming company to predict its subscribers\u2019 taste in movies, rating from 0 to 5.", "The data MovieLens 100K movie ratings are from GroupLens Research here. Briefly looking at the data in Figure 3, Movies data contain names and types of movies, Ratings data contains user ID, movie ID, user rating from 0 to 5 and timestamps, and User data contain user ID, gender, age, job code, and zip code.", "The dataset contains 80,000 rows for the training set and 20,000 rows for the test set. Let\u2019s read in them. Specifically,", "Note we convert Dataframe to Numpy array because we will use Pytorch tensor which requires array as input. Figure 4 shows the training/test set, including user ID, movie ID, rating, and timestamps (irreverent for model training).", "To prepare the training/test data, we need to create training/test sets in array format with each row representing a user and each cell in the row representing the rating for each movie. This is the expected input for auto-encoder.", "To do this, we need the total number of users as row numbers and the total number of movies as column numbers.", "We create a function for data conversion which returns a list of lists. Each child list represents one user\u2019s ratings for all movies. If the user did not rate a movie, initialize the rating with 0. This is very important when training the model.", "With the above conversion function, we convert the training set and test set.", "Figure 5 shows the final training set. Again, each row contains a user\u2019s ratings for all movies.", "Finally, we convert the list of list type into Tensor because we will use Pytorch to build the auto-encoder.", "How to build the architecture of an auto-encoder \ud83e\udd14? A simple solution is to create a class that contains variables and methods of the auto-encoder.", "Here we will inherit a parent class called Module from Pytorch. The benefit is that inheritance allows us to create a child class to build our stacked auto-encoder easily.", "Now let\u2019s create the functions in the class.", "First, inherit all classes and functions from the parent class Module.", "Next, create the 1st full connection layer fc1 using inherited class nn.Linear(), which connects between first input vector features and the first encoded vector.", "The first argument for nn.Linear() is the number of features, which is the number of movies, nb_movies. The 2nd argument is the number of nodes in the first hidden layer. Based on experiments, we choose 20, which means the first encoded vector is a vector of 20 elements. These 20 features represent features of movies that are liked by similar users.", "Third, add the 2nd hidden layer fc2 with 20 features as input and 10 encoded features as output.", "Above is the encoding part. Now let\u2019s add the decoding layers fc3 and fc4 which will be symmetrical to the encoding. Remember, auto-encoder aims to reconstruct the input vector, and thus the output vector needs to have the same dimension as the input vector.", "Finally, specify the activation function for the model, Sigmoid function used here. This is tunable, and feel free to try other functions.", "In this function, we apply encoding and decoding using the architecture built in __init__ function. This is done by applying activation functions for encoding and decoding layers. In the end, it returns a vector of the predicted ratings which will be compared to the real ratings.", "Specifically, we add an argument, the input vector x, which will be encoded twice and decoded twice successively, producing the reconstructed vector. The first activation function activates the 20 neurons of the first hidden layer fc1 which accepts the input vector x. Next, using the same method, fc2 and fc3 are activated. Note for fc4, no need to apply activation function when reconstructing the decoded vector at the output layer. Finally, return a vector of predicted ratings.", "Congratulations if you made through Part 4 as that is the difficult part \ud83d\udc4d\ud83d\udc4d. Now let\u2019s train the SAE model.", "First, we choose the Mean Squared Error from nn.MSELoss() for loss function, RMSprop from optim.RMSprop() for the optimizer, respectively. Based on experiments, we choose a learning rate of 0.01, and weight decay of 0.5. Note that, weight decay is used to reduce the learning rate after every few epochs, to regulate the convergence. We train the model on 200 epochs. These parameters are tunable, and feel free to try yours.", "Next, we create 2 for loops, one for epoch iteration, and one for observation iteration. Insider the epoch loop, we initialize the train_loss and number of users who rated at least 1 movie. To optimize the computation, the model won\u2019t be trained on users who did not rate any movies.", "Inside the observation iteration, each observation is fed one by one to predict the ratings for each user using the SAE class with sae object. The loss of each observation is calculated, and the optimizer is applied to optimize the loss. Meanwhile, the loss is accumulated after each epoch, so we can review how the training loss evolves over each epoch.", "Specifically, a batch dimension is added for the input vector from the training set for Pytorch network. We use Variable() and unsqueeze() functions to put the batch dimension at index 0. Then, clone the input to create the target using clone() function. As mentioned above, the model is trained on users who did not rate any movies, which is implemented by an if condition. Inside the if condition, we make prediction first. Note that, we use sae(input) for prediction, instead of sae.forward(input). This is because forward function is a base function of any object created from nn class. Here, our SAE class has overwritten the parent forward function. More info can be found here.", "Next, we set target.require_grad False, since target copied the same require_grad field from input. This is because only need to compute the gradient with respect to input, not to target. More info can be found here. Then, reset the predictions to 0 at indexes of which input rating are 0, because 0 ratings will not impact the loss computation. With that done, we can efficiently compute the loss using criterion object. We have to average the loss on all movies, including those without a rating, to make the loss mathematically relevant for all observations. backward() method is used to decide which direction to update the weights, increasing or decreasing. Finally, use optimizer.step() to update the weights. Different to backward() method, this is to decide the number of weights to be updated.", "With all the above, we can execute the model training. In the end, we got a loss of 1.77 at epoch 1, a loss of 0.934 at epoch 100, and a loss of 0.914 at epoch 200.", "Great. That\u2019s all for model building and training. Quite technical, and hopefully I made it clear \ud83d\ude07\ud83d\ude07.", "Compared to the training loops, we remove the epoch iteration. Note below, we use the training_set as input to make a prediction and use test_set as target for loss computation. Then, reset the predictions to 0 at indexes of which target ratings are 0, because these 0s mean users did not rate the movies and thus there should be no predictions. We only compute the test loss for movies that are rated by the users in test_set.", "With all the above, we execute the testing. Finally, we got a test loss of 0.95. This indicates a minor over-fitting on the model.", "Last bit, if you want to compare the real ratings and the predicted ratings, use the below code.", "Now, the final question, how to make a real prediction with the model? Simple, just try:", "Great! That\u2019s all of the journeys. If you need the source code, visit my Github page \ud83d\udc95\ud83d\udc95.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "ML Enthusiast, Data Scientist, Python Developer. Love to share articles about technology."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F33842386338&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstacked-auto-encoder-as-a-recommendation-system-for-movie-rating-prediction-33842386338&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstacked-auto-encoder-as-a-recommendation-system-for-movie-rating-prediction-33842386338&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstacked-auto-encoder-as-a-recommendation-system-for-movie-rating-prediction-33842386338&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstacked-auto-encoder-as-a-recommendation-system-for-movie-rating-prediction-33842386338&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----33842386338--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----33842386338--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://lukesun.medium.com/?source=post_page-----33842386338--------------------------------", "anchor_text": ""}, {"url": "https://lukesun.medium.com/?source=post_page-----33842386338--------------------------------", "anchor_text": "Luke Sun"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F7b5b79d21508&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstacked-auto-encoder-as-a-recommendation-system-for-movie-rating-prediction-33842386338&user=Luke+Sun&userId=7b5b79d21508&source=post_page-7b5b79d21508----33842386338---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F33842386338&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstacked-auto-encoder-as-a-recommendation-system-for-movie-rating-prediction-33842386338&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F33842386338&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstacked-auto-encoder-as-a-recommendation-system-for-movie-rating-prediction-33842386338&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/photos/CiUR8zISX60", "anchor_text": "link"}, {"url": "https://medium.com/@vistaxjtu/restricted-boltzmann-machine-how-to-create-a-recommendation-system-for-movie-review-45599a406deb", "anchor_text": "article"}, {"url": "https://grouplens.org/datasets/movielens/", "anchor_text": "here"}, {"url": "https://pytorch.org/tutorials/beginner/blitz/neural_networks_tutorial.html#define-the-network", "anchor_text": "here"}, {"url": "https://discuss.pytorch.org/t/clone-and-detach-in-v0-4-0/16861", "anchor_text": "here"}, {"url": "https://github.com/luke4u/Movie-Rating-Prediction", "anchor_text": "Github"}, {"url": "https://medium.com/tag/autoencoder?source=post_page-----33842386338---------------autoencoder-----------------", "anchor_text": "Autoencoder"}, {"url": "https://medium.com/tag/recommendation-system?source=post_page-----33842386338---------------recommendation_system-----------------", "anchor_text": "Recommendation System"}, {"url": "https://medium.com/tag/pytorch?source=post_page-----33842386338---------------pytorch-----------------", "anchor_text": "Pytorch"}, {"url": "https://medium.com/tag/python?source=post_page-----33842386338---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/movie-review?source=post_page-----33842386338---------------movie_review-----------------", "anchor_text": "Movie Review"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F33842386338&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstacked-auto-encoder-as-a-recommendation-system-for-movie-rating-prediction-33842386338&user=Luke+Sun&userId=7b5b79d21508&source=-----33842386338---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F33842386338&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstacked-auto-encoder-as-a-recommendation-system-for-movie-rating-prediction-33842386338&user=Luke+Sun&userId=7b5b79d21508&source=-----33842386338---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F33842386338&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstacked-auto-encoder-as-a-recommendation-system-for-movie-rating-prediction-33842386338&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----33842386338--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F33842386338&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstacked-auto-encoder-as-a-recommendation-system-for-movie-rating-prediction-33842386338&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----33842386338---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----33842386338--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----33842386338--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----33842386338--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----33842386338--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----33842386338--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----33842386338--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----33842386338--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----33842386338--------------------------------", "anchor_text": ""}, {"url": "https://lukesun.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://lukesun.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Luke Sun"}, {"url": "https://lukesun.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "141 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F7b5b79d21508&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstacked-auto-encoder-as-a-recommendation-system-for-movie-rating-prediction-33842386338&user=Luke+Sun&userId=7b5b79d21508&source=post_page-7b5b79d21508--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F38f46069f6d3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstacked-auto-encoder-as-a-recommendation-system-for-movie-rating-prediction-33842386338&newsletterV3=7b5b79d21508&newsletterV3Id=38f46069f6d3&user=Luke+Sun&userId=7b5b79d21508&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}