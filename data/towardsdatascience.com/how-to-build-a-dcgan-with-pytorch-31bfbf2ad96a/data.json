{"url": "https://towardsdatascience.com/how-to-build-a-dcgan-with-pytorch-31bfbf2ad96a", "time": 1683010002.781429, "path": "towardsdatascience.com/how-to-build-a-dcgan-with-pytorch-31bfbf2ad96a/", "webpage": {"metadata": {"title": "How to Build a DCGAN with PyTorch | by Conor Lazarou | Towards Data Science", "h1": "How to Build a DCGAN with PyTorch", "description": "In this tutorial, we\u2019ll be building a simple GAN in PyTorch. As part of this tutorial we\u2019ll be discussing the PyTorch DataLoader and how to use it."}, "outgoing_paragraph_urls": [{"url": "https://arxiv.org/abs/1511.06434", "anchor_text": "DCGAN", "paragraph_index": 0}, {"url": "https://towardsdatascience.com/pytorch-and-gans-a-micro-tutorial-804855817a6b", "anchor_text": "vanilla GAN tutorial", "paragraph_index": 1}, {"url": "https://en.wikipedia.org/wiki/MNIST_database", "anchor_text": "MNIST", "paragraph_index": 2}, {"url": "https://github.com/myleott/mnist_png", "anchor_text": "this GitHub repo", "paragraph_index": 3}, {"url": "https://towardsdatascience.com/understanding-binary-cross-entropy-log-loss-a-visual-explanation-a3ac6025181a", "anchor_text": "binary cross-entropy", "paragraph_index": 20}, {"url": "http://flatland.ai", "anchor_text": "flatland.ai", "paragraph_index": 47}], "all_paragraphs": ["In this tutorial, we\u2019ll be building a simple DCGAN in PyTorch and training it to generate handwritten digits. As part of this tutorial we\u2019ll be discussing the PyTorch DataLoader and how to use it to feed real image data into a PyTorch neural network for training. PyTorch is the focus of this tutorial, so I\u2019ll be assuming you\u2019re familiar with how GANs work.", "It\u2019s not required but I recommended reading my vanilla GAN tutorial first; it explains a couple things that this tutorial takes for granted. I also recommend that you do this tutorial on a computer with a CUDA GPU, or keep a hefty book of Sudokus at the ready.", "That is to say, train a GAN that takes 16-dimensional random noise and produces images that look like real samples from the MNIST dataset.", "\u2026let\u2019s do a little housekeeping. If you haven\u2019t already, install the required versions of Python and the above libraries. Then, create your project directory. I called mine DCGAN. In that directory, make a directory called data. Then, navigate to this GitHub repo and download mnist_png.tar.gz. This compressed file contains the MNIST dataset as 70000 individual png files. Of course, we could be using PyTorch\u2019s built-in MNIST dataset, but then you wouldn\u2019t learn how to actually load image data for training. Decompress the file and put the mnist_png directory into your data directory. Create a file called dcgan_mnist.py, and put it in your DCGAN directory. You project directories should look like this:", "Finally, add the following to your dcgan_mnist.py script:", "Alright, now we\u2019re ready to start.", "Add the following to your dcgan_mnist.py script:", "The Generator inherits nn.Module, which is the base class for a PyTorch neural network. The Generator has three methods:", "The constructor, which stores the instance variables and calls _init_layers. There\u2019s not much to say here.", "This method instantiates the PyTorch modules (or \u201clayers\u201d, as they\u2019re called in other frameworks). These include:", "These could have been instantiated in the __init__ method, but I like to keep the module instantiation separate from the constructor. It\u2019s trivial for a model this simple, but helps keep the code simple as the model grows in complexity.", "This is the method our Generator uses to generate samples from random noise. The input tensor is passed to the first module, the output of that is passed to the next module, the output of that is passed to the next module, etc. It\u2019s fairly straightforward, but I\u2019d like to draw your attention to two interesting features:", "Add the following to your dcgan_mnist.py script:", "I won\u2019t go into too much detail about this one since it\u2019s very similar to the Generator but backwards. Take a good read through it and make sure you understand what it\u2019s doing.", "Add the following to your dcgan_mnist.py script:", "Let\u2019s step through the constructor line-by-line:", "The first two (non-docstring) lines of the constructor instantiate the Generator and the Discriminator, move them to the specified device, and store them as instance variables. The device is typically \u201ccpu\u201d, or \u201ccuda\u201d if you want to use a gpu.", "Next, we store noise_fn as an instance variable; noise_fn is a function that takes an integer num as input and returns num latent vectors as a PyTorch tensor as output with shape (num, latent_dim). This PyTorch tensor must be on the specified device.", "We store dataloader, a torch.utils.data.DataLoader object, as an instance variable; more on this later.", "Store the batch size and device as instance variables. Simple.", "Set the loss function to binary cross-entropy, and instantiate Adam optimizers for the generator and the discriminator. PyTorch optimizers need to know what they\u2019re optimizing. For the discriminator, this means all trainable parameters within the Discriminator network. Because our Discriminator class inherits from nn.Module, it has the parameters() method which returns all the trainable parameters in all its instance variables that are also PyTorch Modules. The same goes for the Generator.", "Targets for training, set to the specified device. Remember, the Discriminator is trying to classify real samples as 1 and generated samples as 0, while the Generator is trying to get the the Discriminator to misclassify generated samples as 1. We define and store them here so we don\u2019t have to remake them with each training step.", "A helper method for generating samples. Note that the no_grad context manager is used, which tells PyTorch not to keep track of gradients because this method is not used for training the network. Also note that, regardless of the specified device, the returned tensor is set to cpu, which is necessary for further use such as displaying samples or saving them to disk.", "This method performs one training step of the generator and returns the loss as a float. Let\u2019s step through it:", "Clear the generator\u2019s gradient. This is necessary, since PyTorch automatically keeps track of gradients and the computational network. We don\u2019t want one training step influencing the next.", "Get a batch of latent vectors, use them to generate samples, discriminate how realistic each samples is, then calculate the loss using the binary cross-entropy criterion. Note that by chaining these networks together we are creating a single computation graph starting from the latent vector, including the Generator and Discriminator networks, and ending at the loss.", "One of the main benefits of PyTorch is that it automatically keeps track of the computational graph and its gradients. By calling the backward method on the loss, PyTorch applies backpropagation and calculates the gradients of the loss with respect to each parameter in the computation graph. By then calling the Generator\u2019s optimizer\u2019s step method, the Generator\u2019s parameters (and only the Generator\u2019s parameters) are nudged slightly in the negative direction of their gradient.", "Finally, we return the loss. It\u2019s important to use the item method, so that we\u2019re returning a float instead of a PyTorch tensor. If we had instead returned the tensor, the Python garbage collector wouldn\u2019t be able to clean up the underlying computational graph, and we would quickly run out of memory.", "This method is very similar to train_step_generator, but with two notable differences. First:", "The context manager no_grad is used here to to tell PyTorch not to worry about keeping track of gradients. It\u2019s not necessary, but cuts down on unnecessary computation. Second:", "This line is really cool. loss_real is the Discriminator\u2019s loss for the real samples (and attached to it is its computational graph), and loss_fake is the loss (and graph) for the fake samples. PyTorch is able to combine these into one computational graph using the + operator. We then apply backpropagation and parameter updates to that combined computational graph. If you don\u2019t think that\u2019s awesomely simple, try rewriting this in another framework.", "This function trains the generator and discriminator for one epoch, which is one pass over the entire dataset. We\u2019ll come back to this after a brief detour.", "Add the following code to your script:", "This function builds, trains, and showcases the GAN.", "Import pyplot (for visualizing the generated digits) and time (for timing the training). Set the training batch size to 32, the number of epochs to 100, and the latent dimension to 16.", "This line checks if a cuda device is available. If it is, device is assigned that device; otherwise, device is assigned the cpu.", "This composite transform is used by the dataloader to pre-process images. The MNIST dataset that we downloaded earlier are .png files; when PyTorch loads them from disk, they have to be processed so that our neural network can use them properly. The transforms are, in order:", "Here we create the dataset by specifying its root and the transformations to apply. This is used to create the DataLoader:", "The DataLoader is an object that\u2026 well, it loads data from a dataset. Here we specify our batch size, tell the dataloader to shuffle the dataset between epochs, and use multiprocessing with two worker processes (if you\u2019re using Windows and this causes issues, set num_workers to 0). You can iterate through this dataloader, and with each iteration it will return a tuple containing:", "A function for generating random, normally-distributed noise.", "Let\u2019s revisit this one, now that we\u2019ve discussed what a DataLoader is. The method is pretty self-explanatory, albeit verbose, but I\u2019d like to focus on two lines:", "Here, we iterate through the dataloader. We wrap the dataloader in an enumerator so that we can keep track of the batch number, but as you can see the dataloader does indeed return a tuple as promised. We assign the batch of images tensor to real_samples, and ignore the labels since we don\u2019t need them. Then, in the loop, we move real_samples to the specified device. It\u2019s important that the input to the model and the model itself are on the same device; don\u2019t worry if you forget to do this, PyTorch will certainly let you know! Also, don\u2019t worry about the dataloader \u201crunning out\u201d. Once we\u2019ve iterated through the whole dataset, the loop will end, but if we try to iterate through it again it\u2019ll start back at the beginning (shuffling the images first, because we specified that when we made the dataloader).", "If you copy and pasted correctly, running the script should show you training stats for a couple of minutes followed by some generated digits. Hopefully, it looks something like this:", "If they look terrible and your loss exploded, try running it again (GANs are notoriously unstable). If it still doesn\u2019t work, drop a comment down below and we\u2019ll see if we can\u2019t debug it.", "Just for fun, I modified the script to see what the Generator was capable of after every 10 training steps. Here were the results.", "I think that\u2019s pretty good for only 1000 steps. Here\u2019s the loss over those training steps, split into 10 step \u201cepochs\u201d.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data science and ML consultant, generative artist, writer. flatland.ai"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F31bfbf2ad96a&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-dcgan-with-pytorch-31bfbf2ad96a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-dcgan-with-pytorch-31bfbf2ad96a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-dcgan-with-pytorch-31bfbf2ad96a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-dcgan-with-pytorch-31bfbf2ad96a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----31bfbf2ad96a--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----31bfbf2ad96a--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://conor-lazarou.medium.com/?source=post_page-----31bfbf2ad96a--------------------------------", "anchor_text": ""}, {"url": "https://conor-lazarou.medium.com/?source=post_page-----31bfbf2ad96a--------------------------------", "anchor_text": "Conor Lazarou"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdeb461dc9d26&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-dcgan-with-pytorch-31bfbf2ad96a&user=Conor+Lazarou&userId=deb461dc9d26&source=post_page-deb461dc9d26----31bfbf2ad96a---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F31bfbf2ad96a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-dcgan-with-pytorch-31bfbf2ad96a&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F31bfbf2ad96a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-dcgan-with-pytorch-31bfbf2ad96a&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://pixabay.com/photos/light-lamp-warm-kind-mellow-focus-4297386/", "anchor_text": "Pixabay"}, {"url": "https://arxiv.org/abs/1511.06434", "anchor_text": "DCGAN"}, {"url": "https://pytorch.org/get-started/locally/", "anchor_text": "This might help"}, {"url": "https://towardsdatascience.com/pytorch-and-gans-a-micro-tutorial-804855817a6b", "anchor_text": "vanilla GAN tutorial"}, {"url": "https://en.wikipedia.org/wiki/MNIST_database", "anchor_text": "MNIST"}, {"url": "https://commons.wikimedia.org/wiki/File:MnistExamples.png", "anchor_text": "Josef Steppan"}, {"url": "https://github.com/myleott/mnist_png", "anchor_text": "this GitHub repo"}, {"url": "https://towardsdatascience.com/understanding-binary-cross-entropy-log-loss-a-visual-explanation-a3ac6025181a", "anchor_text": "binary cross-entropy"}, {"url": "https://arxiv.org/abs/1411.1784", "anchor_text": "Conditional GAN"}, {"url": "https://github.com/ConorLazarou/pytorch-generative-models/blob/master/GAN/DCGAN/dcgan_mnist.py", "anchor_text": "here"}, {"url": "https://github.com/ConorLazarou/pytorch-generative-models/blob/master/GAN/DCGAN/dcgan_mnist.py", "anchor_text": "ConorLazarou/pytorch-generative-modelsA simple DCGAN implementation for generating MNIST digits.github.com"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----31bfbf2ad96a---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/tutorial?source=post_page-----31bfbf2ad96a---------------tutorial-----------------", "anchor_text": "Tutorial"}, {"url": "https://medium.com/tag/data-science?source=post_page-----31bfbf2ad96a---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/pytorch?source=post_page-----31bfbf2ad96a---------------pytorch-----------------", "anchor_text": "Pytorch"}, {"url": "https://medium.com/tag/python?source=post_page-----31bfbf2ad96a---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F31bfbf2ad96a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-dcgan-with-pytorch-31bfbf2ad96a&user=Conor+Lazarou&userId=deb461dc9d26&source=-----31bfbf2ad96a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F31bfbf2ad96a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-dcgan-with-pytorch-31bfbf2ad96a&user=Conor+Lazarou&userId=deb461dc9d26&source=-----31bfbf2ad96a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F31bfbf2ad96a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-dcgan-with-pytorch-31bfbf2ad96a&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----31bfbf2ad96a--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F31bfbf2ad96a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-dcgan-with-pytorch-31bfbf2ad96a&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----31bfbf2ad96a---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----31bfbf2ad96a--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----31bfbf2ad96a--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----31bfbf2ad96a--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----31bfbf2ad96a--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----31bfbf2ad96a--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----31bfbf2ad96a--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----31bfbf2ad96a--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----31bfbf2ad96a--------------------------------", "anchor_text": ""}, {"url": "https://conor-lazarou.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://conor-lazarou.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Conor Lazarou"}, {"url": "https://conor-lazarou.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "1.1K Followers"}, {"url": "http://flatland.ai", "anchor_text": "flatland.ai"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdeb461dc9d26&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-dcgan-with-pytorch-31bfbf2ad96a&user=Conor+Lazarou&userId=deb461dc9d26&source=post_page-deb461dc9d26--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F51220adfabae&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-dcgan-with-pytorch-31bfbf2ad96a&newsletterV3=deb461dc9d26&newsletterV3Id=51220adfabae&user=Conor+Lazarou&userId=deb461dc9d26&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}