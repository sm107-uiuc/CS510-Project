{"url": "https://towardsdatascience.com/comprehensions-and-generator-expression-in-python-2ae01c48fc50", "time": 1683011617.91117, "path": "towardsdatascience.com/comprehensions-and-generator-expression-in-python-2ae01c48fc50/", "webpage": {"metadata": {"title": "Comprehensions and Generator Expression in Python | by Iffat Malik Gore | Towards Data Science", "h1": "Comprehensions and Generator Expression in Python", "description": "To understand Python\u2019s Comprehension capabilities, it\u2019s important to understand the concept of comprehension at first. Comprehension in programming is nothing but writing the (existing) code in a\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/python-string-interpolation-829e14e1fc75", "anchor_text": "string interpolation", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/Set-builder_notation", "anchor_text": "set-builder notation", "paragraph_index": 10}, {"url": "https://en.wikipedia.org/wiki/Cartesian_product", "anchor_text": "cartesian product", "paragraph_index": 28}, {"url": "https://github.com/PhoenixIM/Pure_Python/blob/master/comprehensions.ipynb", "anchor_text": "GitHub Repository", "paragraph_index": 43}, {"url": "https://medium.com/@iffatm/membership", "anchor_text": "https://medium.com/@iffatm/membership", "paragraph_index": 45}], "all_paragraphs": ["To understand Python\u2019s Comprehension capabilities, it\u2019s important to understand the concept of comprehension at first. Comprehension in programming is nothing but writing the (existing) code in a short and concise manner, mostly one single line. It is constructing a new sequence by shortening the existing one. Being good at code comprehension is fairly an important skill. You need to understand the implementation to apply the comprehension capabilities of programming. Python-3 supports comprehensions for,", "In this article, we are going to explore this in-depth. Let\u2019s first revise ways to create a List in Python.", "f\u201dnum_cube[] = {num_cube}\u201d used in print( ) is f-string formatting styles of string interpolation introduced in Python 3.6.", "2. Using for loop,Define an empty list and add elements using built-in method append() in a for loop. Here we are creating a List of cubes of even numbers ranging between 1 to 10. We have defined an empty List num_cube_floop and a for loop iterating over range(1,11). Condition n%2==0 will makes sure only even numbers are evaluated for the output expression n**3.", "3. Using \u2018+=\u2019 operator,Similar to the above example we have defined an empty List num_cube_op and for loop is iterating over the input file list_input.txt. We are separating the input data using split( ) before adding it to the List using the operator \u2018+=\u2019.", "4. Using map(),Here, we are using map() to create a List from the existing List. For anyone new to map() and lambda expression,", "map(function_to_apply, iterable) \u2014 it applies \u2018function\u2019 to all the elements of an \u2018iterable\u2019.", "lambda parameters:output expression \u2014 anonymous function, it is defined without a name and does not follow normal python function conventions.", "In the below code, map( ) applies lambda expression(calculates a cube of the number) to existing List numbers and cast the output using list( ) before the result is assigned to new List num_cube_maps.", "There is yet another way of creating a List using Python\u2019s Comprehension capabilities. It lets us create a List in a single line of code. It may seem a little difficult to understand at first as the syntax can be intimidating but here we are going to break it down for a simpler understanding.", "List Comprehension\u2019s general syntax is similar to set-builder notation. In set-theory, \u201c Set-builder notation is a mathematical notation of defining a set by either listing out all the elements of the set or by describing the properties that all set elements must satisfy.\u201d", "So, the second part of this definition; defining a set by its properties is also called set comprehension in set theory.", "The left side of \u2018|\u2019 is an output expression and the right side is a rule which must be satisfied by all the elements of a set.", "Here, output expression(n3) defines the elements of the set and rule is consists of input set (n \u03f5 N) and filter conditions (n<=10 and n!=0). The above set definition basically maps all the natural numbers in set N (0,1,2,\u2026.) and limits the input with n<=10 and n!=0. The resulting set is,", "Similarly, the most basic syntax of List Comprehension is,", "Let\u2019s dive straight into the examples,", "In the above example, we need to create a List of all the characters of the string literal. The usual way of achieving this is by defining an empty List and using append( ) method inside a for loop to add the elements to our List. Here for loop is iterating over the string literal name and append( ) adds all single characters of the string literal to List name_ltr. The same result can be obtained using List Comprehension without even worrying about defining a List or using append( ).", "If we examine the syntax, List Comprehension is nothing but the rearrangement of the for loop and the output expression. We put the output expression at the beginning of the comprehension syntax followed by the loop. It\u2019s pretty straightforward.", "Let\u2019s take this a little further by adding a conditional statement to it. At the beginning of the article, we saw four different ways of creating a List of the cube of even numbers, one was using for loop.", "As we can see in the code block, four lines of code are reduced to a single line when using List Comprehension.", "The syntax is similar to the basic format we discussed in the previous section, conditional if-statement is added towards the end as shown in the below image.", "Let\u2019s take another example, create a List of words starting from a specific letter of a given string literal.", "Here, statement.split( ) separates(default separator is white space)all the words within the string literal and for loop will be iterated through it to filter all the words starting from letter \u2018P\u2019 and result will be added to the List using words.append(w). While using List Comprehension, output expression(which is always placed at the beginning) w is placed first, for loop is iterating over the string literal followed by if-condition.", "The placement of if-else statement is different than the previously discussed scenarios in List Comprehension. When if-else conditional block is used, it is placed right after the output expression as shown in the below image.", "Let\u2019s create a List of numbers<10 where we have to calculate square for even numbers and cube for the odd.", "The above code block filters the numbers based on condition num%2==0 and accordingly execute either square_cube.append(num**2) or square_cube.append(num**3). While using List Comprehension output expression associated with if-statement is placed first and the other condition is followed by the else keyword.", "It\u2019s really up to us how to convert the usual for loops into List comprehension, in yet another odd/even numbers example, I have created two Lists within a List numbers and the code block is self-explanatory.", "The difference is how the List is constructed using comprehension, two separate expressions are defined in order to create two Lists within a List.", "Let\u2019s take another example before wrapping up the List Comprehension. It is pretty inclusive and most of the time it can be used neatly for nested loops. We need to create a List of the cartesian product of two existing Lists char_list and int_list. One for loop is iterating over char_list and another over int_list. Elements from both the Lists are added to the resulting List cartesian as a tuple using cartesian.append((x,y)).", "Output expression is a tuple and hence it is parenthesized. In List Comprehension nested for loops are placed in the order they are expected to be executed.", "In the below code block, person is a List consisting of two dictionaries. Each of them has two keys, name and language. Now we have to create a List of values associated with a key, language. First for loop is iterating through the length of a List person and second, for loop is set up to get values of the key, language at the given index.", "The same result is achieved using List Comprehension by rearranging for loops in a single line.", "Set Comprehension functions the same way as List Comprehension except for the fact that it returns a Set and curly braces { } are used instead of square brackets [ ]. As it returns a Set, it will be of unique elements (Set property).", "Consider the same example we have discussed earlier, a List person consisting of three dictionary entries. If we compare the syntax of List and Set Comprehension in the code block, the difference is just square brackets and curly braces. Though output is different, unlike List Comprehension, Set Comprehension returns unique values.", "Unlike both List and Set Comprehension, Dictionary Comprehension is used when data is expected to be in a key-value pairing format. Let\u2019s continue to the legacy of our number cube examples.", "Two Lists are created using List Comprehension we have discussed earlier.", "We need to create a Dictionary where the value of a key is the number from List numbers and value comes from the second List num_cubes. for loop is iterating over zip(numbers,num_cube) for getting keys and values as tuple (key,value).", "zip(iterables) \u2014 maps the similar indexes of multiple containers and returns an iterator which is a series of tuples containing elements from each iterable passed in argument.", "The output expression key:value, maps the values returned from zip(numbers,num_cube) as shown in the below image.", "The syntax of Generator Expression is similar to List Comprehension except it uses parentheses ( ) instead of square brackets [ ]. Generators are special iterators in Python which returns the generator object. The point of using it, is to generate a sequence of items without having to store them in memory and this is why you can use Generator only once.", "Here, we have created a List num_cube_lc using List Comprehension and Generator Expression is defined as num_cube_generator.", "The output of Generator Expression is not like the one of List Comprehension; However, when used with sum( ) it does pass values generated from the expression.", "Comprehensions are surely an effective way to reduce the line of code in general. Code is easier to read and understand most of the time; however, if you have multiple nested loops in your program logic, using Comprehension does make you sacrifice readability. Though Comprehensions are considered a more pythonic way of coding by some, it\u2019s really up to you to determine the best situation to use or avoid it. Some of the useful resources for the topic are,", "The code used for this article can be accessed from my GitHub Repository.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Technology Enthusiast | Loves Humor | Hobby Runner | Avid Reader | Membership Referral:- https://medium.com/@iffatm/membership"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F2ae01c48fc50&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehensions-and-generator-expression-in-python-2ae01c48fc50&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehensions-and-generator-expression-in-python-2ae01c48fc50&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehensions-and-generator-expression-in-python-2ae01c48fc50&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehensions-and-generator-expression-in-python-2ae01c48fc50&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----2ae01c48fc50--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----2ae01c48fc50--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://iffatm.medium.com/?source=post_page-----2ae01c48fc50--------------------------------", "anchor_text": ""}, {"url": "https://iffatm.medium.com/?source=post_page-----2ae01c48fc50--------------------------------", "anchor_text": "Iffat Malik Gore"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F88491120e677&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehensions-and-generator-expression-in-python-2ae01c48fc50&user=Iffat+Malik+Gore&userId=88491120e677&source=post_page-88491120e677----2ae01c48fc50---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2ae01c48fc50&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehensions-and-generator-expression-in-python-2ae01c48fc50&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2ae01c48fc50&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehensions-and-generator-expression-in-python-2ae01c48fc50&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/python-string-interpolation-829e14e1fc75", "anchor_text": "string interpolation"}, {"url": "https://en.wikipedia.org/wiki/Set-builder_notation", "anchor_text": "set-builder notation"}, {"url": "https://en.wikipedia.org/wiki/Cartesian_product", "anchor_text": "cartesian product"}, {"url": "https://en.wikipedia.org/wiki/Set-builder_notation#cite_note-2", "anchor_text": "Set-builder notation in set theory"}, {"url": "https://docs.python.org/3/tutorial/datastructures.html", "anchor_text": "5.1.3 List Comprehension"}, {"url": "https://docs.python.org/3/howto/functional.html?highlight=generator%20compression", "anchor_text": "Generator Expression and Comprehension"}, {"url": "https://github.com/PhoenixIM/Pure_Python/blob/master/comprehensions.ipynb", "anchor_text": "GitHub Repository"}, {"url": "https://medium.com/tag/python-programming?source=post_page-----2ae01c48fc50---------------python_programming-----------------", "anchor_text": "Python Programming"}, {"url": "https://medium.com/tag/list-comprehension?source=post_page-----2ae01c48fc50---------------list_comprehension-----------------", "anchor_text": "List Comprehension"}, {"url": "https://medium.com/tag/data-science?source=post_page-----2ae01c48fc50---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/generator?source=post_page-----2ae01c48fc50---------------generator-----------------", "anchor_text": "Generator"}, {"url": "https://medium.com/tag/python?source=post_page-----2ae01c48fc50---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2ae01c48fc50&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehensions-and-generator-expression-in-python-2ae01c48fc50&user=Iffat+Malik+Gore&userId=88491120e677&source=-----2ae01c48fc50---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2ae01c48fc50&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehensions-and-generator-expression-in-python-2ae01c48fc50&user=Iffat+Malik+Gore&userId=88491120e677&source=-----2ae01c48fc50---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2ae01c48fc50&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehensions-and-generator-expression-in-python-2ae01c48fc50&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----2ae01c48fc50--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F2ae01c48fc50&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehensions-and-generator-expression-in-python-2ae01c48fc50&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----2ae01c48fc50---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----2ae01c48fc50--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----2ae01c48fc50--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----2ae01c48fc50--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----2ae01c48fc50--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----2ae01c48fc50--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----2ae01c48fc50--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----2ae01c48fc50--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----2ae01c48fc50--------------------------------", "anchor_text": ""}, {"url": "https://iffatm.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://iffatm.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Iffat Malik Gore"}, {"url": "https://iffatm.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "157 Followers"}, {"url": "https://medium.com/@iffatm/membership", "anchor_text": "https://medium.com/@iffatm/membership"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F88491120e677&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehensions-and-generator-expression-in-python-2ae01c48fc50&user=Iffat+Malik+Gore&userId=88491120e677&source=post_page-88491120e677--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F8fc05cef6c7c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehensions-and-generator-expression-in-python-2ae01c48fc50&newsletterV3=88491120e677&newsletterV3Id=8fc05cef6c7c&user=Iffat+Malik+Gore&userId=88491120e677&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}