{"url": "https://towardsdatascience.com/coding-a-kryptonite-for-spammers-the-naive-bayes-filter-e533e59a681f", "time": 1683005855.454664, "path": "towardsdatascience.com/coding-a-kryptonite-for-spammers-the-naive-bayes-filter-e533e59a681f/", "webpage": {"metadata": {"title": "Coding a \u2018Kryptonite\u2019 for Spammers \ud83d\udce9~ the Naive Bayes Filter | by Gerasimos Plegas | Towards Data Science", "h1": "Coding a \u2018Kryptonite\u2019 for Spammers \ud83d\udce9~ the Naive Bayes Filter", "description": "A step-by-step guide to make an app that filters out spam sms, using Python."}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/can-a-data-scientist-replace-a-dj-spotify-manipulation-with-python-fbbd4a45ffd5", "anchor_text": "Spotify playlist using Python", "paragraph_index": 4}, {"url": "https://archive.ics.uci.edu/ml/datasets/sms+spam+collection", "anchor_text": "Repository", "paragraph_index": 7}, {"url": "https://scikit-learn.org/stable/modules/naive_bayes.html", "anchor_text": "source", "paragraph_index": 13}, {"url": "https://en.wikipedia.org/wiki/Additive_smoothing", "anchor_text": "here", "paragraph_index": 16}, {"url": "https://github.com/amueller/word_cloud", "anchor_text": "wordcloud", "paragraph_index": 18}, {"url": "https://github.com/makispl/SMS-Spam-Filter-Naive-Bayes.git", "anchor_text": "notebook", "paragraph_index": 48}, {"url": "https://inmachineswetrust.com/posts/sms-spam-filter/", "anchor_text": "Using Natural Language Processing to Build a Spam Filter for Text Messages", "paragraph_index": 49}, {"url": "https://www.kdnuggets.com/2017/12/general-approach-preprocessing-text-data.html", "anchor_text": "A General Approach to Preprocessing Text Data", "paragraph_index": 50}, {"url": "https://www.csmonitor.com/Technology/2015/0713/Google-fights-spam-with-artificial-intelligence", "anchor_text": "Google Fights Spam with Artificial Intelligence", "paragraph_index": 52}, {"url": "http://ai.googleblog.com/2015/06/inceptionism-going-deeper-into-neural.html", "anchor_text": "Inceptionism: Going Deeper into Neural Networks", "paragraph_index": 53}, {"url": "https://www.linkedin.com/in/gerasimosplegas", "anchor_text": "https://www.linkedin.com/in/gerasimosplegas", "paragraph_index": 55}], "all_paragraphs": ["\u201cIf it is too good to be true... it is probably a fraud.\u201d \u2014 Ron Weber", "Spam is generally defined as the electronic junk content, coming from various communication channels like emails, sms etc. Most often, it comes through advertising for some product, delivered in a mailing list or even phone number lists.", "Nowadays, the real problem is dual; spamming wastes people\u2019s time, while it also \u201ceats up\u201d a lot of network bandwidth. Consequently, many organisations and individuals take continuous and immense effort to fight back. Data Science, of course, couldn\u2019t be absent from the battle front\u2026", "The scope of this project is to demonstrate how Data Science\u2019s tool belt answers for counter-attacking the spamming activity, with great effect. A case study of Supervised ML (Machine Learning) is developed along the way, in which we create a Naive Bayes Classification algorithm that takes as input messages (sms, emails etc), detects and filters out the spam ones.", "This article is as a prequel of the last one, where we managed to develop and refine a Spotify playlist using Python (and only!). To better recall the concept, it was when \u2018Data Corp\u2019 hosted a party (hence the playlist) in favour of its young customers, in order to award them for the steep rise of sales, in the Youth Marketing segment. But how did the firm manage to earn such a trophy \u2014 which was the achievement it conquered in order to thrive in such a demanding market? Please, picture the following scenario\u2026", "The Data Corp board decided to boost the youth market sales, by introducing a new mobile app, under the \u2018Communication\u2019 category. In order to beat its rivals, a potential competitive advantage was scrutinised \u2014 anti-spamming. Particularly, the Data Science department I belong to, was charged to come in contact with the engineering team and provide them with an algorithm, that takes as input the user\u2019s sms and automatically filters out the spam ones. This algorithm would be implemented to the new app and should score an accuracy ratio of at least 90% (the standard one achieved by competitors).", "To better communicate the outcomes, a number of assumptions were made:", "#1: Conforming to the GDPR obligations, the firm doesn\u2019t utilize any clients\u2019 messages. Instead, it only processes publicly available data sets and in particular the SMS Spam Collection, uploaded on the UCI Machine Learning Repository.", "#2: We are going to analyse the \u201ccore\u201d of the algorithm, that is, the mechanisms that filter out spamming content. [The app development belongs to the engineering team].", "The following roadmap is meant to be followed, in order to accomplish our mission:", "The Naive Bayes algorithm has a few variations and depending on the math and assumptions made, we distinguish the following 3, most popular, versions:", "This time we\u2019ll discuss the Multinomial algorithm. The computer learns how humans classify messages as spam/non-spam (from now on \u201cham\u201d), then uses that knowledge to estimate probabilities for the new (incoming) messages and classify them, accordingly.", "In a nutshell, when a new message consisting of w1, w2, \u2026, wn words comes in, the Naive Bayes algorithm tries to estimate and compare the equations of Set #1, by making use of the Set #2:", "If P(Spam|w1,w2,\u2026wn)>P(Spamc|w1,w2,\u2026wn), the algorithm classifies the message as spam and vice-versa. For a thorough study of the above equations, you may refer to this source.", "#1: The words in each message are conditionally independent, albeit they are often in a relationship of dependence.", "#2: Whenever we deal with words that are not part of the vocabulary (see the \u2018Feature Extraction\u2019 section), we ignore them while calculating probabilities.", "#3: In cases of words (i.e. \u201cmoney\u201d) that occur in only one category (i.e. spam), the complement probability P(Spamc|\u201cmoney\u201d) is always 0. To avoid such an effect, we apply a technique known as additive smoothing, by adding a smoothing parameter \u03b1. We are going to use the Laplace smoothing, by setting a=1 (read more here).", "The following components/libraries are essential, in order to develop and run the algorithm:", "The full data set consists of 5.572 SMS messages (already classified by humans), which are distributed among ham and spam categories by approximately 87% and 13%, respectively. Depicting its wordcloud, we can get an alternative reflection of the predominant words:", "We randomise it, so as to retain the original spam/ham proportions and then divide it into two sub-sets, opting for a 80% \u2014 20% split-up:", "Obviously, the original spam/ham proportions were effectively retained.", "In NLP, we aim at teaching computers to contextually understand and manipulate human languages, albeit they only process data in numerical form. For, we are going to firstly apply a number of preprocessing techniques, so as the data set to be left with artefacts that have high meaningful weight. Then, we will encode the data set\u2019s messages into numeric vectors (feature extraction) [1]. For a better feeling of the overall process, you may refer to the following flow-chart:", "In general, as per the reference [2], we distinguish 3 main components of text preprocessing: Normalization, Tokenization and Substitution.", "At first, texts need to be normalized. That means taking a series of actions in order to put a text\u2019s words to the same \u201cbaseline\u201d, fostering that way a more uniform process. This step includes removing punctuation, converting words to the same case (upper/lower) and so on. In our framework, we will approach that, in 3 distinct steps:", "1. Lemmatization: The process of capturing the canonical forms of tokens, based on their lemma, i.e. better \u2192 good. More sophisticated as compared to stemming, it returns more meaningful tokens, by considering the context in which they are used in a sentence. We are going to utilize the WordNet\u2019s lexical database of English, which gives remarkable results.", "2. Stemming: The process used to reduce \u201cinflected\u201d words to their word root (stem), by eliminating any affixes (usually suffixed & prefixes). For example, stemming, stemmed \u2192 stem. That way, we keep only the semantic meaning of similar words, while also achieving an overall reduction of the number of tokens (words). The latter ensures a decreased vocabulary, therefore less occupied computational resources. There are several stemming models and we will use the Porter one.", "3. Custom actions: A set of actions undertaken for further cleaning text data, depending upon each case. For this one of SMS texts, we eliminate the addresses, numbers and symbols ($), remove punctuation (? ! etc), collapse whitespaces and convert all the tokens to lower case. Additionally, we remove Stop-words (like the, for, is, etc), which occur frequently in a sentence, without contributing significantly to the overall meaning.", "The process of splitting long strings of texts to smaller pieces (paragraphs into sentences and those into words). That is, a list of tokens used in the text, is created, known also as corpus. Python, luckily, has a package called NLTK (Natural Language Toolkit) which includes a ton of useful functions to manipulate text. We will use the nltk.word_tokenize one.", "This is a much more task-specific step, in that it refines very special data sets. For instance, texts scrapped by the web, which should be cleaned by the HTML, XML and markup \u201cfootprints\u201d. In our case, we process pure SMS texts, eventually skipping this part.", "To better feel the aforementioned techniques\u2019 effect, let\u2019s apply them all to a specific SMS and get the final outcome:", "\u26a0\ufe0f The trade-off between implementing one or more of the above techniques [stop words, stemming etc] shall be inspected, in every single case, per se. For instance, we might skip lemmatization in favour of stemming.", "ML algorithms don\u2019t understand text at its pure form, but expect the input to be in the numeric one. Hence, it is essential to encode our final tokens into numbers \u2014 aka feature vectors \u2014 a process known as vectorization [3]. Among the available types, we opt to use the Count vectorization. This one creates a matrix, which contains the count of each unique token in every data set row (SMS).", "Referring to the common literature, you may come by the term BoW (Bag-of-Words). That is, essentially, a model commonly used in classification methods, where the frequency of occurrence of each token, is used as a feature for training a classifier [4].", "At first, we calculate P(Spam), P(Spamc), NSpam and NVocabulary which have constant values in the equation sets, for every new message (red mark):", "Next, we calculate the P(wi|Spam) and P(wi|Spamc) values (blue mark). Note that as they depend on the training_set, which doesn\u2019t change, they also remain constant.", "Having calculated all the parameters and constants, we can then create the spam filter. It can be easily perceived as a function, that takes in a new message (w1, w2, \u2026, wn), calculates P(Spam|w1, w2, \u2026, wn) and P(Spamc|w1, w2, \u2026, wn), compares them and:", "Now comes the most enjoyable part; testing the algo with new SMS texts, that haven\u2019t been used in the training section. The first one comes from advertising content, while the second from a private conversation.", "Finally, we try to determine how well the filter performs, by classifying the 1.114 messages of the test_set. The function is applied on every new SMS and registers its label into a new column sms_predicted.", "Our spam filter inspected 1.114 unknown messages (not seen in training) and managed to classify 1.087 correctly. The measured accuracy of almost 97.6% is fair above the firm\u2019s target (90%) and as a result, our model is going to be deployed to production!", "Communication channels are constantly attacked by fraudulent mechanisms, which tend to \u201csteal\u201d time and money from people and organizations. That said, Data Science is capable to offer valuable solutions. As far back as 2015, Google had already achieved a 99.9% accuracy in preventing spam from reaching inboxes [4]. On top of that, by using its \u201cneural network\u201d [5], it moved full-bore to close that remaining tenth of a percent of error!", "Yet, the selling-point of Data Science relies on its capability to offer valuable solutions, even at the elementary level of the amateur user. Such a preliminary case study was developed herein and solved by training a Naive Bayes classification model, achieving finally a remarkable accuracy ratio of 97%. In summary:", "(a) We processed a data set of messages and by applying:", "we managed to convert them into encoded vectors \u2014 \u2018piece of cake\u2019 for a machine to understand and infer meaningful value from.", "(b) We trained our model by calculating the respective probabilities, as per the Bayes Theorem.", "(c) Finally, by applying the algorithm on the test_set, we evaluated the model\u2019s capability to effectively label new messages.", "Eventually, though we do acknowledge the existence and activity of spamming structures at the expense of our time and money, we should always keep in mind that Data Science already counteracts in favour of humanity\u2026", "Besides, as Mokokoma Mokhonoana aptly quotes:", "\u201cSpam is a waste of the receivers\u2019 time and a waste of the sender\u2019s optimism.\u201d", "Thank you for reading! The Jupyter notebook is prepared for immediate running. Should any question arise, feel free to leave a comment below. Have a nice week, stay home, stay positive, keep yourself secure and\u2026 your inbox too!", "[1] H. Red, Using Natural Language Processing to Build a Spam Filter for Text Messages (2017), Blog \u201cIn Machines We Trust\u201d", "[2] M. Mayo, A General Approach to Preprocessing Text Data (2017), KDnuggets", "[3] N. Kumar, Preprocessing of Raw Data in NLP: Tokenization, Stemming, Lemmatization and Vectorization (2019), Online Publication \u201cThe Professionals Point\u201d", "[4] G. Starr, Google Fights Spam with Artificial Intelligence (2015), Independent International News Organization \u201cThe Christian Science Monitor\u201d", "[5] A. Mordvintsev, C. Olah, M. Tyka, Inceptionism: Going Deeper into Neural Networks (2015), Google AI Blog", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Aeronautical QA Engineer at HAF | Editorial Associate & Writer @TDataScience | Electronics Eng HAA | MBA HoU | https://www.linkedin.com/in/gerasimosplegas"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fe533e59a681f&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcoding-a-kryptonite-for-spammers-the-naive-bayes-filter-e533e59a681f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcoding-a-kryptonite-for-spammers-the-naive-bayes-filter-e533e59a681f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcoding-a-kryptonite-for-spammers-the-naive-bayes-filter-e533e59a681f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcoding-a-kryptonite-for-spammers-the-naive-bayes-filter-e533e59a681f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----e533e59a681f--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----e533e59a681f--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@gerasimos_plegas?source=post_page-----e533e59a681f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@gerasimos_plegas?source=post_page-----e533e59a681f--------------------------------", "anchor_text": "Gerasimos Plegas"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ea2b50f5cb8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcoding-a-kryptonite-for-spammers-the-naive-bayes-filter-e533e59a681f&user=Gerasimos+Plegas&userId=3ea2b50f5cb8&source=post_page-3ea2b50f5cb8----e533e59a681f---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe533e59a681f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcoding-a-kryptonite-for-spammers-the-naive-bayes-filter-e533e59a681f&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe533e59a681f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcoding-a-kryptonite-for-spammers-the-naive-bayes-filter-e533e59a681f&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://pixabay.com/users/cattu-1462001/", "anchor_text": "cattu"}, {"url": "https://pixabay.com/photos/spam-mail-email-mailbox-garbage-964521/", "anchor_text": "Pixabay"}, {"url": "https://unsplash.com/@usgs?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "USGS"}, {"url": "https://unsplash.com/photos/X9fUNniobXQ", "anchor_text": "Unsplash"}, {"url": "https://towardsdatascience.com/can-a-data-scientist-replace-a-dj-spotify-manipulation-with-python-fbbd4a45ffd5", "anchor_text": "Spotify playlist using Python"}, {"url": "https://archive.ics.uci.edu/ml/datasets/sms+spam+collection", "anchor_text": "Repository"}, {"url": "https://scikit-learn.org/stable/modules/naive_bayes.html", "anchor_text": "source"}, {"url": "https://en.wikipedia.org/wiki/Additive_smoothing", "anchor_text": "here"}, {"url": "https://jupyter.org/index.html", "anchor_text": "Jupyter"}, {"url": "https://jupyter.org/install.html", "anchor_text": "here"}, {"url": "https://www.nltk.org", "anchor_text": "NLTK"}, {"url": "https://en.wikipedia.org/wiki/Stop_words", "anchor_text": "Stop-words"}, {"url": "https://www.nltk.org/_modules/nltk/tokenize/punkt.html", "anchor_text": "Punkt"}, {"url": "https://wordnet.princeton.edu/download", "anchor_text": "WordNet\u00ae"}, {"url": "https://github.com/amueller/word_cloud", "anchor_text": "wordcloud"}, {"url": "https://unsplash.com/@arianismmm?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Arian Darvishi"}, {"url": "https://unsplash.com/photos/wh-RPfR_3_M", "anchor_text": "Unsplash"}, {"url": "https://github.com/makispl/SMS-Spam-Filter-Naive-Bayes.git", "anchor_text": "notebook"}, {"url": "https://inmachineswetrust.com/posts/sms-spam-filter/", "anchor_text": "Using Natural Language Processing to Build a Spam Filter for Text Messages"}, {"url": "https://www.kdnuggets.com/2017/12/general-approach-preprocessing-text-data.html", "anchor_text": "A General Approach to Preprocessing Text Data"}, {"url": "https://www.csmonitor.com/Technology/2015/0713/Google-fights-spam-with-artificial-intelligence", "anchor_text": "Google Fights Spam with Artificial Intelligence"}, {"url": "http://ai.googleblog.com/2015/06/inceptionism-going-deeper-into-neural.html", "anchor_text": "Inceptionism: Going Deeper into Neural Networks"}, {"url": "https://medium.com/tag/data-science?source=post_page-----e533e59a681f---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----e533e59a681f---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/statistics?source=post_page-----e533e59a681f---------------statistics-----------------", "anchor_text": "Statistics"}, {"url": "https://medium.com/tag/nlp?source=post_page-----e533e59a681f---------------nlp-----------------", "anchor_text": "NLP"}, {"url": "https://medium.com/tag/programming?source=post_page-----e533e59a681f---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe533e59a681f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcoding-a-kryptonite-for-spammers-the-naive-bayes-filter-e533e59a681f&user=Gerasimos+Plegas&userId=3ea2b50f5cb8&source=-----e533e59a681f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe533e59a681f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcoding-a-kryptonite-for-spammers-the-naive-bayes-filter-e533e59a681f&user=Gerasimos+Plegas&userId=3ea2b50f5cb8&source=-----e533e59a681f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe533e59a681f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcoding-a-kryptonite-for-spammers-the-naive-bayes-filter-e533e59a681f&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----e533e59a681f--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fe533e59a681f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcoding-a-kryptonite-for-spammers-the-naive-bayes-filter-e533e59a681f&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----e533e59a681f---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----e533e59a681f--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----e533e59a681f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----e533e59a681f--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----e533e59a681f--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----e533e59a681f--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----e533e59a681f--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----e533e59a681f--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----e533e59a681f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@gerasimos_plegas?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@gerasimos_plegas?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Gerasimos Plegas"}, {"url": "https://medium.com/@gerasimos_plegas/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "174 Followers"}, {"url": "https://www.linkedin.com/in/gerasimosplegas", "anchor_text": "https://www.linkedin.com/in/gerasimosplegas"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ea2b50f5cb8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcoding-a-kryptonite-for-spammers-the-naive-bayes-filter-e533e59a681f&user=Gerasimos+Plegas&userId=3ea2b50f5cb8&source=post_page-3ea2b50f5cb8--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F4def8e907692&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcoding-a-kryptonite-for-spammers-the-naive-bayes-filter-e533e59a681f&newsletterV3=3ea2b50f5cb8&newsletterV3Id=4def8e907692&user=Gerasimos+Plegas&userId=3ea2b50f5cb8&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}