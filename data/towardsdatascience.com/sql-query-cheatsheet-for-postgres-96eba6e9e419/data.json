{"url": "https://towardsdatascience.com/sql-query-cheatsheet-for-postgres-96eba6e9e419", "time": 1683005447.438288, "path": "towardsdatascience.com/sql-query-cheatsheet-for-postgres-96eba6e9e419/", "webpage": {"metadata": {"title": "SQL Query Cheatsheet for Postgres | by GreekDataGuy | Towards Data Science", "h1": "SQL Query Cheatsheet for Postgres", "description": "I write a lot of raw SQL whether I\u2019m loading data in an app, or querying data to train a machine learning model. As engineers who write lots of code, some commands will stick in our memory, but some\u2026"}, "outgoing_paragraph_urls": [{"url": "http://gmail.com", "anchor_text": "gmail.com", "paragraph_index": 94}], "all_paragraphs": ["I write a lot of raw SQL whether I\u2019m loading data in an app, or querying data to train a machine learning model.", "As engineers who write lots of code, some commands will stick in our memory, but some we\u2019ll have to look up. As I heard once and like to repeat - good engineers are like indexes, they can look up information quickly.", "This is my personal cheat sheet for SQL, written with Postgres in mind but roughly applicable to other relational databases. This exclusively covers queries. No inserts, deletes, indexing or other Postgres functionality. We\u2019ll start simple and work towards more interesting queries.", "First, we\u2019ll create a database and insert some data, then we\u2019ll execute every SQL query on that data and investigate the output.", "Contents:1) Setup2) Selects and Counts3) Limit, Offset and Order By4) Joins5) Intersect, Union and Except6) Aliasing7) Aggregating Data8) Modifying Selected Values9) Where Clauses", "Create a few related tables with different data types. I\u2019ve imagined the data around a fictional company\u2019s CRM (customer relationship management) system so you can relate it to real life.", "After you\u2019ve created a database. Open your favorite SQL editor and run the following to create tables for users, mailing_lists, products and sales.", "This is the basic query around which everything later will be based.", "Get all sales data without filtering or manipulating it. Simple.", "Retrieve only the name and location of users, excluding other information like when a record was created.", "Useful if you\u2019re sharing with someone non-technical who doesn\u2019t necessarily care about metadata and foreign keys.", "Removes duplicates in a specific column from the query.", "Useful if you wanted to find all users who had ever bought something once, rather than a list of every transaction from the sales table.", "Count the records in a table.", "I use this all the time to get a sense of the size of a table before writing any other queries.", "You can also wrap a whole query in count() if you want to see the number of records inclusive of a join or where clause.", "Useful because sometimes the number of records can change by an order of magnitude after a join.", "Limit the number of returned records to a specific count.", "I\u2019ve found this useful when I\u2019m loading data-heavy records into a jupyter notebook and loading too many crashes my computer. In such a case I may add limit 100.", "We\u2019ll just get the first 3 records from sales.", "Orders records by a column other than the table\u2019s primary key.", "Useful if you want user names in alphabetical order, or a table ordered by a foreign key.", "Get sales ordered by user_id. Note we still have the limit here.", "We can also order sales in the opposite direction, descending.", "Skip N records off the top, in a select.", "I find this very useful when loading too many records at once crashes my jupyter notebook and I want to iterate over a finite number of records at a time.", "Grab the first 3 records from sales.", "Grab the next 3 records from sales.", "Notice how we have records 1\u20133 in the first query and 4\u20136 in the second.", "Starts with a base table (on the left) and tries to join records from the other table (on the right) based on a key.", "Before joining, let\u2019s just examine the left table.", "And now just the right table.", "Now we\u2019ll do a left join. Join sales (right) on users (left).", "Notice how records on the left are always returned regardless of if they match a record on the right. And that records on the left are duplicated if they match multiple records on the right.", "Left join is probably used more than any other join by developers querying databases.", "It\u2019s the same as the left join but in the other direction. Start with the right table (sales) and join records on the left (users) if they exist.", "Only return records if a match exists on both sides. Notice we have no empty data.", "Return all records on left and right regardless of whether a they can be matched on a key. Some records on the left don\u2019t have matching records on the right, and vice versa. But all are returned anyway.", "Not really a join but it can be used like one. It has the benefit of being able to match on null values, something inner join cannot do.", "Here we\u2019ll just intersect names from users and the mailing_lists. Only names existing in both tables are returned.", "Allows you to return data from different columns, in the same column. Notice how first_name is a mix of user names and locations.", "We can also stack 2 columns from the same table. Here we have user locations and product names.", "Use union all if you don\u2019t want duplicates removed automatically.", "We can exclude rows that exist in 2 tables, while returning the others. Return all names except those in both users and the mailing_lists.", "Giving a columns an alias changes the headers at the top of returned columns. Notice how the first column\u2019s name is now name instead of first_name. Here we renamed 2 columns.", "We can also alias tables. We then need to refer to the alias name when selecting out columns. We\u2019ve renamed users as u.", "Grouping and aggregating data is a pretty powerful feature. Postgres provides the standard functions like: sum(), avg(), min(), max() and count().", "Here we\u2019ll calculate sum, avg, min and max of sale prices, on a per-product level.", "We can modify the above query by joining another table to display names instead of product_ids.", "This allows filtering on grouped and aggregated data. Regular where clauses won\u2019t work here but we can use having instead.", "Only return aggregated data for products which sold more than 2 items.", "Can also use _agg functions (like string_agg) in combination with group by to build a comma delimited string of people who bought each product.", "Casting means converting the type of data in a column. Not all data can be converted to all datatypes. For instance, trying to cast a string to an integer would throw an error.", "But casting an integer to a decimal would work. We do this below so we can see decimals after dividing manufacturing cost by 3 (an arbitrary decision). Notice how when we divide an integer, we don\u2019t get decimals places, but when we divide a decimal, we do.", "We can also round to a specified number of decimals. Sometimes we don\u2019t want a 10 decimal places.", "This is a modified version of the above query with an added round().", "Case allows conditionally applying logic or returning a different values based on a cell\u2019s value. It\u2019s SQL\u2019s equivalent of if/else. Here we return the value 100 for cells where user_id is null.", "Coalesce allows returning the value from a different column if the first column\u2019s value is null.", "Useful is data is really sparse or spread across multiple columns.", "Concat simply concatenates strings. Here we concatenate names and locations.", "Changes the case of a string.", "If this needs to be done somewhere in your data processing pipeline, doing it at the SQL level is significantly faster than at the python/app level.", "Find all records where the name is exactly \u201cLiam\u201d.", "Find all records where the name is not \u201cLiam\u201d.", "Find all records where id is greater or equal to 5.", "Chain multiple where clauses together with and, or and not. But notice we only write the where word once.", "Select all records where the name is exactly \u201cLiam\u201d or \u201cOlivia\u201d.", "Select all records where the name is exactly \u201cLiam\u201d AND the id is 5. This returns none because Liam\u2019s id is not 5.", "Select all records where the name is \u201cLiam\u201d AND the id is NOT 5. This returns Liam now.", "Rather than chaining clauses with or, or, or\u2026 you can find records where a value exists in a given array.", "We can also load records where a value is (or is not) null.", "Sometimes we want to find values that roughly match a query. For this, we can search on partial strings or ignore capitalization.", "Load any records with the characters \u201cia\u201d in the name.", "Load records with the characters \u201cIA\u201d in the name. This returns nothing because no names have capitalized \u201cIA\u201d in them.", "So let\u2019s do a search ignoring cases.", "We already know we can do this.", "But we can also select from this query! Note you need to provide an alias for a subquery to work or an error will be thrown.", "Although we can query from another query, I prefer this approach. It feels much cleaner to define the subqueries in advance.", "Useful if you want to find all the transactions that occurred after a specific date.", "We can also find transactions between 2 dates.", "Postgres has some pretty awesome functionality for working with JSON.", "Find records that have the key, in_stock in the data column.", "Find records where the value of in_stock is greater than 5. Notice we need to cast JSONB to an integer to do the comparison.", "Select out data from the JSONB, as JSONB.", "Select it out as text. The data type can have an impact in a more complex query where this value has other functions run on it.", "Get a record in the table and attach the record immediately before it.", "Useful when looking at events over time where previous events affect future events. You might use data queried like this to train an ML model to predict a future state given the current state.", "We\u2019ll use it to find the user added immediately before every other user.", "We get null as the previous user for Liam because he was the first to be added to the database.", "The opposite of above. Load the user that joined immediately after each other user.", "Postgres can do a million things. So even though there\u2019s a lot of commands here, we\u2019re only covering the basics.", "While it\u2019s not necessary to know these by heart to be effective, understanding how they work is almost a requisite for building advanced queries and knowing what\u2019s possible.", "Are there any Postgres commands that were a game changer for you?", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Just a developer. Contact: greek.data.guy \u201cat\u201d gmail.com"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F96eba6e9e419&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-query-cheatsheet-for-postgres-96eba6e9e419&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-query-cheatsheet-for-postgres-96eba6e9e419&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-query-cheatsheet-for-postgres-96eba6e9e419&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-query-cheatsheet-for-postgres-96eba6e9e419&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----96eba6e9e419--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----96eba6e9e419--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://greekdataguy.medium.com/?source=post_page-----96eba6e9e419--------------------------------", "anchor_text": ""}, {"url": "https://greekdataguy.medium.com/?source=post_page-----96eba6e9e419--------------------------------", "anchor_text": "GreekDataGuy"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd67bf018ae6d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-query-cheatsheet-for-postgres-96eba6e9e419&user=GreekDataGuy&userId=d67bf018ae6d&source=post_page-d67bf018ae6d----96eba6e9e419---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F96eba6e9e419&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-query-cheatsheet-for-postgres-96eba6e9e419&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F96eba6e9e419&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-query-cheatsheet-for-postgres-96eba6e9e419&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@markusspiske?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Markus Spiske"}, {"url": "https://unsplash.com/s/photos/database?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://medium.com/tag/sql?source=post_page-----96eba6e9e419---------------sql-----------------", "anchor_text": "Sql"}, {"url": "https://medium.com/tag/postgres?source=post_page-----96eba6e9e419---------------postgres-----------------", "anchor_text": "Postgres"}, {"url": "https://medium.com/tag/data-science?source=post_page-----96eba6e9e419---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/programming?source=post_page-----96eba6e9e419---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/software-development?source=post_page-----96eba6e9e419---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F96eba6e9e419&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-query-cheatsheet-for-postgres-96eba6e9e419&user=GreekDataGuy&userId=d67bf018ae6d&source=-----96eba6e9e419---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F96eba6e9e419&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-query-cheatsheet-for-postgres-96eba6e9e419&user=GreekDataGuy&userId=d67bf018ae6d&source=-----96eba6e9e419---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F96eba6e9e419&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-query-cheatsheet-for-postgres-96eba6e9e419&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----96eba6e9e419--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F96eba6e9e419&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-query-cheatsheet-for-postgres-96eba6e9e419&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----96eba6e9e419---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----96eba6e9e419--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----96eba6e9e419--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----96eba6e9e419--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----96eba6e9e419--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----96eba6e9e419--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----96eba6e9e419--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----96eba6e9e419--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----96eba6e9e419--------------------------------", "anchor_text": ""}, {"url": "https://greekdataguy.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://greekdataguy.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "GreekDataGuy"}, {"url": "https://greekdataguy.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "9.97K Followers"}, {"url": "http://gmail.com", "anchor_text": "gmail.com"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd67bf018ae6d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-query-cheatsheet-for-postgres-96eba6e9e419&user=GreekDataGuy&userId=d67bf018ae6d&source=post_page-d67bf018ae6d--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F26b33036e2a7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsql-query-cheatsheet-for-postgres-96eba6e9e419&newsletterV3=d67bf018ae6d&newsletterV3Id=26b33036e2a7&user=GreekDataGuy&userId=d67bf018ae6d&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}