{"url": "https://towardsdatascience.com/a-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9", "time": 1683010449.189269, "path": "towardsdatascience.com/a-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9/", "webpage": {"metadata": {"title": "A Data Engineering Perspective on Go vs. Python (Part 2 \u2014 Dataflow) | by Christian Hollinger | Towards Data Science", "h1": "A Data Engineering Perspective on Go vs. Python (Part 2 \u2014 Dataflow)", "description": "In Part 2 of our comparison of Python and go from a Data Engineering perspective, we\u2019ll finally take a look at Apache Beam and Google Dataflow and how the go SDK and the Python SDK differ, what\u2026"}, "outgoing_paragraph_urls": [{"url": "https://chollinger.com/blog/2020/06/a-data-engineering-perspective-on-go-vs.-python-part-1/", "anchor_text": "Part 1 here", "paragraph_index": 1}, {"url": "https://beam.apache.org/", "anchor_text": "Apache Beam", "paragraph_index": 2}, {"url": "https://chollinger.com/blog/2018/06/analyzing-reddits-top-posts-images-with-google-cloud-part-1/#introducing-data-flow", "anchor_text": "before", "paragraph_index": 2}, {"url": "https://beam.apache.org/documentation/programming-guide/", "anchor_text": "official Apache Beam documentation", "paragraph_index": 12}, {"url": "https://chollinger.com/blog/2020/06/a-data-engineering-perspective-on-go-vs.-python-part-1/#io", "anchor_text": "Part 1", "paragraph_index": 27}, {"url": "https://chollinger.com/blog/2020/06/a-data-engineering-perspective-on-go-vs.-python-part-1/#runners", "anchor_text": "Part 1", "paragraph_index": 30}, {"url": "https://www.imdb.com/interfaces/", "anchor_text": "IMDb DataSet", "paragraph_index": 33}, {"url": "https://github.com/chollinger93/beam-examples", "anchor_text": "GitHub", "paragraph_index": 34}, {"url": "https://datasets.imdbws.com/", "anchor_text": "here", "paragraph_index": 39}, {"url": "https://github.com/apache/beam/tree/master/sdks/go/examples", "anchor_text": "go examples", "paragraph_index": 84}, {"url": "https://godoc.org/cloud.google.com/go/bigquery#InferSchema", "anchor_text": "bigquery->InterSchema", "paragraph_index": 88}, {"url": "https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey", "anchor_text": "godocs", "paragraph_index": 114}, {"url": "https://golang.org/ref/spec#Exported_identifiers", "anchor_text": "exported", "paragraph_index": 123}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#finally-running-on-dataflow", "anchor_text": "last section", "paragraph_index": 147}, {"url": "https://issues.apache.org/jira/browse/BEAM-6652?jql=project%20%3D%20BEAM%20AND%20component%20%3D%20sdk-go%20AND%20text%20~%20%22map%22", "anchor_text": "Jira", "paragraph_index": 159}, {"url": "https://github.com/apache/beam/pull/7857", "anchor_text": "PR", "paragraph_index": 159}, {"url": "https://github.com/lostluck/beam/blob/master/sdks/go/pkg/beam/core/typex/class_test.go#L55", "anchor_text": "this", "paragraph_index": 159}, {"url": "https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#Coder", "anchor_text": "Custom Coders", "paragraph_index": 167}, {"url": "https://github.com/apache/beam/blob/master/sdks/go/pkg/beam/core/runtime/coderx/string.go", "anchor_text": "usage for internal Types", "paragraph_index": 167}, {"url": "https://beam.apache.org/blog/splittable-do-fn/", "anchor_text": "Splittable DoFns", "paragraph_index": 181}, {"url": "https://issues.apache.org/jira/browse/BEAM-3301", "anchor_text": "BEAM-3301", "paragraph_index": 181}, {"url": "https://github.com/chollinger93/beam-examples", "anchor_text": "GitHub", "paragraph_index": 202}], "all_paragraphs": ["In Part 2 of our comparison of Python and go from a Data Engineering perspective, we\u2019ll finally take a look at Apache Beam and Google Dataflow and how the go SDK and the Python SDK differ, what drawbacks we\u2019re dealing with, how fast it is by running extensive benchmarks, and how feasible it is to make the switch.", "You can find Part 1 here.", "While we have used Apache Beam on several occasions before, allow me to give another short introduction.", "Apache Beam is an open source, unified model for defining both batch and streaming data-parallel processing pipelines. Using one of the open source Beam SDKs, you build a program that defines the pipeline. The pipeline is then executed by one of Beam\u2019s supported distributed processing back-ends, which include Apache Flink, Apache Spark, and Google Cloud Dataflow.", "Beam can be used for a variety of data use cases, not unlike Apache Spark \u2014 ETL (Extract, Transform, Load) pipelines, stream analytics, or simple data movement from, for instance, a file system to an RDMBS.", "One of the best professional advice I ever got is to ask \u201cSo What?\u201d. That being said: So what, why do I care about Beam?", "For me, one of the most interesting aspects of Beam\u2019s model is the decoupling of pipeline logic, language, and execution environment. I can design my logic on a piece of paper (i.e., draw a DAG with some Beam-specific terminology - we\u2019ll do that in a second), implement it in any of the major languages - even multiple - and run it on any of the supported Runners.", "The last time we used it on this blog, we used it to write a Pipeline to analyze reddit posts and executed it on the Dataflow runner as such:", "As this pipeline was written in Python, there is nothing stopping us from running the exact same job on a on-premise Hadoop cluster, on AWS EMR, or just run it locally using the DirectRunner. This level of portability, in combination with a programming model that I happen to find more streamlined than say Spark's, makes Beam a very interesting framework.", "We\u2019ll actually do exactly that in the example section of this article and design a pipeline, write it in both Python and go, and run it on different Runners.", "Everything in Beam starts with a Pipeline. The Beam programming model works by exposing high-level abstractions through code that allow your Pipeline to execute a graph of PTransforms on a given dataset, which in term is operating on immutable collections, called PCollections, which can be moved to a persistent state through IO operations. Jobs can be executed on different Runners to provide a (distributed) execution environment.", "Let\u2019s dig into those concepts before we look at a real-world example.", "This is a condensed version of the official Apache Beam documentation, which I suggest you read in full for a more in-depth view", "A Pipeline object is the starting point of any job, which is usually initialized with a configuration object that defines how and where your pipeline runs.", "A PCollection, not unlike a Spark RDD or DataFrame, are immutable collections of data that can be modified in-memory through the lifecycle of a pipeline.", "The data within a PCollection can be of any arbitrary type, as long as the elements can be encoded as string for serializing them across the workers.", "PCollections can be of any size, but their elements might be worked on by different workers, if the collection is too large to fit into memory on a single worker node. Furthermore, they can be either bounded (i.e., have a fixed size) or unbounded (i.e., are \"open ended\", like in a streaming scenario).", "Transforms apply logic on individual elements of a PCollection, by applying user code and logic, and returning a full PCollection that can be used in a subsequent step.", "It is also possible to branch a pipeline, by splitting the DAG into multiple, independent steps:", "Custom transforms need to adhere to some rules, most notably serializability (as data needs to be transmitted between workers), single threaded execution (as each element should be worked on, as orchestrated by the underlying Runner, in its own thread), and idempotence (as re-tries might occur).", "Beam provides several core transforms that can be utilized out-of-the-box:", "A ParDo transform is probably the most common one, as it is comparable to a map operation: Applying logic to each element of a PCollection and returning said element (or not returning it and hence, filtering the collection).", "Thing of ParDo as your fundamental building blog of a job that applies logic on a flat stream of data, which can then be further enhanced by grouping, flattening, and other aggregation logic down the line.", "To understand what a ParDo actually does, the Beam docs provide a great explanation of the lifecycle of a ParDo:", "CoGroupByKey aggregates all input elements by their key over multiple input collections. CoGroupByKey performs a relational join of two or more key/value PCollections that have the same key type - a very useful thing we'll be using in the example below.", "A Schema defines the logical structure and data types for the elements within a PCollection. Beam Schemas, similar to a parquet or database schema, should define names, types, and information on whether a field can be NULL.", "Beam supports the following primitive types:", "I/O is needed for providing input data and giving the pipeline one or multiple defined outputs. I will refer to Part 1 for a somewhat complete list of all I/O connectors by SDK.", "I/O connectors can also be customized, by inheriting from the existing Base classes to read non-supported file types. This can be challenging (as you want to be able to split a file source so it can be worked on by multiple workers), but after a while, becomes quite straightforward.", "Runners define which system executes the pipeline, for instance by running locally (DirectRunner), on Google Dataflow, or via Apache Spark.", "Similar to I/O, please refer to Part 1 for an overview.", "In order to demonstrate some of the fundamental differences, let\u2019s define a sample use case that we can implement in both Python and go.", "In this example, we follow this simple user story: \u201cAs a movie enthusiast, I want to find movies that fit my preferences, so that I can watch a new movie\u201d.", "For this, we\u2019ll use the IMDb DataSet, which can be utilized for non-commercial use and is refreshed daily.", "The full source code is available on GitHub.", "[0] You might have gathered by now that these \u201cpreferences\u201d are to demonstrate various Beam functionality - this is not a fancy recommendation engine and we don't really care about the output", "As I\u2019ve said in the introduction, we can start by designing our pipeline first and then cover the language-specific logic later.", "We have 2 main flows here, both of which do similar things: They read data, parse their format, and apply custom filters to the data. Next, they are being combined into one coherent set and written to one or multiple I/O targets.", "Let\u2019s so how to translate this into code.", "If you agree with IMDb\u2019s license, you can find the data here.", "We\u2019ll start with the basic title data and make sure we start with a small test set, so we can develop locally without a cluster. In order to do that, we\u2019ll grab random test data, as well as a movie we know fits our criteria, the 1971 classic \u201cVanishing Point\u201d, with the id tt0067927 (as it is unlikely we'll find more matches between the 2 data sets we'll be using otherwise, given the volume).", "This datasets contains basic title information as such and is a 564MB Tab Separated file.", "We\u2019ll be using this to filter the majority of the records.", "This dataset contains ratings of all titles and is a 18MB Tab Separated file.", "The first step in our Beam Pipeline is to create a skeleton code that creates the Pipeline object, parsing arguments, and setting up a logger.", "We first need to install Beam by running pip3 install --upgrade pip and pip3 install apache-beam==2.22.0 --upgrade.", "Our skeleton uses Python's standard logger module for logging and argparse to read arguments that will be passed to the pipeline.", "There is not much else of note here \u2014 all of our pipeline code will be under the with block, which will define the DAG we just designed once we wrote our individual steps.", "For go, we can install beam via go get as opposed to pip via go get -u github.com/apache/beam/sdks/go/...", "Next, our pipeline skeleton will use the flags package for arguments, as well as log for logging.", "There are a couple of noteworthy points here. First off, the flags package does not support mandatory attributes and as such, we must check the String pointers passed by flag.Parse() manually. You will find similar blocks throughout the code, as go does not know the concept of an Exception and therefore, errors are return elements (i.e., a function might return a tuple of data and an optional error) and need to be checked against manually.", "Furthermore, note how beam.Init() has to be called before the input validation.", "Next, we need to read the data and parse the TSV format. We can use our first ParDo call to achieve this.", "First, let\u2019s define a ParDo operation by creating a subclass of beam.DoFn as such:", "This class will simply parse our CSV from rows of str into a dict, giving us dict as individual elements to work with in the next transforms.", "For a custom ParDo, the method process must be overwritten. process should be a generator and hence, has to yield individual records. The function will be called for each record in the PCollection. You will see what happens if we use return instead of yield in a second.", "Custom arguments can be passed to the class by overwriting the constructor in __init__().", "For integrating this with the pipeline, we need to define the flow. In the Beam Python SDK, the >> and | operators define our individual processing (apply) steps on top of a PCollection.", "For each step, we can call beam.ParDo and provide an Instance of our DoFn subclass.", "This will read the Text file, parse the TSV, yield a PCollection, and use map to simply print the values.", "This simple starting point shows the very specific syntax that Beam uses with Python. While it does create a clear, readable logic, it certainly can be more confusing to read than a regular method-chaining approach.", "Here, we will probably see some of the most striking differences between Python and go - but as I've found, also evenly striking similarities.", "Reading the data and applying the next ParDo does not follow Python's overloaded syntax (using >> and |), but rather results in various PCollections returned after each step:", "While this might look very different from Python, fundamentally, the same thing is happening: Every step of the graph returns a new PCollection, which can be worked on by the next step.", "Another thing to mention here is the use of pointers. *inputBasePath is a pointer to the flags argument we gave earlier. In go, a *string can be nil, whereas normal strings cannot (as nil in go means \"it does not point to anything\", whereas a string can only ever be empty or filled with characters - more on that below). Python, rather famously, does not have exposed Pointers (and neither does Java, Beam's other major language).", "The next seemingly very different thing is the actual ParDo. Let's break this down.", "Beam's generic ParDo function signature looks like this:", "Where s Scope is your pipeline object, dofn interface{} uses go's empty interface logic to define an interface that may hold values of any type (I\u2019ll get back to that in a second), and col is obviously our PCollection, similar to what we saw in Python.", "This means that beam.ParDo(s, &movieFn{}, lines_movies) simply states: Apply the function moveFn, which has to be a ParDo (remember: static typing!), and give it the PCollection called line_movies as an input.", "Once you got over the syntax, this is very similar (if not to say, identical) to what happens with", "We\u2019ll take a look at what &movieFn{} does in the next section. In any case, at this point, we have a structured representation of each row in the input TSV.", "Next, we need to transform our data to make sure we have the right data types that we can use in our output and to make sure our filter logic in the next steps is clear.", "Notice how NULL in the above output is referenced as \\N and how isOriginalTitle sounds like a boolean, but is actually an integer.", "We can simply create another ParDo transformation to handle this scenario. In order to avoid a single ParDo class for each file, we'll make it dynamic.", "As Python dicts can accept arbitrary types, simply changing values within the dict is easy. Please note how we have to treat 0 as a string, as Python, being dynamically typed, does not enforce the type here and given the TSV input, everything is a str.", "At this point, you might find yourself in one of two schools of thought: Either, you are happy that Python allows you to write your Pipeline using dicts that do not care about their respective types (or even the number or names of fields within the dict!) - which makes writing pipelines a lot easier.", "Or, you are missing the strict typing that Java and go force. In both cases, we are actively forced to care about structure and types before persisting any data anywhere, avoiding invalid conversions or wrong outputs into our target system.", "For go, let's re-visit the &movieFn{} argument from earlier.", "We\u2019ve created a struct called moveFn, which holds the structure of our data and their types:", "We then define a ParDo method on this struct:", "Which combines both parsing the row and converting the types into a single ParDo. We\u2019ve split this up in Python to explain the concepts, but fundamentally, the same thing happens: We need to split the line by the delimiter, a tab, and create a json like structure (which is what this struct will be serialized to internally!).", "In order to avoid having to deal with multiple structs, as we (as opposed to Python) cannot simply \"re-use\" the dict and change the type[0], we are doing the conversion in a single step.", "In the actual call to ParDo, &movieFn{} simply translates to \u201ca reference to the memory location of the movieFn struct, which is initialized as empty\u201d.", "Last but not least, note how the return of the function is emit func(movieFn)). The Beam SDK uses reflection to gather the type from the incoming and outgoing PCollections, in our case, an input as line string and output as movieFn - by specifying a function as an input, which we then call similar to Python's native yield. Please note how the actual function does not return anything, as the emit function is an argument to our ParDo!", "You can call this function anything \u2014 emit is simply the style found in the go examples.", "It should be noted that this struct can of course also hold custom methods (similar to the Python class) by simply providing more methods.", "Let\u2019s re-visit the string and nil comment and try to convert '\\N' to nil to match our Python pipeline, assuming we want a NULL like type for writing data into e.g. BigQuery:", "Which of course, the compiler doesn\u2019t accept:", "One way around that is to either use *string or to follow, e.g. bigquery->InterSchema to map NULL to systems that expect it for Strings.", "Furthermore, we need to make sure we don\u2019t accidentally export this method, as otherwise, we\u2019ll get:", "Which can be fixed by simply not exporting it by starting the function with a lower-case \u201cc\u201d:", "This is yet another difference to Python, as go ensures we follow the interface that is expected.", "While I personally do think that the logic go imposes - a String is either empty or not, and having two different \u201cempty\u201d types doesn\u2019t add much value - I can see this being very off-putting for somebody coming at go from a Python or Java perspective.", "[0] I assume we could use an interface{}", "Next, we want to filter the data to make sure we only get the movies and ratings we\u2019re after.", "Filtering data can be done by using yet another ParDo class, but with a catch. Let's try this:", "If we, however, recall that DoFn is a generator (and not just a method that for some reason uses yield instead of return), we can make quick use of that and simply not return invalid records (as well as add our other filter criteria) and hence, create a smaller PCollection to work with:", "And get a decent looking output:", "But what about our filter by year? If we were to try and record['startYear'] >= 1970: as a condition, we're met with:", "Due to Python\u2019s lack of strict typing (remember how we did not define a schema anywhere). We can hotfix this by extending CleanData:", "Which gives us a list of movies.", "Filtering here is not much different in go. We can make the same mistake as we did in Python, but confusing return and (in this case) a emit function:", "Whereas the approach we discussed in the last section works:", "Please note how we won\u2019t have any TypeError: '>=' not supported between instances of 'str' and 'int' type issues with our statically typed struct s.", "Due to the relational nature of the IMDb data, we will have to deal with multiple files to get all criteria we need.", "There are two main ways of doing this: Side Inputs, if the data is small enough to comfortably fit in memory, or CoGroupByKey, which is a much more expensive variant that will cause a shuffle.", "We\u2019ll look at both, even though we only need one way of doing it.", "Let\u2019s get the ratings data and grab a handful of records from the above output to ensure we\u2019ll have at least one match:", "First, let\u2019s look at CoGroupByKey. This is often the more sensible option, unless one of the datasets is a lot smaller in size and can be passed as in-memory Side Input.", "We can simply split our pipeline and this time, return a PCollection instead of passing it to beam.Map(print).", "As side inputs are not PCollections, we can transform the ratings one to a static json using Map:", "Once we have both PCollections, we can prepare the data for CoGroupByKey:", "And finally, apply the CoGroupByKey transform and FlatMap them together:", "Yielding one record (as we chose our input randomly):", "One thing you will notice is the lack of examples for these more \u201cadvanced\u201d topics, such as CoGroupByKey, even though they do in fact exist in the godocs. Therefore, figuring this part out took quite a bit longer than I wanted it to, but it makes sense once the logic is understood.", "In order to use CoGroupByKey, we need to create a KV pair per PCollection:", "Note the func(*movieFn) bool, expecting a pointer to a struct that will tell us whether we have a match or not.", "Side Inputs are a lot trickier than they seem in go, but relatively straightforward in Python.", "If we want to use Side Inputs, we can pass our smaller ratings PCollection as list:", "And get the same result, this time using a side input.", "[0] A dict here would be a lot more efficient than a list; however, as far as I see it, the go SDK does not support SideInputs as a map; I have therefore implemented both Python and go with SideInputs using both lists and maps/dicts.", "We\u2019ll be SideInput here to highlight what I\u2019ve pointed out is possible in the Python section.", "First, we need another Struct that will be our output structure:", "Note the values are exported, i.e. start with an Uppercase letter.", "We simply define a combine type function that expects a slice or ratingFn, as opposed to a PCollection:", "And call it with a Side Input as such:", "And with that, we get the same output:", "Similar to what we\u2019ve seen in Python, doing this list comparison n times gives us O(n*n) and will be tremendously ineffective.", "As I still don\u2019t know whether the go SDK has an equivalent to Python's apache_beam.pvalue.AsDict, I\u2019ve come up with this horrifying workaround that passes a single PCollection as Singleton SideInput to a ParDo and creates a map[string]ratingFn:", "While this might fall under \u201cIt\u2019s not stupid if it works!\u201d, we\u2019ll take a look at a lot of issues this caused when trying to use Dataflow in a later section - note that this code does work on the DirectRunner, however.", "Finally, let\u2019s write our data. We\u2019ll focus on writing to disk first.", "In Python, a simple call will create a txt file, containing the above json:", "Go is once again very similar in that regard - we do, however, have to \u201cencode\u201d our struct as JSON in an inline ParDo:", "Let\u2019s run this and talk performance real quick. Last time, go was almost x45 faster than Python in our Mandelbrot benchmark. Let\u2019s see how Beam holds up.", "Comparing performance on the DirectRunner is almost a pointless exercise, as this runner is designed for local debugging and development, not production use.", "That being said I did run some benchmarks, comparing go and Python, both using Side Inputs with lists or dicts/maps respectively, as well as CoGroupByKey, using three different test data sets: 100 records @ ~9KB, 100,000 records @ ~9MB, and 1M records @ 100MB.", "Looking at various Side Inputs first:", "go here is significantly faster, but that was expected due to this running essentially single-threaded. Using lists as side inputs is a lot slower, to the point where I\u2019ve given up trying to run the as list use case for go and Python at 1M records.", "Where we see a very similar trend with go being orders of magnitude faster. Impressive!", "I\u2019ve also benchmarked the wordcount example with the title.basics data on the DirectRunner to ensure I did not compare apples to oranges by writing fundamentally different code by accident.", "Which does fall in line with our observation that, Beam with go is still a fair bit faster than Python.", "Now, running this on an external runner only leaves us with one option (as go doesn\u2019t support other runners), Google Cloud's Dataflow. I should add that the Dataflow for go is still in version 0.5 and not officially supported yet.", "For Python, we need to run it with an authenticated gcloud sdk:", "It will, however, fail on Python 3.8 with", "So use an older Python version here, 3.7 works well.", "While the job is running, it\u2019ll look like this:", "And once completed, something like this:", "This section will walk you through the full exploration and development process, including dead-ends to illustrate some of the challenges I\u2019ve faced. If you are interested in the solution, jump to the last section.", "For go, we need to build and run it with an authenticated gcloud sdk.", "Fist, ensure all custom structs are registered in init(), similar to what you would do with Kryo in Spark with Scala.", "But it won\u2019t run when trying to use the Side Input with a map route:", "The obvious route here is to simply register the type. However, I\u2019ve encountered some nasty issues with registering Types in Beam.", "RegisterType inserts \u201cexternal\u201d types into a global type registry to bypass serialization and preserve full method information. It should be called in init() only. TODO(wcn): the canonical definition of \u201cexternal\u201d is in v1.proto. We need user facing copy for this important concept.", "We can try to register the map as such:", "Of course, we can try to register a map:", "But that did not have the desired effect. Why?", "Digging into the go SDK source, I found the following function:", "I\u2019ve added the fmt.Printf for debugging.", "This function checks whether the registered type is actually a custom type; a map is not. PckPath and Name are never set, as map is not a custom type that can be registered through reflection.", "Going through Jira, I find this PR, leading me to this unit test \u2014 letting me to believe that the go SDK does not allow for maps with custom types.", "Can we use a list for the Side Input instead to make our lives easier? I guess you know the answer - but let\u2019s talk debugging, since we\u2019re at it.", "Let\u2019s quickly use to profile what\u2019s going on under the hood if we were to use a list instead of a map.", "First, run the job after following the instructions to add additional flags for the profiler:", "This job took 84 Minutes locally, despite having an Intel i7\u20139750H, 16GB of DDR4 memory, and an M.2 NVMe SSD at its disposal.", "Listen to your poor Laptop sound like a Jet Engine, and print the results:", "We can see that the combineMovieRatings, the inefficient list-iteration, took the majority of the time - and from monitoring htop, I can tell you that the job used a single thread the entire time.", "Now, seeing that iterating a list is very inefficient should not be a surprise \u2014 but that in combination with the single threaded execution (which I believe to be caused by the Splittable DoFn issue), is causing a massive runtime spike.", "After more digging through Jira and GitHub Pull Requests, I stumbled upon Custom Coders and their usage for internal Types.", "I had the brilliant idea to register a custom coder for our map type:", "And hence, also calls RegisterType(t), which will once again fail to register our type or Coder.", "While there\u2019s a decent chance I am misinterpreting all the above go code and Jira tickets, my next approach was to do the json parsing myself.", "First, instead of returning a map, we return []byte, which returns a json string:", "Then, in our combination function, we unmarshall that data into a map[string]ratingFn.", "Now, unfortunately, the marshalling needs to be done on every step, which did change the local performance numbers quite drastically:", "As you can see, json (*decodeState) and mapassign cause a massive overhead for the job and, at least on the DirectRunner, this is not a viable alternative.", "At this point, we have to re-visit CoGroupByKey or other options; these issues do, however, show some of the more odd (and, I might add, completely undocumented) issues and shortfalls of the go SDK.", "It is debatable to say a Side Input is a better solution than a CoGroupByKey, but in my case, I was unable to use a map as a Side Input in general.", "After switching back to CoGroupByKey, finally, these changes allow me to submit the job to Dataflow. Keep in mind that the go SDK is not officially supported by DataFlow yet.", "Here, we can also add another output for BigQuery by adding metadata to our struct:", "Once, submitted, we\u2019ll see our DAG:", "Disclaimer: The go SDK might lack behind Python's and Java's performance with use cases where large files need to be loaded.", "This is due to the fact that the go SDK does not support Splittable DoFns. See BEAM-3301 for reference.", "When comparing performance, we\u2019ll look at all 3 approaches:", "I\u2019ve actually had to calculate the list performance on Python, as the job was still running after ~2hrs, with ~8-15 elements/s. I\u2019ve approximated the runtime by looking at the expected output from the CoGroupByKey run and the elapsed time, so the real numbers might be worse!", "This falls in-line with what we\u2019ve seen on the DirectRunner - go is faster, even though not as much as \u201cregular\u201d go vs Python code in the last Mandelbrot example. We couldn\u2019t compare the dict/map logic, as this only ran on the DirectRunner.", "[0] I am not sure why the go SDK does not produce a \u201cRecords/s\u201d metric", "Last time, go was almost x45 faster than Python in our Mandelbrot benchmark.", "This time, this is how the summary looks:", "The average performance gain, across all runners and use cases (excluding 100 records due to overhead and the approximated runtime) is 1290.19% \u2014 and if we were to take the approximation from the list runtime, we're looking at 1351.40%, even though that is not really fair.", "In any case, this is truly impressive.", "This part, while tremendously subjective, got me thinking quite a bit. When I first started digging into Part 1, it seemed obvious to me that Python's lack of static typing tends to be a curse, rather than a blessing, more often than not. The amount of times I had to spend long nights to figure out why on earth a job (be that Beam, Spark, Pandas, Dask, or anything else) does not do what I want it to or, more pressingly, when I\u2019m getting feedback from users that their data looks \u201coff\u201d, it was so frequently caused by issues with types.", "I\u2019ve elaborated on it in part 1 \u2014 Python does not enforce typing. I often result to external libraries, like numpy, to write classes that force typing using external configurations when dealing with data pipelines. This might follow a logic like \u201cYour dict should have the attribute averageTemp (if 'averageTemp' in dict), and that is a FLOAT64. FLOAT64 maps to numpy\u2019s np.float64; to ensure it is actually FLOAT64, we\u2019ll try a parse at some point of the job; if that fails, silently catch it using except and set it to None\u201d.", "In go, on the other hand, I cannot comfortably do that. I am forced to abide to structures and types - I can\u2019t even set a string to nil, even though I might be very used to it.", "Now, what is better? Well, I believe it to be a matter of perspective on style and design. While I find \u201cproduction\u201d grade jobs to often be difficult in Python, due to the above edge cases and workarounds (keep in mind: if my data does not follow the format dictated by the database, I am the one at fault!), can be a challenge.", "At the same time, it took me personally a lot longer to write my jobs in go than it did in Python - because I needed to think about what I was going to do a lot more. In often treat Python like I treat bash or zsh - type something in, hope it works. Leading me to\u2026", "\u2026the compiler. The go compiler is a thing I've learned to both hate and adore. Since I haven't mentioned it, let me tell you what the compiler (or rather, the go toolchain) does, using a few select examples:", "And by cannot I mean: \u201cNeither go run nor go build will produce a binary\u201d.", "Seems reasonable, right? Well \u2014 piggybacking on my Python as bash comment, I find it both helpful and tedious at the same time. Writing go code is like writing Python code with pylint on high-alert - it won\u2019t let you do anything that might make the compilers life uncomfortable, while at the same time, ensuring what you are producing will actually work and not have side effects.", "At the same time, specific to Dataflow, it obviously won\u2019t catch anything tool-specific - for instance, not registering classes in init() only becomes an issue once you submit your job.", "Python, on the other hand, lets me write code that gets a 1/10 pyLint score and that can be future me\u2019s problem.", "I love Beam's syntax in Python. Once you get over how \u201codd\u201d it looks, it really is a beautiful way to build a DAG with something that almost resembles pseudo-code.", "go's approach is a lot more academic. It follows a standard language flow - each function returns a PCollection. This is a lot more intuitive, but I find it looses the benefits of Python's \u201cDAG-as-code\u201d logic.", "But I\u2019ll let you judge for yourself \u2014 check out the full code for both Python and go on GitHub.", "The performance gain in go was massive and, quite honestly, unexpected. An improvement of, on average, 1290.19% is nothing to scoff at.", "Splittable DoFns, on the other ahnd, is in fact a big deal - if not even a deal breaker and makes this exercise mostly academic in nature, once we move past relatively small data sets and start talking multiple GB or TB.", "This is one of my biggest gripes with the go SDK and I feel bad by complaining, because absolutely nothing is stopping me from committing to it (besides time).", "The Beam docs for go are very lackluster - a lot of functionality and examples are only available for Python and Java. Finding examples, logic, and overall architecture details around go is challenging, to say the least. I mostly relied on the godocs and reading a fair bit of source code.", "The write-up above should be proof of this \u2014 there were a lot of dead ends I encountered.", "My process when working with the go SDK looked a little something like this:", "Needless to say, there are almost zero Google / StackOverflow results to be found.", "I\u2019ve mentioned this in Part 1 already, but given the experimental nature of the go SDK, the compatibility with Beam features and Runners obviously is not nearly as good as it is in Python or Java. However, for simple pipelines and using Dataflow as a runner, go covers the basics for sure. You do lose some of the benefits I\u2019ve mentioned in the introduction, however - fewer runners mean less options.", "go is a fun language to play with, but after spending many hours on both writing these articles, playing with the code, documentation, and environments, I simply cannot recommend using go for a Beam pipeline at this point - at least not as a blanket statement.", "Sure \u2014 it has advantages over Python, the language itself is clear, well documented, and fast.", "However, the lack of functionality once you move past standard use case, Splittable DoFns issue, documentation, and compatible environments make using Python (or Java) as a default a lot more reasonable. While someone who is a lot more familiar with the go SDK for Beam could surely iron out some of my issues - like the map question above - there are still to many things which make using go in production for a Dataflow pipeline questionable at least.", "For simpler pipelines, however \u2014 I believe the performance gain to be worth the other trade offs, if you can live with an officially not-yet-supported runner (Dataflow).", "That being said, I will surely closely monitor the progress of the Beam SDK and, given the chance, hopefully commit to it in the future - because go is too interesting a language to just ignore."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F472b42a14f9&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/@christian.hollinger?source=post_page-----472b42a14f9--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----472b42a14f9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@christian.hollinger?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "Christian Hollinger"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F7af40a2161c7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9&user=Christian+Hollinger&userId=7af40a2161c7&source=post_page-7af40a2161c7----472b42a14f9---------------------post_header-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F472b42a14f9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9&user=Christian+Hollinger&userId=7af40a2161c7&source=-----472b42a14f9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F472b42a14f9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9&source=-----472b42a14f9---------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://chollinger.com/blog/2020/06/a-data-engineering-perspective-on-go-vs.-python-part-1/", "anchor_text": "Part 1 here"}, {"url": "https://beam.apache.org/", "anchor_text": "Apache Beam"}, {"url": "https://chollinger.com/blog/2018/06/analyzing-reddits-top-posts-images-with-google-cloud-part-1/#introducing-data-flow", "anchor_text": "before"}, {"url": "https://beam.apache.org/get-started/beam-overview/", "anchor_text": "https://beam.apache.org/get-started/beam-overview/"}, {"url": "https://beam.apache.org/documentation/programming-guide/", "anchor_text": "official Apache Beam documentation"}, {"url": "https://beam.apache.org/documentation/programming-guide/#applying-transforms", "anchor_text": "https://beam.apache.org/documentation/programming-guide/#applying-transforms"}, {"url": "https://beam.apache.org/documentation/programming-guide/#applying-transforms", "anchor_text": "https://beam.apache.org/documentation/programming-guide/#applying-transforms"}, {"url": "https://beam.apache.org/documentation/programming-guide/#applying-transforms", "anchor_text": "https://beam.apache.org/documentation/programming-guide/#applying-transforms"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#schemas", "anchor_text": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#schemas"}, {"url": "https://chollinger.com/blog/2020/06/a-data-engineering-perspective-on-go-vs.-python-part-1/#io", "anchor_text": "Part 1"}, {"url": "https://chollinger.com/blog/2020/06/a-data-engineering-perspective-on-go-vs.-python-part-1/#runners", "anchor_text": "Part 1"}, {"url": "https://www.imdb.com/interfaces/", "anchor_text": "IMDb DataSet"}, {"url": "https://github.com/chollinger93/beam-examples", "anchor_text": "GitHub"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#drawing-the-design", "anchor_text": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#drawing-the-design"}, {"url": "https://datasets.imdbws.com/", "anchor_text": "here"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#getting-data", "anchor_text": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#getting-data"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#getting-data", "anchor_text": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#getting-data"}, {"url": "https://github.com/apache/beam/tree/master/sdks/go/examples", "anchor_text": "go examples"}, {"url": "https://godoc.org/cloud.google.com/go/bigquery#InferSchema", "anchor_text": "bigquery->InterSchema"}, {"url": "https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey", "anchor_text": "godocs"}, {"url": "https://golang.org/ref/spec#Exported_identifiers", "anchor_text": "exported"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#directrunner-locally", "anchor_text": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#directrunner-locally"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#directrunner-locally", "anchor_text": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#directrunner-locally"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#a-reference-job", "anchor_text": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#a-reference-job"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#dataflow-google-cloud", "anchor_text": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#dataflow-google-cloud"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#dataflow-google-cloud", "anchor_text": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#dataflow-google-cloud"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#finally-running-on-dataflow", "anchor_text": "last section"}, {"url": "https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#RegisterType", "anchor_text": "https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#RegisterType"}, {"url": "https://issues.apache.org/jira/browse/BEAM-6652?jql=project%20%3D%20BEAM%20AND%20component%20%3D%20sdk-go%20AND%20text%20~%20%22map%22", "anchor_text": "Jira"}, {"url": "https://github.com/apache/beam/pull/7857", "anchor_text": "PR"}, {"url": "https://github.com/lostluck/beam/blob/master/sdks/go/pkg/beam/core/typex/class_test.go#L55", "anchor_text": "this"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#perf-tools---profiling-go", "anchor_text": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#perf-tools---profiling-go"}, {"url": "https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#Coder", "anchor_text": "Custom Coders"}, {"url": "https://github.com/apache/beam/blob/master/sdks/go/pkg/beam/core/runtime/coderx/string.go", "anchor_text": "usage for internal Types"}, {"url": "https://github.com/apache/beam/blob/master/sdks/go/pkg/beam/forward.go#L95", "anchor_text": "RegisterCoder"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#map---json---map", "anchor_text": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#map---json---map"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#finally-running-on-dataflow", "anchor_text": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#finally-running-on-dataflow"}, {"url": "https://beam.apache.org/blog/splittable-do-fn/", "anchor_text": "Splittable DoFns"}, {"url": "https://issues.apache.org/jira/browse/BEAM-3301", "anchor_text": "BEAM-3301"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#dataflow-performance", "anchor_text": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#dataflow-performance"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#dataflow-performance", "anchor_text": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/#dataflow-performance"}, {"url": "https://github.com/chollinger93/beam-examples", "anchor_text": "GitHub"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/", "anchor_text": "chollinger.com/blog"}, {"url": "https://chollinger.com/blog/2020/07/a-data-engineering-perspective-on-go-vs.-python-part-2-dataflow/", "anchor_text": "https://chollinger.com"}, {"url": "https://medium.com/tag/go?source=post_page-----472b42a14f9---------------go-----------------", "anchor_text": "Go"}, {"url": "https://medium.com/tag/dataflow?source=post_page-----472b42a14f9---------------dataflow-----------------", "anchor_text": "Dataflow"}, {"url": "https://medium.com/tag/google-cloud-platform?source=post_page-----472b42a14f9---------------google_cloud_platform-----------------", "anchor_text": "Google Cloud Platform"}, {"url": "https://medium.com/tag/python?source=post_page-----472b42a14f9---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/apache-beam?source=post_page-----472b42a14f9---------------apache_beam-----------------", "anchor_text": "Apache Beam"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F472b42a14f9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9&user=Christian+Hollinger&userId=7af40a2161c7&source=-----472b42a14f9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F472b42a14f9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9&user=Christian+Hollinger&userId=7af40a2161c7&source=-----472b42a14f9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F472b42a14f9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/@christian.hollinger?source=post_page-----472b42a14f9--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----472b42a14f9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F7af40a2161c7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9&user=Christian+Hollinger&userId=7af40a2161c7&source=post_page-7af40a2161c7----472b42a14f9---------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ffaf13e452c80&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9&newsletterV3=7af40a2161c7&newsletterV3Id=faf13e452c80&user=Christian+Hollinger&userId=7af40a2161c7&source=-----472b42a14f9---------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://medium.com/@christian.hollinger?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "Written by Christian Hollinger"}, {"url": "https://medium.com/@christian.hollinger/followers?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "99 Followers"}, {"url": "https://towardsdatascience.com/?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://chollinger.com/blog", "anchor_text": "https://chollinger.com/blog"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F7af40a2161c7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9&user=Christian+Hollinger&userId=7af40a2161c7&source=post_page-7af40a2161c7----472b42a14f9---------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ffaf13e452c80&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-data-engineering-perspective-on-go-vs-python-part-2-dataflow-472b42a14f9&newsletterV3=7af40a2161c7&newsletterV3Id=faf13e452c80&user=Christian+Hollinger&userId=7af40a2161c7&source=-----472b42a14f9---------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/tensorflow-on-edge-or-building-a-smart-security-camera-with-a-raspberry-pi-5bb2fc039b0f?source=author_recirc-----472b42a14f9----0---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://medium.com/@christian.hollinger?source=author_recirc-----472b42a14f9----0---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://medium.com/@christian.hollinger?source=author_recirc-----472b42a14f9----0---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "Christian Hollinger"}, {"url": "https://towardsdatascience.com/?source=author_recirc-----472b42a14f9----0---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/tensorflow-on-edge-or-building-a-smart-security-camera-with-a-raspberry-pi-5bb2fc039b0f?source=author_recirc-----472b42a14f9----0---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "Tensorflow on edge, or \u2014 Building a \u201csmart\u201d security camera with a Raspberry PiBuilding a \u201csmart\u201d, Raspberry Pi powered edge-computing camera setup that runs a Tensorflow object detection model to detect trespassers"}, {"url": "https://towardsdatascience.com/tensorflow-on-edge-or-building-a-smart-security-camera-with-a-raspberry-pi-5bb2fc039b0f?source=author_recirc-----472b42a14f9----0---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "\u00b79 min read\u00b7Dec 9, 2019"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5bb2fc039b0f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftensorflow-on-edge-or-building-a-smart-security-camera-with-a-raspberry-pi-5bb2fc039b0f&user=Christian+Hollinger&userId=7af40a2161c7&source=-----5bb2fc039b0f----0-----------------clap_footer----66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/tensorflow-on-edge-or-building-a-smart-security-camera-with-a-raspberry-pi-5bb2fc039b0f?source=author_recirc-----472b42a14f9----0---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "1"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5bb2fc039b0f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftensorflow-on-edge-or-building-a-smart-security-camera-with-a-raspberry-pi-5bb2fc039b0f&source=-----472b42a14f9----0-----------------bookmark_preview----66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/zero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c?source=author_recirc-----472b42a14f9----1---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://barrmoses.medium.com/?source=author_recirc-----472b42a14f9----1---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://barrmoses.medium.com/?source=author_recirc-----472b42a14f9----1---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "Barr Moses"}, {"url": "https://towardsdatascience.com/?source=author_recirc-----472b42a14f9----1---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/zero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c?source=author_recirc-----472b42a14f9----1---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "Zero-ETL, ChatGPT, And The Future of Data EngineeringThe post-modern data stack is coming. Are we ready?"}, {"url": "https://towardsdatascience.com/zero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c?source=author_recirc-----472b42a14f9----1---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "9 min read\u00b7Apr 3"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F71849642ad9c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c&user=Barr+Moses&userId=2818bac48708&source=-----71849642ad9c----1-----------------clap_footer----66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/zero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c?source=author_recirc-----472b42a14f9----1---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "21"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F71849642ad9c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c&source=-----472b42a14f9----1-----------------bookmark_preview----66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=author_recirc-----472b42a14f9----2---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://medium.com/@mattchapmanmsc?source=author_recirc-----472b42a14f9----2---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://medium.com/@mattchapmanmsc?source=author_recirc-----472b42a14f9----2---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "Matt Chapman"}, {"url": "https://towardsdatascience.com/?source=author_recirc-----472b42a14f9----2---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=author_recirc-----472b42a14f9----2---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "The Portfolio that Got Me a Data Scientist JobSpoiler alert: It was surprisingly easy (and free) to make"}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=author_recirc-----472b42a14f9----2---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "\u00b710 min read\u00b7Mar 24"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F513cc821bfe4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4&user=Matt+Chapman&userId=bf7d13fc53db&source=-----513cc821bfe4----2-----------------clap_footer----66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=author_recirc-----472b42a14f9----2---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "42"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F513cc821bfe4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4&source=-----472b42a14f9----2-----------------bookmark_preview----66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/raspberry-pi-gardening-monitoring-a-vegetable-garden-using-a-raspberry-pi-part-2-3d-printing-40471bd061dc?source=author_recirc-----472b42a14f9----3---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://medium.com/@christian.hollinger?source=author_recirc-----472b42a14f9----3---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://medium.com/@christian.hollinger?source=author_recirc-----472b42a14f9----3---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "Christian Hollinger"}, {"url": "https://towardsdatascience.com/?source=author_recirc-----472b42a14f9----3---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/raspberry-pi-gardening-monitoring-a-vegetable-garden-using-a-raspberry-pi-part-2-3d-printing-40471bd061dc?source=author_recirc-----472b42a14f9----3---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "Raspberry Pi Gardening: Monitoring a Vegetable Garden using a Raspberry Pi \u2014 Part 2: 3D PrintingPart 2 of throwing Raspberry Pis at the pepper plants in my garden: On the topics of 3D printing, more bad solder jobs, I2C, SPI, Python\u2026"}, {"url": "https://towardsdatascience.com/raspberry-pi-gardening-monitoring-a-vegetable-garden-using-a-raspberry-pi-part-2-3d-printing-40471bd061dc?source=author_recirc-----472b42a14f9----3---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": "36 min read\u00b7Jul 3, 2021"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F40471bd061dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fraspberry-pi-gardening-monitoring-a-vegetable-garden-using-a-raspberry-pi-part-2-3d-printing-40471bd061dc&user=Christian+Hollinger&userId=7af40a2161c7&source=-----40471bd061dc----3-----------------clap_footer----66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/raspberry-pi-gardening-monitoring-a-vegetable-garden-using-a-raspberry-pi-part-2-3d-printing-40471bd061dc?source=author_recirc-----472b42a14f9----3---------------------66923b83_3f67_4e00_b094_48d8ae87f2ad-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F40471bd061dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fraspberry-pi-gardening-monitoring-a-vegetable-garden-using-a-raspberry-pi-part-2-3d-printing-40471bd061dc&source=-----472b42a14f9----3-----------------bookmark_preview----66923b83_3f67_4e00_b094_48d8ae87f2ad-------", "anchor_text": ""}, {"url": "https://medium.com/@christian.hollinger?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "See all from Christian Hollinger"}, {"url": "https://towardsdatascience.com/?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "See all from Towards Data Science"}, {"url": "https://levelup.gitconnected.com/why-i-keep-failing-candidates-during-google-interviews-dc8f865b2c19?source=read_next_recirc-----472b42a14f9----0---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://alexcancode.medium.com/?source=read_next_recirc-----472b42a14f9----0---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://alexcancode.medium.com/?source=read_next_recirc-----472b42a14f9----0---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "Alexander Nguyen"}, {"url": "https://levelup.gitconnected.com/?source=read_next_recirc-----472b42a14f9----0---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "Level Up Coding"}, {"url": "https://levelup.gitconnected.com/why-i-keep-failing-candidates-during-google-interviews-dc8f865b2c19?source=read_next_recirc-----472b42a14f9----0---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "Why I Keep Failing Candidates During Google Interviews\u2026They don\u2019t meet the bar."}, {"url": "https://levelup.gitconnected.com/why-i-keep-failing-candidates-during-google-interviews-dc8f865b2c19?source=read_next_recirc-----472b42a14f9----0---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "\u00b74 min read\u00b7Apr 13"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fgitconnected%2Fdc8f865b2c19&operation=register&redirect=https%3A%2F%2Flevelup.gitconnected.com%2Fwhy-i-keep-failing-candidates-during-google-interviews-dc8f865b2c19&user=Alexander+Nguyen&userId=a148fd75c2e9&source=-----dc8f865b2c19----0-----------------clap_footer----aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://levelup.gitconnected.com/why-i-keep-failing-candidates-during-google-interviews-dc8f865b2c19?source=read_next_recirc-----472b42a14f9----0---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "91"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdc8f865b2c19&operation=register&redirect=https%3A%2F%2Flevelup.gitconnected.com%2Fwhy-i-keep-failing-candidates-during-google-interviews-dc8f865b2c19&source=-----472b42a14f9----0-----------------bookmark_preview----aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://artificialcorner.com/youre-using-chatgpt-wrong-here-s-how-to-be-ahead-of-99-of-chatgpt-users-886a50dabc54?source=read_next_recirc-----472b42a14f9----1---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://thepycoach.com/?source=read_next_recirc-----472b42a14f9----1---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://thepycoach.com/?source=read_next_recirc-----472b42a14f9----1---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "The PyCoach"}, {"url": "https://artificialcorner.com/?source=read_next_recirc-----472b42a14f9----1---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "Artificial Corner"}, {"url": "https://artificialcorner.com/youre-using-chatgpt-wrong-here-s-how-to-be-ahead-of-99-of-chatgpt-users-886a50dabc54?source=read_next_recirc-----472b42a14f9----1---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "You\u2019re Using ChatGPT Wrong! Here\u2019s How to Be Ahead of 99% of ChatGPT UsersMaster ChatGPT by learning prompt engineering."}, {"url": "https://artificialcorner.com/youre-using-chatgpt-wrong-here-s-how-to-be-ahead-of-99-of-chatgpt-users-886a50dabc54?source=read_next_recirc-----472b42a14f9----1---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "\u00b77 min read\u00b7Mar 17"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fartificial-corner%2F886a50dabc54&operation=register&redirect=https%3A%2F%2Fartificialcorner.com%2Fyoure-using-chatgpt-wrong-here-s-how-to-be-ahead-of-99-of-chatgpt-users-886a50dabc54&user=The+PyCoach&userId=fb44e21903f3&source=-----886a50dabc54----1-----------------clap_footer----aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://artificialcorner.com/youre-using-chatgpt-wrong-here-s-how-to-be-ahead-of-99-of-chatgpt-users-886a50dabc54?source=read_next_recirc-----472b42a14f9----1---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "276"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F886a50dabc54&operation=register&redirect=https%3A%2F%2Fartificialcorner.com%2Fyoure-using-chatgpt-wrong-here-s-how-to-be-ahead-of-99-of-chatgpt-users-886a50dabc54&source=-----472b42a14f9----1-----------------bookmark_preview----aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://medium.datadriveninvestor.com/12-must-have-skills-to-become-a-data-engineer-35b100dbee0a?source=read_next_recirc-----472b42a14f9----0---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://syal-anuj.medium.com/?source=read_next_recirc-----472b42a14f9----0---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://syal-anuj.medium.com/?source=read_next_recirc-----472b42a14f9----0---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "Anuj Syal"}, {"url": "https://medium.datadriveninvestor.com/?source=read_next_recirc-----472b42a14f9----0---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "DataDrivenInvestor"}, {"url": "https://medium.datadriveninvestor.com/12-must-have-skills-to-become-a-data-engineer-35b100dbee0a?source=read_next_recirc-----472b42a14f9----0---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "12 Must-Have Skills to become a Data EngineerThe Essential Skills for a Successful Data Engineering Career"}, {"url": "https://medium.datadriveninvestor.com/12-must-have-skills-to-become-a-data-engineer-35b100dbee0a?source=read_next_recirc-----472b42a14f9----0---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "\u00b78 min read\u00b7Jan 3"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fdatadriveninvestor%2F35b100dbee0a&operation=register&redirect=https%3A%2F%2Fmedium.datadriveninvestor.com%2F12-must-have-skills-to-become-a-data-engineer-35b100dbee0a&user=Anuj+Syal&userId=df3997c527b4&source=-----35b100dbee0a----0-----------------clap_footer----aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://medium.datadriveninvestor.com/12-must-have-skills-to-become-a-data-engineer-35b100dbee0a?source=read_next_recirc-----472b42a14f9----0---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "6"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F35b100dbee0a&operation=register&redirect=https%3A%2F%2Fmedium.datadriveninvestor.com%2F12-must-have-skills-to-become-a-data-engineer-35b100dbee0a&source=-----472b42a14f9----0-----------------bookmark_preview----aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/a-framework-for-building-a-production-ready-feature-engineering-pipeline-f0b29609b20f?source=read_next_recirc-----472b42a14f9----1---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://pauliusztin.medium.com/?source=read_next_recirc-----472b42a14f9----1---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://pauliusztin.medium.com/?source=read_next_recirc-----472b42a14f9----1---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "Paul Iusztin"}, {"url": "https://towardsdatascience.com/?source=read_next_recirc-----472b42a14f9----1---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/a-framework-for-building-a-production-ready-feature-engineering-pipeline-f0b29609b20f?source=read_next_recirc-----472b42a14f9----1---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "A Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines."}, {"url": "https://towardsdatascience.com/a-framework-for-building-a-production-ready-feature-engineering-pipeline-f0b29609b20f?source=read_next_recirc-----472b42a14f9----1---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "\u00b712 min read\u00b74 days ago"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff0b29609b20f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-framework-for-building-a-production-ready-feature-engineering-pipeline-f0b29609b20f&user=Paul+Iusztin&userId=8323de62a1a1&source=-----f0b29609b20f----1-----------------clap_footer----aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/a-framework-for-building-a-production-ready-feature-engineering-pipeline-f0b29609b20f?source=read_next_recirc-----472b42a14f9----1---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "3"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff0b29609b20f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-framework-for-building-a-production-ready-feature-engineering-pipeline-f0b29609b20f&source=-----472b42a14f9----1-----------------bookmark_preview----aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://betterprogramming.pub/dbt-v1-5-the-3-big-new-things-660e59fd29cb?source=read_next_recirc-----472b42a14f9----2---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://cookjack248.medium.com/?source=read_next_recirc-----472b42a14f9----2---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://cookjack248.medium.com/?source=read_next_recirc-----472b42a14f9----2---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "Jack C"}, {"url": "https://betterprogramming.pub/?source=read_next_recirc-----472b42a14f9----2---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "Better Programming"}, {"url": "https://betterprogramming.pub/dbt-v1-5-the-3-big-new-things-660e59fd29cb?source=read_next_recirc-----472b42a14f9----2---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "dbt v1.5 \u2014 the 3 Big New ThingsData contracts, model versions, and model access"}, {"url": "https://betterprogramming.pub/dbt-v1-5-the-3-big-new-things-660e59fd29cb?source=read_next_recirc-----472b42a14f9----2---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "6 min read\u00b74 days ago"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fbetter-programming%2F660e59fd29cb&operation=register&redirect=https%3A%2F%2Fbetterprogramming.pub%2Fdbt-v1-5-the-3-big-new-things-660e59fd29cb&user=Jack+C&userId=1eb3d543fd09&source=-----660e59fd29cb----2-----------------clap_footer----aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://betterprogramming.pub/dbt-v1-5-the-3-big-new-things-660e59fd29cb?source=read_next_recirc-----472b42a14f9----2---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "5"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F660e59fd29cb&operation=register&redirect=https%3A%2F%2Fbetterprogramming.pub%2Fdbt-v1-5-the-3-big-new-things-660e59fd29cb&source=-----472b42a14f9----2-----------------bookmark_preview----aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://medium.com/codex/say-goodbye-to-loops-in-python-and-welcome-vectorization-e4df66615a52?source=read_next_recirc-----472b42a14f9----3---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://anmol3015.medium.com/?source=read_next_recirc-----472b42a14f9----3---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://anmol3015.medium.com/?source=read_next_recirc-----472b42a14f9----3---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "Anmol Tomar"}, {"url": "https://medium.com/codex?source=read_next_recirc-----472b42a14f9----3---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "CodeX"}, {"url": "https://medium.com/codex/say-goodbye-to-loops-in-python-and-welcome-vectorization-e4df66615a52?source=read_next_recirc-----472b42a14f9----3---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "Say Goodbye to Loops in Python, and Welcome Vectorization!Use Vectorization \u2014 a super fast alternative to loops in Python"}, {"url": "https://medium.com/codex/say-goodbye-to-loops-in-python-and-welcome-vectorization-e4df66615a52?source=read_next_recirc-----472b42a14f9----3---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": "\u00b75 min read\u00b7Nov 29, 2022"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fcodex%2Fe4df66615a52&operation=register&redirect=https%3A%2F%2Fmedium.com%2Fcodex%2Fsay-goodbye-to-loops-in-python-and-welcome-vectorization-e4df66615a52&user=Anmol+Tomar&userId=d80580992695&source=-----e4df66615a52----3-----------------clap_footer----aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://medium.com/codex/say-goodbye-to-loops-in-python-and-welcome-vectorization-e4df66615a52?source=read_next_recirc-----472b42a14f9----3---------------------aba7c77a_8637_4e0d_afe2_16924b495785-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "49"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe4df66615a52&operation=register&redirect=https%3A%2F%2Fmedium.com%2Fcodex%2Fsay-goodbye-to-loops-in-python-and-welcome-vectorization-e4df66615a52&source=-----472b42a14f9----3-----------------bookmark_preview----aba7c77a_8637_4e0d_afe2_16924b495785-------", "anchor_text": ""}, {"url": "https://medium.com/?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "See more recommendations"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----472b42a14f9--------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=post_page-----472b42a14f9--------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}