{"url": "https://towardsdatascience.com/building-a-pseudorandom-number-generator-9bc37d3a87d5", "time": 1683001290.334458, "path": "towardsdatascience.com/building-a-pseudorandom-number-generator-9bc37d3a87d5/", "webpage": {"metadata": {"title": "Building a Pseudorandom Number Generator | by David Bertoldi | Towards Data Science", "h1": "Building a Pseudorandom Number Generator", "description": "In my article \u201cHow to get an unbiased RNG from an unbalanced one\u201d I showed how to extract randomness from any kind of source. Now the aim is to build a pseudo random number generator from scratch\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/how-to-get-an-unbiased-rng-from-an-unbalanced-one-dbb44850e5f7", "anchor_text": "How to get an unbiased RNG from an unbalanced one", "paragraph_index": 0}, {"url": "http://web.archive.org/web/20161115065946/http://en.wikipedia.org/wiki/Probabilistic_Turing_machine", "anchor_text": "probabilistic Turing machine", "paragraph_index": 13}, {"url": "https://en.wikipedia.org/wiki/BPP_(complexity)", "anchor_text": "BPP class", "paragraph_index": 16}, {"url": "https://en.wikipedia.org/wiki/BPP_(complexity)", "anchor_text": "probabilistic polynomial time problems (BPP)", "paragraph_index": 18}, {"url": "https://en.wikipedia.org/wiki/Euler%27s_totient_function", "anchor_text": "Euler\u2019s totient function", "paragraph_index": 30}, {"url": "https://en.wikipedia.org/wiki/Hard-core_predicate", "anchor_text": "Goldreich-Levin theorem", "paragraph_index": 33}, {"url": "http://www.bluetulip.org/2014/programs/primitive.html", "anchor_text": "this online tool", "paragraph_index": 36}], "all_paragraphs": ["In my article \u201cHow to get an unbiased RNG from an unbalanced one\u201d I showed how to extract randomness from any kind of source. Now the aim is to build a pseudo random number generator from scratch!", "The importance of random numbers is not in the number itself (they are common numbers, if taken individually) but in the way they are generated.", "Modern technology is based on these numbers: communication protocols, cryptography, games do heavily usage of them and their whole security and unpredictability depend on them.", "Let\u2019s say you want to create a game were the system throws a coin and the player places a bet (with real money) on the result. If the player is right, then he has a reward (in money) otherwise he loses the money placed. If your coin is really fair (or unpredictable) then you have nothing to worry about.", "But what happens if the players can predict with an high rate of precision the result of the next toss? Or if they can predict the next result according to the last three throws? The answer is obvious.", "Nature offers some sources of randomness, but they are very expensive to use.", "In macroscopic environments there are few sources, such as climate changes or the cosmic microwave background. These kind of generators are very expensive: immagine to buy a system that connects you to a satellite that measures the CMB variations and sends the result back in a few milliseconds. The cost is around 400 ~ 500 million USD.", "Ok, I took an extreme case but in general it\u2019s not convenient at all, considering costs and performances.", "In microscopic the entire environment is driven by chaos: as far as we know, it\u2019s a probabilistic world; but again it\u2019s very expensive managing this kind of source. Balancing perfectly a particle\u2019s quantum state it\u2019s not a simple task.", "For these reasons we always find convenient to build a generator in our machines (computers, smartphone, TV, etc\u2026). Also having a more compact way to calculate a random string is always good: if your system extracts a sequence from the local temperature in \u03bcK, anyone can reproduce the same sequence by positioning a sensor near yours; or even anyone can manipulate the detections and take control over your sequences.", "A computer uses a CPU to execute the instructions, and the CPU is based on a deterministic mechanism. How can we create randomness from an environment that do not have any source of randomness?", "Before I answer to this, let\u2019s define a pseudorandom number generator (PRNG). From here I will treat PRNGs that work with bit (0s and 1s), but it is very easy to verify its properties for other cases since it is possible to encode a binary sequence in a number.", "Given an initial seed, a PRNG produces a sequence of bit indistinguishable from a sequence produced by a real random source.", "Indistinguishable means that there is no algorithm executable in polynomial time on a probabilistic Turing machine that can decide if the given sequence is random or calculated. That is, no randomised algorithm can say if a string produced by a PRNG was calculated deterministically or extracted by a random source.", "Hence, here it is a definition of PRNG: it\u2019s an algorithm executable in polynomial time on a deterministic Turing Machine that calculates a function G such that", "with l as a monotonically increasing function. That means the output is always longer than the input (seed).", "Also, for every algorithm in D belonging to BPP class, for every polynomial p and for every integer k sufficiently big:", "This giant formula can be read like this:", "The probability that an algorithm in the class of probabilistic polynomial time problems (BPP) could distinguish a sequence between a real random source and a PRNG tends to zero faster than any polynomial as the length of the seed increases.", "Therefore, a PRNG is an algorithm that takes a seed as input and returns a longer string such that no one can easily say if it was calculated or not. The function computed by the algorithm is called G.", "The definition of G says that if the initial seed is a sequence of k bits, then G returns a longer sequence of l(k) bits. Should we build a different function G for every possible function l?", "No. Starting from a simple PRNG H", "it is possible to build any PRNG in the form of G as follows:", "where x\u1d62 \u00b7 \u03bb\u1d62 is a bit string, result of the concatenation between the bit string x\u1d62 and the single bit \u03bb\u1d62. The H function generates a one bit longer sequence from the initial seed. By calling the H function l(k) times and taking just the last bit from each iteration, we have generated a sequence of l(k) bits. Obviously this function is G.", "We are now able to build a function that takes k bit and returns l(k) bit so that no algorithm can decide if the l(k) bit are generated from a real random source. With this trick we moved from the problem to build a function that outputs l(k) bit (with l(\u00b7) generic polynomial function) to one that returns just k+1 bits. What\u2019s remains is to define the H function.", "Choosing H as a one-way permutation it\u2019s a good idea.", "H is a one-way permutation if it\u2019s hard to invert: given y, it\u2019s difficult to calculate x such that H(x) = y.", "A well known and widely used one-way permutation is the modular exponentiation. Given a prime number p and an integer x such that 0 < x < p-1,", "Where g is a generator for the cyclic group", "The number of the generators of this cyclic group is", "when p is an odd prime, where \u03d5 is the Euler\u2019s totient function. Now finding such x requires the computation of the discrete logarithm, which is a famous unsolved computational problem. That is to say, no efficient method to calculate the discrete logarithm of a big integer is known. Many algorithms in public-key cryptography base their security on the assumption that there is no efficient way to calculate it.", "We found a function that starts from k bits and returns k bits and it\u2019 s hard to invert. We need an extra one bit, according to the definition of H. This bit is an hardcore bit for a function f. An hardcore bit for f is a bit easily computable if x is known but hard to calculate if only f(x) is given.", "In order to find it let define this new operation between two k bit-strings x and y:", "If f(x) is a one-way permutation (like the one defined above) and g(x, y) = f(x) \u2016 y, then \u27e8x, y\u27e9 it\u2019s an hardcore bit for g, where \u2016 stands for bit string concatenation. This is stated by Goldreich-Levin theorem.", "Finally we found a PRNG H and this is its formal definition:", "Now we can build a good PRNG based on the definition we gave of H and G. For those who missed, G is a function (actually the PRNG itself) that, given a kbit-string in input, outputs a l(k)bit-string and no randomised algorithm can say if the string produced is generated by a real random source or not; H is a function that helps to find those pseudorandom bit.", "Notice that I assumed the generator g = 2. You should find a generator depending on p since this is just an example (even if statistically 2 is a frequent generator). If you want to find a generator for your p you can use this online tool that calculates the root primitives modulo a given prime number.", "Now the main function G, the PRNG:", "Where l(\u00b7) can be any polynomial function.", "Since the input of H is a bit string that will be split into two halves, the length of the initial seed x0 must be even.", "Remember, from the definitions of the previous section, that a longer seed produces a more indistinguishable sequence. This means that a longer seed will produce a less predictable sequence of bits.", "In order to manage easily the bit manipulation, the implementation of the algorithm works on strings, so that it can be translated better from the pseudocode shown above to Python code. But it can be enhanced by working directly with bits at the cost of readability.", "I used the modular exponentiation as one-way permutation and l(k) = k\u00b2-2k+1.", "The only argument taken is the initial seed that must be a binary string and longer no more than the value of the variable SEED_SIZE.", "If you want to generate a sequence of numbers you can use any part of the output as seed of the next iteration. Bigger seeds produce better outputs, but before playing with it, remember to redefine a proper l(\u00b7) and, if you want to maintain the modular exponentiation as one-way transformation, choose a new GENERATOR that is a primitive root of MODULUS.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F9bc37d3a87d5&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-pseudorandom-number-generator-9bc37d3a87d5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-pseudorandom-number-generator-9bc37d3a87d5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-pseudorandom-number-generator-9bc37d3a87d5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-pseudorandom-number-generator-9bc37d3a87d5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----9bc37d3a87d5--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9bc37d3a87d5--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://davidbertoldi.medium.com/?source=post_page-----9bc37d3a87d5--------------------------------", "anchor_text": ""}, {"url": "https://davidbertoldi.medium.com/?source=post_page-----9bc37d3a87d5--------------------------------", "anchor_text": "David Bertoldi"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2ae088a44195&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-pseudorandom-number-generator-9bc37d3a87d5&user=David+Bertoldi&userId=2ae088a44195&source=post_page-2ae088a44195----9bc37d3a87d5---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9bc37d3a87d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-pseudorandom-number-generator-9bc37d3a87d5&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9bc37d3a87d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-pseudorandom-number-generator-9bc37d3a87d5&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/how-to-get-an-unbiased-rng-from-an-unbalanced-one-dbb44850e5f7", "anchor_text": "How to get an unbiased RNG from an unbalanced one"}, {"url": "http://web.archive.org/web/20161115065946/http://en.wikipedia.org/wiki/Probabilistic_Turing_machine", "anchor_text": "probabilistic Turing machine"}, {"url": "https://en.wikipedia.org/wiki/BPP_(complexity)", "anchor_text": "BPP class"}, {"url": "https://en.wikipedia.org/wiki/BPP_(complexity)", "anchor_text": "probabilistic polynomial time problems (BPP)"}, {"url": "https://en.wikipedia.org/wiki/Euler%27s_totient_function", "anchor_text": "Euler\u2019s totient function"}, {"url": "https://en.wikipedia.org/wiki/Hard-core_predicate", "anchor_text": "Goldreich-Levin theorem"}, {"url": "http://www.bluetulip.org/2014/programs/primitive.html", "anchor_text": "this online tool"}, {"url": "https://gist.github.com/firaja/f2eabc05db3fdd4cf60373f5971b4eb3", "anchor_text": "Link to the gist"}, {"url": "https://medium.com/tag/python?source=post_page-----9bc37d3a87d5---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/algorithms?source=post_page-----9bc37d3a87d5---------------algorithms-----------------", "anchor_text": "Algorithms"}, {"url": "https://medium.com/tag/data-science?source=post_page-----9bc37d3a87d5---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/coding?source=post_page-----9bc37d3a87d5---------------coding-----------------", "anchor_text": "Coding"}, {"url": "https://medium.com/tag/science?source=post_page-----9bc37d3a87d5---------------science-----------------", "anchor_text": "Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9bc37d3a87d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-pseudorandom-number-generator-9bc37d3a87d5&user=David+Bertoldi&userId=2ae088a44195&source=-----9bc37d3a87d5---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9bc37d3a87d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-pseudorandom-number-generator-9bc37d3a87d5&user=David+Bertoldi&userId=2ae088a44195&source=-----9bc37d3a87d5---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9bc37d3a87d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-pseudorandom-number-generator-9bc37d3a87d5&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9bc37d3a87d5--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F9bc37d3a87d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-pseudorandom-number-generator-9bc37d3a87d5&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----9bc37d3a87d5---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----9bc37d3a87d5--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----9bc37d3a87d5--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----9bc37d3a87d5--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----9bc37d3a87d5--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----9bc37d3a87d5--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----9bc37d3a87d5--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----9bc37d3a87d5--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----9bc37d3a87d5--------------------------------", "anchor_text": ""}, {"url": "https://davidbertoldi.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://davidbertoldi.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "David Bertoldi"}, {"url": "https://davidbertoldi.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "268 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2ae088a44195&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-pseudorandom-number-generator-9bc37d3a87d5&user=David+Bertoldi&userId=2ae088a44195&source=post_page-2ae088a44195--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fa8b195f26149&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-pseudorandom-number-generator-9bc37d3a87d5&newsletterV3=2ae088a44195&newsletterV3Id=a8b195f26149&user=David+Bertoldi&userId=2ae088a44195&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}