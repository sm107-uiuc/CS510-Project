{"url": "https://towardsdatascience.com/convolutional-neural-networks-from-the-ground-up-c67bb41454e1", "time": 1682993450.084117, "path": "towardsdatascience.com/convolutional-neural-networks-from-the-ground-up-c67bb41454e1/", "webpage": {"metadata": {"title": "Convolutional Neural Networks from the ground up | by Alejandro Escontrela | Towards Data Science", "h1": "Convolutional Neural Networks from the ground up", "description": "When Yann LeCun published his work on the development of a new kind of neural network architecture [1], the Convolutional Neural Network (CNN), his work went largely unnoticed. It took 14 years and a\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/Alescontrela/Numpy-CNN", "anchor_text": "here", "paragraph_index": 2}, {"url": "http://yann.lecun.com/exdb/mnist/", "anchor_text": "MNIST handwritten digit database", "paragraph_index": 3}, {"url": "https://github.com/Alescontrela/Numpy-CNN", "anchor_text": "here", "paragraph_index": 4}, {"url": "https://arxiv.org/pdf/1802.01528.pdf", "anchor_text": "this publication", "paragraph_index": 4}, {"url": "https://www.codecademy.com/learn/learn-python", "anchor_text": "this resource", "paragraph_index": 4}, {"url": "https://www.google.com/search?q=numpy+sum&rlz=1C5CHFA_enUS741US741&oq=numpy+sum&aqs=chrome..69i57j0l5.1102j0j4&sourceid=chrome&ie=UTF-8", "anchor_text": "sum", "paragraph_index": 16}, {"url": "https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.maximum.html", "anchor_text": "max", "paragraph_index": 25}, {"url": "https://www.facebook.com/yann.lecun/posts/10152820758292143", "anchor_text": "according to this Facebook post by Yann LeCun", "paragraph_index": 31}, {"url": "https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.reshape.html", "anchor_text": "reshape", "paragraph_index": 32}, {"url": "https://github.com/Alescontrela/Numpy-CNN", "anchor_text": "this repo", "paragraph_index": 43}, {"url": "http://yann.lecun.com/exdb/mnist/", "anchor_text": "here", "paragraph_index": 44}, {"url": "https://machinelearningmastery.com/adam-optimization-algorithm-for-deep-learning/", "anchor_text": "here", "paragraph_index": 48}, {"url": "https://github.com/Alescontrela/Numpy-CNN", "anchor_text": "this repo", "paragraph_index": 49}, {"url": "https://alescontrela.github.io/Ale/", "anchor_text": "https://alescontrela.github.io/Ale/", "paragraph_index": 63}], "all_paragraphs": ["When Yann LeCun published his work on the development of a new kind of neural network architecture [1], the Convolutional Neural Network (CNN), his work went largely unnoticed. It took 14 years and a team of researchers from The University of Toronto to bring CNN\u2019s into the public\u2019s view during the 2012 ImageNet Computer Vision competition. Their entry, which they named AlexNet after chief architect Alex Krizhevsky, achieved an error of only 15.8% when tasked with classifying millions of images from thousands of categories [2]. Fast forward to 2018 and the current state-of-the-art Convolutional Neural Networks achieve accuracies that surpass human-level performance [3].", "Motivated by these promising results, I set out to understand how CNN\u2019s function, and how it is that they perform so well. As Richard Feynman pointed out, \u201cWhat I cannot build, I do not understand\u201d, and so to gain a well-rounded understanding of this advancement in AI, I built a convolutional neural network from scratch in NumPy. After finishing this project I feel that there\u2019s a disconnect between how complex convolutional neural networks appear to be, and how complex they really are. Hopefully, you too will share this feeling after building your own network from scratch.", "Code for this project can be found here.", "CNN\u2019s are best known for their ability to recognize patterns present in images, and so the task chosen for the network described in this post was that of image classification. One of the most common benchmarks for gauging how well a computer vision algorithm performs is to train it on the MNIST handwritten digit database: a collection of 70,000 handwritten digits and their corresponding labels. The goal is to train a CNN to be as accurate as possible when labeling handwritten digits (ranging from 0\u20139). After about five hours of training and two loops over the training set, the network presented here was able to achieve an accuracy of 98% on the test data, meaning it could correctly guess almost every handwritten digit shown to it.", "Let\u2019s go over the individual components that form the network and how they link together to form predictions from the input data. After explaining each component, we will code its functionality. In the last section of this post, we\u2019ll program every piece of the network and train it using NumPy (Code here). It is important to note that this section assumes at least a working knowledge of linear algebra and calculus, as well as familiarity with the Python programming language. If you are unfamiliar with these domains or are in need of a tune-up, check out this publication to learn about linear algebra in the scope of machine learning and this resource to start programming with Python. Without further ado, let\u2019s get into it.", "CNN\u2019s make use of filters (also known as kernels), to detect what features, such as edges, are present throughout an image. A filter is just a matrix of values, called weights, that are trained to detect specific features. The filter moves over each part of the image to check if the feature it is meant to detect is present. To provide a value representing how confident it is that a specific feature is present, the filter carries out a convolution operation, which is an element-wise product and sum between two matrices.", "When the feature is present in part of an image, the convolution operation between the filter and that part of the image results in a real number with a high value. If the feature is not present, the resulting value is low.", "In the following example, a filter that is in charge of checking for right-hand curves is passed over a part of the image. Since that part of the image contains the same curve that the filter is looking for, the result of the convolution operation is a large number (6600).", "But when that same filter is passed over a part of the image with a considerably different set of edges, the convolution\u2019s output is small, meaning that there was no strong presence of a right hand curve.", "The result of passing this filter over the entire image is an output matrix that stores the convolutions of this filter over various parts of the image. The filter must have the same number of channels as the input image so that the element-wise multiplication can take place. For instance, if the input image contains three channels (RGB, for example), then the filter must contain three channels as well.", "The convolution of a filter over a 2D image:", "Additionally, a filter can be slid over the input image at varying intervals, using a stride value. The stride value dictates by how much the filter should move at each step. The output dimensions of a strided convolution can be calculated using the following equation:", "Where n_in denotes the dimension of the input image, f denotes the window size, and s denotes the stride.", "So that the Convolutional Neural Network can learn the values for a filter that detect features present in the input data, the filter must be passed through a non-linear mapping. The output of the convolution operation between the filter and the input image is summed with a bias term and passed through a non-linear activation function. The purpose of the activation function is to introduce non-linearity into our network. Since our input data is non-linear (it is infeasible to model the pixels that form a handwritten signature linearly), our model needs to account for that. To do so, we use the Rectified Linear Unit (ReLU) activation function:", "As you can see, the ReLU function is quite simple; values that are less than or equal to zero become zero and all positive values remain the same.", "Usually, a network utilizes more than one filter per layer. When that is the case, the outputs of each filter\u2019s convolution over the input image are concatenated along the last axis, forming a final 3D output.", "Using NumPy, we can program the convolution operation quite easily. The convolution function makes use of a for-loop to convolve all the filters over the image. Within each iteration of the for-loop, two while-loops are used to pass the filter over the image. At each step, the filter is multipled element-wise(*) with a section of the input image. The result of this element-wise multiplication is then summed to obtain a single value using NumPy\u2019s sum method, and then added with a bias term.", "The filt input is initialized using a standard normal distribution and bias is initialized to be a vector of zeros.", "After one or two convolutional layers, it is common to reduce the size of the representation produced by the convolutional layer. This reduction in the representation\u2019s size is known as downsampling.", "To speed up the training process and reduce the amount of memory consumed by the network, we try to reduce the redundancy present in the input feature. There are a couple of ways we can downsample an image, but for this post, we will look at the most common one: max pooling.", "In max pooling, a window passes over an image according to a set stride (how many units to move on each pass). At each step, the maximum value within the window is pooled into an output matrix, hence the name max pooling.", "In the following visual, a window of size f=2 passes over an image with a stride of 2. f denotes the dimensions of the max pooling window (red box) and s denotes the number of units the window moves in the x and y-direction. At each step, the maximum value within the window is chosen:", "Max pooling significantly reduces the representation size, in turn reducing the amount of memory required and the number of operations performed later in the network. The output size of the max pooling operation can be calculated using the following equation:", "Where n_in denotes the dimension of the input image, f denotes the window size, and s denotes the stride.", "An added benefit of max pooling is that it forces the network to focus on a few neurons instead of all of them which has a regularizing effect on the network, making it less likely to overfit the training data and hopefully generalize well.", "The max pooling operation boils down to a for loop and a couple of while loops. The for-loop is used pass through each layer of the input image, and the while-loops slide the window over every part of the image. At each step, we use NumPy\u2019s max method to obtain the maximum value:", "After multiple convolutional layers and downsampling operations, the 3D image representation is converted into a feature vector that is passed into a Multi-Layer Perceptron, which merely is a neural network with at least three layers. This is referred to as a Fully-Connected Layer.", "In the fully-connected operation of a neural network, the input representation is flattened into a feature vector and passed through a network of neurons to predict the output probabilities. The following image describes the flattening operation:", "The rows are concatenated to form a long feature vector. If multiple input layers are present, its rows are also concatenated to form an even longer feature vector.", "The feature vector is then passed through multiple dense layers. At each dense layer, the feature vector is multiplied by the layer\u2019s weights, summed with its biases, and passed through a non-linearity.", "The following image visualizes the fully connected operation and dense layers:", "It is worth noting that, according to this Facebook post by Yann LeCun, \u201cthere is no such thing as a fully connected layer,\u201d and he\u2019s right. When thinking back to the convolutional layer, one realizes that a fully connected layer is a convolutional operation with a 1x1 output kernel. That is, If we pass 128 n-by-n filters over an image of dimensions n-by-n, what we would end up with is a vector of length 128.", "NumPy makes it quite simple to program the fully connected layer of a CNN. As a matter of fact, you can do it in a single line of code using NumPy\u2019s reshape method:", "In this code snippet, we gather the dimensions of the previous layer (number of channels and height/width) then use them to flatten the previous layer into a fully connected layer. This fully connected layer is proceeded by multiple dense layers of neurons that eventually produce raw predictions:", "The output layer of a CNN is in charge of producing the probability of each class (each digit) given the input image. To obtain these probabilities, we initialize our final Dense layer to contain the same number of neurons as there are classes. The output of this dense layer then passes through the Softmax activation function, which maps all the final dense layer outputs to a vector whose elements sum up to one:", "Where x denotes each element in the final layer\u2019s outputs.", "Once again, the softmax function can be written in a few lines of simple code:", "To measure how accurate our network was in predicting the handwritten digit from the input image, we make use of a loss function. The loss function assigns a real-valued number to define the model\u2019s accuracy when predicting the output digit. A common loss function to use when predicting multiple output classes is the Categorical Cross-Entropy Loss function, defined as follows:", "Here, \u0177 is the CNN\u2019s prediction, and y is the desired output label. When making predictions over multiple examples, we take the average of the loss over all examples.", "The Categorical Cross-Entropy loss function can be easily programmed using two simple lines of code, which are a mirror of the equation shown above:", "This about wraps up the operations that compose a convolutional neural network. Let us join these operations to construct the CNN.", "Given the relatively low amount of classes (10 in total) and the small size of each training image (28x28px.), a simple network architecture was chosen to solve the task of digit recognition. The network uses two consecutive convolutional layers followed by a max pooling operation to extract features from the input image. After the max pooling operation, the representation is flattened and passed through a Multi-Layer Perceptron (MLP) to carry out the task of classification.", "Now that we have gone over the elementary operations that form a Convolutional Neural Network, let\u2019s create it.", "Feel free to use this repo when following along.", "The MNIST handwritten digit training and test data can be obtained here. The files store image and label data as tensors, so the files must be read through their bytestream. We define two helper methods to perform the extraction:", "We first define methods to initialize both the filters for the convolutional layers and the weights for the dense layers. To make for a smoother training process, we initialize each filter with a mean of 0 and a standard deviation of 1.", "To compute the gradients that will force the network to update its weights and optimize its objective, we need to define methods that backpropagate gradients through the convolutional and max pooling layers. To keep this post (relatively) short, I won\u2019t go into the derivation of these gradients but, If you would like me to make a post that describes backpropagation through a convolutional neural network, leave a comment below.", "In the spirit abstraction, we now define a method that combines the forward and backward operations of a convolutional neural network. It takes the network\u2019s parameters and hyperparameters as inputs and spits out the gradients:", "To efficiently force the network\u2019s parameters to learn meaningful representations, we use the Adam optimization algorithm. I won\u2019t go into much detail regarding this algorithm, but it can be thought of this way: if stochastic gradient descent is a drunk college student stumbling down a hill, then Adam is a bowling ball beaming down that same hill. A better explanation of Adam found here.", "That about wraps up the development of the network. To train it locally, download this repo and run the following command in the terminal:", "Replace <file_name> with whatever file name you would like. The terminal should display the following progress bar to training progress, as well as the cost for the current training batch.", "After the CNN has finished training, a .pkl file containing the network\u2019s parameters is saved to the directory where the script was run.", "The network takes about 5 hours to train on my macbook pro. I included the trained params in the GitHub repo under the name params.pkl. To use them, replace <file_name> with params.pkl.", "To measure the network\u2019s accuracy, run the following command in the terminal:", "This command will use the trained parameters to run predictions on all 10,000 digits in the test dataset. After all predictions are made, a value displaying the network\u2019s accuracy will appear in the command prompt:", "If you run into any issues regarding dependencies, the following command can be used to install the required packages:", "After two epochs over the training set, the network\u2019s accuracy on the test set averaged 98%, which I would say is quite decent. After extending the training time by 2\u20133 epochs, I found that the test set performance decreased. I speculate that on the third to fourth training loop, the network begins overfitting the training set and is no longer generalizing.", "Because we were passing in batches of data, the network had to account for the variability in every new batch, which is why the cost fluctuated so heavily during training time:", "Additionally, we measure the network\u2019s recall to understand how well it is able to predict each digit. Recall is a measure of accuracy, and it can be understood with the following example: of all the digits labeled \u20187\u2019(or any other digit) in our test set, how many did our network correctly predict?", "The following bar graph displays the recall for each digit:", "This indicates that our network learned meaningful representations for all the digits. Overall, the CNN generalized well.", "Hopefully this post provided you with a richer understanding of convolutional neural networks, and perhaps even removed their perceived complexity. If you have any questions or would like to know a bit more, drop a comment below :)", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "On the first epoch. ML/DL Enthusiast, Georgia Tech Undergrad, and Oxford Comma advocate. https://alescontrela.github.io/Ale/"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fc67bb41454e1&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconvolutional-neural-networks-from-the-ground-up-c67bb41454e1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconvolutional-neural-networks-from-the-ground-up-c67bb41454e1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconvolutional-neural-networks-from-the-ground-up-c67bb41454e1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconvolutional-neural-networks-from-the-ground-up-c67bb41454e1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----c67bb41454e1--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c67bb41454e1--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@alejandroescontrela?source=post_page-----c67bb41454e1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@alejandroescontrela?source=post_page-----c67bb41454e1--------------------------------", "anchor_text": "Alejandro Escontrela"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff42b0a103aba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconvolutional-neural-networks-from-the-ground-up-c67bb41454e1&user=Alejandro+Escontrela&userId=f42b0a103aba&source=post_page-f42b0a103aba----c67bb41454e1---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc67bb41454e1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconvolutional-neural-networks-from-the-ground-up-c67bb41454e1&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc67bb41454e1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconvolutional-neural-networks-from-the-ground-up-c67bb41454e1&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.kdnuggets.com/2018/02/8-neural-network-architectures-machine-learning-researchers-need-learn.html", "anchor_text": "image source"}, {"url": "https://devblogs.nvidia.com/mocha-jl-deep-learning-julia/", "anchor_text": "source"}, {"url": "https://github.com/Alescontrela/Numpy-CNN", "anchor_text": "here"}, {"url": "http://yann.lecun.com/exdb/mnist/", "anchor_text": "MNIST handwritten digit database"}, {"url": "https://codeburst.io/use-tensorflow-dnnclassifier-estimator-to-classify-mnist-dataset-a7222bf9f940?gi=4a1246898237", "anchor_text": "image source"}, {"url": "https://github.com/Alescontrela/Numpy-CNN", "anchor_text": "here"}, {"url": "https://arxiv.org/pdf/1802.01528.pdf", "anchor_text": "this publication"}, {"url": "https://www.codecademy.com/learn/learn-python", "anchor_text": "this resource"}, {"url": "http://technodocbox.com/3D_Graphics/70716176-Deep-neural-networks-applications-in-handwriting-recognition.html", "anchor_text": "image source"}, {"url": "https://adeshpande3.github.io/A-Beginner%27s-Guide-To-Understanding-Convolutional-Neural-Networks/", "anchor_text": "image source"}, {"url": "https://adeshpande3.github.io/A-Beginner%27s-Guide-To-Understanding-Convolutional-Neural-Networks/", "anchor_text": "image source"}, {"url": "https://rubikscode.net/2018/02/26/introduction-to-convolutional-neural-networks/", "anchor_text": "Introduction to Convolutional Neural Networks"}, {"url": "https://medium.com/@kanchansarkar/relu-not-a-differentiable-function-why-used-in-gradient-based-optimization-7fef3a4cecec", "anchor_text": "image source"}, {"url": "https://www.google.com/search?q=numpy+sum&rlz=1C5CHFA_enUS741US741&oq=numpy+sum&aqs=chrome..69i57j0l5.1102j0j4&sourceid=chrome&ie=UTF-8", "anchor_text": "sum"}, {"url": "https://zhuanlan.zhihu.com/p/32442184", "anchor_text": "image source"}, {"url": "https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.maximum.html", "anchor_text": "max"}, {"url": "https://rubikscode.net/2018/02/26/introduction-to-convolutional-neural-networks/", "anchor_text": "image source"}, {"url": "https://cambridgespark.com/content/tutorials/convolutional-neural-networks-with-keras/index.html", "anchor_text": "image source"}, {"url": "https://www.facebook.com/yann.lecun/posts/10152820758292143", "anchor_text": "according to this Facebook post by Yann LeCun"}, {"url": "https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.reshape.html", "anchor_text": "reshape"}, {"url": "https://github.com/Alescontrela/Numpy-CNN", "anchor_text": "this repo"}, {"url": "http://yann.lecun.com/exdb/mnist/", "anchor_text": "here"}, {"url": "https://machinelearningmastery.com/adam-optimization-algorithm-for-deep-learning/", "anchor_text": "here"}, {"url": "https://github.com/Alescontrela/Numpy-CNN", "anchor_text": "this repo"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----c67bb41454e1---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/convolutional-network?source=post_page-----c67bb41454e1---------------convolutional_network-----------------", "anchor_text": "Convolutional Network"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----c67bb41454e1---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/computer-vision?source=post_page-----c67bb41454e1---------------computer_vision-----------------", "anchor_text": "Computer Vision"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----c67bb41454e1---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc67bb41454e1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconvolutional-neural-networks-from-the-ground-up-c67bb41454e1&user=Alejandro+Escontrela&userId=f42b0a103aba&source=-----c67bb41454e1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc67bb41454e1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconvolutional-neural-networks-from-the-ground-up-c67bb41454e1&user=Alejandro+Escontrela&userId=f42b0a103aba&source=-----c67bb41454e1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc67bb41454e1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconvolutional-neural-networks-from-the-ground-up-c67bb41454e1&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c67bb41454e1--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fc67bb41454e1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconvolutional-neural-networks-from-the-ground-up-c67bb41454e1&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----c67bb41454e1---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----c67bb41454e1--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----c67bb41454e1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----c67bb41454e1--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----c67bb41454e1--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----c67bb41454e1--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----c67bb41454e1--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----c67bb41454e1--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----c67bb41454e1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@alejandroescontrela?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@alejandroescontrela?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Alejandro Escontrela"}, {"url": "https://medium.com/@alejandroescontrela/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "435 Followers"}, {"url": "https://alescontrela.github.io/Ale/", "anchor_text": "https://alescontrela.github.io/Ale/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff42b0a103aba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconvolutional-neural-networks-from-the-ground-up-c67bb41454e1&user=Alejandro+Escontrela&userId=f42b0a103aba&source=post_page-f42b0a103aba--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2Ff42b0a103aba%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconvolutional-neural-networks-from-the-ground-up-c67bb41454e1&user=Alejandro+Escontrela&userId=f42b0a103aba&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}