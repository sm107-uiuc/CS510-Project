{"url": "https://towardsdatascience.com/10-awesome-python-3-9-features-b8c27f5eba5c", "time": 1683014664.8177762, "path": "towardsdatascience.com/10-awesome-python-3-9-features-b8c27f5eba5c/", "webpage": {"metadata": {"title": "10 Awesome Python 3.9 Features. The Must-Know Python 3.9 Features | by Farhad Malik | Towards Data Science", "h1": "10 Awesome Python 3.9 Features", "description": "Just like most of the Python fans, I am super excited to explore and use the latest features. This article will provide an overview of the must-know features of Python 3.9. I read through the Python\u2026"}, "outgoing_paragraph_urls": [{"url": "https://docs.python.org/3.9/whatsnew/3.9.html", "anchor_text": "here", "paragraph_index": 74}], "all_paragraphs": ["Just like most of the Python fans, I am super excited to explore and use the latest features. This article will provide an overview of the must-know features of Python 3.9.", "This is again an exciting time for the Python programmers.", "I read through the Python 3.9 release notes and the associated discussions. Based on the information, I wanted to write a comprehensive guide so everyone can get a glimpse of the features along with their detailed workings.", "Before I begin, I have to say, I am very excited to explore version 3.9 as some of the features are definitely going to be used in my applications.", "From the dictionary update/merge to the addition of new string methods to the introduction of zoneinfo library, a number of new features have been added. Furthermore, a new stable and high-performant parser has been introduced.", "The standard library is updated with numerous new features along with the addition of new modules, zoneinfo and graphlib. A number of modules have been improved too, such as ast, asyncio, concurrent.futures, multiprocessing, xml amongst others.", "This release has further stabilized the Python standard library.", "Let\u2019s explore Python 3.9 features now.", "Two new operators, | and |= have been added to the built-in dict class.", "The | operator is used to merge dictionaries whereas the |= operator can be used to update the dictionaries.", "The key rule to remember is that if there are any key conflicts then the rightmost-value will be kept. It means that the last seen value always wins. This is the current behavior of other dict operations too.", "As we can see above, the two new operators, | and |=, have been added to the built-in dict class.", "The | operator is used to merge dictionaries whereas the |= operator can be used to update the dictionaries.", "We can consider | as the + (concatenate) in lists and we can consider |= as the += operator (extend) in lists.", "If we assess version 3.8, we will notice that there are few ways of merging and updating dictionaries.", "As an instance, we can do first_dict.update(second_dict). The issue with this approach is that it modifies first_dict in place. One way to solve this issue is to copy the first_dict in a temporary variable and then perform an update. However, it adds extra unnecessary code just to get the update/merge to work.", "We can also use {**first_dict, **second_dict}. The issue with this approach is that it is not easily discoverable and it\u2019s harder to understand what the code is intended to perform. The other issue with this approach is that the mappings types are ignored and the type is always dict. As an instance, if the first_dict is a defaultdict and the second_dict is of type dict then it will fail.", "Lastly, the collections library contains aChainMap function. It can take in two dictionaries such as ChainMap(first_dict, second_dict) and return a merged dictionary but again, this library is not commonly-known.", "It also fails for subclasses of dict that have an incompatible __init__ method.", "The Python 3.9 version is proposing to replace the current LL(1) based Python parser with a new PEG-based parser which is high-performant and stable.", "The current CPython parser is LL(1) based. Subsequently, the grammar is LL(1) based to allow it to be parsed by the LL(1) parser. The LL(1) parser is a top-down parser. Furthermore, it parses the inputs from left to right. The current grammar is context-free grammar hence the context of the tokens is not taken into account.", "The Python 3.9 version is proposing to replace it with a new PEG-based parser which means it will lift the current LL(1) grammar Python restrictions. Additionally, the current parser has been patched with a number of hacks that are going to be removed. As a result, it will reduce the maintenance cost\u00a0in\u00a0long\u00a0run.", "As an instance, although the LL(1) parsers and grammars are simple to implement, the restrictions do not allow them to express common constructs in a natural way to the language designer and the reader. The parser only looks at one token ahead to distinguish possibilities.", "The choice operator | is ordered. For an instance, if the following rule is written:", "The LL(1) parser, a context-free grammar parser, will generate constructions such that given an input string will deduce whether it needs to expand A or B or C. The PEG parser is different. It will check if the first alternative succeeds. If it fails only then it will continue with the second or the third.", "The PEG parser generates exactly one valid-tree for a string. Hence it\u2019s not ambiguous like the LL(1) parser.", "The PEG parser also directly generates the AST nodes for a rule via grammar actions. This means it avoids the generation of the intermediate steps.", "The key point to take is that the PEG parser has been extensively tested and validated. The PEG parser performance is fine-tuned. As a result, for most instructions, it comes within 10% of the memory and speed consumption of the current parser. This is mainly because the intermediate syntax tree is not constructed.", "I am eliminating the mention of the low-level details for the sake of keeping the article\u00a0simple\u00a0and\u00a0readable. The link is provided at the bottom\u00a0if\u00a0more\u00a0information\u00a0is\u00a0required\u00a0to\u00a0be understood.", "Two new functions have been added to the str object.", "One of the common tasks in a data science application that involves manipulating text is to remove the prefix/suffix of the strings. Two new functions have been added to the str object. These functions can be used to remove unneeded prefix and suffix from a string.", "The first function removes the prefix. It is str.removeprefix(prefix). The second function removes the suffix. It is str.removesuffix(suffix).", "Remember string is a collection of characters and each character has an index in a string. We can use the indexes along with the colon : to return a subset of the string. This feature is known as slicing a string.", "If we study the functions, internally they check if the string starts with a prefix (or ends with a suffix) and if it does then they return a string without a prefix (or after a suffix) using str[:] slicing feature.", "With these functions being part of the standard library, we get an API that is consistent, less fragile, high performant and is more descriptive.", "Annotating programs have been made simpler in this release by removing the parallel type hierarchy in Python.", "The release has enabled support for the generics syntax in all standard collections currently available in the typing module.", "We can use the list or dict built-in collection types as generic types instead of using the typing.List or typing.Dict in the signature of our function.", "Therefore, the code now looks cleaner and it has made it easier to understand/explain the code.", "Although Python is a dynamically typed language, the annotation of the types in the Python program enables introspection of the type. Subsequently, the annotation can be used for API generation of runtime type checking.", "This release has enabled support for the generics syntax in all standard collections currently available in the typing module.", "A generic type is usually a container e.g. list. It is a type that can be parameterized. Parameterized generic is an instance of a generic with the expected types for container elements e.g. list[str]", "We can use the list or dict built-in collection types as generic types instead of using the typing.List or typing.Dict.", "For example, we could guide the Python runtime type checking by annotating the code:", "Over the past few releases, a number of static typing features have been built incrementally on top of the existing Python runtime. Some of these features were constrained by existing syntax and runtime behavior. As a consequence, there was a duplicated collection hierarchy in the typing module due to generics.", "For instance, we will see typing.List, typing.Dictionary along with built-in list, dictionary, and so on. This enables us to write code:", "The module zoneinfo has been created to support the IANA time zone database. This support for the IANA time zone database has been added to the standard library.", "IANA time zones are often called tz or zone info. There are a large number of IANA time zones with different search paths to specify the IANA timezone to a date-time object. As an instance, we can pass in the name of the search path as the Continent/City to a datetime object to set its tzinfo.", "If we pass in an invalid key then zoneinfo.ZoneInfoNotFoundError will be raised.", "We use the datetime library to create a datetime object and specify its timezone\u00a0by\u00a0setting\u00a0the\u00a0tzinfo propety. However, we can end up creating complex timezone rules when using the datetime.tzinfo baseline.", "Most of time, we only need to set the object and set its timezone to either UTC, system local time zone, or IANA time zone.", "We can create a zoneinfo.ZoneInfo(key) object where the key is of type string indicating the search path of the zone file in the system time zone database. The zoneinfo.ZoneInfo(key) object can be created and set as the tzinfo property of the datetime object.", "A new parameter cancel_futures have been added to the concurrent.futures.Executor.shutdown().", "This parameter cancels all of the pending futures that have not started. Prior to version 3.9, the process would wait for them to complete before shutting down the executor.", "The new parameter cancel_futures have been added to both ThreadPoolExecutor and ProcessPoolExecutor. The way it works is when the value of the parameter is True then all pending futures would be canceled\u00a0when\u00a0the\u00a0shutdown()\u00a0function\u00a0is\u00a0called.", "In a nutshell, when the shutdown() is executed, the interpreter checks if the executor is not garbage collected. If it is still in memory then it gets all of the pending worker items and then cancels the futures.", "Once there are no pending work items then it shuts down the worker.", "A number of improvements have been made to the asyncio and multiprocessing library in this release.", "With regards to the multiprocessing library improvements, a new method close() has been added to the multiprocessing.SimpleQueue class.", "This method explicitly closes the queue. This will ensure that the queue is closed and does not stay around for longer than expected. The key to remember is that the methods get(), put(), empty() must not be called once the queue is closed.", "The main issue with importing Python libraries prior to the 3.9 release was the inconsistent import behavior in Python when the relative import went past its top-level package.", "It has been fixed now. The __import__() now raises ImportError instead of ValueError.", "Another feature that has been added in the 3.9 release is the function random.Random.randbytes(). This function can be used to generate random bytes.", "We can generate random numbers but what if we needed to generate random bytes? Prior to 3.9 version, the developers had to get creative to generate the random bytes. Although we can use os.getrandom(), os.urandom() or secrets.token_bytes() but we can\u2019t generate pseudo-random patterns.", "As an instance, to ensure the random numbers are generated with expected behaviour and the process is reproducible, we generally use the seed with random.Random module.", "As a result, random.Random.randbytes() method has been introduced. It can generate random bytes\u00a0in\u00a0a\u00a0controlled\u00a0manner\u00a0too.", "Prior to the Python version 3.9, the \u201c\u201d.replace(\u201c\u201d,s,n) returned empty string instead of s for all non-zero n.", "This bug confused the users and caused inconsistent behavior in applications.", "The 3.9 release has fixed this issue and it is now consistent with \"\".replace(\"\", s).", "The way replace function works is that for a given max replace occurrence argument, it replaces a set of characters from the string by a new set of characters.", "To further explain the issue, prior to the version 3.9, the replace function had inconsistent behaviour", "Therefore the change now is that if we pass in:", "A number of redundant features have been eliminated in the Python 3.9 too, such as Py_UNICODE_MATCH.", "I am very excited to explore 3.9 as some of the features are definitely going to be used in my applications.", "If you want to read more about those improvements, please read the official guide here.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "My personal blog, aiming to explain complex mathematical, financial and technological concepts in simple terms. Contact: FarhadMalik84@googlemail.com"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fb8c27f5eba5c&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-awesome-python-3-9-features-b8c27f5eba5c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-awesome-python-3-9-features-b8c27f5eba5c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-awesome-python-3-9-features-b8c27f5eba5c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-awesome-python-3-9-features-b8c27f5eba5c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----b8c27f5eba5c--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----b8c27f5eba5c--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@farhadmalik?source=post_page-----b8c27f5eba5c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@farhadmalik?source=post_page-----b8c27f5eba5c--------------------------------", "anchor_text": "Farhad Malik"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd9b237bc89f0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-awesome-python-3-9-features-b8c27f5eba5c&user=Farhad+Malik&userId=d9b237bc89f0&source=post_page-d9b237bc89f0----b8c27f5eba5c---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb8c27f5eba5c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-awesome-python-3-9-features-b8c27f5eba5c&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb8c27f5eba5c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-awesome-python-3-9-features-b8c27f5eba5c&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.python.org/dev/peps/pep-0584", "anchor_text": "https://www.python.org/dev/peps/pep-0584"}, {"url": "https://www.python.org/dev/peps/pep-0617", "anchor_text": "https://www.python.org/dev/peps/pep-0617"}, {"url": "https://www.python.org/dev/peps/pep-0616", "anchor_text": "https://www.python.org/dev/peps/pep-0616"}, {"url": "https://www.python.org/dev/peps/pep-0585", "anchor_text": "https://www.python.org/dev/peps/pep-0585"}, {"url": "https://www.python.org/dev/peps/pep-0615", "anchor_text": "https://www.python.org/dev/peps/pep-0615"}, {"url": "https://bugs.python.org/issue30966", "anchor_text": "https://bugs.python.org/issue30966"}, {"url": "https://bugs.python.org/issue30966", "anchor_text": "https://bugs.python.org/issue30966"}, {"url": "https://bugs.python.org/issue37444", "anchor_text": "https://bugs.python.org/issue37444"}, {"url": "https://bugs.python.org/issue40286", "anchor_text": "https://bugs.python.org/issue40286"}, {"url": "https://bugs.python.org/issue28029", "anchor_text": "https://bugs.python.org/issue28029"}, {"url": "https://docs.python.org/3.9/whatsnew/3.9.html", "anchor_text": "here"}, {"url": "https://medium.com/tag/python?source=post_page-----b8c27f5eba5c---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/python3?source=post_page-----b8c27f5eba5c---------------python3-----------------", "anchor_text": "Python3"}, {"url": "https://medium.com/tag/programming?source=post_page-----b8c27f5eba5c---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/technology?source=post_page-----b8c27f5eba5c---------------technology-----------------", "anchor_text": "Technology"}, {"url": "https://medium.com/tag/fintech?source=post_page-----b8c27f5eba5c---------------fintech-----------------", "anchor_text": "Fintech"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb8c27f5eba5c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-awesome-python-3-9-features-b8c27f5eba5c&user=Farhad+Malik&userId=d9b237bc89f0&source=-----b8c27f5eba5c---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb8c27f5eba5c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-awesome-python-3-9-features-b8c27f5eba5c&user=Farhad+Malik&userId=d9b237bc89f0&source=-----b8c27f5eba5c---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb8c27f5eba5c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-awesome-python-3-9-features-b8c27f5eba5c&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----b8c27f5eba5c--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fb8c27f5eba5c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-awesome-python-3-9-features-b8c27f5eba5c&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----b8c27f5eba5c---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----b8c27f5eba5c--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----b8c27f5eba5c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----b8c27f5eba5c--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----b8c27f5eba5c--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----b8c27f5eba5c--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----b8c27f5eba5c--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----b8c27f5eba5c--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----b8c27f5eba5c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@farhadmalik?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@farhadmalik?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Farhad Malik"}, {"url": "https://medium.com/@farhadmalik/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "9.1K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd9b237bc89f0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-awesome-python-3-9-features-b8c27f5eba5c&user=Farhad+Malik&userId=d9b237bc89f0&source=post_page-d9b237bc89f0--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F7beb1a74b028&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-awesome-python-3-9-features-b8c27f5eba5c&newsletterV3=d9b237bc89f0&newsletterV3Id=7beb1a74b028&user=Farhad+Malik&userId=d9b237bc89f0&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}