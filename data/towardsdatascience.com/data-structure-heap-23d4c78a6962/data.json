{"url": "https://towardsdatascience.com/data-structure-heap-23d4c78a6962", "time": 1682994962.539357, "path": "towardsdatascience.com/data-structure-heap-23d4c78a6962/", "webpage": {"metadata": {"title": "6 Steps to Understanding a Heap with Python | by Yasufumi TANIGUCHI | Towards Data Science", "h1": "6 Steps to Understanding a Heap with Python", "description": "Today I will explain the heap, which is one of the basic data structures. Also, the famous search algorithms like Dijkstra's algorithm or A* use the heap. A* can appear in the Hidden Malkov Model\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.youtube.com/watch?v=B7hVxCmfPtM", "anchor_text": "MIT\u2019s lecture", "paragraph_index": 0}, {"url": "https://en.wikipedia.org/wiki/Priority_queue", "anchor_text": "a priority queue", "paragraph_index": 1}, {"url": "https://docs.python.org/3/library/heapq.html", "anchor_text": "the heapq module", "paragraph_index": 42}, {"url": "https://github.com/python/cpython/blob/master/Lib/heapq.py", "anchor_text": "the source code here", "paragraph_index": 42}, {"url": "https://docs.python.org/3/library/heapq.html#basic-examples", "anchor_text": "the implementation of heapsort in the official documents", "paragraph_index": 43}], "all_paragraphs": ["Today I will explain the heap, which is one of the basic data structures. Also, the famous search algorithms like Dijkstra's algorithm or A* use the heap. A* can appear in the Hidden Malkov Model (HMM) which is often applied to time-series pattern recognition. Please note that this post isn\u2019t about search algorithms. I\u2019ll explain the way how a heap works, and its time complexity and Python implementation. The lecture of MIT OpenCourseWare really helps me to understand a heap. So I followed the way of explanations in that lecture but I summarized a little and added some Python implementations. This post is structured as follow and based on MIT\u2019s lecture. Let\u2019s get started!", "A heap is one common implementation of a priority queue. A priority queue contains items with some priority. You can always take an item out in the priority order from a priority queue. It is important to take an item out based on the priority. When you look around poster presentations at an academic conference, it is very possible you have set in order to pick some presentations. Or you will make a priority list before you go sight-seeing (In this case, an item will be a tourist spot.). A stack and a queue also contain items. You can take an item out from a stack if the item is the last one added to the stack. This is first in, last out (FILO). As for a queue, you can take an item out from the queue if this item is the first one added to the queue. This is first in, first out (FIFO). You can regard these as a specific type of a priority queue. This is because the priority of an inserted item in stack increases and the priority of an inserted item in a queue decreases.", "A heap is one of the tree structures and represented as a binary tree. I put the image of heap below. You can implement a tree structure by a pointer or an array. In this post, I choose to use the array implementation like below. In terms of space complexity, the array implementation has more benefits than the pointer implementation. The indices of the array correspond to the node number in the below image.", "The heap above is called a min heap, and each value of nodes is less than or equal to the value of child nodes. We call this condition the heap property.", "In a min heap, when you look at the parent node and its child nodes, the parent node always has the smallest value. When a heap has an opposite definition, we call it a max heap. For the following discussions, we call a min heap a heap.", "You can access a parent node or a child nodes in the array with indices below.", "When you look at the node of index 4, the relation of nodes in the tree corresponds to the indices of the array below.", "You need two operations to build a heap from an arbitrary array.", "We can build a heap by applying min_heapify to each node repeatedly.", "In min_heapify, we exchange some nodes with its child nodes to satisfy the heap property under these two features below;", "A tree structure has the two features below.", "Look at the nodes surrounded by the orange square. We find that 9 is larger than both of 2 and 3, so these three nodes don\u2019t satisfy the heap property (The value of node should be less than or equal to the values of its child nodes). Please check the orange nodes below.", "However, look at the blue nodes. These nodes satisfy the heap property.", "Here we define min_heapify(array, index). This method takes two arguments, array, and index. We assume this method exchange the node of array[index] with its child nodes to satisfy the heap property.", "Let\u2019s check the way how min_heapify works by producing a heap from the tree structure above. First, we call min_heapify(array, 2) to exchange the node of index 2 with the node of index 4.", "After apply min_heapify(array, 2) to the subtree, the subtree changes below and meets the heap property. This subtree colored blue.", "If the subtree exchanged the node of index 2 with the node of index5, the subtree won\u2019t meet the heap property like below. So the subtree exchange the node has the smallest value in the subtree with the parent node to satisfy the heap property.", "Get back to the tree correctly exchanged. When we look at the orange nodes, this subtree doesn\u2019t satisfy the heap property.", "So call min_heapify(array, 4) to make the subtree meet the heap property.", "Now, this subtree satisfies the heap property by exchanging the node of index 4 with the node of index 8.", "These operations above produce the heap from the unordered tree (the array).", "The pseudo-code below stands for how build_min_heap works.", "This function iterates the nodes except the leaf nodes with the for-loop and applies min_heapify to each node. We don\u2019t need to apply min_heapify to the items of indices after n/2+1, which are all the leaf nodes. We apply min_heapify in the orange nodes below.", "Each node can satisfy the heap property with meeting the conditions to be able to apply min_heapfiy. This is because this function iterates the nodes from the bottom (the second last level) to the top (the root node level). For instance, this function first applies min_heapify to the nodes both of index 4 and index 5 and then applying min_heapify to the node of index 2. So the node of the index and its descendent nodes satisfy the heap property when applying min_heapify.", "Let\u2019s think about the time complexity of build_min_heap. First of all, we think the time complexity of min_heapify, which is a main part of build_min_heap.", "min_heapify repeats the operation of exchanging the items in an array, which runs in constant time. So the time complexity of min_heapify will be in proportional to the number of repeating. In the worst case, min_heapify should repeat the operation the height of the tree times. This is because in the worst case, min_heapify will exchange the root nodes with the most depth leaf node. Assuming h as the height of the root node, the time complexity of min_heapify will take O(h) time.", "The time complexities of min_heapify in each depth are shown below. The number of the nodes is also showed in right.", "From the figure, the time complexity of build_min_heap will be the sum of the time complexity of inner nodes. The final time complexity becomes:", "So we should know the height of the tree to get the time complexity.", "The sum of the number of nodes in each depth will become n. So we will get this equation below.", "The equation above stands for the geometric sequence, so we can deform it and get the height of the tree as follow:", "Finally, we get O(n) as the time complexity of build_min_heap. Also, we get O(logn) as the time complexity of min_heapify.", "Here we implement min_heapify and build_min_heap with Python. the implementation of min_heapify will be as follow.", "First, this method computes the node of the smallest value among the node of index i and its child nodes and then exchange the node of the smallest value with the node of index i. When the exchange happens, this method applies min_heapify to the node exchanged.", "Index of a list (an array) in Python starts from 0, the way to access the nodes will change as follow.", "The variable, smallest has the index of the node of the smallest value. If the smallest doesn\u2019t equal to the i, which means this subtree doesn\u2019t satisfy the heap property, this method exchanges the nodes and executes min_heapify to the node of the smallest.", "The implementation of build_min_heap is almost the same as the pseudo-code.", "The for-loop differs from the pseudo-code, but the behavior is the same. This for-loop also iterates the nodes from the second last level of nodes to the root nodes.", "Heapsort is one sort algorithm with a heap. It\u2019s really easy to implement it with min_heapify and build_min_heap. The flow of sort will be as follow. Please note that the order of sort is ascending.", "In a heap, the smallest item is the first item of an array. The array after step 3 satisfies the conditions to apply min_heapify because we remove the last item after we swap the first item with the last item. By this nature, we can sort an array by repeating steps 2 to 4.", "The implementation of heapsort will become as follow.", "The time complexity of heapsort is O(nlogn) because in the worst case, we should repeat min_heapify the number of items in array times, which is n.", "In the heapq module of Python, it has already implemented some operation for a heap. I followed the method in MIT\u2019s lecture, the implementation differs from Python\u2019s. If you\u2019d like to know Python\u2019s detail implementation, please visit the source code here. For example, these methods are implemented in Python.", "By using those methods above, we can implement heapsort as follow. Please note that it differs from the implementation of heapsort in the official documents.", "So that\u2019s all for this post. Thank you for reading!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Software engineer, My interest in Natural Language Processing"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F23d4c78a6962&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structure-heap-23d4c78a6962&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structure-heap-23d4c78a6962&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structure-heap-23d4c78a6962&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structure-heap-23d4c78a6962&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----23d4c78a6962--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----23d4c78a6962--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@yasufumy?source=post_page-----23d4c78a6962--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@yasufumy?source=post_page-----23d4c78a6962--------------------------------", "anchor_text": "Yasufumi TANIGUCHI"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F79c2d8c5db50&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structure-heap-23d4c78a6962&user=Yasufumi+TANIGUCHI&userId=79c2d8c5db50&source=post_page-79c2d8c5db50----23d4c78a6962---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F23d4c78a6962&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structure-heap-23d4c78a6962&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F23d4c78a6962&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structure-heap-23d4c78a6962&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/photos/2FaCKyEEtis?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Rick Mason"}, {"url": "https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://www.youtube.com/watch?v=B7hVxCmfPtM", "anchor_text": "MIT\u2019s lecture"}, {"url": "https://en.wikipedia.org/wiki/Priority_queue", "anchor_text": "a priority queue"}, {"url": "https://docs.python.org/3/library/heapq.html", "anchor_text": "the heapq module"}, {"url": "https://github.com/python/cpython/blob/master/Lib/heapq.py", "anchor_text": "the source code here"}, {"url": "https://docs.python.org/3/library/heapq.html#basic-examples", "anchor_text": "the implementation of heapsort in the official documents"}, {"url": "https://www.youtube.com/watch?v=B7hVxCmfPtM", "anchor_text": "MIT OpenCourseWare 4. Heaps and Heap Sort"}, {"url": "https://medium.com/tag/algorithms?source=post_page-----23d4c78a6962---------------algorithms-----------------", "anchor_text": "Algorithms"}, {"url": "https://medium.com/tag/data-structures?source=post_page-----23d4c78a6962---------------data_structures-----------------", "anchor_text": "Data Structures"}, {"url": "https://medium.com/tag/computer-science?source=post_page-----23d4c78a6962---------------computer_science-----------------", "anchor_text": "Computer Science"}, {"url": "https://medium.com/tag/programming?source=post_page-----23d4c78a6962---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/python?source=post_page-----23d4c78a6962---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F23d4c78a6962&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structure-heap-23d4c78a6962&user=Yasufumi+TANIGUCHI&userId=79c2d8c5db50&source=-----23d4c78a6962---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F23d4c78a6962&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structure-heap-23d4c78a6962&user=Yasufumi+TANIGUCHI&userId=79c2d8c5db50&source=-----23d4c78a6962---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F23d4c78a6962&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structure-heap-23d4c78a6962&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----23d4c78a6962--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F23d4c78a6962&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structure-heap-23d4c78a6962&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----23d4c78a6962---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----23d4c78a6962--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----23d4c78a6962--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----23d4c78a6962--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----23d4c78a6962--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----23d4c78a6962--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----23d4c78a6962--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----23d4c78a6962--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----23d4c78a6962--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@yasufumy?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@yasufumy?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Yasufumi TANIGUCHI"}, {"url": "https://medium.com/@yasufumy/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "341 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F79c2d8c5db50&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structure-heap-23d4c78a6962&user=Yasufumi+TANIGUCHI&userId=79c2d8c5db50&source=post_page-79c2d8c5db50--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F4dcb03ea08bc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structure-heap-23d4c78a6962&newsletterV3=79c2d8c5db50&newsletterV3Id=4dcb03ea08bc&user=Yasufumi+TANIGUCHI&userId=79c2d8c5db50&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}