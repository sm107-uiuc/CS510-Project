{"url": "https://towardsdatascience.com/asynchronous-parallel-programming-in-python-with-multiprocessing-a3fc882b4023", "time": 1683009726.048883, "path": "towardsdatascience.com/asynchronous-parallel-programming-in-python-with-multiprocessing-a3fc882b4023/", "webpage": {"metadata": {"title": "Asynchronous Parallel Programming in Python with Multiprocessing | by Konrad Hafen | Towards Data Science", "h1": "Asynchronous Parallel Programming in Python with Multiprocessing", "description": "Do you wish some of your Python scripts could run faster? Maybe they can. And you won\u2019t (probably) have to buy a new computer, or use a super computer. Most modern computers contain multiple\u2026"}, "outgoing_paragraph_urls": [{"url": "https://medium.com/swlh/understanding-sync-async-concurrency-and-parallelism-166686008fa4", "anchor_text": "this article", "paragraph_index": 1}], "all_paragraphs": ["Do you wish some of your Python scripts could run faster? Maybe they can. And you won\u2019t (probably) have to buy a new computer, or use a super computer. Most modern computers contain multiple processing cores but, by default, python scripts only use a single core. Writing code can run on multiple processors can really decrease your processing time. This article will demonstrate how to use the multiprocessing module to write parallel code that uses all of your machines processors and gives your script a performance boost.", "An asynchronous model starts tasks as soon as new resources become available without waiting for previously running tasks to finish. By contrast, a synchronous model waits for task 1 to finish before starting task 2. For a more detailed explanation with examples, check out this article in The Startup. Asynchronous models often offer the greatest opportunity for performance improvement, if you can structure your code in the proper manner. That is, tasks can run independently of one another.", "For the sake of brevity, this article is going to focus solely on asynchronous parallelization because that is the method that will likely boost performance the most. Also, if you structure code for asynchronous parallelization on your laptop, it is much easier to scale up to a super computer.", "Since Python 2.6 multiprocessing has been included as a basic module, so no installation is required. Simply import multiprocessing. Since \u2018multiprocessing\u2019 takes a bit to type I prefer to import multiprocessing as mp.", "We have an array of parameter values that we want to use in a sensitivity analysis. The function we\u2019re running the analysis on is computationally expensive. We can cut down on processing time by running multiple parameter simultaneously in parallel.", "Import multiprocessing , numpy and time. Then define a function that takes a row number, i , and three parameters as inputs. The row number is necessary so results can later be linked to the input parameters. Remember, the asynchronous model does not preserve order.", "For demonstrative purposes, this is a simple function that is not computationally expensive. I\u2019ve added a line of code to pause the function for 2 seconds, simulating a long run-time. The function output is going to be most sensitive to param1 and least sensitive to param3. In practice, you can replace this with any function.", "We need a function that can take the result of my_function and add it to a results list, which is creatively named, results.", "Let\u2019s run this code in serial (non-parallel) and see how long it takes. Set up an array with 3 columns of random numbers between 0 and 100. These are the parameters that will get passed to my_function. Then create the empty results list. Finally, loop through all the rows in params and add the result from my_function to results. Time this to see how long it takes (should be about 20 seconds) and print out the results list.", "As expected, this code took about 20 seconds to run. Also, notice how the results were returned in order.", "Now use multiprocessing to run the same code in parallel. Simply add the following code directly below the serial code for comparison. A gist with the full Python script is included at the end of this article for clarity.", "Reset the results list so it is empty, and reset the starting time. We\u2019ll need to specify how many CPU processes we want to use. multiprocessing.cpu_count() returns the total available processes for your machine. Then loop through each row of params and use multiprocessing.Pool.apply_async to call my_function and save the result. Parameters to my_function are passed using the args argument of apply_async and the callback function is where the result of my_function is sent. This will start a new process as soon as one is available, and continue doing so until the loop is complete. Then close the process pool. multiprocessing.Pool.join() waits to execute any following code until all process have completed running. Now print the time this code took to run and the results.", "Notice, using apply_async decreased the run-time from 20 seconds to under 5 seconds. Also, notice that the results were not returned in order. That is why the row index was passed and returned.", "Implementing asynchronous parallelization to your code can greatly decrease your run time. The multiprocessing module is a great option to use for parallelization on personal computers. As you\u2019ve seen in this article you can get dramatic speed increases, depending on your machine\u2019s specs. Beware that multiprocessing has limitations if you eventually want to scale up to a super computer. If super computing is where you\u2019re headed, you\u2019ll want to use a parallelization model compatible with Message Passing Interface (MPI).", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fa3fc882b4023&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fasynchronous-parallel-programming-in-python-with-multiprocessing-a3fc882b4023&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fasynchronous-parallel-programming-in-python-with-multiprocessing-a3fc882b4023&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fasynchronous-parallel-programming-in-python-with-multiprocessing-a3fc882b4023&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fasynchronous-parallel-programming-in-python-with-multiprocessing-a3fc882b4023&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----a3fc882b4023--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a3fc882b4023--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://khafen.medium.com/?source=post_page-----a3fc882b4023--------------------------------", "anchor_text": ""}, {"url": "https://khafen.medium.com/?source=post_page-----a3fc882b4023--------------------------------", "anchor_text": "Konrad Hafen"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F56d662f7324a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fasynchronous-parallel-programming-in-python-with-multiprocessing-a3fc882b4023&user=Konrad+Hafen&userId=56d662f7324a&source=post_page-56d662f7324a----a3fc882b4023---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa3fc882b4023&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fasynchronous-parallel-programming-in-python-with-multiprocessing-a3fc882b4023&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa3fc882b4023&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fasynchronous-parallel-programming-in-python-with-multiprocessing-a3fc882b4023&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@tomas_nz?utm_source=medium&utm_medium=referral", "anchor_text": "Tomas Sobek"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://medium.com/swlh/understanding-sync-async-concurrency-and-parallelism-166686008fa4", "anchor_text": "this article"}, {"url": "https://medium.com/tag/python?source=post_page-----a3fc882b4023---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/parallel-computing?source=post_page-----a3fc882b4023---------------parallel_computing-----------------", "anchor_text": "Parallel Computing"}, {"url": "https://medium.com/tag/tech?source=post_page-----a3fc882b4023---------------tech-----------------", "anchor_text": "Tech"}, {"url": "https://medium.com/tag/data-science?source=post_page-----a3fc882b4023---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----a3fc882b4023---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa3fc882b4023&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fasynchronous-parallel-programming-in-python-with-multiprocessing-a3fc882b4023&user=Konrad+Hafen&userId=56d662f7324a&source=-----a3fc882b4023---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa3fc882b4023&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fasynchronous-parallel-programming-in-python-with-multiprocessing-a3fc882b4023&user=Konrad+Hafen&userId=56d662f7324a&source=-----a3fc882b4023---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa3fc882b4023&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fasynchronous-parallel-programming-in-python-with-multiprocessing-a3fc882b4023&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a3fc882b4023--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fa3fc882b4023&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fasynchronous-parallel-programming-in-python-with-multiprocessing-a3fc882b4023&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----a3fc882b4023---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----a3fc882b4023--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----a3fc882b4023--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----a3fc882b4023--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----a3fc882b4023--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----a3fc882b4023--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----a3fc882b4023--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----a3fc882b4023--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----a3fc882b4023--------------------------------", "anchor_text": ""}, {"url": "https://khafen.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://khafen.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Konrad Hafen"}, {"url": "https://khafen.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "255 Followers"}, {"url": "https://opensourceoptions.com", "anchor_text": "https://opensourceoptions.com"}, {"url": "https://publiclandsjournal.com", "anchor_text": "https://publiclandsjournal.com"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F56d662f7324a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fasynchronous-parallel-programming-in-python-with-multiprocessing-a3fc882b4023&user=Konrad+Hafen&userId=56d662f7324a&source=post_page-56d662f7324a--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F1e1cde455f3a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fasynchronous-parallel-programming-in-python-with-multiprocessing-a3fc882b4023&newsletterV3=56d662f7324a&newsletterV3Id=1e1cde455f3a&user=Konrad+Hafen&userId=56d662f7324a&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}