{"url": "https://towardsdatascience.com/machine-learning-in-production-3d54860ff1d9", "time": 1683017122.608581, "path": "towardsdatascience.com/machine-learning-in-production-3d54860ff1d9/", "webpage": {"metadata": {"title": "Machine Learning in Production. Machine Learning Models beyond Jupyter\u2026 | by asjad anis | Towards Data Science", "h1": "Machine Learning in Production", "description": "This article focuses on deploying machine learning models using mnist handwritten digit recognition as a base example implemented in tensorflow-2. In the end, we will be cooking up a small web app in\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.tensorflow.org/overview/", "anchor_text": "tensorflow-2", "paragraph_index": 0}, {"url": "https://reactjs.org/", "anchor_text": "React", "paragraph_index": 0}, {"url": "http://asjadanis.github.io/tfjs-digit-demo", "anchor_text": "here", "paragraph_index": 0}, {"url": "https://github.com/asjadanis/mnist-digit-recog", "anchor_text": "github-repo", "paragraph_index": 1}, {"url": "https://medium.com/data-science-bootcamp/understand-the-softmax-function-in-minutes-f3a59641e86d", "anchor_text": "softmax", "paragraph_index": 3}, {"url": "https://www.tensorflow.org/tensorboard", "anchor_text": "tensorboard", "paragraph_index": 4}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping", "anchor_text": "Early-Stopping", "paragraph_index": 4}, {"url": "https://www.kdnuggets.com/2019/12/5-techniques-prevent-overfitting-neural-networks.html", "anchor_text": "over-fitting", "paragraph_index": 4}, {"url": "https://github.com/tensorflow/tfjs/tree/master/tfjs-converter", "anchor_text": "tensorflow-converter", "paragraph_index": 6}, {"url": "https://towardsdatascience.com/deploying-keras-models-using-tensorflow-serving-and-flask-508ba00f1037", "anchor_text": "article", "paragraph_index": 8}, {"url": "https://www.docker.com/get-started", "anchor_text": "docker-website", "paragraph_index": 12}, {"url": "https://grpc.io/", "anchor_text": "gRPC", "paragraph_index": 13}, {"url": "https://www.tensorflow.org/tfx/serving/docker", "anchor_text": "official docs", "paragraph_index": 18}, {"url": "https://www.tensorflow.org/tfx/serving/docker#creating_your_own_serving_image", "anchor_text": "here", "paragraph_index": 23}, {"url": "https://www.tensorflow.org/tfx/serving/serving_config", "anchor_text": "link", "paragraph_index": 24}, {"url": "https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/", "anchor_text": "Kubernetes docs", "paragraph_index": 25}, {"url": "https://cloud.google.com/sdk/docs/install", "anchor_text": "this", "paragraph_index": 28}, {"url": "https://console.cloud.google.com/", "anchor_text": "gcp console", "paragraph_index": 30}, {"url": "https://www.tensorflow.org/js", "anchor_text": "Tensorflow-JS", "paragraph_index": 37}, {"url": "https://cloud.google.com/storage/docs/cross-origin", "anchor_text": "here", "paragraph_index": 39}, {"url": "https://github.com/asjadanis/tfjs-digit-demo", "anchor_text": "github-repo", "paragraph_index": 44}], "all_paragraphs": ["This article focuses on deploying machine learning models using mnist handwritten digit recognition as a base example implemented in tensorflow-2. In the end, we will be cooking up a small web app in React to test our model. If you are a machine learning enthusiast then you already know that mnist digit recognition is the hello world program of deep learning and by far you have already seen way too many articles about digit-recognition on medium and probably implemented that already which is exactly why I won\u2019t be focusing too much on the problem itself and instead show you how you can deploy your models and consume them in production. To see the end result you can view the deployed-app here", "Before jumping into deployments I will quickly give you a brief walkthrough of the model and show you how you can save your model and consume it in production later on. If you are tired of reading about handwritten-digit-recognition like me you can skip this portion and use the github-repo to get the model so you can follow the rest of the guide.", "For pre-processing the data I am just normalizing the pixel values in 0\u20131 range by dividing with 255.", "Once we have the data loaded and pre-processed I am using a convolutional-net with 2 conv-layers each followed by a max-pooling layer which is then flattened before it\u2019s passed on to a dense layer with 128 units and finally our output layer has 10-units and its using softmax as the activation function which turns the end result to probabilities and distributes it over our classes.", "For training the model I am using tensorboard, early-stopping, and model-checkpoint callbacks for gathering information during the training process. Tensorboard is a very handy tool in the tensorflow ecosystem, it lets you visualize your training process, model-graphs, and provides useful metrics that help you a lot in representing and sharing your findings and quickly experiment. Early-Stopping is also a very useful call-back that lets you monitor a very specific metric and stops training if that metric is not improving over time. This saves us from over-fitting our model.", "Now that we have trained the model we will save our model in protobuf format which is the default-format in tensorflow-2. Note that we are saving the model in a sub-folder named 1. The reason is that tensorflow-serving uses this convention to load the model version you specify. By default, the server will serve the model with the largest version number.", "The last part would be to convert our model to work with tensorflow-js in the browser and for that purpose, we will use tensorflow-converter which helps us convert our pre-trained tensorflow models in python to work in the browser using tensorflow-js. Install and run the tool using the below command and provide the path to your saved model directory when the wizard asks.", "If you have followed all the steps till here and have been successfully able to save a model congratulations you are halfway through the journey. Now you have a model that you can deploy in the cloud and use from various applications.", "Before we begin with the deployments part lets quickly go through an alternative approach which is also widely used and implemented via a Flask app or an express-server or any other api-framework to serve the model which is not a very efficient way of serving your models in production, the reason being that those frameworks are primarily designed for HTTP requests/response and do not account for your machine\u2019s hardware capability when making inferences. Similarly, it could be hard to standardize the way you load and serve your model via a rest end-point and when you have multiple models/projects being worked on. One of the biggest advantage of using tensorflow-serving over Flask is that it is primarily built for serving flexible and scalable ML models in production and has been battle-tested. Plus it has support for model versioning and serving many models with many versions and it scales really well. However, Flask or any other API-framework that you use can come in very handy if they are used as a middle layer between the client and tensorflow-serving, handling the routing for different tf-servers and preprocessing the data before sending it over to the model for prediction. You can visit this article for a much better understanding of this.", "Now we can get on with the deployment part, I will be using Google Cloud to deploy the models and go step by step into the various cloud services that are available to you. Google cloud and tensorflow integrate quite well, we will be looking in particular at these three options that are available to us.", "In the first part of this series, we will be using tensorflow-serving, followed by AI-Platform and cloud functions in the next two parts.", "Tensorflow serving is a part of the tensorflow extended ecosystem, one of the key benefits of tensorflow serving is that it\u2019s highly scalable and has low latency. Tensorflow serving has the capability to serve multiple models and versions which is a potential use-case when you are going in production you might need to update your models and serve multiple versions.", "We will be using tensorflow-serving with docker which is very easy and quick to get started with. Before following the next steps head over to the docker-website and install the docker-desktop app for your OS.", "The tensorflow serving image has port 8500 exposed for gRPC whereas port 8501 is exposed for REST-API. Now to serve with docker we need", "Next in the terminal run the below com", "Please note the path would be to the root folder of your model and not the sub-folder which specifies the model-version. With the above command, we have basically started a docker container and binded the rest-api port with the host port 8501. Next, we are bounding our saved model path to the default model path i.e models/mnist-digit-recog. After which we have specified the environment variable name and set it to mnist-digit-recog and that is it, if you have followed the steps till here properly you should have a docker image running with tensorflow-serving and your model being served on port 8501.", "Note if you want to expose the gRPC port too you can run the below command.", "If everything ran successfully you should have similar output on your terminal as below.", "If you want to explore tensorflow-serving with docker I suggest you look into the official docs.", "Now that we have tensorflow serving our model, let\u2019s quickly test this by making a post request, and verify that everything is working correctly.", "The REST url structure is given below:", "We can use the below piece of code to quickly test that the model is being served properly. Load up the notebook from the attached github-repo above and in a new cell paste the code below and run it to see the results.", "Similarly, you can now call this end-point from any client-side application and voila you should have the predicted digit. For instance, if you are a JS fan you can use the below code snippet.", "Awesome now if we want to create our own docker-image that has our model built-in we can do that by first running the serving image as a daemon and then copy our saved model to the containers model folder. For that quickly follow the steps from the official tensorflow-serving guide here. You can name your container whatever you want, I have called mine mnist-digit-container and now we don\u2019t have to bind our model path or do any extra config. We can just run the below command to get our model served.", "And that\u2019s it we have a container with our model built-in. Before we move on to the next step please give this link a visit which discusses how you can specify the model configuration and versioning which could be very handy.", "Now we will deploy the docker image on Google Cloud using Kubernetes. Before we move on with the setup let\u2019s first have a quick glance at Kubernetes. In short, Kubernetes helps automate the process of deploying, scaling, and managing containerized applications. In a production environment, it is needed to manage the containers and make sure that they are always up and available and there is no downtime, this is where Kubernetes comes into play and help scale your containarized apps. It can offer load-balancing, self-healing, resource utilization in the best possible way. Do give the official Kubernetes docs a visit to get a deeper understanding of how it works.", "When you deploy Kubernetes you get a cluster and every cluster will have at least one worker node.", "A few terminologies to keep in mind when using Kubernetes.", "For this, you first need to set up an account on Google Cloud. Once you have an account set up, install the google-sdk from this link. Next head over to Google Cloud Console and create a new project I have called mine tensorflow-training.", "Now head over to the terminal and run gcloud init this will ask you a couple of straight-forward questions and once you are done with this you will be authenticated with your google cloud account.", "Next, run gcloud config set project [your-project-id] to set the project you just created above. To get the project id you can go to the gcp console and from the dropdown next to the search bar you can select the project-id.", "Now we are all ready and set-up to create a Kubernetes Engine for the service deployment. For this follow the below steps.", "After this, we will upload our docker image to the Google Container Registry so that we are able to run it on the GCP.", "We are almost there, now we need to create a yaml config file for creating a deployment, so head into your favorite text editor and paste the following content in a file and save on your local-disk with .yaml extension. Please update the yaml file with your project-id and image-name and I also suggest that you look into the available options for configuring.", "Now you can run kubectl create -f <path-to-yaml-file> and if everything goes well you should be notified that both deployment and service were created. You can verify this by running the below commands in terminal", "And now finally we can describe our service using kubectl describe service mnist-service note down the external ip-address listed next to LoadBalancer Ingress. This is the IP we can now use to query our deployed model from client applications.", "The URL structure will be the same as above you just have to replace localhost with the above ip-address and that\u2019s it. To quickly verify you can use the above python or js code-snippet to predict or just go to the below URL in the browser to make sure it all went well.", "Now it\u2019s time to host our converted tensorflow model in a cloud-storage bucket and load it in React-App using Tensorflow-JS. For this quickly head over to your google cloud console and navigate to storage. Create a bucket choose a name, and specify the location. Once the bucket is created you can either upload your tf-js model from the UI or from the command line by running the below command in the terminal.", "Make sure that you have the converted model.json file and the companion group1-shard.bin file.", "Now that we have uploaded the model json file in the bucket we need to make the files public to be accessible for the client-apps and enable cors on the created bucket. For cors please read here for a detailed explanation.", "Make the files public by navigating to the files in the bucket and click Edit Permissions where you can add an entry for Public. Do this for both model.json & group1-shard1of1.bin file. Once marked public, copy the public-url for model.json file which will be needed for loading the model.", "For enabling cors on the bucket head over to google console and active Google Cloud Shell.", "Once you are in the shell type", "Now we are all set to load the model in our client-app using tensorflow-js.", "To explore the source-code head over to the github-repo.", "Here\u2019s our deployed model in action.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Software Engineer | ML Enthusiast | Creative Programmer"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F3d54860ff1d9&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmachine-learning-in-production-3d54860ff1d9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmachine-learning-in-production-3d54860ff1d9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmachine-learning-in-production-3d54860ff1d9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmachine-learning-in-production-3d54860ff1d9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----3d54860ff1d9--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----3d54860ff1d9--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://asjadanis128.medium.com/?source=post_page-----3d54860ff1d9--------------------------------", "anchor_text": ""}, {"url": "https://asjadanis128.medium.com/?source=post_page-----3d54860ff1d9--------------------------------", "anchor_text": "asjad anis"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F46e3b4d207b6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmachine-learning-in-production-3d54860ff1d9&user=asjad+anis&userId=46e3b4d207b6&source=post_page-46e3b4d207b6----3d54860ff1d9---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3d54860ff1d9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmachine-learning-in-production-3d54860ff1d9&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3d54860ff1d9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmachine-learning-in-production-3d54860ff1d9&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "http://yann.lecun.com/exdb/mnist/", "anchor_text": "MNIST-Database"}, {"url": "https://www.tensorflow.org/overview/", "anchor_text": "tensorflow-2"}, {"url": "https://reactjs.org/", "anchor_text": "React"}, {"url": "http://asjadanis.github.io/tfjs-digit-demo", "anchor_text": "here"}, {"url": "https://github.com/asjadanis/mnist-digit-recog", "anchor_text": "github-repo"}, {"url": "https://medium.com/data-science-bootcamp/understand-the-softmax-function-in-minutes-f3a59641e86d", "anchor_text": "softmax"}, {"url": "https://www.tensorflow.org/tensorboard", "anchor_text": "tensorboard"}, {"url": "https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping", "anchor_text": "Early-Stopping"}, {"url": "https://www.kdnuggets.com/2019/12/5-techniques-prevent-overfitting-neural-networks.html", "anchor_text": "over-fitting"}, {"url": "https://github.com/tensorflow/tfjs/tree/master/tfjs-converter", "anchor_text": "tensorflow-converter"}, {"url": "https://towardsdatascience.com/deploying-keras-models-using-tensorflow-serving-and-flask-508ba00f1037", "anchor_text": "article"}, {"url": "https://www.tensorflow.org/tfx/guide/serving", "anchor_text": "Tensorflow-Serving"}, {"url": "https://cloud.google.com/ai-platform", "anchor_text": "AI-Platform-Predictions"}, {"url": "https://cloud.google.com/functions#:~:text=Cloud%20Functions%20allows%20you%20to%20trigger%20your%20code%20from%20Google,or%20backend%20application%20via%20HTTP.&text=what%20you%20use-,You%20are%20only%20billed%20for%20your%20function's%20execution%20time,to%20the%20nearest%20100%20milliseconds.", "anchor_text": "Cloud-Functions"}, {"url": "https://www.docker.com/get-started", "anchor_text": "docker-website"}, {"url": "https://grpc.io/", "anchor_text": "gRPC"}, {"url": "https://www.tensorflow.org/tfx/serving/docker", "anchor_text": "official docs"}, {"url": "https://www.tensorflow.org/tfx/serving/docker#creating_your_own_serving_image", "anchor_text": "here"}, {"url": "https://www.tensorflow.org/tfx/serving/serving_config", "anchor_text": "link"}, {"url": "https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/", "anchor_text": "Kubernetes docs"}, {"url": "https://kubernetes.io/docs/concepts/architecture/nodes/", "anchor_text": "Node"}, {"url": "https://kubernetes.io/docs/concepts/workloads/pods/", "anchor_text": "POD"}, {"url": "https://kubernetes.io/docs/concepts/workloads/controllers/deployment/", "anchor_text": "Deployment"}, {"url": "https://kubernetes.io/docs/concepts/services-networking/service/", "anchor_text": "Service"}, {"url": "https://cloud.google.com/sdk/docs/install", "anchor_text": "this"}, {"url": "https://console.cloud.google.com/", "anchor_text": "gcp console"}, {"url": "https://www.tensorflow.org/js", "anchor_text": "Tensorflow-JS"}, {"url": "https://cloud.google.com/storage/docs/cross-origin", "anchor_text": "here"}, {"url": "https://console.cloud.google.com/", "anchor_text": "Google Cloud Platform"}, {"url": "https://console.cloud.google.com/", "anchor_text": "Google Cloud Platform"}, {"url": "https://github.com/asjadanis/tfjs-digit-demo", "anchor_text": "github-repo"}, {"url": "https://github.com/asjadanis/tfjs-digit-demo", "anchor_text": "asjadanis/tfjs-digit-demoA client side demo application for single-digit recognition using tensorflow-js in the browser in a React app. Note\u2026github.com"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----3d54860ff1d9---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/google-cloud?source=post_page-----3d54860ff1d9---------------google_cloud-----------------", "anchor_text": "Google Cloud"}, {"url": "https://medium.com/tag/tensorflow?source=post_page-----3d54860ff1d9---------------tensorflow-----------------", "anchor_text": "TensorFlow"}, {"url": "https://medium.com/tag/deeplearning?source=post_page-----3d54860ff1d9---------------deeplearning-----------------", "anchor_text": "Deeplearning"}, {"url": "https://medium.com/tag/deployment?source=post_page-----3d54860ff1d9---------------deployment-----------------", "anchor_text": "Deployment"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3d54860ff1d9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmachine-learning-in-production-3d54860ff1d9&user=asjad+anis&userId=46e3b4d207b6&source=-----3d54860ff1d9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3d54860ff1d9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmachine-learning-in-production-3d54860ff1d9&user=asjad+anis&userId=46e3b4d207b6&source=-----3d54860ff1d9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3d54860ff1d9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmachine-learning-in-production-3d54860ff1d9&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----3d54860ff1d9--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F3d54860ff1d9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmachine-learning-in-production-3d54860ff1d9&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----3d54860ff1d9---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----3d54860ff1d9--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----3d54860ff1d9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----3d54860ff1d9--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----3d54860ff1d9--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----3d54860ff1d9--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----3d54860ff1d9--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----3d54860ff1d9--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----3d54860ff1d9--------------------------------", "anchor_text": ""}, {"url": "https://asjadanis128.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://asjadanis128.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "asjad anis"}, {"url": "https://asjadanis128.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "73 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F46e3b4d207b6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmachine-learning-in-production-3d54860ff1d9&user=asjad+anis&userId=46e3b4d207b6&source=post_page-46e3b4d207b6--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Faadeff2fb71&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmachine-learning-in-production-3d54860ff1d9&newsletterV3=46e3b4d207b6&newsletterV3Id=aadeff2fb71&user=asjad+anis&userId=46e3b4d207b6&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}