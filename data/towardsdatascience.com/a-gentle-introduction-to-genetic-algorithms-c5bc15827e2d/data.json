{"url": "https://towardsdatascience.com/a-gentle-introduction-to-genetic-algorithms-c5bc15827e2d", "time": 1682993194.0908768, "path": "towardsdatascience.com/a-gentle-introduction-to-genetic-algorithms-c5bc15827e2d/", "webpage": {"metadata": {"title": "A gentle introduction to genetic algorithms with Go | by Sau Sheong | Towards Data Science", "h1": "A gentle introduction to genetic algorithms with Go", "description": "It may not seem obvious at first glance, but computer science algorithms are often inspired by nature and biological processes. Some of these algorithms include neural networks, particle swarm\u2026"}, "outgoing_paragraph_urls": [{"url": "https://stackoverflow.com/questions/2334225/what-is-the-difference-between-a-heuristic-and-an-algorithm", "anchor_text": "Heuristics", "paragraph_index": 1}, {"url": "https://www.researchgate.net/post/What_are_the_differences_between_heuristics_and_metaheuristics", "anchor_text": "Metaheuristics", "paragraph_index": 1}, {"url": "https://en.wikipedia.org/wiki/Natural_selection", "anchor_text": "natural selection", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/Peppered_moth_evolution", "anchor_text": "variation in color in the peppered moths in England", "paragraph_index": 5}, {"url": "http://www.ietf.org/rfc/rfc2795.txt", "anchor_text": "infinite monkey theorem", "paragraph_index": 7}, {"url": "https://www.iterm2.com/", "anchor_text": "iTerm2", "paragraph_index": 55}, {"url": "https://www.iterm2.com/documentation-images.html", "anchor_text": "interesting hack in iTerm2 that allows images to be displayed", "paragraph_index": 55}, {"url": "https://github.com/sausheong/ga", "anchor_text": "https://github.com/sausheong/ga", "paragraph_index": 58}], "all_paragraphs": ["It may not seem obvious at first glance, but computer science algorithms are often inspired by nature and biological processes. Some of these algorithms include neural networks, particle swarm optimization, artificial bee colony, ant colony optimization, evolutionary algorithms and many more. In fact, you can consider biological processes to be simply algorithms that nature has come up with to solve problems. From that point of view, it\u2019s easy to see why many of these algorithms are optimization heuristics and metaheuristics. After all, nature optimizes for survival.", "Heuristics, in case the term is not familiar to you, are algorithms that try to solve the problem faster by making some assumptions. As a result, heuristics are often not optimal but are more useful in cases when getting the best results take way too long. Metaheuristics take this to the next level \u2014 they are a heuristic that generates or finds heuristics.", "Genetic algorithms are metaheuristics that are based on the process of natural selection. Genetic algorithms are a type of evolutionary algorithm.", "Natural selection, as a refresher, is a key mechanism in evolution. It is a natural process that causes populations (of organisms) to adapt to their environment over time. These populations have variations in traits. Individual organisms with more suitable traits have higher chances of survival in the environment. The next generations reproduced from these surviving organisms will inherit their traits, resulting eventually in a population with these more suitable traits.", "However if the entire population have the same traits, and the environment changes, the population will go extinction. Fortunately, mutations that occur occasionally causes variations in traits and these allow organisms with traits that are more suited for the changed environment to survive and become dominant.", "A popularly used illustration is the variation in color in the peppered moths in England. Before the early 1800s, the peppered moth in England were mostly of the white variety and its coloration helped it to hide from predatory birds as it blended well with light-colored lichens and English trees. However during the Industrial Revolution, light-colored lichens died due to pollution and many of the trees on which the moths rested became blackened by soot. This gave the dark colored moths an advantage in hiding from predators while the light colored moths were easily spotted. By the mid 1800s, the number of dark colored moths increased and by the end of the century, almost all peppered moths were of the dark variety. The balance was reversed by the effect of the Clean Air Act 1956, and the dark colored moths became rare again.", "So that\u2019s natural selection. How do genetic algorithms come into the picture? Genetic algorithms are heuristics that use the same mechanisms like natural selection \u2014 DNA, population, variation, fitness, selection, reproduction, inheritance and mutation.", "The infinite monkey theorem says that an infinite number of monkeys sitting at an infinite number of typewriters randomly hitting keys, given enough time, will eventually reproduce the complete works of Shakespeare. Let\u2019s say we want just one monkey to reproduce this quote: \u201cTo be or not to be\u201d. How long do you think it will take the monkey to randomly hammer this out?", "Obviously the brute force way of doing this is not going to get us anywhere. What if we try to \u2018evolve\u2019 the quote? Let\u2019s look at how we can use genetic algorithms to do this. Here are the steps for a genetic algorithm used to solve the problem:", "An organism in our Shakespeare-spouting algorithm consists of a single DNA, which is a byte array and a number representing the fitness of the Organism.", "Start with an initial population of organisms", "We need to create organisms for our initial population, so here\u2019s a function to do that.", "The target is what we want to achieve, in this case, it is the byte array representation of the string \u2018to be or not to be\u2019. In this function, we randomly create a byte array of the same length as the target and set that as the value of the gene in the newly created Organism.", "Now that we can create Organisms, we need to create a population of them.", "The population is an array of Organisms while PopSize is a global variable defining the size of the population.", "We need to calculate the fitness of organisms in our population. This was called earlier in when we created the Organism but will also be called later when we crossover Organisms.", "This fitness function is relatively simple. We simply count the number of times the bytes in the gene matches the target. The score is divided by the total number of bytes in the target in order to get the fitness to be a percentage i.e. a number between 0.0 and 1.0. This means if the fitness is 1.0, we would have evolved the Organism\u2019s gene to match the quote \u2018to be or not to be\u2019.", "Now that we have a population, and we can figure out which organisms have the best fitness, we want to pick the best fit organisms and let them reproduce to create the next generation of the population. There are many different ways of doing this but in this case, we\u2019re using a \u2018breeding pool\u2019 mechanism.", "What we do is to create a sort of breeding pool where I place a number of copies of the same organism according to its fitness into the pool. The higher the fitness of the organism, the more copies of the organism end up in the pool.", "After that we randomly pick 2 organisms from the breeding pool and use them as the parents to create the next generation of an organism for the population.", "The child in the next generation is then bred from the crossover between 2 randomly picked organisms, and inherits the DNA from both organisms.", "For crossover, I simply picked a mid-point mid and use the first mid bytes from the first organism and the rest of the bytes from the second organism.", "After a new child organism has been reproduced from the 2 parent organisms, we see if the mutation happens to the child organism.", "Here mutation simply means determine if a randomly generated number is below MutationRate. Why do we need to mutate the child organism? If a mutation never occurs, the DNA within the population will always remain the same as the original population. This means if the original population doesn\u2019t have a particular gene(value) that is needed, the optimal result will never be achieved. As in the example, if the letter t is not found in the initial population at all, we will never be able to come up with the quote no matter how many generations we go through. In other words, natural selection doesn\u2019t work without mutations.", "More technically speaking, mutations get us out of a local maximum in order to find the global maximum. If we look at genetic algorithms as a mechanism to find the optimal solution, if we don\u2019t have a mutation, once a local maximum is found the mechanism will simply settle on that and never moves on to find the global maximum. Mutations can jolt the population out of a local maximum and therefore provide an opportunity for the algorithm to continue looking for the global maximum.", "Once we check for mutation, we calculate the fitness of the child organism and insert it into the next generation of the population.", "That\u2019s all there is to the genetic algorithm! Now let\u2019s put it all together in the main function.", "In the main function we go through generations and for each generation we try to find the best fit organism. If the best fit organism\u2019s gene is the same as the target we would have found our answer.", "Now run the software program! How long did it take you?", "Because the initial population is randomly generated, you will get different answers each time but most of the time we can evolve the quote in less than a second! That\u2019s quite a vast difference from the 934 trillion years if we had to brute force it.", "Evolving Shakespeare seems pretty simple. It\u2019s just a string after all. How about something different, say an image? Or the most famous painting of all time, the Mona Lisa by Leonardo Da Vinci? Can we evolve that?", "Let\u2019s give it the same treatment. We\u2019ll start from defining the organism to represent the picture of Mona Lisa.", "Instead of a byte array, our DNA is now a struct from the image standard library.", "As before let\u2019s look at creating an organism first.", "Instead of creating a random byte array, we call another function to create a random image.", "An image.RGBA struct consists of a byte array Pix (byte and uint8 are the same thing), a Stride and a Rect. What\u2019s important for us is the Pix, we use the same Stride and Rect as the target image (which is an image of Mona Lisa). Fortunately for us, the math/rand standard library has a method called Read that fills up a byte array nicely with random bytes.", "You might be curious, so how big a byte array are we talking about here? Pix is nothing more than a byte array with 4 bytes representing a pixel (R, G, B and A each represented by a byte). With an image that is 800 x 600, we\u2019re talking about 1.92 million bytes in each image! To keep the program relatively speedy, we\u2019ll use a smaller image that is of size 67 x 100, which gives an array of 26,800 bytes. This, if you don\u2019t realise it by now, is far from the 18 bytes we were playing around with in the last program.", "Also, you might realise that because each pixel is now randomly colored, we\u2019d end up with a colored static snow pattern.", "The fitness of the organism is the difference between the two images.", "To find the difference, we can go back to the Pythagorean theorem. If you remember, we can find the distance between 2 points if we square the difference of the x and y values, add them up and then square root the results.", "That\u2019s in 2 dimensional space. In 3 dimensional space, we simply do the Pythagorean theorem twice, and in 4 dimensional space, we do it 3 times. The RGBA values of a pixel is essentially a point in a 4 dimensional space, so to find the difference between 2 pixels, we square the difference between r, g, b and a values of two pixels, add them all up and then square root the results.", "That\u2019s the difference between 2 pixels. To find the difference between all pixels, we just add up all the results together and we have the final difference. Because Pix is essentially one long byte array with consecutive RGBA values in it we can use a simple shortcut. We simply square the difference between each corresponding byte in the image and the target, then add them all up and square root the final number to find the difference between the 2 images.", "As a reference, if 2 images are exactly the same, the difference will be 0 and if the 2 images are complete opposites of each other, the difference will be 26,800. In other words, the best fit organisms should have fitness of 0 and the higher the number is, the less fit the organism is.", "We\u2019re still using the breeding pool mechanism here but with a difference. First, we sort the population from best fitness to worst fitness. Then we take the top best organisms and put them into the breeding pool. We use a parameter PoolSize to indicate how many of the best fit organisms we want in the pool.", "To figure out what to put into the breeding pool, we subtract each of the top best organisms with the least fit organism in the top. This creates a differentiated ranking between the top best organisms and according to that differential ranking we place the corresponding number of copies of the organism in the breeding pool. For example, if the difference between the best fit organism and the least fit organism in the top best is 20, we place 20 organisms in the breeding pool.", "If there is no difference between the top best fit organisms, this means the population is stable and we can\u2019t really create a proper breeding pool. To overcome this, if the difference is 0, we set the pool to be the whole population.", "After we have the pool, we need to create the next generation. The code for natural selection here is no different from the previous program so we\u2019ll skip showing it here.", "The crossover function is slightly different as the child\u2019s DNA is not a byte array but an image.RGBA. The actual crossover mechanism works on Pix, the byte array of pixels, instead.", "The mutate function is correspondingly different as well.", "Now that we have everything, we put it all together in the main function.", "Now run it and see. What do you get?", "With the parameters I\u2019ve set, when I run it, I usually start with a fitness of 19,000 or so. On an average it takes me more than 20 minutes before I reach a fitness of less than 7500.", "Here\u2019s a sequence of images that\u2019s been produced over time:", "I had a bit of fun with evolving Mona Lisa by drawing circles and also drawing triangles on an image. The results weren\u2019t as quick and the images were not as obvious but it shows a glimpse of what actually happens. You can check out the rest of the code from the repository and tweak the parameters yourselves to see if you can get better pictures but here are some images I got.", "You might have noticed in my screenshots that I actually displayed images on the terminal. I could have created a web application to show this but I wanted to keep things much simpler so I thought to display the images directly on the terminal. While the terminal console is not where you\u2019d normally expect images to be displayed, there are actually several ways of doing it.", "I chose one of the simplest. I happened to use the excellent iTerm2, which is a replacement for the default Terminal application in MacOS, and there is an interesting hack in iTerm2 that allows images to be displayed.", "The trick is this \u2014 if you can encode your image in Base64, you can use a special command to print out images to the terminal. Here\u2019s the Go code to do this, but you can also do this in any other language. There are several scripts in the documentation above that shows how this can be done using simple shell scripting.", "What this means, unfortunately, is that if you run this code in anything else other iTerm2, you won\u2019t be able to see the evolution of the images. However, you can always tweak the output such that every few generations you capture the output.", "All code and images in this post can be found here: https://github.com/sausheong/ga", "The example code has been inspired by the following work:", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fc5bc15827e2d&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-genetic-algorithms-c5bc15827e2d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-genetic-algorithms-c5bc15827e2d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-genetic-algorithms-c5bc15827e2d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-genetic-algorithms-c5bc15827e2d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://me.dm/@sausheong", "anchor_text": "Mastodon"}, {"url": "https://towardsdatascience.com/?source=post_page-----c5bc15827e2d--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c5bc15827e2d--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://sausheong.com/?source=post_page-----c5bc15827e2d--------------------------------", "anchor_text": ""}, {"url": "https://sausheong.com/?source=post_page-----c5bc15827e2d--------------------------------", "anchor_text": "Sau Sheong"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa358058b2410&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-genetic-algorithms-c5bc15827e2d&user=Sau+Sheong&userId=a358058b2410&source=post_page-a358058b2410----c5bc15827e2d---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc5bc15827e2d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-genetic-algorithms-c5bc15827e2d&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc5bc15827e2d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-genetic-algorithms-c5bc15827e2d&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://stackoverflow.com/questions/2334225/what-is-the-difference-between-a-heuristic-and-an-algorithm", "anchor_text": "Heuristics"}, {"url": "https://www.researchgate.net/post/What_are_the_differences_between_heuristics_and_metaheuristics", "anchor_text": "Metaheuristics"}, {"url": "https://en.wikipedia.org/wiki/Natural_selection", "anchor_text": "natural selection"}, {"url": "https://en.wikipedia.org/wiki/Peppered_moth_evolution", "anchor_text": "variation in color in the peppered moths in England"}, {"url": "https://commons.wikimedia.org/wiki/File:Lichte_en_zwarte_versie_berkenspanner_crop.jpg", "anchor_text": "https://commons.wikimedia.org/wiki/File:Lichte_en_zwarte_versie_berkenspanner_crop.jpg"}, {"url": "http://www.ietf.org/rfc/rfc2795.txt", "anchor_text": "infinite monkey theorem"}, {"url": "https://commons.wikimedia.org/wiki/File:Chimpanzee_seated_at_typewriter.jpg", "anchor_text": "https://commons.wikimedia.org/wiki/File:Chimpanzee_seated_at_typewriter.jpg"}, {"url": "https://www.iterm2.com/", "anchor_text": "iTerm2"}, {"url": "https://www.iterm2.com/documentation-images.html", "anchor_text": "interesting hack in iTerm2 that allows images to be displayed"}, {"url": "https://github.com/sausheong/ga", "anchor_text": "https://github.com/sausheong/ga"}, {"url": "http://natureofcode.com/", "anchor_text": "http://natureofcode.com"}, {"url": "https://rogerjohansson.blog/2008/12/07/genetic-programming-evolution-of-mona-lisa/", "anchor_text": "https://rogerjohansson.blog/2008/12/07/genetic-programming-evolution-of-mona-lisa/"}, {"url": "https://medium.com/tag/golang?source=post_page-----c5bc15827e2d---------------golang-----------------", "anchor_text": "Golang"}, {"url": "https://medium.com/tag/go?source=post_page-----c5bc15827e2d---------------go-----------------", "anchor_text": "Go"}, {"url": "https://medium.com/tag/genetic-algorithm?source=post_page-----c5bc15827e2d---------------genetic_algorithm-----------------", "anchor_text": "Genetic Algorithm"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----c5bc15827e2d---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc5bc15827e2d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-genetic-algorithms-c5bc15827e2d&user=Sau+Sheong&userId=a358058b2410&source=-----c5bc15827e2d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc5bc15827e2d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-genetic-algorithms-c5bc15827e2d&user=Sau+Sheong&userId=a358058b2410&source=-----c5bc15827e2d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc5bc15827e2d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-genetic-algorithms-c5bc15827e2d&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c5bc15827e2d--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fc5bc15827e2d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-genetic-algorithms-c5bc15827e2d&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----c5bc15827e2d---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----c5bc15827e2d--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----c5bc15827e2d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----c5bc15827e2d--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----c5bc15827e2d--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----c5bc15827e2d--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----c5bc15827e2d--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----c5bc15827e2d--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----c5bc15827e2d--------------------------------", "anchor_text": ""}, {"url": "https://sausheong.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://sausheong.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Sau Sheong"}, {"url": "https://sausheong.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "1.6K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa358058b2410&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-genetic-algorithms-c5bc15827e2d&user=Sau+Sheong&userId=a358058b2410&source=post_page-a358058b2410--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fb7ba9640486a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-gentle-introduction-to-genetic-algorithms-c5bc15827e2d&newsletterV3=a358058b2410&newsletterV3Id=b7ba9640486a&user=Sau+Sheong&userId=a358058b2410&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://www.manning.com/books/go-web-programming", "anchor_text": "Go Web Programming2016"}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}