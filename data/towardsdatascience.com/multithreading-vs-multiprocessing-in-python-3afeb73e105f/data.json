{"url": "https://towardsdatascience.com/multithreading-vs-multiprocessing-in-python-3afeb73e105f", "time": 1683014422.935253, "path": "towardsdatascience.com/multithreading-vs-multiprocessing-in-python-3afeb73e105f/", "webpage": {"metadata": {"title": "Multithreading vs. Multiprocessing in Python | by Gennaro S. Rodrigues | Towards Data Science", "h1": "Multithreading vs. Multiprocessing in Python", "description": "Python is often regarded as an almost obscene programming language. A libertarian place where everything is permitted and our wildest dreams come true. Forget about labels and definitions, and, above\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/gennsev/Python_MultiProc_Examples/blob/master/Example.ipynb", "anchor_text": "this Notebook", "paragraph_index": 11}, {"url": "https://github.com/gennsev/Python_MultiProc_Examples/blob/master/Example.ipynb", "anchor_text": "this notebook", "paragraph_index": 16}, {"url": "https://docs.python.org/3/library/concurrent.futures.html", "anchor_text": "here", "paragraph_index": 22}, {"url": "https://docs.python.org/3.8/library/threading.html", "anchor_text": "here", "paragraph_index": 22}, {"url": "https://docs.python.org/3.8/library/multiprocessing.html", "anchor_text": "and here", "paragraph_index": 22}, {"url": "https://github.com/gennsev/Python_MultiProc_Examples/blob/master/Example.ipynb", "anchor_text": "this notebook", "paragraph_index": 22}, {"url": "https://en.wikipedia.org/wiki/Word_embedding", "anchor_text": "word vectors", "paragraph_index": 28}, {"url": "https://medium.com/@jayeshbahire/introduction-to-word-vectors-ea1d4e4b84bf", "anchor_text": "this article", "paragraph_index": 28}, {"url": "https://github.com/gennsev/tclass", "anchor_text": "this GitHub repository", "paragraph_index": 28}, {"url": "https://github.com/gennsev/Python_MultiProc_Examples/blob/master/Example-2.ipynb", "anchor_text": "this notebook", "paragraph_index": 31}, {"url": "https://github.com/gennsev/Python_MultiProc_Examples/blob/master/Example-2.ipynb", "anchor_text": "full code", "paragraph_index": 34}, {"url": "https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor", "anchor_text": "Python Documentation", "paragraph_index": 35}, {"url": "http://www.gennsev.com", "anchor_text": "www.gennsev.com", "paragraph_index": 44}, {"url": "http://github.com/gennsev", "anchor_text": "github.com/gennsev", "paragraph_index": 44}], "all_paragraphs": ["Python is often regarded as an almost obscene programming language. A libertarian place where everything is permitted and our wildest dreams come true. Forget about labels and definitions, and, above all, brackets. It is a language that welcomes everyone, from the most experienced programmer (that weird guy that still uses Fortran for some reason you don\u2019t really want to know about) to the egotistic millennial newbie. Well, that is, except if you are working with multiprocessing or multithreading.", "The challenges of working with parallelism and concurrency in Python begins with the fact that even the internet does not understand very well how it works. Indeed, I\u2019ve found multiple wrong statements on stackoverflow responses (some with a high count of up votes) and even very serious-looking blogs. Therefore, differently from other cases, where programming may also be called stackoverflowing, you better know at least the basics of what you are doing before starting to work with multiprocessing or multithreading in Python.", "Or else, you might have a bad time.", "When looking for the difference between python multiprocessing and multithreading, one might have the impression that they work pretty much the same. That could not be more wrong. The key differences are:", "We should also understand the difference between concurrency and parallelism.", "Now remember: multithreading implements concurrency, multiprocessing implements parallelism. Processes run on separate processing nodes.", "So how do we decide between multiprocessing and multithreading? The short answer is:", "Imagine you have a task that relies on the input from another part of the system, or from the user.", "There is no reason to dedicate a process for that job because it would spend most of its time waiting for the stimuli to begin its work. It would be a waste of resources to dedicate a computing node for that, and it would bring no speedup whatsoever, given that the bottleneck is not on execution but on a third-party call. In this case, multithreading is the way to go.", "Indeed, multithreading is usually implemented to handle GUIs. E.g., in a text editor program, one thread would be responsible for getting input from the keyboard, while another would check the spelling, and a third one could handle the formatting configurations.", "I/O intensive programs can also directly benefit from multithreading because their bottlenecks are usually reading or writing operations (or downloads in the case of web scrappers, for example). Check the following example:", "This function loads some URL addresses into memory and writes them in a local text file (50 times, always overwriting the same file). That is pretty dumb, but its purpose is just to stress an I/O bound execution. You can check this code and execute it yourself in this Notebook.", "Let us run that method over a list of 16 addresses and check their execution times for some different thread counts. That would get us the following graph (executing on a MacBook Air 2019).", "Where the result for one thread stands for the serial execution of the code. We can see by the graphs that multithreading is capable of considerably reducing the algorithm\u2019s execution time. We could keep increasing the number of threads, but the gains would stop once we reach the point where each address is handled by a thread.", "Now imagine you got a massive amount of data loaded in memory, and it all needs to be processed. Programs that are computing-bound will benefit from multiprocessing because their bottleneck is time and resources. Image and graphics processing are an excellent example of that. They consist of vast amounts of math operations, which can often be divided into separate tasks because their data is independent. GPUs are the state-of-the-art hardware in this regard, being designed to process large chunks of data in parallel.", "To simulate computing-intensive algorithm, we will use the following code:", "Again, you can check this code in this notebook and execute it yourself (I strongly suggest you to take a look on that, as we have to make some workarounds to execute it properly on windows).", "My MacBook features a dual-core processor with hyper-threading, so there is no use to force more than 4 processes running on it. Those are the results for the performance tests on this benchmark:", "The multithreading provided no speedup (the execution times are virtually the same). However, we had a significant speedup when using multiprocessing. It was not enough to drop the execution time to one fourth of the original because of the time spent with process management. Remember that processes are much heavier than threads.", "Even though this is not their best use case, there is no reason to expect multiprocessing to perform poorly on I/O intensive tasks. It is a waste of resources: imagine dedicating a processor core to a function that will, for a significant part of its execution, just wait for an input. A processor, even a cluster, only has so many processing nodes. We are better off dedicating them to real parallelism of applications that can only be accelerated by those means.", "But for the sake of science, what would happen if we executed the first I/O-bound code using multiprocessing? The following graph shows it.", "As expected, multiprocessing is also able to provide speedup on I/O bound computations. It is also noticeable that we kept the speedup even with 8 processes. The reason for that is processes start executing like threads in this case. The speedup is not coming from the parallelism, but from concurrency.", "Now, let\u2019s take a deeper look on how we can implement multiprocessing and multithreading in Python and how a Data Scientist can profit from them. There are many different ways to do it, and I encourage you to get some ideas from the documentation (here, here, and here) and try them out on the examples model I provided at this notebook as an exercise.", "In a VERY broad aspect, a data science project follows four steps:", "Now, you may say: \u201cnah, my project is way different\u201d. Well, I beg to differ, but I\u2019m sure you can follow this blog post to get some ideas on how to accelerate your own so-different-from-all-the-others project.", "Remember the golden rule: multithreading for I/O bound tasks and multiprocessing for CPU bound task.", "Now, it should not be hard to follow that the \u201cget the data\u201d and \u201cstore other data\u201d steps are probably the ones where we should use multithreading. All the others (\u201cprocess the data\u201d and \u201cdo something with the data\u201d) are most probably better off using multiprocessing. You may argue that processing a lot of data might present an I/O bottleneck, and in some cases you might be right. If that is your case, you should try to break up this processing into \u201cgetting data\u201d and \u201cprocessing data\u201d parts, so that the best strategy can be applied to each of them.", "Let\u2019s see how we can apply what we\u2019ve learned in a classic Natural Language Processing (NLP) problem: text classification. The idea is to find out the category of a news article just by its text (e.g.: if it should be categorised as \u201csports\u201d, \u201cfinances\u201d, \u201ceconomy\u201d, etc).", "If you are here only to see how multiprocessing and multithreading can be used in a real project, just follow along, you don\u2019t really need to know anything about NLP to understand this example. However, if you are interested by the subject, you should start by studying what word vectors are. I like this article. You can also follow this GitHub repository where I and a colleague have been working on some text classification models (there are some cool notebooks there).", "Our project is quite simple, we will:", "By now it shall be straightforward to see that step 1 can possibly be accelerated in Python using multithreading, while step 3 should use multiprocessing.", "Let\u2019s start by the pre-trained GloVe word vectors loading. You can check the full code and execute it yourself in this notebook. Loading this pre-trained word vector file can take a lot of time. The file is considerably long, and we have to process it line per line. Each line contains a word and then a list of values for each dimension of its word vector.", "The GloveVectorizer() loads the pre-trained vectors in its __init__ function, and can do it both asynchronously or serially. This is how it performs the basic line-per-line file reading:", "And here is the multithread implementation:", "Again, I strongly recommend you to check how it was implemented in the full code.", "The ThreadPoolExecutor runs its threads asynchronously. The last for loop is used to guarantee the execution will only keep going after all the threads submitted to the executor are finished. Check the Python Documentation for more details on how ThreadPoolExecutor works.", "But how faster does the vectors loading gets with multithreading? In my MacBook Air the first serial version loads the 400000 word vectors in around 269.19898986816406s. The asynchronous approach loads the 400000 word vectors in 27.559515953063965s, using 10 workers (it could probably reach the same execution time with even less workers, as the bottleneck is reading the lines, not processing).", "Now the cool part: training and testing.", "Luckly for us, scikit-learn offers multiprocessing nativelly, just by setting it up on the model\u2019s parameters. The two following code examples train a same model with the same data serially or using a set number of jobs (which are mapped to processes in scikit-learn).", "Using multiprocessing in scikit-learn is as easy as setting the n_jobs model parameter. Here, we will set it to two:", "It\u2019s so easy you may doubt it works. But it does. The following bar graph shows the training time of this same model for different numbers of jobs:", "Oh, and if you are curious, the model accuracy (RandomForestClassifier.scoreTrain) turns out not bad at all:", "I think it covers pretty much everything. This last example shows how Python multiprocessing and multithreading features can be used to accelerate real projects, and sometimes with little-to-none code modifications. All that glitters is not gold, though. You will soon find out, when looking forward to more complex parallel and asynchronous executions in python that things can get quite messy.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Scientist \ud83d\udcca, Computer Engineer \ud83d\udcbb, and holder of a Ph.D. \ud83c\udf93 in Approximate Computing and Software Fault Tolerance. www.gennsev.com github.com/gennsev"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F3afeb73e105f&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmultithreading-vs-multiprocessing-in-python-3afeb73e105f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmultithreading-vs-multiprocessing-in-python-3afeb73e105f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmultithreading-vs-multiprocessing-in-python-3afeb73e105f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmultithreading-vs-multiprocessing-in-python-3afeb73e105f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----3afeb73e105f--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----3afeb73e105f--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@gennsev?source=post_page-----3afeb73e105f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@gennsev?source=post_page-----3afeb73e105f--------------------------------", "anchor_text": "Gennaro S. Rodrigues"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F603bda3d0d35&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmultithreading-vs-multiprocessing-in-python-3afeb73e105f&user=Gennaro+S.+Rodrigues&userId=603bda3d0d35&source=post_page-603bda3d0d35----3afeb73e105f---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3afeb73e105f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmultithreading-vs-multiprocessing-in-python-3afeb73e105f&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3afeb73e105f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmultithreading-vs-multiprocessing-in-python-3afeb73e105f&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@raulcachophoto?utm_source=medium&utm_medium=referral", "anchor_text": "Raul Cacho Oses"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://towardsdatascience.com/tagged/getting-started", "anchor_text": "Getting Started"}, {"url": "https://realpython.com/python-gil/", "anchor_text": "Python GIL at RealPython"}, {"url": "https://github.com/gennsev/Python_MultiProc_Examples/blob/master/Example.ipynb", "anchor_text": "this Notebook"}, {"url": "https://github.com/gennsev/Python_MultiProc_Examples/blob/master/Example.ipynb", "anchor_text": "this notebook"}, {"url": "https://docs.python.org/3/library/concurrent.futures.html", "anchor_text": "here"}, {"url": "https://docs.python.org/3.8/library/threading.html", "anchor_text": "here"}, {"url": "https://docs.python.org/3.8/library/multiprocessing.html", "anchor_text": "and here"}, {"url": "https://github.com/gennsev/Python_MultiProc_Examples/blob/master/Example.ipynb", "anchor_text": "this notebook"}, {"url": "https://en.wikipedia.org/wiki/Word_embedding", "anchor_text": "word vectors"}, {"url": "https://medium.com/@jayeshbahire/introduction-to-word-vectors-ea1d4e4b84bf", "anchor_text": "this article"}, {"url": "https://github.com/gennsev/tclass", "anchor_text": "this GitHub repository"}, {"url": "https://www.cs.umb.edu/~smimarog/textmining/datasets/", "anchor_text": "Data source"}, {"url": "https://nlp.stanford.edu/projects/glove/", "anchor_text": "GloVe project page"}, {"url": "https://github.com/gennsev/Python_MultiProc_Examples/blob/master/Example-2.ipynb", "anchor_text": "this notebook"}, {"url": "https://github.com/gennsev/Python_MultiProc_Examples/blob/master/Example-2.ipynb", "anchor_text": "full code"}, {"url": "https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor", "anchor_text": "Python Documentation"}, {"url": "https://medium.com/tag/python?source=post_page-----3afeb73e105f---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/programming?source=post_page-----3afeb73e105f---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/parallel-computing?source=post_page-----3afeb73e105f---------------parallel_computing-----------------", "anchor_text": "Parallel Computing"}, {"url": "https://medium.com/tag/multithreading?source=post_page-----3afeb73e105f---------------multithreading-----------------", "anchor_text": "Multithreading"}, {"url": "https://medium.com/tag/getting-started?source=post_page-----3afeb73e105f---------------getting_started-----------------", "anchor_text": "Getting Started"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3afeb73e105f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmultithreading-vs-multiprocessing-in-python-3afeb73e105f&user=Gennaro+S.+Rodrigues&userId=603bda3d0d35&source=-----3afeb73e105f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3afeb73e105f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmultithreading-vs-multiprocessing-in-python-3afeb73e105f&user=Gennaro+S.+Rodrigues&userId=603bda3d0d35&source=-----3afeb73e105f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3afeb73e105f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmultithreading-vs-multiprocessing-in-python-3afeb73e105f&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----3afeb73e105f--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F3afeb73e105f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmultithreading-vs-multiprocessing-in-python-3afeb73e105f&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----3afeb73e105f---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----3afeb73e105f--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----3afeb73e105f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----3afeb73e105f--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----3afeb73e105f--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----3afeb73e105f--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----3afeb73e105f--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----3afeb73e105f--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----3afeb73e105f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@gennsev?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@gennsev?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Gennaro S. Rodrigues"}, {"url": "https://medium.com/@gennsev/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "31 Followers"}, {"url": "http://www.gennsev.com", "anchor_text": "www.gennsev.com"}, {"url": "http://github.com/gennsev", "anchor_text": "github.com/gennsev"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F603bda3d0d35&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmultithreading-vs-multiprocessing-in-python-3afeb73e105f&user=Gennaro+S.+Rodrigues&userId=603bda3d0d35&source=post_page-603bda3d0d35--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2F603bda3d0d35%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmultithreading-vs-multiprocessing-in-python-3afeb73e105f&user=Gennaro+S.+Rodrigues&userId=603bda3d0d35&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}