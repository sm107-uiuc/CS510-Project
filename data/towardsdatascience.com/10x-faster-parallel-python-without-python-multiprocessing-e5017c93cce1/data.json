{"url": "https://towardsdatascience.com/10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1", "time": 1682996236.0313962, "path": "towardsdatascience.com/10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1/", "webpage": {"metadata": {"title": "10x Faster Parallel Python Without Python Multiprocessing | by Robert Nishihara | Towards Data Science", "h1": "10x Faster Parallel Python Without Python Multiprocessing", "description": "While Python\u2019s multiprocessing library has been used successfully for a wide range of applications, in this blog post, we show that it falls short for several important classes of applications\u2026"}, "outgoing_paragraph_urls": [{"url": "https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing", "anchor_text": "Python\u2019s multiprocessing library", "paragraph_index": 0}, {"url": "https://ray.io/", "anchor_text": "Ray", "paragraph_index": 1}, {"url": "https://medium.com/@robertnishihara/modern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8", "anchor_text": "this blog post", "paragraph_index": 1}, {"url": "https://arrow.apache.org/", "anchor_text": "Apache Arrow", "paragraph_index": 1}, {"url": "https://github.com/ray-project/ray", "anchor_text": "Ray", "paragraph_index": 2}, {"url": "http://www.frankmcsherry.org/graph/scalability/cost/2015/01/15/COST.html", "anchor_text": "it\u2019s important to always compare to optimized single-threaded code", "paragraph_index": 2}, {"url": "https://ray.io/", "anchor_text": "Ray", "paragraph_index": 3}, {"url": "https://aws.amazon.com/ec2/instance-types/m5/", "anchor_text": "m5 instance types", "paragraph_index": 4}, {"url": "https://gist.github.com/robertnishihara/2b81595abd4f50a049767a040ce435ab", "anchor_text": "Code for running all of the benchmarks is available here", "paragraph_index": 4}, {"url": "https://github.com/modin-project/modin", "anchor_text": "Modin", "paragraph_index": 6}, {"url": "https://ray.readthedocs.io/en/latest/", "anchor_text": "Ray", "paragraph_index": 7}, {"url": "https://arrow.apache.org/", "anchor_text": "Apache Arrow", "paragraph_index": 10}, {"url": "https://arrow.apache.org/docs/python/plasma.html", "anchor_text": "Plasma shared-memory object store", "paragraph_index": 10}, {"url": "https://docs.python.org/3/library/multiprocessing.html", "anchor_text": "Python multiprocessing", "paragraph_index": 11}, {"url": "https://arrow.apache.org/", "anchor_text": "Apache Arrow", "paragraph_index": 12}, {"url": "https://ray-project.github.io/2017/10/15/fast-python-serialization-with-ray-and-arrow.html", "anchor_text": "zero-copy serialization", "paragraph_index": 12}, {"url": "https://arrow.apache.org/docs/python/plasma.html", "anchor_text": "Plasma store", "paragraph_index": 12}, {"url": "https://ray.readthedocs.io/en/latest/", "anchor_text": "Ray", "paragraph_index": 14}, {"url": "https://ray.readthedocs.io/en/latest/actors.html", "anchor_text": "actor abstraction", "paragraph_index": 14}, {"url": "https://github.com/ray-project/ray", "anchor_text": "Ray", "paragraph_index": 17}, {"url": "https://docs.python.org/3/library/multiprocessing.html", "anchor_text": "multiprocessing", "paragraph_index": 19}, {"url": "https://docs.python.org/3/library/pickle.html", "anchor_text": "pickle", "paragraph_index": 20}, {"url": "https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes", "anchor_text": "multiprocessing queues", "paragraph_index": 22}, {"url": "https://github.com/ray-project/ray", "anchor_text": "Ray", "paragraph_index": 28}, {"url": "https://docs.python.org/3/library/multiprocessing.html", "anchor_text": "multiprocessing", "paragraph_index": 31}, {"url": "https://gist.github.com/robertnishihara/2b81595abd4f50a049767a040ce435ab", "anchor_text": "all of the numbers above can be reproduced by running these scripts.", "paragraph_index": 34}, {"url": "https://www.anaconda.com/distribution/#download-section", "anchor_text": "Anaconda Python", "paragraph_index": 35}, {"url": "https://docs.ray.io/en/latest/cluster/cloud.html", "anchor_text": "Ray cluster launcher", "paragraph_index": 37}, {"url": "https://gist.github.com/robertnishihara/2b81595abd4f50a049767a040ce435ab#file-config-yaml", "anchor_text": "provided here", "paragraph_index": 38}, {"url": "https://github.com/ray-project/ray", "anchor_text": "Ray", "paragraph_index": 39}], "all_paragraphs": ["While Python\u2019s multiprocessing library has been used successfully for a wide range of applications, in this blog post, we show that it falls short for several important classes of applications including numerical data processing, stateful computation, and computation with expensive initialization. There are two main reasons:", "Ray is a fast, simple framework for building and running distributed applications that addresses these issues. For an introduction to some of the basic concepts, see this blog post. Ray leverages Apache Arrow for efficient data handling and provides task and actor abstractions for distributed computing.", "This blog post benchmarks three workloads that aren\u2019t easily expressed with Python multiprocessing and compares Ray, Python multiprocessing, and serial Python code. Note that it\u2019s important to always compare to optimized single-threaded code.", "In these benchmarks, Ray is 10\u201330x faster than serial Python, 5\u201325x faster than multiprocessing, and 5\u201315x faster than the faster of these two on a large machine.", "The benchmarks were run on EC2 using the m5 instance types (m5.large for 1 physical core and m5.24xlarge for 48 physical cores). Code for running all of the benchmarks is available here. Abbreviated snippets are included in this post. The main differences are that the full benchmarks include 1) timing and printing code, 2) code for warming up the Ray object store, and 3) code for adapting the benchmark to smaller machines.", "Many machine learning, scientific computing, and data analysis workloads make heavy use of large arrays of data. For example, an array may represent a large image or dataset, and an application may wish to have multiple tasks analyze the image. Handling numerical data efficiently is critical.", "Each pass through the for loop below takes 0.84s with Ray, 7.5s with Python multiprocessing, and 24s with serial Python (on 48 physical cores). This performance gap explains why it is possible to build libraries like Modin on top of Ray but not on top of other libraries.", "The code looks as follows with Ray.", "By calling ray.put(image), the large array is stored in shared memory and can be accessed by all of the worker processes without creating copies. This works not just with arrays but also with objects that contain arrays (like lists of arrays).", "When the workers execute the f task, the results are again stored in shared memory. Then when the script calls ray.get([...]), it creates numpy arrays backed by shared memory without having to deserialize or copy the values.", "These optimizations are made possible by Ray\u2019s use of Apache Arrow as the underlying data layout and serialization format as well as the Plasma shared-memory object store.", "The code looks as follows with Python multiprocessing.", "The difference here is that Python multiprocessing uses pickle to serialize large objects when passing them between processes. This approach requires each process to create its own copy of the data, which adds substantial memory usage as well as overhead for expensive deserialization, which Ray avoids by using the Apache Arrow data layout for zero-copy serialization along with the Plasma store.", "Workloads that require substantial \u201cstate\u201d to be shared between many small units of work are another category of workloads that pose a challenge for Python multiprocessing. This pattern is extremely common, and I illustrate it here with a toy stream processing application.", "State is often encapsulated in Python classes, and Ray provides an actor abstraction so that classes can be used in the parallel and distributed setting. In contrast, Python multiprocessing doesn\u2019t provide a natural way to parallelize Python classes, and so the user often needs to pass the relevant state around between map calls. This strategy can be tricky to implement in practice (many Python variables are not easily serializable) and it can be slow when it does work.", "Below is a toy example that uses parallel tasks to process one document at a time, extract the prefixes of each word, and return the most common prefixes at the end. The prefix counts are stored in the actor state and mutated by the different tasks.", "This example takes 3.2s with Ray, 21s with Python multiprocessing, and 54s with serial Python (on 48 physical cores).", "The Ray version looks as follows.", "Ray performs well here because Ray\u2019s abstractions fit the problem at hand. This application needs a way to encapsulate and mutate state in the distributed setting, and actors fit the bill.", "The multiprocessing version looks as follows.", "The challenge here is that pool.map executes stateless functions meaning that any variables produced in one pool.map call that you want to use in another pool.map call need to be returned from the first call and passed into the second call. For small objects, this approach is acceptable, but when large intermediate results needs to be shared, the cost of passing them around is prohibitive (note that this wouldn\u2019t be true if the variables were being shared between threads, but because they are being shared across process boundaries, the variables must be serialized into a string of bytes using a library like pickle).", "Because it has to pass so much state around, the multiprocessing version looks extremely awkward, and in the end only achieves a small speedup over serial Python. In reality, you wouldn\u2019t write code like this because you simply wouldn\u2019t use Python multiprocessing for stream processing. Instead, you\u2019d probably use a dedicated stream-processing framework. This example shows that Ray is well-suited for building such a framework or application.", "One caveat is that there are many ways to use Python multiprocessing. In this example, we compare to Pool.map because it gives the closest API comparison. It should be possible to achieve better performance in this example by starting distinct processes and setting up multiple multiprocessing queues between them, however that leads to a complex and brittle design.", "In contrast to the previous example, many parallel computations don\u2019t necessarily require intermediate computation to be shared between tasks, but benefit from it anyway. Even stateless computation can benefit from sharing state when the state is expensive to initialize.", "Below is an example in which we want to load a saved neural net from disk and use it to classify a bunch of images in parallel.", "This example takes 5s with Ray, 126s with Python multiprocessing, and 64s with serial Python (on 48 physical cores). In this case, the serial Python version uses many cores (via TensorFlow) to parallelize the computation and so it is not actually single threaded.", "Suppose we\u2019ve initially created the model by running the following.", "Now we wish to load the model and use it to classify a bunch of images. We do this in batches because in the application the images may not all become available simultaneously and the image classification may need to be done in parallel with the data loading.", "The Ray version looks as follows.", "Loading the model is slow enough that we only want to do it once. The Ray version amortizes this cost by loading the model once in the actor\u2019s constructor. If the model needs to be placed on a GPU, then initialization will be even more expensive.", "The multiprocessing version is slower because it needs to reload the model in every map call because the mapped functions are assumed to be stateless.", "The multiprocessing version looks as follows. Note that in some cases, it is possible to achieve this using the initializer argument to multiprocessing.Pool. However, this is limited to the setting in which the initialization is the same for each process and doesn\u2019t allow for different processes to perform different setup functions (e.g., loading different neural network models), and doesn\u2019t allow for different tasks to be targeted to different workers.", "What we\u2019ve seen in all of these examples is that Ray\u2019s performance comes not just from its performance optimizations but also from having abstractions that are appropriate for the tasks at hand. Stateful computation is important for many many applications, and coercing stateful computation into stateless abstractions comes at a cost.", "Before running these benchmarks, you will need to install the following.", "Then all of the numbers above can be reproduced by running these scripts.", "If you have trouble installing psutil, then try using Anaconda Python.", "The original benchmarks were run on EC2 using the m5 instance types (m5.large for 1 physical core and m5.24xlarge for 48 physical cores).", "In order to launch an instance on AWS or GCP with the right configuration, you can use the Ray cluster launcher and run the following command.", "An example config.yaml is provided here (for starting an m5.4xlarge instance).", "While this blog post focuses on benchmarks between Ray and Python multiprocessing, an apples-to-apples comparison is challenging because these libraries are not very similar. Differences include the following."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fe5017c93cce1&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/@robertnishihara?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@robertnishihara?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "Robert Nishihara"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fff6b3bf101cd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1&user=Robert+Nishihara&userId=ff6b3bf101cd&source=post_page-ff6b3bf101cd----e5017c93cce1---------------------post_header-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe5017c93cce1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1&user=Robert+Nishihara&userId=ff6b3bf101cd&source=-----e5017c93cce1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe5017c93cce1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1&source=-----e5017c93cce1---------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing", "anchor_text": "Python\u2019s multiprocessing library"}, {"url": "https://ray.io/", "anchor_text": "Ray"}, {"url": "https://medium.com/@robertnishihara/modern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8", "anchor_text": "this blog post"}, {"url": "https://arrow.apache.org/", "anchor_text": "Apache Arrow"}, {"url": "https://github.com/ray-project/ray", "anchor_text": "Ray"}, {"url": "http://www.frankmcsherry.org/graph/scalability/cost/2015/01/15/COST.html", "anchor_text": "it\u2019s important to always compare to optimized single-threaded code"}, {"url": "https://ray.io/", "anchor_text": "Ray"}, {"url": "https://aws.amazon.com/ec2/instance-types/m5/", "anchor_text": "m5 instance types"}, {"url": "https://gist.github.com/robertnishihara/2b81595abd4f50a049767a040ce435ab", "anchor_text": "Code for running all of the benchmarks is available here"}, {"url": "https://github.com/modin-project/modin", "anchor_text": "Modin"}, {"url": "https://ray.readthedocs.io/en/latest/", "anchor_text": "Ray"}, {"url": "https://arrow.apache.org/", "anchor_text": "Apache Arrow"}, {"url": "https://arrow.apache.org/docs/python/plasma.html", "anchor_text": "Plasma shared-memory object store"}, {"url": "https://docs.python.org/3/library/multiprocessing.html", "anchor_text": "Python multiprocessing"}, {"url": "https://arrow.apache.org/", "anchor_text": "Apache Arrow"}, {"url": "https://ray-project.github.io/2017/10/15/fast-python-serialization-with-ray-and-arrow.html", "anchor_text": "zero-copy serialization"}, {"url": "https://arrow.apache.org/docs/python/plasma.html", "anchor_text": "Plasma store"}, {"url": "https://ray.readthedocs.io/en/latest/", "anchor_text": "Ray"}, {"url": "https://ray.readthedocs.io/en/latest/actors.html", "anchor_text": "actor abstraction"}, {"url": "https://github.com/ray-project/ray", "anchor_text": "Ray"}, {"url": "https://docs.python.org/3/library/multiprocessing.html", "anchor_text": "multiprocessing"}, {"url": "https://docs.python.org/3/library/pickle.html", "anchor_text": "pickle"}, {"url": "https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes", "anchor_text": "multiprocessing queues"}, {"url": "https://github.com/ray-project/ray", "anchor_text": "Ray"}, {"url": "https://docs.python.org/3/library/multiprocessing.html", "anchor_text": "multiprocessing"}, {"url": "https://gist.github.com/robertnishihara/2b81595abd4f50a049767a040ce435ab", "anchor_text": "all of the numbers above can be reproduced by running these scripts."}, {"url": "https://www.anaconda.com/distribution/#download-section", "anchor_text": "Anaconda Python"}, {"url": "https://docs.ray.io/en/latest/cluster/cloud.html", "anchor_text": "Ray cluster launcher"}, {"url": "https://gist.github.com/robertnishihara/2b81595abd4f50a049767a040ce435ab#file-config-yaml", "anchor_text": "provided here"}, {"url": "https://github.com/ray-project/ray", "anchor_text": "Ray"}, {"url": "https://github.com/ray-project/ray/tree/master/java", "anchor_text": "Java"}, {"url": "https://github.com/ray-project/ray", "anchor_text": "codebase on GitHub"}, {"url": "https://docs.ray.io/en/master/index.html", "anchor_text": "Ray documentation"}, {"url": "https://discuss.ray.io/", "anchor_text": "Ray forum"}, {"url": "https://docs.ray.io/en/latest/rllib/index.html", "anchor_text": "scaling reinforcement learning"}, {"url": "https://docs.ray.io/en/latest/tune/index.html", "anchor_text": "scaling hyperparameter tuning"}, {"url": "https://docs.ray.io/en/latest/serve/index.html", "anchor_text": "scaling model serving"}, {"url": "https://docs.ray.io/en/latest/data/dataset.html", "anchor_text": "scaling data processing"}, {"url": "https://docs.ray.io/en/latest/cluster/cloud.html", "anchor_text": "cluster launcher"}, {"url": "https://ray.io/", "anchor_text": "webpage"}, {"url": "https://medium.com/tag/python?source=post_page-----e5017c93cce1---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/parallel-computing?source=post_page-----e5017c93cce1---------------parallel_computing-----------------", "anchor_text": "Parallel Computing"}, {"url": "https://medium.com/tag/distributed-systems?source=post_page-----e5017c93cce1---------------distributed_systems-----------------", "anchor_text": "Distributed Systems"}, {"url": "https://medium.com/tag/programming?source=post_page-----e5017c93cce1---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/software-development?source=post_page-----e5017c93cce1---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe5017c93cce1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1&user=Robert+Nishihara&userId=ff6b3bf101cd&source=-----e5017c93cce1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe5017c93cce1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1&user=Robert+Nishihara&userId=ff6b3bf101cd&source=-----e5017c93cce1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe5017c93cce1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/@robertnishihara?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fff6b3bf101cd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1&user=Robert+Nishihara&userId=ff6b3bf101cd&source=post_page-ff6b3bf101cd----e5017c93cce1---------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F887029f3f520&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1&newsletterV3=ff6b3bf101cd&newsletterV3Id=887029f3f520&user=Robert+Nishihara&userId=ff6b3bf101cd&source=-----e5017c93cce1---------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://medium.com/@robertnishihara?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "Written by Robert Nishihara"}, {"url": "https://medium.com/@robertnishihara/followers?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "422 Followers"}, {"url": "https://towardsdatascience.com/?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://twitter.com/robertnishihara", "anchor_text": "https://twitter.com/robertnishihara"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fff6b3bf101cd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1&user=Robert+Nishihara&userId=ff6b3bf101cd&source=post_page-ff6b3bf101cd----e5017c93cce1---------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F887029f3f520&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1&newsletterV3=ff6b3bf101cd&newsletterV3Id=887029f3f520&user=Robert+Nishihara&userId=ff6b3bf101cd&source=-----e5017c93cce1---------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/modern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8?source=author_recirc-----e5017c93cce1----0---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://medium.com/@robertnishihara?source=author_recirc-----e5017c93cce1----0---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://medium.com/@robertnishihara?source=author_recirc-----e5017c93cce1----0---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "Robert Nishihara"}, {"url": "https://towardsdatascience.com/?source=author_recirc-----e5017c93cce1----0---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/modern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8?source=author_recirc-----e5017c93cce1----0---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "Modern Parallel and Distributed Python: A Quick Tutorial on RayRay is an open source project for parallel and distributed Python."}, {"url": "https://towardsdatascience.com/modern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8?source=author_recirc-----e5017c93cce1----0---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "6 min read\u00b7Feb 11, 2019"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F99f8d70369b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&user=Robert+Nishihara&userId=ff6b3bf101cd&source=-----99f8d70369b8----0-----------------clap_footer----3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/modern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8?source=author_recirc-----e5017c93cce1----0---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "8"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F99f8d70369b8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8&source=-----e5017c93cce1----0-----------------bookmark_preview----3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/zero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c?source=author_recirc-----e5017c93cce1----1---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://barrmoses.medium.com/?source=author_recirc-----e5017c93cce1----1---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://barrmoses.medium.com/?source=author_recirc-----e5017c93cce1----1---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "Barr Moses"}, {"url": "https://towardsdatascience.com/?source=author_recirc-----e5017c93cce1----1---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/zero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c?source=author_recirc-----e5017c93cce1----1---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "Zero-ETL, ChatGPT, And The Future of Data EngineeringThe post-modern data stack is coming. Are we ready?"}, {"url": "https://towardsdatascience.com/zero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c?source=author_recirc-----e5017c93cce1----1---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "9 min read\u00b7Apr 3"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F71849642ad9c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c&user=Barr+Moses&userId=2818bac48708&source=-----71849642ad9c----1-----------------clap_footer----3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/zero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c?source=author_recirc-----e5017c93cce1----1---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "21"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F71849642ad9c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzero-etl-chatgpt-and-the-future-of-data-engineering-71849642ad9c&source=-----e5017c93cce1----1-----------------bookmark_preview----3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=author_recirc-----e5017c93cce1----2---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://medium.com/@mattchapmanmsc?source=author_recirc-----e5017c93cce1----2---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://medium.com/@mattchapmanmsc?source=author_recirc-----e5017c93cce1----2---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "Matt Chapman"}, {"url": "https://towardsdatascience.com/?source=author_recirc-----e5017c93cce1----2---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=author_recirc-----e5017c93cce1----2---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "The Portfolio that Got Me a Data Scientist JobSpoiler alert: It was surprisingly easy (and free) to make"}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=author_recirc-----e5017c93cce1----2---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "\u00b710 min read\u00b7Mar 24"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F513cc821bfe4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4&user=Matt+Chapman&userId=bf7d13fc53db&source=-----513cc821bfe4----2-----------------clap_footer----3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4?source=author_recirc-----e5017c93cce1----2---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "42"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F513cc821bfe4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4&source=-----e5017c93cce1----2-----------------bookmark_preview----3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/how-to-scale-python-on-every-major-cloud-provider-5e5df3e88274?source=author_recirc-----e5017c93cce1----3---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://medium.com/@robertnishihara?source=author_recirc-----e5017c93cce1----3---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://medium.com/@robertnishihara?source=author_recirc-----e5017c93cce1----3---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "Robert Nishihara"}, {"url": "https://towardsdatascience.com/?source=author_recirc-----e5017c93cce1----3---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/how-to-scale-python-on-every-major-cloud-provider-5e5df3e88274?source=author_recirc-----e5017c93cce1----3---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "How to Scale Python on Every Major Cloud ProviderBest practices for cloud computing with Python"}, {"url": "https://towardsdatascience.com/how-to-scale-python-on-every-major-cloud-provider-5e5df3e88274?source=author_recirc-----e5017c93cce1----3---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": "4 min read\u00b7May 17, 2020"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5e5df3e88274&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-scale-python-on-every-major-cloud-provider-5e5df3e88274&user=Robert+Nishihara&userId=ff6b3bf101cd&source=-----5e5df3e88274----3-----------------clap_footer----3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/how-to-scale-python-on-every-major-cloud-provider-5e5df3e88274?source=author_recirc-----e5017c93cce1----3---------------------3e2cb3dd_6747_4258_a853_49afe24384f1-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "2"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5e5df3e88274&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-scale-python-on-every-major-cloud-provider-5e5df3e88274&source=-----e5017c93cce1----3-----------------bookmark_preview----3e2cb3dd_6747_4258_a853_49afe24384f1-------", "anchor_text": ""}, {"url": "https://medium.com/@robertnishihara?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "See all from Robert Nishihara"}, {"url": "https://towardsdatascience.com/?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "See all from Towards Data Science"}, {"url": "https://towardsdatascience.com/the-art-of-speeding-up-python-loop-4970715717c?source=read_next_recirc-----e5017c93cce1----0---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://casey-cheng.medium.com/?source=read_next_recirc-----e5017c93cce1----0---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://casey-cheng.medium.com/?source=read_next_recirc-----e5017c93cce1----0---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "Casey Cheng"}, {"url": "https://towardsdatascience.com/?source=read_next_recirc-----e5017c93cce1----0---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/the-art-of-speeding-up-python-loop-4970715717c?source=read_next_recirc-----e5017c93cce1----0---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "The Art of Speeding Up Python LoopThere is no \u201cbest\u201d looping technique in Python, only the most suitable."}, {"url": "https://towardsdatascience.com/the-art-of-speeding-up-python-loop-4970715717c?source=read_next_recirc-----e5017c93cce1----0---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "\u00b710 min read\u00b7Oct 31, 2022"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4970715717c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-art-of-speeding-up-python-loop-4970715717c&user=Casey+Cheng&userId=514ba843cfe4&source=-----4970715717c----0-----------------clap_footer----b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/the-art-of-speeding-up-python-loop-4970715717c?source=read_next_recirc-----e5017c93cce1----0---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "1"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4970715717c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-art-of-speeding-up-python-loop-4970715717c&source=-----e5017c93cce1----0-----------------bookmark_preview----b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://python.plainenglish.io/speeding-up-python-with-parallel-multiprocessing-ebd458307e8d?source=read_next_recirc-----e5017c93cce1----1---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://medium.com/@dennisyd?source=read_next_recirc-----e5017c93cce1----1---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://medium.com/@dennisyd?source=read_next_recirc-----e5017c93cce1----1---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "Yancy Dennis"}, {"url": "https://python.plainenglish.io/?source=read_next_recirc-----e5017c93cce1----1---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "Python in Plain English"}, {"url": "https://python.plainenglish.io/speeding-up-python-with-parallel-multiprocessing-ebd458307e8d?source=read_next_recirc-----e5017c93cce1----1---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "Speeding up Python with Parallel & MultiProcessingPython can be faster with or without Python 3.11"}, {"url": "https://python.plainenglish.io/speeding-up-python-with-parallel-multiprocessing-ebd458307e8d?source=read_next_recirc-----e5017c93cce1----1---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "\u00b75 min read\u00b7Nov 13, 2022"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fpython-in-plain-english%2Febd458307e8d&operation=register&redirect=https%3A%2F%2Fpython.plainenglish.io%2Fspeeding-up-python-with-parallel-multiprocessing-ebd458307e8d&user=Yancy+Dennis&userId=d3c270f2cefd&source=-----ebd458307e8d----1-----------------clap_footer----b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://python.plainenglish.io/speeding-up-python-with-parallel-multiprocessing-ebd458307e8d?source=read_next_recirc-----e5017c93cce1----1---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Febd458307e8d&operation=register&redirect=https%3A%2F%2Fpython.plainenglish.io%2Fspeeding-up-python-with-parallel-multiprocessing-ebd458307e8d&source=-----e5017c93cce1----1-----------------bookmark_preview----b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://betterprogramming.pub/improving-your-prediction-api-with-dynamic-batching-50b98e5054f7?source=read_next_recirc-----e5017c93cce1----0---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://dacus-augustus.medium.com/?source=read_next_recirc-----e5017c93cce1----0---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://dacus-augustus.medium.com/?source=read_next_recirc-----e5017c93cce1----0---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "Tudor Surdoiu"}, {"url": "https://betterprogramming.pub/?source=read_next_recirc-----e5017c93cce1----0---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "Better Programming"}, {"url": "https://betterprogramming.pub/improving-your-prediction-api-with-dynamic-batching-50b98e5054f7?source=read_next_recirc-----e5017c93cce1----0---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "Improving Your Prediction API With Dynamic BatchingHow to increase the throughput of your FastAPI machine learning prediction endpoint with dynamic batching"}, {"url": "https://betterprogramming.pub/improving-your-prediction-api-with-dynamic-batching-50b98e5054f7?source=read_next_recirc-----e5017c93cce1----0---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "\u00b76 min read\u00b7Feb 8"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fbetter-programming%2F50b98e5054f7&operation=register&redirect=https%3A%2F%2Fbetterprogramming.pub%2Fimproving-your-prediction-api-with-dynamic-batching-50b98e5054f7&user=Tudor+Surdoiu&userId=2d7dcbe5446b&source=-----50b98e5054f7----0-----------------clap_footer----b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://betterprogramming.pub/improving-your-prediction-api-with-dynamic-batching-50b98e5054f7?source=read_next_recirc-----e5017c93cce1----0---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F50b98e5054f7&operation=register&redirect=https%3A%2F%2Fbetterprogramming.pub%2Fimproving-your-prediction-api-with-dynamic-batching-50b98e5054f7&source=-----e5017c93cce1----0-----------------bookmark_preview----b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://medium.com/geekculture/python-multiprocessing-with-output-to-file-a6748a27ed41?source=read_next_recirc-----e5017c93cce1----1---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://bklim.medium.com/?source=read_next_recirc-----e5017c93cce1----1---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://bklim.medium.com/?source=read_next_recirc-----e5017c93cce1----1---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "Bk Lim"}, {"url": "https://medium.com/geekculture?source=read_next_recirc-----e5017c93cce1----1---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "Geek Culture"}, {"url": "https://medium.com/geekculture/python-multiprocessing-with-output-to-file-a6748a27ed41?source=read_next_recirc-----e5017c93cce1----1---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "Python Multiprocessing with output to filePython multiprocessing module comes into mind whenever we can split a big problem into multiple smaller chunks and run them in parallel\u2026"}, {"url": "https://medium.com/geekculture/python-multiprocessing-with-output-to-file-a6748a27ed41?source=read_next_recirc-----e5017c93cce1----1---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "\u00b73 min read\u00b7Nov 21, 2022"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fgeekculture%2Fa6748a27ed41&operation=register&redirect=https%3A%2F%2Fmedium.com%2Fgeekculture%2Fpython-multiprocessing-with-output-to-file-a6748a27ed41&user=Bk+Lim&userId=a220c2c1383f&source=-----a6748a27ed41----1-----------------clap_footer----b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://medium.com/geekculture/python-multiprocessing-with-output-to-file-a6748a27ed41?source=read_next_recirc-----e5017c93cce1----1---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "2"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa6748a27ed41&operation=register&redirect=https%3A%2F%2Fmedium.com%2Fgeekculture%2Fpython-multiprocessing-with-output-to-file-a6748a27ed41&source=-----e5017c93cce1----1-----------------bookmark_preview----b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/a-framework-for-building-a-production-ready-feature-engineering-pipeline-f0b29609b20f?source=read_next_recirc-----e5017c93cce1----2---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://pauliusztin.medium.com/?source=read_next_recirc-----e5017c93cce1----2---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://pauliusztin.medium.com/?source=read_next_recirc-----e5017c93cce1----2---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "Paul Iusztin"}, {"url": "https://towardsdatascience.com/?source=read_next_recirc-----e5017c93cce1----2---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "Towards Data Science"}, {"url": "https://towardsdatascience.com/a-framework-for-building-a-production-ready-feature-engineering-pipeline-f0b29609b20f?source=read_next_recirc-----e5017c93cce1----2---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "A Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines."}, {"url": "https://towardsdatascience.com/a-framework-for-building-a-production-ready-feature-engineering-pipeline-f0b29609b20f?source=read_next_recirc-----e5017c93cce1----2---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "\u00b712 min read\u00b73 days ago"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff0b29609b20f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-framework-for-building-a-production-ready-feature-engineering-pipeline-f0b29609b20f&user=Paul+Iusztin&userId=8323de62a1a1&source=-----f0b29609b20f----2-----------------clap_footer----b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/a-framework-for-building-a-production-ready-feature-engineering-pipeline-f0b29609b20f?source=read_next_recirc-----e5017c93cce1----2---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": "3"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff0b29609b20f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-framework-for-building-a-production-ready-feature-engineering-pipeline-f0b29609b20f&source=-----e5017c93cce1----2-----------------bookmark_preview----b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://medium.com/mlearning-ai/improve-your-data-models-with-pydantic-f9f10ca66f26?source=read_next_recirc-----e5017c93cce1----3---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://medium.com/@theDrewDag?source=read_next_recirc-----e5017c93cce1----3---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://medium.com/@theDrewDag?source=read_next_recirc-----e5017c93cce1----3---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "Andrea D'Agostino"}, {"url": "https://medium.com/mlearning-ai?source=read_next_recirc-----e5017c93cce1----3---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "MLearning.ai"}, {"url": "https://medium.com/mlearning-ai/improve-your-data-models-with-pydantic-f9f10ca66f26?source=read_next_recirc-----e5017c93cce1----3---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "Improve your data models with PydanticPydantic is a Python library that allows us to structure and validate data in an efficient way"}, {"url": "https://medium.com/mlearning-ai/improve-your-data-models-with-pydantic-f9f10ca66f26?source=read_next_recirc-----e5017c93cce1----3---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": "\u00b77 min read\u00b7Jan 10"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fmlearning-ai%2Ff9f10ca66f26&operation=register&redirect=https%3A%2F%2Fmedium.com%2Fmlearning-ai%2Fimprove-your-data-models-with-pydantic-f9f10ca66f26&user=Andrea+D%27Agostino&userId=4e8f67b0b09b&source=-----f9f10ca66f26----3-----------------clap_footer----b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://medium.com/mlearning-ai/improve-your-data-models-with-pydantic-f9f10ca66f26?source=read_next_recirc-----e5017c93cce1----3---------------------b24b414b_7e7c_4a39_bbaa_f23bc234971b-------&responsesOpen=true&sortBy=REVERSE_CHRON", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff9f10ca66f26&operation=register&redirect=https%3A%2F%2Fmedium.com%2Fmlearning-ai%2Fimprove-your-data-models-with-pydantic-f9f10ca66f26&source=-----e5017c93cce1----3-----------------bookmark_preview----b24b414b_7e7c_4a39_bbaa_f23bc234971b-------", "anchor_text": ""}, {"url": "https://medium.com/?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "See more recommendations"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=post_page-----e5017c93cce1--------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}