{"url": "https://towardsdatascience.com/an-extensible-evolutionary-algorithm-example-in-python-7372c56a557b", "time": 1683002913.5769322, "path": "towardsdatascience.com/an-extensible-evolutionary-algorithm-example-in-python-7372c56a557b/", "webpage": {"metadata": {"title": "An extensible Evolutionary Algorithm Example in Python | by Dr. Robert K\u00fcbler | Towards Data Science", "h1": "An extensible Evolutionary Algorithm Example in Python", "description": "Evolutionary Algorithms are special methods to solve computational problems, such as optimization problems. Learn how to implement them in this article!"}, "outgoing_paragraph_urls": [{"url": "https://en.wikipedia.org/wiki/NP-completeness", "anchor_text": "NP-complete", "paragraph_index": 1}, {"url": "https://en.wikipedia.org/wiki/Travelling_salesman_problem", "anchor_text": "Travelling Salesman Problem", "paragraph_index": 1}, {"url": "https://github.com/Garve/Evo", "anchor_text": "GitHub page", "paragraph_index": 4}, {"url": "https://www.youtube.com/channel/UC8aG3LDTDwNR1UQhSn9uVrw", "anchor_text": "Seth Bling", "paragraph_index": 5}, {"url": "https://en.wikipedia.org/wiki/Super_Mario_World", "anchor_text": "Super Mario World", "paragraph_index": 5}, {"url": "https://en.wikipedia.org/wiki/P_versus_NP_problem", "anchor_text": "P\u2260NP", "paragraph_index": 48}, {"url": "https://en.wikipedia.org/wiki/Held%E2%80%93Karp_algorithm", "anchor_text": "Held-Karp algorithm", "paragraph_index": 49}, {"url": "https://en.wikipedia.org/wiki/Christofides_algorithm", "anchor_text": "Christofides Algorithm", "paragraph_index": 50}, {"url": "https://github.com/CarlEkerot/held-karp/blob/master/held-karp.py", "anchor_text": "Carl Ekerot", "paragraph_index": 76}, {"url": "https://sop.tik.ee.ethz.ch/publicationListFiles/ltz2004b.pdf", "anchor_text": "Running Time Analysis of Evolutionary Algorithms on a Simplified Multiobjective Knapsack Problem", "paragraph_index": 81}, {"url": "https://dr-robert-kuebler.medium.com/membership", "anchor_text": "via this link", "paragraph_index": 84}, {"url": "https://www.linkedin.com/in/dr-robert-k%C3%BCbler-983859150/", "anchor_text": "LinkedIn", "paragraph_index": 87}], "all_paragraphs": ["Evolutionary Algorithms are special methods to solve computational problems, such as optimization problems. They often yield very good results in a reasonable amount of time without us having to put a lot of thought into the problem-specific properties. Usually, we only have to adjust some parameters and then let a quite general framework run and bring us a solution. You will see how to implement such a general framework in Python in this article.", "This is especially interesting when dealing with extremely difficult problems, such as NP-complete ones. These are relevant real-life problems that many companies have to solve every day for which we do not know any efficient algorithm. One of these problems is the optimization version of the Travelling Salesman Problem (TSP), which is phrased like this:", "A salesman wants to sell his goods in n cities. He starts in city 1, visits each of the other n-1 cities exactly once in some order and returns to city 1 again. What is the best order to visit the cities in order to minimize the travelling distance?", "We will pick up this problem later again as a non-trivial example of applying our Evolutionary Algorithm. But before we go there, let us see what Evolutionary Algorithms are and how to apply them to an easy example.", "If you just want to see the code, visit my GitHub page! ;)", "A fun application of Evolutionary Algorithms is MarI/O built by Seth Bling, based on the \u201cNEAT\u201d paper [3]. A complex Neural network architecture is built from scratch using an Evolutionary Algorithm to play the classic Super Mario World. Nostalgia kicks in.", "We will now see how to develop an Evolutionary Algorithm to solve a simple function maximization problem, i.e. we want to find an input x that maximizes the output of a given function f. For f(x, y)=-(x\u00b2+y\u00b2) the unique solution would be (x, y)=(0, 0), for example.", "This algorithm can be easily adapted to solve the TSP and other problems as well. But first, let us see what an Evolutionary Algorithm actually is.", "Evolutionary Algorithms are designed to resemble the evolution found in nature. Among other things, these three concepts are the core of evolution:", "We can use these concepts to create a meta-algorithm, i.e. an algorithm that internally uses other algorithms we have yet to specify, to solve our problem. Don\u2019t worry, we will fill it with life immediately.", "Wait, this is quite general, isn\u2019t it? There are a lot of things that have to be specified.", "What are the individuals?How many individuals are in the first population and how are they generated?Which fitness score?How many parents produce how many offsprings? And how exactly?How to mutate?How many individuals die?Repeat how often?", "Let us now use the problem of maximizing a function to show how we can concretely implement a meta-algorithm.", "Let us use the function f(x)=-x(x-1)(x-2)(x-3)(x-4) on the interval [0, 4] as an example. We wish to find some value to maximize this function. A potential problem might be the local maximum at around 1.4, which we do not want to find!", "Let us see if we can reproduce this using an Evolutional Algorithm. So, let us start answering all the open questions.", "The individuals are always potential solutions to the problem.", "In our example, numbers between 0 and 4, since we only consider this function on this interval. This one was easy, right? It will not get much harder than this, I promise.", "The number of individuals is a hyperparameter you have to make up. If you have no clue about what the solution could be, choose the initial population as random as possible.", "In our case, how about we use 10 random individuals, with random meaning uniformly drawn numbers between 0 and 4?", "I expect using uniformly random elements to be a good choice since we can cover the entire solution space quite well. If we use, for example, a normal distribution with a mean of 1.4, maybe we would push our solution to be the wrong local maximum around 1.4 as well.", "We have to make this one up, too. Our solution should have the highest fitness score.", "We want to maximize our function f, so we can just use our function f itself.", "We have to make this one up, too. All of it.", "In our example, we could always use two individuals to produce one offspring. We could also let them produce more, but let us start easily here. So, if we have two individuals (also called parents), their offspring could just be the mean of them. The offspring of a 1.1 and a 3.5 could be a 2.3, for example. In total, let us produce three children, using six distinct parents in total (i.e. each parent only has exactly one partner).", "Again, these are all things that I arbitrarily decided. You can use other strategies to conduct this step, too! Use one or three parents per offspring, make parents get five children, and play round.", "Alter the offsprings a little bit probabilistically. This is a good way to explore more possible solutions in different places and don\u2019t go the wrong way deterministically.", "In our case, we can just add Gaussian noise to each offspring. Maybe a mean of zero and a standard deviation of 0.25 is fine. Also, remember:", "The individuals have to be potential solutions! So, the mutation must not push the children out of the feasible interval [0, 4]. If this happens, set the children to the closest edge of the interval.", "As many as you like. Maybe it\u2019s good to keep the population the same size over the steps, since otherwise the population size might explode or everyone dies at some point.", "Since we have 13 individuals in the population now, let three of them die and we end up with 10 again. Let us pick the ones with the worst fitness, which are the old individuals 0.596 and 2.495 as well as the newly created individual 2.121. \ud83d\ude14", "As often as you like. Just check sometimes, until you see that the solutions don\u2019t get better anymore.", "Maybe let us fix 50 epochs and see what happens. After our artificial evolution worked all the way through, we can check all the individuals and pick the one with the highest score as the solution to our problem.", "The evolution up to epoch no. 50 looks like this:", "We can see that the algorithm worked! But it looks like it was a close call. Up to epoch 25, the population was gathering around the other local maximum at around x = 1.4. Luckily, we had an individual far away at 4, which managed to pull the population to the right side, starting from epoch 25.", "We can also see this shift around epoch 25 when looking at the fitness score of the best individuals in the population in each epoch.", "Okay, so we have seen how the algorithm worked and that we even got the correct answer (or at least a very good approximation) in the end! There was a bit of luck involved, but this will always be the same. We could have been even unluckier and our initial population could have started around the local maximum at x = 1.4. Then it would have been very unlikely that individuals would have broken out of this region, as in this example:", "It can still be the case that a mutation pushes an individual to the right side, which in turn pulls more individuals with it. But this is highly unlikely since a mutation pushes an individual by at most 0.75 in any direction with probability > 99% since the standard deviation was 0.25.", "So, is it good to use a more extreme mutation? Well, if we exaggerate, the individuals just jump all over the place or gather in the two corners x = 0 and x = 4. So we have to be a bit careful about choosing the parameters here.", "From a theoretical standpoint, you can see an evolutionary algorithm as a heavily randomized algorithm. The initial population is random, individuals generate offspring via more or less complicated operations, the offspring mutate using randomness and all of this is repeated hundreds, thousands, millions of times.", "Therefore, it is very hard to analyze these algorithms and give any theoretical bounds on their success probability or the quality of their results. For very easy algorithms this is possible, such as the (1 + 1) evolutionary algorithm [1] for maximizing extremely simple functions or an algorithm for solving the Simplified Multiobjective Knapsack Problem [2], but examples like this are rarely seen.", "However, if a run did not work, just try it again with the same or other parameters.", "Here, I will share my implementation with you. I tried to make it general and abstract, so you can easily use it for your purposes.", "If you have never used Abstract Base Classes before, don\u2019t worry. The class Individual is only there to tell you which interface you have to use for the objects that represent your individuals. Your individuals need a value (the payload, the potential solution), you have to implement a random initialization, a mutation, and a pair function.", "Then the Pool and Evolution classes take care of the rest. I also implemented the function maximization example, to show you what this can look like. I used a few more parameters there, but if you replace all lower bounds with 0, upper bounds with 4, rate with 0.25, dim with 1, and alpha = 0.5, you end up exactly with our example again.", "You can use these classes like this:", "So far we have gained some confidence with a small toy problem, but now it is time to get back to the difficult TSP again.", "The TSP is all about finding the shortest round trip through n cities. Use these, as an example:", "The solution to the TSP looks like this:", "There exist numerous algorithms to solve this one. They range from exhaustive search (trying out all ways) to more complicated algorithms. However, all of these methods are slow, and if P\u2260NP, we can not expect any fast algorithm to emerge, ever.", "The exhaustive search will let you solve problems up to maybe 15 cities if you can wait for a few days. Other methods like the Held-Karp algorithm let you solve instances up to 50 cities, optimistically.", "If you drop the need for the solution to be the best, Christofides Algorithm from 1976 will give you a solution in a short amount of time that is provably at most 50% longer than the shortest round trip.", "Think about why this is an awesome result: We don\u2019t even know the shortest round trip length, but still we can say that the round trip return by this algorithm is less than 50% longer than this unknown solution!", "But now, let us get you what you have waited for: an Evolutionary Algorithm for solving TSP!", "This time, we start off with 20 cities. The amount is still low enough to solve it with the Held-Karp algorithm, so we can even check if we got the best solution in the end! Here is the map:", "Now, we have to answer all the questions again. Let us first answer the easier \u201cnumber questions\u201d (hyperparameters that we can easily adjust if things don\u2019t workout):", "The exciting questions are dealing with the implementation of a class TSP that we have to define now. What are the individuals? How does the random initialization work? The paring? The mutation? What is the fitness score?", "Let\u2019s start with a basic one: What are the individuals here? Protip: It\u2019s not the cities. Again:", "The individuals are always potential solutions to the problem.", "In the case of TSP, we search for a short round trip. With \u201cshort\u201d, we mean the sum of the Euclidean distances between every two cities in the round trip. We can represent such a round trip as a list of n numbers, e.g. (0, 3, 1) reads as \u201cStart from city 0, then go to city 3, from there to city 1, then back to city 0.\u201d. So, our individuals are lists of numbers, containing each number from 0 to n-1 exactly once, i.e. permutations on {0, 1, 2, \u2026, n-1}.", "Within the whole process, we have to maintain this property. There is no point in keeping individuals in the population that don\u2019t represent a feasible solution to the problem since it clogs the population, and we might even pick it in the end, giving us an invalid solution.", "And how to initialize them? Well, just take a random permutation of the numbers from 0 to n-1. This should do the job.", "Let us continue with the mutation procedure.", "So, how can we alter a round trip in a simple way? Imagine we have a round trip through five cities, for example (3, 1, 4, 2, 0). An easy way is to just randomly swap out two elements. Our example could mutate to (0, 1, 4, 2, 3) or (3, 4, 1, 2, 0). We can also swap more than one time and make a hyperparameter rate out of it comparable to the standard deviation in the function maximization example before.", "It is clear that this kind of mutation preserves the property, that individuals are permutations, i.e. feasible solutions.", "The most interesting thing here is probably the pair function.", "Let us assume that we have the following individuals which we want to use as parents:", "The way you can do this is the following: You copy the right half of the second individual into the right half of the first individual.", "We want to use the altered first individual as the offspring now, but this does not work as-is since there are duplicate numbers now. Hence, the left half of the altered first individual has to be repaired first. We can do it like this:", "The 4 that was inserted into the right half kicked out the 5 that was there before. So, let us replace the 4 in the left half with this 5 since it is missing now. Doing the same with 2 that kicked out a 3 gives the following:", "But there is the next problem: We have number 3 two times now. But we can repeat this procedure several more times until we get a feasible individual again. The 3 is the problem. It initially kicked out the 1. So replace the 3 from the left half with a 1, and voila: the offspring is (0, 5, 1, 4, 2, 3).", "In total, our class TSP looks like this:", "Here I also introduced another hyperparameter alpha, which decides where to split the individuals. For my example, I used alpha=0.5.", "Since we want to minimize the round trip length, we can just use minus the length of the round trip as the fitness score.", "Let us solve the TSP with 20 cities! I used the following code: I defined a fitness function, a function to compute the round trip length, and a function to compute the distance matrix (pairwise distances between two cities).", "For me, the fitness function behaved like this:", "And here are the best individuals per epoch:", "And the solution that we have from around epoch 400 is even the best solution we can get for these 20 cities! I checked this using the Held-Karp algorithm implementation by Carl Ekerot.", "For the last act, let us try something really difficult. Not only 10 or 20 cities but 100, which is way too much for any exact algorithm to handle.", "I can not tell you if this is the fastest round trip, but for me, it definitely seems like a good one!", "In this article, we have seen how Evolutionary Algorithms work using two examples: maximizing a function and solving the Travelling Salesman problem. Evolutionary Algorithms are usually used to solve difficult problems to which we do not know exact answers. The algorithms can be very fast and yield accurate results. The implementation is easy and you don\u2019t have to be an expert in the field your problem is from, e.g. you don\u2019t have to read papers from the past 20 years of TSP research to write a decently performing algorithm.", "Sadly, it is very hard to obtain any theoretical results, because Evolutionary Algorithms often work with a lot of randomness interacting in complicated ways. Thus, we can not know if the solution given is good or bad, we can only check if it is good enough for our use case. In the 100 cities example, if our goal was to travel to each city in length of 150,000 or less, the algorithm has given us a perfect answer.", "[2] M. Laumanns, L. Thiele, and E. Zitzler, Running Time Analysis of Evolutionary Algorithms on a Simplified Multiobjective Knapsack Problem (2004), Natural Computing 3, 37\u201351", "I hope that you learned something new, interesting, and useful today. Thanks for reading!", "As the last point, if you", "why not do it via this link? This would help me a lot! \ud83d\ude0a", "To be transparent, the price for you does not change, but about half of the subscription fees go directly to me.", "Thanks a lot, if you consider supporting me!", "If you have any questions, write me on LinkedIn!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Studied Mathematics, graduated in Cryptanalysis, working as a Senior Data Scientist. Interested in algorithms, probability theory, and machine learning."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F7372c56a557b&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fan-extensible-evolutionary-algorithm-example-in-python-7372c56a557b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fan-extensible-evolutionary-algorithm-example-in-python-7372c56a557b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fan-extensible-evolutionary-algorithm-example-in-python-7372c56a557b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fan-extensible-evolutionary-algorithm-example-in-python-7372c56a557b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://me.dm/@robertkuebler", "anchor_text": "Mastodon"}, {"url": "https://towardsdatascience.com/?source=post_page-----7372c56a557b--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----7372c56a557b--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://kuebler.ai/?source=post_page-----7372c56a557b--------------------------------", "anchor_text": ""}, {"url": "https://kuebler.ai/?source=post_page-----7372c56a557b--------------------------------", "anchor_text": "Dr. Robert K\u00fcbler"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6d6b5fb431bf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fan-extensible-evolutionary-algorithm-example-in-python-7372c56a557b&user=Dr.+Robert+K%C3%BCbler&userId=6d6b5fb431bf&source=post_page-6d6b5fb431bf----7372c56a557b---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7372c56a557b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fan-extensible-evolutionary-algorithm-example-in-python-7372c56a557b&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7372c56a557b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fan-extensible-evolutionary-algorithm-example-in-python-7372c56a557b&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@jplenio?utm_source=medium&utm_medium=referral", "anchor_text": "Johannes Plenio"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://en.wikipedia.org/wiki/NP-completeness", "anchor_text": "NP-complete"}, {"url": "https://en.wikipedia.org/wiki/Travelling_salesman_problem", "anchor_text": "Travelling Salesman Problem"}, {"url": "https://github.com/Garve/Evo", "anchor_text": "GitHub page"}, {"url": "https://www.youtube.com/channel/UC8aG3LDTDwNR1UQhSn9uVrw", "anchor_text": "Seth Bling"}, {"url": "https://en.wikipedia.org/wiki/Super_Mario_World", "anchor_text": "Super Mario World"}, {"url": "https://en.wikipedia.org/wiki/P_versus_NP_problem", "anchor_text": "P\u2260NP"}, {"url": "https://en.wikipedia.org/wiki/Held%E2%80%93Karp_algorithm", "anchor_text": "Held-Karp algorithm"}, {"url": "https://en.wikipedia.org/wiki/Christofides_algorithm", "anchor_text": "Christofides Algorithm"}, {"url": "https://github.com/CarlEkerot/held-karp/blob/master/held-karp.py", "anchor_text": "Carl Ekerot"}, {"url": "https://www.sciencedirect.com/science/article/pii/S0304397501001827", "anchor_text": "On the analysis of the (1+1) evolutionary algorithm"}, {"url": "https://sop.tik.ee.ethz.ch/publicationListFiles/ltz2004b.pdf", "anchor_text": "Running Time Analysis of Evolutionary Algorithms on a Simplified Multiobjective Knapsack Problem"}, {"url": "http://nn.cs.utexas.edu/downloads/papers/stanley.ec02.pdf", "anchor_text": "Evolving Neural Networks through Augmenting Topologies"}, {"url": "https://dr-robert-kuebler.medium.com/membership", "anchor_text": "via this link"}, {"url": "https://www.linkedin.com/in/dr-robert-k%C3%BCbler-983859150/", "anchor_text": "LinkedIn"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----7372c56a557b---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/evolutionary-algorithms?source=post_page-----7372c56a557b---------------evolutionary_algorithms-----------------", "anchor_text": "Evolutionary Algorithms"}, {"url": "https://medium.com/tag/travelling-salesman?source=post_page-----7372c56a557b---------------travelling_salesman-----------------", "anchor_text": "Travelling Salesman"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----7372c56a557b---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/genetic-algorithm?source=post_page-----7372c56a557b---------------genetic_algorithm-----------------", "anchor_text": "Genetic Algorithm"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7372c56a557b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fan-extensible-evolutionary-algorithm-example-in-python-7372c56a557b&user=Dr.+Robert+K%C3%BCbler&userId=6d6b5fb431bf&source=-----7372c56a557b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7372c56a557b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fan-extensible-evolutionary-algorithm-example-in-python-7372c56a557b&user=Dr.+Robert+K%C3%BCbler&userId=6d6b5fb431bf&source=-----7372c56a557b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7372c56a557b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fan-extensible-evolutionary-algorithm-example-in-python-7372c56a557b&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----7372c56a557b--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F7372c56a557b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fan-extensible-evolutionary-algorithm-example-in-python-7372c56a557b&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----7372c56a557b---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----7372c56a557b--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----7372c56a557b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----7372c56a557b--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----7372c56a557b--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----7372c56a557b--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----7372c56a557b--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----7372c56a557b--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----7372c56a557b--------------------------------", "anchor_text": ""}, {"url": "https://kuebler.ai/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://kuebler.ai/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Dr. Robert K\u00fcbler"}, {"url": "https://kuebler.ai/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "3K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6d6b5fb431bf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fan-extensible-evolutionary-algorithm-example-in-python-7372c56a557b&user=Dr.+Robert+K%C3%BCbler&userId=6d6b5fb431bf&source=post_page-6d6b5fb431bf--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F11fae4bef4b2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fan-extensible-evolutionary-algorithm-example-in-python-7372c56a557b&newsletterV3=6d6b5fb431bf&newsletterV3Id=11fae4bef4b2&user=Dr.+Robert+K%C3%BCbler&userId=6d6b5fb431bf&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}