{"url": "https://towardsdatascience.com/predict-league-of-legends-matches-while-learning-pytorch-part-2-38b8e982c7ea", "time": 1683009049.9827268, "path": "towardsdatascience.com/predict-league-of-legends-matches-while-learning-pytorch-part-2-38b8e982c7ea/", "webpage": {"metadata": {"title": "Predict League of Legends Matches While Learning PyTorch (Part 2) | by Richard So | Towards Data Science", "h1": "Predict League of Legends Matches While Learning PyTorch (Part 2)", "description": "Learn to implement a simple feedforward network in PyTorch and train with a GPU for a niche use case scenario, with a little touch of theory along the way"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/predict-matches-in-league-of-legends-while-learning-pytorch-basics-3dd43cf8d16f", "anchor_text": "here", "paragraph_index": 0}, {"url": "https://towardsdatascience.com/predict-matches-in-league-of-legends-while-learning-pytorch-basics-3dd43cf8d16f", "anchor_text": "here", "paragraph_index": 1}, {"url": "https://www.urbandictionary.com/define.php?term=tilted", "anchor_text": "tilted", "paragraph_index": 2}, {"url": "https://www.youtube.com/watch?v=aircAruvnKk&list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi&index=2&t=0s", "anchor_text": "3blue1brown\u2019s video series on deep neural networks", "paragraph_index": 8}, {"url": "https://medium.com/the-theory-of-everything/understanding-activation-functions-in-neural-networks-9491262884e0", "anchor_text": "this article", "paragraph_index": 10}, {"url": "https://pytorch.org/docs/stable/nn.functional.html", "anchor_text": "documentation", "paragraph_index": 10}, {"url": "http://kaggle.com", "anchor_text": "kaggle", "paragraph_index": 14}, {"url": "http://colab.research.google.com", "anchor_text": "google colab", "paragraph_index": 14}, {"url": "https://jovian.ml/richardso21/lol-nn", "anchor_text": "https://jovian.ml/richardso21/lol-nn", "paragraph_index": 24}, {"url": "https://sorichard.com", "anchor_text": "https://sorichard.com", "paragraph_index": 26}], "all_paragraphs": ["Hello, fellow reader! If you haven\u2019t read the first part of this 2-part \u201cseries\u201d, I highly recommend it before reading this. You can do so here or below \ud83d\udc47", "Last time, we left off with making a logistic regressor with PyTorch for this same purpose. This time, we\u2019re kicking things up a notch: creating a feedforward neural network (one with only fully connected layers). If you want to know a little more about the intentions of doing this, the dataset to be used for this mini project, and/or the data preparation process for the dataset, then you should check out my first article here or above.", "League of Legends is one of my all-time favorites, even if I honestly do suck at it. LOL is an extremely competitive MOBA, where two teams of 5 (the blue and red team) are pitted against each other to destroy the base (nexus) opposite of theirs. Winning usually requires a great amount of teamwork, coordination, or for a tilted player, \u201cluck\u201d. Regardless, it is not too hard for a League player (even if they\u2019re pretty new) to tell which team\u2019s probably going to win, based on the number of kills, deaths, and numerous other stats that the game keeps track of. Something that a neural network can predict\u2026\u2026", "Psst! If you are not looking for learning some theory, feel free to skip over this section. You\u2019ll just miss some of my own drawings :(", "We\u2019ve seen how a logistic regression model could do fairly well on prediction last time (it accomplished up to 74% accuracy on the test dataset). In fact, a logistic regressor is almost exactly a linear regressor, which in itself is a matrix dot product between a batch of inputs, a weight matrix, with the addition of a bias vector. The changeable weights and biases are what enables the model to train and get better at what it\u2019s doing. The only difference between linear and logistic regressors is the presence of a function that \u201csquishes\u201d the output into a range of values (usually from 0 to 1), for predictions involving a simple yes-or-no question (just like if a team in a match wins a game) or a classification problem. A logistic regressor is the one that uses this \u201csquish\u201d function, which is usually in the form of a sigmoid or softmax function.", "Well then, how does a neural network set itself up for further success? A vanilla neural network is, simply speaking, multiple linear regressors stacked together. Theoretically, this is supposed to allow the neural network to pick up on more relationships/trends between data to help with prediction. But it can\u2019t be that simple! Without doing anything extra, chaining matrix multiplication and addition only gets us nowhere. Take a look:", "You can see that chaining two linear regressions is synonymous to only one, just with different weights and biases. So, how do we solve this? We introduce a non-linear activation function, which would wrap around each instance of a linear regression operation. Not only does it resolve the prevalent issue above, but it also mimics (in a sense) how biological neurons work. For instance, a neuron determines if a signal surpasses a set threshold to pass the signal forward to the next neuron. Similarly, an activation function would determine and regularize the final output of a layer of a neural network. I could elaborate more on activation functions, but we\u2019ll be diving way too deep!", "By the way, to align our usage of vocabulary more towards convention, from now on let\u2019s call each instance of a linear regression between the input and output a hidden layer of the neural network, and each individual weight and bias a node. With this in mind, this is what a neural network \u201clooks\u201d like:", "Alright, now let\u2019s get back to coding! If you want a more intuitive approach to neural networks & much more, check out 3blue1brown\u2019s video series on deep neural networks!", "Tl;dr for what we just went over: a neural network is basically multiple linear regression operations (hidden layers) chained together, with an activation function after each layer. Here\u2019s what it would look like when defining the model:", "Cool, but what\u2019s F.relu()? Rectified Linear Unit (ReLU) is one of the many activation functions used in deep learning, and it performs very well compared to other alternatives (e.g. Sigmoid). If you want to know more about ReLU and other activation functions, go check this article out. PyTorch provides a plethora of activation functions in torch.nn.functional (usually imported as F), so be sure to check their documentation as well to see the options you have for your own usage.", "We\u2019ll be using the SGD optimizer and the cross entropy loss function for training the model. We define the training loop below:", "As neural network models get more complex, the computational demands for training these models rise astronomically high. Graphics Processing Units, known as GPUs or graphics cards, are specially designed to undertake mass matrix operations. If you hadn\u2019t known already, unless enabled, PyTorch was always using your CPU for computations, which is definitely not as efficient as GPUs. This time, we\u2019ll find how to harness the GPU to crunch numbers for our neural network.", "Before we start, only NVIDIA GPUs are supported, sorry AMD fans \ud83d\ude22.", "PyTorch offers a function torch.cuda.is_available() , which outputs a boolean indicating the presence of a compatible (NVIDIA) GPU with CUDA installed. You could go through the setup process if you have a supported GPU, or you can make a kaggle or google colab account and have access to a free GPU for deep learning purposes (with some limitations, of course). Let\u2019s use the is_available() function to setup for GPU use, but fallback to the CPU if a GPU is absent:", "With PyTorch you can move data in and out of the GPU device by using the .to() method with any tensor or a model. So, to start working with GPUs, you first have to move your model to the GPU:", "And here are some pretty graphs below\ud83d\ude01:", "And, here are our results from the test dataset:", "Hmm\u2026 It looks like our model performed quite the same compared to our linear regression model (74%). Now, we have some possibilities as to this outcome:", "After a long debugging session, I couldn\u2019t find anything wrong in the code (if you do find something, please let me know!!!), so #1 is out. #2 is likely not the case: we established earlier how neural networks are based off of linear regression models, which are basically logistic regressors without a sigmoid/softmax function. They should be able to draw more relationships out of the data, which calls for better accuracy, not the opposite.", "#3 is much more probable than the other two, since a neural network is much more complex than a logistic regressor and is thus more suceptible to this sort of issue. Usually, overfitting could be resolved with the use of dropout, which simply means disabling a set fraction of the model\u2019s nodes, picked randomly, while training. For PyTorch, that would mean initializing a nn.Dropout() layer in __init__(), and putting it in between the layers with ReLU. Here is the implementation:", "Surprisingly, even this didn\u2019t work, meaning that the model didn\u2019t overfit the training data. Finally, to test our hypothesis of #4, I revisited my old notebook on the logistic regressor, and ran a few more trials with the model. It turns out that the logistic regressor\u2019s 74% accuracy last time was pretty lucky. In fact, let\u2019s look at the plot of accuracy over the # of epochs again:", "The accuracy was pretty unstable for the most part, but overall it hovered in the low 70s, which is more similar to the later trials I\u2019ve run on the logistic regressor, and the neural network in this article.", "There\u2019s a lot to be learned with the discipline of deep learning through this example. Mainly, deep learning is no voodoo magic; it can\u2019t magically solve every classification problem you give to it. It can\u2019t predict every single League of Legends match; in many cases, the first 10 minutes of a match isn\u2019t enough to determine which team\u2019s going to win (I can testify through my experience). Nonetheless, there\u2019s a lot to be gained out of this experience, such as learning the concept of a neural network and implementing it in PyTorch, utilizing the GPU, as well as dropout in case the model overfits. In that note, I hope you enjoyed your journey with me on building a PyTorch model for this League of Legends dataset. Happy coding (and keep on playing League)!", "If you want the source for the jupyter notebook used for this mini-project, look here: https://jovian.ml/richardso21/lol-nn.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "https://sorichard.com | CS @ Georgia Tech, Class of \u201924. Pursuing everything code. Always learning!"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F38b8e982c7ea&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-league-of-legends-matches-while-learning-pytorch-part-2-38b8e982c7ea&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-league-of-legends-matches-while-learning-pytorch-part-2-38b8e982c7ea&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-league-of-legends-matches-while-learning-pytorch-part-2-38b8e982c7ea&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-league-of-legends-matches-while-learning-pytorch-part-2-38b8e982c7ea&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----38b8e982c7ea--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----38b8e982c7ea--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://richardso21.medium.com/?source=post_page-----38b8e982c7ea--------------------------------", "anchor_text": ""}, {"url": "https://richardso21.medium.com/?source=post_page-----38b8e982c7ea--------------------------------", "anchor_text": "Richard So"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F94b97ebc1395&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-league-of-legends-matches-while-learning-pytorch-part-2-38b8e982c7ea&user=Richard+So&userId=94b97ebc1395&source=post_page-94b97ebc1395----38b8e982c7ea---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F38b8e982c7ea&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-league-of-legends-matches-while-learning-pytorch-part-2-38b8e982c7ea&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F38b8e982c7ea&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-league-of-legends-matches-while-learning-pytorch-part-2-38b8e982c7ea&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/predict-matches-in-league-of-legends-while-learning-pytorch-basics-3dd43cf8d16f", "anchor_text": "here"}, {"url": "https://towardsdatascience.com/predict-matches-in-league-of-legends-while-learning-pytorch-basics-3dd43cf8d16f", "anchor_text": "Predict Matches in League of Legends While Learning PyTorch BasicsFollow me as I use PyTorch to implement a logistic regression model to predict matches in League of Legends from a\u2026towardsdatascience.com"}, {"url": "https://towardsdatascience.com/predict-matches-in-league-of-legends-while-learning-pytorch-basics-3dd43cf8d16f", "anchor_text": "here"}, {"url": "https://www.urbandictionary.com/define.php?term=tilted", "anchor_text": "tilted"}, {"url": "https://www.youtube.com/watch?v=aircAruvnKk&list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi&index=2&t=0s", "anchor_text": "3blue1brown\u2019s video series on deep neural networks"}, {"url": "https://medium.com/the-theory-of-everything/understanding-activation-functions-in-neural-networks-9491262884e0", "anchor_text": "this article"}, {"url": "https://pytorch.org/docs/stable/nn.functional.html", "anchor_text": "documentation"}, {"url": "http://kaggle.com", "anchor_text": "kaggle"}, {"url": "http://colab.research.google.com", "anchor_text": "google colab"}, {"url": "https://jovian.ml/richardso21/lol-nn", "anchor_text": "https://jovian.ml/richardso21/lol-nn"}, {"url": "https://medium.com/tag/programming?source=post_page-----38b8e982c7ea---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/deep-learning?source=post_page-----38b8e982c7ea---------------deep_learning-----------------", "anchor_text": "Deep Learning"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----38b8e982c7ea---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/python?source=post_page-----38b8e982c7ea---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----38b8e982c7ea---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F38b8e982c7ea&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-league-of-legends-matches-while-learning-pytorch-part-2-38b8e982c7ea&user=Richard+So&userId=94b97ebc1395&source=-----38b8e982c7ea---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F38b8e982c7ea&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-league-of-legends-matches-while-learning-pytorch-part-2-38b8e982c7ea&user=Richard+So&userId=94b97ebc1395&source=-----38b8e982c7ea---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F38b8e982c7ea&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-league-of-legends-matches-while-learning-pytorch-part-2-38b8e982c7ea&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----38b8e982c7ea--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F38b8e982c7ea&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-league-of-legends-matches-while-learning-pytorch-part-2-38b8e982c7ea&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----38b8e982c7ea---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----38b8e982c7ea--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----38b8e982c7ea--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----38b8e982c7ea--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----38b8e982c7ea--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----38b8e982c7ea--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----38b8e982c7ea--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----38b8e982c7ea--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----38b8e982c7ea--------------------------------", "anchor_text": ""}, {"url": "https://richardso21.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://richardso21.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Richard So"}, {"url": "https://richardso21.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "966 Followers"}, {"url": "https://sorichard.com", "anchor_text": "https://sorichard.com"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F94b97ebc1395&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-league-of-legends-matches-while-learning-pytorch-part-2-38b8e982c7ea&user=Richard+So&userId=94b97ebc1395&source=post_page-94b97ebc1395--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fd1d3caf01b63&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-league-of-legends-matches-while-learning-pytorch-part-2-38b8e982c7ea&newsletterV3=94b97ebc1395&newsletterV3Id=d1d3caf01b63&user=Richard+So&userId=94b97ebc1395&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}