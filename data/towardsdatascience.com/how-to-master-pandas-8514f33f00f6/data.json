{"url": "https://towardsdatascience.com/how-to-master-pandas-8514f33f00f6", "time": 1683000379.4964259, "path": "towardsdatascience.com/how-to-master-pandas-8514f33f00f6/", "webpage": {"metadata": {"title": "How to master Python\u2019s main data analysis library in 20 Minutes | by Fabian Bosler | Towards Data Science", "h1": "How to master Python\u2019s main data analysis library in 20 Minutes", "description": "How to master Python\u2019s main data analysis library in 20 Minutes"}, "outgoing_paragraph_urls": [{"url": "https://github.com/FBosler/you-datascientist", "anchor_text": "here", "paragraph_index": 1}, {"url": "https://worldhappiness.report/ed/2019/", "anchor_text": "World Happiness Report 2019", "paragraph_index": 3}, {"url": "https://github.com/FBosler/you-datascientist", "anchor_text": "GitHub Repo", "paragraph_index": 4}, {"url": "https://github.com/FBosler/you-datascientist/archive/master.zip", "anchor_text": "link", "paragraph_index": 4}, {"url": "https://docs.google.com/spreadsheets/d/1Wl3Ad_Y_izZM8J5UizPbAMuOZGpb2FzAZfbAJ-aU2Tc/edit#gid=779395260", "anchor_text": "here", "paragraph_index": 15}, {"url": "https://medium.com/@fabianbosler/membership", "anchor_text": "https://medium.com/@fabianbosler/membership", "paragraph_index": 111}], "all_paragraphs": ["This article addresses typical problems and challenges aspiring data scientists and data analysts are facing regularly. We will solve those problems and tackle those challenges by utilizing Python\u2019s most powerful library for data manipulation and analysis, Pandas.", "You can find the full Jupyter Notebook here. But I urge you to go through the steps yourself. After all, Practice makes perfect.", "A working Python environment (I suggest Jupyter Notebook). If you haven\u2019t set this up, don\u2019t worry. In last week\u2019s article, we talked about how to set up Anaconda and explained how to open your first Jupyter Notebook. In case you haven\u2019t done that yet, have a look at the linked article. Getting all set up and ready to go takes less than 10 minutes.", "Before doing any data manipulation, let\u2019s get some data. We will use data from the World Happiness Report 2019. I am going to provide a slightly adjusted version of the raw data that also includes continents.", "This GitHub Repo holds the data and the code. If you are not familiar with GitHub, you can also download a packaged zip file from this link! Unpack the file and move the content (especially thehappiness_with_continent.csv) into the same folder as your Jupyter Notebook (if you don\u2019t have one yet, create one).", "In the new notebook run import pandas as pd (i.e., import the Pandas library into the workbook to get access to the features.", "I like to adjust my notebook settings a bit like this:", "These commands make the Notebook wider and thus utilize more space on the screen (typically the notebook has a fixed width, which sucks with wide screens).", "Pandas stores data either as Series (one column) or as DataFrames (one or more columns), where the latter is simply one or more Series combined.", "Note: Whenever we load data with one of the following load functions, the result will be stored in DataFrame though.", "For me the main way of loading data is pandas read_csv. It simply aligns best with the way I think about data, which is largely tabular.", "You can load data from a local file like this:", "Or you can read data from the web directly into a dataframe like this:", "Reading data from Excel is pretty straight forward. Google Sheets is a bit trickier as it requires you to go through an authentication procedure first. You can read up all on extracting data from Excel and Google Sheets here:", "This one I use rarely, but certainly works for smaller tables. Just mark and copy (ctrl+c) a table from google sheets for example and run pd.read_clipboard().", "Example: navigate here (first public sheet I found) and mark an area as indicated in the screenshot.", "Some noteworthy parameters for the read_csv based functions (and read_clipboard):", "There are a bunch of additional (less used) parameters. You can read up on those by running pd.read_csv? in a cell (adding a question mark after a command will print the help text).", "No matter how we read the data, we want to store it in a variable. We do this by assigning the read result to a variable like this data = pd.read_clipboard() or data = pd.read_csv('NAME_OF_YOUR_FILE.csv')", "The following read methods rarely come up for me but are all also implemented in Pandas:", "There are three standard ways of displaying data in a Notebook, head, tail, and sample. head shows the first, tail the last, and sample a random selection of rows.", "Note that there are dots before the column gini of household income reported in Gallop, by wp5-year . The dots mean that there are columns that are not displayed. To change your Notebooks settings to display more columns/rows run the following commands:", "However, be aware of the fact that frequently the files that you are loading are so large (1GB+) that it is not going to be possible to display all the data for performance reasons. For this reason, you should try to familiarise yourself with the data on a higher level and not depend on visually going through the rows.", "data.shape returns the dimensions of the DataFrame. In our example, 1704 rows, 27 columns.", "data.columns returns a list of all the column names in the DataFrame.", "data.index returns information about the index. We will talk about indices in more detail in the sort and filter section. Think of an index as the row names/numbers.", "data.info() returns information regarding types and number of non-null observations in the DataFrame", "data.describe() returns some descriptive statistical information (count, mean, std, min, 25%, 50%, 75%, max) regarding the numerical columns of the DataFrame:", "Calling sort_values on data without parameter will not do us any good. As a matter of fact, it will raise an error, telling us that it is missing an argument called by. This error makes sense. We have to tell Pandas by which column(s) we want to sort.", "We could, for example, sort our data by year, or by year and country name like this:", "Note: If you pass multiple values, it will sort by the values in order of the values.", "The sorting will be done \u201clowest value\u201d first by default. However, it\u2019s easy to change this behavior.", "Note: Ascending is by default True, i.e., the smallest values first, if you want the largest values first you have to specify ascending=False", "In addition to column-based sorting, there is also index-based sorting. To sort by index call: data.sort_index() or data.sort_index(ascending=False) . The first is for ascending order, the latter one for descending order.", "Sorting is all good and nice, but often we are concerned with a particular subset of the data. Sometimes you might want to look at only one or multiple columns.", "Selecting one column:There are two ways of selecting one particular column. Let\u2019s say that we want to select the Year column. We could do either:", "Note: Why are there two ways of doing precisely the same thing you might ask? The reason is convenience. The second approach is a tad faster, as you only need two dots and the column name. Whereas in the first method you need the column name, two upper ticks and two brackets.", "However, I strongly advocate for using the first approach, as it avoids some minor problems down the road and is consistent with selecting multiple columns.", "Selecting multiple columns:Say you want to select Country name and Life Ladder then this is how you would do it (careful: double brackets):", "Note: Be especially mindful of the double brackets before the first and after the last column you want to select! Whenever you use double brackets, the result will be a DataFrame (even when only selecting one column with double brackets).I can\u2019t stress this enough as even I still sometimes run into these errors! If you want to select multiple columns, but only open one set of brackets, the content between the brackets will be considered ONE column. Needless to say that your data does not contain that accidentally combined column.", "Being able to select specific columns is only halfway there. However, selecting rows is just as easy.", "Rows in Pandas are selected by index. You can think of indices as the names of the rows. Whenever you select rows from a DataFrame, this happens by overlaying the DataFrame with a Series with the same index containing only True and False values ( True meaning that the row should be selected, False that the row should not be selected). However, most of the time, this explicit index selection is abstracted away from the user. I still think it is tremendously important to understand how the row selection process works under the hood.", "You can select one row or multiple rows by index. There are two methods for doing that:", "iloc:data.iloc allows selecting rows (and optionally columns) by position (i.e., by the number of the row).", "iloc \u2014 Selecting one row: The syntax looks like this data.iloc[row_number (,col_number)] where the part in parenthesis is optional.", "Note: The formatting looks a bit unconventional, this is because when selecting one row and one row only, a Series is going to be returned.", "iloc \u2014 Selecting multiple rows:The syntax looks like this data.iloc[start_row:end_row (,start_col:end_col)] where the part in parenthesis is optional.", "Alternatively, you can additionally specify which columns to select.", "loc:data.loc as opposed to iloc allows selecting rows (and columns) by:", "To better explain point one and also better distinguish it from iloc we will turn the country name into the DataFrame`s index. To achieve this, run the following command:", "The set_index command sets a new index on the DataFrame. By also specifying inplace=True we make sure that the DataFrame will be changed. If we did not specify inplace=True, we would only see how the DataFrame would look like after applying the operation, but no change to the underlying data would take place.", "The DataFrame should now look like this:", "We can see that the DataFrame lost its row numbers (the previous) index and gained a new index:", "loc \u2014 Selecting row(s) by one index label:The syntax looks like this data.loc[index_label (,col_label)] where the part in parenthesis is optional.", "loc \u2014 Selecting rows and a column by index label and column label:", "loc \u2014 Selecting row(s) by multiple index labels:", "loc \u2014 Selecting rows and columns by multiple index labels:You can also specify the column names for the selected rows that you want to return.", "Note: We spread the row selection ['Germany','United States] and the column selection ['Year','Life Ladder'] out across two lines. I find that splitting the statement makes for better readability.", "loc \u2014 Selecting row(s) by a range of index labels:This way of selecting rows can feel a bit strange, as a range of labels ('Denmark':'Germany') is not quite as intuitive as using a range of numbers ( 903:907) for iloc.", "Specifying a range of labels is based on the current ordering of the index, and it will fail on an unsorted index.", "However, assuming that your index is sorted, or you sorted it before selecting a range, you can do the following:", "loc \u2014 boolean/conditional lookupBoolean or conditional lookup is really where the meat is. As mentioned earlier, whenever selecting rows, this happens by overlaying the DataFrame with a mask of True and False values.", "In the following example, we create a small DataFrame with the index ['A','B','A','D'] and some random values between 0 and 10 as values.", "We then create an overlay with the same Index with the values [True,False,True,False].", "We then use df.loc[overlay] to only select the rows with True value for their index.", "The same logic can be used to select rows based on a (or multiple) condition(s).", "We first create a boolean mask like this:", "And then use this mask to only select the rows that meet the specified condition like this:", "Option 1, as well, as the alternative yield precisely the same result. However, the alternative is a little more legible. The improved legibility becomes even more apparent when applying multiple conditions:", "Note: We used & (bitwise and) to filter for rows, where multiple conditions apply at the same time. We can use | (bitwise or) to filter for columns, where one of the conditions applies.", "loc \u2014 advanced conditional lookup with custom formulas", "It is also possible and quite easy to use customized functions as a condition and apply them to select columns.", "In the following example, we only select years that are cleanly divisible by three and continents that contain the word America. The case is contrived but makes a point.", "Instead of lambda (anonymous) functions, you could also define and use much more complicated functions. You could even (not that I recommend it) make API calls in a custom function and use the results of the calls to filter your dataframe.", "Now that we are comfortable with filtering and sorting the data front to back and vice versa, let\u2019s move to some more advanced analytical functionalities.", "Like the read functions, there are also a lot of analytical functions implemented in Pandas.", "I will highlight and explain the ones I use most frequently. However, and that\u2019s part of the beauty of it, even I will find new useful functions from time to time. So never start reading and exploring!", "Note: All functions can be applied column-wise, but also row-wise. The row-wise application makes very little sense in our example. However, frequently, you have data, where you want to compare different columns, in which case the row-wise application does make sense.", "Whenever we call the aforementioned functions, a default parameter axis=0 is passed (for column-wise application). However, we can override this parameter and pass axis=1 (for row-wise application).", "\u2460 max/minCalling max() on data, will return (wherever possible) the maximum for each column. min() does the exact opposite.", "\u2461 sumCalling sum() on data, will return (wherever possible) the sum for each column.", "Note: Sum will concatenate strings into one long string, which results in AsiaAsiaAsiaAsiaAsiaAsiaAsiaAsiaAsiaAsiaAsiaEu\u2026 for the Continent column.", "\u2462 mean/median/quantileCalling mean ,median , or quantile on data will return the mean or median, respectively.", "\u2463 idxmin/idxmaxCalling idxmax or idxmin on data will return the index of the row where the first minimum/maximum is found. However, it is only possible to call this on columns with some ordinality to them.", "That means, for example, Denmark has the highest Life Ladder , Qatar has the highest Log GDP per capita and New Zealand the highest value for Social support.", "idxmin works the same as idxmax .", "Recap: Don\u2019t forget that you can apply all these functions column-wise (axis=0) or row-wise (axis=1)", "You can also write custom functions and use them on your rows or columns. There are two kinds of custom functions:", "Named functions are user-defined functions. They are defined through the usage of the reserved keyword def like this:", "Here we did define a function called above_1000_below_10 and applied that to our data.", "The function initially checks, if the value is convertible to a number and if not will return \u2018no number column.\u2019 Otherwise, the function returns above_1000 if the value is above 1000 and below_10 if the value is below 10, else it returns mid.", "Lambda Functions:For me, lambda functions come up much frequently than named functions. In essence, those are short, throw-away functions for one-time use only. The name sounds clunky, but once you got the hang of it, they are quite convenient. For example, we could first split the continent column on space and then grab the last word of the results.", "Note: Both, named and lambda functions, we applied to individual columns as opposed to the entire dataframe. When applying a function to a particular column, the function goes row by row. When applying a function to a whole DataFrame, the function goes column by column and is applied to the entire column then and has to be written a little differently, like so:", "In this example, we also go row by row (as specified by the axis=1 ). We return the name of the row (which happens to be the index) when the Year of that row is smaller than 2015 or else the continent of that row. Tasks like this do come up when you have to do conditional data cleaning.", "Sometimes you want to add, subtract or otherwise combine two or multiple columns, which really could hardly be any simpler.", "Say we want to add Year and Life Ladder (contrived, I know, but let\u2019s do it for the sake of argument).", "Same with -, *, / and many more you could also do string operations, like this:", "Note: In the example above, we want to combine two columns as strings. To do this, we have to interpret data['Year'] as a string. We do that by using .astype(str) on the column. For the sake of brevity, we will not dive into types and type conversion in this article but discuss those topics in another article.", "So far, all the calculations we have applied were to the entire set, a row, or a column. However \u2014 and this is where it gets exciting \u2014 we can also group our data and calculate metrics for the individual groups.", "So let\u2019s say we want to know the highest Life Ladder value per country.", "Let\u2019s say we want per year the country with the highest Life Ladder.", "Or multi-level groups, let\u2019s say we want per continent/year combination the country with the highest Life Ladder.", "Like before we can use many standard functions or custom functions (named or unnamed) to, for example, return a random country per group:", "Note: groupby always returns ONE value per group. So unless you are grouping by a column that only contains unique values, the result will be a smaller (an aggregated) dataset.", "Sometimes you don\u2019t want only one value per group, but instead, want the value you calculated for the group for every row belonging to that group. You can do this the following way:", "Where we get the sum of all Life Ladder scores for a country. We could also do:", "To get the median per country. We can then calculate the difference to the value of every single year like this (as transform preserves the index):", "This article should give you quite some food for thought. Initially, I also wanted to include accessors, type manipulation and concatenating, merging and joining DataFrames, but given the length of the article, I moved those topics to part II of this series:", "See you then, and keep exploring!", "Ohh and if you enjoy reading stories like these and want to support me as a writer consider signing up to become a Medium member. It\u2019s $5 a month, giving you unlimited access to stories on Medium. If you sign up using my link, I\u2019ll even get some \ud83c\udf69.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "EX-Consultant turned tech geek! Business intelligence, marketing, advanced analytics, and machine learning. \ud83d\udc49 https://medium.com/@fabianbosler/membership \ud83d\udc48"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F8514f33f00f6&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-master-pandas-8514f33f00f6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-master-pandas-8514f33f00f6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-master-pandas-8514f33f00f6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-master-pandas-8514f33f00f6&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----8514f33f00f6--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8514f33f00f6--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@fabianbosler?source=post_page-----8514f33f00f6--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@fabianbosler?source=post_page-----8514f33f00f6--------------------------------", "anchor_text": "Fabian Bosler"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F1a2df7c24f4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-master-pandas-8514f33f00f6&user=Fabian+Bosler&userId=1a2df7c24f4f&source=post_page-1a2df7c24f4f----8514f33f00f6---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8514f33f00f6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-master-pandas-8514f33f00f6&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8514f33f00f6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-master-pandas-8514f33f00f6&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@itookthose?utm_source=medium&utm_medium=referral", "anchor_text": "Sid Balachandran"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://github.com/FBosler/you-datascientist", "anchor_text": "here"}, {"url": "https://towardsdatascience.com/get-started-with-python-e50dc8c96589", "anchor_text": "So you want to be a Data Scientist?What the *&%$ is stopping you? Here is how to get started!towardsdatascience.com"}, {"url": "https://unsplash.com/@vania_zhu1?utm_source=medium&utm_medium=referral", "anchor_text": "Ivan Zhukevich"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://worldhappiness.report/ed/2019/", "anchor_text": "World Happiness Report 2019"}, {"url": "https://github.com/FBosler/you-datascientist", "anchor_text": "GitHub Repo"}, {"url": "https://github.com/FBosler/you-datascientist/archive/master.zip", "anchor_text": "link"}, {"url": "https://unsplash.com/@markusspiske?utm_source=medium&utm_medium=referral", "anchor_text": "Markus Spiske"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://raw.githubusercontent.com/FBosler/you-datascientist/master/happiness_with_continent.csv'", "anchor_text": "https://raw.githubusercontent.com/FBosler/you-datascientist/master/happiness_with_continent.csv'"}, {"url": "https://towardsdatascience.com/replacing-sheets-with-python-f1608e58d2ca", "anchor_text": "Extracting data from various sheets with PythonOr how to learn to unify Google Sheets, Excel, and CSV files \u2014 a code-along guidetowardsdatascience.com"}, {"url": "https://docs.google.com/spreadsheets/d/1Wl3Ad_Y_izZM8J5UizPbAMuOZGpb2FzAZfbAJ-aU2Tc/edit#gid=779395260", "anchor_text": "here"}, {"url": "https://unsplash.com/@maxboettinger?utm_source=medium&utm_medium=referral", "anchor_text": "Max B\u00f6ttinger"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://pixabay.com/users/xresch-7410129/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=3041437", "anchor_text": "xresch"}, {"url": "https://pixabay.com/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=3041437", "anchor_text": "Pixabay"}, {"url": "https://towardsdatascience.com/learn-advanced-features-for-pythons-main-data-analysis-library-in-20-minutes-d0eedd90d086", "anchor_text": "Learn Advanced Features for Python\u2019s main data analysis library in 20 MinutesA code-along guide for Pandas\u2019 advanced functionalities.towardsdatascience.com"}, {"url": "https://medium.com/@fabianbosler/membership", "anchor_text": "Join Medium with my referral link - Fabian BoslerAs a Medium member, a portion of your membership fee goes to writers you read, and you get full access to every story\u2026medium.com"}, {"url": "https://medium.com/tag/data-science?source=post_page-----8514f33f00f6---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/python?source=post_page-----8514f33f00f6---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/programming?source=post_page-----8514f33f00f6---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-analysis?source=post_page-----8514f33f00f6---------------data_analysis-----------------", "anchor_text": "Data Analysis"}, {"url": "https://medium.com/tag/big-data?source=post_page-----8514f33f00f6---------------big_data-----------------", "anchor_text": "Big Data"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8514f33f00f6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-master-pandas-8514f33f00f6&user=Fabian+Bosler&userId=1a2df7c24f4f&source=-----8514f33f00f6---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8514f33f00f6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-master-pandas-8514f33f00f6&user=Fabian+Bosler&userId=1a2df7c24f4f&source=-----8514f33f00f6---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8514f33f00f6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-master-pandas-8514f33f00f6&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8514f33f00f6--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F8514f33f00f6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-master-pandas-8514f33f00f6&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----8514f33f00f6---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----8514f33f00f6--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----8514f33f00f6--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----8514f33f00f6--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----8514f33f00f6--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----8514f33f00f6--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----8514f33f00f6--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----8514f33f00f6--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----8514f33f00f6--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@fabianbosler?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@fabianbosler?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Fabian Bosler"}, {"url": "https://medium.com/@fabianbosler/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "2.3K Followers"}, {"url": "https://medium.com/@fabianbosler/membership", "anchor_text": "https://medium.com/@fabianbosler/membership"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F1a2df7c24f4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-master-pandas-8514f33f00f6&user=Fabian+Bosler&userId=1a2df7c24f4f&source=post_page-1a2df7c24f4f--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F85b3b5e26759&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-master-pandas-8514f33f00f6&newsletterV3=1a2df7c24f4f&newsletterV3Id=85b3b5e26759&user=Fabian+Bosler&userId=1a2df7c24f4f&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}