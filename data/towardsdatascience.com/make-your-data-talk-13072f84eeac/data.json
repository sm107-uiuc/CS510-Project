{"url": "https://towardsdatascience.com/make-your-data-talk-13072f84eeac", "time": 1682995603.32378, "path": "towardsdatascience.com/make-your-data-talk-13072f84eeac/", "webpage": {"metadata": {"title": "Make your Data Talk!. From 0 to Hero in visualization using\u2026 | by Puneet Grover | Towards Data Science", "h1": "Make your Data Talk!", "description": "What is data, nothing but numbers, if we are not visualizing it to get a better understanding of the world inside it. Though we can make some sense out of data as numbers, but magic happens when you"}, "outgoing_paragraph_urls": [{"url": "https://medium.com/u/e8ec6fa4d7d4?source=post_page-----13072f84eeac--------------------------------", "anchor_text": "Favio V\u00e1zquez", "paragraph_index": 0}, {"url": "https://github.com/PuneetGrov3r/MediumPosts/tree/master/Tackle", "anchor_text": "here", "paragraph_index": 2}, {"url": "https://en.wikipedia.org/wiki/Heavy-tailed_distribution", "anchor_text": "light tails", "paragraph_index": 12}, {"url": "https://seaborn.pydata.org/examples/hexbin_marginals.html", "anchor_text": "Joint Plots", "paragraph_index": 38}, {"url": "https://matplotlib.org/users/colormaps.html", "anchor_text": "here", "paragraph_index": 51}, {"url": "https://seaborn.pydata.org/tutorial/color_palettes.html", "anchor_text": "here", "paragraph_index": 51}, {"url": "http://www.storytellingwithdata.com/book", "anchor_text": "Storytelling with data", "paragraph_index": 58}, {"url": "https://matplotlib.org/users/event_handling.html", "anchor_text": "etc", "paragraph_index": 63}, {"url": "https://matplotlib.org/basemap/users/installing.html", "anchor_text": "here", "paragraph_index": 69}, {"url": "https://www.researchgate.net/post/How_to_install_Basemap_in_Python3", "anchor_text": "here", "paragraph_index": 69}], "all_paragraphs": ["Edit: Favio V\u00e1zquez gave +4 to this post and replied", "\u201cAwesome article! Congrats :)\u201d \u2014 Favio V\u00e1zquez", "This is one of the post from my posts from Tackle category, which can be found on my github repo here. All posts from this category:", "What is data, nothing but numbers. If we are not visualizing it to get a better understanding of the world inside it, we are missing out on lots of things. I.e. we can make some sense out of data as numbers, but magic happens when you try to visualize it. It makes more sense and it suddenly it becomes more perceivable.", "We are sensual beings, we perceive things around us through our senses. Sight, Sound, Smell, Taste and Touch. We can, to some extent, distinguish things around us according to our senses. For data, Sound and Sight seems to be the best options to represent it as it can be easily transformed. And we mostly use Sight as a medium to perceive data because probably we are accustomed to differentiating different object through this sense and also, though in lower level, we are also are accustomed to perceiving things in higher dimensions through this sense which comes in handy in multi variate data sets.", "In this post we look into two of the most popular libraries for visualization of data in Python and use them to make data talk, through visualization:", "Matplotlib was made keeping MATLAB\u2019s plotting style in mind, though it also has an object oriented interface.", "When using this interface, methods will automatically select current figure and axes to show the plot in. It will be so (i.e. this current figure will be selected again and again for all your method calls) until you use pyplot.show method or until you execute your cell in IPython.", "2. Object Oriented interface: You can use it like this:", "It is low level library and you have total control over your plot.", "Seaborn is a higher level library for visualization, made on top of matplotlib. It is mainly used to make quick and attractive plots without much hassle. Though seaborn tries to give some control over your plots in a fancy way, but still you cannot get everything you desire from it. For that you will have to use matplotlib\u2019s functionality, which you can use with seaborn too (as it is built on matplotlib).", "Distribution plots (or Probability plots) tells us how one variable is distributed. It gives us probability of finding a variable in particular range. I.e. if we were to randomly select a number from total range of a variable, it gives us probabilities of this variable being in different ranges.", "Distribution plots should be Normally distributed, for better results. This is one of the assumptions of all Linear models, i.e. Normality. Normal distribution looks like a medium hump on middle with light tails.", "(: Tips #1 :) >1) You can get away with using matplotlib.pyplot's function's provided parameters for your plots, in most cases. Do look into function's parameters and their description.2) All matplotlib's functions and even seaborn's functions returns all components of your plot in a dictionary, list or object. From there also you can change any property of your components (in matplotlib\u2019s language Artists).", "Box Plots and Violin Plots are in Categorical Section.", "(: Tips #2 :) < >3) For giving some useful information with your plot or drawing attention to something in plot you can mostly get away with either plt.text() or plt.annotate().", "4) Most necessary parameter for a plot is\u2018label\u2019, and most necessary methods for a plot are \u2018plt.xlabel\u2019, \u2018plt.ylabel\u2019, \u2018plt.title\u2019, and \u2018plt.legend\u2019.", "A] To effectively convey your message you should remove all unwanted distractions from your plot like right and top axis, and any other unwanted structure in your plot.", "Relational plots are very useful in getting relationships between two or more variables. These relationships can help us understand our data more, and probably help us make new variables from existing variables.", "This is an important step in Data Exploration and Feature Engineering.", "c) 2D-Histograms, Hex Plots and Contour Plots", "Line Plots are useful for checking for linear relationship, and even quadratic, exponential and all such relationships, between two variables.", "5) You can give an aesthetic look to your plot just by using parameters \u2018color\u2019 / \u2018c\u2019, \u2018alpha\u2019 and \u2018edgecolors\u2019 / \u2018edgecolor\u2019.", "6) Seaborn has a parameter \u2018hue\u2019 in most of its plotting methods, which you can use to show contrast between different classes of a categorical variable in those plots.", "B] You should use lighter color for sub parts of plot which you do want in plot but they are not the highlight of the point you want to make.", "You can also color code them manually like this:", "Not every relationship between two variables is linear, actually just a few are. These variables too have some random component in it which makes them almost linear, and other cases have a totally different relationship which we would have had hard time displaying with linear plots.", "Also, if we have lots of data points, scatter plot can come in handy to check if most data points are concentrated in one region or not, are there any outliers w.r.t. these two or three variables, etc.", "We can plot scatter plot for two or three and even four variables if we color code the fourth variable in 3D plot.", "7) You can set size of your plot(s) in two ways. Either you can import figure from matplotlib and use method like: \u2018figure(figsize=(width, height))\u2019 {it will set this figure size for current figure} or you can directly specify figsize when using Object Oriented interface like this: figure, plots = plt.subplots(rows, cols, figsize=(x,y)).", "C] You should be concise and to the point when you are trying to get a message across with data.", "8) In .text and .annotate methods there is a parameter bbox which takes a dictionary to set properties of box around the text. For bbox, you can get away with pad, edgecolor, facecolor and alpha for almost all cases.", "9) In .annotate method there is a parameter for setting properties of an arrow, which you will be able to set if you have set xytext parameter, and it is arrowprops. It takes a dictionary as an argument, and you can get away with arrowstyle andcolor.", "10) You can use use matplotlib's fill_between or fill_betweenx to fill with a color between two curves. This can come in handy to highlight certain regions of a curve.", "D] You should take your time thinking about how you should plot your data and which particular plot will get your message across the most.", "c) 2D-Histograms, Hex Plots and Contour Plots: ^", "2D-Histograms and Hex Plots can be used to check relative density of data at particular position.", "Contour plots can be used to plot 3D data in 2D, or plot 4D data in 3D. A contour line (or color strip in filled contour) tells us location where function has constant value. It makes us familiar with the whole landscape of variables used in plotting. For example it can be used in plotting cost function w.r.t. different theta\u2019s in Deep Learning. But to make it you need a lot of data, to be accurate. As for plotting the whole landscape you will need data for all points in that landscape. And if you have a function for that landscape you can easily make these plots by calculating values manually.", "But there is no separate Hex plot/2D-Hist plot method in seaborn, you can use jointplot method\u2019s kind parameter for making a hex plot. For more info look into Joint Plots on seaborn.", "11) A colorbar needs a Mappable object. Plots such as Contour, Scatter and hist2d gives them by default. There you can simply call plt.colorbar() and it will show a colorbar beside your plot. For other plots you can manually make a colorbar if you want to. [One example in \u2018Hist\u2019 section of Jupyter Notebook provided.]", "E] Always try to choose a simple plot which can be easily understood by the masses.", "Contour Plot: A contour plot is a way of visualizing 3D data on a 2D plot. In matplotlib there are two methods available, namely .contour and .contourf. The first one makes line contours and the second one makes filled contours. You can either pass an 2D matrix of z-values or pass in two 2D arrays X, Y for x-values and y-values and an 2D array for all corresponding z-values.", "seaborn provides a method pairplot with which you can plot all possible relational plots in one go. It can be used for quick view into relationship between all variables in your data, and also distribution of every variable.", "Categorical plots are also necessary in Data Exploration step, as they tells us about how different classes of a variable are distributed in dataset. If we have sufficient data, we can make conclusions off these plots for different classes of that variable.", "I have added Box Plot and Violin Plot here because of seaborn. In seaborn there are some parameters which you can use to use these methods with different categorical variables.", "Bar charts can be used to contrast between categories where their heights represent some value specific to that category.", "12) If you have patch or object whose property you want to change, given in output of every matplotlib and seaborn functions, you can either change it by using .set function passing property name as string and property value to it, or you can directly use set function for that property like set_color, set_lw, etc.", "F] There are nearly 8% men who are colorblind, nearly 1 in 10 and 0.5% of women. But still you should look out for them. Orange-Blue contrasts works for most of them.", "Box plot is a statistical version of distribution plot. It gives us range of different quartiles, mean, and extremas. Some possible use-case can be that with it you can identify variables in which you can find outliers if some points are way out of box-whisker\u2019s range, or you can check for skew in distribution by relative placement of middle box in plot.", "13) You can change x-limit, y-limit of your Axes by using functions plt.xlim, plt.ylim, ax.set_xlim, ax.set_ylim. You can also zoom in and out of your plot by using plt.margings or ax.margins as plt.margins(x=2, y=-3).", "14) You can use different styles for your plots from plt.style.available to give a different look to your plot, and activate them as plt.style.use(stylename). Most used styles are 'fivethirtyeight' and ggplot.", "15) seaborn and matplotlib has many colormaps available which you can use to set color in plots for continuous variables. You can look for them here and here.", "G] Highlight only the components of plot where you want your audience\u2019s attention, and those parts only.", "Violin plot are extension of Box plot. It also has indicators of mean, extremas, and possibly different quartiles too. In addition to these it also shows probability distribution of the variable, on both sides.", "16) You can draw vertical or horizontal lines inn plot by using functions plt.axhline, plt.axvline, or ax.axline, ax.axvline.", "H] Be a good storyteller, and convey your findings through a story in a way that is easily understood by masses and gets the message across.", "You can make as many plots as you need either by using plt.subplots method or manually add Axes's to figure by specifying their box coordinates, or by using plt.GridSpec() method. I.e.", "17) seaborn has its own objects for grids/multiplots namely Facet Grid, Pair Grid and Joint Grid. They have some methods like .map, .map_diag, .map_upper, .map_lower etc that you can look into to draw plots in those locations only in 2D grid.", "I] Read the book \u201cStorytelling with data\u201d by Cole N. Knaflic. Its a great read covering every aspect with examples by a well known Data Communicator.", "By default Interactive plotting in matplotlib is turned off. That means that plot will be shown to you only after you have given your final plt command or you used a command that triggers plt.draw like plt.show(). You can turn on interactive plotting by ion() function and turn it off by ioff() function. By turning it on every plt function will trigger plt.draw.", "In modern Jupyter Notebook/IPython world there is one magic command to turn on Interactive/Animation feature in these notebooks, and that is %matplotlib notebook and to turn it off you can use magic command %matplotlib inline before using any of your plt functions.", "matplotlib works with a number of user interface toolkits (wxpython, tkinter, qt4, gtk, and macosx) to show interactive plots. For these interactive plots matplotlib uses event's and event handler/manager (fig.canvas.mpl_connect) to capture some event by mouse or keyboard.", "This event manager is used to connect some in-built event-type-looker to a custom function which will be evoked if that particular type of event happens.", "There are many events available like \u2018 button_press_event\u2019, \u2018button_release_event\u2019, \u2018 draw_event\u2019, \u2018 resize_event\u2019, \u2018 figure_enter_event\u2019, etc. which you can connect to like fig.canvas.mpl_connect(event_name, func).", "For above example if event_name event happens, all related data to that event will be sent to your function func where you should have coded something to use that data provided. This event data contains information like x and y position, x and y data coordinates, weather click was made inside Axes or not, etc. if they are relevant for your event type event_name.", "3D plots of matplotlib are not in usual lib. It is in mpl_toolkits as matplotlib started with only 2D plots and later on it added 3D plots in mpl_toolkits. You can import it as from mpl_toolkits import mplot3d.", "After importing you can make any Axes 3D axes by passing projection='3d' to any Axes initializer/maker function.", "18) You can look at 3D plots interactively by running %matplotlib notebook before your plotting functions.", "There are many 3D plots available like line, scatter, wireframe, surface plot, contour, bar etc and even subplot is also available. You can also write on these plots with text function.", "To plot Geographic plots with matplotlib you will have to install another package by matplotlib called Basemap. It is not easy to install, look for official instructions here, or you can use conda command if you have Anaconda installed: conda install -c conda-forge basemap, or if these too doesn\u2019t work for you look here (specifically last comment).", "You can actually use most of matplotlib\u2019s original functions here like text, plot, annotate, bar, contour, hexbin and even 3D plots on these projections.", "And its also has some functions related to geographic plots too like streamplot, quiver etc.", "Word Clouds are used in Natural Language Processing (NLP), showing words having most frequencies, having size depending on their frequency, within some boundary which can be a cloud or not. It plots relative frequency difference between words in data as relative size of their font. It is also easy, most of the times, to get words with highest frequencies just by looking at Word Clouds. But still it is an interesting way to convey data as it is well perceived and easily understood.", "There is a python package wordcloud which you can install using pip as pip install wordcloud.", "You can first set some properties of WordCloud (like setting a cloud shape using mask parameter, specifying max_words, specifying stopwords etc.) and then generate cloud with specified properties for given text data.", "You can easily make animations using matplotlib using one of these two classes:", "19) Always keep a reference to instance object Animation, otherwise it will be garbage collected.", "20) To save an animation to disk use one of Animation.save or Animation.to_html5_video methods.", "21) You can speed up/optimize your animation\u2019s drawing by using parameter blit set to True. But if blit=True you will have to return an iterable of artists to be redrawn by init_func.", "In FuncAnimation you need to pass atleast current fig and a function which will be called for each frame. Other than that you should also look into parameters frames (iterable, int, generator , None; source of data to pass to func and each frame of animation), init_func (function used to draw a clear frame, otherwise first frame from frames is used), and blit (weather to use blitting or not).", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F13072f84eeac&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-data-talk-13072f84eeac&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-data-talk-13072f84eeac&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-data-talk-13072f84eeac&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-data-talk-13072f84eeac&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----13072f84eeac--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----13072f84eeac--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://techelfpuneet.medium.com/?source=post_page-----13072f84eeac--------------------------------", "anchor_text": ""}, {"url": "https://techelfpuneet.medium.com/?source=post_page-----13072f84eeac--------------------------------", "anchor_text": "Puneet Grover"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdfddda6ba487&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-data-talk-13072f84eeac&user=Puneet+Grover&userId=dfddda6ba487&source=post_page-dfddda6ba487----13072f84eeac---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F13072f84eeac&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-data-talk-13072f84eeac&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F13072f84eeac&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-data-talk-13072f84eeac&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@wwwynand?utm_source=medium&utm_medium=referral", "anchor_text": "Wynand van Poortvliet"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://medium.com/u/e8ec6fa4d7d4?source=post_page-----13072f84eeac--------------------------------", "anchor_text": "Favio V\u00e1zquez"}, {"url": "https://twitter.com/FavioVaz/status/1113471057619505152", "anchor_text": "Twitter"}, {"url": "https://medium.com/u/e8ec6fa4d7d4?source=post_page-----13072f84eeac--------------------------------", "anchor_text": "Favio V\u00e1zquez"}, {"url": "https://github.com/PuneetGrov3r/MediumPosts/tree/master/Tackle", "anchor_text": "here"}, {"url": "https://towardsdatascience.com/how-to-learn-from-bigdata-files-on-low-memory-incremental-learning-d377282d38ff", "anchor_text": "How to learn from BigData Files on low memory \u2014 Incremental Learning"}, {"url": "https://medium.com/@grover.puneet1995/make-your-data-talk-13072f84eeac", "anchor_text": "Make your Data Talk!- From 0 to Hero in visualization with matplotlib and seaborn"}, {"url": "https://nbviewer.jupyter.org/github/PuneetGrov3r/MediumPosts/blob/master/Tackle/HowToVisualize.ipynb", "anchor_text": "HowToVisualize"}, {"url": "https://unsplash.com/@danielleone?utm_source=medium&utm_medium=referral", "anchor_text": "Daniel Leone"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://en.wikipedia.org/wiki/Heavy-tailed_distribution", "anchor_text": "light tails"}, {"url": "https://github.com/PuneetGrov3r/SWMat", "anchor_text": "Storytelling with Matplotlib"}, {"url": "https://github.com/PuneetGrov3r/SWMat", "anchor_text": "Storytelling With Matplotlib (SWMat)"}, {"url": "https://unsplash.com/@vincentvanzalinge?utm_source=medium&utm_medium=referral", "anchor_text": "Vincent van Zalinge"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://github.com/PuneetGrov3r/SWMat", "anchor_text": "Storytelling with Matplotlib"}, {"url": "https://github.com/PuneetGrov3r/SWMat", "anchor_text": "Storytelling With Matplotlib (SWMat)"}, {"url": "https://github.com/PuneetGrov3r/SWMat", "anchor_text": "Storytelling with Matplotlib"}, {"url": "https://github.com/PuneetGrov3r/SWMat", "anchor_text": "Storytelling With Matplotlib (SWMat)"}, {"url": "https://seaborn.pydata.org/examples/hexbin_marginals.html", "anchor_text": "Joint Plots"}, {"url": "https://unsplash.com/@sharonmccutcheon?utm_source=medium&utm_medium=referral", "anchor_text": "Sharon McCutcheon"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://github.com/PuneetGrov3r/SWMat", "anchor_text": "Storytelling with Matplotlib"}, {"url": "https://github.com/PuneetGrov3r/SWMat", "anchor_text": "Storytelling With Matplotlib (SWMat)"}, {"url": "https://matplotlib.org/users/colormaps.html", "anchor_text": "here"}, {"url": "https://seaborn.pydata.org/tutorial/color_palettes.html", "anchor_text": "here"}, {"url": "https://github.com/PuneetGrov3r/SWMat", "anchor_text": "Storytelling with Matplotlib"}, {"url": "https://github.com/PuneetGrov3r/SWMat", "anchor_text": "Storytelling With Matplotlib (SWMat)"}, {"url": "https://github.com/PuneetGrov3r/SWMat", "anchor_text": "Storytelling with Matplotlib"}, {"url": "https://github.com/PuneetGrov3r/SWMat", "anchor_text": "Storytelling With Matplotlib (SWMat)"}, {"url": "https://unsplash.com/@ripato?utm_source=medium&utm_medium=referral", "anchor_text": "Ricardo Gomez Angel"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "http://www.storytellingwithdata.com/book", "anchor_text": "Storytelling with data"}, {"url": "https://unsplash.com/@ripato?utm_source=medium&utm_medium=referral", "anchor_text": "Ricardo Gomez Angel"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://matplotlib.org/users/event_handling.html", "anchor_text": "etc"}, {"url": "https://unsplash.com/@rawpixel?utm_source=medium&utm_medium=referral", "anchor_text": "rawpixel"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://matplotlib.org/basemap/users/installing.html", "anchor_text": "here"}, {"url": "https://www.researchgate.net/post/How_to_install_Basemap_in_Python3", "anchor_text": "here"}, {"url": "http://www.storytellingwithdata.com/book", "anchor_text": "Storytelling With Data \u2014 Cole N. Knaflic"}, {"url": "https://jakevdp.github.io/PythonDataScienceHandbook/04.00-introduction-to-matplotlib.html", "anchor_text": "Python Data Science HandBook \u2014 Jake VanderPlas"}, {"url": "http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-as-interactive-javascript-widgets/", "anchor_text": "Embedding Matplotlib Animations in Jupyter as Interactive JavaScript Widgets \u2014 Louis Tiao"}, {"url": "https://www.datacamp.com/community/tutorials/wordcloud-python", "anchor_text": "Generating WordClouds in Python \u2014 Duong Vu"}, {"url": "https://basemaptutorial.readthedocs.io", "anchor_text": "Basemap Tutorial"}, {"url": "http://www.storytellingwithdata.com/book", "anchor_text": "Storytelling With Data \u2014 Cole N. Knaflic"}, {"url": "https://jakevdp.github.io/PythonDataScienceHandbook/04.00-introduction-to-matplotlib.html", "anchor_text": "Python Data Science HandBook \u2014 Jake VanderPlas"}, {"url": "http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-as-interactive-javascript-widgets/", "anchor_text": "Embedding Matplotlib Animations in Jupyter as Interactive JavaScript Widgets \u2014 Louis Tiao"}, {"url": "https://www.datacamp.com/community/tutorials/wordcloud-python", "anchor_text": "Generating WordClouds in Python \u2014 Duong Vu"}, {"url": "https://www.datacamp.com/community/tutorials/matplotlib-tutorial-python", "anchor_text": "Matplotlib Tutorial: Python Plotting \u2014 Karlijn Willems"}, {"url": "https://basemaptutorial.readthedocs.io", "anchor_text": "Basemap Tutorial"}, {"url": "https://matplotlib.org/contents.html", "anchor_text": "Matplotlib Docs"}, {"url": "https://matplotlib.org/tutorials/toolkits/mplot3d.html", "anchor_text": "Matplotlib mplot3d Toolkit"}, {"url": "https://matplotlib.org/users/interactive.html", "anchor_text": "Matplotlib \u2014 Interactive"}, {"url": "https://matplotlib.org/api/animation_api.html", "anchor_text": "Matplotlib \u2014 Animations"}, {"url": "https://seaborn.pydata.org/api.html", "anchor_text": "Seaborn Docs"}, {"url": "https://medium.com/tag/data-science?source=post_page-----13072f84eeac---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/visualization?source=post_page-----13072f84eeac---------------visualization-----------------", "anchor_text": "Visualization"}, {"url": "https://medium.com/tag/storytelling?source=post_page-----13072f84eeac---------------storytelling-----------------", "anchor_text": "Storytelling"}, {"url": "https://medium.com/tag/data?source=post_page-----13072f84eeac---------------data-----------------", "anchor_text": "Data"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----13072f84eeac---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "http://creativecommons.org/licenses/by/4.0/", "anchor_text": "Some rights reserved"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F13072f84eeac&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-data-talk-13072f84eeac&user=Puneet+Grover&userId=dfddda6ba487&source=-----13072f84eeac---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F13072f84eeac&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-data-talk-13072f84eeac&user=Puneet+Grover&userId=dfddda6ba487&source=-----13072f84eeac---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F13072f84eeac&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-data-talk-13072f84eeac&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----13072f84eeac--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F13072f84eeac&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-data-talk-13072f84eeac&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----13072f84eeac---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----13072f84eeac--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----13072f84eeac--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----13072f84eeac--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----13072f84eeac--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----13072f84eeac--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----13072f84eeac--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----13072f84eeac--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----13072f84eeac--------------------------------", "anchor_text": ""}, {"url": "https://techelfpuneet.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://techelfpuneet.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Puneet Grover"}, {"url": "https://techelfpuneet.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "408 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdfddda6ba487&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-data-talk-13072f84eeac&user=Puneet+Grover&userId=dfddda6ba487&source=post_page-dfddda6ba487--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F8beb028904ce&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-data-talk-13072f84eeac&newsletterV3=dfddda6ba487&newsletterV3Id=8beb028904ce&user=Puneet+Grover&userId=dfddda6ba487&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}