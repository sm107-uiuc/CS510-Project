{"url": "https://towardsdatascience.com/build-a-super-simple-gan-in-pytorch-54ba349920e4", "time": 1683004604.726345, "path": "towardsdatascience.com/build-a-super-simple-gan-in-pytorch-54ba349920e4/", "webpage": {"metadata": {"title": "Build a Super Simple GAN in PyTorch | by Nicolas Bertagnolli | Towards Data Science", "h1": "Build a Super Simple GAN in PyTorch", "description": "Generative Adversarial Networks (GANs) are a model framework where two models are trained together: one learns to generate synthetic data from the same distribution as the training set and the other\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/nbertagnolli/pytorch-simple-gan", "anchor_text": "here", "paragraph_index": 0}, {"url": "https://junyanz.github.io/CycleGAN/", "anchor_text": "horses to zebras", "paragraph_index": 2}, {"url": "https://arxiv.org/abs/1511.06434", "anchor_text": "DCGAN", "paragraph_index": 20}, {"url": "https://github.com/soumith/ganhacks", "anchor_text": "here", "paragraph_index": 20}, {"url": "https://www.linkedin.com/in/nicolas-bertagnolli-058aba81/", "anchor_text": "https://www.linkedin.com/in/nicolas-bertagnolli-058aba81/", "paragraph_index": 22}], "all_paragraphs": ["Generative Adversarial Networks (GANs) are a model framework where two models are trained together: one learns to generate synthetic data from the same distribution as the training set and the other learns to distinguish true data from generated data. When I was first learning about them, I remember being kind of overwhelmed with how to construct the joint training. I haven\u2019t seen a tutorial yet that focuses on building a trivial GAN so I\u2019m going to try and do that here. No image generation, no fancy deep fried conv nets. We are going to train a model capable of learning to generate even numbers in about 50 lines of Python code. All of the code for this project can be found in the github repository here.", "GANs are composed of two models trained in unison. The first model, the generator, takes in some random input and tries to output something that looks like our training data. The second model, the discriminator, takes in training data and generated data and tries to distinguish the fake generated data from the real training data. What makes this framework interesting is that these models are trained together. As the discriminator gets better at recognizing fake images this learning is passed to the generator and the generator gets better at generating fake images. To overuse an analogy the generator is to the discriminator as a counterfeiter is to FBI investigators. One tries to forge data, the other tries to distinguish forgeries from the real deal.", "This framework has produced a ton of super interesting results in the last few years from translating horses to zebras, to creating deep fakes, to imagining up wholly new images. In this tutorial we aren\u2019t going to do anything as interesting as those but this should give you all of the background you need in order to successfully implement a GAN of your own from scratch : ). Let\u2019s get started.", "Imagine that we have a data set of all even numbers between zero and 128. This is a subset of a much bigger distribution of data, the integers, with some specific properties, much like how human faces are a subset of all images of living things. Our generator is going to take in random noise as an integer in that same range and learn to produce only even numbers.", "Before getting into the actual model let\u2019s build out our data set. We are going to represent each integer as it\u2019s unsigned seven bit binary representation. So the number 56 is 0111000. We do this because:", "To start let\u2019s write a function which converts any positive integer to its binary form as a list.", "With this we can make a function which will generate random training data for us on the fly.", "This function will produce two outputs the first is a list of ones representing that this data is even and comes from our true distribution. The second output is a random even number in binary list form. That\u2019s all we need to start building and training our models!", "Building the Generator and Discriminator is a snap! Let\u2019s start with the Generator. We need something capable of mapping random seven digit binary input to seven digit binary input that is even. The simplest possible thing here is a single seven neuron layer.", "If we were building a GAN to do something more complicated on say images we would probably train it using random noise generated from a normal distribution and gradually upsample and reshape it until it\u2019s the same size as the data we are trying to copy. Since our example is so simple, a single linear layer with a logistic (sigmoid) activation should be enough to map ones and zeros in seven positions to other ones and zeros in seven positions.", "The Discriminator is no more complicated than the Generator. Here we need a model to take in a seven digit binary input and output whether or not it is from our real data distribution (is even) or not (is odd or not a number). To accomplish this we use a single neuron model (logistic regression) with a logistic activation (Sigmoid).", "That\u2019s it, we\u2019ve built the two models which we will train in unison. Now for the tricky part of GAN training, the training. We need to link these models up in a way that can propagate the gradients around correctly.", "Training GANs can seem a bit confusing at first because we need to update two models with every bit of input and we need to be careful about how we do that. So to break it down, we pass two batches of data to our model at every training step. One batch is random noise which will cause the generator to create some generated data, and the second batch is composed solely of data from our true distribution. Throughout the training description, I will reference line numbers in the final training code gist below, not the Github repository.", "Let\u2019s start by training the generator. This consists of:", "Notice how in step four we use true labels instead of fake labels for calculating the loss. This is because we are training the generator. The generator should be trying to fool the discriminator so when the discriminator makes a mistake and says the generated output is real (predicts 1) then the gradients should be small, when the discriminator acts correctly and predicts that the output is generated (predicts 0) the gradients should be big. This is why we only propagate the gradients through the generator at this step, because we inverted the labels. If we trained the entire model like this either the generator would learn the wrong thing or the discriminator would.", "Now it\u2019s time to update the weights in our discriminator. We do that in a few steps:", "The discriminator is trying to learn to distinguish real data from \u201cfake\u201d generated data. The labels while training the discriminator need to represent that, i.e. one when our data comes from the real data set and zero when it is generated by our generator. We pass in those two batches in steps (1) and (2) above and then average the loss from the two batches. It\u2019s important to note that when passing in the generated data we want to detach the gradients. We do this because we are not training the generator we are just focused on the discriminator. Once all of that is done we backpropagate the gradients in only the discriminator and we are done.", "That\u2019s it! We\u2019ve built our entire GAN. Wrap that in a training loop with some gradient zeroing at each step and we\u2019re ready to roll. If we look at the output of our generator at various training steps we can see it converging to only creating even numbers which is exactly what we wanted!", "At step zero we have 7/10 odd numbers in our sample and at step 200 10/10 of our samples are even numbers! That\u2019s a successful generator and it only took ~50 lines of real Python code!", "As you\u2019ve probably guessed there are some other tricks for training a GAN which generates non trivial output. Some immediate things to try if you want to make this model work on real data like images are:", "As a good next step try and implement the DCGAN architecture. This code will get you 90% of the way there. Once you\u2019ve done that and made some fun images like those in the introduction, try and improve them by playing around with training hyper parameters. A good list of things to try when training real GANs can be found here.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "CAIO at mpathic. I\u2019m working on applying modern NLP techniques to improve communication. Let\u2019s connect https://www.linkedin.com/in/nicolas-bertagnolli-058aba81/"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F54ba349920e4&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-super-simple-gan-in-pytorch-54ba349920e4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-super-simple-gan-in-pytorch-54ba349920e4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-super-simple-gan-in-pytorch-54ba349920e4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-super-simple-gan-in-pytorch-54ba349920e4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----54ba349920e4--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----54ba349920e4--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://nbertagnolli.medium.com/?source=post_page-----54ba349920e4--------------------------------", "anchor_text": ""}, {"url": "https://nbertagnolli.medium.com/?source=post_page-----54ba349920e4--------------------------------", "anchor_text": "Nicolas Bertagnolli"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa998d10e34d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-super-simple-gan-in-pytorch-54ba349920e4&user=Nicolas+Bertagnolli&userId=a998d10e34d8&source=post_page-a998d10e34d8----54ba349920e4---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F54ba349920e4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-super-simple-gan-in-pytorch-54ba349920e4&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F54ba349920e4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-super-simple-gan-in-pytorch-54ba349920e4&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://teespring.com/ganpple?tsmac=store&tsmic=deepproducts&pid=226&cid=5860", "anchor_text": "Botanical drawings from a GAN"}, {"url": "https://usdawatercolors.nal.usda.gov/pom/home.xhtml", "anchor_text": "USDA pomological watercolor collection"}, {"url": "https://github.com/nbertagnolli/pytorch-simple-gan", "anchor_text": "here"}, {"url": "https://junyanz.github.io/CycleGAN/", "anchor_text": "horses to zebras"}, {"url": "https://arxiv.org/abs/1511.06434", "anchor_text": "DCGAN"}, {"url": "https://github.com/soumith/ganhacks", "anchor_text": "here"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----54ba349920e4---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----54ba349920e4---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/deep-learning?source=post_page-----54ba349920e4---------------deep_learning-----------------", "anchor_text": "Deep Learning"}, {"url": "https://medium.com/tag/python?source=post_page-----54ba349920e4---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/gans?source=post_page-----54ba349920e4---------------gans-----------------", "anchor_text": "Gans"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F54ba349920e4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-super-simple-gan-in-pytorch-54ba349920e4&user=Nicolas+Bertagnolli&userId=a998d10e34d8&source=-----54ba349920e4---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F54ba349920e4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-super-simple-gan-in-pytorch-54ba349920e4&user=Nicolas+Bertagnolli&userId=a998d10e34d8&source=-----54ba349920e4---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F54ba349920e4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-super-simple-gan-in-pytorch-54ba349920e4&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----54ba349920e4--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F54ba349920e4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-super-simple-gan-in-pytorch-54ba349920e4&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----54ba349920e4---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----54ba349920e4--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----54ba349920e4--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----54ba349920e4--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----54ba349920e4--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----54ba349920e4--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----54ba349920e4--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----54ba349920e4--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----54ba349920e4--------------------------------", "anchor_text": ""}, {"url": "https://nbertagnolli.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://nbertagnolli.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Nicolas Bertagnolli"}, {"url": "https://nbertagnolli.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "286 Followers"}, {"url": "https://www.linkedin.com/in/nicolas-bertagnolli-058aba81/", "anchor_text": "https://www.linkedin.com/in/nicolas-bertagnolli-058aba81/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa998d10e34d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-super-simple-gan-in-pytorch-54ba349920e4&user=Nicolas+Bertagnolli&userId=a998d10e34d8&source=post_page-a998d10e34d8--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F1205c8722589&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-super-simple-gan-in-pytorch-54ba349920e4&newsletterV3=a998d10e34d8&newsletterV3Id=1205c8722589&user=Nicolas+Bertagnolli&userId=a998d10e34d8&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}