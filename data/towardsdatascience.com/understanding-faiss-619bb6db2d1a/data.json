{"url": "https://towardsdatascience.com/understanding-faiss-619bb6db2d1a", "time": 1682996295.1285372, "path": "towardsdatascience.com/understanding-faiss-619bb6db2d1a/", "webpage": {"metadata": {"title": "Understanding FAISS. \u2026.And the world of Similarity Searching | by Vedashree Patil | Towards Data Science", "h1": "Understanding FAISS", "description": "A few weeks back, I stumbled upon FAISS \u2014 Facebook\u2019s library for similarity search for very large datasets. My interest piqued, and a few hours of digging around on the internet led me to a treasure\u2026"}, "outgoing_paragraph_urls": [{"url": "https://medium.com/dotstar/understanding-faiss-part-2-79d90b1e5388", "anchor_text": "subsequent post", "paragraph_index": 0}, {"url": "https://github.com/facebookresearch/faiss/blob/master/INSTALL.md", "anchor_text": "https://github.com/facebookresearch/faiss/blob/master/INSTALL.md", "paragraph_index": 16}, {"url": "https://medium.com/dotstar/understanding-faiss-part-2-79d90b1e5388", "anchor_text": "next pos", "paragraph_index": 29}], "all_paragraphs": ["A few weeks back, I stumbled upon FAISS \u2014 Facebook\u2019s library for similarity search for very large datasets. My interest piqued, and a few hours of digging around on the internet led me to a treasure trove of knowledge. In this post, I hope to pen down (or rather type down) few basic concepts associated with the library. And in my subsequent post, I will dig a little deeper and explore some more advanced concepts.", "Usually in similarity searching, there is often a query record that is compared against a stored database of records (documents or images etc). The main aim is to retrieve a set of database records that are similar to the query record. So, if you have a picture of a dog, a similarity search should give you a list of pictures with dogs (not rainbows!) in them.", "When Machine learning comes into picture, the database corresponds to a collection of vectors. Vectors can be seen as high dimensional representations of the input data generated by machine learning algorithms. Similarity searching in this context means searching for similar vectors for a given query vector based on some similarity or distance measure.", "A naive way for searching based on similarity is to compare the query vector with every other vector in the database. But what if the database has more than a million vectors? Enter FAISS\u2026.", "FAISS is a C++ library (with python bindings of course!) that assures faster similarity searching when the number of vectors may go up to millions or billions.", "At its very heart lies the index. Mind you, the index is everywhere!(albeit in different forms and names). In this post, I\u2019ll elaborate on one: \u201cthe inverted file index \u201d or \u201cIVF\u201d", "Let me tell you a little story (Bear with me over here, I promise its important\u2026)", "The queen of Someland had just conquered a new territory and discovered that the natives of this land were segregated in three different tribes who simply couldn\u2019t tolerate each other. So, to avoid feuds, she decided to build three separate cities for each of the tribes. Interestingly, each tribe had a distinctive set of skills that they practised. This helped the queen identify which tribe a person belonged to. The Greens, it seemed, were born with a green thumb and spent most of their time tending to plants. The Tinks were the smart, analytical bunch and mostly comprised of architects, builders and scientists. And finally there were the creative Whims, who were known for their proficiency in the fine arts. They were mostly poets, dancers or artists.", "The cities were built and the tribe chiefs were appointed as the representatives for their respective tribes. For administrative purposes, the queen\u2019s ministers maintained a \u201cmaster-book\u201d that recorded the name of the tribe chief along with names of the citizens for each city.", "One day, a group of travellers arrived in the kingdom and asked for refuge. The queen now had a problem. She had to find suitable volunteers who would agree to accommodate the travellers in their homes. (Apparently there were no inns in the kingdom). She knew that the citizens were quite guarded and only warmed up to people who shared their interests.", "Finally, a solution was found. For each traveller, the chiefs decided which tribe he or she would belong to depending on how closely the traveller\u2019s characteristics matched the tribe\u2019s characteristics. When the travellers arrived in their respective cities, a few citizens came forth and volunteered to accommodate one of the travellers since they felt that the traveller\u2019s characteristics matched theirs. And well\u2026. Problem solved! (The queen could now sleep in peace).", "Viola! I just gave you a bird\u2019s eye view of how the inverted index works.", "Let\u2019s use the story above as an analogy.", "All the citizens of the kingdom are the vectors in a database and the three tribes correspond to three separate \u201cclusters\u201d or \u201ccells\u201d. The vectors are then assigned to one of these three clusters depending upon a certain similarity measure .(Remember the tribes practised different set of skills that set them apart from each other?). Usually the L2 distance measure along with a clustering algorithm like K-means is used for this.", "Like the tribe chiefs in our story, each cluster is represented by a cluster centroid or \u201ccode\u201d . And just like the ministers\u2019 \u201cmaster book\u201d , a separate \u201ccodebook\u201d is maintained that keeps track of the code (or cluster centroid) and its corresponding vectors for each cluster. This is essentially the \u201cInverted File\u201d or index.", "A Quantiser is used to decide which cluster the vector belongs to (I guess this was primarily the queen\u2019s job). So when a query vector comes in (like the travellers in our story), a suitable cluster (or clusters) is found for the query vector based on its similarity with the cluster centres (just like the tribe chiefs who selected the travellers based on their characteristics). Finally, a select number of similar vectors within the selected cluster(s) that are returned as the query result (like the citizens of the city who volunteered to house a traveller). This can be seen as a very basic working of the inverted index.", "Firstly, install the FAISS library with the python bindings. Just follow the instructions given at : https://github.com/facebookresearch/faiss/blob/master/INSTALL.md", "Then, import the library and other dependencies in python using:", "Now, let\u2019s create some vectors for the database. FAISS requires the dimensions of the database vectors to be predefined. We create about 200 vectors with dimension size 128. This creates a (200 * 128) vector matrix. Note that all vector values are stored in the float 32 type.", "We use the \u2018IndexIVFFlat\u2019 index type for our vectors. The \u2018Flat\u2019 here signifies that the vectors are stored as is without any compression or quantisation (more on that later). The IVF index takes two parameters:", "The index has to be trained initially to create \u2018nlist\u2019 number of clusters and then the vectors are added to these clusters. the \u2018is_trained\u2019 flag denotes whether the index is trained or not and the \u2018ntotal\u2019 attribute shows the total number of vectors added to the index.", "Next, we perform a search on the index for 10 query vectors. The \u2018nprobe\u2019 parameter specifies the number of clusters to visit during the search operation. This can be seen as hyper-parameter which can be tuned to get different results. Note that \u2018nprobe\u2019 cannot exceed \u2018nlist\u2019.", "\u2018k\u2019 specifies the number of similar vectors to be returned from the visited clusters.", "The search operation will return the ids (row numbers or index in the vector store) of the k most similar vectors for each query vector along with their respective distances.", "The index can be saved on disk using the write_index() function and can be loaded later using the using the read_index() function", "There! A rudimentary code to understand faiss indexes!", "FAISS has a handful of features including:", "Similarity searching and information retrieval are old pals! Image retrieval or document retrieval and even recommender systems use similarity searching. Say, for example, when you are shopping online for a watch of a particular brand, you see all kinds of watches similar in nature in your recommended list.", "Another route to explore is classification. For example, if we take the cliched \u2018cats and dogs\u2019 image recognition example, we can actually predict if the given query image is of a cat or a dog, depending on the most similar images returned from a datastore of cat and dog images(hmm\u2026.definitely another post for this!)", "I feel like I have barely scraped the surface! FAISS is an interesting library and theres definitely a lot more to explore. Squeezing everything in one post might make you scroll for ages! Hence, my next post further dives into the library and explains an advanced concept called product quantisation.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F619bb6db2d1a&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-faiss-619bb6db2d1a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-faiss-619bb6db2d1a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-faiss-619bb6db2d1a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-faiss-619bb6db2d1a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----619bb6db2d1a--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----619bb6db2d1a--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@vedaaa29296?source=post_page-----619bb6db2d1a--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@vedaaa29296?source=post_page-----619bb6db2d1a--------------------------------", "anchor_text": "Vedashree Patil"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6cf03c573940&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-faiss-619bb6db2d1a&user=Vedashree+Patil&userId=6cf03c573940&source=post_page-6cf03c573940----619bb6db2d1a---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F619bb6db2d1a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-faiss-619bb6db2d1a&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F619bb6db2d1a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-faiss-619bb6db2d1a&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://medium.com/dotstar/understanding-faiss-part-2-79d90b1e5388", "anchor_text": "subsequent post"}, {"url": "https://github.com/facebookresearch/faiss/blob/master/INSTALL.md", "anchor_text": "https://github.com/facebookresearch/faiss/blob/master/INSTALL.md"}, {"url": "https://medium.com/dotstar/understanding-faiss-part-2-79d90b1e5388", "anchor_text": "next pos"}, {"url": "https://github.com/facebookresearch/faiss/wiki", "anchor_text": "facebookresearch/faissA library for efficient similarity search and clustering of dense vectors. - facebookresearch/faissgithub.com"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----619bb6db2d1a---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/similarity-search?source=post_page-----619bb6db2d1a---------------similarity_search-----------------", "anchor_text": "Similarity Search"}, {"url": "https://medium.com/tag/faiss?source=post_page-----619bb6db2d1a---------------faiss-----------------", "anchor_text": "Faiss"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F619bb6db2d1a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-faiss-619bb6db2d1a&user=Vedashree+Patil&userId=6cf03c573940&source=-----619bb6db2d1a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F619bb6db2d1a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-faiss-619bb6db2d1a&user=Vedashree+Patil&userId=6cf03c573940&source=-----619bb6db2d1a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F619bb6db2d1a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-faiss-619bb6db2d1a&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----619bb6db2d1a--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F619bb6db2d1a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-faiss-619bb6db2d1a&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----619bb6db2d1a---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----619bb6db2d1a--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----619bb6db2d1a--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----619bb6db2d1a--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----619bb6db2d1a--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----619bb6db2d1a--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----619bb6db2d1a--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----619bb6db2d1a--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----619bb6db2d1a--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@vedaaa29296?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@vedaaa29296?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Vedashree Patil"}, {"url": "https://medium.com/@vedaaa29296/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "197 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6cf03c573940&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-faiss-619bb6db2d1a&user=Vedashree+Patil&userId=6cf03c573940&source=post_page-6cf03c573940--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F2563e03afd83&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-faiss-619bb6db2d1a&newsletterV3=6cf03c573940&newsletterV3Id=2563e03afd83&user=Vedashree+Patil&userId=6cf03c573940&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}