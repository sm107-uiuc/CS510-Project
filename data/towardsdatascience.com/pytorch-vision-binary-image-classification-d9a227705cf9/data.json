{"url": "https://towardsdatascience.com/pytorch-vision-binary-image-classification-d9a227705cf9", "time": 1683006301.998079, "path": "towardsdatascience.com/pytorch-vision-binary-image-classification-d9a227705cf9/", "webpage": {"metadata": {"title": "PyTorch [Vision] \u2014 Binary Image Classification | by Akshaj Verma | Towards Data Science", "h1": "PyTorch [Vision] \u2014 Binary Image Classification", "description": "Let\u2019s define a dictionary to hold the image transformations for train/test sets. We will resize all images to have size (224, 224) as well as convert the images to tensor. Let\u2019s also write a function\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/tagged/akshaj-wields-pytorch", "anchor_text": "here", "paragraph_index": 54}, {"url": "https://www.linkedin.com/in/akshajverma7/", "anchor_text": "LinkedIn", "paragraph_index": 55}, {"url": "https://twitter.com/theairbend3r", "anchor_text": "Twitter", "paragraph_index": 55}, {"url": "https://medium.com/@theairbend3r", "anchor_text": "blogposts", "paragraph_index": 55}], "all_paragraphs": ["Let\u2019s define the path for our data.", "Let\u2019s define a dictionary to hold the image transformations for train/test sets. We will resize all images to have size (224, 224) as well as convert the images to tensor.", "The ToTensor operation in PyTorch convert all tensors to lie between (0, 1).", "ToTensor converts a PIL Image or numpy.ndarray (H x W x C) in the range [0, 255] to a torch.FloatTensor of shape (C x H x W) in the range [0.0, 1.0]", "We 2 dataset folders with us \u2014 Train and Test.", "We will further divide our Train set as Train + Val.", "The class_to_idx function is pre-built in PyTorch. It returns class ID's present in the dataset.", "We will now construct a reverse of this dictionary; a mapping of ID to class.", "Let\u2019s also write a function that takes in a dataset object and returns a dictionary that contains the count of class samples. We will use this dictionary to construct plots and observe the class distribution in our data.", "get_class_distribution() takes in an argument called dataset_obj.", "plot_from_dict() takes in 3 arguments: a dictionary called dict_obj, plot_title, and **kwargs. We pass in **kwargs because later on, we will construct subplots which require passing the ax argument in Seaborn.", "We use SubsetRandomSampler to make our train and validation loaders. SubsetRandomSampler is used so that each batch receives a random distribution of classes.", "We could\u2019ve also split our dataset into 2 parts \u2014 train and val ie. make 2 Subsets. But this is simpler because our data loader will pretty much handle everything now.", "SubsetRandomSampler(indices) takes as input the indices of data.", "We first create our samplers and then we\u2019ll pass it to our data-loaders.", "Create a list of indices from 0 to length of dataset.", "Shuffle the list of indices using np.shuffle.", "Create the split index. We choose the split index to be 20% (0.2) of the dataset size.", "Slice the lists to obtain 2 lists of indices, one for train and other for test.", "Now that we\u2019re done with train and val data, let\u2019s load our test dataset.", "Now, we will pass the samplers to our dataloader. Note that shuffle=True cannot be used when you're using the SubsetRandomSampler.", "To explore our train and val data-loaders, let\u2019s create a new function that takes in a data-loader and returns a dictionary with class counts.", "To plot the class distributions, we will use the plot_from_dict() function defined earlier with the ax argument.", "Now that we\u2019ve looked at the class distributions, Let\u2019s now look at a single image.", "single_batch is a list of 2 elements. The first element (0th index) contains the image tensors while the second element (1st index) contains the output labels.", "Here\u2019s the first element of the list which is a tensor. This tensor is of the shape (batch, channels, height, width).", "Here are the output labels for the batch.", "To plot the image, we\u2019ll use plt.imshow from matloptlib. It expects the image dimension to be (height, width, channels). We'll .permute() our single image tensor to plot it.", "PyTorch has made it easier for us to plot the images in a grid straight from the batch.", "We first extract out the image tensor from the list (returned by our dataloader) and set nrow. Then we use the plt.imshow() function to plot our grid. Remember to .permute() the tensor dimensions!", "Our architecture is simple. We use 4 blocks of Conv layers. Each block consists ofConvolution + BatchNorm + ReLU + Dropout layers.", "We will not use an FC layer at the end. We'll stick with a Conv layer.", "Now we\u2019ll initialize the model, optimizer, and loss function.", "Then we\u2019ll transfer the model to GPU.", "We\u2019re using the nn.CrossEntropyLoss even though it's a binary classification problem. This means, instead of returning a single output of 1/0, we'll treat return 2 values of 0 and 1. More specifically, probabilities of the output being either 1 or 0.", "We don\u2019t have to manually apply a log_softmax layer after our final layer because nn.CrossEntropyLoss does that for us.", "However, we need to apply log_softmax for our validation and testing.", "Before we start our training, let\u2019s define a function to calculate accuracy per epoch.", "This function takes y_pred and y_test as input arguments. We then apply softmax to y_pred and extract the class which has a higher probability.", "After that, we compare the predicted classes and the actual classes to calculate the accuracy.", "We\u2019ll also define 2 dictionaries which will store the accuracy/epoch and loss/epoch for both train and validation sets.", "You can see we\u2019ve put a model.train() at the before the loop. model.train() tells PyTorch that you're in training mode. Well, why do we need to do that? If you're using layers such as Dropout or BatchNorm which behave differently during training and evaluation (for eample; not use dropout during evaluation), you need to tell PyTorch to act accordingly. While the default mode in PyTorch is the train, so, you don't explicitly have to write that. But it's good practice.", "Similarly, we\u2019ll call model.eval() when we test our model. We'll see that below. Back to training; we start a for-loop. At the top of this for-loop, we initialize our loss and accuracy per epoch to 0. After every epoch, we'll print out the loss/accuracy and reset it back to 0.", "Then we have another for-loop. This for-loop is used to get our data in batches from the train_loader.", "We do optimizer.zero_grad() before we make any predictions. Since the .backward() function accumulates gradients, we need to set it to 0 manually per mini-batch. From our defined model, we then obtain a prediction, get the loss(and accuracy) for that mini-batch, perform backpropagation using loss.backward() and optimizer.step().", "Finally, we add all the mini-batch losses (and accuracies) to obtain the average loss (and accuracy) for that epoch. We add up all the losses/accuracies for each minibatch and finally divide it by the number of minibatches ie. length of trainloader to obtain the average loss/accuracy per epoch.", "The procedure we follow for training is the exact same for validation except for the fact that we wrap it up in torch.no_grad and not perform any backpropagation. torch.no_grad() tells PyTorch that we do not want to perform back-propagation, which reduces memory usage and speeds up computation.", "To plot the loss and accuracy line plots, we again create a dataframe from the accuracy_stats and loss_stats dictionaries.", "After training is done, we need to test how our model fared. Note that we\u2019ve used model.eval() before we run our testing code. To tell PyTorch that we do not want to perform back-propagation during inference, we use torch.no_grad(), just like we did it for the validation loop above.", "We\u2019ll flatten out the list so that we can use it as an input to confusion_matrix and classification_report.", "Finally, we print out the classification report which contains the precision, recall, and the F1 score.", "Let\u2019s use the confusion_matrix() function to make a confusion matrix.", "We create a dataframe from the confusion matrix and plot it as a heatmap using the seaborn library.", "Thank you for reading. Suggestions and constructive criticism are welcome. :)", "This blog post is a part of the column\u2014 \u201cHow to train you Neural Net\u201d. You can find the series here.", "You can find me on LinkedIn and Twitter. If you liked this, check out my other blogposts.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fd9a227705cf9&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-vision-binary-image-classification-d9a227705cf9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-vision-binary-image-classification-d9a227705cf9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-vision-binary-image-classification-d9a227705cf9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-vision-binary-image-classification-d9a227705cf9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----d9a227705cf9--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----d9a227705cf9--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@theairbend3r?source=post_page-----d9a227705cf9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@theairbend3r?source=post_page-----d9a227705cf9--------------------------------", "anchor_text": "Akshaj Verma"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe331296a10f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-vision-binary-image-classification-d9a227705cf9&user=Akshaj+Verma&userId=e331296a10f2&source=post_page-e331296a10f2----d9a227705cf9---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd9a227705cf9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-vision-binary-image-classification-d9a227705cf9&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd9a227705cf9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-vision-binary-image-classification-d9a227705cf9&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://medium.com/tag/akshaj-wields-pytorch", "anchor_text": "How to train your neural net"}, {"url": "https://towardsdatascience.com/tagged/akshaj-wields-pytorch", "anchor_text": "here"}, {"url": "https://www.linkedin.com/in/akshajverma7/", "anchor_text": "LinkedIn"}, {"url": "https://twitter.com/theairbend3r", "anchor_text": "Twitter"}, {"url": "https://medium.com/@theairbend3r", "anchor_text": "blogposts"}, {"url": "https://www.buymeacoffee.com/theairbend3r", "anchor_text": ""}, {"url": "https://medium.com/tag/akshaj-wields-pytorch?source=post_page-----d9a227705cf9---------------akshaj_wields_pytorch-----------------", "anchor_text": "Akshaj Wields Pytorch"}, {"url": "https://medium.com/tag/programming?source=post_page-----d9a227705cf9---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-science?source=post_page-----d9a227705cf9---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----d9a227705cf9---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/python?source=post_page-----d9a227705cf9---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd9a227705cf9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-vision-binary-image-classification-d9a227705cf9&user=Akshaj+Verma&userId=e331296a10f2&source=-----d9a227705cf9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd9a227705cf9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-vision-binary-image-classification-d9a227705cf9&user=Akshaj+Verma&userId=e331296a10f2&source=-----d9a227705cf9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd9a227705cf9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-vision-binary-image-classification-d9a227705cf9&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----d9a227705cf9--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fd9a227705cf9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-vision-binary-image-classification-d9a227705cf9&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----d9a227705cf9---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----d9a227705cf9--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----d9a227705cf9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----d9a227705cf9--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----d9a227705cf9--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----d9a227705cf9--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----d9a227705cf9--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----d9a227705cf9--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----d9a227705cf9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@theairbend3r?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@theairbend3r?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Akshaj Verma"}, {"url": "https://medium.com/@theairbend3r/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "373 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe331296a10f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-vision-binary-image-classification-d9a227705cf9&user=Akshaj+Verma&userId=e331296a10f2&source=post_page-e331296a10f2--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F817f2ff0f62b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpytorch-vision-binary-image-classification-d9a227705cf9&newsletterV3=e331296a10f2&newsletterV3Id=817f2ff0f62b&user=Akshaj+Verma&userId=e331296a10f2&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}