{"url": "https://towardsdatascience.com/zip-function-in-python-da91c248385d", "time": 1683016778.850247, "path": "towardsdatascience.com/zip-function-in-python-da91c248385d/", "webpage": {"metadata": {"title": "Zipping and Unzipping Iterables in Python | by Luay Matalka | Towards Data Science", "h1": "Zipping and Unzipping Iterables in Python", "description": "Let\u2019s say that we have two lists, one that includes first names, and the other includes last names. We would like to somehow combine the first names with the corresponding last names as tuples. In\u2026"}, "outgoing_paragraph_urls": [{"url": "https://docs.python.org/3/library/functions.html#zip", "anchor_text": "zip()", "paragraph_index": 1}, {"url": "https://docs.python.org/3/library/itertools.html#itertools.zip_longest", "anchor_text": "itertools.zip_longest()", "paragraph_index": 9}, {"url": "https://lmatalka90.medium.com/membership", "anchor_text": "link", "paragraph_index": 17}], "all_paragraphs": ["Let\u2019s say that we have two lists, one that includes first names, and the other includes last names. We would like to somehow combine the first names with the corresponding last names as tuples. In other words, we would like to combine elements from multiple iterables that have the same index together in a list of tuples:", "We can accomplish this with the zip() function, which is a built-in python function. The zip() function is named due to its analogous mechanism as physical zippers. When you zip something, you bring both sides together. And that\u2019s how the zip() function works! It brings elements of the same index from multiple iterable objects together as elements of the same tuples.", "The zip() function takes in iterables as arguments, such as lists, files, tuples, sets, etc. The zip() function will then create an iterator that aggregates elements from each of the iterables passed in. In other words, it will return an iterator of tuples, where the i-th tuple will contain the i-th element from each of the iterables passed in. This iterator will stop once the shortest input iterable has been exhausted.", "Well, based on the above goal, we have two lists (which are iterable objects), and we would like to combine the same indexed elements from each of these lists together. Thus, we can use the zip() function to accomplish this as follows:", "Remember, the zip() function returns an iterator. Thus, we need to use the list() function that will use this returned iterator (or zip object) to create a list. In addition, as long as the iterables passed in are ordered (sequences), then the tuples will contain elements in the same left-to-right order of the arguments passed in the zip() function.", "Let\u2019s say we have another list, ages, that contains the age of the corresponding individual in the other two lists, first_names and last_names. We would like to also include the ages in in the tuple with the first and last name. Well, as mentioned above, the zip() function takes in any number of iterables.", "Notice how the names_and_ages contains tuples with n elements (the same number of arguments, or iterable objects, we passed in to the zip() function).", "If we only pass in one iterable object to the zip() function, then we will get a list of 1-item tuples as follows:", "What if we pass in lists (or other iterable objects) of unequal lengths? In other words, let\u2019s say that our last_names list contains 1 more element than first_names. Well, as mentioned above, the iterator returned by the zip() function will stop once the shortest input iterable has been exhausted. In other words, our list of tuples will only contain the elements from the indexes that are present in all the iterables passed in to the zip() function. Thus, the remaining elements in the longer iterables will be ignored.", "If the elements in the longer iterables are needed, then we can use the itertools.zip_longest() (zip_longest() function located in the itertools module) function instead of zip(). It will continue until the longest iterable is exhausted, and will replace any missing values with the value passed in for the fillvalue argument (default is None).", "We can use the zip() function to iterate in parallel over multiple iterables. Since the zip() function returns an iterator, we can use this zip object (the iterator it returns) in a for loop. And since with each iteration of this iterator a tuple is returned, we can unpack the elements of this tuple within the for loop:", "Or we can have three iterables:", "We have two lists: a list of revenues and a list of costs. We would like to make a new list, profits, that is the difference between the revenues and costs. We can accomplish this using parallel iteration:", "Let\u2019s say that we have the following list of tuples:", "And we want to separate the elements in these tuples into two separate lists. Well, since that is the opposite of zipping (bringing things together), it would be unzipping (taking things apart). To unzip in python, we can use the unpacking operator * with the zip() function as follows:", "The unpacking operator * will unpack the first_and_last_names list of tuples into its tuples. These tuples will then be passed to the zip() function, which will take these separate iterable objects (the tuples), and combines their same-indexed elements together into tuples, making two separate tuples. Lastly, through tuple unpacking, these separated tuples will be assigned to the first_names and last_names variables. We then use the list() function to convert these tuples into lists.", "For more on unpacking operators (* and **), iterables, iterators, and iteration, check out the following two blogs:", "If you enjoy reading stories like these and want to support me as a writer, consider signing up to become a Medium member. It\u2019s $5 a month, giving you unlimited access to stories on Medium. If you sign up using my link, I\u2019ll earn a small commission.", "In this tutorial, we looked at how the zip() function works in python. We learned how the zip() function operates in different scenarios, such as with one iterable, or with iterables that have unequal lengths. We then saw how we can use the zip() function to iterate over multiple iterable objects in parallel. And lastly, we learned how to use the unpacking operator * to unzip objects in python.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Cloud Data Engineer with a passion for teaching."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fda91c248385d&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzip-function-in-python-da91c248385d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzip-function-in-python-da91c248385d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzip-function-in-python-da91c248385d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzip-function-in-python-da91c248385d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----da91c248385d--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----da91c248385d--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://lmatalka90.medium.com/?source=post_page-----da91c248385d--------------------------------", "anchor_text": ""}, {"url": "https://lmatalka90.medium.com/?source=post_page-----da91c248385d--------------------------------", "anchor_text": "Luay Matalka"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F58bd20ab66d4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzip-function-in-python-da91c248385d&user=Luay+Matalka&userId=58bd20ab66d4&source=post_page-58bd20ab66d4----da91c248385d---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fda91c248385d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzip-function-in-python-da91c248385d&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fda91c248385d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzip-function-in-python-da91c248385d&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@ilyapavlov?utm_source=medium&utm_medium=referral", "anchor_text": "Ilya Pavlov"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://docs.python.org/3/library/functions.html#zip", "anchor_text": "zip()"}, {"url": "https://towardsdatascience.com/two-cool-functions-to-know-in-python-7c36da49f884", "anchor_text": "Two Cool Functions To Know in PythonLearn how to make tables with tabulate and show progress bars with tqdm in Pythontowardsdatascience.com"}, {"url": "https://docs.python.org/3/library/itertools.html#itertools.zip_longest", "anchor_text": "itertools.zip_longest()"}, {"url": "https://towardsdatascience.com/how-to-easily-create-tables-in-python-2eaea447d8fd", "anchor_text": "How to Easily Create Tables in PythonHow to use the tabulate function to create nicely-formatted tables in Pythontowardsdatascience.com"}, {"url": "https://towardsdatascience.com/unpacking-operators-in-python-306ae44cd480", "anchor_text": "Unpacking Operators in PythonUsing the * and ** unpacking operators in pythontowardsdatascience.com"}, {"url": "https://towardsdatascience.com/iterables-and-iterators-in-python-849b1556ce27", "anchor_text": "Iterables and Iterators in PythonIterables, iterators, and iteration in Pythontowardsdatascience.com"}, {"url": "https://lmatalka90.medium.com/membership", "anchor_text": "link"}, {"url": "https://lmatalka90.medium.com/membership", "anchor_text": "Join Medium with my referral link \u2014 Luay MatalkaRead every story from Luay Matalka (and thousands of other writers on Medium). Your membership fee directly supports\u2026lmatalka90.medium.com"}, {"url": "https://medium.com/tag/programming?source=post_page-----da91c248385d---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-science?source=post_page-----da91c248385d---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/technology?source=post_page-----da91c248385d---------------technology-----------------", "anchor_text": "Technology"}, {"url": "https://medium.com/tag/software-development?source=post_page-----da91c248385d---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----da91c248385d---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fda91c248385d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzip-function-in-python-da91c248385d&user=Luay+Matalka&userId=58bd20ab66d4&source=-----da91c248385d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fda91c248385d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzip-function-in-python-da91c248385d&user=Luay+Matalka&userId=58bd20ab66d4&source=-----da91c248385d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fda91c248385d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzip-function-in-python-da91c248385d&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----da91c248385d--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fda91c248385d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzip-function-in-python-da91c248385d&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----da91c248385d---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----da91c248385d--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----da91c248385d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----da91c248385d--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----da91c248385d--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----da91c248385d--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----da91c248385d--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----da91c248385d--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----da91c248385d--------------------------------", "anchor_text": ""}, {"url": "https://lmatalka90.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://lmatalka90.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Luay Matalka"}, {"url": "https://lmatalka90.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "1K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F58bd20ab66d4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzip-function-in-python-da91c248385d&user=Luay+Matalka&userId=58bd20ab66d4&source=post_page-58bd20ab66d4--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Feb71491826a1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fzip-function-in-python-da91c248385d&newsletterV3=58bd20ab66d4&newsletterV3Id=eb71491826a1&user=Luay+Matalka&userId=58bd20ab66d4&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}