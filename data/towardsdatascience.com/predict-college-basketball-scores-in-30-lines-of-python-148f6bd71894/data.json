{"url": "https://towardsdatascience.com/predict-college-basketball-scores-in-30-lines-of-python-148f6bd71894", "time": 1682995338.80267, "path": "towardsdatascience.com/predict-college-basketball-scores-in-30-lines-of-python-148f6bd71894/", "webpage": {"metadata": {"title": "Predict College Basketball Scores in 30 Lines of Python | by Robert Clark | Towards Data Science", "h1": "Predict College Basketball Scores in 30 Lines of Python", "description": "Use machine learning and Python to create a college basketball prediction algorithm from scratch."}, "outgoing_paragraph_urls": [{"url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html", "anchor_text": "official scikit-learn documentation", "paragraph_index": 21}, {"url": "https://www.kaggle.com/c/mens-machine-learning-competition-2019", "anchor_text": "enter a competition", "paragraph_index": 32}], "all_paragraphs": ["Finish last in your office\u2019s March Madness pool again? Did a Golden Retriever or your neighbor\u2019s daughter\u2019s pet rock choose a better bracket than you? Creating a winning bracket is hard and even trips up college basketball\u2019s expert analysts. Instead of leaving the guess-work to fate or watching thousands of hours of basketball each season (I guess I do that anyway, but that\u2019s beside the point), why not train a computer to make predictions for you?", "With the help of Python and a few awesome libraries, you can build your own machine learning algorithm that predicts the final scores of NCAA Men\u2019s Division-I College Basketball games in less than 30 lines of code. This tutorial is intended to explain all of the steps required to creating a machine learning application including setup, data retrieval and processing, training a model, and printing final predictions.", "To follow this tutorial, a basic understanding of Python is highly recommended though not required. Knowledge of the purpose of importing modules, getting and setting variables, dictionaries, and instantiating classes are a good base-line to have, while experience with using Pandas and sklearn is a huge plus.", "Now that our development environment is setup, let\u2019s begin building the actual application.", "For those that like to jump straight to the code, the gist above is our finalized program that we will use. If you are already familiar with pandas and sklearn, you can skip to the bottom of this tutorial to see how this program is run and how it can be extended for higher accuracy, faster runtime, and improved usability. For everyone else that wants a further explanation of this code, continue reading below to learn the purpose of each step.", "Nearly every Python program begins with an import section where required dependencies are included to be used later on in the module. For this project, we need to import the following packages that we installed earlier:", "No machine learning application would be complete without a dataset. To help us predict final scores for NCAAB games, we want to create a dataset containing all of the individual game statistics (such as shooting percentage, number of turnovers and blocked shots, rebound percentages, and much more) which we can then use to predict how those factors correlate to final scores.", "To create this dataset, we first need to initialize an empty Pandas DataFrame that we will use to store our final data. Next, we initialize the Teams class from sportsreference which contains information for every NCAA Men\u2019s Division-I Basketball team for the current or most recent season and allows us to easily grab statistical data on a team-by-team basis.", "Prior to pulling data, we need to iterate over every team by running for team in teams: where each iteration corresponds to a unique team in the league. sportsreference exposes schedule and boxscore information for each team and enables us to write code like team.schedule.dataframe_extended which collects statistical information on a per-game basis for every game the team has participated in during the current season. The dataframe_extended property returns a pandas DataFrame where each index corresponds to a different game.", "After collecting boxscore information for each game, we want to add it to our overall dataset so we have one singular source of data. This can be done by concatenating our existing dataset with the local DataFrame containing the current team\u2019s complete boxscore information. By overwriting our existing dataset with the resulting concatenation, we ensure that the dataset always includes information not only for the most recent team but all teams that were previously queried as well.", "After our dataset finishes building itself, we need to filter out a few categories (or features as they are often called in machine learning) from our dataset that we don\u2019t want to use \u2014 namely those that are of string type (or categorical) like the team names or the date and location. Sometimes, string-based features can be useful, like in the case of predicting home values and determining properties listed as \u201cwaterfront\u201d have a higher value than those classified as \u201cinland\u201d for example. Though this feature is useful for house price predictions, most machine learning algorithms can\u2019t handle string-based data. One method of replacing these types of features is called one-hot encoding which auto-replaces similar categorical values with unique feature columns where every index that falls into that feature has a value 1 or a if it does not. By changing the categories to 1\u2019s and 0\u2019s, machine learning algorithms are able to handle these features more effectively.", "For our purposes, however, we will simply drop these features since they are either too numerous (ie. possible venues the games can be played at is huge), meaningless (it shouldn\u2019t really matter whether a game is played on November 18th or December 2nd in determining the result based on stats), or would introduce bias (we want the algorithm to determine the final score based on how a team\u2019s playing \u2014 not just because their name is \u201cDuke\u201d). As a result, we will drop all of those categories.", "At this point, some might be wondering why I included home_points and away_points in the list of fields to drop. These two fields are the final output (often referred to as labels) that we want to predict, so we do not want them to be included in our main features and should instead reserve them exclusively for our output labels.", "Stepping through the code above, we first drop all of the unwanted features from our dataset and save the trimmed output as X. After dropping unused features, we next remove all rows with incomplete data. This sometimes happens if the data is not properly populated on sports-reference.com or if a team didn\u2019t perform a certain statistical action, such as not blocking a shot or shooting a free throw. There are a couple of ways we can handle this incomplete data by either setting missing values with a set number (such as an average for the category or defaulting to zero) or dropping any rows that are invalid. Since the number of invalid cells is very small for our dataset, we will just drop the any rows that have incomplete data as it will not impact our final results.", "Since it takes two to tango (err, two participating teams for a game to be played), there will also be a copy of each game as the schedule for both teams are pulled (once for the home team and once for the away team). This just pollutes our dataset and doesn\u2019t provide any value since the rows are exactly identical, so we want to remove any copies and keep just one instance of each game. To do so, we simply add drop_duplicates() to our dataset to ensure every index is unique.", "Next, we need to create our output labels that will be used to determine the accuracy of our model\u2019s weights while training and to test the accuracy of our final algorithm. We can generate our labels by creating a two-column vector containing just the home and away points and set the result as y.", "Finally, it is common practice to split your dataset into training and testing subsets in order to ensure a trained model is accurate. Ideally, we want to use approximately 75% of the dataset for training, and reserve the remaining 25% for testing. These subsets should be taken at random to prevent the model from being biased to a particular set of information. After a model is trained using the training dataset, it should be run against the test dataset to determine the model\u2019s predictive performance and see if it is overfitting.", "Luckily, sklearn has a built-in function that will create these subsets for us. By feeding our X and y frames into train_test_split, we are able to retrieve both training and testing subsets with the expected splits.", "Now that our dataset has been processed, it\u2019s time to create and train our model. I decided to use a RandomForestRegressor for this example due to the algorithm\u2019s ease of use and relative accuracy as well as its decent handling of reducing overfitting compared to standard decision trees. The Random Forest algorithm creates several decision trees with some randomness injected into the feature weights. These decision trees are then combined to create a forest (hence a random forest of decision trees) which is used for final analysis while training, validating, or inferring. The algorithm supports both classification as well as regression, making it very flexible for diverse applications.", "Classification determines output labels that belong to a fixed number of categories, such as the letter grade students received on a test (\u201cA\u201d, \u201cB\u201d, \u201cC\u201d, \u201cD\u201d, or \u201cF\u201d). There can only be five categories (or classes), so the model will only attempt to place outputs into one of these five categories. Regression, on the other hand, determines output labels that can take on an indefinite range of values, such as the price of a home. Though there tends to be a range of standard home prices, there is no limit to the price a house could sell for, and any positive number is a valid possibility. Since the final score of a basketball game can technically be any positive number (or zero!), we want to use regression.", "Before we build and train our model, we first need to set some hyperparameters. Hyperparameters are parameters that are input to a model prior to training and affect how it is built and optimized. These parameters tend to be the biggest hurdle for most beginners in the fields of machine and deep learning as there generally isn\u2019t a \u201cperfect\u201d value for these settings and it can get overwhelming to determine what should be put, if anything.", "A general rule of thumb is to stick with the default values of these hyperparameters initially, then once a model is trained and completed and you are able to test it, begin to tweak the values using a trial-and-error method until you are satisfied with the final results. For our model, I\u2019ve chosen six different hyperparameters and found this particular set of values to provide the best trade-off between performance and accuracy. More details on these specific settings can be found in the official scikit-learn documentation.", "After selecting our hyperparmaters, it\u2019s finally time to create our model. First, we need to instantiate the RandomForestRegressor class that we imported earlier and include our hyperparameters. By using (**parameters), we expand the key-value pairs of our dictionary to named arguments to the class which is functionally identical to the following:", "Now that our model has been instantiated, all that\u2019s left is to train it. sklearn makes this very easy by including the fit method with RandomForestRegressor, so we only need to run it with our input features and the corresponding output labels. This method runs in-place, so our model variable will now automatically point to a trained model that we can use for predictions!", "The final step of our application is to run predictions against our testing subset and compare them with our expected results. This print statement outputs both the predicted results as well as our actual expected results as two different two-column vectors.", "Finally, the moment we\u2019ve all been waiting for! Our application is now complete and all we have left is to run the algorithm. I named my program ncaab-machine-learning-basic.py, so I simply need to run the following to initiate the algorithm:", "Please note that the program may take a long time to complete as a bulk of the processing time is spent building the dataset for all 350+ teams in Division-I College Basketball. If you just desire to see a working algorithm, you can stop the data creation early by adding a break statement in the first loop after the data concatenation line.", "Once the program finishes, it will output something similar to the following (I reduced the number of lines to save space):", "This output contains two sections: the predicted output followed by the expected output. Everything from array([[86, 86] to [68, 65]]) is the predicted output while array([[83, 89] to [66, 65]]) is the actual data. As was specified earlier, the first column refers to the expected number of points the home team will score, and the second column is the projected points for the away team.", "The rows in the predicted output also matchup with the rows in the expected output, so [86, 86] correlates with [83, 89] and so on. If we compare down the list, we will find that our predictions aren\u2019t too bad! For the most part, the projected score is only a few points away from the actual result. Another promising sign is when the actual score varies from a typical result of around 70 points, our algorithm is able to identify a difference and generate a score that is higher or lower than what is considered normal.", "If this is your first machine learning program, congratulations! Hopefully this tutorial is enough to get you started and show that a basic machine learning application doesn\u2019t require years of education or thousands of lines of code.", "While this program is a great start, there are many ways we can extend it to make it better. Here are several improvements I would make to the application to improve performance, accuracy, and usability:", "Now that you have a working application, try to implement some of these suggestions to improve the accuracy and performance of your model. If you generate a model you are satisfied with, you can use it to create predictions for the NCAA Tournament or possibly enter a competition.", "While it will still be tough to beat the Golden Retriever or Sally\u2019s pet rock, this algorithm just might give you that competitive edge in your company\u2019s pool this year. Why not make this March yours and dethrone Jim from accounting?", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Software engineer passionate about sports and artificial intelligence and, apparently, a blogger by night."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F148f6bd71894&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-college-basketball-scores-in-30-lines-of-python-148f6bd71894&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-college-basketball-scores-in-30-lines-of-python-148f6bd71894&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-college-basketball-scores-in-30-lines-of-python-148f6bd71894&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-college-basketball-scores-in-30-lines-of-python-148f6bd71894&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----148f6bd71894--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----148f6bd71894--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@roclark?source=post_page-----148f6bd71894--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@roclark?source=post_page-----148f6bd71894--------------------------------", "anchor_text": "Robert Clark"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd2a72525d0b3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-college-basketball-scores-in-30-lines-of-python-148f6bd71894&user=Robert+Clark&userId=d2a72525d0b3&source=post_page-d2a72525d0b3----148f6bd71894---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F148f6bd71894&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-college-basketball-scores-in-30-lines-of-python-148f6bd71894&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F148f6bd71894&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-college-basketball-scores-in-30-lines-of-python-148f6bd71894&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://medium.com/towards-data-science/in-depth-analysis/home", "anchor_text": "In-Depth Analysis"}, {"url": "https://unsplash.com/@jennymarvin?utm_source=medium&utm_medium=referral", "anchor_text": "Jenny Marvin"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://www.python.org/dev/peps/pep-0373/", "anchor_text": "end-of-life in early 2020"}, {"url": "https://medium.com/clarktech-sports/python-sports-analytics-made-simple-part-1-14569d6e9a86", "anchor_text": "this blog post"}, {"url": "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html", "anchor_text": "official scikit-learn documentation"}, {"url": "https://medium.com/@patrickoxford/an-introduction-to-four-factors-rating-3e9ee475ceed", "anchor_text": "four factor rating"}, {"url": "https://www.kaggle.com/c/mens-machine-learning-competition-2019", "anchor_text": "enter a competition"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----148f6bd71894---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/python?source=post_page-----148f6bd71894---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/ncaa-tournament?source=post_page-----148f6bd71894---------------ncaa_tournament-----------------", "anchor_text": "NCAA Tournament"}, {"url": "https://medium.com/tag/in-depth-analysis?source=post_page-----148f6bd71894---------------in_depth_analysis-----------------", "anchor_text": "In Depth Analysis"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----148f6bd71894---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F148f6bd71894&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-college-basketball-scores-in-30-lines-of-python-148f6bd71894&user=Robert+Clark&userId=d2a72525d0b3&source=-----148f6bd71894---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F148f6bd71894&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-college-basketball-scores-in-30-lines-of-python-148f6bd71894&user=Robert+Clark&userId=d2a72525d0b3&source=-----148f6bd71894---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F148f6bd71894&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-college-basketball-scores-in-30-lines-of-python-148f6bd71894&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----148f6bd71894--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F148f6bd71894&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-college-basketball-scores-in-30-lines-of-python-148f6bd71894&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----148f6bd71894---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----148f6bd71894--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----148f6bd71894--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----148f6bd71894--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----148f6bd71894--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----148f6bd71894--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----148f6bd71894--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----148f6bd71894--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----148f6bd71894--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@roclark?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@roclark?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Robert Clark"}, {"url": "https://medium.com/@roclark/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "275 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd2a72525d0b3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-college-basketball-scores-in-30-lines-of-python-148f6bd71894&user=Robert+Clark&userId=d2a72525d0b3&source=post_page-d2a72525d0b3--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F18c672322a1d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpredict-college-basketball-scores-in-30-lines-of-python-148f6bd71894&newsletterV3=d2a72525d0b3&newsletterV3Id=18c672322a1d&user=Robert+Clark&userId=d2a72525d0b3&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}