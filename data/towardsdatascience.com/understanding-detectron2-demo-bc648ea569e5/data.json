{"url": "https://towardsdatascience.com/understanding-detectron2-demo-bc648ea569e5", "time": 1683011123.320222, "path": "towardsdatascience.com/understanding-detectron2-demo-bc648ea569e5/", "webpage": {"metadata": {"title": "Understanding Detectron2 demo and examples | Towards Data Science", "h1": "Understanding Detectron2 demo", "description": "This article describes Detectron2 example demo with detailed explanations about the library data structues. We dig into internals and present a working example and code skeleton."}, "outgoing_paragraph_urls": [{"url": "https://github.com/facebookresearch/detectron2", "anchor_text": "official library Github", "paragraph_index": 0}, {"url": "https://github.com/facebookresearch/detectron2/blob/master/MODEL_ZOO.md", "anchor_text": "here", "paragraph_index": 7}, {"url": "https://gist.github.com/j-adamczyk/93f7b2f62c31c5e0b5e8ee32ba958588", "anchor_text": "direct link", "paragraph_index": 23}], "all_paragraphs": ["Detectron2 (official library Github) is \u201cFAIR\u2019s next-generation platform for object detection and segmentation\u201d. FAIR (Facebook AI Research) created this framework to provide CUDA and PyTorch implementation of state-of-the-art neural network architectures. They also provide pre-trained models for object detection, instance segmentation, person keypoint detection and other usages.", "The important, but often overlooked feature of the Detectron2 is its licensing scheme: the library itself is released under Apache 2.0 licence and pre-trained models are released under CC BY-SA 3.0 license. It means that you can modify the existing code, use it for private, scientific and even commercial purposes. All you need to do is provide appropriate credit to FAIR. It\u2019s quite uncommon in scientific community, which often uses licenses forcing code source publication and non-commercial use. It\u2019s quite limiting, but fortunately that\u2019s not the case for Detectron2.", "The issue is, however, that code written by researchers often does not follow clean code guidelines. For Detectron2 it\u2019s not bad in comparison to alternatives, but code structure is definitely convoluted and requires a lot of effort to understand. One does need to know it, however, to use powerful capabilities of this library. In this article (and following ones, hopefully) I aim to shed some light on the API, code structure and how to modify it and use it in your projects.", "Below code assumes that you have everything installed and up and running. In particular, you\u2019ll need a Linux system (Windows may work, but is not officially supported), CUDA-enabled GPU (with CUDA installed), PyTorch >= 1.4 and appropriate Detectron2 version. This library currently does not support CPU computation and will likely remain so, given the computational power required to run those neural networks. If many of you encounter problems with this, please let me know in the comments, I\u2019ll make another article about the setup of all appropriate tools.", "We\u2019ll go through modified Google Colab demo for instance segmentation with COCO dataset classes. The aim is to create easy to understand code skeleton, perfect for future Detectron2-based projects. Let\u2019s start by getting command line arguments:", "As a technical detail, we\u2019ll be writing Python type annotations, introduced in Python 3.5. They do not force variable type, but are intended to help programmers (and IDEs, which provide better help with annotations) to understand the code better. This way it\u2019s also easier to know where to look in Detectron2 documentation and source code for clues about model behaviour.", "A few important things happen here. First, we import argparse module for easy argument parsing. Our demo may take 2 arguments: base model to use in Detectron2 and list of 1 or more images to be processed. Defining separate function for parsing and getting argument is how it\u2019s done in demo.py (official Detectron2 demo file) and other projects built on top of it (like Centermask2). It\u2019s also a good code practice in general. The Namespace type acts similarly to Python dictionaries, but access to values is done like with attributes in classes, e. g. args.base_model. If the argument was not provided and default was not set, it will be empty type appropriate for the argument, most often None (or empty list for arbitrary number of options like images above).", "The important part is default value for base model. It will be used to tell Detectron2 which pre-trained model (baseline) from the model zoo should be used. Model zoo is a set of models pre-trained by FAIR that are easily downloadable with the library API. The entire list can be found here. Tables contain various statistics about different models, which are sorted ascending by precision metric (like box AP for instance segmentation). Depending on your needs, speed or accuracy may be more important; also note that this is average AP and in particular case model with worse average score (most probably the less sensitive one) may work better. I\u2019ve chosen default value based on my personal experience \u2014 X101-FPN tends to give too many false positives and it\u2019s also about 1,5\u20132 times slower in practice than R101-FPN. In order to obtain string identifying any model that interests you, follow the steps show below.", "The first time the model is used it is downloaded from the model zoo, so it may take a little while.", "Now that we have our basic setup, it\u2019s time to configure our model. Detectron2 needs to be actually told which model to use, where to find files etc. Fortunately, for using pre-trained models from the model zoo it\u2019s pretty simple:", "First, we added a few new imports. They should be added at the top of the file, next to the previous argparse import. get_cfg() function only initializes an empty config, that we\u2019ll fill later with desired settings. The type CfgNode is rarely seen outside a few configuration lines like these here and it acts similarly to argparse.Namespace, since attributes are accessed by a dot.", "merge_from_file() method requires either a string (file path to the local file) or config file from model_zoo.get_config_file() as an argument. It loads another configuration file to our configuration in cfg. Local files are used mostly when models are trained on custom datasets and saved on disk. More often we just want to use pre-trained model from Detectron2 model zoo and configuration file specified here by args.base_model is selected and loaded.", "cfg.MODEL.WEIGHTS are neural network weights learned during training. We can also load them similarly to configuration file, just providing string to the model zoo. Note that in fact we are loading a checkpoint file \u2014 in fact neural network training is never \u201cfinished\u201d and the model may be additionally trained later. The reasons to stop training earlier is mostly either avoiding overfitting or lack of computational power / time. When weights are loaded this way, the last checkpoint (the \u201cmost trained\u201d NN) from weights file is used.", "cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST is a very important tunable hyperparameter. It changes the minimal confidence that our model has to have about object for it to be detected. In other words, when object is far, less visible etc. this threshold has to be lower to properly detect it. Setting it too low, however, may cause false detections or detecting same objects multiple times (which is reduced by Non-Maximum Supression (NMS) algorithm, but not entirely eliminated). Therefore this hyperparameter needs to be tuned for specific conditions that you have. 50% (0.5) is a good default value.", "Now we\u2019re finally ready to initialize the class that will do all the actual work \u2014 DefaultPredictor. It simply uses the neural network that was provided in the configuration to make predictions, on a single machine and a single image at once. One important caveat is that it takes image in BGR format, not RGB \u2014 if you use OpenCV (cv2) for loading images, it is the default behaviour, but other libraries like Pillow may use RGB and require a change of format.", "We\u2019re finally ready to make use of our model!", "As before, put imports at the beginning of the file. The new code iterates through provided pictures and makes predictions for each one, visualizes them and saves results to file.", "Using cv2.imread automatically uses BGR format, so it comes in handy here. The result image is a 3D Numpy array, where dimensions are:", "As you can see, a few lines below we\u2019ve used [:, :, ::-1] slicing, which means \u201ctake all rows, all columns and all third dimension, but invert the order of the last one\u201d. This means that for visualization we\u2019ll have RGB \u2014 without this the colors would be quite weird (but you can certainly try for yourself!).", "After the loading part comes the real thing: using predictor(img)[\"instances\"] to to actually use the neural network and make instance segmentation. The predictor returns a dict containing only one key-value pair, namely \u201cinstances\u201d key mapped to an Instances object. It is a class made exactly for returning results in Detectron2. It acts as a storage for metadata about images and actual results. The Instances objects contain quite a lot of information, enough for a separate article, but for now we can work with it without messing with its internals. The important thing for now is to remember that predictor works on GPU and returns data still on the GPU, including many PyTorch tensors. If you want to work with this data on CPU (e. g. most libraries only work with PyTorch CPU tensors or Numpy arrays), you have to explicitly convert it with .to(\"cpu\") function, which we do a few lines below.", "Visualizer is a class for drawing results from Detectron2 neural networks (not only instance segmentation, but also other types) on images (for videos you should use VideoVisualizer). It\u2019s arguments are:", "Calling draw_instance_predictions tells Visualizer that we have done instance segmentation and will pass its results as an argument. We first need to send it to CPU, since visualization code does not run on GPU like the neural network. It returns VisImage object, which is a wrapper for image with some additional information (scale, width and height). The get_image() methods extracts the image matrix from it. We also apply the same trick as above to change it to RGB.", "All that remains is to save the file. It turns out that saving file next to the original one with \u201c_processed\u201d appended to name is not that easy and regex is the easiest way to do this. \"(.*)\\.\" extracts entire file path and file name up to the dot before extension and it is caught with .group(0). The dot is removed with [:-1] and then we can change the name (and extension, since OpenCV will know what to do with \u201c.png\u201d in the destination file path). At the end, processed image is saved.", "Here\u2019s the full code (direct link):", "Let\u2019s try the code on the sample image. If the image is in the same directory as the demo.py file, you can run it from there with python --images image.png:", "As you can see, it works pretty good! The visualizer added bounding boxes (rectangles around detected objects), class names (e. g. \u201cpotted plant\u201d) and measure of model certainty about the class in %. Even under challenging conditions (different scales, objects very close to each other, partial obstructions) most things are properly detected and segmentation masks are quite precise. This is how powerful those cutting-edge neural networks are.", "In this article we\u2019ve barely scratched the surface of Detectron2. It\u2019s a vast library with a lot of functionalities and technical details, with pretty complicated class model. I hope this will help you get started and understand the demo a bit better. If you still have questions about things that I\u2019ve written about here or want another articles about Detectron2 (any topic in particular), please let me know in the comments.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Science student, ML engineer, Data Science and ML algorithms enthusiast."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fbc648ea569e5&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-detectron2-demo-bc648ea569e5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-detectron2-demo-bc648ea569e5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-detectron2-demo-bc648ea569e5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-detectron2-demo-bc648ea569e5&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----bc648ea569e5--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----bc648ea569e5--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@jakubadamczyk10?source=post_page-----bc648ea569e5--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@jakubadamczyk10?source=post_page-----bc648ea569e5--------------------------------", "anchor_text": "Jakub Adamczyk"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa2bd22267201&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-detectron2-demo-bc648ea569e5&user=Jakub+Adamczyk&userId=a2bd22267201&source=post_page-a2bd22267201----bc648ea569e5---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbc648ea569e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-detectron2-demo-bc648ea569e5&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbc648ea569e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-detectron2-demo-bc648ea569e5&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/photos/KTF-gr3uWvs", "anchor_text": "source"}, {"url": "https://github.com/facebookresearch/detectron2", "anchor_text": "official library Github"}, {"url": "https://github.com/facebookresearch/detectron2/blob/master/MODEL_ZOO.md", "anchor_text": "here"}, {"url": "https://gist.github.com/j-adamczyk/93f7b2f62c31c5e0b5e8ee32ba958588", "anchor_text": "direct link"}, {"url": "https://pixnio.com/media/crowd-town-architecture-street-building", "anchor_text": "source"}, {"url": "https://medium.com/tag/detectron2?source=post_page-----bc648ea569e5---------------detectron2-----------------", "anchor_text": "Detectron2"}, {"url": "https://medium.com/tag/python?source=post_page-----bc648ea569e5---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----bc648ea569e5---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/ai?source=post_page-----bc648ea569e5---------------ai-----------------", "anchor_text": "AI"}, {"url": "https://medium.com/tag/neural-networks?source=post_page-----bc648ea569e5---------------neural_networks-----------------", "anchor_text": "Neural Networks"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbc648ea569e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-detectron2-demo-bc648ea569e5&user=Jakub+Adamczyk&userId=a2bd22267201&source=-----bc648ea569e5---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbc648ea569e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-detectron2-demo-bc648ea569e5&user=Jakub+Adamczyk&userId=a2bd22267201&source=-----bc648ea569e5---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbc648ea569e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-detectron2-demo-bc648ea569e5&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----bc648ea569e5--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fbc648ea569e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-detectron2-demo-bc648ea569e5&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----bc648ea569e5---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----bc648ea569e5--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----bc648ea569e5--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----bc648ea569e5--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----bc648ea569e5--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----bc648ea569e5--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----bc648ea569e5--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----bc648ea569e5--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----bc648ea569e5--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@jakubadamczyk10?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@jakubadamczyk10?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Jakub Adamczyk"}, {"url": "https://medium.com/@jakubadamczyk10/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "89 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa2bd22267201&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-detectron2-demo-bc648ea569e5&user=Jakub+Adamczyk&userId=a2bd22267201&source=post_page-a2bd22267201--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F494f9b4fd578&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-detectron2-demo-bc648ea569e5&newsletterV3=a2bd22267201&newsletterV3Id=494f9b4fd578&user=Jakub+Adamczyk&userId=a2bd22267201&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}