{"url": "https://towardsdatascience.com/using-regular-expression-in-genetics-with-python-175e2b9395c2", "time": 1682995681.242817, "path": "towardsdatascience.com/using-regular-expression-in-genetics-with-python-175e2b9395c2/", "webpage": {"metadata": {"title": "Using Regular Expression in Genetics with Python | by Stephen Fordham | Towards Data Science", "h1": "Using Regular Expression in Genetics with Python", "description": "Regular expressions (regex) in Python can be used to help us find patterns in Genetics. We can exploit regex when we analyse Biological sequence data, as very often we are looking for patterns in\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/StephenFordham", "anchor_text": "https://github.com/StephenFordham", "paragraph_index": 26}], "all_paragraphs": ["Regular expressions (regex) in Python can be used to help us find patterns in Genetics. We can exploit regex when we analyse Biological sequence data, as very often we are looking for patterns in DNA, RNA or proteins. These sequence data types are just strings and therefore remarkable amendable for pattern analysis using regex. We may be interested in searching for: nucleotide repeats responsible for human disease, DNA transcription factor binding sites, restriction enzyme cut sites and specific mutations. To be able to use regex to achieve this, we must first gain a grasp of the basic syntax of regex and some functions specific to the regex module. In the first section of this tutorial, examples will use the 4 DNA nucleotides; A, T, G and C.", "1. Introduce regex syntax with examples specific to genetics", "2. Show how we can use common regex functions to find patterns", "The following characters are special in regexes: $^.*+?{ } [ ] | \\ and are shown in Table 1 with a corresponding description. The ^ and $ metacharacters are known as anchors and represent positions in the input string. The ^ matches at the start of a string and the $ matches at the end of a string. The pattern ^CCC will match CCCGGG, but not GGGCCC. The pattern AAA$ will match TTTAAA, but not AAAGGG.", "A . period (or decimal point) is a wildcard that finds any character. If a protein kinase had the consensus sequence \u2018RXYVHXFDEXK\u2019 where X denotes any amino acid, then the regex \u2018R.YVH.FDE.K\u2019 would succeed in searching for substrates. However, a note of warning, the period (.), will match any character which is not even a letter. Therefore, the pattern \u2018R.YVH.FDE.K\u2019 would match \u2018R8YVH\u00a3FDE&K\u2019 which may not be what we want.", "The metacharacters, *, +, ?, and { } are quantifier operators. These are used to specify repetitions of a character or character group. An asterisks following a character or group means that, that character or group is optional, but can also be repeated. An example in the field of genetics where the asterisks metacharacter would be employed would be when we are searching through RNA-seq reads to find sequences which are 3\u2019-polyadenylated by searching for AAAAAA*$. This regex would find exactly 5 A\u2019s followed by zero or more A\u2019s. The + metacharacter is akin to *, except that it finds the character one or more times. A ? finds the preceding character or character group zero or one times.", "If it is a requirement to be specific or to match a specific number of repeats we can use curly bracket notation. A single number in the curly brackets will match exactly the number of repeats in the preceding character or group. For example CA{3}GATT will match CAAAGATT, but not CAAGATT, or CAAAAGATT. To specify a range, we can use the same curly brackets syntax, and use the general pattern where {n, x} finds the preceding character or group between n and x times inclusive. For example, the TCG{2, 4}A, will match the patterns TCGGA, TCGGGA, TCGGGA, but not TCGA, or TCGGGGGA. A summary of these metacharacters can be found in Table 1.", "The re module is used to write regular expressions (regex) in Python. To load this module, we need to use the import statement. The following line of code is necessary to include at the top of your code:", "In order to use a tool from the regular expression module, it is necessary to prefix it with the module name. The simplest regular expression function, re.search ( ) determines whether or not a pattern exists somewhere within a string. re.search ( ) takes 2 arguments, which are both strings. The first argument is the pattern you want to search for, and the second argument is the string that you want to search in. For clarity, in the example below, I have included the 2 arguments as keyword arguments. It is usually not necessary to include these keyword arguments. For completeness, I have included the alternative syntaxic version commented out.", "A simple example is illustrated in the code below; here we are looking for the presence of a tri-nucleotide repeat of A bases within a hard-coded DNA variable.", "The output of many re function calls is a match object. If we look at the match object above, we can determine whether there was a match. The span identifies the index of the string where the matches occurred, and the match identifies the exact string that got matched.", "A regular expression search can also be used as part of a conditional statement:", "Often in our scripts, we want to not only determine whether a match occurred, but where precisely this match occurred. We may also want to extract the match itself. Fortunately, Python makes it simple to extract match object values such as the index positions of the match and the exact string that matched. This can be achieved by employing a few methods on the match object.", "re.search () can also be utilised to find more flexible patterns. By way of an example, the NCII restriction enzyme recognises the nucleotide sequence pattern, \u2018CCSGG\u2019, where the nucleotide code \u2018S\u2019 can be either a C or a G. Instead of writing two regular expression searches, we can capture this variation using an alteration. Here, to represent a number of different alternatives, we write the alternatives inside parentheses and separate them using a pipe character (the | metacharacter is also known as the alternation operator, see Table 1).", "The utility of alternation groups stems from their ability to be used as units of repetitions. For example, to identify whether a sequence is delimited by a start and stop codon and therefore has the potential to be an open reading frame, we could write the following regex expression:", "This regex will search for either UAA, UAG, and UGA at the end of the sequence. To improve upon this regex, and ensure the start and stop codon are in the same frame we could change the regex to:", "This checks that all the characters between the start and stop codon are a multiple of 3.", "Character groups can also be used to capture variation within a single pattern. Consider the consensus N-glycosylation site in proteins. This sequence motif has the pattern; Asn, followed by anything but Pro, followed by either Ser or Thr, followed by anything but Pro.", "Using the corresponding single letter amino acid codes, with character groups, we can write this pattern as follows:", "This pattern will identify, the single letter code N, followed by any character that is not P (see Table 1, negated character groups), followed by either an S or a T, followed by any character that is not a P. A pair of square brackets with a list of characters inside them can represent any one of these characters (refer to Table 1).", "The real power of regex is exploited when these tools are used together. Consider the following scenario. Many human hereditary neurodegenerative disorders, such as Huntington\u2019s disease (HD) have been linked to the anomalous expansion in the number of trinucleotide repeats in particular genes. The pathological severity of HD correlates with the number of (CAG)n repeats in exon-1 of the gene htt which encodes the protein huntington. In Huntington\u2019s disease, a higher number of repeats means an earlier onset of disease and a more rapid disease progression. The CAG codon specifies glutamine, and HD belongs to a broad class of polyglutamine diseases. Healthy (wild-type) variants of this gene feature between 6\u201335 tandem repeats, whereas more than 35 repeats virtually assure the disease.", "We can use regex in order to decipher the polyglutamine repeat number. This firstly involves writing a pattern to find the tri-nucleotide repeat number above a set threshold.", "The Codon CAA also encodes glutamine, therefore, in the htt_pattern above we must use the | alternation operator. We can then use the curly brackets notation discussed above to specify how many time we want to find this pattern. Here, I have chosen 18 or more times, by deliberately leaving off the upper limit.", "I first searched the NCBI nucleotide database for the htt mRNA sequence, and downloaded it to my working directory. I then read this sequence in, and used my pattern to determine the lenght of the glutamine tandem repeats which are above 18. For clarity I have highlighted the match in the NCBI FASTA file. I also used the re.findall ( )function, as re.search ( ) would only find the first occurrence, and it is possible in this case that many matches could be found.", "This tutorial has provided a brief introduction into how regex can be applied specifically in genetics. Knowledge in regexes is highly transferable, in particular syntactic forms and functionality behave roughly similar in Python and in many other mainstream programming languages such as Perl and R.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Articles on Data Science and Programming https://github.com/StephenFordham"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F175e2b9395c2&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-regular-expression-in-genetics-with-python-175e2b9395c2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-regular-expression-in-genetics-with-python-175e2b9395c2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-regular-expression-in-genetics-with-python-175e2b9395c2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-regular-expression-in-genetics-with-python-175e2b9395c2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----175e2b9395c2--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----175e2b9395c2--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@stephenfordham?source=post_page-----175e2b9395c2--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@stephenfordham?source=post_page-----175e2b9395c2--------------------------------", "anchor_text": "Stephen Fordham"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5d3f46276e7e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-regular-expression-in-genetics-with-python-175e2b9395c2&user=Stephen+Fordham&userId=5d3f46276e7e&source=post_page-5d3f46276e7e----175e2b9395c2---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F175e2b9395c2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-regular-expression-in-genetics-with-python-175e2b9395c2&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F175e2b9395c2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-regular-expression-in-genetics-with-python-175e2b9395c2&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/photos/J28Nn-CDbII", "anchor_text": "Unsplash"}, {"url": "https://medium.com/tag/science?source=post_page-----175e2b9395c2---------------science-----------------", "anchor_text": "Science"}, {"url": "https://medium.com/tag/python?source=post_page-----175e2b9395c2---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/programming?source=post_page-----175e2b9395c2---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-science?source=post_page-----175e2b9395c2---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----175e2b9395c2---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F175e2b9395c2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-regular-expression-in-genetics-with-python-175e2b9395c2&user=Stephen+Fordham&userId=5d3f46276e7e&source=-----175e2b9395c2---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F175e2b9395c2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-regular-expression-in-genetics-with-python-175e2b9395c2&user=Stephen+Fordham&userId=5d3f46276e7e&source=-----175e2b9395c2---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F175e2b9395c2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-regular-expression-in-genetics-with-python-175e2b9395c2&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----175e2b9395c2--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F175e2b9395c2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-regular-expression-in-genetics-with-python-175e2b9395c2&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----175e2b9395c2---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----175e2b9395c2--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----175e2b9395c2--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----175e2b9395c2--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----175e2b9395c2--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----175e2b9395c2--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----175e2b9395c2--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----175e2b9395c2--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----175e2b9395c2--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@stephenfordham?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@stephenfordham?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Stephen Fordham"}, {"url": "https://medium.com/@stephenfordham/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "977 Followers"}, {"url": "https://github.com/StephenFordham", "anchor_text": "https://github.com/StephenFordham"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5d3f46276e7e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-regular-expression-in-genetics-with-python-175e2b9395c2&user=Stephen+Fordham&userId=5d3f46276e7e&source=post_page-5d3f46276e7e--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fbd4ed43cae00&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-regular-expression-in-genetics-with-python-175e2b9395c2&newsletterV3=5d3f46276e7e&newsletterV3Id=bd4ed43cae00&user=Stephen+Fordham&userId=5d3f46276e7e&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}