{"url": "https://towardsdatascience.com/the-most-elegant-python-object-oriented-programming-b38d75f4ae7b", "time": 1683010748.8894541, "path": "towardsdatascience.com/the-most-elegant-python-object-oriented-programming-b38d75f4ae7b/", "webpage": {"metadata": {"title": "The Most Elegant Python Object-Oriented Programming | by Christopher Tao | Towards Data Science", "h1": "The Most Elegant Python Object-Oriented Programming", "description": "Best practice of Object-Oriented Programming in Python. Very elegant. Using marshmallow for validating user input fields/attributes in backend development."}, "outgoing_paragraph_urls": [], "all_paragraphs": ["It is known that the strength of Python is its flexibility. For example, Python is one of the easiest programming languages for Object-Oriented Programming. However, it is also sometimes criticised because it is \u201ctoo flexible\u201d.", "In this article, I\u2019m going to introduce the most elegant way that I believe to program object-orient using Python.", "The key to the way is a library called marshmallow.", "You can easily install the library by pip install marshmallow.", "Let\u2019s start it by declaring a User class and keep it simple for demonstrating purposes.", "OK. Our User class only has two attributes: name and age. Please be noticed that I have also implemented the __repr__ method, so that we can easily output the instance to verify it.", "Then, we need to import some modules and methods from the librarymarshmallow.", "Here I imported pprint because we\u2019re going to print many dictionaries and lists. Just want to make it better looking.", "Now, how we should use marshmallow? Simply define a \u201cSchema\u201d for our User class.", "It is quite straightforward. For each attribute, we need to declare it is fields and then followed by the type.", "The annotation @post_load is optional, which is needed if we want to load the schema as an instance of any class. Therefore, we need it in our case because we want to generate User instances. The make method will simply make use of all the arguments to instantiate the instance.", "If we have a dictionary (JSON object) and we want an instance, here is the code.", "How easy it is! Just call the load() method of the schema and we deserialised the JSON object to the class instance.", "What if we have a JSON array containing multiple objects to be deserialised? We don\u2019t need to write a for-loop, simply specify many=True as follows.", "OK. We\u2019ve known that we can use the load() method to convert a dictionary to instances. How about the other way around? We can use dump() method as follows.", "In this example, I simply used the users which is a list of user instances generated from the previous example. It can be seen that the list of user instances are converted into a JSON array in a single line of code!", "Do you think marshmallow can only serialise/deserialise instances? If so, I probably won\u2019t share this as a story here. The most powerful feature of this library is validation.", "Let\u2019s start with a simple example here. To begin with, we need to import the ValidationError which is an exception from the library.", "Remember we declared our UserSchema above with the field age as Integer? What if we pass an invalid value in?", "Please note that in the above JSON array, the third object \u201cChris\u201d has an invalid age format, which cannot be converted into an integer. Let\u2019s now use load() method to deserialise the array.", "The exception is caught and it tells us \u201cNot a valid integer\u201d. Imagine that we are developing a web application, it is even not necessary to be bothered by writing the error messages!", "Also, in this example, only the third object has a validation issue. The error message actually told us that it happened at the index 2. Also, the valid objects can still be output.", "Of course, it is not enough to validate only against the data types. The library supports much more validation methods.", "Let\u2019s add one more attribute gender to the User class.", "Then, let\u2019s define the schema with validations. We also need to import the validate feature from the library.", "Here, we added validations to all these three fields.", "Let\u2019s define a JSON object with all invalid values as follows.", "Then, let\u2019s try to load it.", "It is not surprising that the exceptions are caught, but when I first time tried this, I was really surprised that the error messages are out-of-box. It saves a lot of time for us to write the validating error messages.", "You might ask that it is still kind of limited to use the built-in validating methods such as range, length and \u201cone of\u201d from the above example. What if we want to customise the validating method? Of course, you can.", "Here we defined our validation method validate_age with customised logic as well as the message. Let\u2019s define a JSON object to test it. In the following object, the age is less than 18.", "Now, it is using your customised logic and error message.", "There is another way to implement this, which I think is more elegant.", "So, in this example, we use annotation to define the validation method inside the class.", "You can also define some fields that are required.", "In this example, we defined name and age are required fields. Now, let\u2019s test it using an object without email.", "OK. No problem at all. What if we have an object without name and age?", "It complains and provides the error messages we define for the required fields.", "Sometimes, we may want to define some fields with default values. So, the users might not need to input it and the default values will be utilised.", "In marshmallow, there are two ways to define \u201cdefault\u201d values:", "In the above example, we used both the two keywords and experimented both load() and dump() methods with an empty object. It can be seen that both of them were added the name field with default values.", "Keep going, not finished yet :)", "Sometimes, we may have some discrepancy implementation between our classes and the actually JSON data in terms of the keys/attribute names.", "For example, in our class, we defined name attribute. However, in the JSON object, we have username which means the same field but named differently. In this case, we don\u2019t have to re-implement our classes nor convert the keys in the JSON object.", "Please be noticed that we have name in the User class, whereas in UserSchema we have username, but for the field username, we defined its attribute should be called name.", "Let\u2019s try to dump a user instance.", "It correctly serialised the instance with the field name username.", "Even though we passed the JSON object with the key username, it can still deserialise it to the User instance without any problems.", "Last but not least, marshmallow supports nested attributes without any problems.", "We defined two classes Address and User. The classUser has an attribute address, which is of type Address. Let\u2019s test the classes by instantiating a user object.", "Now, we are going to define the schema as follows.", "The trick here is to use fields.Nested() to define a field using another schema. We have already got a user instance above. Let\u2019s dump it into a JSON object.", "As shown, the user instance has been serialised into a nested JSON object!", "Of course, the other way around will work, too.", "In this article, I have introduced how to use the library marshmallow to extremely simplify Object-Oriented Programming in Python in practice. It is the most elegant way that I believe to make use of OO <-> JSON in Python.", "All the code is available in my Google Colab:", "If you feel my articles are helpful, please consider joining Medium Membership to support me and thousands of other writers! (Click the link above)", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fb38d75f4ae7b&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-most-elegant-python-object-oriented-programming-b38d75f4ae7b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-most-elegant-python-object-oriented-programming-b38d75f4ae7b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-most-elegant-python-object-oriented-programming-b38d75f4ae7b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-most-elegant-python-object-oriented-programming-b38d75f4ae7b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----b38d75f4ae7b--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----b38d75f4ae7b--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://qiuyujx.medium.com/?source=post_page-----b38d75f4ae7b--------------------------------", "anchor_text": ""}, {"url": "https://qiuyujx.medium.com/?source=post_page-----b38d75f4ae7b--------------------------------", "anchor_text": "Christopher Tao"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb8176fabf308&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-most-elegant-python-object-oriented-programming-b38d75f4ae7b&user=Christopher+Tao&userId=b8176fabf308&source=post_page-b8176fabf308----b38d75f4ae7b---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb38d75f4ae7b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-most-elegant-python-object-oriented-programming-b38d75f4ae7b&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb38d75f4ae7b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-most-elegant-python-object-oriented-programming-b38d75f4ae7b&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://pixabay.com/users/TheDigitalArtist-202249/", "anchor_text": "TheDigitalArtist"}, {"url": "https://pixabay.com/illustrations/banner-jigsaw-pattern-design-5190182/", "anchor_text": "Pixabay"}, {"url": "https://pixabay.com/users/Zorro4-796252/", "anchor_text": "Zorro4"}, {"url": "https://pixabay.com/illustrations/hibiscus-marshmallow-blue-flower-2081312/", "anchor_text": "Pixabay"}, {"url": "https://pixabay.com/users/geralt-9301/", "anchor_text": "geralt"}, {"url": "https://pixabay.com/illustrations/business-planning-concepts-hand-5338474/", "anchor_text": "Pixabay"}, {"url": "https://colab.research.google.com/drive/1mZVBiVgk3OTyJqFFTw6NYRThtjyZne9X?usp=sharing", "anchor_text": "Marshmallow_Object-Oriented_Python.ipynbExperimentNotebookForTowardsDataScienceArticlecolab.research.google.com"}, {"url": "https://medium.com/@qiuyujx/membership", "anchor_text": "Join Medium with my referral link \u2014 Christopher TaoAs a Medium member, a portion of your membership fee goes to writers you read, and you get full access to every story\u2026medium.com"}, {"url": "https://medium.com/tag/python?source=post_page-----b38d75f4ae7b---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/programming?source=post_page-----b38d75f4ae7b---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/software-development?source=post_page-----b38d75f4ae7b---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/technology?source=post_page-----b38d75f4ae7b---------------technology-----------------", "anchor_text": "Technology"}, {"url": "https://medium.com/tag/artficial-intelligence?source=post_page-----b38d75f4ae7b---------------artficial_intelligence-----------------", "anchor_text": "Artficial Intelligence"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb38d75f4ae7b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-most-elegant-python-object-oriented-programming-b38d75f4ae7b&user=Christopher+Tao&userId=b8176fabf308&source=-----b38d75f4ae7b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb38d75f4ae7b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-most-elegant-python-object-oriented-programming-b38d75f4ae7b&user=Christopher+Tao&userId=b8176fabf308&source=-----b38d75f4ae7b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb38d75f4ae7b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-most-elegant-python-object-oriented-programming-b38d75f4ae7b&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----b38d75f4ae7b--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fb38d75f4ae7b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-most-elegant-python-object-oriented-programming-b38d75f4ae7b&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----b38d75f4ae7b---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----b38d75f4ae7b--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----b38d75f4ae7b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----b38d75f4ae7b--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----b38d75f4ae7b--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----b38d75f4ae7b--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----b38d75f4ae7b--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----b38d75f4ae7b--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----b38d75f4ae7b--------------------------------", "anchor_text": ""}, {"url": "https://qiuyujx.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://qiuyujx.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Christopher Tao"}, {"url": "https://qiuyujx.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "8.7K Followers"}, {"url": "https://www.linkedin.com/in/christopher-tao-5717a274/", "anchor_text": "https://www.linkedin.com/in/christopher-tao-5717a274/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb8176fabf308&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-most-elegant-python-object-oriented-programming-b38d75f4ae7b&user=Christopher+Tao&userId=b8176fabf308&source=post_page-b8176fabf308--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F1d2af94a683f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-most-elegant-python-object-oriented-programming-b38d75f4ae7b&newsletterV3=b8176fabf308&newsletterV3Id=1d2af94a683f&user=Christopher+Tao&userId=b8176fabf308&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}