{"url": "https://towardsdatascience.com/a-beginners-guide-to-simulating-dynamical-systems-with-python-a29bc27ad9b1", "time": 1683004122.835816, "path": "towardsdatascience.com/a-beginners-guide-to-simulating-dynamical-systems-with-python-a29bc27ad9b1/", "webpage": {"metadata": {"title": "A Beginner\u2019s Guide to Simulating Dynamical Systems with Python | by Christian Hubbs | Towards Data Science", "h1": "A Beginner\u2019s Guide to Simulating Dynamical Systems with Python", "description": "It\u2019s basically as simple of a system as we can work with. Don\u2019t let this simplicity fool you though, it can create some interesting dynamics. We\u2019ll use this as a starting point to introduce some\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.datahubbs.com/simulating-dynamical-systems-with-python/", "anchor_text": "original post here", "paragraph_index": 3}, {"url": "https://brilliant.org/wiki/rotational-form-of-newtons-second-law/", "anchor_text": "rotational motion", "paragraph_index": 5}, {"url": "https://en.wikipedia.org/wiki/Semi-implicit_Euler_method", "anchor_text": "Euler\u2019s Method", "paragraph_index": 20}, {"url": "https://en.wikipedia.org/wiki/Taylor_series", "anchor_text": "Taylor Series Expansion", "paragraph_index": 21}, {"url": "https://towardsdatascience.com/how-quickly-does-an-influenza-epidemic-grow-7e95786115b3", "anchor_text": "spread of a virus outbreak through a population", "paragraph_index": 32}, {"url": "https://bit.ly/2scbU1P", "anchor_text": "https://bit.ly/2scbU1P", "paragraph_index": 34}], "all_paragraphs": ["We\u2019ve just got a mass of m hanging from a string with length L that is swinging back and forth.", "It\u2019s basically as simple of a system as we can work with. Don\u2019t let this simplicity fool you though, it can create some interesting dynamics. We\u2019ll use this as a starting point to introduce some control theory and compare that to continuous control reinforcement learning. Before we get to that, we need to spend some time understanding the dynamics of the system and how to simulate it!", "We derive the dynamics of the mass and pendulum system, and build two separate simulation models using one of Python\u2019s integration packages and using Euler\u2019s Method. This provides a good stepping stone for more complex systems; many joints and systems in robotic control can even be modeled as pendulums that are linked together.", "You can also view the original post here where the equations are formatted much more nicely than Medium allows.", "If we want to simulate this system, we need to understand the dynamics. To start, we\u2019ll draw a free-body diagram (FBD) of the simple pendulum where we show the length, mass, gravity, and force vectors acting on the system.", "Drawing the FBD helps to make all of the forces explicit to ensure we don\u2019t miss anything. Once we have that, we can use Newton\u2019s 2nd Law of Motion to get the dynamics. You\u2019re probably familiar with the F=ma form, but we\u2019ll modify this slightly for rotational motion by writing it as:", "n this case, \u03c4 is the torque about the origin, III is the rotational inertia, and \u03b1 is the angular acceleration. The torque is given by the perpendicular component of force applied to the mass (the moment about the origin), rotational inertia is just I=mL\u00b2, and the angular acceleration is the second time derivative of \u03b8. We can plug these values into Newton\u2019s 2nd Law above, and we get:", "For completeness, we can also consider friction on the pendulum, which gives us:", "The first thing to notice, we have a second-order ODE (ordinary differential equation) on our hands by virtue of the second derivative (\u03b8\u00a8) in our equation. We want to reduce this to a first-order system to integrate and simulate it. This comes at a cost of complexity because we will break our single, second-order system into two first-order equations. The cost is relatively minor in this case, but for more complicated models (which we\u2019ll get to in future posts) this can become hairy.", "To do this, we need to introduce two new variables, we\u2019ll call them \u03b8_1\u200b and \u03b8_2\u200b and define them as:", "This helps because we now can say \u03b8\u02d9_2=\u03b8\u00a8 and reduce the order of our equation.", "With our equations set up, let\u2019s turn to the code to model this.", "Start by importing the relevant libraries.", "We need to set some of our values. Let the mass and length be 1 kg and 1 m respectively, and for now at least, we\u2019ll ignore friction by setting b=0. We\u2019ll simulate the pendulum swinging starting from \u03c0/2 (raised 90 degrees to the right) and released with no initial velocity. We can simulate this for 10 seconds with a time discretization (\u0394t) of 0.02 seconds.", "We\u2019ll demonstrate two ways to simulate this, first by numerical integration using scipy, and then again using Euler\u2019s method.", "To integrate using scipy, we need to build a function for our model. We\u2019ll call it int_pendulum_sim for our integrated simulation. This model will take our initial values for \u03b8_1\u200b and \u03b8_2\u200b (labeled theta_init above) and integrate for a single time step. It then returns the resulting theta values. The function itself is just going to be two equations for \u03b8\u02d9_1\u200b and \u03b8\u02d9_2\u200b that we derived above.", "We can simulate our system by passing our function as an argument to scipy.integrate.odeint. In addition, we need to give our initial values and the time to simulate over.", "The odeint function takes these inputs and integrates our \u03b8\u02d9\\dot{\\theta}\u03b8\u02d9 values for us, then feeds those results back into the function again as the initial conditions for the next time step. This gets repeated until we\u2019ve integrated over all of the time steps t.", "We can plot \u03b8 and \u03b8\u02d9 to see how the position and velocity evolve over time.", "We have no friction or other force in our model, so the pendulum is just going to oscillate back and forth indefinitely between \u2212\u03c0/2 and \u03c0/2. If you increase the initial velocity, to say, 10 rad/s, you\u2019ll see the position continue to increase as the model shows it circling around again and again.", "Solving the model via integration is relatively easy, but integration can be very expensive, particularly for larger models. If we want to see the long-term dynamics of the model, we can use Euler\u2019s Method to integrate and simulate the system instead. This is how control problems such as Cart-Pole are solved in OpenAI and allows us to set-up problems for RL control.", "To do this, we need to get the Taylor Series Expansion (TSE) of our ODE\u2019s. The TSE is just a way to approximate a function. You get more accurate the more you expand the series. For our purposes, we\u2019re only going to expand to the first derivative and truncate the higher order terms.", "First, note we need a function for \u03b8(t). If we apply the TSE to \u03b8(t) about t-t_0\u200b, we get:", "Where O(t\u00b2) simply represents our higher order terms, which can be dropped without losing much fidelity. Note that this just follows from the general formula for the TSE. With this equation, we can then refer back to our ODE substitutions above, namely:", "With this, we can link the TSE with our ODE\u2019s such that:", "This gives us a convenient way to update our model at each time step to get the new value for \u03b8_1\u200b(t). We can repeat the expansion and substitution for \u03b8\u02d9(t) to get the following:", "As we loop through these in our simulation, we\u2019ll update t0t_0t0\u200b to be the previous time step, so we\u2019ll be incrementally moving the model forward. Also, note that this is the semi-implicit Euler method, meaning that in our second equation, we\u2019re using the most recent \u03b8_1\u200b(t) that we calculated rather than \u03b8_1\u200b(t_0\u200b) as a straight application of the Taylor Series Expansion would warrant. We make this subtle substitution because, without it, our model would diverge. Essentially, the approximation we make using TSE has some error in it (remember, we threw away those higher order terms) and this error compounds. In this application, the error introduces new energy into our pendulum \u2014 something clearly in violation of the first law of thermodynamics. Making this substitution fixes all of that.", "The plot looks good, so let\u2019s see if it matches our previous results.", "The mean-squared error between the different methods are incredibly close, meaning we\u2019ve got a pretty good approximation.", "We did this using two different methods because I said it\u2019s faster to apply the Euler method than to solve via integration with odeint. Rather than take my word for it, let\u2019s test that claim.", "And the Euler method comes out on top with a ~2X speed up vs. the integration approach.", "With that, we learned how to build and simulate a dynamic model from first principles and apply it to a simple, frictionless pendulum.", "Dynamical systems like this are incredibly powerful for understanding nature. I recently wrote a post using these same techniques which show how we can simulate the spread of a virus outbreak through a population. ODE\u2019s are also great for feedback control and other relevant applications in robotics and engineering, so getting a handle on basic numeric integration is a must!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "AI/ML researcher writing about technology, economics, and business. Connect with me: https://bit.ly/2scbU1P"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fa29bc27ad9b1&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-beginners-guide-to-simulating-dynamical-systems-with-python-a29bc27ad9b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-beginners-guide-to-simulating-dynamical-systems-with-python-a29bc27ad9b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-beginners-guide-to-simulating-dynamical-systems-with-python-a29bc27ad9b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-beginners-guide-to-simulating-dynamical-systems-with-python-a29bc27ad9b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----a29bc27ad9b1--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a29bc27ad9b1--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://christiandhubbs.medium.com/?source=post_page-----a29bc27ad9b1--------------------------------", "anchor_text": ""}, {"url": "https://christiandhubbs.medium.com/?source=post_page-----a29bc27ad9b1--------------------------------", "anchor_text": "Christian Hubbs"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8c5ed989fb1b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-beginners-guide-to-simulating-dynamical-systems-with-python-a29bc27ad9b1&user=Christian+Hubbs&userId=8c5ed989fb1b&source=post_page-8c5ed989fb1b----a29bc27ad9b1---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa29bc27ad9b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-beginners-guide-to-simulating-dynamical-systems-with-python-a29bc27ad9b1&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa29bc27ad9b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-beginners-guide-to-simulating-dynamical-systems-with-python-a29bc27ad9b1&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@dmey503?utm_source=medium&utm_medium=referral", "anchor_text": "Dan Meyers"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://www.datahubbs.com/simulating-dynamical-systems-with-python/", "anchor_text": "original post here"}, {"url": "https://brilliant.org/wiki/rotational-form-of-newtons-second-law/", "anchor_text": "rotational motion"}, {"url": "https://en.wikipedia.org/wiki/Semi-implicit_Euler_method", "anchor_text": "Euler\u2019s Method"}, {"url": "https://en.wikipedia.org/wiki/Taylor_series", "anchor_text": "Taylor Series Expansion"}, {"url": "https://towardsdatascience.com/how-quickly-does-an-influenza-epidemic-grow-7e95786115b3", "anchor_text": "spread of a virus outbreak through a population"}, {"url": "https://medium.com/tag/physics?source=post_page-----a29bc27ad9b1---------------physics-----------------", "anchor_text": "Physics"}, {"url": "https://medium.com/tag/python?source=post_page-----a29bc27ad9b1---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/control?source=post_page-----a29bc27ad9b1---------------control-----------------", "anchor_text": "Control"}, {"url": "https://medium.com/tag/integration?source=post_page-----a29bc27ad9b1---------------integration-----------------", "anchor_text": "Integration"}, {"url": "https://medium.com/tag/simulation?source=post_page-----a29bc27ad9b1---------------simulation-----------------", "anchor_text": "Simulation"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa29bc27ad9b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-beginners-guide-to-simulating-dynamical-systems-with-python-a29bc27ad9b1&user=Christian+Hubbs&userId=8c5ed989fb1b&source=-----a29bc27ad9b1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa29bc27ad9b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-beginners-guide-to-simulating-dynamical-systems-with-python-a29bc27ad9b1&user=Christian+Hubbs&userId=8c5ed989fb1b&source=-----a29bc27ad9b1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa29bc27ad9b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-beginners-guide-to-simulating-dynamical-systems-with-python-a29bc27ad9b1&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----a29bc27ad9b1--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fa29bc27ad9b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-beginners-guide-to-simulating-dynamical-systems-with-python-a29bc27ad9b1&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----a29bc27ad9b1---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----a29bc27ad9b1--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----a29bc27ad9b1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----a29bc27ad9b1--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----a29bc27ad9b1--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----a29bc27ad9b1--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----a29bc27ad9b1--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----a29bc27ad9b1--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----a29bc27ad9b1--------------------------------", "anchor_text": ""}, {"url": "https://christiandhubbs.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://christiandhubbs.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Christian Hubbs"}, {"url": "https://christiandhubbs.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "657 Followers"}, {"url": "https://bit.ly/2scbU1P", "anchor_text": "https://bit.ly/2scbU1P"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8c5ed989fb1b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-beginners-guide-to-simulating-dynamical-systems-with-python-a29bc27ad9b1&user=Christian+Hubbs&userId=8c5ed989fb1b&source=post_page-8c5ed989fb1b--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fd00e5d4c3897&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-beginners-guide-to-simulating-dynamical-systems-with-python-a29bc27ad9b1&newsletterV3=8c5ed989fb1b&newsletterV3Id=d00e5d4c3897&user=Christian+Hubbs&userId=8c5ed989fb1b&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}