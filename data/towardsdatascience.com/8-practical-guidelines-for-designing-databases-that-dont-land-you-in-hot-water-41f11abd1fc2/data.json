{"url": "https://towardsdatascience.com/8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water-41f11abd1fc2", "time": 1683017979.632469, "path": "towardsdatascience.com/8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water-41f11abd1fc2/", "webpage": {"metadata": {"title": "8 Practical Guidelines for Designing Databases That Don\u2019t Land You in Hot Water | by Skye Tran | Towards Data Science", "h1": "8 Practical Guidelines for Designing Databases That Don\u2019t Land You in Hot Water", "description": "Designing databases presents a conundrum: How are you supposed to design a database when you\u2019ve never designed something similar? Like, how are you supposed to know what works and what doesn\u2019t when\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.amazon.com.au/SQL-Antipatterns-Programming-Pragmatic-Programmers-ebook/dp/B00A376BB2", "anchor_text": "SQL Antipatterns", "paragraph_index": 17}, {"url": "https://plato.stanford.edu/entries/ockham/", "anchor_text": "William of Ockham", "paragraph_index": 22}], "all_paragraphs": ["Designing databases presents a conundrum: How are you supposed to design a database when you\u2019ve never designed something similar?", "Like, how are you supposed to know what works and what doesn\u2019t when all the tips and tricks you Google are slightly different or worst still, contradicting one another? Or how are you supposed to avoid costly mistakes that could impede the performance when you are building everything from scratch? Here are 8 things you can do.", "Disclaimer: This article focuses on guidelines to design a relational database, which is arguably the most commonly used type. Some guidelines might be irrelevant to non-relational database design and should be taken with a pinch of salt.", "If you should take away one thing from this post, it should be this one. Businesses do not spend money to create a database just to get normalisation, index, query performance and optimisation right. They invest a lump sum because there exists a crucial problem, and the problem has to be solved. This means at the end of the day, none of those fancy database design techniques matters if the problem has not been solved.", "So before designing anything for the database, I think it\u2019s crucial to ask yourself 4 questions.", "And yes, I know it\u2019s challenging to become experts in real-life operations, especially when we all have tight deadlines to meet. But it\u2019s not good enough to stop at a partial understanding and rush to deliver something either. For me, as a professional, this fundamental reminder means to commit the time needed to ask enough questions, gather information, and put some serious thoughts into the problem, the approach, the tasks, the desired solution and the responsibility that comes with my judgment. We all want to be proud of creating a robust and thoughtful solution instead of building a cumbersome monster, am I correct?", "Before creating the first draft of your database model, getting some basic ground rules for naming objects ready will save you heaps of time to communicate with other team members, business users and stakeholders.", "But don\u2019t waste one entire week to agree on naming convention either. Someone just has to propose a set of rules, send it out to everyone and finalise it within a meeting. Keep it short and sweet (less than half an A4 page is ideal) because no one likes the feeling of referring to long documentation. Exceptions will arise as new fields and tables are identified, but those specific scenarios could be discussed during the daily team catch-up.", "If you need some inspiration, here are some basic rules that I have been using. You might follow a totally different set of rules, and that\u2019s perfectly fine. The most important thing to keep in mind is that names are meant to communicate certain meanings, so make them meaningful and consistent for the business users.", "Normalisation is regarded as one of the best design practices to adhere to. But is it true all the time? Well, think again.", "People don\u2019t build databases for the sake of having them exist in isolation. Databases are built to capture and process data for a specific application. To normalise or not depends on whether the application is transactional and analytical.", "Databases built to support transactional application needs to ensure the data is free from logical inconsistencies during insertion, update and deletion. For example, a casual staff has a fixed hourly rate. Normalise (i.e. splitting the monthly salary records and the pay rate into 2 separate tables) eliminates the need for accountants to enter casual staff\u2019s hourly rate every month. Fewer things to enter means fewer human errors, which eventually translates to more consistent and accurate data.", "Databases built to support analytical application needs to create aggregations and calculations across multiple tables as quickly as possible. But each join between 2 tables takes time. And it\u2019s not a fun task when we have to process millions of transactional records at the same time. Therefore, we have to minimise the number of joins required to query our data, which means normalization doesn\u2019t sound like a good idea anymore in this case.", "So now we know normalization is perfect for transactional applications, yet it could be a nightmare to designed databases for analytical applications. But how do you tell which from which? Here is a quick comparison to guide you along.", "Database Teacher: Each relational table needs a primary key to avoid duplicated records.", "Someone said on a website: The best way is to use an auto-incremental integer field for the primary key.", "Na\u00efve me: Okay, I should create an auto-incremental integer field named \u201cid\u201d to be the primary key for every relational table.", "Confession time! This is a misunderstanding I used to have until Bill Karwin corrected me through his wonderful book named SQL Antipatterns. Check out that book. It\u2019s one of the most amazing SQL books out there. Meanwhile, here is my summarised explanation about this specific point so that you don\u2019t make the same mistake ever again.", "A primary key exists to represent a very important constraint: Each row in a relational database has to be unique. Any entries with the same primary key are duplicated and will be prevented from entering the database. No duplication means no double-counting when reporting business metrics such as the total number of real customers, monthly sales, employee training costs and so on.", "The above table captures the relationship between an article and the tag. For example, this article could have multiple tags associated such as database design, primary key, SQL. But the combination between \u201carticle_id\u201d and \u201ctag_id\u201d defines a unique row in this table. The \u201cid\u201d column here is the auto-increment primary key. But does it prevent duplicates from entering the database? No, it doesn\u2019t.", "Okay, how about defining a UNIQUE constraint to check that the combination between \u201carticle_id\u201d and \u201ctag_id\u201d is unique before inserting a new row? Yes, that\u2019s possible. But then why do we have to use an auto-increment \u201cid\u201d column in the first place?", "This brings us to an important guideline: If there exists a column or a combination of columns that can define a unique record based on the natural order of business and satisfy the below lists of conditions, consider using it as the primary key. This works way better than blindly creating another auto-incremented integer \u201cid\u201d column (e.g. surrogate key, GUID) just because someone said so somewhere.", "That is the famous slogan known as \u201cOckham\u2019s Razor\u201d attributed to William of Ockham, one of the most prominent philosophers during the High Middle Ages. In the database context, we can interpret it as follows: don\u2019t create additional tables or columns if that isn\u2019t necessary.", "Keep in mind that the more tables and columns a database has, the more complex and expensive the maintenance is. So if you don\u2019t gain any serious advantages other than making life a little harder for yourself, why bother?", "But after weighing both the cost and the benefits, if the verdict states that you seriously need to create more tables or columns, then here are some valid suggestions.", "On the surface, enforcing referential integrity through foreign key constraints seem to be troublesome as they can conflict with data migrated from another system. Coupled with a looming go-live date, databases are too often treated as a data dump location. And you heard someone suggests, \u201cKeep the database simple and let the application handles the validation rules.\u201d A few people nodded their heads, and all validation rules to ensure all foreign key values reference a valid, existing primary key in the parent table are built into the application.", "So what\u2019s wrong with that? Let me give you an analogy. To clean the house, we have two options: a broom and a vacuum cleaner. Which one will you go for? You may choose to grab your broom to clean the house, thinking that it will remove dust and dirt as clean a vacuum cleaner. So you spent 20 minutes to do so while all you need is 5 minutes with a vacuum cleaner. And I bet that some dust will remain under the carpet or in some corners after all of the hard work. When we refuse to let the databases do what they do best, which is to implement referential integrity, we end up making things less efficient and may never get exactly what we want.", "And don\u2019t forget applications are implemented, then upgraded or replaced, while the same data tends to live with the business (not so) happily ever after! How many times can we afford to build and rebuild the same validation rules in all sorts of applications?", "Of course, there are databases out there that don\u2019t support foreign key constraints such as MySQL\u2019s MyISAM storage engine. Unfortunately, we don\u2019t have a choice in such a case. But if the database can support foreign key constraints, then letting it handle what it does best. This will save us time and effort to do additional coding to check for referential integrity. The fewer codes to write in our application, the fewer bugs to fix and the simpler it is to maintain the entire solution. Who doesn\u2019t love a win-win situation for everyone?", "Let say you have created the first draft of the data models, or you have lost count on how many times you have made changes to it, yet how do you know whether you have covered everything? Well, the data model itself might provide you with so many clues. The only thing we have to do is to start looking at the model and ask all sorts of questions about the entities and relationships.", "But what questions should you ask? Let me share with you some questions that I usually ponder as I use the data model to learn and review my work.", "At the beginning of this post, I have emphasised the importance of understanding the problem before getting started. But learning about the problem doesn\u2019t stop as we have come up with the data model because the first draft is never gonna be perfect. Therefore, I would suggest anyone who is designing a database to start looking at the model and ask many questions. The answers to these questions might result in anything between minor changes and a major overhaul to the data model, but don\u2019t fret. Let\u2019s embrace the changes and the iterative process. I promise you can conquer it and you will emerge from the other end with grace, knowledge and a stronger sense of purpose to implement a solution with fewer regrets and frown faces.", "Ah, documentation, the arguably most boring and time-consuming task of the year! Well, having written countless project documents, I get where you are coming from. But let me share how I managed to push back my excuses.", "But what should be documented? With time and cost constraints, it\u2019s impractical to record our design diary. So below is what you might want to include in the database design depository.", "Don\u2019t forget the devil is in the details when designing even the simplest database. It\u2019s perfectly okay to feel frustrated after making so many changes. But remember you are helping a person, or many people, to solve a crucial problem. And if you have been chosen to do the job, I am sure you have it in yourself to make it happen.", "I sincerely hope you had enjoyed reading the blog post as much as I enjoyed researching and writing about the topic. Till next time!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Love data, problem-solving, and storytelling | Observe the world through technology-driven lens | Cherish order from chaos"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F41f11abd1fc2&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water-41f11abd1fc2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2F8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water-41f11abd1fc2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water-41f11abd1fc2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2F8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water-41f11abd1fc2&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----41f11abd1fc2--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----41f11abd1fc2--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://skyetran.medium.com/?source=post_page-----41f11abd1fc2--------------------------------", "anchor_text": ""}, {"url": "https://skyetran.medium.com/?source=post_page-----41f11abd1fc2--------------------------------", "anchor_text": "Skye Tran"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fabd81bcc35f3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water-41f11abd1fc2&user=Skye+Tran&userId=abd81bcc35f3&source=post_page-abd81bcc35f3----41f11abd1fc2---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F41f11abd1fc2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water-41f11abd1fc2&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F41f11abd1fc2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water-41f11abd1fc2&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/tagged/getting-started", "anchor_text": "Getting Started"}, {"url": "https://unsplash.com/@officestock?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Sebastian Herrmann"}, {"url": "https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://www.amazon.com.au/SQL-Antipatterns-Programming-Pragmatic-Programmers-ebook/dp/B00A376BB2", "anchor_text": "SQL Antipatterns"}, {"url": "https://plato.stanford.edu/entries/ockham/", "anchor_text": "William of Ockham"}, {"url": "http://thedigitalskye.com/2020/12/19/8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water/", "anchor_text": "http://thedigitalskye.com"}, {"url": "https://medium.com/tag/database-design?source=post_page-----41f11abd1fc2---------------database_design-----------------", "anchor_text": "Database Design"}, {"url": "https://medium.com/tag/normalization?source=post_page-----41f11abd1fc2---------------normalization-----------------", "anchor_text": "Normalization"}, {"url": "https://medium.com/tag/database-model?source=post_page-----41f11abd1fc2---------------database_model-----------------", "anchor_text": "Database Model"}, {"url": "https://medium.com/tag/editors-pick?source=post_page-----41f11abd1fc2---------------editors_pick-----------------", "anchor_text": "Editors Pick"}, {"url": "https://medium.com/tag/getting-started?source=post_page-----41f11abd1fc2---------------getting_started-----------------", "anchor_text": "Getting Started"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F41f11abd1fc2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water-41f11abd1fc2&user=Skye+Tran&userId=abd81bcc35f3&source=-----41f11abd1fc2---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F41f11abd1fc2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water-41f11abd1fc2&user=Skye+Tran&userId=abd81bcc35f3&source=-----41f11abd1fc2---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F41f11abd1fc2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water-41f11abd1fc2&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----41f11abd1fc2--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F41f11abd1fc2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water-41f11abd1fc2&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----41f11abd1fc2---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----41f11abd1fc2--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----41f11abd1fc2--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----41f11abd1fc2--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----41f11abd1fc2--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----41f11abd1fc2--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----41f11abd1fc2--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----41f11abd1fc2--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----41f11abd1fc2--------------------------------", "anchor_text": ""}, {"url": "https://skyetran.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://skyetran.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Skye Tran"}, {"url": "https://skyetran.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "117 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fabd81bcc35f3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water-41f11abd1fc2&user=Skye+Tran&userId=abd81bcc35f3&source=post_page-abd81bcc35f3--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F40a9208f977d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F8-practical-guidelines-for-designing-databases-that-dont-land-you-in-hot-water-41f11abd1fc2&newsletterV3=abd81bcc35f3&newsletterV3Id=40a9208f977d&user=Skye+Tran&userId=abd81bcc35f3&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}