{"url": "https://towardsdatascience.com/how-to-create-representations-of-entities-in-a-knowledge-graph-using-pyrdf2vec-82e44dad1a0", "time": 1683015895.543063, "path": "towardsdatascience.com/how-to-create-representations-of-entities-in-a-knowledge-graph-using-pyrdf2vec-82e44dad1a0/", "webpage": {"metadata": {"title": "How to Create Representations of Entities in a Knowledge Graph using pyRDF2Vec | by Gilles Vandewiele | Towards Data Science", "h1": "How to Create Representations of Entities in a Knowledge Graph using pyRDF2Vec", "description": "Graphs are data structures that are useful to represent ubiquitous phenomena, such as social networks, chemical molecules and recommendation systems. One of their strengths lies in the fact that they\u2026"}, "outgoing_paragraph_urls": [{"url": "https://relational.fit.cvut.cz/dataset/CORA", "anchor_text": "Cora citation network", "paragraph_index": 1}, {"url": "https://wiki.dbpedia.org/about", "anchor_text": "DBpedia", "paragraph_index": 3}, {"url": "http://www.wikipedia.org", "anchor_text": "Wikipedia", "paragraph_index": 3}, {"url": "http://dbpedia.org/page/Belgium", "anchor_text": "corresponding DBpedia page", "paragraph_index": 4}, {"url": "https://dbpedia.org/sparql", "anchor_text": "DBpedia SPARQL endpoint", "paragraph_index": 5}, {"url": "https://www.uni-mannheim.de/dws/research/resources/sw4ml-benchmark/", "anchor_text": "University of Mannheim \u201cSemantic Web for Machine Learning\u201d repository", "paragraph_index": 5}, {"url": "https://www.dropbox.com/s/naysvkn55jqxxeo/countries.ttl", "anchor_text": "here", "paragraph_index": 5}, {"url": "https://www.dropbox.com/s/ymo3pjfqzscsvey/countries.csv", "anchor_text": "here", "paragraph_index": 5}, {"url": "https://dl.acm.org/doi/pdf/10.1145/2623330.2623732", "anchor_text": "DeepWalk", "paragraph_index": 6}, {"url": "https://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf", "anchor_text": "Word2Vec", "paragraph_index": 6}, {"url": "http://dbpedia.org/resource/Belgium", "anchor_text": "Belgium", "paragraph_index": 6}, {"url": "http://dbpedia.org/ontology/capital", "anchor_text": "dbo:capital", "paragraph_index": 6}, {"url": "http://dbpedia.org/resource/City_of_Brussels", "anchor_text": "City of Brussels", "paragraph_index": 6}, {"url": "http://dbpedia.org/ontology/mayor", "anchor_text": "dbo:mayor", "paragraph_index": 6}, {"url": "http://dbpedia.org/resource/Yvan_Mayeur", "anchor_text": "Yvan Mayeur", "paragraph_index": 6}, {"url": "http://rdf2vec.org/", "anchor_text": "RDF2Vec", "paragraph_index": 7}, {"url": "https://madoc.bib.uni-mannheim.de/41307/1/Ristoski_RDF2Vec.pdf", "anchor_text": "original RDF2Vec paper", "paragraph_index": 9}, {"url": "https://dl.acm.org/doi/pdf/10.1145/3102254.3102279", "anchor_text": "Cochez et al. proposed several metrics to bias the walks", "paragraph_index": 9}, {"url": "https://arxiv.org/pdf/2009.04404.pdf", "anchor_text": "This is what we have been researching at IDLab", "paragraph_index": 10}, {"url": "https://rdflib.readthedocs.io/en/stable/", "anchor_text": "rdflib", "paragraph_index": 12}, {"url": "https://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html", "anchor_text": "t-SNE", "paragraph_index": 14}, {"url": "http://github.com/IBCNServices/pyRDF2Vec", "anchor_text": "The pyRDF2Vec repository can be found on Github", "paragraph_index": 30}, {"url": "https://www.dropbox.com/s/naysvkn55jqxxeo/countries.ttl", "anchor_text": "KG", "paragraph_index": 31}, {"url": "https://www.dropbox.com/s/ymo3pjfqzscsvey/countries.csv", "anchor_text": "CSV", "paragraph_index": 31}, {"url": "https://colab.research.google.com/drive/1kTj7_tEgI2cUWzaUkXfGtwJ-QMjW3c2-?usp=sharing", "anchor_text": "Google Colab notebook", "paragraph_index": 31}], "all_paragraphs": ["Graphs are data structures that are useful to represent ubiquitous phenomena, such as social networks, chemical molecules and recommendation systems. One of their strengths lies in the fact that they explicitly model relations (i.e. edges) between individual units (i.e. nodes), which adds an extra dimension to the data.", "We can illustrate the added value of this data enrichment using the Cora citation network. This dataset contains a bag-of-words representation for a few hundred papers and the citation relations between each of these papers. If we apply dimensionality reduction (t-SNE) to create a 2D plot of the bag-of-words representations (Figure 1, left), we can see clusters (they are colored according to their research topic) arise but they overlap. If we produce an embedding with a graph network (Figure 1, right), that takes into account the citation information, we can see the clusters being better separated.", "Knowledge Graphs (KG) are a specific type of graph. They are multi-relational (i.e. there are different edges for different types of relations) and directed (i.e. the relations have a subject and object). These properties allow to represent information from heterogeneous sources in a uniform format. We can convert the Knowledge Graphs to regular directed graphs, which facilitates further analysis, as shown in Figure 2.", "We will use a running example throughout this post. Let\u2019s start by focusing on creating representations for a few randomly chosen countries from all over the world. We will extract information for each of the countries from DBpedia, a large general-purpose KG that is created from Wikipedia.", "Let\u2019s take a look at how the KG looks in the neighbourhood of a specific country: \ud83c\udde7\ud83c\uddea Belgium \ud83c\udde7\ud83c\uddea. This process is analogous to going to its corresponding DBpedia page and then recursively clicking on all the links on that page. We depict this below in Figure 3. We notice that expanding this neighbourhood iteratively makes things complex quickly, even though we introduced some simplifications by removing some of the parts. Nevertheless, we see that DBpedia contains some useful information about Belgium (e.g., its national anthem, largest city, currency, \u2026).", "We created a custom dataset with country information by using the DBpedia SPARQL endpoint. We retrieved a list of countries from the University of Mannheim \u201cSemantic Web for Machine Learning\u201d repository. Each of the countries contains information regarding their inflation and academic output. This information is binarized into \u201chigh\u201d and \u201clow\u201d (so two binary classification tasks). Moreover, for each of the countries we retrieved their continent (Europe, Asia, Americas, Africa or Oceania), which gives us a 5-class classification task. The KG with the information about these countries is a subset from DBpedia: for each country, we retrieved all information by expanding the KG three times. This process corresponds exactly to what is depicted in Figure 3. Due to a rate limitation placed on the SPARQL endpoint, only a maximum of 10000 nodes at depth 3 and their parents are included. The KG (in Turtle syntax) can be downloaded here, the CSV files with the list of countries and their labels can be downloaded here.", "RDF2vec stands for Resource Description Framework To Vector. It is an unsupervised, task-agnostic algorithm to numerically represent nodes in a KG, allowing them to be used for further (downstream) machine learning tasks. RDF2Vec builds on top of existing natural language processing techniques: it combines insights from DeepWalk and Word2Vec. Word2Vec is able to generate embeddings for each word in a provided collection of sentences (often called a corpus). To generate a corpus for a KG, we extract walks. Extracting walks is similar to visiting a DBpedia page of an entity and clicking on links. The number of clicks you make is equivalent to the number of hops in a walk. An example of such a walk, again for Belgium, would be: Belgium -> dbo:capital -> City of Brussels -> dbo:mayor ->Yvan Mayeur. Note that we make no distinction between predicates/properties (e.g., dbo:capital and dbo:mayor) and entities (e.g., Belgium, Brussels, Yvan Mayeur, \u2026) in our walks, as explained in Figure 2. Each walk can now be seen as a sentence, and the hops in that walk correspond to the tokens (words) of a sentence. Once we extracted a large number of walks rooted at the entities we want to create embeddings for, we can provide that as a corpus to Word2Vec. Word2Vec will then learn embeddings for each unique hop which can then be used for ML tasks.", "pyRDF2Vec is a repository that contains a Python implementation of the RDF2Vec algorithm. On top of the original algorithm, different extensions are implemented as well.", "In this tutorial, I will explain how we can generate embeddings of entities in KG using pyRDF2Vec. Moreover, I will briefly explain some of the extensions to RDF2Vec and how those can be used within pyRDF2Vec.", "Now, as can be noticed from Figure 3, the number of possible that walks that we can extract grows exponentially in function of the depth. This becomes problematic when we are using large KGs, such as DBpedia. In the original RDF2Vec paper, walks were just randomly sampled from the graph but Cochez et al. proposed several metrics to bias the walks. These walks were then called biased walks, but we will refer to them as sampling strategies in line with the pyRDF2Vec terminology. An example of a possible sampling strategy is shown in Figure 4.", "Up until now, we explained the walking algorithm as continuously sampling from the neighbours of a node until a certain depth is reached. However, we can make modifications to this algorithm (extraction algorithms) or we can apply post-processing on the walks to incorporate extra information (transformation algorithms). This is what we have been researching at IDLab. These strategies, applied on a simple example, can be seen in Figure 5.", "Now that we have introduced these modified walking strategies, we now discussed each of the three main building blocks of the RDF2Vec algorithm: (i) a walking strategy, (ii) a sampling strategy, and (iii) an embedding algorithm (NLP). As we will further discuss, each of these building blocks are configurable in pyRDF2Vec.", "KGs are often represented in Resource Description Framework (RDF) format. pyRDF2Vec can easily load files in different RDF syntaxes by wrapping around rdflib. This will load the entire KG into RAM memory. However, this becomes problematic when the KG is larger than the available RAM memory. We therefore also support interaction with endpoints: the KG can be hosted on some server and our KG object will interact with that endpoint whenever necessary. This drastically reduces the required RAM memory at a cost of higher latencies.", "Now that we have our KG loaded in memory, we can start creating embeddings! In order to do this, we create an RDF2VecTransformer and then call the fit() function with the freshly loaded KG and a list of entities. Once the model is fitted, we can retrieve their embeddings through the transform() function. One thing that is different from the regular scikit-learn flow (where we call fit() on the train data and predict() or transform() on the test data) is that both the train and test entities have to be provided to the fit() function (similar to how t-SNE works in scikit-learn). Since RDF2Vec works unsupervised, this does not introduce label leakage.", "The code snippet above will give us a list of lists. For each of the provided entities to the transform method, a 100-dimensional embedding will be returned. Now in order to inspect these embeddings with the human eye, we need to further reduce the dimensionality. One great technique to do this, is by using t-SNE. We can do this using the following code snippet:", "Which gives us the result shown in Figure 6.", "Now let\u2019s take a look at how good these embeddings are in order to solve the three ML tasks we have discussed: two binary classification tasks (high/low inflation and high/low academic output) and a multi-class classification task (predict the continent). It should be noted that, since RDF2Vec is unsupervised, during the creation of these embeddings, this label information was never used! RDF2Vec is task-agnostic, the projection from our nodes to an embedding is not tailored towards a specific task, and the embeddings can be used for multiple different downstream tasks. Let\u2019s create an utility function that takes as input the produced embeddings and then performs classification for all three tasks:", "Now let\u2019s call classify(walk_embeddings) to take a look at the performance of our baseline embeddings:", "The accuracies for the research rating, inflation and continent classification are respectively equal to 76.56%, 58.82% and 67.16%. While these accuracies are far from perfect, it does show that some information for all these tasks is present within the generated embeddings. One possible reason for these lower accuracies is that only a subset of data from DBpedia was used due to rate limitations of its public API. Moreover, we only used default hyper-parameters to generate our embeddings.", "As mentioned before, each of the three building blocks of the RDF2Vec algorithm (walking algorithm, sampling strategy and embedding technique) are configurable. For now, let\u2019s try to extract deeper walks and generate larger embeddings:", "We specify that we want to use the random walking strategy to extract walks with a depth of 3, this corresponds to following 3 links from a certain DBpedia page, or taking 6 hops in our converted KG (see Figure 1). We also specify that we want to extract all possible walks of depth 3 exhaustively for each entity, indicated by the None argument. We do not specify any sampling strategy but do specify that we want to use the Word2Vec embedding technique to produce embeddings of size 500. This hyper-parameter configuration gives us the following accuracies:", "As we can see, the accuracy has improved for two of the three tasks while remaining the same for the third task (inflation classification).", "pyRDF2Vec allows us to use different walking strategies, an overview of the different strategies is provided in Figure 5. Moreover, we can combine different strategies: pyRDF2Vec will extract walks with each strategy and concatenate the extracted walks together before providing it to the embedding technique. Let\u2019s try combining several walking strategies:", "The accuracies we now get are:", "So an improvement for the Inflation Rating and Continent task but a decrease in performance for the Research Rating.", "Now if we want to extract deeper walks, we quickly run into memory issues, since the number of walks grow exponentially in function of the walk depth. This is where sampling strategies come into play. As a final experiment, let\u2019s sample 5000 walks of depth 6 using the walking strategies from the previous section:", "In total, 854901 walks were extracted. This gives us the following accuracies:", "So only an improvement for the continent classification and a significant deterioration for the two other tasks. Of course, one could tune the many hyper-parameters of the RDF2VecTransformer (the walking & sampling strategy and their corresponding hyper-parameters) and the Random Forest (or any other classification technique) to obtain optimal accuracies, but we leave that as an exercise to the reader!", "There are a few shortcomings in the current version of RDF2Vec that can be identified that require further research to tackle them:\u2013 The original RDF2Vec implementation does not incorporate the most recent insights from the NLP domain: since the inception of RDF2Vec, on 2017, many advancements in the domain of NLP have been made. We are currently working on implementing different NLP embedding techniques (such as BERT) into pyRDF2Vec.\u2013 The expressiveness of embeddings produced by random walks can be limited: walks are only single chains, the information they capture is somewhat limited. The walking strategies try to alleviate this shortcoming, but further research in this direction is needed. Moreover, we could probably combine walks generated by different strategies together.\u2013 RDF2Vec does not scale to large KGs: as the number of possible walks that can be extracted grows exponentially with depth, RDF2Vec does not scale well to KGs with a large number of nodes, especially when it contains many highly-connected nodes. The sampling strategies improve scalability, but more research can be done.\u2013 RDF2Vec cannot deal well with numerical values in the KG: currently, all hops in the walks, which correspond to nodes from the KG, are handled as categorical data. This is sub-optimal for ordinal data (e.g., the number of inhabitants and the size of a country).\u2013 RDF2Vec cannot deal with volatile data: as mentioned, both the train and test data need to be provided to our fit() method. But what if some of our test data is not yet available? There are techniques that can help here, such as online and incremental learning.", "We hope, by releasing pyRDF2Vec, to provide a toolkit that can facilitate research to tackle these challenges.", "The pyRDF2Vec repository can be found on Github. Feel free to give us a star if you like the repository, it is greatly appreciated! Moreover, we welcome all kinds of contributions.", "The custom dataset used throughout this blog post can be downloaded: KG and CSV. We also provide all the code in a Google Colab notebook so you can run it yourself interactively from your browser!", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F82e44dad1a0&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-representations-of-entities-in-a-knowledge-graph-using-pyrdf2vec-82e44dad1a0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-representations-of-entities-in-a-knowledge-graph-using-pyrdf2vec-82e44dad1a0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-representations-of-entities-in-a-knowledge-graph-using-pyrdf2vec-82e44dad1a0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-representations-of-entities-in-a-knowledge-graph-using-pyrdf2vec-82e44dad1a0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----82e44dad1a0--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----82e44dad1a0--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://gillesvandewiele.medium.com/?source=post_page-----82e44dad1a0--------------------------------", "anchor_text": ""}, {"url": "https://gillesvandewiele.medium.com/?source=post_page-----82e44dad1a0--------------------------------", "anchor_text": "Gilles Vandewiele"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3e8cbc53806e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-representations-of-entities-in-a-knowledge-graph-using-pyrdf2vec-82e44dad1a0&user=Gilles+Vandewiele&userId=3e8cbc53806e&source=post_page-3e8cbc53806e----82e44dad1a0---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F82e44dad1a0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-representations-of-entities-in-a-knowledge-graph-using-pyrdf2vec-82e44dad1a0&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F82e44dad1a0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-representations-of-entities-in-a-knowledge-graph-using-pyrdf2vec-82e44dad1a0&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/tagged/hands-on-tutorials", "anchor_text": "Hands-on Tutorials"}, {"url": "https://relational.fit.cvut.cz/dataset/CORA", "anchor_text": "Cora citation network"}, {"url": "https://arxiv.org/abs/1809.10341", "anchor_text": "\u201cDeep Graph Infomax\u201d by Velickovic et al."}, {"url": "https://wiki.dbpedia.org/about", "anchor_text": "DBpedia"}, {"url": "http://www.wikipedia.org", "anchor_text": "Wikipedia"}, {"url": "http://dbpedia.org/page/Belgium", "anchor_text": "corresponding DBpedia page"}, {"url": "https://dbpedia.org/sparql", "anchor_text": "DBpedia SPARQL endpoint"}, {"url": "https://www.uni-mannheim.de/dws/research/resources/sw4ml-benchmark/", "anchor_text": "University of Mannheim \u201cSemantic Web for Machine Learning\u201d repository"}, {"url": "https://www.dropbox.com/s/naysvkn55jqxxeo/countries.ttl", "anchor_text": "here"}, {"url": "https://www.dropbox.com/s/ymo3pjfqzscsvey/countries.csv", "anchor_text": "here"}, {"url": "https://dl.acm.org/doi/pdf/10.1145/2623330.2623732", "anchor_text": "DeepWalk"}, {"url": "https://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf", "anchor_text": "Word2Vec"}, {"url": "http://dbpedia.org/resource/Belgium", "anchor_text": "Belgium"}, {"url": "http://dbpedia.org/ontology/capital", "anchor_text": "dbo:capital"}, {"url": "http://dbpedia.org/resource/City_of_Brussels", "anchor_text": "City of Brussels"}, {"url": "http://dbpedia.org/ontology/mayor", "anchor_text": "dbo:mayor"}, {"url": "http://dbpedia.org/resource/Yvan_Mayeur", "anchor_text": "Yvan Mayeur"}, {"url": "http://rdf2vec.org/", "anchor_text": "RDF2Vec"}, {"url": "https://github.com/IBCNServices/pyRDF2Vec", "anchor_text": "our repository"}, {"url": "https://madoc.bib.uni-mannheim.de/41307/1/Ristoski_RDF2Vec.pdf", "anchor_text": "original RDF2Vec paper"}, {"url": "https://dl.acm.org/doi/pdf/10.1145/3102254.3102279", "anchor_text": "Cochez et al. proposed several metrics to bias the walks"}, {"url": "https://arxiv.org/pdf/2009.04404.pdf", "anchor_text": "This is what we have been researching at IDLab"}, {"url": "https://arxiv.org/pdf/2009.04404.pdf", "anchor_text": "\u201cWalk Extraction Strategies for Node Embeddings with RDF2Vec in Knowledge Graphs\u201d by Vandewiele et al."}, {"url": "https://rdflib.readthedocs.io/en/stable/", "anchor_text": "rdflib"}, {"url": "https://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html", "anchor_text": "t-SNE"}, {"url": "http://github.com/IBCNServices/pyRDF2Vec", "anchor_text": "The pyRDF2Vec repository can be found on Github"}, {"url": "https://www.dropbox.com/s/naysvkn55jqxxeo/countries.ttl", "anchor_text": "KG"}, {"url": "https://www.dropbox.com/s/ymo3pjfqzscsvey/countries.csv", "anchor_text": "CSV"}, {"url": "https://colab.research.google.com/drive/1kTj7_tEgI2cUWzaUkXfGtwJ-QMjW3c2-?usp=sharing", "anchor_text": "Google Colab notebook"}, {"url": "https://medium.com/tag/knowledge-graph?source=post_page-----82e44dad1a0---------------knowledge_graph-----------------", "anchor_text": "Knowledge Graph"}, {"url": "https://medium.com/tag/representation-learning?source=post_page-----82e44dad1a0---------------representation_learning-----------------", "anchor_text": "Representation Learning"}, {"url": "https://medium.com/tag/unsupervised-learning?source=post_page-----82e44dad1a0---------------unsupervised_learning-----------------", "anchor_text": "Unsupervised Learning"}, {"url": "https://medium.com/tag/embedding?source=post_page-----82e44dad1a0---------------embedding-----------------", "anchor_text": "Embedding"}, {"url": "https://medium.com/tag/hands-on-tutorials?source=post_page-----82e44dad1a0---------------hands_on_tutorials-----------------", "anchor_text": "Hands On Tutorials"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F82e44dad1a0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-representations-of-entities-in-a-knowledge-graph-using-pyrdf2vec-82e44dad1a0&user=Gilles+Vandewiele&userId=3e8cbc53806e&source=-----82e44dad1a0---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F82e44dad1a0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-representations-of-entities-in-a-knowledge-graph-using-pyrdf2vec-82e44dad1a0&user=Gilles+Vandewiele&userId=3e8cbc53806e&source=-----82e44dad1a0---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F82e44dad1a0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-representations-of-entities-in-a-knowledge-graph-using-pyrdf2vec-82e44dad1a0&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----82e44dad1a0--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F82e44dad1a0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-representations-of-entities-in-a-knowledge-graph-using-pyrdf2vec-82e44dad1a0&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----82e44dad1a0---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----82e44dad1a0--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----82e44dad1a0--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----82e44dad1a0--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----82e44dad1a0--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----82e44dad1a0--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----82e44dad1a0--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----82e44dad1a0--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----82e44dad1a0--------------------------------", "anchor_text": ""}, {"url": "https://gillesvandewiele.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://gillesvandewiele.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Gilles Vandewiele"}, {"url": "https://gillesvandewiele.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "231 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3e8cbc53806e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-representations-of-entities-in-a-knowledge-graph-using-pyrdf2vec-82e44dad1a0&user=Gilles+Vandewiele&userId=3e8cbc53806e&source=post_page-3e8cbc53806e--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fe7b38ac3fda1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-representations-of-entities-in-a-knowledge-graph-using-pyrdf2vec-82e44dad1a0&newsletterV3=3e8cbc53806e&newsletterV3Id=e7b38ac3fda1&user=Gilles+Vandewiele&userId=3e8cbc53806e&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}