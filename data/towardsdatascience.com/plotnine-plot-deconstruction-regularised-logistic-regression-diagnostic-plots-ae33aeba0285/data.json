{"url": "https://towardsdatascience.com/plotnine-plot-deconstruction-regularised-logistic-regression-diagnostic-plots-ae33aeba0285", "time": 1683013443.335831, "path": "towardsdatascience.com/plotnine-plot-deconstruction-regularised-logistic-regression-diagnostic-plots-ae33aeba0285/", "webpage": {"metadata": {"title": "Plotnine plot deconstruction: regularised logistic regression diagnostic plots | by Paul Hiemstra | Towards Data Science", "h1": "Plotnine plot deconstruction: regularised logistic regression diagnostic plots", "description": "Note that this is a companion article to another article I wrote, and although I tried to make this article self-contained that article does go into more detail in regards to the statistics. This\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/expanding-your-regression-repertoire-with-regularisation-903d2c9f7b28", "anchor_text": "another article I wrote", "paragraph_index": 0}, {"url": "https://www.datascienceworkshops.com/blog/plotnine-grammar-of-graphics-for-python/", "anchor_text": "this article", "paragraph_index": 0}, {"url": "https://github.com/PaulHiemstra/lasso_tsfresh_article/blob/master/logistic_regression_plots_article.ipynb", "anchor_text": "Github", "paragraph_index": 0}, {"url": "https://towardsdatascience.com/tagged/plot-deconstruction-paul", "anchor_text": "a series of articles", "paragraph_index": 0}, {"url": "https://en.wikipedia.org/wiki/Regularization_(mathematics)", "anchor_text": "Regularisation", "paragraph_index": 1}, {"url": "https://en.wikipedia.org/wiki/Lasso_(statistics)", "anchor_text": "Lasso", "paragraph_index": 1}, {"url": "https://en.wikipedia.org/wiki/Tikhonov_regularization", "anchor_text": "Ridge regression", "paragraph_index": 1}, {"url": "https://en.wikipedia.org/wiki/Elastic_net_regularization", "anchor_text": "Elastic Net regularisation", "paragraph_index": 1}, {"url": "https://en.wikipedia.org/wiki/Regularization_(mathematics)", "anchor_text": "regularisation", "paragraph_index": 2}, {"url": "https://machinelearningmastery.com/difference-between-a-parameter-and-a-hyperparameter/", "anchor_text": "hyperparameter", "paragraph_index": 2}, {"url": "https://github.com/PaulHiemstra/lasso_tsfresh_article/blob/master/generate_drum_model.py", "anchor_text": "generate_drum_model.py", "paragraph_index": 9}, {"url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegressionCV.html", "anchor_text": "LogisticRegressionCV", "paragraph_index": 10}, {"url": "https://github.com/PaulHiemstra/lasso_tsfresh_article/blob/master/generate_drum_model.py", "anchor_text": "generate_drum_model.py", "paragraph_index": 10}, {"url": "http://localhost:8888/lab?", "anchor_text": "the compagnion article I wrote", "paragraph_index": 14}, {"url": "https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html", "anchor_text": "numpy.ndarray", "paragraph_index": 18}, {"url": "https://www.theanalysisfactor.com/wide-and-long-data/#:~:text=In%20the%20long%20format%2C%20each,below%20in%20the%20long%20format.", "anchor_text": "a long format", "paragraph_index": 20}, {"url": "https://stackoverflow.com/questions/36853594/easy-multidimensional-numpy-ndarray-to-pandas-dataframe-method", "anchor_text": "A very efficient way to generate this long format", "paragraph_index": 20}, {"url": "https://pandas.pydata.org/docs/reference/api/pandas.MultiIndex.from_product.html", "anchor_text": "pd.MultiIndex.from_product", "paragraph_index": 22}, {"url": "https://github.com/PaulHiemstra/lasso_tsfresh_article/blob/master/helper_functions.py", "anchor_text": "helper_functions.py", "paragraph_index": 26}, {"url": "https://github.com/PaulHiemstra/lasso_tsfresh_article/blob/master/generate_drum_model.py", "anchor_text": "generate_drum_model.py", "paragraph_index": 27}, {"url": "https://github.com/PaulHiemstra/lasso_tsfresh_article/blob/master/helper_functions.py", "anchor_text": "helper_functions.py", "paragraph_index": 41}, {"url": "https://www.linkedin.com/in/bernhard-terlaak", "anchor_text": "Bernhard Terlaak", "paragraph_index": 49}], "all_paragraphs": ["Note that this is a companion article to another article I wrote, and although I tried to make this article self-contained that article does go into more detail in regards to the statistics. This article focuses on how to make the diagnostic plots using plotnine. If you are not familiar with plotnine, this article provides a good introduction to the library. As with any of my articles you can also read the article on Github. In addition, this is part of a series of articles I wrote on making beatiful plots in Python.", "A major issue in statistics is underdetermination: a lack of data prevents us from choosing between models as they share the same performance based on that data. Regularisation helps us make this choice by introducing additional information into the problem. One common form of regularisation in regression is adding the norm of the model coefficients to the standard squared difference loss function. Various forms of this technique are called Lasso, Ridge regression, or Elastic Net regularisation.", "When introducing regularisation into our regression method, a major choice we need to make is the regularisation strength, i.e. how much do we focus on the norm of the model coefficients versus the squared difference part of the loss function. A common way to select this hyperparameter is using crossvalidation. Whichever setting of the hyperparameter yields the best crossvalidation performance is chosen.", "The goal of this article is to construct a number of diagnostic plots which help you interpret the outcome of the crossvalidated regularisation strength. In this article you will learn about the following topics:", "How to preprocess the crossvalidation outcome for plotting in plotnine", "How to generate the plots using plotnine", "We will start this article off with a small introduction to the case study, before going on to constructing the diagnostic plots.", "Humans are really good at recognizing sounds. Based on one sound we can recognize if there is a bird or a bear nearby. Very skilled listeners might even ben able to recognize the type of bird they hear. Transferring this kind of skill to a mathematical model is not trivial. In this article, we focus on recognizing drum sounds: a kick drum (or bass), tom and snare drum in particular. Each sound is stored in a wav file, for example:", "where we see the amplitudes of the left and right channel over time. To train the model we need to take a number of steps:", "the generate_drum_model.py script on GitHub performs all these steps and dumps the results to disc. In the next section, we will pick up the crossvalidation results and construct a number of useful diagnostic plots.", "The basis for the diagnostic plots are the crossvalidation results generated using LogisticRegressionCV. Together with the original training data they are input to the diagnostic plots. We can read these from file as they have already been generated by running generate_drum_model.py:", "The main result of crossvalidation object is the selected regularisation strength, stored in the C_ attribute:", "note we transform the C_ attribute here as LogisticRegressionCV from sklearn works with the inverse of the regularisation strength. I use the \ud835\udefc\u03b1 definition that Lasso uses, which equals 1/2C. I added the log transform to make the number more readable.", "Based on cv_result I will construct two diagnostic plots: one focusing on the coefficients of the model and one on the overall performance of the model. In both cases, I will first show the plot, and then slowly break down each of the steps that are needed to make the plot.", "In the crossvalidation procedure we used an L1-norm, which means that coefficients in the model get pushed to zero as the regularisation strength increases. If you are unclear as to what the previous line said, I suggest reading the compagnion article I wrote that explains the statistics in detail.", "To visualise this effect we make a plot of the coefficient values versus regularisation strength using the plot_coef_paths that can be found in the helper_functions.py file on GitHub:", "here we see how the coefficients for the kick model change for each feature versus the regularisation strength. Note that there are five lines in the plot, one for each of the crossvalidation folds.", "In the following sections, I show each of the steps that are needed the produce the plot above.", "The main source of data for this plot is the coef_paths_ attribute of the LogisticRegressionCV object. This attribute stores a dictionary with an entry for each of the possible classes the model can predict: kick, snare and tom in our case. The values in the dictionary are numpy.ndarray objects, which store all the coefficient values. The shape of the ndarray is:", "for the kick model. The first axis is the crossvalidation fold, the second axis is regularisation strength and the third axis is the feature.", "Plotnine does not work with ndarray objects, but needs a long format where each row consists of a single coefficient value and their associated regularisation strength, coefficient name and model. A very efficient way to generate this long format data frame based on a ndarray is to flatten the entire ndarray into a single column, and add a MultiIndex which shows to which fold, regularisation strength and feature the coefficient belongs.", "First, we generate the single column array using reshape, which flattens to (number of samples, 1 column):", "Next, we generate the appropriate MultiIndex using pd.MultiIndex.from_product:", "Note that the sizes in the nested list we pass to pd.MultiIndex.from_product exactly match the shape of the multidimensional array. This is because each of the elements in index contains the metadata for the correponding element in single_column_array. Each element in the metadata list index contains three elements (e.g. index[0]). Those are the metadata elements fold, regularisation strength and name of the feature respectively.", "Now we can combine the single column array with the MultiIndex as a DataFrame:", "the resulting DataFrame has four columns. The first three are the metadata from the MultiIndex, the last one is the coefficient value from the single column array.", "Note we use .reset_index() because we need the columns in the index as normal columns for plotting. In helper_functions.py on github you can find the function ndarray_to_long function which performs this operation.", "The logistic regression functions in sklearn work with the inverse of the regularisation strength. However, I find working with the regularisation strength directly more intuitive. In this article, I use the \ud835\udefc definition for regularisation strength, which equals 1/2C. In addition, I log transform the values to aid in readability of the plot as the values chosen for the regularisation strength follow a log distribution. For more details, I refer to the generate_drum_model.py script on Github.", "Using tsfresh we generated 328 features for the model. Plotting all these 328 features in a plot including the development of their coefficients is simply too much. Therefore we only choose coefficients that have a mean coefficient size above a certain threshold. Choosing this cutoff involves a bit of trial-and-error. Here I chose a cutoff of 1e-8:", "Note the use of abs(coef_value) which ensures that we also include features that have negative coefficients. The exact value of the cutoff I probably something you want to experiment with if you make plots for your own analyses.", "In the plot, we use a grid of subplots (facets) for each of the possible features. We want the most important feature to be in the top left corner of the grid as that is where most users will focus their attention first. In addition, we want the importance of the features determine further sorting from left to right and top to bottom. We define the importance of a feature to be the mean absolute value of its coefficient.", "To force plotnine to use this order, we need to apply a sorting to the feature names column. We do this using the pd.Categorical function:", "where the category sorting is done by looking at the absolute (.abs) mean (.mean) coefficient value per feature (.groupby(['feature_name']). Actually sorting the values is done using .sort_values. Also note that we use .index to return the feature names and not the sorted coefficient values. Based on the coefficient names sorted from important to less important we build the categorical variable. Important to remember here is that the actual values in plot_data['feature_name'] are not sorted: the category order in the metadata is sorted.", "In the plot we use both a set of lines, one for each fold in the cross validation, and a ribbon which covers the min and max of the lines. So there is one ribbon and five lines in each of the facets.", "In preparation for the geom_ribbon, we need to precompute the min/max:", "Note that .agg results in a MultiIndex on the columns. For plotting in plotnine I just want to have a flat column name list. To flatten the MultiIndex I use:", "where I join all the levels in the MultiIndex using an _. For example, ('coef_value', 'min') is flattened to coef_value_min.", "Finally I get rid of the row index as I want the columns available for use in plotnine:", "Now we have all of our data ready, we can make the plot:", "In the previous plot we looked at how the coefficient values for features changed with regularisation strength. In the second plot we focus on the overall performance of the plot. Performance in this case means the accuracy of the prediction, i.e. what fraction of the time the model predicts the correct type of drum. We make this plot using the plot_reg_strength_vs_score function from helper_functions.py:", "Note that the accuracy spans a range of values for each regularisation strength, thus the use of a geom_ribbon. Having a range of values stems from having results for each of the folds in the crossvalidation. From the figure it is obvious that the kick model performs best and the tom model worst. Next we break down this plot and show you how to make it.", "Just as with the previous plot, we need to transform our data to the long format required for plotnine. For this we use the same ndarray_to_long function from helper_functions.py, for example for the kick model:", "Note that we have two axes here: the crossvalidation folds and the regularisation strength.", "Next we want to combine the data of all three models into one big DataFrame. For this we construct a helper function which uses ndarray_to_long per submodel and adds the name of the submodel. Next we use a list comprehension and the helper function to get the data for all submodels. Finally, we use pd.concat to glue all submodel data into one big DataFrame:", "This combination with a list comprehension and pd.concat is a very potent technique in my opinion.", "As with the previous plot we transform the regularisation strength:", "As input for the geom_ribbon we need the min/max of the accuracy data:", "Now that we have all the data lined up, we can make the plot using plotnine:", "Note that I use both a ribbon and segment geometry. Using both geometries is because I find the plot more readable that way.", "I want to thank Bernhard Terlaak who provided valuable feedback to a draft of this article.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Teacher and practitioner of data science."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fae33aeba0285&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotnine-plot-deconstruction-regularised-logistic-regression-diagnostic-plots-ae33aeba0285&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotnine-plot-deconstruction-regularised-logistic-regression-diagnostic-plots-ae33aeba0285&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotnine-plot-deconstruction-regularised-logistic-regression-diagnostic-plots-ae33aeba0285&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotnine-plot-deconstruction-regularised-logistic-regression-diagnostic-plots-ae33aeba0285&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----ae33aeba0285--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----ae33aeba0285--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@p.h.hiemstra?source=post_page-----ae33aeba0285--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@p.h.hiemstra?source=post_page-----ae33aeba0285--------------------------------", "anchor_text": "Paul Hiemstra"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F256545883c97&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotnine-plot-deconstruction-regularised-logistic-regression-diagnostic-plots-ae33aeba0285&user=Paul+Hiemstra&userId=256545883c97&source=post_page-256545883c97----ae33aeba0285---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fae33aeba0285&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotnine-plot-deconstruction-regularised-logistic-regression-diagnostic-plots-ae33aeba0285&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fae33aeba0285&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotnine-plot-deconstruction-regularised-logistic-regression-diagnostic-plots-ae33aeba0285&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/expanding-your-regression-repertoire-with-regularisation-903d2c9f7b28", "anchor_text": "another article I wrote"}, {"url": "https://www.datascienceworkshops.com/blog/plotnine-grammar-of-graphics-for-python/", "anchor_text": "this article"}, {"url": "https://github.com/PaulHiemstra/lasso_tsfresh_article/blob/master/logistic_regression_plots_article.ipynb", "anchor_text": "Github"}, {"url": "https://towardsdatascience.com/tagged/plot-deconstruction-paul", "anchor_text": "a series of articles"}, {"url": "https://en.wikipedia.org/wiki/Regularization_(mathematics)", "anchor_text": "Regularisation"}, {"url": "https://en.wikipedia.org/wiki/Lasso_(statistics)", "anchor_text": "Lasso"}, {"url": "https://en.wikipedia.org/wiki/Tikhonov_regularization", "anchor_text": "Ridge regression"}, {"url": "https://en.wikipedia.org/wiki/Elastic_net_regularization", "anchor_text": "Elastic Net regularisation"}, {"url": "https://en.wikipedia.org/wiki/Regularization_(mathematics)", "anchor_text": "regularisation"}, {"url": "https://machinelearningmastery.com/difference-between-a-parameter-and-a-hyperparameter/", "anchor_text": "hyperparameter"}, {"url": "https://raw.githubusercontent.com/PaulHiemstra/lasso_tsfresh_article/master/pics/stereo_drum.png", "anchor_text": "high res version"}, {"url": "https://github.com/PaulHiemstra/lasso_tsfresh_article/blob/master/generate_drum_model.py", "anchor_text": "generate_drum_model.py"}, {"url": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegressionCV.html", "anchor_text": "LogisticRegressionCV"}, {"url": "https://github.com/PaulHiemstra/lasso_tsfresh_article/blob/master/generate_drum_model.py", "anchor_text": "generate_drum_model.py"}, {"url": "http://localhost:8888/lab?", "anchor_text": "the compagnion article I wrote"}, {"url": "https://raw.githubusercontent.com/PaulHiemstra/lasso_tsfresh_article/master/pics/coef_paths.png", "anchor_text": "high res version"}, {"url": "https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html", "anchor_text": "numpy.ndarray"}, {"url": "https://www.theanalysisfactor.com/wide-and-long-data/#:~:text=In%20the%20long%20format%2C%20each,below%20in%20the%20long%20format.", "anchor_text": "a long format"}, {"url": "https://stackoverflow.com/questions/36853594/easy-multidimensional-numpy-ndarray-to-pandas-dataframe-method", "anchor_text": "A very efficient way to generate this long format"}, {"url": "https://pandas.pydata.org/docs/reference/api/pandas.MultiIndex.from_product.html", "anchor_text": "pd.MultiIndex.from_product"}, {"url": "https://github.com/PaulHiemstra/lasso_tsfresh_article/blob/master/helper_functions.py", "anchor_text": "helper_functions.py"}, {"url": "https://github.com/PaulHiemstra/lasso_tsfresh_article/blob/master/generate_drum_model.py", "anchor_text": "generate_drum_model.py"}, {"url": "https://raw.githubusercontent.com/PaulHiemstra/lasso_tsfresh_article/master/pics/overall_performance.png", "anchor_text": "high res version"}, {"url": "https://github.com/PaulHiemstra/lasso_tsfresh_article/blob/master/helper_functions.py", "anchor_text": "helper_functions.py"}, {"url": "https://www.linkedin.com/in/bernhard-terlaak", "anchor_text": "Bernhard Terlaak"}, {"url": "https://medium.com/tag/plotnine?source=post_page-----ae33aeba0285---------------plotnine-----------------", "anchor_text": "Plotnine"}, {"url": "https://medium.com/tag/python?source=post_page-----ae33aeba0285---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/logistic-regression?source=post_page-----ae33aeba0285---------------logistic_regression-----------------", "anchor_text": "Logistic Regression"}, {"url": "https://medium.com/tag/regularization?source=post_page-----ae33aeba0285---------------regularization-----------------", "anchor_text": "Regularization"}, {"url": "https://medium.com/tag/plot-deconstruction-paul?source=post_page-----ae33aeba0285---------------plot_deconstruction_paul-----------------", "anchor_text": "Plot Deconstruction Paul"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fae33aeba0285&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotnine-plot-deconstruction-regularised-logistic-regression-diagnostic-plots-ae33aeba0285&user=Paul+Hiemstra&userId=256545883c97&source=-----ae33aeba0285---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fae33aeba0285&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotnine-plot-deconstruction-regularised-logistic-regression-diagnostic-plots-ae33aeba0285&user=Paul+Hiemstra&userId=256545883c97&source=-----ae33aeba0285---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fae33aeba0285&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotnine-plot-deconstruction-regularised-logistic-regression-diagnostic-plots-ae33aeba0285&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----ae33aeba0285--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fae33aeba0285&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotnine-plot-deconstruction-regularised-logistic-regression-diagnostic-plots-ae33aeba0285&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----ae33aeba0285---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----ae33aeba0285--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----ae33aeba0285--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----ae33aeba0285--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----ae33aeba0285--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----ae33aeba0285--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----ae33aeba0285--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----ae33aeba0285--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----ae33aeba0285--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@p.h.hiemstra?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@p.h.hiemstra?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Paul Hiemstra"}, {"url": "https://medium.com/@p.h.hiemstra/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "493 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F256545883c97&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotnine-plot-deconstruction-regularised-logistic-regression-diagnostic-plots-ae33aeba0285&user=Paul+Hiemstra&userId=256545883c97&source=post_page-256545883c97--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F22dfc5b863a2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotnine-plot-deconstruction-regularised-logistic-regression-diagnostic-plots-ae33aeba0285&newsletterV3=256545883c97&newsletterV3Id=22dfc5b863a2&user=Paul+Hiemstra&userId=256545883c97&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}