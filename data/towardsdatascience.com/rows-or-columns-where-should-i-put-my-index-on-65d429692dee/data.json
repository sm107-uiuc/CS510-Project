{"url": "https://towardsdatascience.com/rows-or-columns-where-should-i-put-my-index-on-65d429692dee", "time": 1683013680.636055, "path": "towardsdatascience.com/rows-or-columns-where-should-i-put-my-index-on-65d429692dee/", "webpage": {"metadata": {"title": "Rows or Columns \u2014 where should I put my index on? | by Nikola Ilic | Towards Data Science", "h1": "Rows or Columns \u2014 where should I put my index on?", "description": "Choosing the optimal indexing strategy for your SQL Server workloads is one of the most challenging tasks. As you probably know, indexes can dramatically improve the performance of your queries, but\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.red-gate.com/simple-talk/sql/sql-development/hands-on-with-columnstore-indexes-part-1-architecture/", "anchor_text": "learning about Columnstore indexes", "paragraph_index": 5}, {"url": "https://docs.microsoft.com/en-us/sql/relational-databases/indexes/columnstore-indexes-overview?view=sql-server-ver15", "anchor_text": "Microsoft\u2019s documentation", "paragraph_index": 5}, {"url": "http://data-mozart.com", "anchor_text": "data-mozart.com", "paragraph_index": 49}], "all_paragraphs": ["Choosing the optimal indexing strategy for your SQL Server workloads is one of the most challenging tasks. As you probably know, indexes can dramatically improve the performance of your queries, but at the same time, they can cause additional overhead when it comes to maintenance.", "In complete honesty, I would never call myself an expert on indexing. However, I wanted to share my experience from the recent project, as it opened a whole new perspective to me and I thought that it can be beneficial to others also.", "First of all, up until a few months ago, I have never used Columnstore indexes, since the working environment in my company was based on SQL Server 2008R2. I\u2019ve had theoretical knowledge about Columnstore indexes and I was aware of the difference between them and traditional B-Tree indexes, but I\u2019ve never tried them in reality.", "As opposed to a rowstore type of data storage, which physically stores data in a row-wise format, columnstore operates on a columnar level of the table. It was first introduced with SQL Server 2012 and later improved with every newer version of SQL Server. While traditional rowstore indexes (I will refer them as B-tree indexes) store the key value of each row, so that the SQL Server engine can use this key to retrieve the row data, columnstore indexes store each table column separately!", "The main reason for using the Columnstore index is its high compression! That brings significant gains in terms of memory footprint and, consequentially, better performance when used in a proper way.", "There are really a lot of great resources on the web for learning about Columnstore indexes architecture, and Microsoft\u2019s documentation is also quite comprehensive on this topic, but I wanted to show some real examples when the usage of Columnstore indexes makes sense.", "Just to emphasize that I will use clustered columnstore indexes exclusively (non-clustered columnstore indexes are out of the scope of this article).", "For all examples, I\u2019m using the Stack Overflow database.", "Let\u2019s first run a few simple queries on our Posts table, which has slightly more than 17 million records, just to get a feeling about the data. At the very beginning, I don\u2019t have any indexes on this table, except the clustered index on the primary key column.", "My goal is to find all posts from the 1st half of the year 2010, with more than 3000 views:", "This query returned 88.547 rows and it took more than a minute to execute!", "Since no index exists on this table, SQL Server had to scan a whole table to satisfy our request, performing around 4.2 million logical reads. Let\u2019s help a little bit our poor SQL Server, and create a nonclustered index on the CreationDate column:", "Now, when I ran again exactly the same query, I\u2019ve got back my results in 9 seconds, but the number of logical reads (5.6 million) suggests that this query is still far from being good. SQL Server is thankful for our new index since it was used to narrow down the scope for the initial search. However, selecting all columns is obviously not a good idea, as SQL Server had to pick up all other columns from the clustered index, performing an enormous number of random readings.", "Now, the first question I would ask myself is: what data do I really need? Do I need Body, ClosedDate, LastEditDate, etc.? Ok, so I will rewrite the query to include only necessary columns:", "We are getting exactly the same execution plan, with less logical reads (4 million), since the amount of data that\u2019s being returned was decreased.", "SQL Server suggests creating an index on our predicate columns (columns in WHERE clause), and including remaining columns in the index. Let\u2019s obey SQL Server\u2019s wish and modify our index:", "Now, when I run my query, it executes in less than a second, performing only 3626 logical reads! Wow! So, we\u2019ve created a nice \u201ccovering\u201d index, which works perfectly for this query. I\u2019ve intentionally bolded the part \u201cfor this query\u201d, since we can\u2019t create a covering index for every single query that runs against our database. Here, it\u2019s fine for the demo purposes.", "Ok, we couldn\u2019t optimize the previous query more than we did. Let\u2019s now see how will columnstore index performs.", "The first step is to create a copy of dbo.Posts table, but instead of using the B-tree index, I will create a clustered columnstore index on this new table (dbo.Posts_CS).", "First thing you may notice is the huuge difference in the memory footprint of these two identical tables:", "So, a table with a clustered columnstore index on it consumes almost 4x less memory comparing to an original one with a B-tree index! If we also take non-clustered indexes into consideration, the difference only gets bigger. As I\u2019ve already mentioned, data is much better compressed on the column level.", "Now, let\u2019s run exactly the same query on our newly created columnstore indexed table.", "Data in columnstore index is stored in segments. So, depending on the data distribution within the table, SQL Server has to read more or fewer segments in order to retrieve the requested data.", "As you can see in the above illustration, to return my 88.547 records, SQL Server went through 26 segments and skipped 72. That\u2019s because the data in our columnstore index is not sorted in any specific order. We could sort it by, let\u2019s say, CreationDate (assuming that most of our queries will use CreationDate as a predicate), and in that case performance should be even better, since SQL Server would exactly know in which segments to look for the data, and which could be skipped.", "Now, let\u2019s run both queries together and compare the query costs:", "Traditional B-tree index seek has a cost of 3.7, while columnstore scan costs 10.7. Quite obvious, since we have a perfectly matching non-clustered index that covers all columns we need. Still, the difference is not so big.", "But, let\u2019s say that after some time we need to expand our output list and retrieve data for LastActivityDate. Let\u2019s check what will happen:", "Oops!!! By adding just one column, results completely changed in the favor of columnstore index. Now, B-tree non-clustered index doesn\u2019t have all the necessary data and it needs to pick up LastActivityDate from the clustered index \u2014 that makes the cost of this query rise up to 236! On the other hand, columnstore index became slightly more expensive and now costs 14!", "Of course, as you can notice in the picture above, SQL Server asks for another index (or existing ones to be expanded), but that\u2019s what I stressed above \u2014 you shouldn\u2019t blindly obey all of SQL Server wishes, or you will finish with \u201cover-indexed\u201d tables!", "By definition, the area where columnstore indexes should excel is when running analytical queries. So, let\u2019s check this on the following scenario: I want to retrieve the users who registered in the first half of the year 2010, posted in the years 2010 and 2011, and the user\u2019s overall Reputation is greater than 3000 and respective posts have more than 3000 views\u2026I also need to see the user\u2019s Location and DisplayName. Sounds complicated, but it really isn\u2019t:)", "The query returns 37.332 rows and we want to help SQL Server a little bit, by creating a non-clustered index on the CreationDate column in the Users table.", "When I run the query, SQL Server comes with the following execution plan:", "Since our index doesn\u2019t cover all the necessary columns, SQL Server assumes that it\u2019s cheaper to perform a scan on the Users table, instead of doing Index Seek and then expensive key lookups. This query costs 58.4.", "Now, I will create a copy of the Users table (Users_CS) and create a clustered columnstore index on it:", "Let\u2019s now run bot of our queries at the same time and compare the performance:", "Again, the table with columnstore index on it easily outperforms the original one with the B-tree index. The cost of the second query is 9.2! And keep in mind that we didn\u2019t even optimize the columnstore index itself (we were not sorting the data during the insertion)!", "One last example comes from my real project, where we were comparing performance between columnstore and B-tree indexes on our actual workload. The query itself is so simple: I want to summarize total deposits per every single customer between January 1st and end of July this year:", "Again, columnstore index convincingly \u201cwins\u201d with 4.6 vs 26 query cost!", "Before you fall into the trap of concluding that traditional B-tree indexes aren\u2019t needed anymore, you should ask yourself: where is the catch? And the catch is obviously there since B-tree indexes are still heavily used in most of the databases.", "The biggest downside of the columnstore indexes is UPDATE/DELETE operations. Deleted records are not really deleted \u2014 they are just flagged as deleted, but they still remain part of the columnstore index, until the index is rebuilt. Updates perform even worse since they are being executed as two consecutive actions: delete and then insert\u2026Inserts \u201cper se\u201d are not an issue, because SQL Server keeps them in the structure called Deltastore (which, by the way, has B-tree structure), and performs a bulk load into the columnstore index.", "Therefore, if you are often performing updates and/or deletes, be aware that you will not extract maximum benefit from the columnstore index.", "So, the right question should be:", "The answer is, as in 99% cases within SQL Server debates \u2014 IT DEPENDS!", "The key challenge is to identify the scenario, or better say the workload, that suits best to the usage of columnstore vs rowstore indexes.", "Here are some recommendations for best practice usage for each of the index types:", "To say that you should use columnstore indexes in OLAP workloads while using B-tree indexes in OLTP environment, will be huge oversimplifying. In order to get the proper answer to this question, you should ask yourself: what kind of queries are mostly used for the specific table? As soon as you get the answer to this question, you will be able to define the proper indexing strategy for your own workload.", "And, finally, in case you wonder if you can take the best from both worlds: the answer is \u2014 YES! Starting from SQL Server 2016, you can combine columnstore and traditional B-tree indexes on the same table!", "That\u2019s, however, a separate and complex topic that requires serious planning and various considerations, which is out of the scope of this article.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Mozart \u2014 Make Music from your Data!| data-mozart.com | @DataMozart | Microsoft Data Platform MVP | Power BI Addict | Blogger, speaker, learner\u2026"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F65d429692dee&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frows-or-columns-where-should-i-put-my-index-on-65d429692dee&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frows-or-columns-where-should-i-put-my-index-on-65d429692dee&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frows-or-columns-where-should-i-put-my-index-on-65d429692dee&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frows-or-columns-where-should-i-put-my-index-on-65d429692dee&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----65d429692dee--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----65d429692dee--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://datamozart.medium.com/?source=post_page-----65d429692dee--------------------------------", "anchor_text": ""}, {"url": "https://datamozart.medium.com/?source=post_page-----65d429692dee--------------------------------", "anchor_text": "Nikola Ilic"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F64005b7daa38&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frows-or-columns-where-should-i-put-my-index-on-65d429692dee&user=Nikola+Ilic&userId=64005b7daa38&source=post_page-64005b7daa38----65d429692dee---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F65d429692dee&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frows-or-columns-where-should-i-put-my-index-on-65d429692dee&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F65d429692dee&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frows-or-columns-where-should-i-put-my-index-on-65d429692dee&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.red-gate.com/simple-talk/sql/sql-development/hands-on-with-columnstore-indexes-part-1-architecture/", "anchor_text": "learning about Columnstore indexes"}, {"url": "https://docs.microsoft.com/en-us/sql/relational-databases/indexes/columnstore-indexes-overview?view=sql-server-ver15", "anchor_text": "Microsoft\u2019s documentation"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----65d429692dee---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/tag/data-science?source=post_page-----65d429692dee---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/sql-server?source=post_page-----65d429692dee---------------sql_server-----------------", "anchor_text": "Sql Server"}, {"url": "https://medium.com/tag/indexing?source=post_page-----65d429692dee---------------indexing-----------------", "anchor_text": "Indexing"}, {"url": "https://medium.com/tag/data-modeling?source=post_page-----65d429692dee---------------data_modeling-----------------", "anchor_text": "Data Modeling"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F65d429692dee&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frows-or-columns-where-should-i-put-my-index-on-65d429692dee&user=Nikola+Ilic&userId=64005b7daa38&source=-----65d429692dee---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F65d429692dee&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frows-or-columns-where-should-i-put-my-index-on-65d429692dee&user=Nikola+Ilic&userId=64005b7daa38&source=-----65d429692dee---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F65d429692dee&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frows-or-columns-where-should-i-put-my-index-on-65d429692dee&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----65d429692dee--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F65d429692dee&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frows-or-columns-where-should-i-put-my-index-on-65d429692dee&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----65d429692dee---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----65d429692dee--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----65d429692dee--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----65d429692dee--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----65d429692dee--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----65d429692dee--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----65d429692dee--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----65d429692dee--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----65d429692dee--------------------------------", "anchor_text": ""}, {"url": "https://datamozart.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://datamozart.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Nikola Ilic"}, {"url": "https://datamozart.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "2.1K Followers"}, {"url": "http://data-mozart.com", "anchor_text": "data-mozart.com"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F64005b7daa38&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frows-or-columns-where-should-i-put-my-index-on-65d429692dee&user=Nikola+Ilic&userId=64005b7daa38&source=post_page-64005b7daa38--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F9fc5611a2826&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frows-or-columns-where-should-i-put-my-index-on-65d429692dee&newsletterV3=64005b7daa38&newsletterV3Id=9fc5611a2826&user=Nikola+Ilic&userId=64005b7daa38&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}