{"url": "https://towardsdatascience.com/name-classification-with-naive-bayes-7c5e1415788a", "time": 1682997247.1478348, "path": "towardsdatascience.com/name-classification-with-naive-bayes-7c5e1415788a/", "webpage": {"metadata": {"title": "Name Classification with Naive Bayes | by \u9ad8\u6a4b\u6e09 | Towards Data Science", "h1": "Name Classification with Naive Bayes", "description": "With more and more people traveling and living abroad, it\u2019s not rare to see international people (whether be students/working professionals / spouses). In more international environment, the data\u2026"}, "outgoing_paragraph_urls": [{"url": "https://faker.readthedocs.io/en/master/", "anchor_text": "Faker", "paragraph_index": 5}, {"url": "https://pandas.pydata.org/", "anchor_text": "Pandas", "paragraph_index": 6}, {"url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html", "anchor_text": "CountVectorizer", "paragraph_index": 11}, {"url": "https://scikit-learn.org/stable/index.html", "anchor_text": "scikit-learn", "paragraph_index": 11}, {"url": "https://scikit-learn.org/stable/modules/naive_bayes.html", "anchor_text": "Multinomial Naive Bayes class", "paragraph_index": 17}, {"url": "https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.MultinomialNB.html#sklearn.naive_bayes.MultinomialNB", "anchor_text": "MultinomialNB", "paragraph_index": 18}, {"url": "https://github.com/wtberry/NameClassifier", "anchor_text": "NameClassifier", "paragraph_index": 20}, {"url": "https://faker.readthedocs.io/en/master/", "anchor_text": "documentation", "paragraph_index": 26}, {"url": "https://github.com/wtberry/NameClassifier/blob/master/Multi%20Class%20Name%20Classification%20with%20Naive%20Bayes.ipynb", "anchor_text": "jupyter notebook", "paragraph_index": 35}], "all_paragraphs": ["With more and more people traveling and living abroad, it\u2019s not rare to see international people (whether be students/working professionals / spouses). In more international environment, the data from real world will have more foreigners\u2019 name. As a business practitioner, whenever there\u2019s a huge list of name, such as medical / educational institutions, (really any firms with personal information) it\u2019s very important to have your client\u2019s information right.", "A lot more people traveling, migrating or studying abroad to see and experience the world than ever before.", "But classifying someone based on their name into their nationalities by hand, would be a painful and lengthy process, it\u2019s a perfect task for machine learning, particularly for natural language processing.", "Thankfully there are many machine learning libraries out there that make it easy for us to build and deploy our prototypes. Here, we\u2019ll be implementing Naive Bayes classifier using scikit-learn library in python.", "Collecting the good quality data to train a classifier, that achieve the work you want it to is essential part of any machine learning projects. As much as the type of the model you use and its architecture, quality and quantity of the data you use to train the model has huge impact on the model\u2019s performance. In the case of classification problem, you have to have well balanced amount of data for each class, with features that has higher relationship with the predicting class label. In real world application, you\u2019d also want to make sure that your data actually looks like the data your model will be encountering in service.", "Here, since this is an experimental project, fake name for various nationalities were generated using python fake data generation library Faker. This library is capable of producing not only fake names but also other fake data such as fake address. You can select various countries and regions as the origin of the data/names, refer to the documentation for more details.", "I was trying to create a model to classify name\u2019s nationality, so what\u2019s are important points to be aware of? There are variety of names from different cultures and countries all over the globe, but in this project I\u2019ll be focusing mainly on first world countries\u2019 name. So what are some examples of names from different cultures?? Let\u2019s load the data using Pandas as dataframe, and take a look at it.", "Here, couple libraries for data preprocessing is imported, and the data is loaded using Pandas as DataFrame object. Code column hold countries\u2019 names, and name holds the name strings corresponds to the country.", "As you can see, some names are in English alphabet, some are not, others using Chinese characters, Hangul, or Japanese Hiragana / Kanji. Each names Last, (Middle) and First (maybe more components depends on culture) are divided by white spaces in between. Now big question is, how to feed them into the model\u2026??", "As a computer algorithm, machine learning model cannot interpret the name data as text data. Names need to be converted into numerical representation first, and there are numbers of technique to do that. Here I\u2019ve used Bag-of-Words model.", "Machine learning input and output vectors of numbers, and in the bag of words model, texts are converted into vector of numbers. Basic idea is that each unique word appear in a document is assigned with a unique integer, and therefore documents (essentially sequence of words) can be represented as a sequence of numbers.", "There are several technique to further represent document from here within bag of words model, but in this project I\u2019ve used CountVectorizer from scikit-learn library. This technique produces a vector with length of entire vocabulary, with each index position representing a unique word appears in the document, and the value in an index position expresses the frequency of the word that appear in a document/text. This way, the order of the words in the document is not retained, but it\u2019s a simple and intuitive way of representing a document by integers. Let\u2019s take a look at this in action.", "Here, I\u2019ve initialized CountVectorizer and fit it with list of names, each one divided into last and first name by white space. In the fitting process, the names are chopped into last and first name components, and mapping / dictionary of word -> integers is created. After, the name data is converted into row vectors by .transform() , with information of word frequency. Output is scipy sparse matrix (matrix with lots of 0s and little numbers, since most names don\u2019t include other last and first name in them).", "Just like the name data, the model can\u2019t interpret the labels as text itself. Since there are 10 class labels, they can be encoded into integers from 0~9, in a column vector. This can be done by using scikit-learn\u2019s OrdinalEncoder class.", "First, we\u2019ll initialize the OrdinaryEncoder class and use fit method to fit/train the encoder. In this process you\u2019re creating a mapping to convert unique label to assigned integers. After that, with .transform() method, you\u2019re using the encoder to encode the entire data into column vector of integers. Note that this encoder instance can be re-used to encode / decode the labels later.", "Finally, the data will be split into training and test set (it\u2019s not fair to test the model with same data it was trained on). Usually the split ratio is around 70% : 30% for training and test set. We do this by .train_test_split() method, in sklearn.model_selection .", "test_size is a float value between 0~1, specifying the ratio of testing set data compared to the original provided data to the method. x adn y each represent data and labels.", "Now we have the data ready, let\u2019s start training the model. I\u2019ve used scikit-learn\u2019s Multinomial Naive Bayes class. There are multiple types of Naive Bayes classifier available in the library, but this one\u2019s suitable for text classification according to the documentation", "MultinomialNB implements the naive Bayes algorithm for multinomially distributed data, and is one of the two classic naive Bayes variants used in text classification (where the data are typically represented as word vector counts,\u2026", "It\u2019s very easy to train Naive Bayes model using scikit-learn, the first step is to instantiate the class instance. Next, feed in training data and label to the model. Here the training data is a sparse matrix, and label is a column vector with integer labels, each representing country.", "Now we have a trained model, let\u2019s see how our model is performing. We\u2019ll use the test dataset that are created from the data loading phase. There are several scoring metrics for classification models, and here accuracy was used. For the project purpose, a python wrapper class, NameClassifier was used to train and make prediction. The rest of the article uses this class to demonstrate and analyze the results.", "For prediction testing purpose, a list of names containing 2 Japanese, 2 American, and 1 Hong Kong name was created, and fed into the trained model.", "As you can see, model has no problem predicting 2 Japanese names, and the 1st English name while it\u2019s misclassifying 2nd English name as Egyptian (more on this later) and the Hong Kong name as Russian for some reason.", "Confusion matrix is a square table with number of classes ^ 2 elements in it. Row of the table represents the true label value, while column is predicted label, and it\u2019s great tool for analyzing a model\u2019s performance Let\u2019s take a look at one for this model. Take a look at my post at Here for how to plot confusion matrix.", "The row represents the true labels, while columns are the predicted label. Therefore the diagonal values represents the True prediction. From this matrix, we can tell that many Egyptian names are misclassified as US-English name, and vise-versa for some reason. It\u2019s also classifying some of the Chinese name as Japanese, which is not surprising considering how many Chinese / Kanji characters they share in common.", "Now reason why it was misclassifying the English and Egyptian name was these names in training and testing data looked identical.", "This is probably due to the Faker library used to generate the data in the first place. In fact, in their documentation it is mentioned that", "The localization of Faker is an ongoing process, for which we need your help. Please don\u2019t hesitate to create a localized provider for your own locale and submit a Pull Request (PR).", "My guess is that the Egyptian locale is not ready yet, therefore it returns its default\u2019s US English name.", "The model\u2019s test set was derived from Faker package also. What happens if the model encounters the names that it haven\u2019t seen in training/testing data?? What about different representations of name in different types of characters?", "Distinct Japanese names which were not in the original dataset, were fed into the model alongside of Katakana representation of English name. Depending on the training instance, the model sometimes would predict both Kanji and Katakana representation as Norwegian, Chinese or Russian. It seems that it\u2019s making a random guess on unseen data.", "There are also several other questions regarding to model / prediction setup. For example, how does increasing model\u2019s classification labels affect its accuracy? This project is derived from Japanese or not (just a binary classification, which had 90%+ testing accuracy). So the more classes there are, more difficult it gets to predict correctly. This is obvious intuitively, because the more choice you have, the more difficult to pick the correct one from. Probability of choosing the correct answer (based on random guess) is 50%, while in the case of 10 class classification, it goes down to 10%.", "Advantage of Naive Bayes is that it is lightweight. It takes almost no time to train, and can perform decently for industrial use.", "Disadvantages include that it cannot classify unseen names, which does not have any last / first name component included in the training set. That means it\u2019s not learning the name pattern / structures, but \u201cremembering\u201d the training dataset. (Is it because of the way Naive Bayes works, that it returns the possibility of certain name components appearing, given class label; or the vectorization method used, which is simply counting the occurrence of words frequency).", "It is also possible that Bag of Word model (specifically CountVectorizer in this case) is not extracting the necessary information from name text, in order to discriminate the country names. What are the other options to do this?", "It\u2019s important to understand how all of them works, and therefore able to use them according to their pros and cons. Other models or nlp technique will be demonstrated on other post. Also please check out jupyter notebook for this NameClassifier project. Hope this was helpful or entertaining at least, and feel free to ask questions or make suggestions. Thanks for reading!", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F7c5e1415788a&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fname-classification-with-naive-bayes-7c5e1415788a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fname-classification-with-naive-bayes-7c5e1415788a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fname-classification-with-naive-bayes-7c5e1415788a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fname-classification-with-naive-bayes-7c5e1415788a&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----7c5e1415788a--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----7c5e1415788a--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@universe3523?source=post_page-----7c5e1415788a--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@universe3523?source=post_page-----7c5e1415788a--------------------------------", "anchor_text": "\u9ad8\u6a4b\u6e09"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd88ff75b1040&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fname-classification-with-naive-bayes-7c5e1415788a&user=%E9%AB%98%E6%A9%8B%E6%B8%89&userId=d88ff75b1040&source=post_page-d88ff75b1040----7c5e1415788a---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7c5e1415788a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fname-classification-with-naive-bayes-7c5e1415788a&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7c5e1415788a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fname-classification-with-naive-bayes-7c5e1415788a&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://faker.readthedocs.io/en/master/", "anchor_text": "Faker"}, {"url": "https://pandas.pydata.org/", "anchor_text": "Pandas"}, {"url": "https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html", "anchor_text": "CountVectorizer"}, {"url": "https://scikit-learn.org/stable/index.html", "anchor_text": "scikit-learn"}, {"url": "https://scikit-learn.org/stable/modules/naive_bayes.html", "anchor_text": "Multinomial Naive Bayes class"}, {"url": "https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.MultinomialNB.html#sklearn.naive_bayes.MultinomialNB", "anchor_text": "MultinomialNB"}, {"url": "https://github.com/wtberry/NameClassifier", "anchor_text": "NameClassifier"}, {"url": "https://faker.readthedocs.io/en/master/", "anchor_text": "documentation"}, {"url": "https://github.com/wtberry/NameClassifier/blob/master/Multi%20Class%20Name%20Classification%20with%20Naive%20Bayes.ipynb", "anchor_text": "jupyter notebook"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----7c5e1415788a---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/naive-bayes?source=post_page-----7c5e1415788a---------------naive_bayes-----------------", "anchor_text": "Naive Bayes"}, {"url": "https://medium.com/tag/nlp?source=post_page-----7c5e1415788a---------------nlp-----------------", "anchor_text": "NLP"}, {"url": "https://medium.com/tag/name-classification?source=post_page-----7c5e1415788a---------------name_classification-----------------", "anchor_text": "Name Classification"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7c5e1415788a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fname-classification-with-naive-bayes-7c5e1415788a&user=%E9%AB%98%E6%A9%8B%E6%B8%89&userId=d88ff75b1040&source=-----7c5e1415788a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7c5e1415788a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fname-classification-with-naive-bayes-7c5e1415788a&user=%E9%AB%98%E6%A9%8B%E6%B8%89&userId=d88ff75b1040&source=-----7c5e1415788a---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7c5e1415788a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fname-classification-with-naive-bayes-7c5e1415788a&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----7c5e1415788a--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F7c5e1415788a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fname-classification-with-naive-bayes-7c5e1415788a&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----7c5e1415788a---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----7c5e1415788a--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----7c5e1415788a--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----7c5e1415788a--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----7c5e1415788a--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----7c5e1415788a--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----7c5e1415788a--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----7c5e1415788a--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----7c5e1415788a--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@universe3523?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@universe3523?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "\u9ad8\u6a4b\u6e09"}, {"url": "https://medium.com/@universe3523/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "11 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd88ff75b1040&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fname-classification-with-naive-bayes-7c5e1415788a&user=%E9%AB%98%E6%A9%8B%E6%B8%89&userId=d88ff75b1040&source=post_page-d88ff75b1040--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2Fd88ff75b1040%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fname-classification-with-naive-bayes-7c5e1415788a&user=%E9%AB%98%E6%A9%8B%E6%B8%89&userId=d88ff75b1040&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}