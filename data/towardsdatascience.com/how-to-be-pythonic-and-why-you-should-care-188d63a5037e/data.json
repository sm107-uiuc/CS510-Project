{"url": "https://towardsdatascience.com/how-to-be-pythonic-and-why-you-should-care-188d63a5037e", "time": 1682995774.024935, "path": "towardsdatascience.com/how-to-be-pythonic-and-why-you-should-care-188d63a5037e/", "webpage": {"metadata": {"title": "How to be Pythonic and why you should care | by Robert Clark | Towards Data Science", "h1": "How to be Pythonic and why you should care", "description": "I\u2019ve officially been writing code for over a dozen years now with the last 5 as a full-time software engineer, and while I still have MUCH to learn (a lifetime of learning to be exact!), I have seen\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.reddit.com/r/badcode/comments/b9djrv/if_statements_are_evil/", "anchor_text": "r/badcode subreddit", "paragraph_index": 3}, {"url": "https://www.python.org/dev/peps/pep-0008/", "anchor_text": "Python Enhancement Proposal #8 (PEP 8).", "paragraph_index": 22}, {"url": "https://www.python.org/dev/peps/pep-0257/", "anchor_text": "PEP 257", "paragraph_index": 24}, {"url": "https://www.python.org/dev/peps/pep-0020/", "anchor_text": "PEP 20", "paragraph_index": 30}, {"url": "https://github.com/PyCQA/pycodestyle", "anchor_text": "GitHub repository", "paragraph_index": 34}, {"url": "https://www.pylint.org/", "anchor_text": "pylint", "paragraph_index": 35}, {"url": "https://medium.com/u/48a898c32082?source=post_page-----188d63a5037e--------------------------------", "anchor_text": "Tarun Chadha", "paragraph_index": 37}, {"url": "https://www.jetbrains.com/help/pycharm/reformatting-source-code.html", "anchor_text": "PyCharm", "paragraph_index": 37}, {"url": "https://code.visualstudio.com/docs/python/linting", "anchor_text": "Visual Studio Code", "paragraph_index": 37}], "all_paragraphs": ["I\u2019ve officially been writing code for over a dozen years now with the last 5 as a full-time software engineer, and while I still have MUCH to learn (a lifetime of learning to be exact!), I have seen my fair share of software and have (dare I say) developed my skills immensely in the field during that time. I still remember some of the first programs I ever wrote, and cringe in bed at night as I relive the nightmares of my days as a beginner programmer. While I will never escape the crimes of my past (writing quintuple-nested loops is the biggest of those sins), perhaps I can partially redeem myself, even if only slightly, by helping other developers who are fresh into the field learn a few best practices to write faster, cleaner, and better code.", "As with nearly every programming language, there are certain stylistic and conventional guidelines that are accepted by the Python community to promote unified, maintainable, and concise applications that are written the way the language intended them to be written. These guidelines range from proper variable, class, and module naming conventions, to looping structures, and even the proper way to wrap lines of code. The name \u201cPythonic\u201d was coined to describe any program, function, or block of code that follows these guidelines and takes advantage of Python\u2019s unique capabilities.", "Why does all of this matter? This question is open to many interpretations, but a few key reasons why you should care come down to the clarity, efficiency, and credibility of the code. Let\u2019s break these down further.", "The clarity of your code is paramount to your success if you want to be a developer. As you grow in the field, you will likely work with others at some point in time, which will require peers to read your code. If your code is written poorly, it can be a nightmare for others to decipher your intentions, even in short chunks. Take the following example from the r/badcode subreddit:", "Does this code work? Yup. Does the function name describe the function\u2019s purpose? Sure does. Is it easy to identify what this code is supposed to accomplish if you changed the function name? Probably not without spending an hour analyzing it.", "As is the case of every beginning developer I have known (myself included), there is a commonly-held mentality of \u201cit works \u2014 don\u2019t touch it\u201d when it comes to code. The moment we can write something that solves our problem, we are afraid of doing anything to the code in fear that we will break everything and be unable to fix it again.", "I would encourage any developer to break this mentality as early as possible (this goes for all languages). Even if you created the poorly-written code yourself, it is often difficult to return to it a week, month, or even a year later and attempt to unravel its mystery. To make matters worse, if you can\u2019t decipher the code yourself, how do you expect fellow teammates or collaborators to uncover the meaning?", "By writing programs the way the language was intended, developers should naturally be writing code that looks similar to that of their peers. This makes it easy to understand, easy to share, and easy to update.", "Back when I was interning in college, one of my fellow interns I met on the job told me \u201cdon\u2019t bother writing something that\u2019s already been done in Python, because you won\u2019t be able to write something better.\u201d While I was originally frustrated by this depressing thought, I eventually realized there was some truth to his statement. Python has been around for nearly three decades at this point and has quickly become one of the most popular languages by developers around the world. Python is also known for containing an abundance of libraries that can do almost anything you want or need. Many of these libraries and features see thousands of members creating updates over several years, squeezing as much performance out of every line of code as possible. While you are certainly welcome to writing your own optimal string comparison function, chances are what you come up with won\u2019t be any faster than what already exists, and the time spent developing the new function could have been spent working on the actual problem you are attempting to solve. In general, look for a built-in function or data type that achieves what you are looking for. Chances are, this will be the fastest way to complete a task. If not, check if there are any libraries or packages that can be installed which do what you need. If you still don\u2019t have a solution, now\u2019s the time to create your own!", "For anyone who first learned how to program in a language other than Python, it\u2019s generally clear which language the developer came from. Take the following problem as an example:", "A C (or C++) developer would probably write something along the following lines:", "A direct Python re-write of this would look very similar:", "While the above statement will yield the expected output, most Python developers would throw a fit over this code, complaining that it isn\u2019t Pythonic and doesn\u2019t leverage the language\u2019s power. Starting fresh, here\u2019s how you can solve the problem the Pythonic way:", "This single line of code generates the exact same result as above (for the record, I did intend to write 1001 in the code as Python\u2019s range command has an inclusive lower bound and a non-inclusive upper bound, meaning the lower number will be a part of the loop, while the higher number will not). If you were to write Python code using the first example, your credibility as a Python developer would go down as the Python community is very passionate about writing code following the guidelines. Here\u2019s another example:", "For most non-Python developers, the first solution would probably look something like this:", "As before, a direct Python translation would be:", "As I\u2019m sure you guessed, there\u2019s a much simpler way to write this in Python:", "No matter which method you choose above, found will always evaluate to False (or false) in the end. The last choice, however, is the clear champion when it comes to Pythonic code. It is concise and easily understandable. Even those that have never read Python (or any code for that matter) have a chance at comprehending the intention of this last block unlike the previous two.", "The final example is one of my favorite tools in Python, list comprehension. This technique allows you to embed a loop inside a list to create a new list. Consider the following:", "This might look funny at first if you have never seen list comprehension in action. I\u2019ve found it\u2019s often easiest to look at list comprehension from right to left. First, it iterates through every element in the list for x in arr, then it checks if the element is even if x % 2 == 0. If so, it doubles the number x * 2, and stays the same if not else x. Whatever the element ends up as, it gets appended to a new list. In our case, we are overwriting the original value of arr with the new list.", "These are just a few common ways to make code Pythonic. You likely noticed that all of these examples involved loops of some sort. While there are many ways to write Pythonic code, a great practice is to ask yourself if you truly need a loop or if it can be replaced with an idiomatic substitute.", "If you care about your credibility in the software world and want to proudly call yourself a Python developer, make sure you know and use some of these techniques when applicable in your code.", "Hopefully you now understand the importance of writing Pythonic code. At this point, you are likely wondering what some of the guidelines are and how you can follow them. Allow me to introduce you to the Python Enhancement Proposal #8 (PEP 8). For those that are unfamiliar with PEPs, they are proposals written by the community designed to improve some aspect of Python, ranging from performance, to new features, and documentation. The 8th proposal, specifically, provides recommendations on styling guidelines and conventions. This is an often cited resource on how to be Pythonic and I highly recommend giving it a read if you haven\u2019t already. Here are some of the topics I find most important:", "Naming conventions are important for any language to provide a common means of identifying types and objects. Here\u2019s an abridged version of the naming conventions:", "Comments are an important aid to the clarity of code. I generally recommend adding a comment above any section of code who\u2019s purpose wouldn\u2019t be immediately obvious to someone else. In general, comments should be in complete sentences, located above code blocks, and written in English. Additionally, the usage of documentation strings (or \u201cdocstrings\u201d) are recommended to record the purpose of functions as well describe the types, names, and descriptions of inputs and outputs, if applicable. PEP 257 contains great information on how to use docstrings.", "One of the more controversial topics in Python development pertains to line wrapping. PEP 8 calls for every line of code to be less than or equal to 79 characters. Some embedded systems have limited screen sizes that can only display as many as 80 characters on a line, which would require ugly wrapping of code if it were any longer. Additionally, if a particular line of code is hundreds of characters long, it can get very difficult to read as many variables and function calls can be lost within the line.", "While this likely won\u2019t be an issue in most cases, sometimes a line of code requires lots of real estate, especially if it contains long variable names or complex list comprehensions. A few ways to combat this are to create a newline every time you use a comma in function calls. For example, replace", "The two blocks above will be executed exactly the same. While within parenthesis (or a tuple), any code on a new-line after a comma will be included with the statement as the next parameter.", "Python also allows the use of backslashes to separate code that isn\u2019t contained in a tuple or other similar object. For example, replace", "While these changes will add additional lines of code to your program, it becomes much easier to read, especially on a range of display types and sizes.", "Another commonly referenced resource is the Zen of Python. The following short prose is the sole contents of PEP 20, written by Tim Peters:", "Beautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren\u2019t special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one \u2014 and preferably only one \u2014 obvious way to do it.Although that way may not be obvious at first unless you\u2019re Dutch.Now is better than never.Although never is often better than *right* now.If the implementation is hard to explain, it\u2019s a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea \u2014 let\u2019s do more of those!", "While the lines above are fairly self-explanatory, the overarching theme can be summarized by the 7th note: \u201cReadability counts.\u201d To me, this means that code should be written in a way that any Python developer, regardless of his or her experience, should be able to read and understand the code. Python uses a simple syntax which is closer to natural English than nearly all other languages. As such, the code should be simple and beautiful. The best way to get a message across in English is to deliver it in a concise manner. The same goes for Python.", "No matter what your code is working to achieve, always remember the Zen of Python. If your code doesn\u2019t follow these principles, then it isn\u2019t a truly Pythonic application.", "We\u2019ve now learned why Pythonic code is important, what some key principles are, and a few examples of Pythonic code. After all that, it\u2019s time we learn how to actually apply these techniques. Luckily for us, there are several tools that we can use to check if our code adheres to Python\u2019s guidelines. The first tool, pycodestyle (formerly pep8) checks any specified Python module to determine if it violates any of the guidelines listed in PEP 8. More information can be found on the GitHub repository.", "Another commonly-used tool is pylint. The basic premise of pylint is the same as pycodestyle, but it goes several steps further and is more aggressive with its reach and suggestions. I personally prefer pycodestyle as I\u2019ve encountered several false-positives in the past with pylint. While there are ways to combat these false-positives, I found it wasn\u2019t worth it to continually alter my source code to work around and explain why certain lines didn\u2019t pass but should.", "I should also note that additional code validation and linting tools exist, but the two mentioned above are the most commonly used resources.", "EDIT: Thanks to Tarun Chadha for mentioning that these tools can be integrated with popular IDEs, such as PyCharm and Visual Studio Code.", "If you made it this far, you should now be armed with the knowledge to write faster, cleaner, and better Python applications. Not only will this aid your development skills, it will also command greater respect from the Python community. Practice this trade, and you just might be considered in the sacred realm of the great Python developers.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Software engineer passionate about sports and artificial intelligence and, apparently, a blogger by night."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F188d63a5037e&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-be-pythonic-and-why-you-should-care-188d63a5037e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-be-pythonic-and-why-you-should-care-188d63a5037e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-be-pythonic-and-why-you-should-care-188d63a5037e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-be-pythonic-and-why-you-should-care-188d63a5037e&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----188d63a5037e--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----188d63a5037e--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@roclark?source=post_page-----188d63a5037e--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@roclark?source=post_page-----188d63a5037e--------------------------------", "anchor_text": "Robert Clark"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd2a72525d0b3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-be-pythonic-and-why-you-should-care-188d63a5037e&user=Robert+Clark&userId=d2a72525d0b3&source=post_page-d2a72525d0b3----188d63a5037e---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F188d63a5037e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-be-pythonic-and-why-you-should-care-188d63a5037e&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F188d63a5037e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-be-pythonic-and-why-you-should-care-188d63a5037e&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@carstyler?utm_source=medium&utm_medium=referral", "anchor_text": "Tyler B"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://unsplash.com/@rocknrollmonkey?utm_source=medium&utm_medium=referral", "anchor_text": "Rock'n Roll Monkey"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://www.reddit.com/r/badcode/comments/b9djrv/if_statements_are_evil/", "anchor_text": "r/badcode subreddit"}, {"url": "https://unsplash.com/@sixteenmilesout?utm_source=medium&utm_medium=referral", "anchor_text": "Carolyn V"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://www.python.org/dev/peps/pep-0008/", "anchor_text": "Python Enhancement Proposal #8 (PEP 8)."}, {"url": "https://www.python.org/dev/peps/pep-0257/", "anchor_text": "PEP 257"}, {"url": "https://unsplash.com/@jareddrice?utm_source=medium&utm_medium=referral", "anchor_text": "Jared Rice"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://www.python.org/dev/peps/pep-0020/", "anchor_text": "PEP 20"}, {"url": "https://unsplash.com/@carlevarino?utm_source=medium&utm_medium=referral", "anchor_text": "Cesar Carlevarino Aragon"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://github.com/PyCQA/pycodestyle", "anchor_text": "GitHub repository"}, {"url": "https://www.pylint.org/", "anchor_text": "pylint"}, {"url": "https://medium.com/u/48a898c32082?source=post_page-----188d63a5037e--------------------------------", "anchor_text": "Tarun Chadha"}, {"url": "https://www.jetbrains.com/help/pycharm/reformatting-source-code.html", "anchor_text": "PyCharm"}, {"url": "https://code.visualstudio.com/docs/python/linting", "anchor_text": "Visual Studio Code"}, {"url": "https://unsplash.com/@stereophototyp?utm_source=medium&utm_medium=referral", "anchor_text": "Sara Kurfe\u00df"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://medium.com/tag/programming?source=post_page-----188d63a5037e---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/python?source=post_page-----188d63a5037e---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----188d63a5037e---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/tag/style-guides?source=post_page-----188d63a5037e---------------style_guides-----------------", "anchor_text": "Style Guides"}, {"url": "https://medium.com/tag/best-practices?source=post_page-----188d63a5037e---------------best_practices-----------------", "anchor_text": "Best Practices"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F188d63a5037e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-be-pythonic-and-why-you-should-care-188d63a5037e&user=Robert+Clark&userId=d2a72525d0b3&source=-----188d63a5037e---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F188d63a5037e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-be-pythonic-and-why-you-should-care-188d63a5037e&user=Robert+Clark&userId=d2a72525d0b3&source=-----188d63a5037e---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F188d63a5037e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-be-pythonic-and-why-you-should-care-188d63a5037e&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----188d63a5037e--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F188d63a5037e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-be-pythonic-and-why-you-should-care-188d63a5037e&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----188d63a5037e---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----188d63a5037e--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----188d63a5037e--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----188d63a5037e--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----188d63a5037e--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----188d63a5037e--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----188d63a5037e--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----188d63a5037e--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----188d63a5037e--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@roclark?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@roclark?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Robert Clark"}, {"url": "https://medium.com/@roclark/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "275 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd2a72525d0b3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-be-pythonic-and-why-you-should-care-188d63a5037e&user=Robert+Clark&userId=d2a72525d0b3&source=post_page-d2a72525d0b3--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F18c672322a1d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-be-pythonic-and-why-you-should-care-188d63a5037e&newsletterV3=d2a72525d0b3&newsletterV3Id=18c672322a1d&user=Robert+Clark&userId=d2a72525d0b3&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}