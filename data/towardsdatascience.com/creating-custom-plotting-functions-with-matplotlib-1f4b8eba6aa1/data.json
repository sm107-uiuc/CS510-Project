{"url": "https://towardsdatascience.com/creating-custom-plotting-functions-with-matplotlib-1f4b8eba6aa1", "time": 1683006483.259231, "path": "towardsdatascience.com/creating-custom-plotting-functions-with-matplotlib-1f4b8eba6aa1/", "webpage": {"metadata": {"title": "Creating custom plotting functions with matplotlib | by Matias Calderini | Towards Data Science", "h1": "Creating custom plotting functions with matplotlib", "description": "TLDR: Define your own functions that involve plotting onto a specific axes with the following syntax: In a previous post, I showed you how to better organize your figures. We saw how you could neatly\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/maticalderini/tutorial_matplotlibCustomPlots", "anchor_text": "this link", "paragraph_index": 1}, {"url": "https://towardsdatascience.com/plot-organization-in-matplotlib-your-one-stop-guide-if-you-are-reading-this-it-is-probably-f79c2dcbc801", "anchor_text": "previous post", "paragraph_index": 2}, {"url": "https://www.matias.calderini.ca/", "anchor_text": "https://www.matias.calderini.ca/", "paragraph_index": 41}], "all_paragraphs": ["TLDR: Define your own functions that involve plotting onto a specific axes with the following syntax:", "You can find the original code repository at this link.", "In a previous post, I showed you how to better organize your figures. We saw how you could neatly display your different plots using subplots, how to add free-floating axes and how to easily create a tiled organization of your axes with GridSpec.", "Because the focus of that post was the general structure and presentation of the overall figure, the plots themselves were quite simple in that they were only using one pre-defined matplotlib function such as .plot or .hist with the default parameters. Often times though, within the nice tiled structure that you learned in the previous post, you will need to draw a specific plot of your own that combines information from different types of basic plotting functions along with calls to some other data-generating or data-processing function. For example, plotting the distribution of random samples with its corresponding theoretical density function on top.", "Here, I will show you how to create your own custom plotting functions that can be easily used by calling them within your organized plots with something like the following:", "Together with a nice organization of the subplots, this will help you maximize your static plotting on matplotlib (foreshadowing a dynamics plots follow-up tutorial \u2026. maybe\u2026) and leverage information from different plots to share a comprehensive story of your data.", "The first step in being able to have a series of custom plots within your figure is being able to connect an individual custom plot to an individual axes. The first step then is to be able to pass the axes on which we want to plot to our custom function. This can be done simply like this:", "So what did I do there? The first relevant part here is the argument ax. If you have used seaborn before, you might already know how to use this. Essentially, ax will be taking the axes object onto which you want to plot. This can be a subplot axes or a simple free floating inset axes. The idea is that the organization part of the plot would be dealt outside of this function, potentially by another function.", "Why does ax default to None though? This is better answered by the lines:", "we see that if no axes object was provided in ax, it defaults to None and triggers this if condition. In this case, since no axes was given, by default, the function would look for the last axes used in the current figure, or create one if there are none available, with the function .gca (which stands for get current axes) and use that as the axes on which to plot. At the end of the function, we also return this ax, in case we want to use it for other customizations (not needed but practical in some cases).", "Let\u2019s test this by first plotting without specifying the axes and then by providing a specific axes:", "So far so good; we can create a function to plot data and we can connect it to a specific axes of our plot (it even takes care of itself if no axes was provided). What about the **plt_kwargs though?", "If you are not used to working with **kwargs (as in keyword arguments) in your functions (the actual name of the argument doesn't matter, you can name it **kwargs, **plt_kwargs, **literally_anything_else as long as you put the double asterisk \" ** \") it will be easier to explain by first creating and using a new function that does not have **kwargs in it.", "As an aside though, if you really haven\u2019t see this type of asterisk notation before, the use of single asterisks * and double asterisks ** in python is quite useful in many situations, whether it is within or outside of functions, and definitely worth a google search (maybe even writing a blog post about it.... maybe...). Anyway, back to our example of custom_plot without **kwargs:", "No errors, no problems\u2026 However, what if you wanted to make the line thicker? Normally in .plot() we would simply set the argument linewidth to a thicker value. We could add linewidth to the list of inputs to no_kwargs_plot and then pass it to .plot() like this:", "That would take care of the problem. But what about all the other possible arguments into .plot(). Having to write them all in our function along with their default values would be really long and not very practical:", "That\u2019s where the use of ** notation (**kwargs) becomes useful. When used on free key-value elements, such as orphan inputs in our function (those that are not associated with pre-defined arguments x, y and ax in our case) **name will pack all of this elements into a dictionary and store them in the variable name.", "For example, if we were to use our plotting function as custom_plot(x=xdata, y=ydata, ax=axes[0], linewidth=2, c='g'), the resulting plt_kwargs dictionary would be {'linewidth':2, 'c':'g'}. If this is still not quite clear, look at the sample code below, the output (>>) and the schema underneath:", "So using ** solves the problem of taking all the possible plotting inputs into our function without needing to explicitly pre-define them and having them ready to use inside a dictionary. How is this dictionary of supplementary keyword arguments used, though?", "Previously, I mentioned that ** behaved like a packing function when used on free elements. When you use ** on a dictionary though (whether it was packed by ** or not), ** will actually do the opposite action it did before: it will unpack the dictionary into different free elements. In the custom_function, when we write **plt_kwargs inside .plot(), i.e. ax.plot(x, y, **plt_kwargs), we are actually asking python to take the dictionary plt_kwargs and unpack all of its key-value pairs separately into the .plot() function as individual inputs.", "In that way, without knowing how many and which plot customizations will be used, we can pass them all to the part of our function that will be doing the plotting.", "We can see this using again our original custom_plot function (you might notice that this time I used the axes returned by the function to show you how it can be used):", "That takes care of the basic syntax then. With that you should already be able to start producing some more interesting plots.", "Before going ham though, we need to take care of one potential issue you might run into when using **kwargs. That is, what if you were doing multiple plots inside of the custom_plot function? for example, what if you were plotting two lines and one should be dashed, while the other one was just solid. How would **kwargs know which arguments go into which plot?", "The answer is that \u201c**kwargs the packing machine\" wouldn't work any more and would need to be replaced, but \"**kwargs the unpacking machine\" would work perfectly fine. What do I mean by this? Let's define a new function called multiple_custom_plots to clarify it:", "What is different here and how should we use it? First, look at the list of possible inputs. Now, instead of having **kwargs, we have two new arguments, one for each of our plots. Also, by default, these arguments are empty dictionaries.", "If you followed my explanation before about **kwargs hopefully this is already quite clear for you. The idea is that since we cannot ask the function to automatically pack all the orphan inputs into one dictionary (we need two separate dictionaries now) we will instead have to provide each dictionary of plotting parameters ourselves, pre-packed.", "Using them later with the double asterisk is no different than original custom_plot since using ** on a dictionary still means that we want its values unpacked. We use empty dictionaries as default values because if you didn't provide a dictionary of customizations, we would run into problems when trying to unpack them (or the lack of them) with **. The empty dictionaries essentially are there to unpack nothing into the functions if nothing is provided.", "Let\u2019s see how we would use this:", "So, when it comes to creating custom functions from which you can plot, the previous section should be enough for you to have quite a bit of fun for a while with static plots. In this next section, I will simply give you an example of a plot using a custom function hopefully to inspire you to go do some plots of your own.", "Imagine you wanted to see how the size of a sample from a given random variable affects the estimation of its underlying probability distribution.", "Let\u2019s assume we have a continuous random variable X that is normally distributed with a mean \u03bc (mu) and a standard deviation \u03c3 (sigma) (i.e. X\u223cN(\u03bc,\u03c3\u00b2)). We would like to know how scipy\u2019s kernel density estimator (kde) is affected by the size of our random sample (how many times we sample randomly from our normal distribution) by comparing it to the estimate of the underlying true probability density distribution (pdf).", "We will do this by plotting the samples themselves, their kde and their underlying pdf for different values of N.", "Let\u2019s deconstruct the function one step at a time:", "First, the inputs. Here, instead of asking for arrays of data, we will be creating our own data from a Gaussian random number generator. So we need to ask for the relevant statistical parameters \u03bc and \u03c3 (the mean and standard deviation respectively for Gaussian distributions). We also need to ask the number of samples N to be taken. We will actually be iterating over different values of N later to see the effect of the sample size on the estimation. The idea is to plot the samples as scatter points, and the pdf and kde as regular line plots. So we will provide as inputs a dictionary for their respective plotting parameters (linewidth, marker size, etc.). Finally, we will ask the axes of the figure on which we want to plot all three things.", "The first section of the function will simply generate a random Gaussian sample of size N from the statistical parameters provided.", "The second part of the code will create the x-y pairs of the line plot corresponding to the pdf of the normal distribution given by \u03bc and \u03c3. We limit the range of the pdf to \u00b15 standard deviations since anything further on either side is going to be quite small anyway.", "The third part of the code is first calculating the kde of our sample and then applying it to the same range of values on the x-axis as our pdf.", "Finally, in the fourth part of the code, we simply plot as a scatter plot all the sampled values on the x-axis (at a height of 0), and the pdf and kde as line plots. All three, with their respective plotting keyword arguments.", "And that\u2019s it! Hopefully you learned how to add plotting abilities to your functions by properly passing the corresponding axes and keyword arguments. This should help you have increasingly modular code to quickly explore and visualize your data.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Scientist \u2014 Visit me at https://www.matias.calderini.ca/"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F1f4b8eba6aa1&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-custom-plotting-functions-with-matplotlib-1f4b8eba6aa1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-custom-plotting-functions-with-matplotlib-1f4b8eba6aa1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-custom-plotting-functions-with-matplotlib-1f4b8eba6aa1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-custom-plotting-functions-with-matplotlib-1f4b8eba6aa1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----1f4b8eba6aa1--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----1f4b8eba6aa1--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@maticalderini?source=post_page-----1f4b8eba6aa1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@maticalderini?source=post_page-----1f4b8eba6aa1--------------------------------", "anchor_text": "Matias Calderini"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6cce15132ec5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-custom-plotting-functions-with-matplotlib-1f4b8eba6aa1&user=Matias+Calderini&userId=6cce15132ec5&source=post_page-6cce15132ec5----1f4b8eba6aa1---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1f4b8eba6aa1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-custom-plotting-functions-with-matplotlib-1f4b8eba6aa1&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1f4b8eba6aa1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-custom-plotting-functions-with-matplotlib-1f4b8eba6aa1&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/maticalderini/tutorial_matplotlibCustomPlots", "anchor_text": "this link"}, {"url": "https://towardsdatascience.com/plot-organization-in-matplotlib-your-one-stop-guide-if-you-are-reading-this-it-is-probably-f79c2dcbc801", "anchor_text": "previous post"}, {"url": "https://maticalderini.github.io/blog/tutorial/2020/04/27/customPlots.html", "anchor_text": "https://maticalderini.github.io"}, {"url": "https://medium.com/tag/python?source=post_page-----1f4b8eba6aa1---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/data-visualization?source=post_page-----1f4b8eba6aa1---------------data_visualization-----------------", "anchor_text": "Data Visualization"}, {"url": "https://medium.com/tag/matplotlib?source=post_page-----1f4b8eba6aa1---------------matplotlib-----------------", "anchor_text": "Matplotlib"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----1f4b8eba6aa1---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/tag/data-science?source=post_page-----1f4b8eba6aa1---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1f4b8eba6aa1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-custom-plotting-functions-with-matplotlib-1f4b8eba6aa1&user=Matias+Calderini&userId=6cce15132ec5&source=-----1f4b8eba6aa1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1f4b8eba6aa1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-custom-plotting-functions-with-matplotlib-1f4b8eba6aa1&user=Matias+Calderini&userId=6cce15132ec5&source=-----1f4b8eba6aa1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1f4b8eba6aa1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-custom-plotting-functions-with-matplotlib-1f4b8eba6aa1&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----1f4b8eba6aa1--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F1f4b8eba6aa1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-custom-plotting-functions-with-matplotlib-1f4b8eba6aa1&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----1f4b8eba6aa1---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----1f4b8eba6aa1--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----1f4b8eba6aa1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----1f4b8eba6aa1--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----1f4b8eba6aa1--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----1f4b8eba6aa1--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----1f4b8eba6aa1--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----1f4b8eba6aa1--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----1f4b8eba6aa1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@maticalderini?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@maticalderini?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Matias Calderini"}, {"url": "https://medium.com/@maticalderini/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "84 Followers"}, {"url": "https://www.matias.calderini.ca/", "anchor_text": "https://www.matias.calderini.ca/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6cce15132ec5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-custom-plotting-functions-with-matplotlib-1f4b8eba6aa1&user=Matias+Calderini&userId=6cce15132ec5&source=post_page-6cce15132ec5--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F1385eab07ec&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-custom-plotting-functions-with-matplotlib-1f4b8eba6aa1&newsletterV3=6cce15132ec5&newsletterV3Id=1385eab07ec&user=Matias+Calderini&userId=6cce15132ec5&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}