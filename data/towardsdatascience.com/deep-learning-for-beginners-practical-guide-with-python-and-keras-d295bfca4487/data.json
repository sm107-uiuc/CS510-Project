{"url": "https://towardsdatascience.com/deep-learning-for-beginners-practical-guide-with-python-and-keras-d295bfca4487", "time": 1682993723.796187, "path": "towardsdatascience.com/deep-learning-for-beginners-practical-guide-with-python-and-keras-d295bfca4487/", "webpage": {"metadata": {"title": "Deep Learning for Beginners | by Jordi TORRES.AI | Towards Data Science", "h1": "Deep Learning for Beginners", "description": "This post will show how the example of digits recognition, presented in a previous post (I strongly recommend reading it previously), is encoded with Keras to offer the reader a first practical\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/basic-concepts-of-neural-networks-1a18a7aa2bd2", "anchor_text": "previous post", "paragraph_index": 0}, {"url": "https://keras.io", "anchor_text": "Keras", "paragraph_index": 1}, {"url": "https://twitter.com/fchollet", "anchor_text": "Fran\u00e7ois Chollet", "paragraph_index": 1}, {"url": "https://www.tensorflow.org/guide/keras", "anchor_text": "TensorFlow as a API", "paragraph_index": 1}, {"url": "https://github.com/JordiTorresBCN/DEEP-LEARNING-practical-introduction-with-Keras", "anchor_text": "https://github.com/JordiTorresBCN/DEEP-LEARNING-practical-introduction-with-Keras", "paragraph_index": 2}, {"url": "https://colab.research.google.com", "anchor_text": "Colaboratory", "paragraph_index": 3}, {"url": "https://research.google.com/colaboratory/faq.html", "anchor_text": "faq page", "paragraph_index": 4}, {"url": "https://keras.io/getting-started/functional-api-guide/", "anchor_text": "also offers an API", "paragraph_index": 33}, {"url": "https://keras.io/models/sequential/", "anchor_text": "Sequential class", "paragraph_index": 34}, {"url": "https://keras.io/layers/core/#dense", "anchor_text": "Dense layer", "paragraph_index": 44}, {"url": "https://keras.io/initializers/#usage-of-initializers", "anchor_text": "initialization options", "paragraph_index": 45}, {"url": "https://towardsdatascience.com/basic-concepts-of-neural-networks-1a18a7aa2bd2", "anchor_text": "previous post", "paragraph_index": 60}, {"url": "https://en.wikipedia.org/wiki/Confusion_matrix", "anchor_text": "this link", "paragraph_index": 67}, {"url": "http://scikit-learn.org/stable/", "anchor_text": "Scikit-learn package", "paragraph_index": 68}, {"url": "http://scikit-learn.org/stable/modules/generated/sklearn.metrics.confusion_matrix.html", "anchor_text": "calculating the confusion matrix", "paragraph_index": 68}, {"url": "https://github.com/JordiTorresBCN/DEEP-LEARNING-practical-introduction-with-Keras", "anchor_text": "GitHub of the post, the reader can find the code used", "paragraph_index": 70}, {"url": "https://towardsdatascience.com/learning-process-of-a-deep-neural-network-5a9768d7a651", "anchor_text": "next post (updated)", "paragraph_index": 81}, {"url": "https://torres.ai", "anchor_text": "https://torres.ai", "paragraph_index": 83}], "all_paragraphs": ["This post will show how the example of digits recognition, presented in a previous post (I strongly recommend reading it previously), is encoded with Keras to offer the reader a first practical contact with Deep Learning using this Python library.", "Keras is the recommended library for beginners, since its learning curve is very smooth compared to others, and at the moment it is one of the popular middleware to implement neural networks. Keras is a Python library that provides, in a simple way, the creation of a wide range of Deep Learning models using as backend other libraries such as TensorFlow, Theano or CNTK. It was developed and maintained by Fran\u00e7ois Chollet, an engineer from Google, and his code has been released under the permissive license of MIT. Also an important thing is that Keras is included in TensorFlow as a API. Although Keras is currently included in Tensorflow package, but can also be used as a Python library. To start in the subject I consider that this second option is the most appropriate.", "The code in this post is available in the form of Jupyter notebooks in the GitHub ( https://github.com/JordiTorresBCN/DEEP-LEARNING-practical-introduction-with-Keras), although this can be run as a normal program in Python if the reader so wishes.", "In this post, we will use the Colaboratory offered by Google.", "It is a Google research project created to help to disseminate Machine Learning education and research. It is a Jupyter notebook environment that requires no configuration and runs completely in the Cloud allowing the use of Keras, TensorFlow and PyTorch. The most important feature that distinguishes Colab from other free cloud services is; Colab provides GPU and is totally free. Detailed information about the service can be found on the faq page.", "Notebooks are stored in Google Drive and can be shared as you would do with Google Docs. This environment is free to use, which only requires a Google account. In addition, the environment allows the use of an NVIDIA K80 GPU free of charge.", "When entering for the first time you will see a window like the one shown below. In this window you should select the GITHUB tab and fill in the URL field with \u201cJordiTorresBCN\u201d and the Repository field with \u201cjorditorresBCN / DEEP-LEARNING-practical-introduction-with-Keras\u201d.", "To load a notebook, click on the button that appears on their right (open notebook in new tab):", "By default, Colab notebooks run on CPU. You can switch your notebook to run with GPU. In order to obtain access to one GPU we need to choose the tab Runtime and then select \u201cChange runtime type\u201d as shown in the following figure:", "When a pop-up window appears select GPU. Ensure \u201cHardware accelerator\u201d is set to GPU (the default is CPU).", "A warning may appear indicating that the code is not created by Google. I hope that you trust my code and run it anyway! ;-)", "Afterwards, ensure that you are connected to the runtime (there is a green check next to \u201cconnected\u201d in the menu ribbon):", "Now you are able to run GitHub repo in Google Colab. Enjoy!", "Before presenting the implementation in Keras of the previous example, let\u2019s review how we should distribute the available data in order to configure and evaluate the model correctly.", "For the configuration and evaluation of a model in Machine Learning, and therefore Deep Learning, the available data are usually divided into three sets: training data, validation data, and test data. The training data are those used for the learning algorithm to obtain the parameters of the model with the iterative method that we have already mentioned.", "If the model does not completely adapt to the input data (for example, if it presented overfitting), in this case, we would modify the value of certain hyperparameters and after training it again with the training data we would evaluate it again with the validation ones. We can make these adjustments of the hyperparameters guided by the validation data until we obtain validation results that we consider correct. If we have followed this procedure, we must be aware that, in fact, the validation data have influenced the model so that it also fits the validation data. For this reason, we always reserve a set of test data for final evaluation of the model that will only be used at the end of the whole process, when we consider that the model is already fine-tuned and we will no longer modify any of its hyperparameters.", "Given the introductory nature of this post and that we will not go into detail of tuning the hyperparameters, in the examples we will ignore the validation data and only use the training and test data.", "In Keras the MNIST dataset is preloaded in the form of four Numpy arrays and can be obtained with the following code:", "x_train and y_train contain the training set, while x_test and y_test contain the test data. The images are encoded as Numpy arrays and their corresponding labels ranging from 0 to 9. Following the strategy of the post to gradually introduce the concepts of the subject, as we have indicated, we will not see yet how to separate a part of the training data to use them as Validation data. We will only take into account the training and test data.", "If we want to check what values we have loaded, we can choose any of the images of the MNIST set, for example image 8, and using the following Python code:", "And if we want to see its corresponding label we can do it through:", "That, as we see, it returns the value of \u201c1\u201d, as expected.", "Keras, which as we have seen uses a multidimensional array of Numpy as a basic data structure, calls this data structure a tensor. In short, we could say that a tensor has three main attributes:", "I propose that we obtain the number of axes and dimensions of the tensor train_images from our previous example:", "And if we want to know what type of data it contains:", "These MNIST images of 28\u00d728 pixels are represented as an array of numbers whose values range from [0, 255] of type uint8. But it is usual to scale the input values of neural networks to certain ranges. In the example of this post the input values should be scaled to values of type float32 within the interval [0, 1]. We can achieve this transformation with the following lines of code:", "On the other hand, to facilitate the entry of data into our neural network (we will see that in convolutionals it is not necessary) we must make a transformation of the tensor (image) from 2 dimensions (2D) to a vector of 1 dimension (1D). That is, the matrix of 28\u00d728 numbers can be represented by a vector (array) of 784 numbers (concatenating row by row), which is the format that accepts as input a densely connected neural network like the one we will see in this post. In Python, converting every image of the MNIST dataset to avector with 784 components can be accomplished as follows:", "After executing these Python instructions, we can verify that x_train.shape takes the form of (60000, 784) and x_test.shape takes the form of (10000, 784), where the first dimension indexes the image and the second indexes the pixel in each image (now the intensity of the pixel is a value between 0 and 1):", "In addition to that, we have the labels for each input data (remember that in our case they are numbers between 0 and 9 that indicate which digit represents the image, that is, to which class is associated). In this example, and as we have already advanced, we will represent this label with a vector of 10 positions, where the position corresponding to the digit that represents the image contains a 1 and the remaining positions of the vector contain the value 0.", "In this example we will use what is known as one-hot encoding, which we have already mentioned, which consists of transforming the labels into a vector of as many zeros as the number of different labels, and containing the value of 1 in the index that corresponds to the value of the label. Keras offers many support functions, including to_categorical to perform precisely this transformation, which we can import from keras.utils:", "To see the effect of the transformation we can see the values before and after applying to_categorical :", "Now we have the data ready to be used in our simple model example that we are going to program in Keras in the next section.", "In this section, we will present how to specify in Keras the model that we have defined in the previous sections.", "The main data structure in Keras is the Sequential class, which allows the creation of a basic neural network. Keras also offers an API that allows implementing more complex models in the form of a graph that can have multiple inputs, multiple outputs, with arbitrary connections in between, but it is beyond the scope of this post.", "The Sequential class of the Keras library is a wrapper for the sequential neural network model that Keras offers and can be created in the following way:", "In this case, the model in Keras is considered as a sequence of layers and each of them gradually \u201cdistills\u201d the input data to obtain the desired output. In Keras we can find all the required types of layers that can be easily added to the model through the add() method.", "The construction in Keras of our model to recognize the images of digits could be the following:", "Here, the neural network has been defined as a sequence of two layers that are densely connected (or fully connected), meaning that all the neurons in each layer are connected to all the neurons in the next layer. Visually we could represent it in the following way:", "In the previous code we explicitly express in the input_shape argument of the first layer what the input data is like: a tensor that indicates that we have 784 features of the model (in fact the tensor that is being defined is (None, 784,) as we will see more ahead).", "A very interesting characteristic of the Keras library is that it will automatically deduce the shape of the tensors between layers after the first one. This means that the programmer only has to establish this information for the first of them. Also, for each layer we indicate the number of nodes that it has and the activation function that we will apply in it (in this example, sigmoid).", "The second layer in this example is a softmax layer of 10 neurons, which means that it will return a matrix of 10 probability values representing the 10 possible digits (in general, the output layer of a classification network will have as many neurons as classes, except in a binary classification, where only one neuron is needed). Each value will be the probability that the image of the current digit belongs to each one of them.", "A very useful method that Keras provides to check the architecture of our model is summary():", "Later we will go into more detail with the information that returns the summary() method, because this calculation of parameters and sizes of the data that the neural network has when we start to build very large network models is very valuable. For our simple example, we see that it indicates that 7,960 parameters are required (column Param #), which correspond to 7,850 parameters to the first layer and 110 to the second.", "In the first layer, for each neuron i (between 0 and 9) we require 784 parameters for the weights wij and therefore 10\u00d7784 parameters to store the weights of the 10 neurons. In addition to the 10 additional parameters for the 10 bj biases corresponding to each one of them. In the second layer, being a softmax function, it is required to connect all 10 neurons with the 10 neurons of the previous layer. Therefore 10x10 wi parameters are required and in addition 10 bj biases corresponding to each node.", "The details of the arguments that we can indicate for the Dense layer can be found in the Keras manual. In our example, the most relevant ones appear. The first argument indicates the number of neurons in the layer; the following is the activation function that we will use in it. In the next post (soon :-) )we will discuss in more detail other possible activation functions beyond the two presented here: sigmoid and softmax.", "The initialization of the weights is also often indicated as an argument of the Dense layers. The initial values must be adequate for the optimization problem to converge as quickly as possible. The various initialization options can also be found in the Keras manual.", "Next, we will present a brief description of the steps we must perform to implement a basic neural network and, in the following posts (soon), we will gradually introduce more details about each of these steps.", "From the Sequential model, we can define the layers in a simple way with the add() method, as we have advanced in the previous section. Once we have our model defined, we can configure how its learning process will be with the compile() method, with which we can specify some properties through method arguments.", "The first of these arguments is the loss function that we will use to evaluate the degree of error between calculated outputs and the desired outputs of the training data. On the other hand, we specify an optimizer that, as we will see, is the way we have to specify the optimization algorithm that allows the neural network to calculate the weights of the parameters from the input data and the defined loss function. More detail of the exact purpose of the loss function and the optimizer will be presented in the next post (soon).", "And finally we must indicate the metric that we will use to monitor the learning process (and test) of our neural network. In this first example we will only consider the accuracy (fraction of images that are correctly classified). For example, in our case we can specify the following arguments in compile() method to test it on our computer:", "In this example we specify that the loss function is categorical_crossentropy, the optimizer used is the stocastic gradient descent (sgd) and the metric is accuracy, with which we will evaluate the percentage of correct guesses.", "Once our model has been defined and the learning method configured, it is ready to be trained. For this we can train or \u201cadjust\u201d the model to the training data available by invoking the fit() method of the model:", "In the first two arguments we have indicated the data with which we will train the model in the form of Numpy arrays. The batch_size argument indicates the number of data that we will use for each update of the model parameters and with epochs we are indicating the number of times we will use all the data in the learning process. These last two arguments will be explained in much more detail in the next post (soon).", "This method finds the value of the parameters of the network through the iterative training algorithm that we mentioned and we will present in a bit more detail in the next post (soon). Roughly, in each iteration of this algorithm, this algorith takes training data from x_train, passes them through the neural network (with the values that their parameters have at that moment), compares the obtained result with the expected one (indicated in y_train) and calculates the loss to guide the adjustment process of the model parameters, which intuitively consists of applying the optimizer specified above in the compile() method to calculate a new value of each one of the model parameters (weights and biases)in each iteration in such a way that the loss is reduced.", "This is the method that, as we will see, may take longer and Keras allows us to see its progress using the verbose argument (by default, equal to 1), in addition to indicating an estimate of how long each epoch takes:", "This is a simple example so that the reader at the end of the post has already been able to program their first neural network but, as we will see, the fit() method allows many more arguments that have a very important impact on the learning outcome. Furthermore, this method returns a History object that we have omitted in this example. Its History.history attribute is the record of the loss values for the training data and other metrics in successive epochs, as well as other metrics for the validation data if they have been specified.", "At this point, the neural network has been trained and its behavior with new test data can now be evaluated using the evaluation() method. This method returns two values:", "These values indicate how well or badly our model behaves with new data that it has never seen. These data have been stored in x_test and y_test when we have performed the mnist.load_data() and we pass them to the method as arguments. In the scope of this post we will only look at one of them, the accuracy:", "The accuracy is telling us that the model we have created in this post, applied to data that the model has never seen before, classifies 90% of them correctly.", "The reader should note that, in this example, to evaluate the model we have only focused on its accuracy, that is, the ratio between the correct predictions that the model has made over the total predictions regardless of what category it is. However, although in this case it is sufficient, sometimes it is necessary to delve a little more and take into account the types of correct and incorrect predictions made by the model in each of its categories.", "In Machine Learning, a very useful tool for evaluating models is the confusion matrix, a table with rows and columns that count the predictions in comparison with the real values. We use this table to better understand how well the model behaves and it is very useful to show explicitly when one class is confused with another. A confusion matrix for a binary classifier like the one explained in the previous post has this structure:", "True positives (TP), true negatives (TN), false positives (FP), and false negatives (FN), are the four different possible outcomes of a single prediction for a two-class case with classes \u201c1\u201d (\u201cpositive\u201d) and \u201c0\u201d (\u201cnegative\u201d).", "A false positive is when the outcome is incorrectly classified as positive, when it is in fact negative. A false negative is when the outcome is incorrectly classified as negative when it is in fact positive. True positives and true negatives are obviously correct classifications.", "With this confusion matrix, the accuracy can be calculated by adding the values of the diagonal and dividing them by the total:", "Nonetheless, the accuracy can be misleading in terms of the quality of the model because, when measuring it for the concrete model, we do not distinguish between the false positive and false negative type errors, as if both had the same importance. For example, think of a model that predicts if a mushroom is poisonous. In this case, the cost of a false negative, that is, a poisonous mushroom given for consumption could be dramatic. On the contrary, a false positive has a very different cost.", "For this reason we have another metric called Sensitivity (or recall) that tells us how well the model avoids false negatives:", "In other words, from the total of positive observations (poisonous mushrooms), how many the model detects.", "From the confusion matrix, several metrics can be obtained to focus other cases as shown in this link, but it is beyond the scope of this post to enter more in detail on this topic. The convenience of using one metric or another will depend on each particular case and, in particular, the \u201ccost\u201d associated with each classification error of the model.", "But the reader will wonder how is this confusion matrix in our classifier, where there are 10 classes instead of 2. In this case, I suggest using the Scikit-learn package to evaluate the quality of the model by calculating the confusion matrix, presented in the following figure:", "In this case, the elements of the diagonal represent the number of points in which the label predicted by the model coincides with the actual value of the label, while the other values indicate the cases in which the model has classified incorrectly. Therefore, the higher the values of the diagonal, the better the prediction will be. In this example, if the reader calculates the sum of the values of the diagonal divided by the total values of the matrix, he or she will see that it matches the accuracy that the evaluate() method has returned.", "In the GitHub of the post, the reader can find the code used to calculate this confusion matrix.", "Finally, readers need to know how we can use the model trained in the previous section to make predictions. In our example, it consists in predict which digit represents an image. In order to do this, Keras supply the predict() method.", "To test this method we can choose any element. For ease, let\u2019s take one from the test dataset x_test. For example let\u2019s choose the element 11 of this dataset x_test.", "Before seeing the prediction, let\u2019s see the image to be able to check ourselves if the model is making a correct prediction (before doing the previous reshape):", "I think the reader will agree that in this case it corresponds to number 6.", "Now let\u2019s see that the predict() method of the model, executing the following code, correctly predicts the value that we have just estimated that it should predict.", "The predict() method return a vector with the predictions for the whole dataset elements. We can know which class gives the most probability of belonging by means of the argmax function of Numpy, which returns the index of the position that contains the highest value of the vector. Specifically, for item 11:", "We can check it printing the vector returned by the method:", "We see that the highest value in the vector is in the position 6. We can also verify that the result of the prediction is a vector whose sum of all its components is equal to 1, as expected. For this we can use:", "So far the reader has been able to create their first model in Keras that correctly classifies the MNIST digits 90% of the time. In the next post (soon), we will present how the learning process works and several of the hyperparameters that we can use in a neural network to improve these results.", "In a future post (soon) we will see how we can improve these classification results using convolutional neural networks for the same example.", "See you in the next post (updated):", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Professor at UPC Barcelona Tech & Barcelona Supercomputing Center. Research focuses on Supercomputing & Artificial Intelligence https://torres.ai @JordiTorresAI"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fd295bfca4487&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-beginners-practical-guide-with-python-and-keras-d295bfca4487&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-beginners-practical-guide-with-python-and-keras-d295bfca4487&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-beginners-practical-guide-with-python-and-keras-d295bfca4487&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-beginners-practical-guide-with-python-and-keras-d295bfca4487&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----d295bfca4487--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----d295bfca4487--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://torres-ai.medium.com/?source=post_page-----d295bfca4487--------------------------------", "anchor_text": ""}, {"url": "https://torres-ai.medium.com/?source=post_page-----d295bfca4487--------------------------------", "anchor_text": "Jordi TORRES.AI"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F497013a3c715&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-beginners-practical-guide-with-python-and-keras-d295bfca4487&user=Jordi+TORRES.AI&userId=497013a3c715&source=post_page-497013a3c715----d295bfca4487---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd295bfca4487&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-beginners-practical-guide-with-python-and-keras-d295bfca4487&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd295bfca4487&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-beginners-practical-guide-with-python-and-keras-d295bfca4487&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/basic-concepts-of-neural-networks-1a18a7aa2bd2", "anchor_text": "previous post"}, {"url": "https://keras.io", "anchor_text": "Keras"}, {"url": "https://twitter.com/fchollet", "anchor_text": "Fran\u00e7ois Chollet"}, {"url": "https://www.tensorflow.org/guide/keras", "anchor_text": "TensorFlow as a API"}, {"url": "https://github.com/JordiTorresBCN/DEEP-LEARNING-practical-introduction-with-Keras", "anchor_text": "https://github.com/JordiTorresBCN/DEEP-LEARNING-practical-introduction-with-Keras"}, {"url": "https://colab.research.google.com", "anchor_text": "Colaboratory"}, {"url": "https://research.google.com/colaboratory/faq.html", "anchor_text": "faq page"}, {"url": "https://keras.io/getting-started/functional-api-guide/", "anchor_text": "also offers an API"}, {"url": "https://keras.io/models/sequential/", "anchor_text": "Sequential class"}, {"url": "https://keras.io/layers/core/#dense", "anchor_text": "Dense layer"}, {"url": "https://keras.io/initializers/#usage-of-initializers", "anchor_text": "initialization options"}, {"url": "https://towardsdatascience.com/basic-concepts-of-neural-networks-1a18a7aa2bd2", "anchor_text": "previous post"}, {"url": "https://en.wikipedia.org/wiki/Confusion_matrix", "anchor_text": "this link"}, {"url": "http://scikit-learn.org/stable/", "anchor_text": "Scikit-learn package"}, {"url": "http://scikit-learn.org/stable/modules/generated/sklearn.metrics.confusion_matrix.html", "anchor_text": "calculating the confusion matrix"}, {"url": "https://github.com/JordiTorresBCN/DEEP-LEARNING-practical-introduction-with-Keras", "anchor_text": "GitHub of the post, the reader can find the code used"}, {"url": "https://towardsdatascience.com/learning-process-of-a-deep-neural-network-5a9768d7a651", "anchor_text": "next post (updated)"}, {"url": "https://towardsdatascience.com/learning-process-of-a-deep-neural-network-5a9768d7a651", "anchor_text": "Learning Process of a Deep Neural NetworkHow Do Artificial Neural Networks Learn? [updated vesion]towardsdatascience.com"}, {"url": "https://medium.com/tag/keras?source=post_page-----d295bfca4487---------------keras-----------------", "anchor_text": "Keras"}, {"url": "https://medium.com/tag/tensorflow?source=post_page-----d295bfca4487---------------tensorflow-----------------", "anchor_text": "TensorFlow"}, {"url": "https://medium.com/tag/deep-learning?source=post_page-----d295bfca4487---------------deep_learning-----------------", "anchor_text": "Deep Learning"}, {"url": "https://medium.com/tag/neural-networks?source=post_page-----d295bfca4487---------------neural_networks-----------------", "anchor_text": "Neural Networks"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----d295bfca4487---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd295bfca4487&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-beginners-practical-guide-with-python-and-keras-d295bfca4487&user=Jordi+TORRES.AI&userId=497013a3c715&source=-----d295bfca4487---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd295bfca4487&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-beginners-practical-guide-with-python-and-keras-d295bfca4487&user=Jordi+TORRES.AI&userId=497013a3c715&source=-----d295bfca4487---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd295bfca4487&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-beginners-practical-guide-with-python-and-keras-d295bfca4487&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----d295bfca4487--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fd295bfca4487&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-beginners-practical-guide-with-python-and-keras-d295bfca4487&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----d295bfca4487---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----d295bfca4487--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----d295bfca4487--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----d295bfca4487--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----d295bfca4487--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----d295bfca4487--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----d295bfca4487--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----d295bfca4487--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----d295bfca4487--------------------------------", "anchor_text": ""}, {"url": "https://torres-ai.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://torres-ai.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Jordi TORRES.AI"}, {"url": "https://torres-ai.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "2.1K Followers"}, {"url": "https://torres.ai", "anchor_text": "https://torres.ai"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F497013a3c715&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-beginners-practical-guide-with-python-and-keras-d295bfca4487&user=Jordi+TORRES.AI&userId=497013a3c715&source=post_page-497013a3c715--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F9fb911e344f9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-learning-for-beginners-practical-guide-with-python-and-keras-d295bfca4487&newsletterV3=497013a3c715&newsletterV3Id=9fb911e344f9&user=Jordi+TORRES.AI&userId=497013a3c715&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}