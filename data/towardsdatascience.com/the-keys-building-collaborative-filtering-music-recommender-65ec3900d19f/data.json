{"url": "https://towardsdatascience.com/the-keys-building-collaborative-filtering-music-recommender-65ec3900d19f", "time": 1683005162.509346, "path": "towardsdatascience.com/the-keys-building-collaborative-filtering-music-recommender-65ec3900d19f/", "webpage": {"metadata": {"title": "The keys to creating a collaborative-filtering music recommender system | by Euge Inzaugarat | Towards Data Science", "h1": "The keys to creating a collaborative-filtering music recommender system", "description": "Collaborative filtering learns a function that can predict if a user will like a song, relying on the historical preference of users on a set of songs."}, "outgoing_paragraph_urls": [{"url": "https://medium.com/@meinzaugarat/the-abc-of-building-a-music-recommender-system-part-i-230e99da9cad", "anchor_text": "content-based recommendation systems", "paragraph_index": 4}, {"url": "http://millionsongdataset.com/", "anchor_text": "Million Song Dataset", "paragraph_index": 18}, {"url": "https://en.wikipedia.org/wiki/Sparse_matrix", "anchor_text": "sparse matrix", "paragraph_index": 27}, {"url": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.html", "anchor_text": "csr_matrix", "paragraph_index": 27}, {"url": "https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot.html", "anchor_text": "pivot", "paragraph_index": 29}, {"url": "https://en.wikipedia.org/wiki/Pivot_table", "anchor_text": "pivot table", "paragraph_index": 29}, {"url": "https://en.wikipedia.org/wiki/Instance-based_learning", "anchor_text": "lazy learning", "paragraph_index": 38}, {"url": "https://en.wikipedia.org/wiki/Lazy_learning", "anchor_text": "Lazy", "paragraph_index": 41}, {"url": "https://towardsdatascience.com/how-to-measure-distances-in-machine-learning-13a396aa34ce?source=friends_link&sk=adb1f38fb6c7cb31b6f2f992ad7bddbf", "anchor_text": "distances", "paragraph_index": 43}, {"url": "https://www.datacamp.com/community/tutorials/fuzzy-string-python", "anchor_text": "fuzzy matching", "paragraph_index": 63}, {"url": "https://pypi.org/project/fuzzywuzzy/", "anchor_text": "fuzzywuzzy", "paragraph_index": 63}, {"url": "https://en.wikipedia.org/wiki/Levenshtein_distance", "anchor_text": "Levenshtein Distance", "paragraph_index": 64}, {"url": "https://en.wikipedia.org/wiki/Data_binning", "anchor_text": "binning", "paragraph_index": 91}, {"url": "https://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVD", "anchor_text": "SVD", "paragraph_index": 97}, {"url": "https://surprise.readthedocs.io/en/stable/model_selection.html#surprise.model_selection.search.GridSearchCV", "anchor_text": "GridSearchCV", "paragraph_index": 102}, {"url": "https://heartbeat.fritz.ai/recommender-systems-with-python-part-ii-collaborative-filtering-k-nearest-neighbors-algorithm-c8dcd5fd89b2", "anchor_text": "Recommender Systems with Python \u2014 Part II: Collaborative Filtering (K-Nearest Neighbors Algorithm)", "paragraph_index": 112}, {"url": "https://towardsdatascience.com/building-a-music-recommendation-engine-with-probabilistic-matrix-factorization-in-pytorch-7d2934067d4a", "anchor_text": "Building a Music Recommendation Engine with Probabilistic Matrix Factorization in PyTorch", "paragraph_index": 113}, {"url": "https://heartbeat.fritz.ai/recommender-systems-with-python-part-iii-collaborative-filtering-singular-value-decomposition-5b5dcb3f242b", "anchor_text": "Recommender Systems with Python \u2014 Part III: Collaborative Filtering (Singular Value Decomposition)", "paragraph_index": 114}], "all_paragraphs": ["to count on both hands the ones I love", "\u2026 \u201c\u2014I started muttering one of my favorite songs", "I still remember singing this song at the concert.", "Even though it was not my first concert, it was the first concert I fully paid for with my first salary.", "Probably my mind just made the connection when I was writing about content-based recommendation systems.", "In a broad sense, a recommender (or recommendation) system (or engine) is a filtering system which aim is to predict a rating or preference a user would give to an item: a song, in our case.", "Among recommender systems, the most commonly used ones are content-based filters and collaborative filters.", "Content-based methods give recommendations based on the similarity of two song contents or attributes while collaborative methods make a prediction on possible preferences using a matrix with ratings on different songs.", "We are interested in understanding how Collaborative Filters work. The aim of this algorithm is to learn a function that can predict if a user will benefit from an item \u2014 meaning the user will likely listen to a song.", "In order to do so, this type of filtering only relies on the historical preference of users on a set of songs.", "1 A question that arises is how can we know the preferences of a user? The answer is something that we use in our everyday life: Rating.", "There are two ways to collect user ratings.", "The first one is by using Explicit Rating, this means we explicitly ask the user to give a rating. This represents the most direct feedback from users to show how much they like a song.", "The second uses Implicit Rating; so for example, we examine whether or not a user listened to a song, for how long or how many times, which may suggest that he/she liked that particular song.", "These ratings can be translated to binary \u2014 user listening or not to a song \u2014 , discrete \u2014 1 to 5 stars, or the numbers of times someone listened to a song\u2014, or a continuos number \u2014 the total minutes a user spent listening to an artist.", "After we collect ratings, we can generate interaction matrices.", "Interaction matrices are based on the many entries that include a user-song pair as well as a value that represents the user\u2019s rating for that song.", "In general, these interaction matrices are huge (million columns by million rows), very sparse and full of missing values. Why? Because most of the items have not been seen or rated by a particular user.", "In our case, we are going to use the Million Song Dataset, a freely-available collection of audio features and metadata for a million contemporary popular music tracks.", "There are two files that will be interesting for us.", "The first file gives us information about user ID, song ID and the listen count. We can read it from static.turi.com/datasets/millionsong/10000.txt.", "The second file will contain song ID, the title of that song, and artist name. We can read it fromstatic.turi.com/datasets/millionsong/song_data.csv", "After merging both files, we end up with a dataset consisting of 2 million observations with 9567 unique songs and 76353 unique users.", "We are going to use listen_count, the number of times a user listened to a song as an implicit rating.", "Doing some exploratory analysis, we can discover that a user listens to a mean number of 26 songs and a median of songs of 16.", "We can quickly see that not all users listen to all songs. So a lot of values in the song x users matrix are going to be zero. Thus, we\u2019ll be dealing with extremely sparse data.", "Dealing with such a sparse matrix, we\u2019ll take a lot of memory and resources. To make our life easier, let\u2019s just select all those users that have listened to at least 16 songs.", "We need now to work with a scipy-sparse matrix to avoid overflow and wasted memory. For that purpose, we'll use the csr_matrix function from scipy.sparse.", "First, we\u2019ll reshape the data based on unique values from song_id as index and user_id as columns to form axes of the resulting DataFrame.", "Then, we\u2019ll use the function pivot to produce a pivot table. Then, we\u2019ll convert this table to a sparse matrix.", "As we can observe many of the values are equal to zero. This indicates that the user has not listened to that song.", "2 So, how do collaborative filters recommend songs to a particular user? There are two main approaches to do this.", "It finds users with similar interests and behavior, and considering what those similar users listened to, it makes a recommendation. This technique is known as user-based approach (or user-item).", "Or it can take into account what songs the user has considered in the past and recommend new similar songs that the user can enjoy; a technique that is called item-based approach (or item-item).", "3 What algorithms do collaborative filters use to recommend new songs? There are several machine learning algorithms that can be used in the case of collaborative filtering. Among them, we can mention nearest-neighbor, clustering, and matrix factorization.", "Let\u2019s take a look at them.", "K-Nearest Neighbors (kNN) is considered the standard method when it comes to both user-based and item-based collaborative filtering approaches.", "Before we look into the specific use of this algorithm in recommendation systems, we\u2019ll explain what kNN is.", "The kNN algorithm is a supervised non-parametric lazy learning method used for both classification and regression.", "Supervised because it needs labeled data points to work.", "Non-parametric because it doesn\u2019t make any assumption on the data distribution.", "Lazy because does not use the training data points to do a generalization; it is delayed until the testing phase.", "This algorithm is based on feature similarity \u2014 we can start to see what it can be used for recommendation systems \u2014 .", "It basically assumes that similar things are located near to each other. And here distances strike again to measure how similar or \u2018close\u2019 two points are.", "Imagine that we have to classify a data point into one of two categories.", "We have two attributes that describe the different points. If we represent the points and its attributes in an x-y graph, it will look something like this:", "Now, how does the kNN algorithm know if this new point belongs to the yellow or green category?", "First, it will look at its k nearest neighbors. Then, it will determine which class that point should have by voting the most popular class among these k-points.", "Let\u2019s see this in action. If we put k = 5 in our example, we need to take the 5-nearest neighbors as follows:", "So, we have 3 points that belong to the green class and 2 to the yellow. So our new data point is classified as green.", "Pay attention here. The election of k is very important, as in our case if we were to set k=3, the new data point will be classified as yellow.", "When we use kNN to make a prediction about a song, the algorithm will calculate the distance between the target song and every other song in our dataset.", "Then, it will make a ranking according to their distances. Finally, it will return the top k nearest neighbor songs as song recommendations.", "Let\u2019s build a recommendation system using Python 3.7 that relies on k-nearest neighbors to recommend songs.", "For that, we\u2019ll create a class named Recommender. We will not describe the whole class here, instead, we are going to pay attention to the main functions inside it.", "We\u2019ll use the method NearestNeighbors from scikit-learn. This method takes several parameters that we should choose carefully.", "We also need to fit the model to the data. For that, we\u2019ll use the sparse matrix obtained before.", "Now, we can use this fitted model to recommend new songs.", "How do we do that? We just need to input the song and get the kneighbors from that song. This property from the model also tells us how close our song is to the recommended ones, allowing us to sort them.", "Because the system will output the id of the song, instead of the title, we\u2019ll make a function that maps those indices with the song title.", "If I want to make a recommendation, we won\u2019t have an id. We just will know the title. And sometimes this name is written in different ways.", "How do we solve this problem? A way to overcome this is to approximately match the string of the new song with the strings of all the songs in the dataset and determine how similar they are.", "If we found one that is similar, we\u2019ll take that song.", "We are going to use a common technique to do this is called fuzzy matching. We\u2019ll use the library fuzzywuzzy.", "This method uses Levenshtein Distance, which measures the minimum number of edits that you need to do to change a one-word sequence into the other. These edits can be insertions, deletions or substitutions.", "We have now our recommendation system in place. So it\u2019s time to use it.", "We first need to create a dictionary to decode the song titles based on their ids. This will be passed to the recommender.", "Then, we\u2019ll make a recommendation on the song I believe in miracles . Let\u2019s see what we got!", "There are some limitations to this method. It doesn\u2019t handle sparsity very well, and it\u2019s not computational efficient as we have more users or songs.", "To overcome these limitations, we can use other methods such as matrix factorization.", "Matrix Factorization is a powerful way to implement a recommendation system. The idea behind it is to represent users and items in a lower-dimensional latent space.", "So, in other words, Matrix factorization methods decompose the original sparse user-item matrix into lower dimensionality less sparse rectangular matrices with latent features.", "This does not only solve the sparsity issue but also makes the method scalable. It doesn\u2019t matter how big the matrix is, you can always find lower dimensionality matrices that are a true representation of the original one.", "But what are latent features, anyway? And, why does it make sense for recommendation systems?", "Imagine a user gave a good rating to the following songs: Highway to Hell (AC DC), The number of the Beast (Iron Maiden) and Smoke on the Water (Deep Purple).", "We could go on and considered them as three separate ratings. However, if our aim is to find a simpler way of representing their preference, we can just say that they like Hard Rock.", "Hard Rock is a latent feature. They are expressed by higher-level attributes instead of specific songs.", "Matrix Factorization will tell us how much a user is related to a set of features as well as how much a song belongs to this set of latent features.", "This confers an advantage over other collaborative filterings: although two users haven\u2019t rated any same song, we can still find the similarity between them if they share the same latent features.", "Among the different matrix factorization techniques, we found the popular singular value decomposition (SVD).", "This can be an abstract concept as we deepen into the mathematical foundations. But we\u2019ll try to keep it as simple as possible.", "Imagine we have a matrix A that contains the data for n users x m songs. This matrix can be decomposed uniquely into 3 matrices; let\u2019s called them U, S, and V.", "In terms of our song recommender:", "- U is an n users x r user-latent feature matrix", "- V is an m songs x r song-latent feature matrix", "- S is an r x r non-negative diagonal matrix containing the singular values of the original matrix.", "A singular value represents the importance of a specific feature in predicting a user preference.", "A Diagonal matrix is a matrix in which the entries outside the main diagonal are all zero.", "These three matrices are very easy to handle. Moreover, multiplying them will give us back the original matrix A.", "We have explored the data before. We know that a user listens to an average of 26 songs. After a little more exploration, we discovered that a song is listened to by an average of 200 users, with minimum 48 and maximum 8277 users.", "So we already know that it is a very sparse matrix. To make our life easier, let\u2019s just filter further the data. We are going to select only those songs which have been listened to by at least 200 users.", "Instead of working with the implicit rating as it is, we\u2019ll apply the binning technique.", "We\u2019ll define 10 categories. The original data values which fall into the interval from 0 to 1, will be replaced by the representative rating of 1; if they fall into the interval 1 to 2, they will be replaced by 2; and so on and so forth. The last category will be assigned to original values ranging from 9 to 2213.", "Let\u2019s now try to take the matrix factorization approach to recommend songs using Python 3.7 and a fun library called surprise.", "Surprise is an easy-to-use Python library specially designed for recommender systems. To install surprise we just need to run: pip install surprise.", "To load a dataset from our DataFrame, we will use the load_from_df() method.", "We will need to pass the following parameters:", "We\u2019ll use the built-in function for SVD. It\u2019s worth to notice that this implementation (popularized by Simon Funk during Netflix prize) factorizes a matrix into two other ones, and then it uses gradient descent to find optimal values of features and weights.", "This is not strictly the mathematical SVD explained above.", "Instead, this algorithm factorizes the original matrix as the product of two lower-dimensional matrices.", "The first matrix has a row containing latent features associated with each user. The second one has a column containing latent features associated with a song.", "First of all, we need to find which are the best parameters for our model for the data we have.", "The GridSearchCV class will compute accuracy metrics for the SVDalgorithm on the combinations of parameters selected, over a cross-validation procedure. This is useful for finding the best set of parameters for a prediction algorithm.", "cross_validate will run a cross-validation procedure for our best estimator found during the grid search, and it will report accuracy measures and computation times.", "This method uses KFold as the cross-validation technique.", "After finding the best parameters for the model, we can create our final model.", "We can use the method fit() to train the algorithm on the trainset, and then, the method test() to return the predictions obtained from the test set.", "Now, we can get the rating a user will give to a particular song:", "This model is now ready to be used!", "If you want to get more detail into the code, take a look at my repo in GitHub:", "If you are curious and eager to read more, read the following resources:", "Thierry Bertin-Mahieux, Daniel P.W. Ellis, Brian Whitman, and Paul Lamere. The Million Song Dataset. In Proceedings of the 12th International Societyfor Music Information Retrieval Conference (ISMIR 2011), 2011.", "Recommender Systems with Python \u2014 Part II: Collaborative Filtering (K-Nearest Neighbors Algorithm)", "Building a Music Recommendation Engine with Probabilistic Matrix Factorization in PyTorch.", "Recommender Systems with Python \u2014 Part III: Collaborative Filtering (Singular Value Decomposition)", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F65ec3900d19f&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-keys-building-collaborative-filtering-music-recommender-65ec3900d19f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-keys-building-collaborative-filtering-music-recommender-65ec3900d19f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-keys-building-collaborative-filtering-music-recommender-65ec3900d19f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-keys-building-collaborative-filtering-music-recommender-65ec3900d19f&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----65ec3900d19f--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----65ec3900d19f--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://eugeniainzaugarat.medium.com/?source=post_page-----65ec3900d19f--------------------------------", "anchor_text": ""}, {"url": "https://eugeniainzaugarat.medium.com/?source=post_page-----65ec3900d19f--------------------------------", "anchor_text": "Euge Inzaugarat"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5515433d5913&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-keys-building-collaborative-filtering-music-recommender-65ec3900d19f&user=Euge+Inzaugarat&userId=5515433d5913&source=post_page-5515433d5913----65ec3900d19f---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F65ec3900d19f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-keys-building-collaborative-filtering-music-recommender-65ec3900d19f&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F65ec3900d19f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-keys-building-collaborative-filtering-music-recommender-65ec3900d19f&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@creativesimonn?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Simon Noh"}, {"url": "https://unsplash.com/s/photos/music?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://medium.com/@meinzaugarat/the-abc-of-building-a-music-recommender-system-part-i-230e99da9cad", "anchor_text": "content-based recommendation systems"}, {"url": "http://millionsongdataset.com/", "anchor_text": "Million Song Dataset"}, {"url": "https://en.wikipedia.org/wiki/Sparse_matrix", "anchor_text": "sparse matrix"}, {"url": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.html", "anchor_text": "csr_matrix"}, {"url": "https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot.html", "anchor_text": "pivot"}, {"url": "https://en.wikipedia.org/wiki/Pivot_table", "anchor_text": "pivot table"}, {"url": "https://en.wikipedia.org/wiki/Instance-based_learning", "anchor_text": "lazy learning"}, {"url": "https://en.wikipedia.org/wiki/Lazy_learning", "anchor_text": "Lazy"}, {"url": "https://towardsdatascience.com/how-to-measure-distances-in-machine-learning-13a396aa34ce?source=friends_link&sk=adb1f38fb6c7cb31b6f2f992ad7bddbf", "anchor_text": "distances"}, {"url": "https://www.datacamp.com/community/tutorials/fuzzy-string-python", "anchor_text": "fuzzy matching"}, {"url": "https://pypi.org/project/fuzzywuzzy/", "anchor_text": "fuzzywuzzy"}, {"url": "https://en.wikipedia.org/wiki/Levenshtein_distance", "anchor_text": "Levenshtein Distance"}, {"url": "https://en.wikipedia.org/wiki/Data_binning", "anchor_text": "binning"}, {"url": "https://surprise.readthedocs.io/en/stable/reader.html#surprise.reader.Reader", "anchor_text": "Reader"}, {"url": "https://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVD", "anchor_text": "SVD"}, {"url": "https://surprise.readthedocs.io/en/stable/model_selection.html#surprise.model_selection.search.GridSearchCV", "anchor_text": "GridSearchCV"}, {"url": "https://github.com/ugis22/music_recommender", "anchor_text": "ugis22/music_recommenderA recommender (or recommendation) system (or engine) is a filtering system which aim is to predict a rating or\u2026github.com"}, {"url": "https://towardsdatascience.com/k-nearest-neighbors-knn-algorithm-bd375d14eec7", "anchor_text": "k-Nearest Neighbors Algorithm"}, {"url": "https://heartbeat.fritz.ai/recommender-systems-with-python-part-ii-collaborative-filtering-k-nearest-neighbors-algorithm-c8dcd5fd89b2", "anchor_text": "Recommender Systems with Python \u2014 Part II: Collaborative Filtering (K-Nearest Neighbors Algorithm)"}, {"url": "https://towardsdatascience.com/fuzzy-matching-at-scale-84f2bfd0c536", "anchor_text": "Fuzzy matching at scale"}, {"url": "https://towardsdatascience.com/building-a-music-recommendation-engine-with-probabilistic-matrix-factorization-in-pytorch-7d2934067d4a", "anchor_text": "Building a Music Recommendation Engine with Probabilistic Matrix Factorization in PyTorch"}, {"url": "https://heartbeat.fritz.ai/recommender-systems-with-python-part-iii-collaborative-filtering-singular-value-decomposition-5b5dcb3f242b", "anchor_text": "Recommender Systems with Python \u2014 Part III: Collaborative Filtering (Singular Value Decomposition)"}, {"url": "https://www.youtube.com/watch?v=9AP-DgFBNP4", "anchor_text": "Lecture 16.3"}, {"url": "https://www.youtube.com/watch?v=YW2b8La2ICo", "anchor_text": "Lecture 16.4"}, {"url": "https://medium.com/tag/data-science?source=post_page-----65ec3900d19f---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/tech?source=post_page-----65ec3900d19f---------------tech-----------------", "anchor_text": "Tech"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----65ec3900d19f---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/recommendation-system?source=post_page-----65ec3900d19f---------------recommendation_system-----------------", "anchor_text": "Recommendation System"}, {"url": "https://medium.com/tag/programming?source=post_page-----65ec3900d19f---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://creativecommons.org/licenses/by-sa/4.0/", "anchor_text": "Some rights reserved"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F65ec3900d19f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-keys-building-collaborative-filtering-music-recommender-65ec3900d19f&user=Euge+Inzaugarat&userId=5515433d5913&source=-----65ec3900d19f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F65ec3900d19f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-keys-building-collaborative-filtering-music-recommender-65ec3900d19f&user=Euge+Inzaugarat&userId=5515433d5913&source=-----65ec3900d19f---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F65ec3900d19f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-keys-building-collaborative-filtering-music-recommender-65ec3900d19f&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----65ec3900d19f--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F65ec3900d19f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-keys-building-collaborative-filtering-music-recommender-65ec3900d19f&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----65ec3900d19f---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----65ec3900d19f--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----65ec3900d19f--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----65ec3900d19f--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----65ec3900d19f--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----65ec3900d19f--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----65ec3900d19f--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----65ec3900d19f--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----65ec3900d19f--------------------------------", "anchor_text": ""}, {"url": "https://eugeniainzaugarat.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://eugeniainzaugarat.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Euge Inzaugarat"}, {"url": "https://eugeniainzaugarat.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "640 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5515433d5913&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-keys-building-collaborative-filtering-music-recommender-65ec3900d19f&user=Euge+Inzaugarat&userId=5515433d5913&source=post_page-5515433d5913--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F1ad8e6e46454&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-keys-building-collaborative-filtering-music-recommender-65ec3900d19f&newsletterV3=5515433d5913&newsletterV3Id=1ad8e6e46454&user=Euge+Inzaugarat&userId=5515433d5913&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}