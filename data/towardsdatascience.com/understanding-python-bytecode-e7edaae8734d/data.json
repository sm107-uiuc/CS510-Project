{"url": "https://towardsdatascience.com/understanding-python-bytecode-e7edaae8734d", "time": 1683004483.560987, "path": "towardsdatascience.com/understanding-python-bytecode-e7edaae8734d/", "webpage": {"metadata": {"title": "Understanding Python Bytecode. Learn about disassembling Python\u2026 | by Reza Bagheri | Towards Data Science", "h1": "Understanding Python Bytecode", "description": "The source code of a programming language can be executed using an interpreter or a compiler. In a compiled language, a compiler will translate the source code directly into binary machine code. This\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/closures-and-decorators-in-python-2551abbc6eb6", "anchor_text": "this article", "paragraph_index": 53}, {"url": "https://docs.python.org/2/library/marshal.html", "anchor_text": "marshal", "paragraph_index": 85}, {"url": "https://www.w3schools.com/python/python_iterators.asp", "anchor_text": "iterable", "paragraph_index": 141}, {"url": "https://docs.python.org/3/glossary.html#term-iterator", "anchor_text": "iterator", "paragraph_index": 141}, {"url": "https://towardsdatascience.com/closures-and-decorators-in-python-2551abbc6eb6", "anchor_text": "this article", "paragraph_index": 151}, {"url": "https://en.wikipedia.org/wiki/Endianness#Little-endian", "anchor_text": "little-endian system", "paragraph_index": 157}, {"url": "https://docs.python.org/3/library/inspect.html#inspect-module-co-flags", "anchor_text": "link", "paragraph_index": 157}, {"url": "https://docs.python.org/3/library/dis.html", "anchor_text": "dis", "paragraph_index": 194}, {"url": "https://docs.python.org/3/library/dis.html", "anchor_text": "module\u2019s webpage", "paragraph_index": 194}, {"url": "https://github.com/reza-bagheri/Understanding-Python-Bytecode", "anchor_text": "https://github.com/reza-bagheri/Understanding-Python-Bytecode", "paragraph_index": 194}], "all_paragraphs": ["The source code of a programming language can be executed using an interpreter or a compiler. In a compiled language, a compiler will translate the source code directly into binary machine code. This machine code is specific to that target machine since each machine can have a different operating system and hardware. After compilation, the target machine will directly run the machine code.", "In an interpreted language, the source code is not directly run by the target machine. There is another program called the interpreter that reads and executes the source code directly. The interpreter, which is specific to the target machine, translates each statement of the source code into machine code and runs it.", "Python is usually called an interpreted language, however, it combines compiling and interpreting. When we execute a source code (a file with a .py extension), Python first compiles it into a bytecode. The bytecode is a low-level platform-independent representation of your source code, however, it is not the binary machine code and cannot be run by the target machine directly. In fact, it is a set of instructions for a virtual machine which is called the Python Virtual Machine (PVM).", "After compilation, the bytecode is sent for execution to the PVM. The PVM is an interpreter that runs the bytecode and is part of the Python system. The bytecode is platform-independent, but PVM is specific to the target machine. The default implementation of the Python programming language is CPython which is written in the C programming language. CPython compiles the python source code into the bytecode, and this bytecode is then executed by the CPython virtual machine.", "In Python, the bytecode is stored in a .pyc file. In Python 3, the bytecode files are stored in a folder named __pycache__. This folder is automatically created when you try to import another file that you created:", "However, it will not be created if we don\u2019t import another file in the source code. In that case, we can still manually create it. To compile the individual files file_1.py to file_n.py from the command line, we can write:", "All the generated pyc files will be stored in the __pycache__ folder. If you provide no file names after compileall, it will compile all the python source code files in the current folder.", "We can also use the compile() function to compile a string that contains the Python source code. The syntax of this function is:", "compile(source, filename, mode, flag, dont_inherit, optimize)", "We only focus on the first three arguments which are required (the others are optional). source is the source code to compile which can be a String, a Bytes object, or an AST object. filename is the name of the file that the source code comes from. If the source code does not come from a file, you can write whatever you like or leave an empty string. mode can be:", "'exec': accepts Python source code in any form (any number of statements or blocks). It compiles them into a bytecode that finally returns None", "'eval' : accepts a single expression and compiles it into a bytecode that finally returns the value of that expression", "'single': only accepts a single statement (or multiple statements separated by ;). If the last statement is an expression, then the resulting bytecode prints the repr() of the value of that expression to the standard output.", "For example, to compile some Python statements we can write:", "To evaluate an expression we can write:", "This mode gives an error if you don\u2019t have an expression:", "Here a=a+1 is not an expression and does not return anything, so we cannot use the eval mode. However, we can use the single mode to compile it:", "But what is returned by compile? When you run the compile function, Python returns:", "So what the compile function is returning is a code object (the address after at can be different on your machine).", "The compile() function returns a Python code object. Everything in Python is an object. For example we you define an integer variable, its value is stored in an int object and you can easily check its type using the type() function:", "In a similar way, the bytecode generated by the compile function is stored in the code object.", "The code object contains not only the bytecode but also some other information necessary for the CPython to run the bytecode (they will be discussed later). A code object can be executed or evaluated by passing it to the exec() or eval() function. So we can write:", "When you define a function in Python, it creates a code object for it and you can access it using the __code__ attribute. For example, we can write:", "Like any other objects the code object has some attributes, and to get the bytecode stored in a code object, you can use its co_code attribute:", "The result is a bytes literal which is prefixed with b'. It is an immutable sequence of bytes and has a type of bytes. Each byte can have a decimal value of 0 to 255. So a bytes literal is an immutable sequence of integers between 0 to 255. Each byte can be shown by an ASCII character whose character code is the same as the byte value or it can be shown by a leading \\x followed by two characters. The leading \\x escape means that the next two characters are interpreted as hex digits for the character code. For example:", "since the first element has the decimal value of 101 and can be shown with the character e whose ASCII character code is 101. Or:", "since the 4th element has the decimal value of 131. The hexadecimal value of 131 is 83. So this byte can be shown with a character whose character code is \\x83.", "These sequences of bytes can be interpreted by CPython, but they are not human-friendly. So we need to understand how these bytes are mapped to the actual instructions that will be executed by CPython. In the next section, we are going to disassemble the byte code into some human-friendly instruction to see how the bytecode is executed by CPython.", "Before going into further details, it is important to note that the implementation detail of Bytecode usually changes between versions of Python. So what you see in this article may not be valid for all versions of Python. In fact, it includes the changes that happened in version 3.6, and some of the details may not be valid for older versions. The code in this article has been tested with Python 3.7.", "The bytecode can be thought of as a series of instructions or a low-level program for the Python interpreter. After version 3.6, Python uses 2 bytes for each instruction. One byte is for the code of that instruction which is called an opcode, and one byte is reserved for its argument which is called the oparg. Each opcode has a human-friendly name which is called the opname. The bytecode instructions have a general format like this:", "We already have the opcodes in our bytecode, and we just need to map them to their corresponding opname. There is a module called dis which can help with that. In this module, there is a list called opname which stores all the opnames. The i-th element of this list gives the opname for an instruction whose opcode is equal to i.", "Some instructions do not need an argument, so they ignore the byte after the opcode. The opcodes which have a value below a certain number ignore their argument. This value is stored in dis.HAVE_ARGUMENT and is currently equal to 90. So the opcodes >=dis.HAVE_ARGUMENT have an argument, and the opcodes < dis.HAVE_ARGUMENT ignore it.", "For example, suppose that we have a short bytecode b'd\\x00Z\\x00d\\x01S\\x00' and we want to disassemble it. This bytecode represents a sequence of four bytes. We can easily show their decimal value:", "The first two bytes of the bytecode is 100 0. The first byte is the opcode. To get its opname we can write (dis should be imported first):", "and the result is LOAD_CONST. Since the opcode is bigger than dis.HAVE_ARGUMENT, it has an oparg which is the second byte 0. So 100 0 translates into:", "The last two bytes in the bytecode are 83 0. Again we write dis.opname[83] and the result is RETURN_VALUE. 83 is lower than 90 (dis.HAVE_ARGUMENT), so this opcode ignores the oparg, and 83 0 is disassembled into:", "In addition, some of the instructions can have an argument too big to fit into the default one byte. There is a special opcode 144 to handle these instructions. Its opname is EXTENDED_ARG, and it is also stored in dis.EXTENDED_ARG. This opcode prefixes any opcode which has an argument bigger than one byte. For example, suppose that we have the opcode 131 (its opname is CALL_FUNCTION) and its oparg needs to be 260. So it should be:", "However, the maximum number that a byte can store is 255, and 260 does not fit into a byte. So this opcode is prefixed with EXTENDED_ARG:", "When the interpreter executes EXTENDED_ARG, its oparg (which is 1) is left-shifted by eight bits and stored in a temporary variable. Let\u2019s call it extended_arg (do not confuse it with the opname EXTENDED_ARG):", "So the binary value 0b1 (the binary value of 1) is converted to 0b100000000. This is like multiplying 1 by 256 in the decimal system and extened_arg will be equal to 256. Now we have two bytes in extened_arg. When the interpreter reaches to the next instruction, this two-byte value is added to its oparg (which is 4 here) using a bitwise or.", "This is like adding the value of the oparg to extened_arg. So now we have:", "and this value will be used as the actual oparg of CALL_FUNCTION. So, in fact,", "For each opcode, at most three prefixal EXTENDED_ARG are allowed, forming an argument from two-byte to four-byte.", "Now we can focus on the oparg itself. What does it mean? Actually the meaning of each oparg depends on its opcode. As mentioned before, the code object stores some information other than the bytecode. This information can be accessed using the different attributes of the code object, and we need some of these attributes to decipher the meaning of each oparg. These attributes are: co_consts, co_names, co_varnames, co_cellvars and co_freevars.", "I am going to explain the meaning of these attributes using an example. Suppose that you have the code object of this source code:", "Now we can check what is stored in each of these attributes:", "1-co_consts: A tuple containing the literals used by the bytecode. Here c.co_consts returns:", "So the literals 5 and 'text' and the name of the function 'f' are all stored in this tuple. In addition, the body of the function f is stored in a separate code object and is treated like a literal which is also stored in this tuple. Remember that the exec mode in compile() generates a bytecode that finally returns None. This None value is also stored as a literal. In fact, if you compile an expression in eval mode like this:", "None won\u2019t be included in the co_consts tuple anymore. The reason is that this expression returns its final value not None.", "If you try to get the co_const for the object code of a function like:", "The result will be (None, 2). In fact, the default return value for a function is None, and it is always added as a literal. As I explain later, for the sake of efficiency, Python does not check if you are always going to reach a return statement or not, so None is always added as the default return value.", "2-co_names: A tuple containing the names used by the bytecode which can be global variables, functions, and classes or also attributes loaded from objects. For example for the object code in Listing 1, c.co_names gives:", "3-co_varnames: A tuple containing the local names used by the bytecode (arguments first, then the local variables). If we try it for the object code of Listing 1, it gives an empty tuple. The reason is that the local names are defined inside functions, and the function inside Listing 1 is stored as a separate code object, so its local variables will not be included in this tuple. To access the local variables of a function, we should use this attribute for the code object of that function. So we first write this source code:", "Why t is not included? The reason is that t is not a local variable of f. It is a nonlocal variable since it is accessed by the closure g inside f. In fact, x is also a nonlocal variable, but since it is the function\u2019s argument, it is always included in this tuple. To learn more about closures and nonlocal variables you can refer to this article.", "4-co_cellvars: A tuple containing the names of nonlocal variables. These are the local variables of a function accessed by its inner functions. So f.__code__.co_cellvars gives:", "5-co_freevars: A tuple containing the names of free variables. Free variables are the local variables of an outer function which are accessed by its inner function. So this attribute should be used with the code object of the closure h. Now h.__code__.co_freevars gives the same result:", "Now that we are familiar with these attributes, we can go back to the opargs. The meaning of each oparg depends on its opcode. We have different categories of opcodes, and for each category, the oparg has a different meaning. In the dis module, there are some lists that give the opcodes for each category:", "1-dis.hasconst: This list is equal to [100]. So only the opcode 100 (its opname is LOAD_CONST) is in the category of hasconst. The oparg of this opcode gives the index of an element in the co_consts tuple. For example in the bytecode of Listing 1, if we have:", "then the oparg is the element of co_consts whose index is 1. So we should replace 1 with co_consts[1] which is equal to 'text'. So the instruction will be interpreted as:", "Similarly, there are some other lists in the dis module that define the other categories for the opcodes:", "2-dis.hasname: The oparg for the opcodes in this list, is the index of an element in co_names", "3-dis.haslocal: The oparg for the opcodes in this list, is the index of an element inco_varnames", "4-dis.hasfree: The oparg for the opcodes in this list, is the index of an element in co_cellvars + co_freevars", "5-dis.hascompare: The oparg for the opcode in this list, is the index of an element of the tuple dis.cmp_op. This tuple contains the comparison and membership operators like < or ==", "6-dis.hasjrel: The oparg for the opcodes in this list, should be replaced with offset + 2 + oparg where offset is the index of the byte in the bytecode sequence which represents the opcode.", "The code object has one more important attribute that should be discussed here. It is called co_lnotab which stores the line number information of the bytecode. This is an array of signed bytes stored in a bytes literal and is used to map the bytecode offsets to the source code line numbers. Let me explain it by an example. Suppose that your source code has only three lines and it has been compiled into a bytecode which has 24 bytes:", "Now we have a mapping from bytecode offsets to line numbers like this table:", "The bytecode offset always starts at 0. The code object has an attribute named co_firstlineno which gives the line number for the offset zero. For this example co_firstlineno is equal to 1. Instead of storing the offset and line numbers literally, Python stores only the increments from one row to the next (excluding the first row). So the previous table turns into:", "These two increment columns are zipped together in a sequence like this:", "Each number is stored in a byte and the whole sequence is stored as a bytes literal in the co_lnotab of the code object. So if you check the value of co_lnotab you get:", "which is the bytes literal for the previous sequence. So by having the attributes co_lnotab and co_firstlineno you can retrieve the mapping from the bytecode offsets to the source code line numbers. co_lnotab is a sequence of signed bytes. So each signed byte in it can take a value from -128 to 127 (These values are still stored in a byte which takes 0 to 255. But a value between 128 and 255 is considered a negative number). A negative increment means that the line number is decreasing (this feature is used in optimizers). But what happens if the line increment is bigger than 127? In that case, the line increment will be split into 127 and some extra bytes and those extra bytes will be stored with a zero offset increment (if it is smaller than -128, it will be split into -128 and some extra bytes with a zero offset increment). For example, suppose that the bytecode offset versus the line number is like this:", "Then the offset increment versus the line number increment should be:", "139 is equal to 127 + 12. So the previous row should be written as:", "Now that we are familiar with the bytecode structure, we can write a simple disassembler program. We first write a generator function to unpack each instruction and yield the offset, opcode, and oparg:", "This function reads the next pair of bytes from the bytecode. The first byte is the opcode. By comparing this opcode with dis.HAVE_ARGUMENT, the function decides if it should take the second byte as the oparg or ignore it. The value of extended_arg will be added to oparg using the bitwise or (|). Initially, it is zero and has no effect on the oparg. If the opcode is equal to dis.EXTENDED_ARG, its oparg will be left-shifted by eight bits and stored in a temporary variable called extended_arg.", "In the next iteration, this temporary variable will be added to the next oparg and adds one byte to it. This process continues if the next opcode is dis.EXTENDED_ARG again, and each time adds one byte to extended_arg. Finally when it reaches a different opcode, extended_arg will be added to its oparg and set back to zero.", "The find_linestarts function returns a dictionary that contains the source code line number for each bytecode offset.", "It first divided the co_lnotab bytes literal into two sequences. One is the offset increments and the other is the line number increments. The line number for offset 0 is in co_firstlineno. The increments are added to these two numbers to get the bytecode offset and its corresponding line number. If the line number increment is equal or bigger than 128 (0x80), it will be considered a decrement.", "The get_argvalue function returns the human-friendly meaning of each oparg. It first checks to which category the opcode belongs and then figures out what the oparg is referring to.", "The findlabels function finds all the offsets in the bytecode which are jump targets and returns a list of these offsets. The jump targets will be discussed in the next section.", "Now we can use all these functions to disassemble the bytecode. The dissassemble function takes a code object and disassembles it:", "It will first unpack the offset, opcode and oparg for each pair of bytes in the bytecode of the code object. Then it finds the corresponding source code line numbers, and checks if the offset is a jump target. Finally, it finds the opname and the meaning of the oparg and prints all the information. As mentioned before each function definition is stored in a separate code object. So at the end the function calls itself recursively to disassemble all the function definitions in the bytecode. Here is an example of using this function. Initially, we have this source code:", "We first store it in a string and compile it to get the object code. Then we use the disassemble function to disassemble its bytecode:", "So 4 lines of source code are converted into 38 bytes of bytecode or 19 lines of bytecode. In the next section, I will explain the meaning of these instructions and how they will be interpreted by CPython.", "The module dis has a function named dis() which can disassemble the code object similarly. In fact, the disassmble function in this article is a simplified version of dis.dis function. So instead of writing, disassemble(c) we could write dis.dis(c) to get a similar output.", "As mentioned before, when the source code is compiled, the bytecode is stored in a pyc file. This bytecode can be disassembled in a similar way. However, it is important to mention that the pyc file contains some metadata plus the code object in marshal format. The marshal format is used for Python\u2019s internal object serialization. The size of the metadata depends on the Python version, and for version 3.7 it is 16 bytes. So when you read the pyc file, first you should read the metadata, and then load the code object using the marshal module. For example, to disassemble a pyc file named u1.cpython-37.pyc in the __pycache__ folder we can write:", "So far we learned how to disassemble the bytecode instructions. We can now focus on the meaning of these instructions and how they are executed by CPython. CPython which is the default implementation of Python uses a stack-based virtual machine. So first we should get familiar with the stack.", "Stack is a data structure with a LIFO (Last In First Out) order. It has two principal operations:", "So the last element added or pushed to the stack is the first element to be removed or popped. The advantage of using stack to store data is that memory is managed for you. Reading from and writing to stack is very fast, however, the size of stack is limited.", "Data in Python is represented as objects stored on a private heap. Accessing the data on heap is a bit slower compared to stack, however, the size of heap is only limited by the size of virtual memory. The elements of heap have no dependencies with each other and can be accessed randomly at any time. Everything in Python is an object and objects are always stored on the heap. It\u2019s only the reference (or the pointer) to the object that is stored in the stack.", "CPython uses the call stack for running a Python program. When a function is called in Python, a new frame is pushed onto the call stack, and every time a function call returns, its frame is popped off. The module in which the program runs has the bottom-most frame which is called the global frame or the module frame.", "Each frame has an evaluation stack where the execution of a Python function occurs. The function arguments and its local variables are pushed into this evaluation stack. CPython uses the evaluation stack to store the parameters required for any operations and also the result of those operations. Before starting that operation, all the required parameters are pushed onto the evaluation stack. Then the operation is started and it pops its parameters. When the operation is finished, it pushes the result back onto the evaluation stack.", "All the objects are stored on the heap and the evaluation stack in the frames deals with references to them. So the references to these objects can be pushed onto the evaluation stack temporarily to be used for the later operations. Most of Python\u2019s bytecode instructions manipulate the evaluation stack in the current frame. In this article whenever we talk about the stack it means the evaluation stack in the current frame or the evaluation stack in the global frame if we are not in the scope of any functions.", "Let me start with a simple example, and disassemble the bytecode of the following source code:", "To do that we can write:", "In addition, we can check some other attributes of the code object:", "Here the code is running in the module, so we are inside the global frame. The first instruction is LOAD_CONST 0. The instruction", "pushes the value of co_consts[consti] onto the stack. So we are pushing co_consts[0] (which is equal to 1) onto the stack.", "It is important to note that stack works with references to the objects. So whenever we say that an instruction pushes an object or the value of an object onto the stack, it means that a reference (or pointer) to that object is being pushed. The same thing happens when an object or its value is popped off the stack. Again its reference is popped. The interpreter knows how to retrieve or store the object's data using these references.", "pops the top of the stack and stores it into an object whose reference is stored in co_names[namei] of the code object. So STORE_NAME 0 pops the element on top of the stack (which is 1) and stores it in an object. The reference to this object is co_names[0] which is a. These two instructions are the bytecode equivalent of a=1 in the source code. b=2 is converted similarly, and now the interpreter has created the objects a and b. The last line of the source code is c=a+b. The instruction", "pops the top two elements of the stack (1 and 2), adds them together and pushes the result (3) onto the stack. So now 3 is on top of the stack. After that STORE_NAME 2 pops the top of the stack into the local object (referred by) c. Now remember that compile in exec mode compiles the source code into a bytecode that finally returns None. The instruction LOAD_CONST 2 pushes co_consts[2]=None onto the stack, and the instruction", "returns with the top of the stack to the caller of the function. Of course, here we are in the module scope and there is no caller function, so None is the final result which remains on top of the global stack. Figure 1 shows all the bytecode operations with offsets 0 to 14 (Again it should be noted that the references to the objects are pushed onto the stack, not the objects or their values. The figure does not show it explicitly).", "Now let\u2019s see what happens if we also have a function. We are going to disassemble the bytecode of a source code which has a function:", "In addition, we can check some other attributes of the code object:", "In the first line (offsets 0 and 2) the constant 1 is first pushed into the evaluation stack of the global frame using LOAD_CONST 0. Then STORE_NAME 0 pops it and stores it in an object.", "In the second line, the constant 2 is pushed into the stack using LOAD_CONST 1. However, a different opname is used to assign it to the reference. The instruction", "pops the top of the stack and stores it into an object whose reference is stored in co_names[namei]. So 2 is stored in the object referred by b. This is considered a global variable. But why was this instruction not used for a? The reason is that a is a global variable inside the function f. If a variable is defined at the module scope and no functions access it, it will be stored and loaded using STORE_NAME and LOAD_NAME. At the module scope, there is no distinction between global and local variables.", "In the third line, the function f is defined. The body of the function is compiled in a separate code object named <code object f at 0x00000218C2E758A0, file \"\", line 3> and it is pushed onto the stack. Then a string object which is the name of this function 'f' is pushed onto the stack (in fact references to them are pushed). The instruction", "is used to create the function. It needs some parameters that should be pushed onto the stack. The name of the function should be on top of the stack and the function\u2019s code object should be below it. In this example, its oparg is zero, but it can have other values. For example, if the function definition had a keyword argument like:", "Then the disassembled bytecode for line 2 would be:", "An oparg of 1 for MAKE_FUNCTION indicates that the function has some keyword arguments, and a tuple containing the default values should be pushed onto the stack before the function\u2019s code object (here it is (5,)). After creating the function, MAKE_FUNCTION pushes the new function object onto the stack. Then at offset 14, STORE_NAME 2 pops the function object and stores it as a function object referenced by f.", "Now let\u2019s looks inside the code object of f(x) which starts at line 5. The statement global a does not convert into a separate instruction in the bytecode. It only guides the compiler that a should be treated as a global variable. So STORE_GLOBAL 0 will be used to change its value. The instruction", "pushes a reference to the object referred by co_names[namei] onto the stack. It is then stored in b using STORE_GLOBAL 0. The instruction", "pushes a reference to the object whose reference is co_varnames[var_num] onto the stack. In the code object of function f, the attribute co_varnames contains:", "So LOAD_FAST 0 pushes x onto the stack. Then 1 is pushed onto the stack. BINARY_ADD pops x and 1, adds them together and pushes the result onto the stack. The instruction", "pops the top of the stack and stores it into an object whose reference is stored in co_varnames[var_num]. So STORE_FAST 1 pops the result and stores it in an object whose reference is y. LOAD_FAST and STORE_FAST are used with local variables of the functions. So they are not used at the module scope. On the other hand, LOAD_GLOBAL and STORE_GLOBAL are used for the global variables accessed inside functions. Finally, LOAD_FAST 1 will push the value of y on top of the stack and RETURN_VALUE will return it to the caller of the function which is the module.", "But how this function is called? If you look at the bytecode of line 8, first, LOAD_NAME 2 pushes the function object whose reference is f onto the stack. LOAD_CONST 4 pushes its argument (4) onto the stack. The instruction", "calls a callable object with positional arguments. Its oparg, argc indicates the number of positional arguments. The top of the stack contains positional arguments, with the right-most argument on top. Below the arguments is the function callable object to call.", "CALL_FUNCTION first pops all the arguments and the callable object off the stack. Then it will allocate a new frame on the call stack, populate the local variables for the function call, and execute the bytecode of the function inside that frame. Once that's done, the frame will be popped off the call stack, and in the previous frame, the return value of the function will be pushed on top of the evaluation stack. If there is no previous frame, it will be pushed on top of the evaluation stack of the global frame.", "In our example, we only have one positional argument, so the instruction will be CALL_FUNCTION 1. After that, the instruction", "pops the item on top of the stack. That is because we do not need the returned value of the function anymore. Figure 2 shows all the bytecode operations with offsets 16 to 22. The bytecode instructions inside f(x) are shown in red.", "In line 9 of the disassembled bytecode of Listing 2, we want to print(a). print is also a function, but it is a built-in Python function. The name of the function is a reference to its callable object. So first it is pushed onto the stack and then its argument is pushed. Finally, it will be called using CALL_FUNCTION. print will return None, and the returned value will be popped off the stack after that.", "Python uses its built-in functions to create data structures. For example, the following line:", "Initially, each element of the list is pushed onto the stack. Then the instruction", "is called to create the list using the count items from the stack and pushes the resulting list object onto the stack. Finally, the object on the stack will be popped and stored on the heap and a will be its reference.", "As mentioned before, some of the instructions can have an argument too big to fit into the default one byte, and they will be prefixed by the instruction EXTENDED_ARG. Here is an example. Suppose that we want to print 260 * characters. We could simply write print('*' * 260). However, I will write something unusual instead:", "Here s contains a print function which takes 260 arguments and each of them is a * character. Now look at the resulting disassembled bytecode:", "Here print is pushed onto the stack first. Then its 260 arguments are pushed. Then CALL_FUNCTION should call the function. But it needs the number of the arguments (of the target function) as its oparg. Here this number is 260 which is bigger than the maximum number that a byte can take. Remember that the oparg is only one byte. So the CALL_FUNCTION is prefixed by EXTENDED_ARG. The actual bytecode is:", "As mentioned before the oparg of EXTENDED_ARG will be left-shifted by eight bits or simply multiplied by 256 and will be added to the oparg of the next opcode. So the oparg of CALL_FUNCTION will be interpreted to be 256+4 = 260 (please note that what the disassemble function shows is this interpreted oparg not the actual oparg in the bytecode).", "Consider the following source code which has an if-else statement:", "We have a few new instructions here. In line 2, the object that a refers to is pushed onto the stack, and then literal 0 is pushed. The instruction", "performs a Boolean operation. The operation name can be found in cmp_op[oparg]. The values of cmp_op are stored in a list named dis.cmp_op. The instruction first pops the top two elements of the stack. We call the first one TOS1 and the second one TOS2. Then the boolean operation selected by oparg is performed on them (TOS2 cmp_op[oparg] TOS1), and the result is pushed on top of the stack. In this example TOS1=0 and TOS2=value of a. In addition, the oparg is 5 and cmp_op[5]='\u2265'. So cmp_op will test a\u22650 and stores the result (which is true or false) on top of the stack.", "performs a conditional jump. First, it pops the top of the stack. If the element on top of the stack is false, it sets the bytecode counter to target. The bytecode counter shows the current bytecode offset which is being executed. So it jumps to the bytecode offset which is equal to target and the execution of bytecode continues from there. The offset 18 in the bytecode is a jump target, so there is a >> in front of that in the disassembled bytecode. The instruction", "increments the bytecode counter by delta. In the previous bytecode, the offset of this instruction is 16, and we know that each instruction takes 2 bytes. So when this instruction is finished, the bytecode counter is 16+2=18. Here delta=6, and 18+6=24, so it jumps to the offset 24. The offset 24 is a jump target and it has a >> sign too.", "Now we can see how the if-else statement is converted to the bytecode. The cmp_op checks if a\u22650. If the result is false, POP_JUMP_IF_FALSE jumps to the offset 18 which is the start of else block. If it is true, the if block will be executed and then JUMP_FORWARD jumps to the offset 24 and does not execute the else block.", "Now let\u2019s see a more complicated Boolean expression. Consider the following source code:", "Here we have a logical and. The disassembled bytecode is:", "In Python and is a short-circuit operator. So when evaluating X and Y, it only evaluates Y if X is true. This can be easily seen in the bytecode. In line 3, first, the left operand of and is evaluated. If (a\u22650) is false, it does not evaluate the second operand and jumps to the offset 30 to execute the else block. However, if it is true, the second operand (b==3) will be evaluated too.", "As mentioned before, there is an evaluation stack inside each frame. In addition, in each frame, there is a block stack. It is used by CPython to keep track of certain types of control structures like the loops, with blocks and try/except blocks. When CPython wants to enter one of these structures a new item is pushed onto the block stack, and when CPython exits that structure, the item for that structure is popped off the block stack. Using the block stack CPython knows which structure is currently active. So when it reaches a break or continue statement, it knows which structures should be affected.", "Let\u2019s see how loops are implemented in the bytecode. Consider the following code and its disassembled bytecode:", "is executed before the loop starts. This instruction pushes a new item (which is also called a block) onto the block stack. delta is added to the bytecode counter to determine the offset of the next instruction after the loop. Here the offset of SET_LOOP is 0, so the bytecode counter is 0+2=2. In addition, delta is 24, so the offset of the next instruction after the loop is 2+24=26. This offset is stored in the block that is pushed onto the block stack. In addition, the current number of items in the evaluation stack is stored in this block.", "After that, the function range(3) should be executed. Its oparg (3) is pushed before the name of the function. The result is an iterable. Iterables can generate an iterator using the instruction:", "It takes the iterable on top of the stack and pushes an iterator of that. The instruction:", "assumes that there is an iterator on top of the stack. It calls its __next__() method. If it yields a new value, this value is pushed on top of the stack (above the iterator). Inside the loop, the top of the stack is stored in i after that, and the print function is executed. Then the top of the stack which is the current value of the iterator is popped. After that, the instruction", "sets the bytecode counter to target and jumps to the target offset. So it jumps to offset 10 and runs FOR_ITER again to get the next value of the iterator. If the iterator indicates that there are no further elements available, the top of stack is popped, and the byte code counter is incremented by delta. Here delta=12, so after finishing the loop it jumps to offset 24. At offset 24, the instruction", "removes the current block from the top of the block stack. The offset of the next instruction after the loop is stored in the block (here it is 26). So the interpreter will jump to that offset and continue execution from there. Figure 3 shows the bytecode operations with offsets 0, 10, 24 and 26 as an example (In fact in Figures 1 and 2 we only showed the evaluation stack in each frame).", "But what happens if we add a break statement to this loop? Consider the following source code and its disassembled bytecode:", "We have only added a break statement to the previous loop. This statement is converted to", "This opcode removes those extra items on the evaluation stack and pops the block from the top of the block stack. You should notice that the other instructions of the loop are still using the evaluation stack. So when the loop breaks, the items that belong to it should be popped off the evaluation stack. In this example, the iterator object is still on top of the stack. Remember that the block in the block stack stores the number of items that existed in the evaluation stack before starting the loop.", "So by knowing that number, BREAK_LOOP pops those extra items off the evaluation stack. Then it jumps to the offset which is stored in the current block of the block stack (here it is 28). That is the offset of the next instruction after the loop. So the loop breaks and the execution is continued from there.", "The code object is an object of type code, and it is possible to create it dynamically. The module types can help with dynamic creation of new types, and the class CodeType() in this module returns a new code object:", "The arguments form all the attributes of the code object. You are already familiar with some of these arguments (like co_varnames and co_firstlineno). freevars and cellvars are optional since they are used in closures and not all functions use them (Refer to this article for more information about them). The other attributes are explained using the following function as an example:", "co_argcount: If the code object is that of a function, the number of arguments it takes (not including keyword only arguments, * or ** args). For function f it is 2.", "co_kwonlyargcount: If the code object is that of a function, number of keyword only arguments (not including ** arg). For function f it is 1.", "co_nlocals: The number of local variables plus the name of functions defined in the code object (arguments are also considered local variables). In fact, it is the number of elements in co_varnames which is ('a', 'b', 'c', 'args', 'kwargs', 'd', 'g'). So it is 7 for f.", "co_stacksize: Shows the largest number of elements that will be pushed onto the evaluation stack by this code object. Remember that some opcodes need to push some elements onto the evaluation stack. This attribute shows the largest size that the stack will ever grow to from the bytecode operations. In this example it is 2. Let me explain the reason for that. If you disassemble the bytecode of this function you get:", "In line 2, one element is pushed onto the stack using the LOAD_CONST and will be popped using STORE_FAST. Lines 5 and 6 similarly push one element onto the stack and pop it later. But in line 3, two elements are pushed onto the stack to define the inner function g: its code object and its name. So this is the maximum number of elements that will be pushed onto the evaluation stack by this code object, and it determines the stack size.", "co_flags: An integer, with bits indicating things like whether the function accepts a variable number of arguments, whether the function is a generator, etc. In our example its value is 79. The binary value of 79 is 0b1001111. It uses a little-endian system in which the bytes are written from left to right in increasing significance. So the first bit is the first one on the right. You can refer to this link for the meaning of these bits. For example, the third bit from the right represents the CO_VARARGS flag. When it is 1 it means that the code object has a variable positional parameter (*args-like).", "co_filename: A string, specifying the file in which the function is present. In this case, it is '<ipython-input-59\u2013960ced5b1120>' since I was running the script in Jupyter notebook.", "co_name: A name with which this code object was defined. Here it is the name of the function 'f'.", "Now that we are completely familiar with the code object, we can start changing its bytecode. It is important to note that the code object is immutable. So once created we cannot change it. Suppose that we want to change the bytecode of the following function:", "Here we cannot change the bytecode of the code object of the function directly. Instead, we need to create a new code object and then assign it to this function. To do that we need a few more functions. The disassemble function can disassemble the bytecode into some human-friendly instructions. We can change them as we like, but then we need to assemble it back to the bytecode to assign it to a new code object. The output of disassemble is a formatted string which is easy to read, but difficult to change. So I will add a new function which can disassemble the bytecode into a list of instructions. It is very similar to disassemble, however, its output is a list.", "We can try it on the previous function:", "We can now change the instructions of this list easily. But we also need to assemble it back to the bytecode:", "The function get_oparg is like the inverse of get_argvalue. It takes an argvalue which is the human-friendly meaning of an oparg and returns the corresponding oparg. It needs the code object as its argument since the attributes of the code object like co_consts are necessary to convert the argvalue into the oparg.", "The function assemble takes a code object and a disassembled bytecode list and assembles it back into the bytecode. It uses dis.opname to convert the opname to the opcode. Then it calls get_oparg to convert the argvalue to the oparg. Finally, it returns a bytes literal of the bytecode list. We can now use these new functions to change the bytecode of the previous function f. First, we change one of the instructions in disassembled_bytecode:", "pops the top two elements of the stack, multiplies them together and pushes the result onto the stack. Now we assemble the modified disassembled bytecode:", "After that we create a new code object:", "We use all the attributes of f to create it and only replace the new bytecode (new_co_code). Then we assign the new code object to f. Now if we run f again, it does not add its arguments together. Instead, it will multiply them together:", "Caution: The types.CodeType function has two optional arguments for freevars and cellvars, however, you should be careful when using them. As mentioned before the co_cellvars and co_freevars attributes of the code object are only used when the code object belongs to a function which has free variables or nonlocal variables. So the function should be a closure or a closure should have been defined inside it. For example, consider the following function:", "Now if check its code object:", "In fact, this function has one nonlocal variable x since this variable is accessed by its inner functions. Now we can try recreating its code object using the same attributes:", "But if we check the same attribute of the new code object", "It turns out to be empty. So types.CodeType cannot create the same code object. If you try to assign this code object to a function and execute that function, you will get an error (this has been tested on Python 3.7.4).", "Understanding the bytecode instructions can help us with the optimization of the source code. Consider the following source code:", "Here we define a function f() to calculate a simple mathematical expression. It has been defined in two different ways. In setup1, we are using the global variable mult inside f() and directly use the log() function from math module. In setup2, mult is a local variable of f(). In addition, math.log is first stored in the local variable log. Now we can compare the performance of these function:", "You may get different numbers for t1 and t2, but the bottom line is that setup2 is faster than setup1. Now let\u2019s compare their bytecode to see why it is faster. We just look at the line 7 in the disassembled code of setup1 and setup2. This is the bytecode for this line: total += mult * log(i).", "As you see in setup1 both mult and math are loaded using LOAG_GLOBAL, but in setup2, mult and log are loaded using LOAD_FAST. So two LOAD_GLOBAL instructions have been replace with LOAD_FAST. The fact is that LOAD_FAST as its name suggests is much faster than LOAD_GLOBAL. We mentioned that the name of the global and local variables are stored in the co_names, and co_varnames. But how does the CPython interpreter find the values when executing the compiled code?", "Local variables are stored in an array on each frame (which is not shown in the previous figures to make them simpler). We know that the name of local variables are stored in co_varnames. Their values will be stored with the same order in this array. So when the interpreter sees an instruction like LOAD_FAST 1 (mult), it reads the element of that array at index 1.", "The global and builtins of the module are stored in a dictionary. We know that their names are stored in the co_names. So when the interpreter sees an instruction like LOAD_GLOBAL 1 (mult), it first gets the name of that global variable from co_names[1]. Then it will look up this name in the dictionary to get its value. This is a much slower process compared to a simple array lookup for the local variables. As a result, LOAD_FAST is faster than LOAD_GLOBAL, and replacing LOAD_GLOBAL with LOAD_FAST can improve performance. It can be done by simply storing builtin and global variables into local variables or directly changing the bytecode instructions.", "This example illustrates how to use the bytecode injection to change the behavior of functions. We are going to write a decorator which adds a const statement to Python. In some programming languages like C, C++, and JavaScript there is a const keyword. If a variable is declared as const using this keyword, then changing its value is illegal, and we cannot change the value of this variable in the source code anymore.", "Python does not have a const statement, and I do not claim that it is really necessary to have such a keyword in Python. In addition, defining constants can be also done without using the bytecode injection. So this is just an example to show you how to put the bytecode injection into action. First, let me show how you can use it. The const keyword is provided using a function decorator named const. Once you decorate a function by const, you can declare the variable inside it as constants using the keyword const. (the . at the end is part of the keyword). Here is an example:", "The variable A inside f is now a constant. Now if you try to reassign this variable inside f, an exception will be raised:", "When a variable is declared as const., it should be assigned to its initial value, and it will be a local variable of that function.", "Now let me show you how it has been implemented. Suppose that I define a function like this (without decoration):", "It will be compiled properly. But if you try executing this function, you get an error:", "Now let's take a look at the disassembled bytecode of this function:", "When Python tries to compile the function, it takes const as a global variable since it has not been defined in the function. The variable A is considered to be an attribute of the global variable A. In fact, const. A=1 is the same as const.A=1 since Python ignores the whitespace between the dot operator and the name of the attribute. Of course, we really do not have a global variable named A in the source code. But Python will not check it at compile time. Only during execution it will turn out that the name const is not defined. So our source code will be accepted during compiling. But we need to change its bytecode before executing the code object of this function. We first need to create a function to change the bytecode:", "This function receives the list of bytecode instructions generated by assemble_to_list as its argument. It has two lists named constants and indices which store the name of the variables declared as const and the offset at which they have been assigned for the first time. The first loop searches the list of bytecode instructions and finds all the ['LOAD_GLOBAL', 'const'] instructions. The name of the variable should be in the next instruction. In this example the next instruction is ['STORE_ATTR', 'A'], and the name is A. This name and the offset of this instruction is stored in constants and indices. Now we need to get rid of the global variable const and its attribute and create a local variable named A instead. The instruction", "is a \u2018Do nothing\u2019 code. When the interpreter reaches to NOP, it will ignore it. We cannot simply delete the opcode from the list of instructions since deleting one instruction reduces the offset of all the following instructions. Now if there are some jumps in the bytecode, their target offset should change too. So it is much easier to simply replace the unwanted instruction with NOP. Now we replace ['LOAD_GLOBAL', 'const'] with NOP and then replace ['STORE_ATTR', 'A'] with ['STORE_FAST', 'A']. The final bytecode looks like this:", "Now line 2 is the equivalent of a=2 in the source code, and executing this bytecode does not cause any run-time error. The loop also checks if the same variable is not declared as const twice. So if the variable declared as const already exists in the constants list, it will raise a custom exception. Now the only remaining thing is to make sure that the const variables have not been reassigned.", "The second loop searches the list of bytecode instructions again to find any reassignment of the constant variables. Any instruction like ['STORE_GLOBAL', 'A'] or ['STORE_FAST', 'A'] means that a reassignment is in the source code, so it will raise a custom exception to warn the user. The offset of the initial assignment of a const is required to make sure that the initial assignment is not considered as a reassignment.", "As mentioned before, the bytecode should be changed before executing the code. So the function add_const needs to be called before calling the function f. For this reason, we place it inside a decorator. The decorator function const receives the target function f as its argument. It will first change the bytecode of f using add_const and then create a new code object with the modified bytecode. This code object will be assigned to f.", "When we create the new code object, some of its attributes need to be modified. In the original function const is a global variable and A is an attribute, so both of them were added to the co_names tuple, and they should be removed from the co_names of the new code object. In addition, when an attribute like A is turned into a local variable, its name should be added to co_varnames tuple. The attribute co_nlocals gives the number of local variables (plus defined functions) and should be updated too. The other attributes remain the same. The decorator finally returns the target function with the new code object, and now the target function is ready for execution.", "Understanding Python\u2019s bytecode allows you to get familiar with the low-level implementation of the Python compiler and virtual machine. If you know how your source code is converted to the bytecode, you can make better decisions about writing and optimizing your code. Bytecode injection is also a useful tool for code optimization and metaprogramming. I have only covered a small number of bytecode instructions in this article. You can refer to dis module\u2019s webpage to see the full list of Python\u2019s bytecode instructions. I hope that you have enjoyed reading this article. All the code listings of this article are available for download as a Jupyter notebook at: https://github.com/reza-bagheri/Understanding-Python-Bytecode", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fe7edaae8734d&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-python-bytecode-e7edaae8734d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-python-bytecode-e7edaae8734d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-python-bytecode-e7edaae8734d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-python-bytecode-e7edaae8734d&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----e7edaae8734d--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----e7edaae8734d--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://reza-bagheri79.medium.com/?source=post_page-----e7edaae8734d--------------------------------", "anchor_text": ""}, {"url": "https://reza-bagheri79.medium.com/?source=post_page-----e7edaae8734d--------------------------------", "anchor_text": "Reza Bagheri"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fda2d000eaa4d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-python-bytecode-e7edaae8734d&user=Reza+Bagheri&userId=da2d000eaa4d&source=post_page-da2d000eaa4d----e7edaae8734d---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe7edaae8734d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-python-bytecode-e7edaae8734d&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe7edaae8734d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-python-bytecode-e7edaae8734d&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/closures-and-decorators-in-python-2551abbc6eb6", "anchor_text": "this article"}, {"url": "https://docs.python.org/2/library/marshal.html", "anchor_text": "marshal"}, {"url": "https://www.w3schools.com/python/python_iterators.asp", "anchor_text": "iterable"}, {"url": "https://docs.python.org/3/glossary.html#term-iterator", "anchor_text": "iterator"}, {"url": "https://towardsdatascience.com/closures-and-decorators-in-python-2551abbc6eb6", "anchor_text": "this article"}, {"url": "https://en.wikipedia.org/wiki/Endianness#Little-endian", "anchor_text": "little-endian system"}, {"url": "https://docs.python.org/3/library/inspect.html#inspect-module-co-flags", "anchor_text": "link"}, {"url": "https://docs.python.org/3/library/dis.html", "anchor_text": "dis"}, {"url": "https://docs.python.org/3/library/dis.html", "anchor_text": "module\u2019s webpage"}, {"url": "https://github.com/reza-bagheri/Understanding-Python-Bytecode", "anchor_text": "https://github.com/reza-bagheri/Understanding-Python-Bytecode"}, {"url": "https://medium.com/tag/python?source=post_page-----e7edaae8734d---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/bytecode?source=post_page-----e7edaae8734d---------------bytecode-----------------", "anchor_text": "Bytecode"}, {"url": "https://medium.com/tag/metaprogramming?source=post_page-----e7edaae8734d---------------metaprogramming-----------------", "anchor_text": "Metaprogramming"}, {"url": "https://medium.com/tag/disassembly?source=post_page-----e7edaae8734d---------------disassembly-----------------", "anchor_text": "Disassembly"}, {"url": "https://medium.com/tag/virtual-machine?source=post_page-----e7edaae8734d---------------virtual_machine-----------------", "anchor_text": "Virtual Machine"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe7edaae8734d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-python-bytecode-e7edaae8734d&user=Reza+Bagheri&userId=da2d000eaa4d&source=-----e7edaae8734d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe7edaae8734d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-python-bytecode-e7edaae8734d&user=Reza+Bagheri&userId=da2d000eaa4d&source=-----e7edaae8734d---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe7edaae8734d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-python-bytecode-e7edaae8734d&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----e7edaae8734d--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fe7edaae8734d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-python-bytecode-e7edaae8734d&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----e7edaae8734d---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----e7edaae8734d--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----e7edaae8734d--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----e7edaae8734d--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----e7edaae8734d--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----e7edaae8734d--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----e7edaae8734d--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----e7edaae8734d--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----e7edaae8734d--------------------------------", "anchor_text": ""}, {"url": "https://reza-bagheri79.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://reza-bagheri79.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Reza Bagheri"}, {"url": "https://reza-bagheri79.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "915 Followers"}, {"url": "https://www.linkedin.com/in/reza-bagheri-71882a76/", "anchor_text": "https://www.linkedin.com/in/reza-bagheri-71882a76/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fda2d000eaa4d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-python-bytecode-e7edaae8734d&user=Reza+Bagheri&userId=da2d000eaa4d&source=post_page-da2d000eaa4d--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F6f6d4b1775e3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-python-bytecode-e7edaae8734d&newsletterV3=da2d000eaa4d&newsletterV3Id=6f6d4b1775e3&user=Reza+Bagheri&userId=da2d000eaa4d&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}