{"url": "https://towardsdatascience.com/how-i-programmed-the-first-hone-extension-in-julia-edf7813d0e1b", "time": 1683008205.278038, "path": "towardsdatascience.com/how-i-programmed-the-first-hone-extension-in-julia-edf7813d0e1b/", "webpage": {"metadata": {"title": "How I Programmed The First Hone Extension In Julia | by Emma Boudreau | Towards Data Science", "h1": "How I Programmed The First Hone Extension In Julia", "description": "One of the primary focuses I wanted to have when I originally created my vector plotting library for Julia, Hone.jl, was to have a plotting library that is modular and could be extended by anyone who\u2026"}, "outgoing_paragraph_urls": [], "all_paragraphs": ["One of the primary focuses I wanted to have when I originally created my vector plotting library for Julia, Hone.jl, was to have a plotting library that is modular and could be extended by anyone who had the desire to. With this methodology, users would be able to create package extensions that would add to the functionality and make it a better library to use universally.", "Creating a package that is capable of doing such a thing is easier said than done. However, the idea is very enticing to me because there aren\u2019t really any other graphing libraries I know of that do such a thing. This is especially true for Julia. Unfortunately, before we can kick off the creation of a Hone extension, we are going to have to add to the code a little bit.", "Hone has had extensible capabilities since a relatively early version. This system, however, isn\u2019t exactly the best. It uses a parameter called custom where one can input concatenated tags to be evaluated as meta expressions. There are a few fundamental problems with handling extensions like this that subtract from the viability of Hone extensions.", "Here is the code, so you can understand what I am referring to. All references to \u201c custom\u201d are shown in bold.", "To quantify that, this code totals out to 34 lines. The number of lines pertaining to custom is 6 in total, meaning that custom can be attributed to 17 percent of the lines of code when most of the time it won\u2019t be used at all. Call me crazy, but", "Additionally, whenever I was creating the frame functions, I created a method called add() where you can add an object to the frame. It occurred to me that using this method to add any extension object is a far superior way than using the custom tag, and is far easier than making the user get the tags and concatenate them to use the old system. So after cleaning out all occurrences of custom from the _arrayscatter() and _dfscatter() functions, I decided to refine the frame to instead be able to take these objects.", "The add method simply calls on the _frameup method, and will provide it with the base tag for the frame, \u201c base\u201d, an iterative list of objects, \u201c objects\u201d, and object. Previously, the old add() method looked like this:", "This means a few things. Firstly, objects would not be added to the list of objects, but would rather replace the objects. Even worse, the objects provided needed to be in an Array for the function to work (because you can\u2019t iterate a single type.) This just means that when the function is called, you would need to use Array syntax:", "I don\u2019t like this because it assumes an Array is present for an object that will most certainly always be alone. Of course, this function is only a router for the _frameup() method, so let\u2019s take a look at that:", "The object is simply concatenated to the string and then added to the expression before being parsed and evaluated. Instead, what should be done is the object should be added to the objects array that is provided by the type. After that, a string can be concatenated with each object\u2019s tag. Here is how I did that:", "Finally, i\u2019m going to add a method to the _arrayscatter() and _dfscatter() functions that will call on the frame to add the feature:", "First, we\u2019ll create a circle. This is the object we are going to be adding to the frame atop our scatter plot. I also went ahead and created two arrays of the same length to be parsed and plotted as a scatter-plot.", "Now we will create our scatter plot. Fortunately, Hone has great documentation that we can refer to if we don\u2019t remember our parameters.", "Now we can use the show() method:", "And we can add that exampshape we made earlier, and show again.", "we forgot to add our method to our type:", "You might have noticed that fortunately, we do have a get_frame() function that we can call to return our frame, and we can add it from there.", "At this moment I realized that we set the x and y of our shape to .5 and .5, so let\u2019s change that\u2026 We\u2019ll put it in the center of the plot this time. This time I decided to go with text:", "As we all know, data visualization and machine-learning go together quite well. So with that in mind, I decided to make the first extension for Hone based on the Lathe machine-learning library. This will also be the home of Hone\u2019s statistical plots, as they will use the Lathe module. Ladies and gentleman, I introduce you to", "The first thing I decided to add to this extension was the ability to draw a line of best fit. This will be relatively easy, so don\u2019t expect me to start off with anything crazy. For this to work, however, we are going to have to export all of the data used in the scatter methods so they can be accessed by anyone making an extension involving the plots. So back in Hone, I just added that data to the type:", "Now back to our line of best fit example, we can get the data out of our plot by using plt.x and plt.y. In order to make a Line of best fit, there are several approaches we could take:", "I decided to go with option two, as I figured it would give the best results while being the least performance hungry. Lathe.preprocess has a function called SortSplit. To view its documentation, we need to first import it into our current environment.", "Then we can search for it in the documentation pane.", "The first step is, of course, is going to be getting our data out of our parameters, this is how I set up the function:", "I thought it might be cool to use divisions like I did with the grid, that way the user could determine how many times they would like to split the line of best fit, and it would automatically determine the percentages of data to do so. Dividing one by the number of divisions will give us a percentage that we can use later to determine how close we are to creating every division.", "Next, we use a while loop that continually adds the division amount to a variable that will process the logic for each division.", "All we are doing here is appending small split versions of our arrays to an array. So next we will need to actually do something with said array.", "We will get the mean out of the array and assign it to a variable called xmeans. Next, we will do the same exact thing for our y value.", "Next, to perform the arithmetic for scaling we will need the top of y, as well as the top of X.", "Now we are basically going to copy the loop that generates pairs from two arrays from the Linear() function in Hone. If you would like to learn more about this function, I wrote an article all about it here:", "The only thing different in this loop is that there is a new variable and conditional called first that will determine if we are on the first loop or not. The reason why I did this is so that the line will always come from the left side. Another way we could have done the X\u2019s here is by dividing the frame height by the number of divisions, and then adding that original amount to itself until we reached the number of divisions. Doing so would ensure that the line is always a function that starts at zero, and ends at the end of the frame.", "Finally, we\u2019ll type assert the Frame as a tuple array, create a line object, put it into a transfer type, and rather than returning a type, we will just add it to the frame.", "In the future, I may consider populating the X\u2019s like I talked about before rather than like this, as we do get a good bit of overlap since the X\u2019s are the means of our division.", "I am SO excited for the potential that Hone extensions have! You could do anything from creating custom graphics for plotting data, to adding new features to a plot. On top of that, everything becomes fully custom because we use tags to render everything. Everything that can be properly composed can also be added to any Hone frame.", "I see the future having a lot of extensions. Maybe some are simple and just add a bunch of different cool-looking legends that you can use. Maybe some or more complex and actually animate your plots or add Javascript interactivity \u2014 the possibilities are endless! If you\u2019d like to start making your own Hone extensions, you can add the #Unstable branch in order to get the latest version (0.0.4) and start playing around with it!", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fedf7813d0e1b&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-programmed-the-first-hone-extension-in-julia-edf7813d0e1b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-programmed-the-first-hone-extension-in-julia-edf7813d0e1b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-programmed-the-first-hone-extension-in-julia-edf7813d0e1b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-programmed-the-first-hone-extension-in-julia-edf7813d0e1b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----edf7813d0e1b--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----edf7813d0e1b--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://emmettgb.medium.com/?source=post_page-----edf7813d0e1b--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=post_page-----edf7813d0e1b--------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-programmed-the-first-hone-extension-in-julia-edf7813d0e1b&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c----edf7813d0e1b---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fedf7813d0e1b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-programmed-the-first-hone-extension-in-julia-edf7813d0e1b&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fedf7813d0e1b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-programmed-the-first-hone-extension-in-julia-edf7813d0e1b&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/emmettgb/LatheHE.jl", "anchor_text": "Github Repo"}, {"url": "https://towardsdatascience.com/adding-line-graphs-to-my-graphing-library-eb6447a0c726", "anchor_text": "Adding Line Graphs To My Graphing LibraryContinuing to build on features implemented in Hone.jl, and debugging problems that arise.towardsdatascience.com"}, {"url": "http://github.com/emmettgb/Hone.jl", "anchor_text": "emmettgb/Hone.jlModular shapes, grids, and lines Easy prefabs Fast plotting Simple and Light Lathe Integration (coming soon)\u2026github.com"}, {"url": "https://medium.com/tag/programming?source=post_page-----edf7813d0e1b---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-science?source=post_page-----edf7813d0e1b---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/data-visualization?source=post_page-----edf7813d0e1b---------------data_visualization-----------------", "anchor_text": "Data Visualization"}, {"url": "https://medium.com/tag/julia?source=post_page-----edf7813d0e1b---------------julia-----------------", "anchor_text": "Julia"}, {"url": "https://medium.com/tag/computer-science?source=post_page-----edf7813d0e1b---------------computer_science-----------------", "anchor_text": "Computer Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fedf7813d0e1b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-programmed-the-first-hone-extension-in-julia-edf7813d0e1b&user=Emma+Boudreau&userId=ea170050148c&source=-----edf7813d0e1b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fedf7813d0e1b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-programmed-the-first-hone-extension-in-julia-edf7813d0e1b&user=Emma+Boudreau&userId=ea170050148c&source=-----edf7813d0e1b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fedf7813d0e1b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-programmed-the-first-hone-extension-in-julia-edf7813d0e1b&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----edf7813d0e1b--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fedf7813d0e1b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-programmed-the-first-hone-extension-in-julia-edf7813d0e1b&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----edf7813d0e1b---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----edf7813d0e1b--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----edf7813d0e1b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----edf7813d0e1b--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----edf7813d0e1b--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----edf7813d0e1b--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----edf7813d0e1b--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----edf7813d0e1b--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----edf7813d0e1b--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://emmettgb.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "4.6K Followers"}, {"url": "https://twitter.com/emmettboudgie", "anchor_text": "https://twitter.com/emmettboudgie"}, {"url": "https://github.com/emmettgb", "anchor_text": "https://github.com/emmettgb"}, {"url": "https://ems.computer/", "anchor_text": "https://ems.computer/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-programmed-the-first-hone-extension-in-julia-edf7813d0e1b&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff16bf42bb45f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-programmed-the-first-hone-extension-in-julia-edf7813d0e1b&newsletterV3=ea170050148c&newsletterV3Id=f16bf42bb45f&user=Emma+Boudreau&userId=ea170050148c&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}