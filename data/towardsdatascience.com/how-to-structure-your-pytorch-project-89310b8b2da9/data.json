{"url": "https://towardsdatascience.com/how-to-structure-your-pytorch-project-89310b8b2da9", "time": 1683001015.858117, "path": "towardsdatascience.com/how-to-structure-your-pytorch-project-89310b8b2da9/", "webpage": {"metadata": {"title": "How To Structure Your PyTorch Project | by Branislav Holl\u00e4nder | Towards Data Science", "h1": "How To Structure Your PyTorch Project", "description": "Ever since I started to train deep neural networks, I was wondering what would be the structure for all my Python code. Ideally, a good structure should support extensive experimenting with the\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/branislav1991/PyTorchProjectFramework", "anchor_text": "https://github.com/branislav1991/PyTorchProjectFramework", "paragraph_index": 1}, {"url": "https://pytorch.org/tutorials/beginner/data_loading_tutorial.html", "anchor_text": "PyTorch API documentation", "paragraph_index": 5}, {"url": "https://github.com/facebookresearch/visdom", "anchor_text": "visdom", "paragraph_index": 16}], "all_paragraphs": ["Ever since I started to train deep neural networks, I was wondering what would be the structure for all my Python code. Ideally, a good structure should support extensive experimenting with the model, allow for implementing various different models in a single compact framework and be easily understood by everybody reading the code. You have to be able to use data from different data sources by coding and reusing various data loaders. Additionally, it would be nice if the models supported combining multiple networks in one model (such as is the case for GANs or the original R-CNN). The framework should also have enough flexibility to allow for complex visualizations (it is one of my core beliefs in data science that visualization makes everything MUCH easier, especially in the case of computer vision tasks).", "The detailed implementation of a deep learning framework will of course be dependent on the underlying library you are using, whether it be TensorFlow, PyTorch or CNTK. In this post I will present my approach based on PyTorch. However, I think that the general structure applies equally to whatever libraries you are using. You can find the whole repository at https://github.com/branislav1991/PyTorchProjectFramework.", "On the image above (taken from VS code, my Python editor of choice), you can see the general folder structure that I created for my framework. The framework consists of some startup scripts (train.py, validate.py, hyperopt.py) as well as the libraries hiding inside the folders. The datasets folder contains classes and methods for loading various types of data for training. The losses folder may contain additional loss functions or validation metrics. If you do not require any custom loss functions for your project, you probably won\u2019t need this folder. The models folder is the most important: it contains the actual models. The optimizers folder includes code for custom optimizers. As with the losses folder, if you do not have any custom optimizers, you may as well omit this folder. Finally, the utils folder contains various utilities used all over the framework, most notably the visualizer. You will also notice the config_segmentation.json file in the root folder of the project. This file contains all the configuration options required for training.", "As you may have guessed, training is launched by calling the train.py script. This script is called with the appropriate configuration file as a command line argument. It takes care of all the high-level training stuff such as loading the training and validation datasets and the model, setting up the visualization, running the training loop and exporting the trained model at the end.", "Validation is used similarly by calling the appropriate scripts and passing the configuration files as arguments.", "On the image above you can see the structure of the dataset folder. It includes the __init__.py module which includes some necessary functions to find and create the right dataset as well as a custom data loader which forwards the data to the training pipeline (for more information on this, please have a look at the PyTorch API documentation). The base_dataset.py, as the name suggests, defines the abstract base class for each dataset you define in the framework.", "For every custom dataset you define, you will have to implement the __getitem__ and __len__ methods so that PyTorch may iterate over it. You won\u2019t have to deal with the DataLoader anymore since that is defined in datasets/__init__.py already. You may also define custom callbacks for the dataset to be called before and after every epoch. This could be useful if you want to use some warmup method that feeds different data to the model during the first few epochs and switches to a more complex dataset afterwards.", "To instantiate the dataset, the train.py script calls the following code:", "This calls the create_dataset function which looks at the configuration file and chooses the correct dataset based on its name. It is important to follow the convention <datasetname>_dataset.py when naming the dataset since that is how the script is able to find your dataset based on the string in the configuration file. Finally, the script above calls the len() function on the dataset to inform you about its size.", "Models in the framework work in the same way as the datasets: the __init__.py module includes functions to find and create the right model according to its module name and the string defined in the configuration file. The model class itself inherits from the abstract BaseModel class and has to implement two methods:", "All other methods may either be overridden or you may use the default BaseClass implementation. Functions you may want to override include pre_epoch_callback and post_epoch_callback (called before and after each epoch) or test (called during validation).", "In order to use the framework correctly, it is important to know how to use the networks, the optimizers and the losses in the model. Since there may be multiple networks in a model using different optimizers as well as multiple different losses (for instance, you could want to display the bounding box classification and regression losses for a semantic localization model), the interface is a bit more involved. Specifically, you provide the names of your losses and your networks together with the optimizers for the BaseModel class to know how to train your model. In the provided code I included an example of a 2D segmentation model together with an example dataset for you to see how the framework is supposed to be used.", "Take a look at the __init__() function of the provided 2D segmentation model:", "This is what is happening here: first, we read the model configuration. Then, we define the \u2018segmentation\u2019 loss and put it in the self.loss_names list. The name of the loss is important since we use the variable self.loss_segmentation for the loss. By knowing the name, the BaseModel can look up the loss and print it in the console or visualize it (more about visualization in the next section). Similarly, we define the name of the network. This makes sure that BaseModel knows how to train the model without us having to explicitly define it. Next, we initialize the network (in this case a U-Net) and move it to the GPU. If we are in training mode, we also define the loss criterion and instantiate the optimizer (in this case Adam). Lastly, we put the optimizer into the self.optimizers list. This list is again used in the BaseModel class to update the learning rate or to resume training from a given checkpoint.", "Let us also take a look at the forward() and optimize_parameters() functions:", "As you can see, this is standard PyTorch code: its only responsibility is to call forward() on the network itself, to step the optimizer after the gradients have been calculated and to zero them again. It should be easy to implement this for your own model.", "Visualization can be found in the Visualizer class. This class is responsible for printing out loss information to the terminal as well as visualizing various results using the visdom library. It is initialized at the beginning of the training script (which loads up the visdom server). The training script also calls its plot_current_losses() and print_current_losses() functions to visualize and write out the training loss. It also contains functions like plot_current_validation_metrics(), plot_roc_curve() and show_validation_images() which are not called automatically but may be called from the model in the post_epoch_callback() to do some useful visualization upon validation. I tried to keep the visualizer fairly general. Certainly you can expand the functionality of the visualizer yourself to make it more useful for you.", "I presented an approach to writing a general deep learning framework that can be used in all areas of deep learning. By using this structure, you will obtain a clear and flexible codebase for further development. Of course there are many alternative ways how to approach the problem. Let me know in the comments if you have other suggestions!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "AI | Software Development | Other Crazy Interests"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F89310b8b2da9&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-structure-your-pytorch-project-89310b8b2da9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-structure-your-pytorch-project-89310b8b2da9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-structure-your-pytorch-project-89310b8b2da9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-structure-your-pytorch-project-89310b8b2da9&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----89310b8b2da9--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----89310b8b2da9--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@branislav.hollander?source=post_page-----89310b8b2da9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@branislav.hollander?source=post_page-----89310b8b2da9--------------------------------", "anchor_text": "Branislav Holl\u00e4nder"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fcb9a2fa1a025&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-structure-your-pytorch-project-89310b8b2da9&user=Branislav+Holl%C3%A4nder&userId=cb9a2fa1a025&source=post_page-cb9a2fa1a025----89310b8b2da9---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F89310b8b2da9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-structure-your-pytorch-project-89310b8b2da9&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F89310b8b2da9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-structure-your-pytorch-project-89310b8b2da9&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/branislav1991/PyTorchProjectFramework", "anchor_text": "https://github.com/branislav1991/PyTorchProjectFramework"}, {"url": "https://pytorch.org/tutorials/beginner/data_loading_tutorial.html", "anchor_text": "PyTorch API documentation"}, {"url": "https://github.com/facebookresearch/visdom", "anchor_text": "visdom"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----89310b8b2da9---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/ai?source=post_page-----89310b8b2da9---------------ai-----------------", "anchor_text": "AI"}, {"url": "https://medium.com/tag/pytorch?source=post_page-----89310b8b2da9---------------pytorch-----------------", "anchor_text": "Pytorch"}, {"url": "https://medium.com/tag/software-architecture?source=post_page-----89310b8b2da9---------------software_architecture-----------------", "anchor_text": "Software Architecture"}, {"url": "https://medium.com/tag/deep-learning?source=post_page-----89310b8b2da9---------------deep_learning-----------------", "anchor_text": "Deep Learning"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F89310b8b2da9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-structure-your-pytorch-project-89310b8b2da9&user=Branislav+Holl%C3%A4nder&userId=cb9a2fa1a025&source=-----89310b8b2da9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F89310b8b2da9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-structure-your-pytorch-project-89310b8b2da9&user=Branislav+Holl%C3%A4nder&userId=cb9a2fa1a025&source=-----89310b8b2da9---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F89310b8b2da9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-structure-your-pytorch-project-89310b8b2da9&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----89310b8b2da9--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F89310b8b2da9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-structure-your-pytorch-project-89310b8b2da9&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----89310b8b2da9---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----89310b8b2da9--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----89310b8b2da9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----89310b8b2da9--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----89310b8b2da9--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----89310b8b2da9--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----89310b8b2da9--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----89310b8b2da9--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----89310b8b2da9--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@branislav.hollander?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@branislav.hollander?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Branislav Holl\u00e4nder"}, {"url": "https://medium.com/@branislav.hollander/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "1K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fcb9a2fa1a025&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-structure-your-pytorch-project-89310b8b2da9&user=Branislav+Holl%C3%A4nder&userId=cb9a2fa1a025&source=post_page-cb9a2fa1a025--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F61e7fe52ba73&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-structure-your-pytorch-project-89310b8b2da9&newsletterV3=cb9a2fa1a025&newsletterV3Id=61e7fe52ba73&user=Branislav+Holl%C3%A4nder&userId=cb9a2fa1a025&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}