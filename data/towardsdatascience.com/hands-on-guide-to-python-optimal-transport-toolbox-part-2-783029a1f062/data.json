{"url": "https://towardsdatascience.com/hands-on-guide-to-python-optimal-transport-toolbox-part-2-783029a1f062", "time": 1683013122.950489, "path": "towardsdatascience.com/hands-on-guide-to-python-optimal-transport-toolbox-part-2-783029a1f062/", "webpage": {"metadata": {"title": "Hands-on guide to Python Optimal Transport toolbox: Part 2 | by Ievgen Redko | Towards Data Science", "h1": "Hands-on guide to Python Optimal Transport toolbox: Part 2", "description": "As a follow-up of my previous introductory article on optimal transport and a first part of this guide provided by Aurelie Boisbunon here, I will present below how you can solve different tasks with\u2026"}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/optimal-transport-a-hidden-gem-that-empowers-todays-machine-learning-2609bbf67e59", "anchor_text": "previous introductory article on optimal transport", "paragraph_index": 0}, {"url": "https://medium.com/@aboisbunon?source=post_page-----922a2e82e621----------------------", "anchor_text": "Aurelie Boisbunon", "paragraph_index": 0}, {"url": "https://medium.com/@aboisbunon/hands-on-guide-to-python-optimal-transport-toolbox-part-1-922a2e82e621", "anchor_text": "here", "paragraph_index": 0}, {"url": "https://pythonot.github.io/", "anchor_text": "Python Optimal Transport (POT)", "paragraph_index": 0}, {"url": "https://pythonot.github.io/auto_examples/domain-adaptation/plot_otda_color_images.html#sphx-glr-auto-examples-domain-adaptation-plot-otda-color-images-py", "anchor_text": "the example", "paragraph_index": 3}, {"url": "https://docs.python.org/3/library/functions.html#float", "anchor_text": "np.float64", "paragraph_index": 5}, {"url": "https://github.com/ncourty/PoissonGradient", "anchor_text": "this github repository", "paragraph_index": 15}, {"url": "https://github.com/balikasg/WassersteinRetrieval", "anchor_text": "the following github repository", "paragraph_index": 21}], "all_paragraphs": ["As a follow-up of my previous introductory article on optimal transport and a first part of this guide provided by Aurelie Boisbunon here, I will present below how you can solve different tasks with Optimal Transport (OT) in practice using the Python Optimal Transport (POT) toolbox.", "To start with, let us install POT using pip from the terminal by simply running", "And voil\u00e0! If everything went well, you now have POT installed and ready to use on your computer. Let me now explain how you can reproduce the results from my previous article.", "In this application our goal is to transfer the color style of one image onto another image in the smoothest way possible. To do this, we will follow the example from the official webpage of the POT library and start by defining several supplementary functions needed when working with images:", "So, first three lines here are just imports for numpy, matplotlib.pylab and ot packages. Then, we have two functions that allow us to convert an image represented by a 3d matrix (some people call them tensors) where the first dimension is the height of the image, the second one is its width, while the third is given by RGB coordinates of the pixels. Let\u2019s now load some images to see what it means.", "Here they are, the daytime ocean image and the sunset one provided directly in the POT toolbox. Note that originally all the pixel RGB coordinates are integers so that astype(np.float64) converts them to floats. Then, each value is divided by 256 (the maximum value of each pixel\u2019s coordinate) to normalize the data to lie in [0,1] interval. If we check their dimensions, we get the following", "This means that the first pixel in the bottom left corner has RGB coordinates given by the vector [R = 0.0234375, G= 0.2421875, B = 0.53125] (blue color dominates as expected for the daytime image). We now convert our tensors to a 2d matrix where each line is a pixel described by its RGB coordinates as follows:", "Note that these matrices are rather large as can be seen by running the following code:", "Let\u2019s sample 1000 pixels randomly from each image to reduce the size of the matrices that we will apply OT to. We can do it as follows:", "We now have two matrices with only 1000 rows and 3 columns in each of them. Let\u2019s plot them in the RB (red-blue) plane to see the pixels of what color we actually sampled:", "The result will look like this:", "Everything seems to be set up to finally run our OT algorithm on them. To this end, we create an instance of the Monge-Kantorovich problem class and fit it on our images:", "Note that we create an instance of ot.da.EMDTransport() class that provides features for doing domain adaptation with OT and defines automatically the uniform empirical distributions (each pixel is a point having a probability 1/1000) and the cost matrix (squared Euclidean distance between vectors of pixel coordinates) when we call its fit() method. We can now \u201ctransport\u201d one image onto another one using the coupling matrix as follows:", "The function inverse_transform() we\u2019ve just called transports the sunset image to the daytime one using a barycentric mapping: each transported pixel in the final result is an average of pixels from the sunset image weighted by the corresponding values of the coupling matrix. You can do the same thing the other way around by calling transform(Xs=day) too. We now plot the final result as follows:", "And it gives the desired result:", "We now want to do a seamless copy that consists in editing an image by replacing a part of it using a patch of another image. For instance, this can be you face transported onto the fact of the Mona Lisa painting. To proceed, we will first need to download the poissonblending.py file from this github repository. Then, we will load three images from the data folder (you need to put them there beforehand) as follows:", "First image is my portrait, second image provides the area of my portrait that will be copied into the Mona Lisa\u2019s face. The pre-processing also removes the transparency and keeps only RGB values for each pixel. Overall, they will look as follows:", "The final result can then be obtained using the blend() function called as follows:", "Once again, we apply OT only to a subset of 500 pixels as doing it for the whole image will take some time. The code behind this function involves many image pre-processing routines but what is of a special interest for us is the OT part. This is represented by the adapt_Gradients_kernel() from poissonblending.py that contains the following code:", "The first line here extracts two samples of 500 pixels from the gradients G_src,G_tgt. Then, ot.da.MappingTransport() function learns a non-linear (kernelized) transformation that approximates the barycentric mapping that we have used in the previous example. You may wonder why is that needed? Well, the barycentric mapping relies on the coupling matrix that aligns only the samples it was fitted on (it\u2019s shape is number of samples from the first distribution * number of samples from the second one) and thus it cannot be used to out-of-sample points. Finally, the return uses this approximation just as before to transport the gradient of my face onto the gradient of the Mona Lisa\u2019s portrait. The final result is then given by:", "For this last application, our goal is to take find an optimal alignment between the words in two sentences given in the different languages. As an example, we will work with the English proposition \u201cthe cat sits on the mat\u2019\u2019 and its French translation \u201cle chat est assis sur le tapis\u2019\u2019 with the goal of recovering a matching that provides the correspondences \u201ccat\u201d- \u201cchat\u201d, \u201csits\u201d- \u201cassis\u201d and \u201cmat\u201d- \u201ctapis\u201d. For this, we will need the nltk library that can be installed via pip as follows:", "We will also need to clone the following github repository and to follow its readme in order to download the embeddings that will be used to describe our propositions (I also provide a shortcut to this here where you can find directly the embeddings for the considered pair).", "Let us now do some usual imports and add two functions that will be used afterwards.", "First function is used to load the embeddings, while the second pre-process the text to remove all the stopwords and punctuation.", "To proceed, we now load the embeddings for English and French languages as follows:", "And define the two propositions to be translated:", "Let us now clean our sentences as follows:", "This returns only the embeddings of meaningful words \u201ccat\u201d, \u201csits\u201d, \u201cmat\u201d and \u201cchat\u201d, \u201cassis\u201d and \u201ctapis\u201d. Everything is now set for optimal transport to be used. As shown in the image above, we define two empirical uniform distributions over the terms and run OT between them with a cost matrix given by pairwise square Euclidean distances.", "Once the coupling is obtained, we can now find a projection of our embeddings to 2d space with t-SNE and then plot the corresponding words and their matched pairs as follows:", "Note that the latter examples can be extended to do automatic translation based on the wikipidea data available on the github repository from which we took the initial code. For more details, you can also check the corresponding paper and the results therein to further boost the performance.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F783029a1f062&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-guide-to-python-optimal-transport-toolbox-part-2-783029a1f062&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-guide-to-python-optimal-transport-toolbox-part-2-783029a1f062&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-guide-to-python-optimal-transport-toolbox-part-2-783029a1f062&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-guide-to-python-optimal-transport-toolbox-part-2-783029a1f062&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----783029a1f062--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----783029a1f062--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://ievred.medium.com/?source=post_page-----783029a1f062--------------------------------", "anchor_text": ""}, {"url": "https://ievred.medium.com/?source=post_page-----783029a1f062--------------------------------", "anchor_text": "Ievgen Redko"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ffde5e3dd8903&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-guide-to-python-optimal-transport-toolbox-part-2-783029a1f062&user=Ievgen+Redko&userId=fde5e3dd8903&source=post_page-fde5e3dd8903----783029a1f062---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F783029a1f062&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-guide-to-python-optimal-transport-toolbox-part-2-783029a1f062&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F783029a1f062&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-guide-to-python-optimal-transport-toolbox-part-2-783029a1f062&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://towardsdatascience.com/optimal-transport-a-hidden-gem-that-empowers-todays-machine-learning-2609bbf67e59", "anchor_text": "previous introductory article on optimal transport"}, {"url": "https://medium.com/@aboisbunon?source=post_page-----922a2e82e621----------------------", "anchor_text": "Aurelie Boisbunon"}, {"url": "https://medium.com/@aboisbunon/hands-on-guide-to-python-optimal-transport-toolbox-part-1-922a2e82e621", "anchor_text": "here"}, {"url": "https://pythonot.github.io/", "anchor_text": "Python Optimal Transport (POT)"}, {"url": "https://pythonot.github.io/auto_examples/domain-adaptation/plot_otda_color_images.html#sphx-glr-auto-examples-domain-adaptation-plot-otda-color-images-py", "anchor_text": "the example"}, {"url": "https://numpy.org/doc/stable/reference/random/legacy.html#numpy.random.RandomState", "anchor_text": "r"}, {"url": "https://numpy.org/doc/stable/reference/random/legacy.html#numpy.random.RandomState", "anchor_text": "np.random.RandomState"}, {"url": "https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray", "anchor_text": "I1"}, {"url": "https://docs.python.org/3/library/functions.html#float", "anchor_text": "np.float64"}, {"url": "https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray", "anchor_text": "I2"}, {"url": "https://docs.python.org/3/library/functions.html#float", "anchor_text": "np.float64"}, {"url": "https://docs.python.org/3/library/functions.html#float", "anchor_text": "np.float64"}, {"url": "https://github.com/ncourty/PoissonGradient", "anchor_text": "this github repository"}, {"url": "https://github.com/balikasg/WassersteinRetrieval", "anchor_text": "the following github repository"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----783029a1f062---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----783029a1f062---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----783029a1f062---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/tag/mathematics?source=post_page-----783029a1f062---------------mathematics-----------------", "anchor_text": "Mathematics"}, {"url": "https://medium.com/tag/code?source=post_page-----783029a1f062---------------code-----------------", "anchor_text": "Code"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F783029a1f062&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-guide-to-python-optimal-transport-toolbox-part-2-783029a1f062&user=Ievgen+Redko&userId=fde5e3dd8903&source=-----783029a1f062---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F783029a1f062&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-guide-to-python-optimal-transport-toolbox-part-2-783029a1f062&user=Ievgen+Redko&userId=fde5e3dd8903&source=-----783029a1f062---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F783029a1f062&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-guide-to-python-optimal-transport-toolbox-part-2-783029a1f062&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----783029a1f062--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F783029a1f062&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-guide-to-python-optimal-transport-toolbox-part-2-783029a1f062&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----783029a1f062---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----783029a1f062--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----783029a1f062--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----783029a1f062--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----783029a1f062--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----783029a1f062--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----783029a1f062--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----783029a1f062--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----783029a1f062--------------------------------", "anchor_text": ""}, {"url": "https://ievred.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://ievred.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Ievgen Redko"}, {"url": "https://ievred.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "94 Followers"}, {"url": "http://ievred.github.io/", "anchor_text": "ievred.github.io/"}, {"url": "http://twitter.com/IevgenRedko", "anchor_text": "twitter.com/IevgenRedko"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ffde5e3dd8903&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-guide-to-python-optimal-transport-toolbox-part-2-783029a1f062&user=Ievgen+Redko&userId=fde5e3dd8903&source=post_page-fde5e3dd8903--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F98cb622434ea&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-guide-to-python-optimal-transport-toolbox-part-2-783029a1f062&newsletterV3=fde5e3dd8903&newsletterV3Id=98cb622434ea&user=Ievgen+Redko&userId=fde5e3dd8903&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}