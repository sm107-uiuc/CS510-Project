{"url": "https://towardsdatascience.com/10-python-built-in-functions-you-should-know-f6beba1698bb", "time": 1683005077.496311, "path": "towardsdatascience.com/10-python-built-in-functions-you-should-know-f6beba1698bb/", "webpage": {"metadata": {"title": "10 Python built-in functions you should know | by Amanda Iglesias Moreno | Towards Data Science", "h1": "10 Python built-in functions you should know", "description": "The Python interpreter has a number of functions and types built into it that are always available. In this article, we explain 10 of those functions in detail. Let\u2019s get started! The\u2026"}, "outgoing_paragraph_urls": [], "all_paragraphs": ["The Python interpreter has a number of functions and types built into it that are always available. In this article, we explain 10 of those functions in detail. Let\u2019s get started!", "The isinstance(object, classinfo) function returns True if the object argument is an instance of the classinfo argument. If not, the function returns False. If classinfo is a tuple of objects, the function returns True if object is an instance of any of them.", "This function is really useful for object type comparisons. We can easily check if an object is of type list in the following manner:", "The zip(*iterables) function returns an iterator of tuples, where the i tuple contains the i element from each of the iterables. The length of the tuples is equal to the number of iterables passed to the function. In the following code block, two lists are passed to the zip function, obtaining an iterator of tuples each of length two.", "The zip function can accept any type of iterable such as lists, strings, tuples, or dictionaries, returning an iterator object. To visualize this object, we can convert it into a list with the built-in function list().", "This function can come in handy when dealing with loops, allowing to loop through multiple iterables at once. We can easily loop through two list with the zip function as follows:", "This function can also be used in combination with the built-in function dict() to create a dictionary from two lists in the following manner:", "The function zip can also be used to unzip a sequence into independent sequences using the unpacking operator *. In the following block of code, we unzip a list of tuples into two tuples.", "The map(function, iterable, ...) function applies a given function to each element of an iterable. The returned value is a map object. This object is basically an iterator that we can easily convert into a list or set, using again built-in functions.", "The map function takes as first argument a function. When we think about a function in Python, we automatically think about the def keyword, but the map function does not only accept functions created by the user using def keyword, but also built-in, and anonymous functions (lambda expressions). The second argument is an iterable. An iterable is an object with a countable number of values that can be iterated for example using a for loop. Lists, sets, tuples, or dictionaries are iterables that can be used as the second argument of the map function.", "The map function can be very useful when we want to apply a mathematical operation to all the elements of an iterable. In the following code block, three different mathematical operations are applied to the elements of a list.", "As shown above, we have employed anonymous functions, since they are pretty useful for short-term use. However, as I mentioned previously, we can also use regular functions.", "If multiple iterable arguments are passed, the function is applied to the items from all iterables in parallel. The following code shows how we can multiply the elements of two iterables (lists) with the map function.", "The filter(function, iterable) function takes a function and an iterable as inputs, returning the elements from the iterable for which the function returns True. As with the map function, the filter function does not only accept regular functions (def keyword), but also built-in, and anonymous functions.", "The code below uses the filter function to get the odd numbers from a list.", "The filter function accepts as second argument any type of iterable such as lists, strings, tuples, or dictionaries, returning an iterator object. To visualize this object, we can convert it into a list with the built-in function list().", "In the following code block, we use as input a tuple of strings, filtering those that start with M or V.", "The input([prompt]) function gets raw input from the user, returning it as a string. This function takes an optional argument (prompt) that can be used to show a message to the user when asking for input.", "The code below asks the user to input his/her name.", "If we want to use the input as a number, we have to convert it into an integer or floating-point number, since the function stores the input as a string.", "As shown above, the input of the user is transformed into a floating-point number with the built-in function float().", "The id(object) function returns the identity of an object. This is an integer which is unique and constant for the object during its lifetime.", "This function can come in handy when duplicating objects to check that we have created an independent copy of the object.", "In Python, the = operator does not copy objects. It provides another name to refer to the same object, meaning any modification to the new object is reflected in the original one. The following code block shows that the assignment operator (=) does not create a new object, but a new reference to the original object, since both variables have the same id number.", "We can also use the following identity operators to check whether two variables point to the same object:", "As shown above, both variables (numbers and new_numbers) point to the same object, since the is operator evaluates to True.", "To create a fully independent clone of the object, we can employ the copy.deepcopy(x) function (defined in the copy module). This function creates an independent copy, meaning we can change the new object without modifying the original one. In this case, both variables have different id numbers, and the identity operator is evaluates to False.", "The hex(x) function converts an integer number to a lowercase hexadecimal string. This string starts with the prefix \u20180x\u2019, indicating is a hexadecimal number. The function raises an exception (TypeError) if an object different than an integer is provided as input. The code below converts the integer 10 into a hexadecimal number.", "Hexadecimal numbers are often used by programmers to specify colors, as they provide a wider range that string values such as \u2018green\u2019 or \u2018red\u2019. Python represents hexadecimal colors using strings of the form \u2018#RRGGBB\u2019 where RR (red), GG (green), and BB (blue) are hexadecimal numbers between 00 and FF, representing the intensity of the color. Colors can also be represented using a tuple RGB (red, green, and blue) where each parameter defines the intensity of the color with an integer between 0 and 255. Now suppose you want a function that maps an RGB tuple representation to a hexadecimal string. The following block code shows how we can achieve this conversion with the help of the hex function.", "The bin(x) function converts an integer number to a binary string prefixed with \u20180b\u2019.", "The bin function raises an exception (TypeError) if an object different from an integer is provided as input. To avoid this problem, we can use the try and except statements when trying to convert an integer into a binary number. The try clause contains the operation that can raise an exception (bin function), and the except clause includes the code that handles the exception. The function below converts an integer to a binary number, taking into account that an exception is raised if an object different from an integer is provided as input. In addition, the prefix \u20180b\u2019 is eliminated, returning only the binary number.", "The format(value[, format_spec]) function returns a formatted representation of the given value controlled by the format specifier.", "The format specifier determines how the value is formatted, presenting the following structure:", "You can learn more about all the options to format your values in the following link:", "As you can observe, the format function provides a wide variety of ways of format your values. Combine the different parameters of the format specifier to discover more representations. \ud83d\ude04", "The open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None) function takes a string as input, specifying the path of the file, and returns a file object. If the file cannot be opened, an OSError is raised.", "We use the open function to read and write files in Python. To read a file, first we open it using the open function in reading mode (mode=\u2019r\u2019). This function returns a file object which we assign to the variable f. Then, we use the read method to access the content of the file and put it into a string. Finally, we close the file using the close method. It is important to remember to close all files when we no longer need them to avoid running out of file handles.", "We can also read all lines in the file as a list of strings using the .readlines() method as follows:", "To read the file line by line, we use the readline() method. This method read one entire line from the file, and returns it as a string.", "It is easy to forget to close a file when working in Python. So for this reason, Python provides the with statement which automatically closes the file after the nested block of code is executed.", "As you can observe, the close method is not longer needed!", "To write a file in Python, we use the open function in writing mode (mode=\u2019w\u2019). If the file does not exist, Python creates it for you. Once the file is opened, we add text to the file with the write method. It is important to bear in mind that the write method deletes the content of the file before the text is inserted. Finally, we have to close the file, unless we use the with statement as before.", "Besides the official documentation, there are a wide variety of web pages where you can find interesting examples!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Scientist at Statista \u2014 Based in Hamburg \ud83d\udccd"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Ff6beba1698bb&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-python-built-in-functions-you-should-know-f6beba1698bb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-python-built-in-functions-you-should-know-f6beba1698bb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-python-built-in-functions-you-should-know-f6beba1698bb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-python-built-in-functions-you-should-know-f6beba1698bb&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----f6beba1698bb--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----f6beba1698bb--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://amandaiglesiasmoreno.medium.com/?source=post_page-----f6beba1698bb--------------------------------", "anchor_text": ""}, {"url": "https://amandaiglesiasmoreno.medium.com/?source=post_page-----f6beba1698bb--------------------------------", "anchor_text": "Amanda Iglesias Moreno"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F1bace2932c65&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-python-built-in-functions-you-should-know-f6beba1698bb&user=Amanda+Iglesias+Moreno&userId=1bace2932c65&source=post_page-1bace2932c65----f6beba1698bb---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff6beba1698bb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-python-built-in-functions-you-should-know-f6beba1698bb&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff6beba1698bb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-python-built-in-functions-you-should-know-f6beba1698bb&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://docs.python.org/3/library/string.html#formatspec", "anchor_text": "string - Common string operations - Python 3.8.2 documentationThe built-in string class provides the ability to do complex variable substitutions and value formatting via the method\u2026docs.python.org"}, {"url": "https://docs.python.org/3/library/functions.html", "anchor_text": "Built-in Functions - Python 3.8.2 documentationThe Python interpreter has a number of functions and types built into it that are always available. They are listed\u2026docs.python.org"}, {"url": "https://www.w3schools.com/python/python_ref_functions.asp", "anchor_text": "Python Built-in FunctionsPython has a set of built-in functions.www.w3schools.com"}, {"url": "https://www.programiz.com/python-programming/methods/built-in", "anchor_text": "Python Built-in FunctionsPython has several functions that are readily available for use. These functions are called built-in functions. In this\u2026www.programiz.com"}, {"url": "https://www.geeksforgeeks.org/", "anchor_text": "GeeksforGeeks | A computer science portal for geeksA Computer Science portal for geeks. It contains well written, well thought and well explained computer science and\u2026www.geeksforgeeks.org"}, {"url": "https://www.udacity.com/course/introduction-to-python--ud1110", "anchor_text": "Introduction to Python Programming | UdacityIn this course, you'll learn the fundamentals of the Python programming language, along with programming best\u2026www.udacity.com"}, {"url": "https://medium.com/tag/python?source=post_page-----f6beba1698bb---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/programming?source=post_page-----f6beba1698bb---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/data-science?source=post_page-----f6beba1698bb---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/python-programming?source=post_page-----f6beba1698bb---------------python_programming-----------------", "anchor_text": "Python Programming"}, {"url": "https://medium.com/tag/functional-programming?source=post_page-----f6beba1698bb---------------functional_programming-----------------", "anchor_text": "Functional Programming"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff6beba1698bb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-python-built-in-functions-you-should-know-f6beba1698bb&user=Amanda+Iglesias+Moreno&userId=1bace2932c65&source=-----f6beba1698bb---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff6beba1698bb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-python-built-in-functions-you-should-know-f6beba1698bb&user=Amanda+Iglesias+Moreno&userId=1bace2932c65&source=-----f6beba1698bb---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff6beba1698bb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-python-built-in-functions-you-should-know-f6beba1698bb&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----f6beba1698bb--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Ff6beba1698bb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-python-built-in-functions-you-should-know-f6beba1698bb&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----f6beba1698bb---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----f6beba1698bb--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----f6beba1698bb--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----f6beba1698bb--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----f6beba1698bb--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----f6beba1698bb--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----f6beba1698bb--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----f6beba1698bb--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----f6beba1698bb--------------------------------", "anchor_text": ""}, {"url": "https://amandaiglesiasmoreno.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://amandaiglesiasmoreno.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Amanda Iglesias Moreno"}, {"url": "https://amandaiglesiasmoreno.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "2.1K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F1bace2932c65&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-python-built-in-functions-you-should-know-f6beba1698bb&user=Amanda+Iglesias+Moreno&userId=1bace2932c65&source=post_page-1bace2932c65--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fbac71cd4d351&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F10-python-built-in-functions-you-should-know-f6beba1698bb&newsletterV3=1bace2932c65&newsletterV3Id=bac71cd4d351&user=Amanda+Iglesias+Moreno&userId=1bace2932c65&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}