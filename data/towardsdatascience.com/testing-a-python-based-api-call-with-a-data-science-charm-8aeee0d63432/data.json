{"url": "https://towardsdatascience.com/testing-a-python-based-api-call-with-a-data-science-charm-8aeee0d63432", "time": 1683011904.5329332, "path": "towardsdatascience.com/testing-a-python-based-api-call-with-a-data-science-charm-8aeee0d63432/", "webpage": {"metadata": {"title": "Testing a Python-based API call with a data science charm | by Yulia R\u00f6nsch | Towards Data Science", "h1": "Testing a Python-based API call with a data science charm", "description": "An experiment with the Python asyncio and concurrent.futures packages to test a number of threads (the max_workers parameter) in the ThreadPoolExecutor function."}, "outgoing_paragraph_urls": [{"url": "https://stackoverflow.com/a/22873666", "anchor_text": "a StackOverflow developer pointed out", "paragraph_index": 16}, {"url": "https://speedtest.computerbild.de", "anchor_text": "Computerbild.de", "paragraph_index": 17}, {"url": "https://everymac.com/systems/apple/iphone/iphone-faq/iphone-processor-types.html", "anchor_text": "Everymac.com", "paragraph_index": 24}, {"url": "https://www.wired.com/story/apple-a13-bionic-chip-iphone/", "anchor_text": "a Wired article", "paragraph_index": 26}, {"url": "https://www.samsung.com/global/galaxy/what-is/octa-core-processor/", "anchor_text": "Samsung smartphone", "paragraph_index": 27}, {"url": "https://www.samsung.com/global/galaxy/what-is/octa-core-processor/", "anchor_text": "the official website", "paragraph_index": 27}, {"url": "http://technical-content-writer.com", "anchor_text": "technical-content-writer.com", "paragraph_index": 68}], "all_paragraphs": ["As computer applications tend to be delegated even more human decisions, the software engineering industry has acknowledged testing as an essential part of the development process.", "Approaches to software testing vary. Applications are tested as a whole, or as integrated systems, or even unit by unit. We have test engineers, test managers, and testers. There are platforms that offer outsourcing manual testing, and there are automated tests: literally, applications operating other applications and often even imitate a living user.", "The case study is about testing the API calls performance. Python asyncio and concurrent.futures packages are used to run multiple API calls. They divide the loop runs into pools and go through several pools in a parallel manner, thus, performing more than one call simultaneously. This reduces the total execution time.", "The question of an optimal number of threads arose in the following regard. Let\u2019s imagine there is a mobile app that accesses an open-source database that provides an API. I needed to write an API call that successfully retrieves the data and integrate it into the app. This integration ought to include a first processing of the received data.", "As I will show in the next section, during the initial approach to the data, I met a few problems. The data could only be downloaded in small pieces, thus, forcing me to make multiple requests. This could slow down the app performance and spoil the user experience.", "The fact made me look closer at the API call itself, despite, originally, my major task was to build a data pipeline inside the app.", "I, therefore, started to experiment with the API call.", "The experiment aimed to find out an optimal number of threads, or the maximum number of parallel calls. This number has its limits that depend on different factors.", "After I had gone through some painful mistakes, I managed to stick to an ad hoc systematic approach that I am going to disclose. The article shows the steps towards a complete testing code, which is attached at the end of it.", "I illustrate this article with the data from a movie database that contains information about movies, such as titles, release dates, genres, cast and crew, and so on. The API call ought to fetch the data on all movies of a particular movie genre.", "I used a generic Python request package to make a simple request and find out if the request makes sense. I fetched a JSON and printed it to the console. That looked good at first sight. But then it seemed, there is some artificially imposed limit. I only can go as deep as 500 pages and collect 10,000 movies.", "I checked the actual number of movies, and it turned to be 20.", "I made the second request indicating that I want the page 2 to be pulled by adding \u201c&page=2\u201d. The result is similar, only I\u2019d got another 20 movies.", "It seemed that I had to flick through a bunch of pages to fetch all movies. I added a for loop that would go through 500 pages. I grabbed the asyncio and concurrent.futures packages to speed up the execution of the for loop by using multiple threads, which I set at 100.", "The run is finished in a few seconds and managed to collect 10,000 movies.", "But I had to keep in mind that this request was thought for a mobile app. So far, I built the request code and examined the data using Google Colaboratory, which runs in a cloud.", "As a StackOverflow developer pointed out, the speed of your API calls depends on the following factors:", "To imitate a mobile network speed, I connected my mobile hotspot to my laptop. In accordance with the information from Computerbild.de, the LTE network at my location demonstrated the following speed:", "I had to discover the capacities of the server during the test. I was not controlling this parameter.", "Each API call sends one and the same request and downloads the same amount of data. This experiment does not test any variations in the amount of data.", "Each request returns a dictionary. The results part of it \u2014 a list \u2014 contains up to 20 entries. Each entry is a dictionary with 14 keys and values.", "It would be possible to use another JSON parser, but I did not think that the standard one was a problem.", "Since the data is going to be sent and received through a mobile network, this factor is taken into account in the experiment.", "I performed the API call tests in a Jupyter notebook locally on a Mac machine with two cores that run at 1.7 GHz.", "For network connection, I used an iPhone 6. As Everymac.com says:", "It has dual cores and runs around 1.4 GHz.", "The newest iOS devices with a A13 chip possess six CPU cores, two Lightings and four Thunders. The first ones run at 2.66 GHz each. (Information from a Wired article).", "To compare, a typical recent Samsung smartphone, says the official website,", "In this regard, my test was a kind of a worst-case scenario.", "Considering the present restraints, like a prescribed structure of the data, I was only able to play around with the number of threads. This was basically the main variation in the client code.", "So, let\u2019s get back to the main test.", "I moved from the cloud to a local runtime and made some network and hardware downgrade.", "I made pretty much the same request in this new setting. 2 runs with 100 threads both threw the similar error:", "That means I exhausted either network, or server, or both. I slowed it down to 50 threads, made it run twice, but the same error came. Only with 10 threads, I\u2019d got all 10,000 movies safely downloaded.", "As I still considered 10 threads being too few to secure a satisfying user experience in a mobile app, I introduced a for loop that runs the main() function several times, changing the number of maximum active threads from 10 to 100 with a step equal to 10.", "I added a simple tracking method by saving the duration of the asynchronous loops, number of movies returned, number of pages checked and number of threads. The duration was measured as a difference between two timestamps: one before the loop starts and one after it is completed.", "I converted the lists into a dictionary, and then the dictionary became a pandas data frame.", "To prevent the exhaustion of the server, I used a sleep function from the time package to arrange a break in the calls.", "I did get most of the responses empty, but a couple more returned normal results:", "The tendency is not quite obvious: the API call gets faster when the number of threads is increased, and it speeds up drastically between 10 and 30 threads. But then the duration (shown in seconds to complete a request) gets unstable and jumps again by 100 threads.", "All red dots shows runs that had not fetched any data. At first glance, no connection between duration/speed, number of threads, and retrieved data. I ran the wrapping loop again and the results are noticeably different:", "The tendency is pretty much the same: the more rush \u2014 and the more threads I used \u2014 the higher is the probability to get no data.", "Another important thing, and why I actually went on with the testing. A minimum of 8 minutes per API request made from a mobile app is a catastrophe. No user would wait so long!", "I could have pressed \u201cRun\u201d another couple of times to repeat the wrapping loop, but I decided to add another loop \u2014 I generally love loops \u2014 and I ended up with the code:", "As you can see, there is a new column: \u201crun.\u201d It shows the sequence of runs.", "I created a copy, just in case. Then I looked over the average performance per number of threads.", "I had only 9 runs, so the movies column became a bit confusing. If the mean value is under 450, then not all the movies were fetched each time. But we still can see that the successful runs are the slowest ones. The fastest ones were just incomplete.", "Let\u2019s put it all on a chart.", "For this visualization, I removed three or four outliers. The color of dots shows different runs in the outer for loop. The lack of any color clusters says single runs do not differ in their performance. Only a number of threads plays a role.", "I then colored the dots depending on if any data had been fetched (deep purple or 0 means no data, yellow or 1 means all movies downloaded).", "The last visualization shows that it makes sense to stick to the range between 10 and 30 threads. But even those are mostly unreliable.", "Before falling into a depression, I wanted to give it a last try and start another experiment, testing the number of threads in the range from 1 to 30 and making a small gap of 1.", "The next chart shows that there is barely an option to avoid empty responses. Still, sending requests one by one lasted too long: 175 seconds.", "I had a choice to filter out the longest durations, but those were the reliable configurations, though. In the end, I removed everything above 25 seconds. On a grid layout of the chart, one can see that this is a range where most of the dots are located, and there are still a lot of yellow ones.", "Not a single cluster with an acceptable duration and reliable results. In the range from 9 to 14 threads, all dots are yellow, so, these numbers of threads do download the movie data.", "Here the final choice becomes tricky.", "The 10-threads and 13-threads dot clusters have the lowest duration. The 13-threads dot cluster has more low durations than the others. The 9-threads cluster seems to be the most stable: all dots are squeezed together.", "It\u2019s time to do some descriptive statistics. I calculated means, medians, deviations, etc. and ranked them, from lowest to highest, with the lowest getting the best rank.", "Not quite scientific, but it was eventually possible to identify the best result.", "This is the optimal number of threads in the given condition.", "Nonetheless, the mobile app would make a user wait another 13 seconds to complete an action built upon the API call. This is a good reason to take the next steps towards performance optimization, like reducing the amount of data to retrieve, or considering another source. It could be also a good reason to re-think the business decision behind the mobile application.", "At least three reasons may lead you to prefer Python as a language to write your software tests:", "Of course, I illustrated the article with a clean code that was actually born out of a big mess. Thus, a couple of learnings about how not to screw up your testing.", "Concerning the API testing, in particular, I would like to share a few tips as well:", "It will give you a hint, why the problem occurred. You may also fetch the native error message, which I showed in the section \u201cLooping over the number \u2026 .\u201c", "Here you will find all code snippets from the present articles, including the final code and data visualization snippets:", "Testing number of threads in an API call: asyncio and concurrent.futures packages (Python) colab.research.google.com", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "A storyteller. Ph.D. in comm science. Statistician, given up to my writing passion. Dog and travel lover. Late started climber. technical-content-writer.com"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F8aeee0d63432&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftesting-a-python-based-api-call-with-a-data-science-charm-8aeee0d63432&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftesting-a-python-based-api-call-with-a-data-science-charm-8aeee0d63432&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftesting-a-python-based-api-call-with-a-data-science-charm-8aeee0d63432&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftesting-a-python-based-api-call-with-a-data-science-charm-8aeee0d63432&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----8aeee0d63432--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8aeee0d63432--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@y.lukashina?source=post_page-----8aeee0d63432--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@y.lukashina?source=post_page-----8aeee0d63432--------------------------------", "anchor_text": "Yulia R\u00f6nsch"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd19e677b3ae6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftesting-a-python-based-api-call-with-a-data-science-charm-8aeee0d63432&user=Yulia+R%C3%B6nsch&userId=d19e677b3ae6&source=post_page-d19e677b3ae6----8aeee0d63432---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8aeee0d63432&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftesting-a-python-based-api-call-with-a-data-science-charm-8aeee0d63432&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8aeee0d63432&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftesting-a-python-based-api-call-with-a-data-science-charm-8aeee0d63432&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://docs.python.org/3/library/asyncio.html?highlight=asyncio%23module-asyncio", "anchor_text": "asyncio"}, {"url": "https://docs.python.org/3/library/concurrent.futures.html", "anchor_text": "concurrent.futures"}, {"url": "https://stackoverflow.com/a/22873666", "anchor_text": "a StackOverflow developer pointed out"}, {"url": "https://speedtest.computerbild.de", "anchor_text": "Computerbild.de"}, {"url": "https://everymac.com/systems/apple/iphone/iphone-faq/iphone-processor-types.html", "anchor_text": "Everymac.com"}, {"url": "https://www.wired.com/story/apple-a13-bionic-chip-iphone/", "anchor_text": "a Wired article"}, {"url": "https://www.samsung.com/global/galaxy/what-is/octa-core-processor/", "anchor_text": "Samsung smartphone"}, {"url": "https://www.samsung.com/global/galaxy/what-is/octa-core-processor/", "anchor_text": "the official website"}, {"url": "https://colab.research.google.com/drive/1TX98-OpRYkdGEA5Onu81EDfv5GOOKHH2", "anchor_text": "Google ColaboratoryTesting number of threads in an API call: asyncio and concurrent.futures packages (Python) colab.research.google.com"}, {"url": "https://medium.com/tag/software-testing?source=post_page-----8aeee0d63432---------------software_testing-----------------", "anchor_text": "Software Testing"}, {"url": "https://medium.com/tag/api-testing?source=post_page-----8aeee0d63432---------------api_testing-----------------", "anchor_text": "Api Testing"}, {"url": "https://medium.com/tag/data-science?source=post_page-----8aeee0d63432---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/python?source=post_page-----8aeee0d63432---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/automated-testing?source=post_page-----8aeee0d63432---------------automated_testing-----------------", "anchor_text": "Automated Testing"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8aeee0d63432&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftesting-a-python-based-api-call-with-a-data-science-charm-8aeee0d63432&user=Yulia+R%C3%B6nsch&userId=d19e677b3ae6&source=-----8aeee0d63432---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8aeee0d63432&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftesting-a-python-based-api-call-with-a-data-science-charm-8aeee0d63432&user=Yulia+R%C3%B6nsch&userId=d19e677b3ae6&source=-----8aeee0d63432---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8aeee0d63432&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftesting-a-python-based-api-call-with-a-data-science-charm-8aeee0d63432&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8aeee0d63432--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F8aeee0d63432&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftesting-a-python-based-api-call-with-a-data-science-charm-8aeee0d63432&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----8aeee0d63432---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----8aeee0d63432--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----8aeee0d63432--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----8aeee0d63432--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----8aeee0d63432--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----8aeee0d63432--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----8aeee0d63432--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----8aeee0d63432--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----8aeee0d63432--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@y.lukashina?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@y.lukashina?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Yulia R\u00f6nsch"}, {"url": "https://medium.com/@y.lukashina/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "242 Followers"}, {"url": "http://technical-content-writer.com", "anchor_text": "technical-content-writer.com"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd19e677b3ae6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftesting-a-python-based-api-call-with-a-data-science-charm-8aeee0d63432&user=Yulia+R%C3%B6nsch&userId=d19e677b3ae6&source=post_page-d19e677b3ae6--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F836fa6dad609&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftesting-a-python-based-api-call-with-a-data-science-charm-8aeee0d63432&newsletterV3=d19e677b3ae6&newsletterV3Id=836fa6dad609&user=Yulia+R%C3%B6nsch&userId=d19e677b3ae6&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}