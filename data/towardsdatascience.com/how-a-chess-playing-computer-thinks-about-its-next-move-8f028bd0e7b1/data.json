{"url": "https://towardsdatascience.com/how-a-chess-playing-computer-thinks-about-its-next-move-8f028bd0e7b1", "time": 1682997568.680602, "path": "towardsdatascience.com/how-a-chess-playing-computer-thinks-about-its-next-move-8f028bd0e7b1/", "webpage": {"metadata": {"title": "Game Theory \u2014 The Minimax Algorithm Explained | by Marissa Eppes | Towards Data Science", "h1": "Game Theory \u2014 The Minimax Algorithm Explained", "description": "But the great minds behind the chess computer problem had started publishing in the subject nearly 6 decades earlier. Known as the father of modern computer science, Alan Turing is credited with\u2026"}, "outgoing_paragraph_urls": [], "all_paragraphs": ["But the great minds behind the chess computer problem had started publishing in the subject nearly 6 decades earlier. Known as the father of modern computer science, Alan Turing is credited with provoking the investigation dating all the way back to the 1940\u2019s.", "The expansive timeframe over which the chess computer problem has been pondered lends credence to the complexity of the solution. Textbooks have been written on the computer chess problem alone, and many strategies varying in complexity have been put to the test. This article, however, will focus on one general decision-making strategy used by computers across a variety of strategic games, including chess, checkers, mancala, tic-tac-toe, you name it.", "This general strategy is encased in a widely-used algorithm in gaming theory, called the Minimax Algorithm. This article will take a brief look at how a computer decides its next move using the Minimax Algorithm, but first we need to define a few things:", "In computer science, a tree refers to a nested data structure in which we start with one \u201croot\u201d node (Level 0), and branching from this root node, we can have any number of \u201cchild\u201d nodes (Level 1). Say these \u201cchild\u201d nodes branch off into \u201cgrandchild\u201d nodes (Level 2). Now we can say that, from the perspective of the Level 2 nodes, the nodes at Level 1 are the \u201cparent\u201d nodes and the nodes at Level 2 are the \u201cchildren\u201d.", "Intuitively, we can see that this data structure has the potential to have an infinite number of levels. In board games, we can think of the root node (Level 0) as the current state of the board, and the nodes at Level 1 as each possible state of the board depending on what the next move will be. In other words, Level 1 nodes account for each and every possible next move.", "In a multiplayer game, we can imagine a game tree in which the root node is the current state of the board after Opponent B makes a move, and it\u2019s Opponent A\u2019s turn. So Level 1 contains nodes representing Opponent A\u2019s possible moves, and Level 2 contains nodes representing Opponent B\u2019s possible moves for each and every possible move Opponent A can make back in Level 1.", "If we continue this on long enough, we can quite literally map out the future of the game. The above schematic is oversimplified in the sense that an opponent only has 3 possible moves any given turn. Often times, in chess for instance, the number of possible moves can be much, much greater, causing our game tree to become complicated in a hurry. As a matter of fact, chess has an average branching factor of ~35.", "Utility can be thought of as a way to \u201cscore\u201d each possible move based on its potential to result in a win. How utility is calculated is entirely up to the programmer. It can incorporate a large variety of factors and weigh them as the programmer sees fit. For instance, number of blank spaces on the board, the location of the opponent\u2019s current pieces, the location of our current pieces, how close we are to a winning formation, etc. all might be factors to consider in calculating the utility of a particular move. Let\u2019s take tic-tac-toe, for example, which can have relatively simple utility measures. The figure below displays a tic-tac-toe board midway through the game with a very simple (probably not optimal) utility rule. We can see that it\u2019s X\u2019s turn, and there are only 3 possible moves, and hence, 3 child nodes. For each possible move, utility is calculated using the below utility rule. In plain English this reads:", "\u201cFor each row, column, and diagonal, if we have 3 X\u2019s in-a-row, we have won the game and should assign a utility of 1.0. If we have scenarios where we have a row, column, or diagonal with 2 X\u2019s and 1 blank square, our utility should be 0.2 times the number of scenarios where this occurs.\u201d", "We can see that the winning board has the maximum utility, so our utility rule isn\u2019t totally useless, although it would certainly benefit from a \u201cdefensive\u201d component, which would consider how close O is to a win.", "Next, we\u2019ll put the pieces together to see how a computer \u201cthinks\u201d about its next move. Let\u2019s say it\u2019s the computer\u2019s turn. One possible way to decide which move to make next is to simply calculate the utility of each possible next move and select the move with the highest utility. This is often times the strategy of the average human when it comes to board games, and certainly, games can be won this way.", "But what differentiates the masters from the ordinary is the ability to think several moves ahead. As it turns out, computers can do this much more efficiently than even the best of the best chess masters out there. Here\u2019s how\u2026", "Before diving in, we will make 2 assumptions about our game:", "The premise of the algorithm is that the computer will calculate its next best move by evaluating the utility of the board several turns down the road. In doing so, the computer assumes that the opponent always selects the best move, minimizing the utility for the computer. Of course this is not a safe assumption, but lo and behold, it tends to work out pretty well regardless.", "One thing to note is that when we say \u201cutility\u201d, we are always referring to utility from the computer\u2019s perspective. For instance, when the human player makes the best possible move, we say that utility is minimized for that turn.", "The algorithm incorporates three basic functions: Maximize and Minimize, as well as a Utility Calculation function. The pseudocode looks something like this:", "No need to get too wrapped up in the details for now. The two key takeaways from this schematic are:", "Returning back to the scenario where it\u2019s the computer\u2019s turn, the computer would call the Maximize function on the current board. This would call Minimize on each child of the board, which calls Maximize on each grandchild, and so on and so forth\u2026", "The algorithm performs what we call a \u201cdepth-first search\u201d in computer science. This means it primarily traverses vertically down the entirely length of the tree, until it reaches the terminal nodes, and then works its way back up. Secondarily, the algorithm moves horizontally, or among other sibling nodes . This is in stark contrast to a \u201cbreadth-first search\u201d, which does just the opposite \u2014 it primarily moves horizontally among fellow sibling nodes, searching a whole \u201clevel\u201d at a time, and secondarily works its way down the tree. The schematic below helps to illustrate this concept:", "The Minimax Algorithm moves in depth-first fashion down the tree until it reaches a terminal node (i.e. someone wins the game) or a pre-determined depth limit. Depth limits are set for games involving complex search spaces, in which it would not be feasible to search the entire network of possible moves within a reasonable amount of time. Once it reaches a terminal node or depth limit, the Utility Calculation function is called, and a resulting utility value for that particular terminal board is calculated.", "This utility value is then \u201cpassed up\u201d to the parent node where it is compared to the current utility value at the parent (if assigned yet). If the parent node is in a Maximize cycle, the terminal node utility value replaces the utility at the parent node if it is greater than the current value at the parent node or the parent node has yet to be assigned a utility value. The converse would be true if the parent node were in the Minimize cycle.", "Intuitively, we might be able to think about how this cycle occurs recursively over and over until we are able to populate the next move nodes (Level 1) with utility values. These are what allow the computer to make a decision. The clip below might help in visualizing this concept.", "But what is it that we are actually doing, and how does this help a computer make a decision? The computer is essentially applying the following logic:", "Your next move is only as strong as the opponent\u2019s following move is weak.", "At the surface, we might be able to identify what looks like a strong move; however, if this strong move results in an even stronger move by the opponent (shooting our utility down), then was the original move that we made really strong?", "This is the line of thinking behind the algorithm, applied over several levels of our tree. We calculate the utilities of our possible moves somewhere in the future and decide whether or not these utilities should represent our current move options. If it is likely that the opponent (who is always trying to minimize utility) will make all the moves that will lead us to said future point, we should pass that particular future utility value up the tree to represent our current decision node.", "And that\u2019s the gist of it. When we think about relatively complex games with ginormous search spaces and a variety of strategies, we are lucky if the computer can look even a few moves into the future. But as history shows time and time again, this general strategy still works better than human brainpower alone, provided our utility rules are effective.", "Chess is a sophisticated game with rather complex utility measures and a vast search space. Applying the above logic to a chess match might be enough to make your head spin, which is why the problem has taken decades and decades to (arguably) solve. But the underlying principle of what goes into programming a chess-playing computer is largely the same as shown in the simplified example above \u2014 look at possible moves in the future, decide how good these moves are, and predict whether the opponent will make all the right moves to lead you there.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F8f028bd0e7b1&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-a-chess-playing-computer-thinks-about-its-next-move-8f028bd0e7b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-a-chess-playing-computer-thinks-about-its-next-move-8f028bd0e7b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-a-chess-playing-computer-thinks-about-its-next-move-8f028bd0e7b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-a-chess-playing-computer-thinks-about-its-next-move-8f028bd0e7b1&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----8f028bd0e7b1--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8f028bd0e7b1--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@meppes?source=post_page-----8f028bd0e7b1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@meppes?source=post_page-----8f028bd0e7b1--------------------------------", "anchor_text": "Marissa Eppes"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe6e6ee3b02eb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-a-chess-playing-computer-thinks-about-its-next-move-8f028bd0e7b1&user=Marissa+Eppes&userId=e6e6ee3b02eb&source=post_page-e6e6ee3b02eb----8f028bd0e7b1---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8f028bd0e7b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-a-chess-playing-computer-thinks-about-its-next-move-8f028bd0e7b1&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8f028bd0e7b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-a-chess-playing-computer-thinks-about-its-next-move-8f028bd0e7b1&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----8f028bd0e7b1---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/minimax-algorithm?source=post_page-----8f028bd0e7b1---------------minimax_algorithm-----------------", "anchor_text": "Minimax Algorithm"}, {"url": "https://medium.com/tag/data-science?source=post_page-----8f028bd0e7b1---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----8f028bd0e7b1---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/deep-learning?source=post_page-----8f028bd0e7b1---------------deep_learning-----------------", "anchor_text": "Deep Learning"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8f028bd0e7b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-a-chess-playing-computer-thinks-about-its-next-move-8f028bd0e7b1&user=Marissa+Eppes&userId=e6e6ee3b02eb&source=-----8f028bd0e7b1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8f028bd0e7b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-a-chess-playing-computer-thinks-about-its-next-move-8f028bd0e7b1&user=Marissa+Eppes&userId=e6e6ee3b02eb&source=-----8f028bd0e7b1---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8f028bd0e7b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-a-chess-playing-computer-thinks-about-its-next-move-8f028bd0e7b1&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----8f028bd0e7b1--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F8f028bd0e7b1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-a-chess-playing-computer-thinks-about-its-next-move-8f028bd0e7b1&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----8f028bd0e7b1---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----8f028bd0e7b1--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----8f028bd0e7b1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----8f028bd0e7b1--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----8f028bd0e7b1--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----8f028bd0e7b1--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----8f028bd0e7b1--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----8f028bd0e7b1--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----8f028bd0e7b1--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@meppes?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@meppes?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Marissa Eppes"}, {"url": "https://medium.com/@meppes/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "141 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe6e6ee3b02eb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-a-chess-playing-computer-thinks-about-its-next-move-8f028bd0e7b1&user=Marissa+Eppes&userId=e6e6ee3b02eb&source=post_page-e6e6ee3b02eb--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F57cbf1490b06&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-a-chess-playing-computer-thinks-about-its-next-move-8f028bd0e7b1&newsletterV3=e6e6ee3b02eb&newsletterV3Id=57cbf1490b06&user=Marissa+Eppes&userId=e6e6ee3b02eb&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}