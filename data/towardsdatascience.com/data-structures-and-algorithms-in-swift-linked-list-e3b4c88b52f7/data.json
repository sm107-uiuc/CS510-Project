{"url": "https://towardsdatascience.com/data-structures-and-algorithms-in-swift-linked-list-e3b4c88b52f7", "time": 1683017015.2733629, "path": "towardsdatascience.com/data-structures-and-algorithms-in-swift-linked-list-e3b4c88b52f7/", "webpage": {"metadata": {"title": "Data Structures and Algorithms in Swift: Linked List | by Md Zahed Hossain | Towards Data Science", "h1": "Data Structures and Algorithms in Swift: Linked List", "description": "This post talks about how to implement Linked List in Swift programming language."}, "outgoing_paragraph_urls": [{"url": "https://medium.com/achievers-tech/data-structures-and-algorithms-in-swift-arrays-c4ed2b44d238", "anchor_text": "here", "paragraph_index": 0}], "all_paragraphs": ["In part 1 of this series I have talked about Arrays. If you haven\u2019t given it a read, I highly recommend taking a look at it here. In this part of the series I will be writing about another data structure that is very commonly used in problem solving: Linked List.", "A Linked list data structure is composed of a data and a reference to the next item in that Linked List. Each item in a Linked List is called a Node. The Nodes are interconnected by the reference that they store in them. The Node class are self-referential in the sense that they have a reference to the next node in the sequence. Unlike Arrays, the Linked List data structure is not built into Swift. So, in this post I will write my own implementation of it to show some of its functionality. There are two types of Linked List:", "Let\u2019s talk about Singly Linked List first, from hereon referred to as Linked List. The Node class in a Linked List consists of a data type and a reference to the next Node in the Linked List as shown below:", "Here, our Node class has a data type that is a generic. We are using generics to make our Node class more versatile so that we can store any data type. If you don\u2019t know about generics don\u2019t worry too much about it for now. Just imagine the T as a type, such as Int or String. There are many variations of Linked List implementations. Here I will show the one where the linked list consist of a head node (other variations include Linked List having a reference to a Linked List, Linked List having both a head node and a tail node, etc). Here is a depiction of a list with two nodes.", "The first node has a data (of type T, assume Int for simplicity) and a reference to the next node. This is the head node. The second node also has data, but the reference to the next node is null. Hence, it is not pointing to anything else. Here is our Linked List class (named is SinglyLinkedList to avoid confusion)", "Our SinglyLinkedList class has a head node, a count private variable to keep count of the number of nodes and two initializers. So far, so good. But, we need more functions to be able to add/remove items from the list, to know about the size of the list, etc. Lets implement those now.", "We have added four functions. empty() andsize() returns whether the list is empty and the count of the number of elements in the list respectively. add adds an elements at the beginning of the list and remove removes an element from the beginning of the list. Let\u2019s add one more to complete this implementation. We should have a way to look at the first element of the list without deleting it. Here is the code for it:", "As you can see, our implementation of the Linked List is pretty straightforward. In a sense our implementation of this Linked List looks like a Stack (which I will discuss in a later post), which is a FIFO (First In First Out) structure. Since we are returning the data stored, instead of the Node, from the Linked List, we are essentially restricting how our list can be modified. Had we returned a Node, the List would then become traversable using the reference to that node (using the next reference) and would then allow addition to and deletion from any part of the list. For now, we will stick with this implementation. Let\u2019s try out our list.", "Great! Our Singly Linked List is working as expected. For our Singly Linked List, we will stay with this implementation. In your own implementation, you can feel free to return the node instead of the data, but be extra careful when you do so. Let\u2019s move on to our Doubly Linked List data structure.", "The Doubly Linked List is almost similar to the Singly Linked List, with the exception of having a reference to the previous node as well. As a result, there are mode codes to write and have the reference to the previous node will also allow us to delete an element from any position easily (this is achievable in Singly Linked list too, but we have to pay more attention while doing so). Having the reference to the previous node will also allow us to traverse through the list in reverse order (from back to front) as well. Let\u2019s first look at the implementation of the node of a Doubly Linked List.", "We have named it DoublyNode to distinguish between the Node from our Singly Linked List Structure, but it looks pretty similar. The only new thing is the reference to the previous node. In the init method we set both the next and the prev to nil . Again, looks pretty simple so far, right? Let\u2019s now look at how our DoublyLinkedList structure will look like.", "We have the usual functions, function to check the size of the list and whether the list is empty or not, exactly like the SinglyLinkedList. We also have the add method that adds an element at the beginning of the list. Notice how we have taken advantage of the add method in the init to avoid mistake and code duplication. Let\u2019s go through the add method line by line. First, we assign the passed element to a temporary variable. Next, we check whether the list is empty or not. If the list is empty, we simply assign the new node to the head node and set the previous and next node of head to be nil . If, however, the list is not empty, then we need to move the head since the new element will be the new head of the list. First, we keep a temporary reference to the head node. Next, we assign the new node to be the head node. We then assign the next node of our new head node to that of our old head node. The previous node of the new head node is set to be nil and the previous node of our old head node is set to our new head node. In either cases (list being empty or not), we increase the number of element in the list by 1. Hence, we increase the count by 1. The challenges with DoublyLinkedList is that we have to make sure all the references are updated properly. Otherwise we will end up with buggy states in our list.", "We are done with the add method, but, how will the remove method look like? Let\u2019s have a look at it.", "If the list is empty, we return nil and we are done. Easy. What if it is not? Again, with my implementation, we are removing from the front of the linked list. If the list is not empty, then we remove the head and move the reference to the head to the next node. First, we store the head node in a temporary node called item . Next, we move our head to the next element. We also update the previous node of our new head to be nil. Done, we have moved our head. Next, we set the next and prev node of that temporary node (which was our old head now) to nil . This is to make sure when we return the node, the user cannot modify our list using the returned node. We could have easily returned the data like we did in our SinglyLinkedList implementation, but here I just wanted to show how we can also return a node. Next, we decrease the count of element by 1. Finally, we return the removed node. This completes our remove method. I will show one more method, which allows us to remove an element from any position. Here is how it looks like.", "It almost looks like remove. The only difference is that we try to find the data and only remove it if it exists and update the references. Otherwise, we return nil . Also, note how we handle the case of head differently. If the matching element is the head node, then we use our existing remove method to handle that case. Let\u2019s test our DoublyLinkedList and see if it works as expected.", "Perfect! Our DoublyLinkedList data structure works as expected. Currently, our DoublyLinkedList only works for Int . You can modify it to accept any type by using generics like our SinglyLinkedList structure. I leave it up to you to as an exercise to add the add(element: Int, at: Int) method, that adds an element at the position specified by the at parameter. Hopefully you will be able to do it easily. For reference, look at the remove(element: Int) method.", "This concludes our LinkedList data structure. Hopefully, I was able to help you understand this data structure a bit better. Using these data structures, later we will implement our next data structures (like Stack, Queue, Tree, etc). Until then, keep coding.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Full Stack Developer, Engineer, Musician, Tech Curious, Tea Drinker, Sports lover"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fe3b4c88b52f7&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-and-algorithms-in-swift-linked-list-e3b4c88b52f7&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-and-algorithms-in-swift-linked-list-e3b4c88b52f7&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-and-algorithms-in-swift-linked-list-e3b4c88b52f7&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-and-algorithms-in-swift-linked-list-e3b4c88b52f7&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----e3b4c88b52f7--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----e3b4c88b52f7--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://mdzahedhossain.medium.com/?source=post_page-----e3b4c88b52f7--------------------------------", "anchor_text": ""}, {"url": "https://mdzahedhossain.medium.com/?source=post_page-----e3b4c88b52f7--------------------------------", "anchor_text": "Md Zahed Hossain"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc361ba96366e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-and-algorithms-in-swift-linked-list-e3b4c88b52f7&user=Md+Zahed+Hossain&userId=c361ba96366e&source=post_page-c361ba96366e----e3b4c88b52f7---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe3b4c88b52f7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-and-algorithms-in-swift-linked-list-e3b4c88b52f7&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe3b4c88b52f7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-and-algorithms-in-swift-linked-list-e3b4c88b52f7&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://medium.com/achievers-tech/data-structures-and-algorithms-in-swift-arrays-c4ed2b44d238", "anchor_text": "here"}, {"url": "https://medium.com/tag/swift?source=post_page-----e3b4c88b52f7---------------swift-----------------", "anchor_text": "Swift"}, {"url": "https://medium.com/tag/data-structures?source=post_page-----e3b4c88b52f7---------------data_structures-----------------", "anchor_text": "Data Structures"}, {"url": "https://medium.com/tag/ios?source=post_page-----e3b4c88b52f7---------------ios-----------------", "anchor_text": "IOS"}, {"url": "https://medium.com/tag/algorithms?source=post_page-----e3b4c88b52f7---------------algorithms-----------------", "anchor_text": "Algorithms"}, {"url": "https://medium.com/tag/linked-lists?source=post_page-----e3b4c88b52f7---------------linked_lists-----------------", "anchor_text": "Linked Lists"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe3b4c88b52f7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-and-algorithms-in-swift-linked-list-e3b4c88b52f7&user=Md+Zahed+Hossain&userId=c361ba96366e&source=-----e3b4c88b52f7---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe3b4c88b52f7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-and-algorithms-in-swift-linked-list-e3b4c88b52f7&user=Md+Zahed+Hossain&userId=c361ba96366e&source=-----e3b4c88b52f7---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe3b4c88b52f7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-and-algorithms-in-swift-linked-list-e3b4c88b52f7&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----e3b4c88b52f7--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fe3b4c88b52f7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-and-algorithms-in-swift-linked-list-e3b4c88b52f7&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----e3b4c88b52f7---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----e3b4c88b52f7--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----e3b4c88b52f7--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----e3b4c88b52f7--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----e3b4c88b52f7--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----e3b4c88b52f7--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----e3b4c88b52f7--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----e3b4c88b52f7--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----e3b4c88b52f7--------------------------------", "anchor_text": ""}, {"url": "https://mdzahedhossain.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://mdzahedhossain.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Md Zahed Hossain"}, {"url": "https://mdzahedhossain.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "107 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc361ba96366e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-and-algorithms-in-swift-linked-list-e3b4c88b52f7&user=Md+Zahed+Hossain&userId=c361ba96366e&source=post_page-c361ba96366e--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fd6ddda258894&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-structures-and-algorithms-in-swift-linked-list-e3b4c88b52f7&newsletterV3=c361ba96366e&newsletterV3Id=d6ddda258894&user=Md+Zahed+Hossain&userId=c361ba96366e&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}