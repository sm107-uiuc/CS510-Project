{"url": "https://towardsdatascience.com/how-to-create-a-graphql-api-using-aws-appsync-49fed1171780", "time": 1683011556.906935, "path": "towardsdatascience.com/how-to-create-a-graphql-api-using-aws-appsync-49fed1171780/", "webpage": {"metadata": {"title": "How to Create a GraphQL API using AWS AppSync | by Janitha Tennakoon | Towards Data Science", "h1": "How to Create a GraphQL API using AWS AppSync", "description": "Nowadays whenever we talk or think about creating/designing an API what pops to the mind at first is REST. REST(REpresentational State Transfer) has been the go-to standard until recently when\u2026"}, "outgoing_paragraph_urls": [{"url": "http://localhost:4000/graphql", "anchor_text": "http://localhost:4000/graphql", "paragraph_index": 11}], "all_paragraphs": ["Nowadays whenever we talk or think about creating/designing an API what pops to the mind at first is REST. REST(REpresentational State Transfer) has been the go-to standard until recently when developing an API platform. Even though REST became the standard, it did have its own disadvantages. One of the main disadvantages is the inflexibility for the clients who are going to consume them. So even though at the beginning we create our REST API according to client requirements, that API will have very few options when there is a rapid change of requirements in the client. To support these rapid changes clients would have the need to send multiple calls and get multiple unnecessary data along with it.", "GraphQL was developed mainly focusing on providing this flexibility for the clients. It was started as an internal project inside Facebook but later they made it open source. The main concept is to let the client have the ability to choose what data to be queried and what data needs to be returned without making multiple API calls. Yes as you read with GraphQL, there are no multiple endpoints, but rather only a single endpoint. To illustrate how GraphQL works let\u2019s try to implement a simple GraphQL API using node.js and express framework. The data model for our GraphQL will be a User.", "Following npm packages will be used in our code.", "A GraphQL API mainly consists of four components.", "GraphQL schema is the core element where we define the functionalities clients can execute after they are connected to the API. The main building block on schema is type.", "Above as you can see using building block type we have created three blocks. type Query, type Mutation, and type User. Query and Mutation will be described below. For type User as you can see we have defined the attribute fields that will be available for clients when querying for User.", "Query type is used to define what type of queries will be available for the clients to be accessed. In REST terms Query type can be mapped to GET requests. In the above schema, we have defined three queries with arguments they accept and what the return value type will be. (! stands for required)", "Whatever functions which make data change should be done as a Mutation in GraphQL. POST, PUT, and DELETE requests on REST can be mapped as mutations on GraphQL. As we defined queries, mutations are also defined with arguments and return value type.", "In resolvers, we define the functionality of queries and mutations we defined in the schema. Resolvers map the schema defined methods to our executing functioning methods.", "In above as you can see, for each query and mutation we defined, we have mapped a Javascript function that will execute the functional logic. (getUser, getUserByName, getUserByStatus and updateUser are Javascript functions)", "All right, now that we have covered the main concepts in our code, below is the complete code for our simple GraphQL API. As mentioned above you need to install the mentioned npm packages in order to run the application.", "Now you can start the node.js server and to issue queries to our API we can use GraphiQL tool which will run on http://localhost:4000/graphql", "Now, as shown above, we can execute queries for our created API. Above we are getting the user with an id of 1, and we request only name and age fields to be returned.", "Same as queries, we can send mutations to update users as well. Above we have changed the age of the user to 25.", "AWS AppSync is a service provided by Amazon Web Services which simplifies the API application development by letting developers create a secure, flexible GraphQL API on their infrastructure. The benefit of using AWS AppSync is that it also provides additional features like Cognito, IAM permissions, API key, and many other AWS services to integrate with our API.", "With AppSync main concepts of GraphQL remain mostly the same with one additional type, Subscriptions. Subscriptions are invoked to a mutation done through the API so it can be used to create real-time GrapgQL APIs. Also, we need to talk about two more additional components in AWS AppSync before we start creating our own GraphQL in AWS AppSync.", "Let\u2019s start implementing our API. First go to the AppSync service where you will greeted with the below screen if you have no APIs created already.", "Click on Create API which will take us to the API creation page. Here AWS will provide us with several options. We can either choose from one of the already created templates or start from scratch. For this article let\u2019s choose Build from scratch so we will be able to learn how everything connects behind the scene.", "Next, provide a Name and create our API. Then we will be forwarded to a screen where we will have the option of editing our schema and running queries against our API.", "Since we have nothing on our API yet, let\u2019s first define our schema. In this article, I am going to discuss on two types of data sources that AppSync supports. One is DynamoDB and the other will be AWS Lambda functions. As the above created simple GraphQL API, let\u2019s assume our User data model.", "Let\u2019s say we need our Users to be saved in a DynamoDB table. So all the queries and mutations done on type User will be directly happening on our DynamoDB table. So first let\u2019s define our User type in the schema.", "On the schema page click on Create Resource where we will define our User schema.", "We define the new type of User and then it will ask for the DynamoDB table details. Here we can provide the name of the table and also configure different types of indexes we needed to create as well. And lastly it will show the schema blocks that it has automatically generated for our type User which will be merged to our schema. Click on Create and it will create the DynamoDB table along with resolvers as well.", "Now let\u2019s look more into our schema. We can see that AppSync has automatically generated query types and mutations for us and it have already mapped these queries and mutations to resolvers as well.", "Let\u2019s look at one resolver to identify how resolvers work on AppSync.", "Click on createUser mutation. Here we can see the template that AppSync has used for this mutation. In the request mapping template, we can see that it will take id as the key for our userTable and create a user collection inside the table. $ctx.args.input is the arguments we will pass to our mutation.", "Response mapping defines the response we will send back to the client. Here it will directly send the output sent from DynamoDb which will be the newly created user.", "We can test our API using the provided Queries tool. Let\u2019s first add a user and try to query the user using the id.", "The API so far we created can do all CRUD operations directly on our DynamoDB database. But APIs do not only contain CRUD operations. There can be different kinds of functional logics like starting a process by sending messages to a queue or rather than doing CRUD operation on a database we might need to use a different AWS resource like ElasticSearch. To cater to these kinds of scenarios we can use AWS lambda functions as our Data source.", "For this article let\u2019s assume that rather than taking user data from our DynamoDb we want to take them from an AWS lambda function. For that first, let\u2019s create our lambda function. The query that we are going to map as a resolver is", "Create a new lambda function and add the below code for the function. Here we are checking for the event.field parameter which we will send through the resolver. So if the field parameter is getUsers then we will return the filtered user.", "Now let\u2019s configure a resolver for this function. Before that, we need to register this function as a data source in our API. For that go to the Data Sources tab and click on Create data source.", "Next, provide a name for the data source, select DataStorageType as Lambda, and then region and lastly the lambda function we created.", "The next step is to assign this data source in our schema. For that first delete the resolver already mapped to getUser() when we mapped our schema to DynamoDB table.", "After deleting click on Attach. Then select the data source as the data source we created for our lambda function. Next will be to add templates for request mappings and response mappings.", "Add the above as a request mapping template. Here we specify the field as getUser which we use in our lambda function as event.field. For the response mapping, we can leave it as it is.", "Now let\u2019s try to query this from our GraphQL API.", "That\u2019s it. Even though here the lambda function is used to just return a user I think you might be able to figure out whatever a lambda function can do can be mapped to our GraphQL as well, which indeed creates a serverless API.", "I think you have learned more about what GraphQL and how to use AWS AppSync to create a GraphQL for us. There are many more concepts that have not been covered in this article. So if you are keen on this make sure to follow official documentation as well as other awesome articles that are available out there. Thank you.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Associate Tech Lead | AWS Community Builder from Sri Lanka currently working in Singapore."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F49fed1171780&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-a-graphql-api-using-aws-appsync-49fed1171780&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-a-graphql-api-using-aws-appsync-49fed1171780&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-a-graphql-api-using-aws-appsync-49fed1171780&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-a-graphql-api-using-aws-appsync-49fed1171780&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----49fed1171780--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----49fed1171780--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://janitha000.medium.com/?source=post_page-----49fed1171780--------------------------------", "anchor_text": ""}, {"url": "https://janitha000.medium.com/?source=post_page-----49fed1171780--------------------------------", "anchor_text": "Janitha Tennakoon"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F1fd45980958d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-a-graphql-api-using-aws-appsync-49fed1171780&user=Janitha+Tennakoon&userId=1fd45980958d&source=post_page-1fd45980958d----49fed1171780---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F49fed1171780&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-a-graphql-api-using-aws-appsync-49fed1171780&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F49fed1171780&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-a-graphql-api-using-aws-appsync-49fed1171780&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://pixabay.com/users/bsdrouin-5016447/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2402637", "anchor_text": "Bethany Drouin"}, {"url": "https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2402637", "anchor_text": "Pixabay"}, {"url": "https://graphql.org/", "anchor_text": "GraphQL"}, {"url": "http://localhost:4000/graphql", "anchor_text": "http://localhost:4000/graphql"}, {"url": "https://aws.amazon.com/appsync/", "anchor_text": "AWS AppSync"}, {"url": "https://graphql.org/learn/", "anchor_text": "GraphQL: A query language for APIs.Learn about GraphQL, how it works, and how to use it in this series of articles. Looking for documentation on how to\u2026graphql.org"}, {"url": "https://docs.aws.amazon.com/appsync/latest/devguide/welcome.html", "anchor_text": "WelcomeWelcome to the AWS AppSync Developer Guide. AWS AppSync is an enterprise-level, fully managed GraphQL service with\u2026docs.aws.amazon.com"}, {"url": "https://medium.com/tag/graphql?source=post_page-----49fed1171780---------------graphql-----------------", "anchor_text": "GraphQL"}, {"url": "https://medium.com/tag/aws?source=post_page-----49fed1171780---------------aws-----------------", "anchor_text": "AWS"}, {"url": "https://medium.com/tag/api-management?source=post_page-----49fed1171780---------------api_management-----------------", "anchor_text": "Api Management"}, {"url": "https://medium.com/tag/rest?source=post_page-----49fed1171780---------------rest-----------------", "anchor_text": "Rest"}, {"url": "https://medium.com/tag/nodejs?source=post_page-----49fed1171780---------------nodejs-----------------", "anchor_text": "Nodejs"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F49fed1171780&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-a-graphql-api-using-aws-appsync-49fed1171780&user=Janitha+Tennakoon&userId=1fd45980958d&source=-----49fed1171780---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F49fed1171780&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-a-graphql-api-using-aws-appsync-49fed1171780&user=Janitha+Tennakoon&userId=1fd45980958d&source=-----49fed1171780---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F49fed1171780&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-a-graphql-api-using-aws-appsync-49fed1171780&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----49fed1171780--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F49fed1171780&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-a-graphql-api-using-aws-appsync-49fed1171780&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----49fed1171780---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----49fed1171780--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----49fed1171780--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----49fed1171780--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----49fed1171780--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----49fed1171780--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----49fed1171780--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----49fed1171780--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----49fed1171780--------------------------------", "anchor_text": ""}, {"url": "https://janitha000.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://janitha000.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Janitha Tennakoon"}, {"url": "https://janitha000.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "459 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F1fd45980958d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-a-graphql-api-using-aws-appsync-49fed1171780&user=Janitha+Tennakoon&userId=1fd45980958d&source=post_page-1fd45980958d--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fc03af888eea6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-create-a-graphql-api-using-aws-appsync-49fed1171780&newsletterV3=1fd45980958d&newsletterV3Id=c03af888eea6&user=Janitha+Tennakoon&userId=1fd45980958d&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}