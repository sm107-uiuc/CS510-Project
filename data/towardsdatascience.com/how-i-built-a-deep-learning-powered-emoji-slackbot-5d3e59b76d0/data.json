{"url": "https://towardsdatascience.com/how-i-built-a-deep-learning-powered-emoji-slackbot-5d3e59b76d0", "time": 1683011429.2281642, "path": "towardsdatascience.com/how-i-built-a-deep-learning-powered-emoji-slackbot-5d3e59b76d0/", "webpage": {"metadata": {"title": "How I Built a Deep Learning Powered Emoji Slackbot \ud83d\ude04 \ud83d\ude16 \ud83d\ude09 | by Chenggang Wu | Towards Data Science", "h1": "How I Built a Deep Learning Powered Emoji Slackbot \ud83d\ude04 \ud83d\ude16 \ud83d\ude09", "description": "As I put the finishing touches on my PhD thesis in computer systems at UC Berkeley, I often wonder what life in the AI world is like. My AI friends are constantly bragging about how deep learning\u2026"}, "outgoing_paragraph_urls": [{"url": "https://zapier.com/blog/how-to-build-chat-bot/", "anchor_text": "blog post", "paragraph_index": 1}, {"url": "https://github.com/bfelbo/DeepMoji", "anchor_text": "DeepMoji", "paragraph_index": 2}, {"url": "https://aws.amazon.com/sagemaker/", "anchor_text": "SageMaker", "paragraph_index": 2}, {"url": "https://algorithmia.com/", "anchor_text": "Algorithmia", "paragraph_index": 2}, {"url": "https://github.com/cw75/torchMojiBot", "anchor_text": "this repository", "paragraph_index": 2}, {"url": "https://medium.com/@vsreekanti/real-time-prediction-serving-simplified-850d9cbaddd4", "anchor_text": "scalable prediction infrastructure", "paragraph_index": 3}, {"url": "https://github.com/cw75/torchMojiBot/tree/master/slack", "anchor_text": "here", "paragraph_index": 4}, {"url": "https://github.com/huggingface/torchMoji", "anchor_text": "torchMoji", "paragraph_index": 8}, {"url": "https://github.com/cw75/torchMoji", "anchor_text": "here", "paragraph_index": 8}, {"url": "https://github.com/cw75/torchMoji/blob/master/model/vocabulary.json", "anchor_text": "here", "paragraph_index": 10}, {"url": "https://github.com/pallets/flask", "anchor_text": "Flask", "paragraph_index": 16}, {"url": "https://ngrok.com/", "anchor_text": "ngrok", "paragraph_index": 16}, {"url": "https://www.docker.com/", "anchor_text": "Docker", "paragraph_index": 17}, {"url": "https://kubernetes.io/", "anchor_text": "Kubernetes", "paragraph_index": 17}, {"url": "https://www.amazonaws.cn/en/elasticloadbalancing/", "anchor_text": "ELB", "paragraph_index": 17}, {"url": "https://ssc.io/pdf/modin711s.pdf", "anchor_text": "paper", "paragraph_index": 18}, {"url": "https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html", "anchor_text": "here", "paragraph_index": 20}, {"url": "https://github.com/cw75/torchMojiBot/blob/master/sagemaker/emojibot-sagemaker.dockerfile", "anchor_text": "here", "paragraph_index": 20}, {"url": "https://github.com/cw75/torchMojiBot/blob/master/deploy/sagemaker/emojibot-sagemaker.py", "anchor_text": "here", "paragraph_index": 20}, {"url": "https://kubernetes.io/", "anchor_text": "Kubernetes", "paragraph_index": 22}, {"url": "https://aws.amazon.com/ecr/", "anchor_text": "ECR", "paragraph_index": 23}, {"url": "https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpoint.html", "anchor_text": "InvokeEndpoint", "paragraph_index": 26}, {"url": "https://aws.amazon.com/blogs/machine-learning/call-an-amazon-sagemaker-model-endpoint-using-amazon-api-gateway-and-aws-lambda/", "anchor_text": "blog post", "paragraph_index": 27}, {"url": "https://aws.amazon.com/api-gateway/", "anchor_text": "API Gateway", "paragraph_index": 27}, {"url": "https://aws.amazon.com/lambda/", "anchor_text": "AWS Lambda", "paragraph_index": 27}, {"url": "https://github.com/cw75/torchMojiBot/tree/master/api-gateway", "anchor_text": "here", "paragraph_index": 32}, {"url": "https://algorithmia.com/developers/algorithm-development/source-code-management", "anchor_text": "docs", "paragraph_index": 38}, {"url": "https://github.com/cw75/torchMojiBot/blob/master/algorithmia/emojize/src/emojize.py", "anchor_text": "prediction script", "paragraph_index": 38}, {"url": "https://algorithmia.com/developers/integrations/slack", "anchor_text": "docs", "paragraph_index": 43}, {"url": "https://github.com/cw75/torchMojiBot/blob/master/lambda/algorithmia/lambda_function.py", "anchor_text": "here", "paragraph_index": 45}, {"url": "https://algorithmia.com/serverless-ai-layer", "anchor_text": "serverless model serving platform", "paragraph_index": 46}, {"url": "https://github.com/cw75/torchMojiBot", "anchor_text": "this", "paragraph_index": 48}, {"url": "https://medium.com/@vsreekanti/real-time-prediction-serving-simplified-850d9cbaddd4", "anchor_text": "prediction pipeline DSL", "paragraph_index": 54}, {"url": "https://twitter.com/cgwu0530", "anchor_text": "Twitter", "paragraph_index": 54}, {"url": "https://www.vikrams.io/", "anchor_text": "Vikram Sreekanti", "paragraph_index": 55}, {"url": "https://people.eecs.berkeley.edu/~jegonzal/", "anchor_text": "Joseph Gonzalez", "paragraph_index": 55}, {"url": "https://dsf.berkeley.edu/jmh/", "anchor_text": "Joe Hellerstein", "paragraph_index": 55}], "all_paragraphs": ["As I put the finishing touches on my PhD thesis in computer systems at UC Berkeley, I often wonder what life in the AI world is like. My AI friends are constantly bragging about how deep learning will revolutionize everything from medicine to online shopping \u2014 and their papers get 100s of citations as soon as they\u2019re posted (what the heck!). But I\u2019ve always wondered how they actually use AI to solve real problems.", "At the same time, I\u2019ve noticed recently that I spend most of my time responding to Slack conversations. Inspired by a recent blog post (and experiencing much thesis writing apathy), I decided to build and deploy a deep learning powered Slackbot to automatically add reactions to Slack posts with the most appropriate emoji. \ud83d\ude03 \ud83d\udc4d", "In this post, I walk through my experience building this Slackbot powered by DeepMoji. I ended up deploying DeepMoji using two different frameworks (AWS SageMaker and Algorithmia). Here, I compare my experience using both systems, highlighting some of the strengths, limitations, and opportunities for improvement in prediction serving systems. This post is pretty high-level but this repository has links with detailed instructions and code to reproduce my Slackbot.", "Personally, I\u2019ve spent the last few years working on scalable cloud systems. I was particularly excited to jump into this task because we\u2019ve spent some time recently thinking about scalable prediction infrastructure. That said, I\u2019m definitely not an expert on AI systems, so let me know if I\u2019ve missed something here.", "Setting up a Slackbot is fairly straightforward but involves a lot of clicking around on the Slack website. I documented the process here with some screen grabs, but at a high level, I created a bot, linked it to my workspace, and gave it permission to view messages and add emoji reactions.", "Next step: pick a machine learning model that powers my Slackbot to react text with emoji!", "So what AI magic should I invoke? I don\u2019t have the data to train a model, but fortunately, there are tons of pre-trained models that I can repurpose. My AI colleagues tell me that this is an emerging trend in model design: start with an existing model and fine tune it for your task. In my case, the DeepMoji model does exactly what I need and is already trained and open-source.", "For a little bit of context, DeepMoji is trained on 1.2 billion tweets with emojis to understand language sentiment and how it correlates with emoji. My use case is pretty simple: Send the model a Slack message and react with the emoji that the model believes best reflects the sentiment of the message.", "Bad news: DeepMoji uses Python 2 (yuck). Good news: The good people at HugginFace developed torchMoji, a PyTorch implementation of DeepMoji that supports Python3. The torchMoji codebase had a bug that I had to fix to correctly parse the PackedSequencePyTorch object. The working version is available on my fork here. This part just requires a laptop, so you can follow along at home if you\u2019re interested.", "With the bug fixed, getting the trained model is easy. First, I installed torchMoji as a package:", "I needed the model weights and vocabulary file to initialize the model. The vocabulary file was already in the repo (here). To download the weights, I ran:", "Now that all the prerequisites are downloaded, making a prediction takes only a few lines of Python:", "You can test it to make sure everything works:", "Pretty cool! I didn\u2019t even need to get a GPU.", "Next step: turn this into a prediction service with a REST web interface that my Slackbot can invoke!", "Serving predictions is the systems challenge in this scenario; the operational engine that will make this bot actually work. The important question is where should the prediction service live?", "A strawman solution is to just wrap the prediction script I wrote above in a Flask server and use a tool like ngrok to generate a REST endpoint on my laptop or an EC2 instance. The problem is that I want to deploy the bot onto my lab\u2019s Slack team so that everybody can play with it, so the bot needs to be always-on and scalable.", "So I needed something real, and as a systems hacker, part of me wanted to build the service from scratch: pack my script into a Docker image, launch a Kubernetes cluster, and expose the REST endpoint via an AWS ELB.", "On the other hand, as a researcher, I don\u2019t want to reinvent the wheel, and I know cloud providers like Google, Amazon, and Microsoft have offerings for prediction serving. The first platform that came to mind was AWS SageMaker, a managed service on AWS that covers the entire machine learning lifecycle from model development to deployment. The team released a paper on SageMaker at SIGMOD\u201920, and I\u2019ve been using AWS services for my research for years, so I figured it must be reasonable. I hadn\u2019t realized I was stepping into the abyss\u2026", "I expected deploying a model on SageMaker to be simple. I already had a list of Python dependencies and the prediction script that I showed above. All I wanted to do was upload the script, dependencies, and model to SageMaker, create a REST endpoint, and connect it to the Slackbot.", "But alas, there\u2019s no way to upload a model to SageMaker. Instead, I had to build a Docker image with all my Python dependencies installed. I also had to write a Flask server that wraps my prediction script and responds to SageMaker\u2019s health check and model invocation requests \u2014 you can see the docs here, the Dockerfile here, and my Flask server here. It\u2019s not all that complicated, but if I wasn\u2019t familiar with Docker and Flask, this probably would\u2019ve taken me a while to figure out.", "I\u2019ve been using Docker for years, but my friends in AI don\u2019t know a lot about it. What do you think of Docker: Is building containers the state of the art in AI? Are people well-versed in it?", "I am starting to wonder what SageMaker does for me. If I\u2019m doing all this, why not just run my own Kubernetes cluster? It might even be simpler because Kubernetes automatically takes care of the health check for me!", "SageMaker doesn\u2019t work with DockerHub, so once I built the Docker image, I had to push it to Amazon\u2019s own Docker registry \u2014 AWS ECR (Elastic Container Registry). Next, I created a SageMaker model that pulls this Docker image and a SageMaker \u201cendpoint\u201d that uses my model. This required selecting a node type (ml.m4.large) and the cluster size. Finally, I could create my REST endpoint!", "After waiting 10 minutes for my service to start, I was thrilled to see the status change from \u201cCreating\u201d to \u201cInService\u201d with a green checkmark. \u2705 Awesome! I copy-pasted the endpoint URL into my Slackbot configuration, ready to dazzle everyone in the lab. And\u2026 Slack spat out this error:", "Your URL didn't respond with the value of the challenge parameter.", "Time to troubleshoot SageMaker! I had to write a Python script usingboto3(with proper permissions) and make an InvokeEndpointcall to test the endpoint. Using this script to debug for a half hour, I found that the endpoint itself was actually working fine. The real problem is that SageMaker can only be accessed from within an AWS virtual private cluster and is not supposed to accept requests from the outside internet, so Slack couldn\u2019t reach it!", "The solution, according to this blog post, is to \u201csimply\u201d use AWS\u2019 API Gateway service to accept traffic from Slack, route the request to an AWS Lambda function that authenticates the request, and then use Lambda to send the prediction query to SageMaker. What?!? This deserves an architecture diagram:", "That is some insane redirection when all I want to do is make my model accessible from the web! Okay, so\u2026 time to write a Lambda function. I\u2019m always excited for an opportunity to use serverless systems \u2014 it\u2019s been the focus of most of my research after all \u2014 but this one was a little more complicated than I expected.", "Actually, this was way more complicated than I expected. I had to respond to Slack\u2019s \u201cchallenge request (lines 24\u201329), authenticate each request to ward off hackers (lines 31\u201337), and explicitly parse a text field from the input HTTP request (lines 38\u201343) all before I could actually call the SageMaker model (lines 47\u201352). Finally, on line 55, I used the Slack Python API client to add a reaction to the input message.", "There are a few other things worth noting that I\u2019ve skipped over so far:", "Wait, so\u2026 really, what is SageMaker doing for me? I\u2019ve built a Docker container for my model, effectively written a proxy service, manually authenticated each request, and also need to set up a separate REST endpoint. Maybe doing this by hand with EC2 and Kubernetes would\u2019ve been easier after all?", "The last step was to create an API Gateway that routes subscription messages from Slack to my Lambda function. Along the way, I fell into what I imagine are some common traps. For example, I forgot to check the Use Lambda Proxy integrationbox, so API Gateway stripped HTTP headers off each request when forwarding it to Lambda. This led to an authentication failure as Slack embeds its tokens inside the header. I\u2019ve documented all of the (many) steps here so you won\u2019t repeat my mistakes.", "Anyway, this all took another hour to debug, but API Gateway finally generated a real REST endpoint. I pasted the endpoint into my Slackbot\u2019s subscription, and it finally worked! I sent a message to my bot on the Slack workspace, and I got a reaction. \ud83d\ude0e", "Voil\u00e0! Took me 6 hours to get all the pieces together, but it\u2019s finally working! Each request takes a few seconds, which is\u2026 well, not very interactive. Considering the traffic flow shown in the \u201carchitecture diagram\u201d above, it\u2019s not surprising. Most of these services were not optimized for latency.", "All in all, deploying torchMoji on SageMaker was a pain. Worse, after all the effort, each request took more than a second! Not to mention cost \u2014 in addition to keeping the model server running all the time, we\u2019re now paying AWS for each synchronous Lambda invocation. It\u2019s definitely not going to be cheap if all 400+ users on the RISELab Slack start playing around with the bot.", "Given that using SageMaker was no walk in the park, I was pretty discouraged about putting more time into competing services from Microsoft Azure and Google Cloud. But that could be my mistake \u2014 if you\u2019ve had better experiences with those offerings, let me know in the comments. I\u2019d love to learn more!", "Instead, I decided to look into a startup I\u2019d heard about called Algorithmia \u2014 it specializes in model deployment and management, so hopefully it\u2019s easier to use\u2026", "Following these docs, I first created a Git repo linked to Algorithmia and put a slightly modified version of my prediction script from earlier into the repo. The script is pretty similar to the one I used locally \u2014 no need to worry about setting up web servers and handling health checks. I just had to change a couple lines of basic Python to use Algorithmia\u2019s API. Off to a good start!", "The repo also needs a requirements.txt file that contains a list of Python dependencies. This is standard operating procedure for Python projects, so I was glad to see I didn\u2019t need to do anything crazy.", "After committing these files, all I had to do was to publish my model and tag it with a version number (e.g., 0.0.1). And just like that, the torchMoji model was running on Algorithmia\u2019s platform \u2014 way easier than SageMaker!", "Algorithmia\u2019s dashboard has a neat testing feature where I could type in test sentences and get emoji outputs. This is really helpful: I didn\u2019t need another script to invoke the model to make sure everything is working as expected like I did with SageMaker.", "Algorithmia also generated copy-paste code snippets in multiple languages that I could use to invoke my model. The Python version looked like this:", "Things were looking great thus far. But when it came to integrating with Slack, Algorithmia is no better than SageMaker. From these docs:", "In order for your Slack App to connect to Algorithmia, you\u2019ll need an intermediate function: and API endpoint which can accept a GET request from Slack, validate the content, and then POST to one of Algorithmia\u2019s APIs.", "I still needed the Lambda glue code from earlier, which was a pain to write. The good news for me was that I could reuse most of my previous code for the Lambda function. I only needed to replace the SageMaker endpoint invocation with a call to Algorithmia, so \u2014 given that I\u2019d already burned a few hours debugging this the first time around \u2014 doing it again wasn\u2019t all that bad. \ud83d\ude03 The full script is available here.", "Still, what felt weird to me is that Algorithmia is supposed to be a serverless model serving platform. But to integrate with my Slackbot, I had to use another serverless platform (AWS Lambda) to route traffic and perform security checks. The end-to-end latency remained in single-digit seconds, as the requests still had to go through three hops: from Slack to API Gateway, from API Gateway to Lambda, and from Lambda to Algorithmia.", "I can\u2019t help but wonder: What\u2019s the point of putting my model into a box \u2014 be it SageMaker or Algorithmia \u2014 if it remains so painful to connect it with other services like Slack. If \u201cconnecting\u201d means I had to learn about, configure, and pay for two other services, wouldn\u2019t it have been easier if I just put the prediction code into my Lambda function and skipped the special-purpose services entirely? It\u2019s tough for me to believe that this is really the state of the art!", "If you want to reproduce my Slackbot, all the code with detailed instructions is in this repository. I shared this repository with a few PhD students in the RISELab and all of them were able to reproduce and deploy the bot within an hour! However, they didn\u2019t seem to have a super pleasant experience... Here is what they said:", "Why does deploying a model require stitching together multiple services and learning their jargons? If the model can be run locally as simple as invoking a python script, the added complexity to deploy it to the cloud should be minimal.", "\u2014 Zongheng Yang, a fourth-year PhD student working on machine learning for systems.", "Following the instructions to get this simple bot set up was an exercise in blindly being led by an expert through the dark; the sheer number of ways to get something wrong makes diagnosing misconfiguration errors essentially infeasible for a newcomer.", "\u2014 an anonymous third-year PhD student working on systems for machine learning.", "We all know that AI infrastructure and areas like MLOps are super hot right now. It\u2019s all everyone\u2019s talking about. But in reality, there\u2019s a lot of work that needs to be done to meet even the basic needs of online prediction serving. My ambitions here were modest \u2014 a simple model, with limited scalability. Getting that far was annoying, and performance was terrible.", "All that said, I\u2019m sure there are other prediction serving systems out there. We ourselves just built a prediction pipeline DSL on top of a serverless platform we\u2019ve worked on in our lab. If you know of production systems or techniques that better fit the bill here \u2014 or even just want to talk about potential features you think are missing in the services discussed here \u2014 I\u2019d love to hear from you via Twitter or via email.", "Thanks to Vikram Sreekanti, Joseph Gonzalez, and Joe Hellerstein for feedback on early drafts of this post.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Co-Founder & CTO @ Aqueduct, CS PhD @ RISELab, UC Berkeley"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F5d3e59b76d0&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-deep-learning-powered-emoji-slackbot-5d3e59b76d0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-deep-learning-powered-emoji-slackbot-5d3e59b76d0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-deep-learning-powered-emoji-slackbot-5d3e59b76d0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-deep-learning-powered-emoji-slackbot-5d3e59b76d0&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----5d3e59b76d0--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----5d3e59b76d0--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@cgwu0530?source=post_page-----5d3e59b76d0--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@cgwu0530?source=post_page-----5d3e59b76d0--------------------------------", "anchor_text": "Chenggang Wu"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F248495f0734&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-deep-learning-powered-emoji-slackbot-5d3e59b76d0&user=Chenggang+Wu&userId=248495f0734&source=post_page-248495f0734----5d3e59b76d0---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5d3e59b76d0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-deep-learning-powered-emoji-slackbot-5d3e59b76d0&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5d3e59b76d0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-deep-learning-powered-emoji-slackbot-5d3e59b76d0&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@morningbrew?utm_source=medium&utm_medium=referral", "anchor_text": "Morning Brew"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://zapier.com/blog/how-to-build-chat-bot/", "anchor_text": "blog post"}, {"url": "https://github.com/bfelbo/DeepMoji", "anchor_text": "DeepMoji"}, {"url": "https://aws.amazon.com/sagemaker/", "anchor_text": "SageMaker"}, {"url": "https://algorithmia.com/", "anchor_text": "Algorithmia"}, {"url": "https://github.com/cw75/torchMojiBot", "anchor_text": "this repository"}, {"url": "https://medium.com/@vsreekanti/real-time-prediction-serving-simplified-850d9cbaddd4", "anchor_text": "scalable prediction infrastructure"}, {"url": "https://github.com/cw75/torchMojiBot/tree/master/slack", "anchor_text": "here"}, {"url": "https://github.com/huggingface/torchMoji", "anchor_text": "torchMoji"}, {"url": "https://github.com/cw75/torchMoji", "anchor_text": "here"}, {"url": "https://github.com/cw75/torchMoji/blob/master/model/vocabulary.json", "anchor_text": "here"}, {"url": "https://github.com/pallets/flask", "anchor_text": "Flask"}, {"url": "https://ngrok.com/", "anchor_text": "ngrok"}, {"url": "https://www.docker.com/", "anchor_text": "Docker"}, {"url": "https://kubernetes.io/", "anchor_text": "Kubernetes"}, {"url": "https://www.amazonaws.cn/en/elasticloadbalancing/", "anchor_text": "ELB"}, {"url": "https://ssc.io/pdf/modin711s.pdf", "anchor_text": "paper"}, {"url": "https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html", "anchor_text": "here"}, {"url": "https://github.com/cw75/torchMojiBot/blob/master/sagemaker/emojibot-sagemaker.dockerfile", "anchor_text": "here"}, {"url": "https://github.com/cw75/torchMojiBot/blob/master/deploy/sagemaker/emojibot-sagemaker.py", "anchor_text": "here"}, {"url": "https://kubernetes.io/", "anchor_text": "Kubernetes"}, {"url": "https://aws.amazon.com/ecr/", "anchor_text": "ECR"}, {"url": "https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpoint.html", "anchor_text": "InvokeEndpoint"}, {"url": "https://aws.amazon.com/blogs/machine-learning/call-an-amazon-sagemaker-model-endpoint-using-amazon-api-gateway-and-aws-lambda/", "anchor_text": "blog post"}, {"url": "https://aws.amazon.com/api-gateway/", "anchor_text": "API Gateway"}, {"url": "https://aws.amazon.com/lambda/", "anchor_text": "AWS Lambda"}, {"url": "https://docs.aws.amazon.com/lambda/latest/dg/python-package.html", "anchor_text": "here"}, {"url": "https://github.com/cw75/torchMojiBot/tree/master/api-gateway", "anchor_text": "here"}, {"url": "https://slack.com/", "anchor_text": "Slack"}, {"url": "https://algorithmia.com/developers/algorithm-development/source-code-management", "anchor_text": "docs"}, {"url": "https://github.com/cw75/torchMojiBot/blob/master/algorithmia/emojize/src/emojize.py", "anchor_text": "prediction script"}, {"url": "https://algorithmia.com/", "anchor_text": "Algorithmia"}, {"url": "https://algorithmia.com/developers/integrations/slack", "anchor_text": "docs"}, {"url": "https://github.com/cw75/torchMojiBot/blob/master/lambda/algorithmia/lambda_function.py", "anchor_text": "here"}, {"url": "https://algorithmia.com/serverless-ai-layer", "anchor_text": "serverless model serving platform"}, {"url": "https://github.com/cw75/torchMojiBot", "anchor_text": "this"}, {"url": "https://medium.com/@vsreekanti/real-time-prediction-serving-simplified-850d9cbaddd4", "anchor_text": "prediction pipeline DSL"}, {"url": "https://twitter.com/cgwu0530", "anchor_text": "Twitter"}, {"url": "https://www.vikrams.io/", "anchor_text": "Vikram Sreekanti"}, {"url": "https://people.eecs.berkeley.edu/~jegonzal/", "anchor_text": "Joseph Gonzalez"}, {"url": "https://dsf.berkeley.edu/jmh/", "anchor_text": "Joe Hellerstein"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----5d3e59b76d0---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/data-science?source=post_page-----5d3e59b76d0---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/slack?source=post_page-----5d3e59b76d0---------------slack-----------------", "anchor_text": "Slack"}, {"url": "https://medium.com/tag/deep-learning?source=post_page-----5d3e59b76d0---------------deep_learning-----------------", "anchor_text": "Deep Learning"}, {"url": "https://medium.com/tag/editors-pick?source=post_page-----5d3e59b76d0---------------editors_pick-----------------", "anchor_text": "Editors Pick"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5d3e59b76d0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-deep-learning-powered-emoji-slackbot-5d3e59b76d0&user=Chenggang+Wu&userId=248495f0734&source=-----5d3e59b76d0---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5d3e59b76d0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-deep-learning-powered-emoji-slackbot-5d3e59b76d0&user=Chenggang+Wu&userId=248495f0734&source=-----5d3e59b76d0---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5d3e59b76d0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-deep-learning-powered-emoji-slackbot-5d3e59b76d0&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----5d3e59b76d0--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F5d3e59b76d0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-deep-learning-powered-emoji-slackbot-5d3e59b76d0&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----5d3e59b76d0---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----5d3e59b76d0--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----5d3e59b76d0--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----5d3e59b76d0--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----5d3e59b76d0--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----5d3e59b76d0--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----5d3e59b76d0--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----5d3e59b76d0--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----5d3e59b76d0--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@cgwu0530?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@cgwu0530?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Chenggang Wu"}, {"url": "https://medium.com/@cgwu0530/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "22 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F248495f0734&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-deep-learning-powered-emoji-slackbot-5d3e59b76d0&user=Chenggang+Wu&userId=248495f0734&source=post_page-248495f0734--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2F248495f0734%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-deep-learning-powered-emoji-slackbot-5d3e59b76d0&user=Chenggang+Wu&userId=248495f0734&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}