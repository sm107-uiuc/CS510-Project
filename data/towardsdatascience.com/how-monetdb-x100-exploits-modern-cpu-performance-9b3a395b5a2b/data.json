{"url": "https://towardsdatascience.com/how-monetdb-x100-exploits-modern-cpu-performance-9b3a395b5a2b", "time": 1683002901.19041, "path": "towardsdatascience.com/how-monetdb-x100-exploits-modern-cpu-performance-9b3a395b5a2b/", "webpage": {"metadata": {"title": "How MonetDB Exploits Modern CPU Performance | by Dwi Prasetyo Adi Nugroho | Towards Data Science", "h1": "How MonetDB Exploits Modern CPU Performance", "description": "Modern CPUs have undergone significant development. But how does MonetDB exploit this development to maximize its performance?"}, "outgoing_paragraph_urls": [{"url": "https://en.wikipedia.org/wiki/Central_processing_unit#Parallelism", "anchor_text": "Wikipedia page", "paragraph_index": 5}, {"url": "https://scholar.google.com/scholar?q=monetdb&hl=en&btnG=Search&as_sdt=1%2C5&as_sdtp=on", "anchor_text": "google scholar", "paragraph_index": 15}, {"url": "https://www.monetdb.org/", "anchor_text": "homepage", "paragraph_index": 15}, {"url": "https://github.com/MonetDB/MonetDB", "anchor_text": "this Github page", "paragraph_index": 15}, {"url": "http://dpanugroho.github.io", "anchor_text": "dpanugroho.github.io", "paragraph_index": 18}], "all_paragraphs": ["Computer processors have significantly developed in the last three decades. This development involves not only the increasing number of transistors it holds but also the evolution of the architecture. Hence, an application needs to adapt to how the CPU works to maximize its potential. As old as the CPU itself, database systems have been the backbone of the modern industry. But have database communities manage to put CPU capability to the limit?", "Despite the positive CPU development, existing database systems cannot take advantage since they can only achieve low instruction per cycle (IPC) efficiency. They mainly use a volcano query execution model, which is responsible for this inefficiency. The volcano model uses a processing model called \u201ctuple-at-a-time,\u201d which executes a single tuple in a single CPU cycle. Consequently, it introduces interpretation overhead and hinders CPU\u2019s capability to perform parallel execution by doing loop pipelining. An observation in the MySQL database system shows that the actual computation only accounts for 10% of the total execution time [2]. The rest of the 90% is the interpretation overheads, such as creating and looking up into a hash table, getting the nth field of MySQL data, and copying data for processing.", "Having these backgrounds in mind, let\u2019s now dive into how MonetDB deals with these inefficiencies. MonetDB is a column-wise database that tries to exploit maximum CPU capability by removing overheads that present in database systems and using a different record processing model. In general, MonetDB executes multiple records at a time to both enable loop pipelining and cut out too many overheads.", "MonetDB introduces a column-wise data layout called Binary Association Table (BAT). A single BAT array holds all values in a single database column. By doing so, we can now apply operators into this BAT array instead of individually to each data item. Furthermore, having the same operation running on an array of data, the CPU can now apply loop pipelining.", "We talked about the loop pipelining a lot in this post. But what is a loop pipelining? Take a look at the following illustration.", "In an oversimplified definition, we can see a CPU instruction consist of three phases: READ, COMPUTE, and WRITE (check out this Wikipedia page for a detailed explanation on the CPU cycle). As we can see, loop pipelining enable CPU to start execution of the next iteration without needing to wait for the previous iteration to complete. To put into context of data processing, loop pipelining will enable CPU to start reading the next data item while still computing the result for current data. As a result, the whole loop will have lower latency.", "When we use the BAT array, this loop pipelining is possible since we have a notion of an array to loop on. However, it will not be possible if we do the computation tuple-at-a-time since it won\u2019t make sense to loop on a single tuple! In this case, the execution will be done sequentially, where a tuple will need to wait for the previous tuple to be finished before even being executed.", "MonetDB introduces MIL (MonetDB Instruction Language) algebra for its query language. It can be though, as relational algebra in terms of RDBMS. However, as opposed to relational algebra, MIL algebra has no degree of freedom. In MIL algebra, operators have fixed parameters and data layout to process the data. Operators on MIL will map the function of that operator the entire data item in a BAT.", "Up to this point, it looks like the MonetDB implementation has solved all the problems that we pointed out. However, we need to note that MonetDB executes queries by performing full column materialization. That means it will first try to materialize the input in the CPU cache. However, as the size of the data being process keeps rising, the CPU cache will not be able to hold this full column materialization, and the main memory will be used instead. It makes the system now limited by memory bandwidth, and therefore it will not be able to maintain high CPU efficiency that it gains.", "To cope with this, and improved engine called X100 is made for MonetDB. It introduces a balanced approach that avoids tuple-at-a-time processing but managing the materialization so that it does not go over memory bandwidth. This is done by materializing only in terms of vector instead of the whole column. Vectors are slices of the entire column item. The size of the vector should be set so that it fits in the CPU cache. By doing so, the memory bandwidth limit will not hinder the high CPU efficiency implementation.", "To analyze the performance benefit of vectorized query processing, we are going to see experiment results on TPC-H Benchmark executed on MonetDB/X100 to MonetDB/MIL and MySQL.", "The first observation that we can get from the experiment is the ability of MonetDB/X100 to run all primitives in a low number of CPU cycles per tuple. For example, the multiplication primitive only runs on 2.2 cycles per tuple, compared to 49 cycles per tuple on MySQL. Having fewer cycles required in each execution primitives results in a fast overall performance.", "The second observation is regarding the memory benchmark limit. Since MonetDB/X100 only materializes in terms of vector, the data that is going to be processed by primitive are retrieved from the CPU cache, instead of the main memory. This enables MonetDB/X100 to achieve 7.5GB/s bandwidth. On the other side, MonetDB/MIL hits the memory bandwidth limit of only 500MB/s since the primitives need to retrieve data from the main memory. The authors also mention that MonetDB/X100 supposed to operate on cached data, and the implementation of the column-wise vector layout is not meant to optimize memory layout.", "Lastly, the authors point out the impact of vector size to overall performance. The vector size should be relatively small so that it can fit inside the cache. However, if we set it too small, we will lose CPU parallelism and increases interpretation overhead. At the extreme level, setting the vector size to 1 will result in tuple- at-a-time operation. On the other side, the authors also report performance degradation when vector size is too large, i.e., cannot fit in the CPU cache anymore.", "We see how carefully designed database can maximize the potential of modern processors and perform significantly better than the one that does not address this issue. MonetDB exploits the loop pipelining capability by executing the data in a vector-at-a-time manner. Not only increase parallel execution in the CPU, but it also avoids memory bandwidth bottleneck by performing materialization in terms of vector instead of the whole column.", "MonetDB has been a long research topic. If you are interested to learn more about MonetDB, you can check their publication on google scholar. You can also check the homepage to see its current status. It is also an opensource project where you can also contribute. You can visit their mirror repository on this Github page.", "[1] Peter Alexander Boncz et al. 2002. Monet: A next-generation DBMS kernel for query-intensive applications. Universiteit van Amsterdam [Host].", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Engineer | Passionate in Large Scale Data Analytics research such as streaming system, query optimizer, and other related topics. | dpanugroho.github.io"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F9b3a395b5a2b&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-monetdb-x100-exploits-modern-cpu-performance-9b3a395b5a2b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-monetdb-x100-exploits-modern-cpu-performance-9b3a395b5a2b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-monetdb-x100-exploits-modern-cpu-performance-9b3a395b5a2b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-monetdb-x100-exploits-modern-cpu-performance-9b3a395b5a2b&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----9b3a395b5a2b--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9b3a395b5a2b--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@dpanugroho?source=post_page-----9b3a395b5a2b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@dpanugroho?source=post_page-----9b3a395b5a2b--------------------------------", "anchor_text": "Dwi Prasetyo Adi Nugroho"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5d88f06dde58&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-monetdb-x100-exploits-modern-cpu-performance-9b3a395b5a2b&user=Dwi+Prasetyo+Adi+Nugroho&userId=5d88f06dde58&source=post_page-5d88f06dde58----9b3a395b5a2b---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9b3a395b5a2b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-monetdb-x100-exploits-modern-cpu-performance-9b3a395b5a2b&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9b3a395b5a2b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-monetdb-x100-exploits-modern-cpu-performance-9b3a395b5a2b&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@christianw?utm_source=medium&utm_medium=referral", "anchor_text": "Christian Wiediger"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_2/sdsoc_doc/topics/calling-coding-guidelines/concept_pipelining_loop_unrolling.html", "anchor_text": "https://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_2/sdsoc_doc/topics/calling-coding-guidelines/concept_pipelining_loop_unrolling.html"}, {"url": "https://en.wikipedia.org/wiki/Central_processing_unit#Parallelism", "anchor_text": "Wikipedia page"}, {"url": "https://semiengineering.com/enabling-higher-system-performance-with-nvdimm-n/", "anchor_text": "https://semiengineering.com/enabling-higher-system-performance-with-nvdimm-n/"}, {"url": "https://scholar.google.com/scholar?q=monetdb&hl=en&btnG=Search&as_sdt=1%2C5&as_sdtp=on", "anchor_text": "google scholar"}, {"url": "https://www.monetdb.org/", "anchor_text": "homepage"}, {"url": "https://github.com/MonetDB/MonetDB", "anchor_text": "this Github page"}, {"url": "https://medium.com/tag/programming?source=post_page-----9b3a395b5a2b---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/database?source=post_page-----9b3a395b5a2b---------------database-----------------", "anchor_text": "Database"}, {"url": "https://medium.com/tag/data?source=post_page-----9b3a395b5a2b---------------data-----------------", "anchor_text": "Data"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9b3a395b5a2b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-monetdb-x100-exploits-modern-cpu-performance-9b3a395b5a2b&user=Dwi+Prasetyo+Adi+Nugroho&userId=5d88f06dde58&source=-----9b3a395b5a2b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9b3a395b5a2b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-monetdb-x100-exploits-modern-cpu-performance-9b3a395b5a2b&user=Dwi+Prasetyo+Adi+Nugroho&userId=5d88f06dde58&source=-----9b3a395b5a2b---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9b3a395b5a2b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-monetdb-x100-exploits-modern-cpu-performance-9b3a395b5a2b&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9b3a395b5a2b--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F9b3a395b5a2b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-monetdb-x100-exploits-modern-cpu-performance-9b3a395b5a2b&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----9b3a395b5a2b---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----9b3a395b5a2b--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----9b3a395b5a2b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----9b3a395b5a2b--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----9b3a395b5a2b--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----9b3a395b5a2b--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----9b3a395b5a2b--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----9b3a395b5a2b--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----9b3a395b5a2b--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@dpanugroho?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@dpanugroho?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Dwi Prasetyo Adi Nugroho"}, {"url": "https://medium.com/@dpanugroho/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "31 Followers"}, {"url": "http://dpanugroho.github.io", "anchor_text": "dpanugroho.github.io"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5d88f06dde58&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-monetdb-x100-exploits-modern-cpu-performance-9b3a395b5a2b&user=Dwi+Prasetyo+Adi+Nugroho&userId=5d88f06dde58&source=post_page-5d88f06dde58--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F1524abc18857&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-monetdb-x100-exploits-modern-cpu-performance-9b3a395b5a2b&newsletterV3=5d88f06dde58&newsletterV3Id=1524abc18857&user=Dwi+Prasetyo+Adi+Nugroho&userId=5d88f06dde58&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}