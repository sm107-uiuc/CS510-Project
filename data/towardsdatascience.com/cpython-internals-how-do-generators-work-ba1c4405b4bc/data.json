{"url": "https://towardsdatascience.com/cpython-internals-how-do-generators-work-ba1c4405b4bc", "time": 1683006657.962794, "path": "towardsdatascience.com/cpython-internals-how-do-generators-work-ba1c4405b4bc/", "webpage": {"metadata": {"title": "How do Python Generators Work? | Towards Data Science", "h1": "How do Python Generators Work?", "description": "The article provides an in-depth understanding of Python's generators, and how they operate from the inside. CPython implementation has never been easier."}, "outgoing_paragraph_urls": [{"url": "https://www.python.org/dev/peps/pep-0255/", "anchor_text": "Python 2.2", "paragraph_index": 1}, {"url": "https://github.com/python/cpython/blob/1b55b65638254aa78b005fbf0b71fb02499f1852/Include/cpython/frameobject.h#L17", "anchor_text": "code", "paragraph_index": 7}, {"url": "https://docs.python.org/3/library/inspect.html#types-and-members", "anchor_text": "documentation", "paragraph_index": 7}, {"url": "https://github.com/python/cpython/blob/6d86a2331e6b64a2ae80c1a21f81baa5a71ac594/Python/ceval.c#L4063", "anchor_text": "created", "paragraph_index": 8}, {"url": "https://github.com/python/cpython/blob/6d86a2331e6b64a2ae80c1a21f81baa5a71ac594/Python/ceval.c#L4085", "anchor_text": "assigned", "paragraph_index": 9}, {"url": "https://github.com/python/cpython/blob/master/Objects/frameobject.c#L880", "anchor_text": "is set", "paragraph_index": 10}, {"url": "https://github.com/python/cpython/blob/25104949a5a60ff86c10691e184ce2ecb500159b/Python/ceval.c#L880", "anchor_text": "PyEval_EvalFrameEx", "paragraph_index": 12}, {"url": "http://www.pythontutor.com/live.html#code=def%20foo%28a%29%3A%0A%20%20%20%20result%20%3D%20bar%28a%29%0A%20%20%20%20return%20result%0A%0Adef%20bar%28a%29%3A%0A%20%20%20%20a%20%2B%3D%201%0A%20%20%20%20return%20a%0A%0Afoo%281%29&cumulative=false&curInstr=8&heapPrimitives=nevernest&mode=display&origin=opt-live.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false", "anchor_text": "interactive example", "paragraph_index": 16}, {"url": "https://github.com/python/cpython/blob/master/Objects/genobject.c#L223", "anchor_text": "frame is evaluated", "paragraph_index": 20}, {"url": "https://github.com/python/cpython/blob/25104949a5a60ff86c10691e184ce2ecb500159b/Python/ceval.c#L880", "anchor_text": "PyEval_EvalFrameEx", "paragraph_index": 20}, {"url": "https://github.com/python/cpython/blob/master/Objects/genobject.c#L236", "anchor_text": "gets thrown", "paragraph_index": 27}, {"url": "https://github.com/python/cpython/blob/master/Objects/genobject.c#L274", "anchor_text": "is then set", "paragraph_index": 27}, {"url": "https://github.com/python/cpython/blob/25104949a5a60ff86c10691e184ce2ecb500159b/Python/ceval.c#L2191", "anchor_text": "reaches", "paragraph_index": 30}, {"url": "https://docs.python.org/3/reference/expressions.html#generator.send", "anchor_text": ".send()", "paragraph_index": 34}, {"url": "https://docs.python.org/3/reference/expressions.html#generator.throw", "anchor_text": ".throw()", "paragraph_index": 34}, {"url": "https://github.com/python/cpython/blob/25104949a5a60ff86c10691e184ce2ecb500159b/Python/ceval.c#L1315", "anchor_text": "throwflag", "paragraph_index": 37}, {"url": "https://www.python.org/dev/peps/pep-0380", "anchor_text": "delegated", "paragraph_index": 38}], "all_paragraphs": ["In this article, I\u2019ll attempt to provide an in-depth understanding of Python generators, and how they operate from the inside. It will include the how and why. Sections will be self-contained, and you are welcome to skip at your will. Without further ado, let us begin our journey. \u26f5\ufe0f", "Added since Python 2.2, Generators are unique functions that can be paused, resumed and iterated over. Let\u2019s take a look over an example:", "By defining a function that contains the yield keyword, the function is marked as a generator. We then run the generator in the following order:", "In order to understand these three simple steps, we first need to start from the very basics of how a function in Python runs.", "Running a function involves two main steps: Initialization, and Evaluation.", "Under the hood, CPython runs a function inside a frame object.", "A frame object, sometimes called a stack-frame, consists of the following fields:", "A list of all frame fields can be seen in the code while a shorter list can be seen in the documentation.", "When we initialize a function, a frame is created. In pseudo-code:", "The arguments we passed to the function are then assigned inside the frame:", "The execution point of the frame, is set to the first line of code in the function:", "At this point our function starts running.", "Almost the entire Python interpreter can be summarized into one C-level function: PyEval_EvalFrameEx.", "This function is the interpreter loop. Consisting of 3k lines of code, its job is to evaluate a frame, or in other words, run it. Every function in Python, every bytecode or opcode that the interpreter runs, goes through that function.", "During \u201cPyEval\u201d, Python operates on the frame\u2019s unique value-stack. This bit of information will be crucial later on.", "In summary, when you enter a function, and run it, the interpreter creates a frame, and enters the interpreter loop.", "A site called PythonTutor has a very nice interactive example of this mechanism.", "Much like functions, running a generator involves the initialization step, and the evaluation step.", "At this step we are creating the generator object. The generator object consists of the frame object and the code object. If you\u2019re wondering, yes, the frame object also contains the code object inside it. In pseudo-code:", "At this point, our generator g is ready to run.", "Every time we call next(g), the frame is evaluated using the same PyEval_EvalFrameEx.", "The difference is, when running a generator, we can reach the yield keyword, at which point the frame evaluation stops, and the generator \u201cpauses\u201d.", "A pointer in the frame is saved, marking our current stack position, in order to know exactly what was the generator state upon stopping.", "It is important to remember, that unlike functions, when the evaluation stops the frame is not destroyed as it\u2019s still attached to the generator object. This will allow us to load it later on.", "PyEval returns and our calling function resumes.", "When we advance the generator once more, the frame is loaded from gi_frame, and PyEval is called again on the same frame. It checks where we stopped, goes to our execution pointer, and uses the value-stack stored on the frame.", "Since we\u2019re using the same stack, and the frame also contains all of the local variables, we can continue from the exact same spot, as if the function never stopped.", "When we reach the end of the generator, or return statement, StopIteration gets thrown, and the frame is deleted. gi_frame is then set to None.", "Now that we know how a generator internally pauses and resumes, let\u2019s dive into a few more features that make generators truly remarkable.", "Generators can yield values, allowing them to be iterated over and return results in a lazy manner. For example:", "Internally, yielding values is much like getting the result of a function. When PyEval reaches the YIELD_VALUE opcode, it pops the top value of the stack, and returns it. Quite simple, isn\u2019t it?", "Generators can use the return keyword to return a result:", "As you can see, the return statement sets the StopIteration exception. Exceptions can have arguments, and here, the first argument sent to the StopIteration exception is the return value.", "The return value can be retrieved by catching the exception, and getting its first argument:", "We can also communicate with generators using .send() and .throw():", "As you can see, we sent numbers to the generator using .send(), and they were the return value of the yield keyword.", "Internally, .send() works by putting the value at the top of the generator\u2019s stack. It then evaluates the frame, and pops the top value of the stack, putting it in our local variable.", "Similarly, .throw() works by sending a throwflag to PyEval stating an exception occurred. It then handles the exception normally. If the generator did not catch it, the exception is propagated outwards, just like a normal function.", "Generators can be nested (or \u201cdelegated\u201d) using the yield from keyword:", "As you can see, using yield from creates a way to communicate between the innermost generator, all the way out.", "Internally, it works by using the gi_yieldfrom field of the generator object. It points to the inner generator, and when you use .send() it will go all the way in.", "When the inner generator returns, it goes up the chain, and sets yield from's return value accordingly.", "In this article, I provided some insight into the inner workings of the CPython generator implementation. While the article is not beginner material, it only scratches the surface of this topic, and there is much more to understanding how the interpreter works. The full implementation is of course open source, so you are welcome to explore at your will. Enjoy \ud83d\ude09", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fba1c4405b4bc&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcpython-internals-how-do-generators-work-ba1c4405b4bc&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcpython-internals-how-do-generators-work-ba1c4405b4bc&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcpython-internals-how-do-generators-work-ba1c4405b4bc&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcpython-internals-how-do-generators-work-ba1c4405b4bc&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----ba1c4405b4bc--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----ba1c4405b4bc--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@bharel?source=post_page-----ba1c4405b4bc--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@bharel?source=post_page-----ba1c4405b4bc--------------------------------", "anchor_text": "Bar Harel"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5aec31026d4b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcpython-internals-how-do-generators-work-ba1c4405b4bc&user=Bar+Harel&userId=5aec31026d4b&source=post_page-5aec31026d4b----ba1c4405b4bc---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fba1c4405b4bc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcpython-internals-how-do-generators-work-ba1c4405b4bc&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fba1c4405b4bc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcpython-internals-how-do-generators-work-ba1c4405b4bc&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@cdr6934?utm_source=medium&utm_medium=referral", "anchor_text": "Chris Ried"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://www.python.org/dev/peps/pep-0255/", "anchor_text": "Python 2.2"}, {"url": "https://unsplash.com/@tateisimikito?utm_source=medium&utm_medium=referral", "anchor_text": "Jukan Tateisi"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://github.com/python/cpython/blob/1b55b65638254aa78b005fbf0b71fb02499f1852/Include/cpython/frameobject.h#L17", "anchor_text": "code"}, {"url": "https://docs.python.org/3/library/inspect.html#types-and-members", "anchor_text": "documentation"}, {"url": "https://github.com/python/cpython/blob/6d86a2331e6b64a2ae80c1a21f81baa5a71ac594/Python/ceval.c#L4063", "anchor_text": "created"}, {"url": "https://github.com/python/cpython/blob/6d86a2331e6b64a2ae80c1a21f81baa5a71ac594/Python/ceval.c#L4085", "anchor_text": "assigned"}, {"url": "https://github.com/python/cpython/blob/master/Objects/frameobject.c#L880", "anchor_text": "is set"}, {"url": "https://github.com/python/cpython/blob/25104949a5a60ff86c10691e184ce2ecb500159b/Python/ceval.c#L880", "anchor_text": "PyEval_EvalFrameEx"}, {"url": "http://www.pythontutor.com/live.html#code=def%20foo%28a%29%3A%0A%20%20%20%20result%20%3D%20bar%28a%29%0A%20%20%20%20return%20result%0A%0Adef%20bar%28a%29%3A%0A%20%20%20%20a%20%2B%3D%201%0A%20%20%20%20return%20a%0A%0Afoo%281%29&cumulative=false&curInstr=8&heapPrimitives=nevernest&mode=display&origin=opt-live.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false", "anchor_text": "interactive example"}, {"url": "https://github.com/python/cpython/blob/master/Objects/genobject.c#L223", "anchor_text": "frame is evaluated"}, {"url": "https://github.com/python/cpython/blob/25104949a5a60ff86c10691e184ce2ecb500159b/Python/ceval.c#L880", "anchor_text": "PyEval_EvalFrameEx"}, {"url": "https://github.com/python/cpython/blob/master/Objects/genobject.c#L236", "anchor_text": "gets thrown"}, {"url": "https://github.com/python/cpython/blob/master/Objects/genobject.c#L274", "anchor_text": "is then set"}, {"url": "https://unsplash.com/@rocinante_11?utm_source=medium&utm_medium=referral", "anchor_text": "Mick Haupt"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://github.com/python/cpython/blob/25104949a5a60ff86c10691e184ce2ecb500159b/Python/ceval.c#L2191", "anchor_text": "reaches"}, {"url": "https://docs.python.org/3/reference/expressions.html#generator.send", "anchor_text": ".send()"}, {"url": "https://docs.python.org/3/reference/expressions.html#generator.throw", "anchor_text": ".throw()"}, {"url": "https://github.com/python/cpython/blob/25104949a5a60ff86c10691e184ce2ecb500159b/Python/ceval.c#L1315", "anchor_text": "throwflag"}, {"url": "https://www.python.org/dev/peps/pep-0380", "anchor_text": "delegated"}, {"url": "https://medium.com/tag/python?source=post_page-----ba1c4405b4bc---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/cpython?source=post_page-----ba1c4405b4bc---------------cpython-----------------", "anchor_text": "Cpython"}, {"url": "https://medium.com/tag/python-interpreter?source=post_page-----ba1c4405b4bc---------------python_interpreter-----------------", "anchor_text": "Python Interpreter"}, {"url": "https://medium.com/tag/python-generators?source=post_page-----ba1c4405b4bc---------------python_generators-----------------", "anchor_text": "Python Generators"}, {"url": "https://medium.com/tag/programming?source=post_page-----ba1c4405b4bc---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://creativecommons.org/licenses/by-sa/4.0/", "anchor_text": "Some rights reserved"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fba1c4405b4bc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcpython-internals-how-do-generators-work-ba1c4405b4bc&user=Bar+Harel&userId=5aec31026d4b&source=-----ba1c4405b4bc---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fba1c4405b4bc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcpython-internals-how-do-generators-work-ba1c4405b4bc&user=Bar+Harel&userId=5aec31026d4b&source=-----ba1c4405b4bc---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fba1c4405b4bc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcpython-internals-how-do-generators-work-ba1c4405b4bc&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----ba1c4405b4bc--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fba1c4405b4bc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcpython-internals-how-do-generators-work-ba1c4405b4bc&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----ba1c4405b4bc---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----ba1c4405b4bc--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----ba1c4405b4bc--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----ba1c4405b4bc--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----ba1c4405b4bc--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----ba1c4405b4bc--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----ba1c4405b4bc--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----ba1c4405b4bc--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----ba1c4405b4bc--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@bharel?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@bharel?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Bar Harel"}, {"url": "https://medium.com/@bharel/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "35 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5aec31026d4b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcpython-internals-how-do-generators-work-ba1c4405b4bc&user=Bar+Harel&userId=5aec31026d4b&source=post_page-5aec31026d4b--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fc1da66559b99&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcpython-internals-how-do-generators-work-ba1c4405b4bc&newsletterV3=5aec31026d4b&newsletterV3Id=c1da66559b99&user=Bar+Harel&userId=5aec31026d4b&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}