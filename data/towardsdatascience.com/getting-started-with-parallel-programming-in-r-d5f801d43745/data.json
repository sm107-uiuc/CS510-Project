{"url": "https://towardsdatascience.com/getting-started-with-parallel-programming-in-r-d5f801d43745", "time": 1683005379.2223518, "path": "towardsdatascience.com/getting-started-with-parallel-programming-in-r-d5f801d43745/", "webpage": {"metadata": {"title": "Getting Started With Parallel Programming In R | by Jens Moll-Elsborg | Towards Data Science", "h1": "Getting Started With Parallel Programming In R", "description": "Although many great sources for parallel computing in R exist, few explain the concepts in such a basic way that anyone can get started. Due to the high-level nature of R and the strong open source\u2026"}, "outgoing_paragraph_urls": [], "all_paragraphs": ["Although many great sources for parallel computing in R exist, few explain the concepts in such a basic way that anyone can get started. Due to the high-level nature of R and the strong open source developer community, it is remarkably simple to parallelise both basic and more complex tasks. If you are familiar with the apply family of functions (functions that apply functions over the index of an array or list), parallelisation can be accomplished with just three additional lines of code! In this article, we will start out with a parallel version of the \u201capply\u201d functions, expand to a more flexible approach and lastly go through a real-world example from financial optimisation.", "Let\u2019s get to it. Say we have a list containing four large vectors. For each of the four large vectors, we want to calculate the mean. Below, the calculation of mean is implemented using a conventional lapply approach:", "This calculation took 18.33 seconds. Over 18 seconds to calculate four simple averages? We do not have time for that. And as it turns out, we do not need to. The four calculations being performed above, are completely independent. I.e. they do not depend on each other. The mean of item 1 is by no means (pun intended) dependent on the mean of item 2. By default, most functions in R run on a single processing core. With the multi-core processors in most systems today, the potential for reduced run time by simply dividing tasks onto multiple cores is very significant. The library parallel helps us achieve that. Below, the same computation is implemented using the multi-core equivalent of lapply (parLapply) from the parallel library:", "This calculation took 4.99 seconds. By adding three lines of code, the computation time has been reduced by almost 75%! This is the benefit of modern multi-core CPUs. I use a quad core CPU and running four calculations on four cores instead of one, makes it four times faster (well, a little bit less for computer science reasons I am not wise enough to explain). This is all you need to get started with parallel computing in R. If all you need are the apply functions, go get started on your own. Otherwise, keep reading and we will go more in-depth with a method that offers a little more flexibility.", "Would you prefer to parallelise a conventional loop rather than an apply function? Then the foreach library is your solution. The foreach function works in a way much like a conventional loop, but does in addition to the index, need information about how to structure the output and which libraries should be accessible in the multi-core loop. As our calculation of means is performed using base R functions, it is not required to pass any packages to foreach. Again, the calculation of mean is implemented:", "At 5.03 seconds, the computation time is not significantly different to that of the parLapply implementation. What is important here, is the use of the foreach function from the library of the same name. It has similar functionality to that of a for loop, but performs the iterations on multiple cores simultaneously. This means that no dependence between the iterations can exist. Here two inputs are passed to the function; the index as with a conventional loop and additionally how the output should be combined. rbind binds the output as rows. foreach provides a lot of flexibility in that you can accomplish almost the same as with a conventional loop \u2014 given no dependence between the results of each iteration exists.", "Now let\u2019s try with a more realistic problem. It is probably not often one has a list of four vectors and wants to compute the mean of each. In this section, I want to show that what you just learned is useful outside the computation of means. Specifically, in my own field of computational finance. In computational finance it is often required to simulate performance by running a sizeable optimization algorithm 10, 100 or 1000 times. And with the right simplifications, this problem is easy to make run in parallel.", "Portfolio optimization is the art of finding the portfolio with the maximum expected return given a maximum tolerable amount of risk or vice versa. The expected return is usually given as an average historical return and risk as the standard deviation (or a similar measure) of the historical returns. It is a flawed art because it assumes the future to be like the past. A wise man (Soeren Kierkegaard) once said that life can only be understood backwards, but must be lived forwards. This is unfortunately also true in quantitative finance.", "What portfolio optimization cannot do is tell you how much risk you should take. If you are young and saving for retirement, you should probably take on a good amount of risk as you do not plan to withdraw the money soon and risky investments achieve better returns in the long term. If you are saving up to buy a house next year, less risk is the way to go. Both the risky and the less risky portfolio have in common that they should be optimal trade-offs. You want to get as much return as possible for a given amount of risk. All these optimal portfolios can be visualised in a chart called an \u201cefficient frontier\u201d, which is what we will be constructing in this third and final section.", "Firstly, it is necessary to load the libraries for both parallelisation and financial optimisation:", "You are already familiar with the first three libraries. The remaining five are libraries specific to financial mathematics and optimisation:", "From the PerformanceAnalytics library, a sample data set containing financial returns for 13 instruments can be loaded:", "We choose to use the last ten years of return data for portfolio optimization and thereby assume that the immediate future will be like the last ten years. For the portfolio, we wish to go with a long only (invest positive amounts), fully invested (invest the entire budget) portfolio that minimises risk. The risk measure that is minimised is ETL (Expected Tail Loss/Conditional Value at Risk/Exected Shortfall) \u2014 a measure of risk with desirable financial properties. If you are unfamiliar with this measure, just assume it equivalent to the standard deviation of returns. If the value of the portfolio fluctuates a lot, the risk is large. The code below creates the portfolio object to be optimised:", "Now, to calculate the efficient frontier, it is necessary to know the maximum expected return and the minimum risk a portfolio built from the given universe of instruments can achieve:", "The maximum expected return is easy to find, it is just the portfolio consisting of the instrument with the largest average return in the lookback period. Because of diversification effects, the portfolio that minimises risk is a little more complex. We find the portfolio by solving the optimisation problem without specifying a return target and calculate the expected return of that portfolio. Lastly, a vector of 500 equispaced return targets between minimum and maximum are defined.", "For this multi-core optimisation, foreach will again be used. The calculation is however a little more complex and therefore it is beneficial to define what goes in the multi-core loop as a function. This makes it simple to specify formatting of the output etc. The function is defined as below:", "The optimisation function adds the target return constraint to our portfolio, determines the optimal portfolio and returns instrument weights as well as risk in the form of a vector. This is implemented in the foreachloop as it was done previously:", "The foreach function takes as input the index to loop over, how to combine the output and the libraries referenced in the loop. With these three inputs defined, it is just to insert the optimisation function and the 500 optimisation runs finish in 1.91 seconds. One useful feature of foreach is that it can be modified to run on a single core by changing %dopar% to %do%. An excellent feature if you have a pushy boss and need an excuse to go get a coffee (or if you want to benchmark the computation time against single core). On a single core, the 500 optimisation runs finish in 5.05 seconds \u2014 this time, the parallelisation doe not quite give us a 75% reduction in run time. This is due to the time it takes to load the libraries onto all four cores. The resulting efficient frontier looks as follows:", "The best return per unit of risk is probably around 3% ETL, but which portfolio to choose is up to you. All portfolios along the frontier give the optimal return for its amount of risk and could thus be chosen by a rational investor.", "I hope this article will help you speed up your R scripts by enabling you to make them run in parallel! With the development in CPU performance going towards more cores rather than higher frequencies, it would be a waste not to exploit parallelisation. In R, your computations can become multiple times faster by adding just a few lines of code in the right places.", "The code in this article was run on a Windows system. For Linux or Mac, look into replacing parLapply with mclapply. More modifications will likely be needed.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "MSc in data science and specialised IT consultant. Used to work in quantitative finance. I'm pretty good at programming in R and making coffee."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fd5f801d43745&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-parallel-programming-in-r-d5f801d43745&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-parallel-programming-in-r-d5f801d43745&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-parallel-programming-in-r-d5f801d43745&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-parallel-programming-in-r-d5f801d43745&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----d5f801d43745--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----d5f801d43745--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@jens1994?source=post_page-----d5f801d43745--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@jens1994?source=post_page-----d5f801d43745--------------------------------", "anchor_text": "Jens Moll-Elsborg"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd3b5cbdb80d3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-parallel-programming-in-r-d5f801d43745&user=Jens+Moll-Elsborg&userId=d3b5cbdb80d3&source=post_page-d3b5cbdb80d3----d5f801d43745---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd5f801d43745&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-parallel-programming-in-r-d5f801d43745&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd5f801d43745&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-parallel-programming-in-r-d5f801d43745&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://pixabay.com/photos/highway-night-photograph-lights-393492/", "anchor_text": "Pixabay"}, {"url": "https://cran.r-project.org/web/packages/PortfolioAnalytics/vignettes/portfolio_vignette.pdf", "anchor_text": "Introduction to PortfolioAnalytics"}, {"url": "https://nceas.github.io/oss-lessons/parallel-computing-in-r/parallel-computing-in-r.html", "anchor_text": "Quick Intro to Parallel Computing in R"}, {"url": "https://medium.com/tag/r?source=post_page-----d5f801d43745---------------r-----------------", "anchor_text": "R"}, {"url": "https://medium.com/tag/hpc?source=post_page-----d5f801d43745---------------hpc-----------------", "anchor_text": "Hpc"}, {"url": "https://medium.com/tag/data-science?source=post_page-----d5f801d43745---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/parallel-computing?source=post_page-----d5f801d43745---------------parallel_computing-----------------", "anchor_text": "Parallel Computing"}, {"url": "https://medium.com/tag/portfolio-optimisation?source=post_page-----d5f801d43745---------------portfolio_optimisation-----------------", "anchor_text": "Portfolio Optimisation"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd5f801d43745&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-parallel-programming-in-r-d5f801d43745&user=Jens+Moll-Elsborg&userId=d3b5cbdb80d3&source=-----d5f801d43745---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd5f801d43745&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-parallel-programming-in-r-d5f801d43745&user=Jens+Moll-Elsborg&userId=d3b5cbdb80d3&source=-----d5f801d43745---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd5f801d43745&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-parallel-programming-in-r-d5f801d43745&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----d5f801d43745--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fd5f801d43745&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-parallel-programming-in-r-d5f801d43745&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----d5f801d43745---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----d5f801d43745--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----d5f801d43745--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----d5f801d43745--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----d5f801d43745--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----d5f801d43745--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----d5f801d43745--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----d5f801d43745--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----d5f801d43745--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@jens1994?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@jens1994?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Jens Moll-Elsborg"}, {"url": "https://medium.com/@jens1994/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "16 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd3b5cbdb80d3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-parallel-programming-in-r-d5f801d43745&user=Jens+Moll-Elsborg&userId=d3b5cbdb80d3&source=post_page-d3b5cbdb80d3--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2Fd3b5cbdb80d3%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-parallel-programming-in-r-d5f801d43745&user=Jens+Moll-Elsborg&userId=d3b5cbdb80d3&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}