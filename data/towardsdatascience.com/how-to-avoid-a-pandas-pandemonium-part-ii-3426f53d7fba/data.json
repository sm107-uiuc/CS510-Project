{"url": "https://towardsdatascience.com/how-to-avoid-a-pandas-pandemonium-part-ii-3426f53d7fba", "time": 1683016517.435887, "path": "towardsdatascience.com/how-to-avoid-a-pandas-pandemonium-part-ii-3426f53d7fba/", "webpage": {"metadata": {"title": "How to Avoid a Pandas Pandemonium, Part II | by Pamela Wu | Towards Data Science", "h1": "How to Avoid a Pandas Pandemonium, Part II", "description": "Like with any library, the best way to optimize your code is to understand what\u2019s going on underneath the syntax. In Part II, we\u2019re working on speeding up your runtime and lowering your memory footprint."}, "outgoing_paragraph_urls": [{"url": "https://medium.com/@protagonistwu/how-to-avoid-a-pandas-pandemonium-e1bed456530", "anchor_text": "Part I", "paragraph_index": 0}, {"url": "https://github.com/pambot/notebooks/blob/master/pandas-pandemonium.ipynb", "anchor_text": "Jupyter notebook with the whole lesson", "paragraph_index": 1}, {"url": "https://stackoverflow.com/questions/4913349/haversine-formula-in-python-bearing-and-distance-between-two-gps-points", "anchor_text": "StackOverflow", "paragraph_index": 4}, {"url": "http://numba.pydata.org/numba-doc/0.15.1/examples.html", "anchor_text": "Numba docs", "paragraph_index": 13}, {"url": "https://medium.com/@protagonistwu/how-to-avoid-a-pandas-pandemonium-e1bed456530", "anchor_text": "Part I: Writing good code and spotting silent failures.", "paragraph_index": 31}], "all_paragraphs": ["In Part I, we went over writing clean code and spotting common silent failures. In Part II, we\u2019re working on speeding up your runtime and lowering your memory footprint.", "I also made a Jupyter notebook with the whole lesson, both parts included.", "This is some code setup from the previous part, but I\u2019m including it here so that this part can stand on its own.", "Now that you have great coding habits, it\u2019s time to try to up the performance. There\u2019s a range of things you can use, from vectorization to just-in-time compilation to get your code running faster. To measure bottlenecks and quantify performance gains, let\u2019s introduce timeit, a nifty Jupyter notebook tool for performance measurement. All you need to know is that putting %timeit before a single line of code will measure the runtime of that line, while putting %%timeit in a code block will measure the runtime for the whole block.", "For this example, I chose the haversine function because it\u2019s a great example of a function that looks kind of complicated but is actually quite amenable to optimization. I found this example function on StackOverflow.", "You\u2019ve probably known that Pandas is built off of Numpy to take advantage of optimizations only offered by its underlying C code while keeping its accessible Python interface. However, like anything with a foot in two worlds, you need to know where the borders are to take proper advantage of its dual nature. Depending on how you iterate through a DataFrame, you could either be taking full advantage of or totally disregarding those optimizations.", "If you are completely new to Pandas and are just thinking of DataFrames as a wrapper for nested Python lists, then your first instinct may be to iterate through rows one at a time, such as by using df.iterrows().", "740 ms per loop is 3/4 of a second and can really add up. 100,000 rows will end up taking you 20 hours.", "There\u2019s a somewhat optimized way with the df.apply() method, which works on both DataFrame and Series objects. You define a custom function and send it through, and it will try to infer faster ways of processing the DataFrame columns faster in some cases.", "This is an improvement, but it\u2019s not amazing. What you need to do is use vectorization, which to put in absolutely simplistic terms, is to feed into a Numpy-compatible function a whole Series of values that would normally take one value at a time so that the C code is free to divide up the vector internally and do parallel processing. Numpy functions can usually take a single value, a vector, or a matrix. If the internal processing can act on both a single value or a vector of values at every step, you can use vectorization out of the box.", "That\u2019s about a 100X speedup \u2014 20 hours has shrunk down to about 4 minutes. Note that I haven\u2019t changed the original function in any way. If you go look at the code, you can trace for yourself how the values can be both single values or a Series.", "Like with indexing, Pandas is flexible about how you want to go through the values of each row. The following are some rules of thumb:", "What if you can\u2019t vectorize? Does this mean you\u2019re stuck with df.apply()? Not necessarily - if your code can be expressed as a combination of pure Python and Numpy arrays, you should give Numba a try and see if your code can be sped up for you. Writing Numba is nothing like writing Cython, which is a lot like writing a whole new programming language if you just know Python. Again, as long as your code can be expressed in pure Python and Numpy, it's literally just putting a couple of decorators on top of the existing functions.", "This example is based on some functions that calculate if a given complex number is part of the Mandlebrot set and visualizes the resulting fractal from trying every pixel coordinate. It was taken from the Numba docs.", "Here are the exact same functions but with the Numba decorators on top. I had to make the input data very, very small because timeit runs many iterations to measure the speed.", "That\u2019s 18X the speed for about 5 seconds of typing. If your function requires some intricate for loops and conditions mixed together, it\u2019s still worth taking a look to see if you can apply some Numba magic.", "In case you were curious, this is what the create_fractal function looks like when you apply it to a real input of all zeroes:", "If you\u2019ve used Pandas for a while, you\u2019ve probably had a medium-large DataFrame crash your Python process at some point. What\u2019s puzzling is when the DataFrame doesn\u2019t really seem that large, or maybe you remember processing something even bigger last week on the same laptop, but that one didn\u2019t crash. What gives?", "The biggest offenders of memory problems in Pandas are probably:", "Garbage collection is the process by which Python frees up memory by releasing memory that is no longer useful to the program. You can release the objects referenced by memory by removing the reference to that object. This flags the formerly referenced object for memory release.", "The best way to let garbage collection help you manage memory is to wrap whatever you can into functions. Variables declared in functions are only scoped to the function, so when the function is finished running, they get discarded. On the other hand, global variables (like large_copy) are kept around until the Python process ends (i.e. the notebook kernel is shut down). Even if you del a variable, it just decreases the reference by 1, but if the reference count isn't 0, the object referenced isn't actually deleted. That's why global variables can screw up what you think your memory is holding onto.", "Just for fun, you can peek into what a variable\u2019s reference count is by using sys.getrefcount(var_name).", "At this point, del won\u2019t be able to garbage collect it, there are too many references in the global scope.", "It\u2019s those pesky object dtypes again! Not surprisingly, telling Pandas that you need to be able to store literally anything at any time somewhere means that it will pre-allocate a huge amount of initial memory for you for the thing you're storing. This is fine if you're storing something complex, but if you're storing something that could easily be represented more simply, you might want to see if you can change the dtype to something better for your situation.", "It\u2019s actually easier than you may think to inspect how much memory your DataFrames are occupying. It\u2019s already built into the DataFrame object.", "A common practice when conserving memory is downcasting. For example, if you know your integers don\u2019t need 64-bits, cast them down to 32-bits. But, as we\u2019ll see, not all downcasting is equally impactful.", "A 3% reduction isn\u2019t really remarkable. If you have string columns and they\u2019re being stored as an object type, they\u2019ll always out-shadow floats and integers for memory gluttony.", "All str types are stored as object in Pandas because they can be any length. You can downcast string columns to a fixed-length str type. For example, this one limits to 10 characters:", "An 18% reduction isn\u2019t bad, but is there more we can do? You happen to know that there are only supposed to be 7 days of the week at most in day_of_week. There\u2019s a category type that can take advantage of columns that are composed of a small set of repeating elements.", "That\u2019s a 59% reduction, just from one column alone!", "I\u2019m almost ashamed to admit it took me years of using Pandas before I started to look up optimizations, and even today, it\u2019s not like I go around optimizing every single notebook I make. However, with a few simple tricks, you can see how the difference of a couple of lines of code or even just how you handle a single column could result in speedups of 10\u2013100X and memory decreases of greater than 50%. It\u2019s definitely a good set of tricks to have up your sleeves.", "If you missed it, check out Part I: Writing good code and spotting silent failures.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data scientist at Enigma Technologies, Inc. Practitioner of statistics, software, games, baking, and absurdity."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F3426f53d7fba&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-avoid-a-pandas-pandemonium-part-ii-3426f53d7fba&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-avoid-a-pandas-pandemonium-part-ii-3426f53d7fba&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-avoid-a-pandas-pandemonium-part-ii-3426f53d7fba&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-avoid-a-pandas-pandemonium-part-ii-3426f53d7fba&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----3426f53d7fba--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----3426f53d7fba--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://protagonistwu.medium.com/?source=post_page-----3426f53d7fba--------------------------------", "anchor_text": ""}, {"url": "https://protagonistwu.medium.com/?source=post_page-----3426f53d7fba--------------------------------", "anchor_text": "Pamela Wu"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2c52e2613ac7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-avoid-a-pandas-pandemonium-part-ii-3426f53d7fba&user=Pamela+Wu&userId=2c52e2613ac7&source=post_page-2c52e2613ac7----3426f53d7fba---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3426f53d7fba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-avoid-a-pandas-pandemonium-part-ii-3426f53d7fba&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3426f53d7fba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-avoid-a-pandas-pandemonium-part-ii-3426f53d7fba&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@killerfvith?utm_source=medium&utm_medium=referral", "anchor_text": "Alex wong"}, {"url": "https://unsplash.com?utm_source=medium&utm_medium=referral", "anchor_text": "Unsplash"}, {"url": "https://medium.com/@protagonistwu/how-to-avoid-a-pandas-pandemonium-e1bed456530", "anchor_text": "Part I"}, {"url": "https://github.com/pambot/notebooks/blob/master/pandas-pandemonium.ipynb", "anchor_text": "Jupyter notebook with the whole lesson"}, {"url": "https://stackoverflow.com/questions/4913349/haversine-formula-in-python-bearing-and-distance-between-two-gps-points", "anchor_text": "StackOverflow"}, {"url": "http://numba.pydata.org/numba-doc/0.15.1/examples.html", "anchor_text": "Numba docs"}, {"url": "https://medium.com/@protagonistwu/how-to-avoid-a-pandas-pandemonium-e1bed456530", "anchor_text": "Part I: Writing good code and spotting silent failures."}, {"url": "https://medium.com/tag/data?source=post_page-----3426f53d7fba---------------data-----------------", "anchor_text": "Data"}, {"url": "https://medium.com/tag/data-science?source=post_page-----3426f53d7fba---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/python?source=post_page-----3426f53d7fba---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/pandas?source=post_page-----3426f53d7fba---------------pandas-----------------", "anchor_text": "Pandas"}, {"url": "https://medium.com/tag/mistakes?source=post_page-----3426f53d7fba---------------mistakes-----------------", "anchor_text": "Mistakes"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3426f53d7fba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-avoid-a-pandas-pandemonium-part-ii-3426f53d7fba&user=Pamela+Wu&userId=2c52e2613ac7&source=-----3426f53d7fba---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3426f53d7fba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-avoid-a-pandas-pandemonium-part-ii-3426f53d7fba&user=Pamela+Wu&userId=2c52e2613ac7&source=-----3426f53d7fba---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3426f53d7fba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-avoid-a-pandas-pandemonium-part-ii-3426f53d7fba&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----3426f53d7fba--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F3426f53d7fba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-avoid-a-pandas-pandemonium-part-ii-3426f53d7fba&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----3426f53d7fba---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----3426f53d7fba--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----3426f53d7fba--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----3426f53d7fba--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----3426f53d7fba--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----3426f53d7fba--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----3426f53d7fba--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----3426f53d7fba--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----3426f53d7fba--------------------------------", "anchor_text": ""}, {"url": "https://protagonistwu.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://protagonistwu.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Pamela Wu"}, {"url": "https://protagonistwu.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "20 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2c52e2613ac7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-avoid-a-pandas-pandemonium-part-ii-3426f53d7fba&user=Pamela+Wu&userId=2c52e2613ac7&source=post_page-2c52e2613ac7--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fusers%2F2c52e2613ac7%2Flazily-enable-writer-subscription&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-avoid-a-pandas-pandemonium-part-ii-3426f53d7fba&user=Pamela+Wu&userId=2c52e2613ac7&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}