{"url": "https://towardsdatascience.com/building-a-deployable-jira-bug-classification-engine-using-amazon-sagemaker-827fda8d0460", "time": 1683010682.42592, "path": "towardsdatascience.com/building-a-deployable-jira-bug-classification-engine-using-amazon-sagemaker-827fda8d0460/", "webpage": {"metadata": {"title": "Building a Deployable Jira Bug Classification Engine Using Amazon Sagemaker | by Heemeng Foo | Towards Data Science", "h1": "Building a Deployable Jira Bug Classification Engine Using Amazon Sagemaker", "description": "Author\u2019s note: I chose this image as the exercise documented in this article culminates in the creation of an API gateway on AWS to a prediction model for classifying Jira tickets built on top of the\u2026"}, "outgoing_paragraph_urls": [{"url": "https://levelup.gitconnected.com/building-a-deployable-jira-bug-classification-engine-using-tensorflow-745667c72607", "anchor_text": "article", "paragraph_index": 1}, {"url": "https://learn.xnextcon.com/", "anchor_text": "AICamp", "paragraph_index": 2}, {"url": "https://youtu.be/yFFp9RYpOb0", "anchor_text": "YouTube", "paragraph_index": 9}, {"url": "https://youtu.be/G2tX0YpNHfc", "anchor_text": "video", "paragraph_index": 10}, {"url": "https://learn.xnextcon.com/", "anchor_text": "AICamp", "paragraph_index": 12}, {"url": "https://docs.aws.amazon.com/sagemaker/latest/dg/blazingtext.html", "anchor_text": "document", "paragraph_index": 14}, {"url": "https://docs.aws.amazon.com/sagemaker/latest/dg/blazingtext-tuning.html", "anchor_text": "https://docs.aws.amazon.com/sagemaker/latest/dg/blazingtext-tuning.html", "paragraph_index": 42}, {"url": "https://docs.aws.amazon.com/sagemaker/latest/dg/howitworks-create-ws.html", "anchor_text": "here", "paragraph_index": 50}, {"url": "https://github.com/awslabs/amazon-sagemaker-examples/blob/master/introduction_to_amazon_algorithms/blazingtext_text_classification_dbpedia/blazingtext_text_classification_dbpedia.ipynb", "anchor_text": "notebook", "paragraph_index": 53}, {"url": "http://www.python-course.eu/confusion_matrix.php", "anchor_text": "www.python-course.eu/confusion_matrix.php", "paragraph_index": 62}, {"url": "https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html", "anchor_text": "https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html", "paragraph_index": 84}, {"url": "https://github.com/marcoortu/jira-social-repository", "anchor_text": "https://github.com/marcoortu/jira-social-repository", "paragraph_index": 86}, {"url": "https://youtu.be/G2tX0YpNHfc", "anchor_text": "https://youtu.be/G2tX0YpNHfc", "paragraph_index": 87}], "all_paragraphs": ["Author\u2019s note: I chose this image as the exercise documented in this article culminates in the creation of an API gateway on AWS to a prediction model for classifying Jira tickets built on top of the Amazon Sagemaker toolchain.", "In a previous article, I documented the steps I took to build a Jira bug classification engine using Tensorflow (in particular using a 1D CNN and Embedded layer) and deployable as a Docker container. In this article I am documenting the steps I took to do the same but using the Amazon Sagemaker toolchain, in particular the BlazingText built-in text classification algorithm.", "As in the previous article, this little project was done as part of a AICamp course, this time the Full Stack Deep Learning in AWS course.", "As I had already done the initial work of extracting the datasets from the open source repository found in [1], I am able to use the processed CSVs for this project.", "My personal objectives for working on this project were:", "As in the previous article, you can find the notebooks and data files in Gitlab:", "I have created a separate folder for this project called BlazingText/supervised (if you\u2019re wondering what the word2vec folder in the BlazingText folder is, that\u2019s the topic of a future article).", "In my previous article I mentioned several options to perform text classification using DNNs and word2vec is one option. Using a 1D CNN with a word embedding layer was another which was explored in that article.", "I do not intend to cover too much about word2vec as I would not be able to do justice to the topic but suffice to say, word2vec is a DNN approach to creating a word embedding.", "If you would like to know more about word2vec, I strongly recommend watching \u201cWord2Vec Explained!\u201d by the Python Programmer on YouTube . In essence, word2vec is a DNN that given a bunch of text, maps words to a N-dimensional vector space. The idea behind that is that words that are \u201ccloser\u201d to each other \u201cbelong\u201d to each other. Usually that is based on the distance they are between each other in the sentences of the bunch of text it is trained on. We can then use this \u201ccloseness\u201d to train a classification algorithm.", "BlazingText is Amazon\u2019s implementation of the word2vec DNN used to create a word embedding and then using another DNN with the embedding to build a text classifier on top of it. To understand this better I highly recommend watching the video by Amazon on the subject.", "There are several AWS tools we use to build up the model as well as to deploy it, these are:", "Author\u2019s note: If you have an interest in learning how to use the AWS Sagemaker stack to build a deployable ML or DNN engine I strongly recommend taking the AICamp course mentioned in the introduction. It makes a lot of difference especially if (a) you have experience with ML but little experience with AWS or (b) you have experience with AWS but not that much experience with ML or DNNs. The course tries to bridge the two and there is a lot of hand-holding in the beginning. For me personally I was in the (a) group and I was able to pick up BlazingText even though it was not covered in the course.", "Note: I run some of my notebooks on Google Colab as running them on Sagemaker notebook instance will cost money. That is one thing to note about working with AWS \u2014 you have to constantly check your spend as you may have left some unused services running and that could run up the bill.", "The first step is to prepare the training and validation data in the form used by BlazingText. In the BlazingText document it describes 2 formats: (a) line separated and (b) JSON. We will be using (a) for this.", "For this exercise I am also using the JIRA_OPEN_DATA_LARGESET_PROCESSED.csv as I want to use the result to compare against the 1D CNN described in the previous article.", "To convert the csv into the format for BlazingText, I used the code found in BlazingTextDataPrepTrainEval.ipynb (in the gitlab repo, in the BlazingText/supervised subfolder. This is a Google Colab notebook)", "As the data could be read into a Pandas dataframe, I just used scikit-learn\u2019s standard train-test-split function to split them (30% test) and then use this function to write them into 2 files: jira_largeset_train.lst and jira_largeset_test.lst. Both files are in the gitlab repo.", "Note: in the notebook BlazingTextDataPrepTrainEval.ipynb I\u2019ve also included a plot of the labels to show how unbalanced the data is.", "The resulting files look like this:", "Next you have to upload these 2 files to a S3 bucket.", "Next step is to build a basic model. There are 2 ways to do this:", "We will first be discussing (1) here and will introduce (2) in the section \u201cEvaluating the Model\u201d.", "The first step is to click on \u201cTraining jobs\u201d on the Sagemaker page", "Next click on \u201cCreate training job\u201d", "Give your job a name. As for the IAM role, you will have to use an existing role or create a new role for executing Sagemaker tasks. It should have access to your S3 bucket. Also both S3 and your Sagemaker instance should reside in the same region eg. us-east-1", "Select \u201cBlazingText\u201d and \u201cFile\u201d input mode.", "Select the resource configuration. I chose a ml.c5.4xlarge and 100Gb storage (which is probably overkill).", "For the Hyperparameters I used the following non-default:", "For the \u201cInput data configuration\u201d you will need to add the S3 location for the training and validation channels.", "You will need to create another channel named \u201cvalidation\u201d and fill it in with the S3 location of the test dataset.", "Next you will need to configure where the output will go to. Add a valid S3 location for the output path.", "Lastly click on \u201cCreate training job\u201d. This will bring you to the main \u201cTraining job\u201d page. Your job will take some time to run.", "You must be wondering by now how do you check for the training and validation accuracy. This you will need to use Cloudwatch. Go to the training job, click on it and navigate to \u201cMonitor\u201d. Click on the \u201cView logs\u201d link and you will be able to look at the logs of the training run.", "Once the training is complete, you can also click on the \u201cView algorithm metrics\u201d link to check on the training and validation accuracy.", "For my run I got training accuracy of 0.69 and validation accuracy of 0.572 which is slightly better than the 1D CNN.", "Amazon Sagemaker provides a very intuitive UI tool for performing Hyperparameter tuning for its built in algorithms. I\u2019ve used the scikit-learn in the past to build a simple random and grid-search tuning for a random forest classifier (see ModelAnalysis.ipynb in the Octopus2 gitlab repo) based on [2]. This was new as the Sagemaker tool provided a Bayesian tuning algorithm built in so I was excited to try it out.", "The first step is to click on the \u201cHyperparameter tuning jobs\u201d in the Sagemaker page", "Next click on the \u201cCreate hyperparameter tuning job\u201d button", "Next give a name to your job and turn on early stopping", "Click on \u201cNext\u201d. Then click on \u201cAdd training job definition\u201d", "Give your training job definition a name and fill up the \u201cAlgorithm options\u201d just like how you did so in the \u201cCreate training job\u201d ie. select BlazingText etc. Next select validation:accuracy in the \u201cObjective metric\u201d box (see screenshot below):", "For \u201cHyperparameter configuration\u201d I followed the guidance in https://docs.aws.amazon.com/sagemaker/latest/dg/blazingtext-tuning.html . One thing to note is that if there is no variation, you need to set the type to \u201cStatic\u201d. Then click on \u201cNext\u201d.", "The next page asks you to fill in the training and validation channels, checkpoint and output S3 locations. This is the same as in \u201cCreating a Basic Model\u201d.", "Next in the \u201cResource configuration\u201d I used a ml.c5.4xlarge with 100Gb and stopping condition I set to 30mins max for each run (it should be much much less).", "For resource limits, that depends on what you have configured as your spend limits. For me I had to set the max parallel training jobs to 8 and max training jobs to 100.", "Lastly click on the \u201cCreate hyperparameter tuning job\u201d.", "This will kick off the entire process of running the hyperparameter tuning process and it will take some time. Once complete you will see something like this:", "Click on the job and you will see your results:", "You can also inspect all the training jobs by clicking on the \u201cTraining jobs\u201d tab.", "As I mentioned at the start, there is another way to build a model and that is using the Sagemaker notebook instance. First of all, you will need to create an instance. To do that follow the instructions here.", "Note: you are charged for running Sagemaker notebook instances. To save money, make sure you turn them off (not delete!) when not in use. You can always restart them again with all the stored files intact.", "In this section I will be covering the contents of the blazingtext_text_classification_jira.ipynb notebook found in the BlazingText/supervised folder in the main gitlab repo.", "This notebook was modified from an example notebook provided by AWS.", "The first step is to hook up the data sources and output locations:", "Then setting up the container for the training job", "And then train! (this will take a while of course)", "Note: if not in use, please make sure you delete the endpoint otherwise you will be charged for keeping it running. You can always restart it by running this command on the notebook at a later time and Sagemaker knows to pick the last trained model. To delete the endpoint, the command is at the bottom of the notebook:", "The next part shows you how to perform predictions on the model endpoint:", "The response is a JSON with the probability and predicted label", "I love the ease of creating, training and deploying (as you will see in the next section) the model using the AWS Sagemaker and AWS toolchain but I am really annoyed with the lack of tooling to evaluate the model. As such I had to build that part from scratch.", "What I wanted to do was to use the validation data set and run that by the prediction algorithm and create a confusion matrix and calculate standard metrics like precision, recall and accuracy. To do that I had to create a zero matrix and fill it in", "I was able to find some code for calculating precision/recall metrics from https://www.python-course.eu/confusion_matrix.php and was able to generate the metrics:", "Then I used the confusion matrix to create a heat map using matplotlib.", "Next I wanted to see how the model held up with a totally different data set. In Octopus2 I had already created the JIRA_OPEN_DATA_ZOOKEEPER.csv dataset and so I used the same code to perform predictions on it and calculated the metrics and confusion matrix.", "Note: it looks like there were some division by zero as the data set did not include some of the labels so I\u2019ll chose to ignore them as it gave me the information I was looking for ie. how well the algorithm performed on a totally new dataset.", "While the overall accuracy is not good (under 50%) the precision is decent. Next I wanted to check the confusion matrix:", "What you will notice is that it looks pretty similar to the one using the validation data set.", "There is definitely more work that can be done to improve this model. The good thing is that there is now a mechanism to evaluate any new model.", "This section covers, in brief, the steps to:", "First select a training job: this could either be the first training job or from a training job from the hyperparameter tuning job. Then once in there, click on the \u201cCreate model\u201d button.", "Give the model a name, choose the right IAM role. I used the defaults for the \u201cContainer definition\u201d and \u201cNetwork\u201d. Then I clicked on the \u201cCreate Model\u201d button.", "Next, you will be the list of models you have created. Select your new model and then click on \u201cCreate endpoint\u201d.", "Add a name and the usual stuff. Select \u201cCreate a new endpoint configuration\u201d. Click on \u201cCreate endpoint configuration\u201d.", "Note: Sagemaker endpoints cost money even when there\u2019s no traffic. Make sure you delete them once you are done with them.", "Navigate over to Amazon Lambda. Click on \u201cCreate function\u201d.", "Select \u201cAuthor from scratch\u201d. Give the function a name, select a runtime (I used Python 3.6). Click on \u201cCreate function\u201d.", "In the next page is where you build and test your Lambda. In the \u201cFunction code\u201d section, I used the following:", "Essentially what it does it get a payload that looks like this", "and create a payload in the form", "and send it to the prediction engine. We have seen this form in the previous section \u201cEvaluating the model\u201d. Once a response is obtained, it then extracts the label part of the response payload and perform a translation from __label__X over to the actual bug priority.", "The next thing you need to do is to set the environment variable ENDPOINT_NAME by filling up the form below the \u201cFunction code\u201d section. Put in the endpoint name you created in the previous section.", "There is a test facility where you can pass in a test payload to test the Lambda. I\u2019d recommend you use it to check that it works. It\u2019s pretty self explanatory and there are documentation online for that.", "Navigate to Amazon API Gateway. Select to build a REST API.", "Fill in the same and the usual stuff and then click on \u201cCreate API\u201d. Once done, follow the steps in \u201cCreate a Hello World API\u201d section of https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html . Of course make sure to use your Lambda function instead of the one provided there.", "Once done, you\u2019ll be provided with the API Gateway URL for your method and you\u2019ll be able to curl your API with a payload.", "[1] Jira Social Repository, Marco Ortu et al https://github.com/marcoortu/jira-social-repository", "[4] \u201cAmazon SageMaker\u2019s Built-in Algorithm Webinar Series: Blazing Text\u201d, Amazon, https://youtu.be/G2tX0YpNHfc", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Test automation, Engineering management, Data Science / ML / AI Enthusiast"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F827fda8d0460&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-deployable-jira-bug-classification-engine-using-amazon-sagemaker-827fda8d0460&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-deployable-jira-bug-classification-engine-using-amazon-sagemaker-827fda8d0460&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-deployable-jira-bug-classification-engine-using-amazon-sagemaker-827fda8d0460&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-deployable-jira-bug-classification-engine-using-amazon-sagemaker-827fda8d0460&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----827fda8d0460--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----827fda8d0460--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://heemeng.medium.com/?source=post_page-----827fda8d0460--------------------------------", "anchor_text": ""}, {"url": "https://heemeng.medium.com/?source=post_page-----827fda8d0460--------------------------------", "anchor_text": "Heemeng Foo"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Faf89c21f9b3e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-deployable-jira-bug-classification-engine-using-amazon-sagemaker-827fda8d0460&user=Heemeng+Foo&userId=af89c21f9b3e&source=post_page-af89c21f9b3e----827fda8d0460---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F827fda8d0460&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-deployable-jira-bug-classification-engine-using-amazon-sagemaker-827fda8d0460&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F827fda8d0460&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-deployable-jira-bug-classification-engine-using-amazon-sagemaker-827fda8d0460&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://levelup.gitconnected.com/building-a-deployable-jira-bug-classification-engine-using-tensorflow-745667c72607", "anchor_text": "article"}, {"url": "https://learn.xnextcon.com/", "anchor_text": "AICamp"}, {"url": "https://gitlab.com/foohm71/octopus2", "anchor_text": "https://gitlab.com/foohm71/octopus2"}, {"url": "https://youtu.be/yFFp9RYpOb0", "anchor_text": "YouTube"}, {"url": "https://youtu.be/G2tX0YpNHfc", "anchor_text": "video"}, {"url": "https://aws.amazon.com/getting-started/hands-on/backup-files-to-amazon-s3/", "anchor_text": "https://aws.amazon.com/getting-started/hands-on/backup-files-to-amazon-s3/"}, {"url": "https://aws.amazon.com/getting-started/hands-on/build-train-deploy-machine-learning-model-sagemaker/", "anchor_text": "https://aws.amazon.com/getting-started/hands-on/build-train-deploy-machine-learning-model-sagemaker/"}, {"url": "https://aws.amazon.com/getting-started/hands-on/run-serverless-code/", "anchor_text": "https://aws.amazon.com/getting-started/hands-on/run-serverless-code/"}, {"url": "https://docs.aws.amazon.com/cloud9/latest/user-guide/tutorial-lambda.html", "anchor_text": "https://docs.aws.amazon.com/cloud9/latest/user-guide/tutorial-lambda.html"}, {"url": "https://learn.xnextcon.com/", "anchor_text": "AICamp"}, {"url": "https://docs.aws.amazon.com/sagemaker/latest/dg/blazingtext.html", "anchor_text": "document"}, {"url": "https://docs.aws.amazon.com/sagemaker/latest/dg/blazingtext-tuning.html", "anchor_text": "https://docs.aws.amazon.com/sagemaker/latest/dg/blazingtext-tuning.html"}, {"url": "https://docs.aws.amazon.com/sagemaker/latest/dg/howitworks-create-ws.html", "anchor_text": "here"}, {"url": "https://github.com/awslabs/amazon-sagemaker-examples/blob/master/introduction_to_amazon_algorithms/blazingtext_text_classification_dbpedia/blazingtext_text_classification_dbpedia.ipynb", "anchor_text": "notebook"}, {"url": "http://www.python-course.eu/confusion_matrix.php", "anchor_text": "www.python-course.eu/confusion_matrix.php"}, {"url": "https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html", "anchor_text": "https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html"}, {"url": "https://github.com/marcoortu/jira-social-repository", "anchor_text": "https://github.com/marcoortu/jira-social-repository"}, {"url": "https://towardsdatascience.com/hyperparameter-tuning-the-random-forest-in-python-using-scikit-learn-28d2aa77dd74", "anchor_text": "https://towardsdatascience.com/hyperparameter-tuning-the-random-forest-in-python-using-scikit-learn-28d2aa77dd74"}, {"url": "https://youtu.be/yFFp9RYpOb0", "anchor_text": "https://youtu.be/yFFp9RYpOb0"}, {"url": "https://youtu.be/G2tX0YpNHfc", "anchor_text": "https://youtu.be/G2tX0YpNHfc"}, {"url": "https://medium.com/tag/ai?source=post_page-----827fda8d0460---------------ai-----------------", "anchor_text": "AI"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----827fda8d0460---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/aws?source=post_page-----827fda8d0460---------------aws-----------------", "anchor_text": "AWS"}, {"url": "https://medium.com/tag/sagemaker?source=post_page-----827fda8d0460---------------sagemaker-----------------", "anchor_text": "Sagemaker"}, {"url": "https://medium.com/tag/bug-tracking?source=post_page-----827fda8d0460---------------bug_tracking-----------------", "anchor_text": "Bug Tracking"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F827fda8d0460&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-deployable-jira-bug-classification-engine-using-amazon-sagemaker-827fda8d0460&user=Heemeng+Foo&userId=af89c21f9b3e&source=-----827fda8d0460---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F827fda8d0460&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-deployable-jira-bug-classification-engine-using-amazon-sagemaker-827fda8d0460&user=Heemeng+Foo&userId=af89c21f9b3e&source=-----827fda8d0460---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F827fda8d0460&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-deployable-jira-bug-classification-engine-using-amazon-sagemaker-827fda8d0460&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----827fda8d0460--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F827fda8d0460&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-deployable-jira-bug-classification-engine-using-amazon-sagemaker-827fda8d0460&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----827fda8d0460---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----827fda8d0460--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----827fda8d0460--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----827fda8d0460--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----827fda8d0460--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----827fda8d0460--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----827fda8d0460--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----827fda8d0460--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----827fda8d0460--------------------------------", "anchor_text": ""}, {"url": "https://heemeng.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://heemeng.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Heemeng Foo"}, {"url": "https://heemeng.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "179 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Faf89c21f9b3e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-deployable-jira-bug-classification-engine-using-amazon-sagemaker-827fda8d0460&user=Heemeng+Foo&userId=af89c21f9b3e&source=post_page-af89c21f9b3e--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F3fa7281f2b1f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-deployable-jira-bug-classification-engine-using-amazon-sagemaker-827fda8d0460&newsletterV3=af89c21f9b3e&newsletterV3Id=3fa7281f2b1f&user=Heemeng+Foo&userId=af89c21f9b3e&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}