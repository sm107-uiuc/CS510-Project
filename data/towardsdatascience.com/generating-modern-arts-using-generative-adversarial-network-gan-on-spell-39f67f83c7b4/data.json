{"url": "https://towardsdatascience.com/generating-modern-arts-using-generative-adversarial-network-gan-on-spell-39f67f83c7b4", "time": 1683001335.969007, "path": "towardsdatascience.com/generating-modern-arts-using-generative-adversarial-network-gan-on-spell-39f67f83c7b4/", "webpage": {"metadata": {"title": "Generating Modern Art using Generative Adversarial Network(GAN) on Spell | by Anish Shrestha | Towards Data Science", "h1": "Generating Modern Art usingGenerative Adversarial Network(GAN) on Spell", "description": "In this tutorial, we are going to look at the step by step process to create a Generative Adversarial Network to generate Modern Art and write a code for that using Python and Keras together. After\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.wikiart.org/", "anchor_text": "WikiArts.org", "paragraph_index": 1}, {"url": "https://www.wikiart.org/en/paintings-by-style/cubism?select=featured#!#filterName:featured,viewType:masonry", "anchor_text": "Cubism", "paragraph_index": 5}, {"url": "https://www.wikiart.org/", "anchor_text": "WikiArt.org", "paragraph_index": 6}, {"url": "https://github.com/cs-chan/ArtGAN/tree/master/WikiArt%20Dataset", "anchor_text": "cs-chan", "paragraph_index": 7}, {"url": "https://arxiv.org/abs/1406.2661", "anchor_text": "Generative Adversarial Networks", "paragraph_index": 20}, {"url": "https://www.thispersondoesnotexist.com/", "anchor_text": "https://www.thispersondoesnotexist.com/", "paragraph_index": 22}, {"url": "https://web.spell.run/refer/anyesh", "anchor_text": "Spell", "paragraph_index": 107}, {"url": "https://spell.run/", "anchor_text": "Spell", "paragraph_index": 111}, {"url": "https://spell.run/docs/", "anchor_text": "documentation", "paragraph_index": 112}, {"url": "https://chat.spell.ml/", "anchor_text": "https://chat.spell.ml/", "paragraph_index": 138}], "all_paragraphs": ["You need to have a good understanding of:", "Image data used in this project has been collected from WikiArts.org.", "In this tutorial, we are going to look at the step by step process to create a Generative Adversarial Network to generate Modern Art and write a code for that using Python and Keras together.", "After that, for training the model, we are going to use a powerful GPU Instance of Spell platform. Everything will be explained along the way and links will be provided for further readings.", "Before getting started, let\u2019s look at our image dataset.", "WikiArt has a huge collection of modern art with various different styles. For our particular project, we are going to use images of Cubism Style.", "You can know more about the art styles and Modern Art from WikiArt.org.", "You can either download images that you like from WikiArt or head to this repository by cs-chan to download the 26GB of WikiArt images.", "Since it has a collection of all the different types, we are only going to pick cubism and store them in folder named dataset.", "Images in our dataset are of different sizes, to feed them into our Generative Adversarial Neural Network we are going to resize all our images to 128X128.", "Before starting, create a python file at the root directory where your dataset folder is located.", "Now let\u2019s write a small python script to select all the images from the folder and resize them to 128X128 and save them on cubism_data.npy file.", "In our code block above, in the first few lines, we have imported all the required libraries to perform the resizing operation.", "Here, we are using Pillow to resize all images to our desired size and appending them on a list as numpy array.", "After that, we are using numpy to reshape the array in a suitable format and normalizing data.", "After normalization, we are saving our image array in npy binary file so that we don\u2019t have to go through all the images every time.", "That\u2019s it for processing our image data.", "Now it\u2019s time for the most exciting part of our project, from here on we are going to write our code for Generative Adversarial Network (GAN).", "We are going to use Keras \u2014 A Deep Learning Library to create our GAN.", "Before starting let\u2019s briefly understand what is GAN and it\u2019s structure.", "Generative adversarial networks (GANs) are an exciting recent innovation in machine learning. It was first introduced by Ian Godfellow in his paper Generative Adversarial Networks.", "GANs are generative models: after given some training data, they can create new data instances that look like your training data. For example, GANs can create images that look like photographs of human faces, even though the faces don\u2019t belong to any real person.", "For a great example of GAN you can visit https://www.thispersondoesnotexist.com/ which was created by Nvidia. It generates a high quality image of a person who does not even exist.", "Let\u2019s understand it\u2019s structure and how it works.", "GAN composes of two types of models: Generative Model and a Discriminative Model.", "Generative Models are responsible for generating different kinds of noise data whereas discriminative models are responsible to discriminate whether the given data is real or fake.", "Generative models constantly trains itself to fool discriminative models by generating fake noise data and discriminative models trains itself from the training set to classify either the data is from dataset or not and not to be fooled by generative models.", "Discriminator in GAN uses a cross entropy loss, since discriminators job is to classify; cross entropy loss is the best one out there.", "This formula represents the cross entropy loss between p: the true distribution and q: the estimated distribution.", "(p) and (q) are the of m dimensions where m is the number of classes.", "In GAN, discriminator is a binary classifier. It needs to classify either the data is real or fake. Which means m = 2. The true distribution is one hot vector consisting of only 2 terms.", "For n number of samples, we can sum over the losses.", "This above shown equation is of binary cross entropy loss, where y can take two values 0 and 1.", "GAN\u2019s have a latent vector z, image G(z) is magically generated out of it. We apply the discriminator function D with real image x and the generated image G(z).", "The intention of the loss function is to push the predictions of the real image towards 1 and the fake images to 0. We do so by log probability term.", "Note: ~ sign means: is distributed as and Ex here means expectations: since we don\u2019t know how samples are fed into the discriminator, we are representing them as expectations rather than the sum.", "If we observe the joint loss function we are maximizing the discriminator term, which means log of D(x) should inch closer to zero, and log D(G(z)) should be closer to 1. Here generator is trying to make D(G(z)) inch closer to 1 while discriminator is trying to do the opposite.", "Now without any delay let\u2019s write our GAN.", "We are going to name our file art_gan.py and store it in the root directory. This file will contain all the hyperparameters and functions for our generator and discriminator.", "Here we are importing all the required libraries and helper functions for creating our GAN.", "All the imports are self-explanatory. Here we are importing a bunch of keras layers for creating our models.", "Here in the first few lines, we have defined Image frame size and padding to save our generated images.", "NOISE_SIZE here is a latent dimension size to generate our images.", "EPOCHS is a number of iterations: it defines how many times we want to iterate over our training images and BATCH_SIZE is a number of images to feed in every iteration.", "IMAGE_SIZE is our image size which we resized earlier to 128X128 and IMAGE_CHANNELS is a number of channel in our images; which is 3.", "Note: Images should always be of square size", "Let's load our npy data file which we\u2019ve created earlier.", "To load the npy file we are using numpy\u2019s load function and passing file path as a parameter.", "Since we have our data file in the root directory we no additional path parameters were required. If you have stored your data somewhere else, you can use the following code to load data:", "That\u2019s it for loading our training data.", "Now we can create our Generator and Discriminator functions.", "If you have some knowledge of keras than the code is self-explanatory.", "In general, we are defining a function which takes image_shape as a parameter.", "Inside that function, we are initializing a Sequential model from keras which helps us in creating linear stacks of layers.", "After that, we are appending a bunch of layers in sequential model.", "Our first layer is a convolutional layer of 32 shape having kernel_size of 3 and our stride value is 2 with padding same. Since it is a first layer it holds input_shape.", "To understand what is going on here, you can refer to keras official documentation page.", "But in simple language, here we are defining a convolutional layer which has a filter of size 3X3 and that filter strides over our image data. We have padding of same which means, no additional paddings are added. It remains the same as the original.", "After that, we are adding a LeakyRelu layer which is an activation function.", "Similarly in other block of layers are added in a sequential model with some dropouts and batch normalization to prevent overfitting.", "The last layer of our model is a Fully connected layer with an activation function sigmoid.", "Since our discriminator\u2019s job is to classify whether the given image is fake or not, it is a binary classification task and sigmoid is an activation that squeezes every value to values between 0 and 1.", "Now after initializing our discriminator model let\u2019s create a generative model as well.", "Here we have defined a function that takes noise_size and channels as parameters.", "Inside the function, we have again initialized a sequential model.", "Since our generator model has to generate images from noise vector, our first layer is a fully connected dense layer of size 4096 (4 * 4 * 256) which takes noise_size as a parameter.", "Note: We have defined its size to be of 4096 to for resizing it in 4X4X256 shaped layer.", "After that, we are using Reshape layer to reshape our fully connected layer in the shape of 4X4X256.", "Layer blocks after this are just a Convolutional layer with batch normalizations and activation function relu.", "Just to see and understand what it looks like, let\u2019s look at the model summary:", "From the shape of 4X4 it is extended up to the size of 128X128 which is our training_data shape.", "Our generator model takes noise as an input and outputs an image.", "After initializing both the generator and discriminator model, let\u2019s write a helper function to save the image after some iteration.", "Our save_images function takes to count and noise as an input.", "Inside the function, it generates frames from the parameters we\u2019ve defined above and stores our generated image array which are generated from the noise input.", "After that, it saves it as an image.", "Now, it\u2019s time for us to compile the models and train them.", "Let\u2019s write a block of code for that as well:", "Here in the first few lines, we have defined our input shape: which is 128X128X3 (image_size, image_size, image_channel).", "After that, we are using Adam as our optimizer.", "Note: All the parameters has been sourced from the paper [1].", "After initializing the optimizer, we are calling our build_discriminator function and passing the image shape then compiling it with a loss function and an optimizer.", "Since it is a classification model, we are using accuracy as its performance metric.", "Similarly, in the next line, we are calling our build_generator function and passing our random_input noise vector as its input.", "It returns a generated image as it\u2019s output.", "Now, one important part of GAN is we should prevent our discriminator from training.", "Since we are only training generators here, we do not want to adjust the weights of the discriminator.", "This is what really an \u201cAdversarial\u201d in Adversarial Network means.", "If we do not set this, the generator will get its weight adjusted so it gets better at fooling the discriminator and it also adjusts the weights of the discriminator to make it better at being fooled.", "We don\u2019t want this. So, we have to train them separately and fight against each other.", "We are then compiling the generative model with loss function and optimizer.", "After that, we are defining two vectors as y_real and y_fake.", "These vectors are composed of random 0\u2019s and 1\u2019s values.", "After that we are creating a fixed_noise: this will result in generating images that are saved later on which we can see it getting better on every iteration.", "After that, we are going to iterate over our training data with the range of epochs we\u2019ve defined.", "During the iteration process, we are taking a sample from a real image and putting that on x_real. After that, we are defining a noise vector and passing that to our generator model to generate a fake image in x_fake.", "Then we are training our discriminator model in both real and fake images separately.", "Some research has shown that training them separately can get us some better results.", "After training, we are taking the metric from both models and taking the average.", "This way we get the metric for the discriminator model, now for the generator model, we are training it on our noise vector and y_real: which is a vector of 1\u2019s.", "Here we are trying to train the generator. Overtime generator will get better from these inputs and the discriminator will not be able to discriminate whether the input is fake or real.", "One thing to note here, our combined model is based on the generator model linked directly to the discriminator model. Here our Input is what the generator wants as an input: which is noise and output is what the discriminator gives us.", "Now in the end we have an if statement which checks for our checkpoint.", "If it reaches the checkpoint then it saves the current iteration noise and prints the current accuracy of generator and discriminator.", "This is all for the coding part to create GAN, but we are not finished yet.", "We have just written code for it, now we have to actually train those models and see the output how it performs.", "Training GAN in a normal laptop is kind of impossible since it requires high computation power.", "Normal laptops with normal CPUs cannot handle such huge tasks, so we are going to use Spell: Which is the fastest and most powerful end-to-end platform for Machine Learning and Deep Learning.", "The spell is a powerful platform for building and managing machine learning projects. The spell takes care of infrastructure, making machine learning projects easier to start, faster to get results, more organized, and safer than managing infrastructure on your own.", "In every signup with Spell, you can get 10$ free credit!", "In simple words, we are going to upload our data file in the spell platform and let it handle all our training task. Spell runs our task in their Powerful GPUs so that we don\u2019t have to worry about anything. We can monitor our logs from their Web GUI and all our outputs are saved safely as well.", "There are few things to cover before running our project at Spell.", "First off, we must create our account on Spell. There is good and easy documentation to get started on their official page.", "After account creation, we can install Spell CLI using pip install:", "This installs all the power of spell into our laptop. We can either use the Web GUI or we can easily log in to the spell server and execute commands from our cmd or bash.", "To upload our project on Spell, we are going to use command-line tools.", "Let\u2019s open the command line terminal in the root directory of our project folder and login to the server by using spell login command:", "After a successful login, now we can upload our training data file and run our code in the Spell server:", "After that our training_data will be uploaded to the server.", "Note: Before running code in the server, code has been pushed to the github.", "Now we are ready to execute our code in the Spell server.", "In the command line let\u2019s run the following command:", "The command above runs our code in the Spell server with the Machine type V100 which is a GPU machine. The last argument there mounts the dataset directory so that it can be accessed by our code.", "Now that code is executed successfully you can see the logs on your console. If you want to monitor in GUI then you can log in to the Web GUI of Spell and see under Runs Section.", "As you can see, it holds all the information about our recent run.", "As we have written code for; in every 100th iteration our generated image is saved in the output directory and log with accuracy metric are printed.", "You can view them in logs section.", "Awesome isn\u2019t it? You can do your other works while it trains and saves the output for you.", "Now after the training completes Spell automatically saves our output in the resources/runs directory.", "After that, we can download the outputs from the runs of Spell to our local machine by using the following command:", "For this project it will be:", "You just have to enter the runs/<number of your run> to download the content of that runs.", "That\u2019s it!! Now you have outputs of the GAN trained on Spell\u2019s GPU machine in your local machine. You can now visualize how your GAN performed from that output images.", "GANs are an exciting and rapidly changing field, delivering on the promise of generative models in their ability to generate realistic examples across a range of problem domains. It is not an easy task to understand GAN or any Machine Learning and Deep Learning field overnight. It needs patience and a lot of practice plus understanding.", "In previous days it was not possible for Aspiring ML enthusiast likes us to perform repetitive practice to see what went how. But now, a platform like Spell helps us to provide a system to run and manage our projects so that we can run and test our models.", "What we have created is just a simple representation of how GAN can be created and what GAN can do. There are still more advanced tweaks yet to perform.", "To take it further you can tweak the parameters and see how differently it generates the images.", "There are still a lot of things one can research.", "For any queries and discussion, you can join the Spell community from here: https://chat.spell.ml/", "[1] Generative Adversarial Network, Ian J. Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, Yoshua Bengio, 2014", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F39f67f83c7b4&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerating-modern-arts-using-generative-adversarial-network-gan-on-spell-39f67f83c7b4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerating-modern-arts-using-generative-adversarial-network-gan-on-spell-39f67f83c7b4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerating-modern-arts-using-generative-adversarial-network-gan-on-spell-39f67f83c7b4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerating-modern-arts-using-generative-adversarial-network-gan-on-spell-39f67f83c7b4&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----39f67f83c7b4--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----39f67f83c7b4--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@sthacruz?source=post_page-----39f67f83c7b4--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@sthacruz?source=post_page-----39f67f83c7b4--------------------------------", "anchor_text": "Anish Shrestha"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fcf006d136db4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerating-modern-arts-using-generative-adversarial-network-gan-on-spell-39f67f83c7b4&user=Anish+Shrestha&userId=cf006d136db4&source=post_page-cf006d136db4----39f67f83c7b4---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F39f67f83c7b4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerating-modern-arts-using-generative-adversarial-network-gan-on-spell-39f67f83c7b4&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F39f67f83c7b4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerating-modern-arts-using-generative-adversarial-network-gan-on-spell-39f67f83c7b4&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.wikiart.org/", "anchor_text": "WikiArts.org"}, {"url": "https://www.wikiart.org/en/paintings-by-style/cubism?select=featured#!#filterName:featured,viewType:masonry", "anchor_text": "Cubism"}, {"url": "https://www.wikiart.org/", "anchor_text": "WikiArt.org"}, {"url": "https://github.com/cs-chan/ArtGAN/tree/master/WikiArt%20Dataset", "anchor_text": "cs-chan"}, {"url": "https://arxiv.org/abs/1406.2661", "anchor_text": "Generative Adversarial Networks"}, {"url": "https://www.thispersondoesnotexist.com/", "anchor_text": "https://www.thispersondoesnotexist.com/"}, {"url": "https://skymind.ai/images/wiki/GANs.png", "anchor_text": "source"}, {"url": "https://web.spell.run/refer/anyesh", "anchor_text": "Spell"}, {"url": "https://spell.run/", "anchor_text": "Spell"}, {"url": "https://spell.run/docs/", "anchor_text": "documentation"}, {"url": "https://chat.spell.ml/", "anchor_text": "https://chat.spell.ml/"}, {"url": "https://machinelearningmastery.com/what-are-generative-adversarial-networks-gans/", "anchor_text": "https://machinelearningmastery.com/what-are-generative-adversarial-networks-gans/"}, {"url": "https://skymind.ai/wiki/generative-adversarial-network-gan", "anchor_text": "https://skymind.ai/wiki/generative-adversarial-network-gan"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----39f67f83c7b4---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/deep-learning?source=post_page-----39f67f83c7b4---------------deep_learning-----------------", "anchor_text": "Deep Learning"}, {"url": "https://medium.com/tag/programming?source=post_page-----39f67f83c7b4---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/gpu-computing?source=post_page-----39f67f83c7b4---------------gpu_computing-----------------", "anchor_text": "Gpu Computing"}, {"url": "https://medium.com/tag/generative-adversarial?source=post_page-----39f67f83c7b4---------------generative_adversarial-----------------", "anchor_text": "Generative Adversarial"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F39f67f83c7b4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerating-modern-arts-using-generative-adversarial-network-gan-on-spell-39f67f83c7b4&user=Anish+Shrestha&userId=cf006d136db4&source=-----39f67f83c7b4---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F39f67f83c7b4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerating-modern-arts-using-generative-adversarial-network-gan-on-spell-39f67f83c7b4&user=Anish+Shrestha&userId=cf006d136db4&source=-----39f67f83c7b4---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F39f67f83c7b4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerating-modern-arts-using-generative-adversarial-network-gan-on-spell-39f67f83c7b4&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----39f67f83c7b4--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F39f67f83c7b4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerating-modern-arts-using-generative-adversarial-network-gan-on-spell-39f67f83c7b4&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----39f67f83c7b4---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----39f67f83c7b4--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----39f67f83c7b4--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----39f67f83c7b4--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----39f67f83c7b4--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----39f67f83c7b4--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----39f67f83c7b4--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----39f67f83c7b4--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----39f67f83c7b4--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@sthacruz?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@sthacruz?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Anish Shrestha"}, {"url": "https://medium.com/@sthacruz/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "125 Followers"}, {"url": "https://www.linkedin.com/in/anyesh", "anchor_text": "https://www.linkedin.com/in/anyesh"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fcf006d136db4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerating-modern-arts-using-generative-adversarial-network-gan-on-spell-39f67f83c7b4&user=Anish+Shrestha&userId=cf006d136db4&source=post_page-cf006d136db4--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F5a5938194085&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgenerating-modern-arts-using-generative-adversarial-network-gan-on-spell-39f67f83c7b4&newsletterV3=cf006d136db4&newsletterV3Id=5a5938194085&user=Anish+Shrestha&userId=cf006d136db4&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}