{"url": "https://towardsdatascience.com/how-i-implemented-explainable-movie-recommendations-using-python-7aa42a0af023", "time": 1683007878.663601, "path": "towardsdatascience.com/how-i-implemented-explainable-movie-recommendations-using-python-7aa42a0af023/", "webpage": {"metadata": {"title": "How I implemented explainable movie recommendations using Python | by Ville Kuosmanen | Towards Data Science", "h1": "How I implemented explainable movie recommendations using Python", "description": "This post is part 2 in my series of posts about explainable recommendations, based on my BSc dissertation. Part 1 introduces the concept of explainable recommendations, while part 3 discusses the\u2026"}, "outgoing_paragraph_urls": [{"url": "https://github.com/villekuosmanen/SHProject/raw/master/dissertation.pdf", "anchor_text": "BSc dissertation", "paragraph_index": 0}, {"url": "https://towardsdatascience.com/explainable-recommendations-why-opening-black-boxes-matters-bd5754af63a2", "anchor_text": "Part 1", "paragraph_index": 0}, {"url": "https://towardsdatascience.com/what-is-the-radical-content-problem-and-does-your-recommender-system-suffer-from-it-7fe017f9a8b1", "anchor_text": "part 3", "paragraph_index": 0}, {"url": "https://github.com/villekuosmanen/SHProject/raw/master/dissertation.pdf", "anchor_text": "full dissertation", "paragraph_index": 1}, {"url": "https://github.com/villekuosmanen/WebAppSHProject", "anchor_text": "front-end", "paragraph_index": 1}, {"url": "https://github.com/villekuosmanen/SHProject/raw/master/dissertation.pdf", "anchor_text": "back-end", "paragraph_index": 1}, {"url": "http://surpriselib.com/", "anchor_text": "Surprise library", "paragraph_index": 2}, {"url": "https://reactjs.org/", "anchor_text": "React", "paragraph_index": 5}, {"url": "https://palletsprojects.com/p/flask/", "anchor_text": "Flask", "paragraph_index": 5}, {"url": "https://www.themoviedb.org/documentation/api?language=en-US", "anchor_text": "The Movie DP API", "paragraph_index": 5}], "all_paragraphs": ["This post is part 2 in my series of posts about explainable recommendations, based on my BSc dissertation. Part 1 introduces the concept of explainable recommendations, while part 3 discusses the application of post-hoc explainability in data science.", "The previous post in the series discussed why improving the explainability of recommender system matters. This is not a tutorial, but rather an overview of the approach I took in implementing a movie recommending service with explainable recommendations. If you wish to explore it further, you can read the full dissertation or dive into the front-end or back-end codebases (which are open source!). I chose to first implement a black-box recommender system using the matrix factorisation algorithm SVD, and then implement two post-hoc explainers that would generate explanations to recommendations. The effect of adding explanations was then tested through a web application simulating a movie recommender service.", "The recommender system was implemented in Python using the Surprise library. The dataset used for the problem was the publicly available MovieLens dataset consisting of film ratings by real users [1]. This dataset is widely used in recommender systems research, and since CF is not domain-specific, the models and algorithms will usually generalise to other fields besides film ratings. When developing the recommender system, the development dataset containing 100\u2019000 ratings was used to lower training time; the 20 million rating benchmark set was used for evaluation and use study. Before training the latent factor model, the data was split to train and test data using a random 75%-25% train-test split of ratings.", "After training, the recommender system can be used to predict ratings for the items and users in the training set. This is enough for static evaluation: however, the user study that was conducted using the system requires dynamic recommendations. Generating personalised recommendations for a newly-added user with a few ratings is not possible: the model first needs to learn the user\u2019s latent factors. This can be done by fully retraining the model \u2014 however, this method is infeasible in live systems as training the model for millions of ratings is computationally expensive and would need to be done at every new rating. Because the existing model is \u201calmost correct\u201d and would work as a good starting point for adding the user, the method can be optimised in many ways depending on the underlying implementation of the SVD algorithm. For example, some systems based on gradient descent could be initialised with the original model\u2019s weights (here, latent factors), which would allow the algorithm to convergence faster. However, Surprise\u2019s SVD uses a fixed number of epochs in running its gradient descent, and doesn\u2019t stop until all epochs are done. As such, a new operation for the SVD model was devised, which adds a new user to the model. This operation only trains the new user\u2019s latent factors, and leaves the factors for items and other users unchanged.", "The explanations I chose to add were based on association rules and influences and implemented in Python. The association rules explainer\u2019s implementation followed a previously proposed method [2] and aims to explain recommendations by showing a rule from the dataset describing what previously watched movies caused it to be recommended. The influence explanation aims to show which previously watched movies influenced the recommendation the most. The used influence method is novel, but it generates the same explanations as previously proposed Fast Influence Analysis [3]. It works by comparing the predicted rating of the recommended movie with and without having each previously watched movie in the training set. This is achieved through repeatedly re-training the model without these individual data points. Normally this would be impossibly expensive, but thanks to the optimised method developed for adding new users, it can be done efficiently.", "A user study was conducted to test the effect of explanation type to the measured trustworthiness and persuasiveness of the recommendation, defined in [4]. To achieve this, a web application simulating a movie recommending service was built. The front-end was built using React, and a back-end REST API was built using Flask. Besides providing access to the recommender system and explainers, the API also loaded data about real movies (e.g. titles, posters, and age ratings) through The Movie DP API. The web service was then deployed to my university web server.", "Besides the two explainers, the user study also contained a baseline explanation of \u201cThis movie was recommended because you are similar to users who liked it\u201d. The study was run by first asking the users to rate ten films they\u2019ve seen in the past and then showing them recommendations with explanations from each category. 41 users participated in the study, and a statistically significant difference in both persuasiveness (p=0.008) and trust (p=0.001) was observed between explanation types in favour of the association rules explainer.", "The explanation generators were also tested in various offline experiments. Most significantly, the association rules explainer was found to suffer from low model fidelity, the metric measuring the share of recommendations that can be made explainable [2]. The low model fidelity caused a slight selection bias to the explanations in the user study: the association rule explanations were added to recommendations of most popular films (as they were most commonly represented in the mined associations rules). It is surprising that this would result in an increased effect \u2014 in general, users ought to prefer recommendations that are better-targeted to them. It is possible that the \u201cfake\u201d nature of the research platform affects this \u2014 the popular but less targeted content may represent films the users knew beforehand and can easily tell that they want to watch them, but would not watch in a real system. In other experiments, the algorithm for re-training the recommender system for a single user was shown to be just as accurate as a full re-training, and the influence calculation was shown to suffer from a moderately high variance (i.e. multiple calculations of the same film\u2019s influence an produce quite different results) due to the random variation in re-training.", "The association rules explanation was liked by users, and would therefore make a good candidate as an explanation to be added to real systems. I used global association rules in generating the explanations: their advantage is that the process for mining the rules has to be done once only. The apriori algorithm [5] used in mining association rules is computationally expensive, especially for large datasets, which might cause significant issue in scaling up local- or cluster based [2] approaches.", "In order to deploy the association rules explanation to real systems, its model fidelity would need to be improved. If the explainer is treated as a machine learning model itself, then the thresholds of support and confidence (as well as other parameters for filtering the set of association rules) can be seen as its hyper-parameters. While the thresholds were set by hand to the researcher\u2019s best guess, they could also be determined through hyper-parameter optimisation. This was out of scope for this project, but could be an interesting way to make the association rules step more scientific and allow the method to be more easily applied to more diverse datasets.", "While the user study found no statistically significant effect in user-rated trust and persuasiveness for adding the influence-based explanations, they still warrant further study. Most importantly, the method of presenting the explanation to the users can be optimised further. Even if the influence explanations don\u2019t improve the trustworthiness and persuasiveness of the model, they do improve transparency. They could also be used for implementing special user interface components: for example, an UI element could show top recommendations amongst those that are most influenced by a specific item. This could be useful for implementing a more personalised version of the classic \u201cThis item is similar to the following items\u2026\u201d recommender system, which are often item- based neighbourhood models, or content-based models.", "This post showed the approach I took in implementing and evaluating a movie recommender service with explainable recommendations. The final part of the series will describe the radical content problem in recommender systems, and suggest how the association rules explanations could be used to help data scientists determine whether their recommender system suffers from it.", "[2]: Peake, G., & Wang, J. (2018, July). Explanation mining: Post hoc interpretability of latent factor models for recommendation systems. In Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (pp. 2060\u20132069). ACM.", "[3]: Cheng, W., Shen, Y., Huang, L., & Zhu, Y. (2019, July). Incorporating Interpretability into Latent Factor Models via Fast Influence Analysis. In Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (pp. 885\u2013893). ACM.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "I care about digital products that improve our lives. Software Engineer at a crypto startup."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F7aa42a0af023&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-implemented-explainable-movie-recommendations-using-python-7aa42a0af023&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-implemented-explainable-movie-recommendations-using-python-7aa42a0af023&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-implemented-explainable-movie-recommendations-using-python-7aa42a0af023&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-implemented-explainable-movie-recommendations-using-python-7aa42a0af023&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----7aa42a0af023--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----7aa42a0af023--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://villekuosmanen.medium.com/?source=post_page-----7aa42a0af023--------------------------------", "anchor_text": ""}, {"url": "https://villekuosmanen.medium.com/?source=post_page-----7aa42a0af023--------------------------------", "anchor_text": "Ville Kuosmanen"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F1a700a66e281&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-implemented-explainable-movie-recommendations-using-python-7aa42a0af023&user=Ville+Kuosmanen&userId=1a700a66e281&source=post_page-1a700a66e281----7aa42a0af023---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7aa42a0af023&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-implemented-explainable-movie-recommendations-using-python-7aa42a0af023&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7aa42a0af023&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-implemented-explainable-movie-recommendations-using-python-7aa42a0af023&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/villekuosmanen/SHProject/raw/master/dissertation.pdf", "anchor_text": "BSc dissertation"}, {"url": "https://towardsdatascience.com/explainable-recommendations-why-opening-black-boxes-matters-bd5754af63a2", "anchor_text": "Part 1"}, {"url": "https://towardsdatascience.com/what-is-the-radical-content-problem-and-does-your-recommender-system-suffer-from-it-7fe017f9a8b1", "anchor_text": "part 3"}, {"url": "https://github.com/villekuosmanen/SHProject/raw/master/dissertation.pdf", "anchor_text": "full dissertation"}, {"url": "https://github.com/villekuosmanen/WebAppSHProject", "anchor_text": "front-end"}, {"url": "https://github.com/villekuosmanen/SHProject/raw/master/dissertation.pdf", "anchor_text": "back-end"}, {"url": "http://surpriselib.com/", "anchor_text": "Surprise library"}, {"url": "https://reactjs.org/", "anchor_text": "React"}, {"url": "https://palletsprojects.com/p/flask/", "anchor_text": "Flask"}, {"url": "https://www.themoviedb.org/documentation/api?language=en-US", "anchor_text": "The Movie DP API"}, {"url": "https://medium.com/tag/recommendation-system?source=post_page-----7aa42a0af023---------------recommendation_system-----------------", "anchor_text": "Recommendation System"}, {"url": "https://medium.com/tag/software-development?source=post_page-----7aa42a0af023---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/react?source=post_page-----7aa42a0af023---------------react-----------------", "anchor_text": "React"}, {"url": "https://medium.com/tag/python?source=post_page-----7aa42a0af023---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----7aa42a0af023---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7aa42a0af023&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-implemented-explainable-movie-recommendations-using-python-7aa42a0af023&user=Ville+Kuosmanen&userId=1a700a66e281&source=-----7aa42a0af023---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7aa42a0af023&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-implemented-explainable-movie-recommendations-using-python-7aa42a0af023&user=Ville+Kuosmanen&userId=1a700a66e281&source=-----7aa42a0af023---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7aa42a0af023&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-implemented-explainable-movie-recommendations-using-python-7aa42a0af023&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----7aa42a0af023--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F7aa42a0af023&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-implemented-explainable-movie-recommendations-using-python-7aa42a0af023&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----7aa42a0af023---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----7aa42a0af023--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----7aa42a0af023--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----7aa42a0af023--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----7aa42a0af023--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----7aa42a0af023--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----7aa42a0af023--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----7aa42a0af023--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----7aa42a0af023--------------------------------", "anchor_text": ""}, {"url": "https://villekuosmanen.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://villekuosmanen.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Ville Kuosmanen"}, {"url": "https://villekuosmanen.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "154 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F1a700a66e281&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-implemented-explainable-movie-recommendations-using-python-7aa42a0af023&user=Ville+Kuosmanen&userId=1a700a66e281&source=post_page-1a700a66e281--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fd789c40a43a2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-implemented-explainable-movie-recommendations-using-python-7aa42a0af023&newsletterV3=1a700a66e281&newsletterV3Id=d789c40a43a2&user=Ville+Kuosmanen&userId=1a700a66e281&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}