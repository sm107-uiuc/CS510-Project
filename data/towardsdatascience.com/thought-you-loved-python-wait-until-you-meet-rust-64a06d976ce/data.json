{"url": "https://towardsdatascience.com/thought-you-loved-python-wait-until-you-meet-rust-64a06d976ce", "time": 1683010889.910156, "path": "towardsdatascience.com/thought-you-loved-python-wait-until-you-meet-rust-64a06d976ce/", "webpage": {"metadata": {"title": "Thought you loved Python? Wait until you meet Rust | by Ari Joury, PhD | Towards Data Science", "h1": "Thought you loved Python? Wait until you meet Rust", "description": "\u201cTechnology from the past come to save the future from itself.\u201d That\u2019s how Graydon Hoare, the creator of Rust, describes what he wants to achieve. That\u2019s one of the key hallmarks of Rust: using\u2026"}, "outgoing_paragraph_urls": [{"url": "https://steveklabnik.com/writing/rust-is-more-than-safety", "anchor_text": "describes", "paragraph_index": 0}, {"url": "https://insights.stackoverflow.com/survey/2020#most-loved-dreaded-and-wanted", "anchor_text": "love this language", "paragraph_index": 3}, {"url": "https://stackoverflow.blog/2020/01/20/what-is-rust-and-why-is-it-so-popular/", "anchor_text": "fall in love", "paragraph_index": 5}, {"url": "https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html", "anchor_text": "rules", "paragraph_index": 10}, {"url": "https://depth-first.com/articles/2020/01/27/rust-ownership-by-example/", "anchor_text": "more depth", "paragraph_index": 14}, {"url": "https://www.tilde.io", "anchor_text": "Tilde", "paragraph_index": 18}, {"url": "https://www.rust-lang.org/static/pdfs/Rust-Tilde-Whitepaper.pdf", "anchor_text": "by 90 percent", "paragraph_index": 18}, {"url": "https://learning-rust.github.io/docs/e3.option_and_result.html", "anchor_text": "useful feature", "paragraph_index": 22}, {"url": "https://www.stroustrup.com/ETAPS-corrected-draft.pdf", "anchor_text": "puts it", "paragraph_index": 25}, {"url": "https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine", "anchor_text": "rewritten", "paragraph_index": 31}, {"url": "https://medium.com/mozilla-tech/a-quantum-leap-for-the-web-a3b7174b3c12", "anchor_text": "vital parts of Firefox", "paragraph_index": 31}, {"url": "https://thenewstack.io/microsoft-rust-is-the-industrys-best-chance-at-safe-systems-programming/#", "anchor_text": "no longer safe", "paragraph_index": 31}, {"url": "https://insights.stackoverflow.com/survey/2020#most-popular-technologies", "anchor_text": "only five percent", "paragraph_index": 32}, {"url": "https://rustup.rs", "anchor_text": "rustup", "paragraph_index": 33}, {"url": "https://crates.io", "anchor_text": "crates.io", "paragraph_index": 34}, {"url": "https://docs.rs", "anchor_text": "docs.rs", "paragraph_index": 34}, {"url": "https://github.com/rust-lang/rust-clippy", "anchor_text": "Clippy", "paragraph_index": 34}, {"url": "https://github.com/rust-lang/rustfmt", "anchor_text": "rustfmt", "paragraph_index": 34}, {"url": "https://www.rust-lang.org/policies/code-of-conduct", "anchor_text": "friendliness", "paragraph_index": 35}, {"url": "https://steveklabnik.com/writing/rust-is-more-than-safety", "anchor_text": "more than safety", "paragraph_index": 41}, {"url": "https://towardsdatascience.com/one-in-two-pythonistas-should-learn-golang-now-ba8dacaf06e8", "anchor_text": "Go", "paragraph_index": 42}, {"url": "https://towardsdatascience.com/bye-bye-python-hello-julia-9230bff0df62", "anchor_text": "Julia", "paragraph_index": 42}, {"url": "https://graydon2.dreamwidth.org/253769.html", "anchor_text": "more work to do", "paragraph_index": 43}, {"url": "https://medium.com/u/6a6a5a2d9af0?source=post_page-----64a06d976ce--------------------------------", "anchor_text": "Ketut Artayasa", "paragraph_index": 44}, {"url": "https://twitter.com/dondishdev", "anchor_text": "Dondish", "paragraph_index": 44}, {"url": "https://arijoury.medium.com/membership", "anchor_text": "https://arijoury.medium.com/membership", "paragraph_index": 46}], "all_paragraphs": ["\u201cTechnology from the past come to save the future from itself.\u201d That\u2019s how Graydon Hoare, the creator of Rust, describes what he wants to achieve.", "That\u2019s one of the key hallmarks of Rust: using technologies that are well-known to academia but rarely implemented in contemporary programming languages. Technologies that are old, reliable, and sometimes forgotten. But which, above all, work extremely well.", "These technologies are used mainly for one thing: safety.", "Sounds boring? It is not, if you ask the community. A whopping 86.1 percent of Rust developers love this language above all others, making it the most loved language since 2016 according to this year\u2019s StackOverflow developer survey.", "You\u2019d think that software developers are among the most innovative humans on this planet. Rust, however, is the exact opposite of the \u201cmove fast and break things\u201d mantra. Nevertheless, Rust developers are almost guaranteed to learn concepts they\u2019ve never heard about before.", "From the novelty of systems programming for some developers over algebraic data types to Rust\u2019s very own approach to memory safety: Every developer can find something new and incredibly useful to learn. And there are more reasons to fall in love with Rust.", "One challenge of every programming language is managing a computer\u2019s memory in a safe and efficient way. Python, for example, has a garbage collector that constantly looks out for no longer used memory and cleans it up while the program runs.", "In other languages, like C and C++, the programmer must explicitly allocate and free memory as they go. Since all memory-related problems are therefore cleared before the program runs, this approach is much better for optimizing performance.", "On the other hand, memory is yet another thing that developers need to think about all the time. This is one of the reasons why it takes much longer to write a program in C than in Python, even if it does the same thing at the end of the day.", "Rust goes an alternative way: Memory is allocated through a system of ownership at compile time. It\u2019s a neat hack to ensure that unused data is being cleaned without forcing the programmer to think about allocating and freeing memory all the time.", "Basically, ownership is a collection of three rules:", "A simple example is assigning a vector in Rust:", "In the second line, the vector [1, 2, 3] with the owner a is created. After that, b becomes the owner of the vector. Since the correct owner is called in the print statement, this program compiles and returns the expected result when executed:", "On the other hand, you could try to call the vector with its previous owner, a, like so:", "In this case, the compiler throws an error because a has already been dropped in the third line. There is a lot more depth to the subject, but this is the basic idea.", "In comparison, Python would run through in the second case. Its garbage collector would drop a only after the last time that it is called, which is nice for the developer but not so nice in terms of memory space.", "In C, things would be a bit more complicated: you would have to allocate memory space for a, then point it to the vector, then allocate more memory space for b, point b to a, and finally free the space taken up by a and b when you\u2019re done.", "In this sense, the approach of Rust to memory is a compromise between developing speed and performance. While it is not as dead-easy to write as Python, it\u2019s not as clunky as C once you\u2019ve understood the concept of ownership.", "On the other hand, the efficiency is quite astounding: The developer team Tilde, for example, managed to reduce their memory usage by 90 percent after rewriting some JavaHTTP pieces in Rust.", "It\u2019s almost a religious war between fans of dynamic typing versus static typing. While it\u2019s much easier to produce software in languages with dynamic typing, the code can become unmaintainable pretty quickly. This is one of the reasons why Python code can be quite hard to maintain, compared to C for example.", "On the other hand, having to declare the type of each variable C-style can get rather annoying. If you\u2019ve ever tried to use a double in a function that returns a float type in C, you know what I mean.", "Rust goes a middle way: It\u2019s a static type system, but it only requires the programmer to specify top-level types like function arguments and constants. Inside function bodies, Python-style type inference is allowed.", "One particularly useful feature of Rust is that it has a None type as well. This allows you to handle exceptions at compile-time, so that the program is guaranteed to run smoothly at the end user. Consider this example, where we can get the full name of a person regardless of whether he has a middle name or not:", "While versions of the None workaround exist in other languages, too, it showcases the ambition of Rust in a neat way: not making things too hard for writing while keeping the code as durable and maintainable as possible.", "While Python is a general-purpose programming language, Rust is, like C, decidedly for systems programming. While Rust isn\u2019t the ideal language if you\u2019re making an application for your end-user, it is perfect for building pieces of software that provide services to other softwares.", "As such, efficiency is at the core Rust. The best demonstration of that are zero-cost abstractions, which interpret code while keeping memory usage to a minimum. As Bjarne Stroustrup, the inventor of C++, puts it: \u201cWhat you don\u2019t use, you don\u2019t pay for. And further: What you do use, you couldn\u2019t hand code any better.\u201d", "For example, consider adding all integer numbers up to 1,000 in Python:", "This does 1,000 iterations and additions every time the code runs \u2014 and you can imagine how much that can slow the code down. In contrast, consider the same thing in Rust:", "This compiles down to the constant 499500. Effectively, the memory usage has just been decreased by a factor of 1,000.", "While these abstractions exist in C as well, Rust makes heavy use of them \u2014 in fact, one goal is to add as many zero-cost abstractions to the language as possible. In this sense, Rust is a bit like next-level C.", "C has been around for more than 40 years, and Rust aims to do the same. Rust places such a high emphasis on backwards-compatibility that you can still run code in Rust 1.0 today. Likewise, if you write Rust code today, you should still be able to run it in twenty years. Rust won\u2019t get rusty!", "With its emphasis on safety and sustainability and all its nifty details speaking for it, it\u2019s no wonder that Dropbox has rewritten a lot of its core structure in Rust. Mozilla, Rust\u2019s first big sponsor, has written vital parts of Firefox in it. Microsoft deems C and C++ no longer safe for mission-critical software and is investing more and more in Rust.", "And it\u2019s not only big corporations \u2014 the love for Rust translates down to the individual programmer. Even though only five percent of StackOverflow\u2019s survey respondents use Rust so far, these developers are extremely enthusiastic about the language.", "And there are reasons for that. Not only are the language specification and the compiler very well thought through. There is rustup to install and manage toolchains. There\u2019s Cargo, a command line tool that comes with each Rust installation and helps manage dependencies, run tests and generate documentation.", "There\u2019s crates.io where users can share and discover libraries, and docs.rs where they are documented. There are compiler lints from Clippy and automatic formatting from rustfmt.", "Beyond that, there are official and unofficial chats, subreddits, user\u2019s forums, StackOverflow questions, and conferences all over the world. With a community that puts friendliness above everything, is there anything more to ask for?", "The one thing that is discouraging about Rust is the high startup cost. While you would need one or two days to get productive in most languages, it\u2019s more like one or two weeks in Rust.", "This is due to the many new concepts that other languages don\u2019t use, and the fact that there are typically a lot of errors at compile time. You need to handle all exceptions on day one, and can\u2019t just write a scratch code that runs and add exceptions later, like you\u2019d do in Python.", "In addition, since Rust is still pretty new, not all libraries that you might want are there yet. Apart from the official documentation and various questions on StackOverflow, there are also not that many tutorials.", "The good news is that once you\u2019ve learnt the concepts and got your program compiled, it runs through like a charm. Plus, it should still work in twenty years given the backwards-compatibility.", "Given the sustainability of your code and the fact that Rust is backed by a number of large corporations, one or two weeks of up-front learning might well be worth it, despite the downsides.", "Rust is more than safety. But it\u2019s hard to deny that many of its core concepts aim at eliminating memory leaks and other safety issues. And in an age where software is everything, safety is a must.", "There is probably a space for every upcoming language: Go is populating the space of Python and Java more and more, Julia is going after Python in Data Science, and Rust is growing in the realm of Python and C++. What makes Rust special is its incredible community, its innovative features, and the fact that it\u2019s designed to work for decades to come.", "There\u2019s a lot more work to do, and only a fraction of that can and will be done in Rust. The new languages of today have a strong chance of sticking around for a while, even though other languages will emerge in the next few years, too. But if I had to place my cards on one language, Rust would be a safe bet.", "Edit: As Ketut Artayasa and Twitter user Dondish have pointed out, Bjarne Stroustrup is the inventor of C++, not of C. This was wrong in the initial version of this story. In addition, C# had been mentioned when C++ was meant. This has been corrected, too.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Lost in my thoughts, mostly about tech. https://arijoury.medium.com/membership"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F64a06d976ce&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthought-you-loved-python-wait-until-you-meet-rust-64a06d976ce&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthought-you-loved-python-wait-until-you-meet-rust-64a06d976ce&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthought-you-loved-python-wait-until-you-meet-rust-64a06d976ce&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthought-you-loved-python-wait-until-you-meet-rust-64a06d976ce&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----64a06d976ce--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----64a06d976ce--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://arijoury.medium.com/?source=post_page-----64a06d976ce--------------------------------", "anchor_text": ""}, {"url": "https://arijoury.medium.com/?source=post_page-----64a06d976ce--------------------------------", "anchor_text": "Ari Joury, PhD"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F593908e0206&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthought-you-loved-python-wait-until-you-meet-rust-64a06d976ce&user=Ari+Joury%2C+PhD&userId=593908e0206&source=post_page-593908e0206----64a06d976ce---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F64a06d976ce&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthought-you-loved-python-wait-until-you-meet-rust-64a06d976ce&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F64a06d976ce&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthought-you-loved-python-wait-until-you-meet-rust-64a06d976ce&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://unsplash.com/@nicolegeri?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Nicole Geri"}, {"url": "https://unsplash.com/s/photos/rusty?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://steveklabnik.com/writing/rust-is-more-than-safety", "anchor_text": "describes"}, {"url": "https://insights.stackoverflow.com/survey/2020#most-loved-dreaded-and-wanted", "anchor_text": "love this language"}, {"url": "https://stackoverflow.blog/2020/01/20/what-is-rust-and-why-is-it-so-popular/", "anchor_text": "fall in love"}, {"url": "https://towardsdatascience.com/you-want-to-learn-rust-but-you-dont-know-where-to-start-fc826402d5ba", "anchor_text": "You Want to Learn Rust but You Don\u2019t Know Where to StartA Complete Resource for Rust Beginnerstowardsdatascience.com"}, {"url": "https://unsplash.com/@andyfalconerphotography?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Andy Falconer"}, {"url": "https://unsplash.com/s/photos/rusty?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html", "anchor_text": "rules"}, {"url": "https://depth-first.com/articles/2020/01/27/rust-ownership-by-example/", "anchor_text": "more depth"}, {"url": "https://www.tilde.io", "anchor_text": "Tilde"}, {"url": "https://www.rust-lang.org/static/pdfs/Rust-Tilde-Whitepaper.pdf", "anchor_text": "by 90 percent"}, {"url": "https://unsplash.com/@tarasovaanastasiia?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Anastasiia Tarasova"}, {"url": "https://unsplash.com/s/photos/rusty?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://learning-rust.github.io/docs/e3.option_and_result.html", "anchor_text": "useful feature"}, {"url": "https://www.stroustrup.com/ETAPS-corrected-draft.pdf", "anchor_text": "puts it"}, {"url": "https://towardsdatascience.com/rust-powered-command-line-utilities-to-increase-your-productivity-eea03a4cf83a", "anchor_text": "Rust-Powered Command-Line Utilities to Increase Your ProductivityModern and Fast Tools Under Your Belttowardsdatascience.com"}, {"url": "https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine", "anchor_text": "rewritten"}, {"url": "https://medium.com/mozilla-tech/a-quantum-leap-for-the-web-a3b7174b3c12", "anchor_text": "vital parts of Firefox"}, {"url": "https://thenewstack.io/microsoft-rust-is-the-industrys-best-chance-at-safe-systems-programming/#", "anchor_text": "no longer safe"}, {"url": "https://insights.stackoverflow.com/survey/2020#most-popular-technologies", "anchor_text": "only five percent"}, {"url": "https://rustup.rs", "anchor_text": "rustup"}, {"url": "https://crates.io", "anchor_text": "crates.io"}, {"url": "https://docs.rs", "anchor_text": "docs.rs"}, {"url": "https://github.com/rust-lang/rust-clippy", "anchor_text": "Clippy"}, {"url": "https://github.com/rust-lang/rustfmt", "anchor_text": "rustfmt"}, {"url": "https://www.rust-lang.org/policies/code-of-conduct", "anchor_text": "friendliness"}, {"url": "https://unsplash.com/@lamerbrain?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Matt Lamers"}, {"url": "https://unsplash.com/s/photos/rusty?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText", "anchor_text": "Unsplash"}, {"url": "https://steveklabnik.com/writing/rust-is-more-than-safety", "anchor_text": "more than safety"}, {"url": "https://towardsdatascience.com/one-in-two-pythonistas-should-learn-golang-now-ba8dacaf06e8", "anchor_text": "Go"}, {"url": "https://towardsdatascience.com/bye-bye-python-hello-julia-9230bff0df62", "anchor_text": "Julia"}, {"url": "https://graydon2.dreamwidth.org/253769.html", "anchor_text": "more work to do"}, {"url": "https://medium.com/u/6a6a5a2d9af0?source=post_page-----64a06d976ce--------------------------------", "anchor_text": "Ketut Artayasa"}, {"url": "https://twitter.com/dondishdev", "anchor_text": "Dondish"}, {"url": "https://medium.com/tag/towards-data-science?source=post_page-----64a06d976ce---------------towards_data_science-----------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/tag/programming-languages?source=post_page-----64a06d976ce---------------programming_languages-----------------", "anchor_text": "Programming Languages"}, {"url": "https://medium.com/tag/software-development?source=post_page-----64a06d976ce---------------software_development-----------------", "anchor_text": "Software Development"}, {"url": "https://medium.com/tag/software?source=post_page-----64a06d976ce---------------software-----------------", "anchor_text": "Software"}, {"url": "https://medium.com/tag/programming?source=post_page-----64a06d976ce---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F64a06d976ce&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthought-you-loved-python-wait-until-you-meet-rust-64a06d976ce&user=Ari+Joury%2C+PhD&userId=593908e0206&source=-----64a06d976ce---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F64a06d976ce&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthought-you-loved-python-wait-until-you-meet-rust-64a06d976ce&user=Ari+Joury%2C+PhD&userId=593908e0206&source=-----64a06d976ce---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F64a06d976ce&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthought-you-loved-python-wait-until-you-meet-rust-64a06d976ce&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----64a06d976ce--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F64a06d976ce&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthought-you-loved-python-wait-until-you-meet-rust-64a06d976ce&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----64a06d976ce---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----64a06d976ce--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----64a06d976ce--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----64a06d976ce--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----64a06d976ce--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----64a06d976ce--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----64a06d976ce--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----64a06d976ce--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----64a06d976ce--------------------------------", "anchor_text": ""}, {"url": "https://arijoury.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://arijoury.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Ari Joury, PhD"}, {"url": "https://arijoury.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "6.2K Followers"}, {"url": "https://arijoury.medium.com/membership", "anchor_text": "https://arijoury.medium.com/membership"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F593908e0206&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthought-you-loved-python-wait-until-you-meet-rust-64a06d976ce&user=Ari+Joury%2C+PhD&userId=593908e0206&source=post_page-593908e0206--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F1b4593a6442&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthought-you-loved-python-wait-until-you-meet-rust-64a06d976ce&newsletterV3=593908e0206&newsletterV3Id=1b4593a6442&user=Ari+Joury%2C+PhD&userId=593908e0206&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}