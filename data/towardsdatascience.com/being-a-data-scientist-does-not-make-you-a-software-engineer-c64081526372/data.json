{"url": "https://towardsdatascience.com/being-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372", "time": 1682995234.305674, "path": "towardsdatascience.com/being-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372/", "webpage": {"metadata": {"title": "Being a Data Scientist does not make you a Software Engineer! | by Semi Koen | Towards Data Science", "h1": "Being a Data Scientist does not make you a Software Engineer!", "description": "How to build scalable Machine Learning systems: software engineering architecture and design basics and how to apply them on each step of the ML Pipeline."}, "outgoing_paragraph_urls": [{"url": "https://towardsdatascience.com/being-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372?source=friends_link&sk=fd1e5ace8c5bfdaa6e1b1ace201dbff1", "anchor_text": "Part 1", "paragraph_index": 2}, {"url": "https://towardsdatascience.com/architecting-a-machine-learning-pipeline-a847f094d1c7?source=friends_link&sk=f934e209896d28b1f3a11f081cb18cb3", "anchor_text": "Part 2", "paragraph_index": 2}, {"url": "https://towardsdatascience.com/not-yet-another-article-on-machine-learning-e67f8812ba86", "anchor_text": "As we have seen before", "paragraph_index": 3}, {"url": "https://www.reactivemanifesto.org", "anchor_text": "Reactive Manifesto", "paragraph_index": 12}, {"url": "https://www.amazon.co.uk/dp/0201633612", "anchor_text": "Design patterns: elements of reusable object-oriented software", "paragraph_index": 40}, {"url": "https://en.wikipedia.org/wiki/Robert_C._Martin", "anchor_text": "Uncle Bob", "paragraph_index": 42}, {"url": "https://sites.google.com/site/unclebobconsultingllc/getting-a-solid-start", "anchor_text": "They are not laws. They are not perfect truths. The are statements on the order of: An apple a day keeps the doctor away", "paragraph_index": 42}, {"url": "https://blogs.msdn.microsoft.com/cdndevs/2009/07/15/the-solid-principles-explained-with-motivational-posters/", "anchor_text": "The SOLID Principles, Explained with Motivational Posters", "paragraph_index": 56}, {"url": "https://towardsdatascience.com/architecting-a-machine-learning-pipeline-a847f094d1c7?source=friends_link&sk=f934e209896d28b1f3a11f081cb18cb3", "anchor_text": "Part 2", "paragraph_index": 59}, {"url": "https://medium.com/@semika", "anchor_text": "Medium", "paragraph_index": 60}], "all_paragraphs": ["Hopefully I caught your attention with the controversial title. Great! Now bear with me as I am going to show you how you can build a scalable architecture to surround your witty Data Science solution!", "I am starting a series of 2 articles that will cover the basics of software engineering with regards to architecture and design and how to apply these on each step of the Machine Learning Pipeline:", "Part 1: Problem Statement | Architectural Styles | Design Patterns | SOLIDPart 2: Architecting A Machine Learning Pipeline", "As we have seen before in the famous Venn diagram of Steven Geringer, Data Science is the intersection of 3 disciplines: Computer Science, Mathematics/Statistics and a particular Domain knowledge.", "Having basic (or even advanced) programming skills is key to put your end to end experiment together, however it does not mean that you have created an application that is production ready. Unless you have come into Data Science and Machine Learning (ML) from an IT background and have tangible experience into building enterprise, distributed, solid systems, your Jupyter notebook does not qualify as a great piece of software and sadly does not make you a Software Engineer!", "What you have built is a great prototype of a predictive product, but you still have to push it through the engineering roadmap. What you need is a team of professional Software Engineers by your side to take your (disposable) proof of concept and turn it into a performant, reliable, loosely coupled and scalable system!", "Everything is designed; few things are designed well!", "In this series we will see some ideas of how this can be achieved\u2026 We will start with the basics in Part 1, and gradually design the holistic architecture in Part 2. The suggested architecture will be technology agnostic. The ML pipeline will be broken down into layers with clear demarcation of responsibilities, and at each layer, we can choose from a number of technology stacks.", "But let\u2019s start by defining how a successful solution looks like!", "The main objectives are to build a system that:", "\u25b8 Reduces latency;\u25b8 Is integrated but loosely coupled with the other parts of the system, e.g. data stores, reporting, graphical user interface;\u25b8 Can scale both horizontally and vertically;\u25b8 Is message driven i.e. the system communicates via asynchronous, non-blocking message passing;\u25b8 Provides efficient computation with regards to workload management;\u25b8 Is fault-tolerant and self healing i.e. breakdown management;\u25b8 Supports batch and real-time processing.", "We will first introduce what a reactive system is and will proceed to a quick tour of the most prevalent architectural patterns.", "The reactive systems design paradigm is a coherent approach to building better systems, which are designed according to the tenets of the Reactive Manifesto. Each reactive principle maps to an important system dimension of scalability:\u2022 Responsive \u2192 Time\u2022 Elastic \u2192 Load\u2022 Resilient \u2192 Error\u2022 Message Driven \u2192 Communication.", "SOA centres around the concept of decomposing business problems into services. The services share information via the network and they also share code (i.e. common components) to maintain consistency and reduce development effort.The service provider publishes a contract that specifies the nature of the service and how to use it. The service consumer can locate the service metadata in the registry and develop the required client components to bind to it and use it.", "An orchestrator is a composite service which is responsible for invoking and combining other services. Alternatively, choreography employs a decentralised approach for service composition, i.e. services interact with the exchange of messages/events.", "A streaming architecture comprises of the following components:", "The Lambda (\u03bb) Architecture is designed to handle both real-time and historically aggregated batched data in an integrated fashion. It separates the duties of real-time and batch processing while query layers present a unified view of all of the data.The concept is simple: When data is generated, it is processed before stored, so analysis can include data generated in the last second, the last minute, or the last hour by only processing the incoming data \u2014 not all the data.", "Microservices, is an architectural style that structures an application as a collection of small, autonomous, loosely coupled and collaborating services, modelled around a business domain. The services communicate using either synchronous protocols such as HTTP/REST or asynchronous protocols such as AMQP. They can be developed and deployed independently of one another. Each service has its own database in order to be decoupled from other services.", "REST is an architectural style for developing web services and it builds upon existing features of the internet\u2019s HTTP. It allows transferring, accessing and manipulating textual data representations, in a stateless manner i.e. applications can communicate agnostically.", "A RESTful API service is exposed through a Uniform Resource Locator (URL), which provides the capability of data being created, requested, updated, or deleted (CRUD). It is best used to manage systems by decoupling the information that is produced and consumed from the technologies that produce and consume it!", "We will only scratch the surface on this topic and will only discuss those patterns that I may be referring to in the 2nd Part of the series. \u2014 [Hard to know just yet, but these are the patterns I use on a daily basis]", "A software design pattern is an optimised, repeatable solution to a commonly occurring problem in software engineering. It is a template for solving a problem that can be used in many different situations.", "The Strategy pattern defines a family of algorithms, put each one in a separate class and make them interchangeable. Encapsulating the behaviour in separate classes, eliminates any conditional statements and the correct algorithm (i.e. strategy) is chosen at run-time.", "\u2014 Indication for usage: There are different implementations of a business rule or different variants of an algorithm are needed.", "The Template Method intends to abstract out a common process from different procedures. It defines the skeleton of an algorithm, deferring some steps to sub-classes. The sub-classes can override some behaviour but cannot change the skeleton.", "\u2014 Indication for usage: There is a consistent set of steps to follow but individual steps may have different implementations.\u2b50\ufe0f Difference to Strategy Pattern: \u2022 Template: Algorithm is selected at compile-time by sub-classing. \u2022 Strategy: Algorithm is selected at run-time by containment.", "The Chain of Responsibility pattern suggests avoiding coupling the client (sender of requests) with the receiver, by enabling one or more handlers to cater for the requests. These handlers are linked into a chain i.e. each handler has a reference to the next handler in the chain.", "\u2014 Indication for usage: More than one objects may handle a request, and the handler (nor the sequence) isn\u2019t known a priori.", "The Observer pattern (aka Publish/Subscribe or PubSub for short) enables easy broadcast of communication by defining a one-to-many dependency between objects, so that when one object undergoes a change in state, all its dependents are notified and updated automatically. It is the observers responsibility to register the event they are \u2018observing\u2019.", "\u2014 Indication for usage: When a change to one object requires changing others, and you don\u2019t know how many objects need to be changed.", "The Builder pattern is intended to construct a complex object in a step-by-step fashion and also separate the construction from its representation. In essence, it allows to produce different types and representations of an object using the same code.", "\u2014 Indication for usage: Several kinds of complex objects can be built with the same overall build process, albeit the variation in the individual construction steps.", "The Factory Method defines an interface for creating objects, but the instantiation is done by sub-classes.", "\u2014 Indication for usage: The exact types and dependencies of the objects are not known beforehand.", "The Abstract Factory captures how to create families of related objects without specifying their concrete classes.", "\u2014 Indication for usage: Different cases exist that require different implementations of sets of rules, that either unknown beforehand or extensibility is a concern.\u2b50\ufe0f Difference to Abstract Method: \u2022 Abstract Factory: Creates other factories, and these factories in turn create objects derived from base classes. \u2022 Factory Method: Creates objects that derive from a particular base class.", "The Decorator pattern attaches new responsibilities to an object dynamically, by placing it inside a special wrapper class that contains these behaviours, so there is no impact to the signature of the original methods (composition over inheritance).", "\u2014 Indication for usage: Assigning extra behaviours to objects at run-time without breaking the code that uses these objects.", "The Repository pattern addresses code centralisation for data retrieval and persistence and provides an abstraction for data access operations i.e. acts like an in-memory collection of domain objects to allow for CRUD methods to be performed, and removes any database concerns.", "\u2014 Indication for usage: Decoupling the business logic with data access code.", "Want to learn more about patterns? Start with the de-facto book of the \u2018Gang of Four\u2019, namely: \u2018Design patterns: elements of reusable object-oriented software\u2019. The following diagram with the patterns\u2019 relationships is noteworthy \u2014 pretty spiffy, eh?", "We will only toy with the SOLID principles here, as they are essential for every software developer to know.", "As Uncle Bob says: \u201cThey are not laws. They are not perfect truths. The are statements on the order of: An apple a day keeps the doctor away\u201d.", "What this means is that they are not some kind of \u2018magic\u2019 that lead to the Promised Land of milk, honey and great software, but nevertheless they are crucial contributors to robust and long lasting software.", "In a nutshell, these principles revolve around two major concepts, which are the building blocks for successful enterprise applications: coupling is the degree to which one class knows about and interacts with another class and cohesion indicates the degree to which a class has a single purpose. In other words:", "\u2022 Coupling is all about how classes interact with each other, and\u2022 Cohesion focuses on how a single class is designed.", "A class should have one, and only one, reason to change.", "This is self explanatory, but easier said than done \u2014 it is always tempting to add new behaviours into existing classes, but that\u2019s a recipe for disaster: each behaviour could be a reason to change in the future, so less behaviours result in less opportunities to introduce bugs during changes.", "You should be able to extend a class\u2019 behaviour, without modifying it.", "The classes you use should be open for extension but closed for modification. One way to achieve this is via inheritance i.e. create a sub-class so the original class is closed for modification, but custom code is added to the sub-class to introduce a new behaviour.", "Derived classes must be substitutable for their base classes.", "When extending the behaviour of a class A into a sub-class B you must ensure that you can still exchange A with B without breaking anything. This can be a bit catchy especially when combining this principle with the Open-Closed one.", "Make fine grained interfaces that are client specific.", "Interfaces and classes must be as specialised as possible, so calling clients do not depend on methods they don\u2019t use. This goes hand in hand with the Single Responsibility principle.", "Depend on abstractions, not on concretions.", "High level classes should not depend on low level ones. They should both depend on abstractions. Likewise, abstractions should not depend on details. Details should depend on abstractions.", "I have created this quick reference diagram. If you wonder where my inspiration for the little symbols on the left has come from, please take a look at: \u2018\u2018The SOLID Principles, Explained with Motivational Posters\u2019\u2019 article \u2014 I love how the author has added a fun twist on the principles \ud83d\udc24.", "This is not an exhaustive list of all the software engineering concepts but it is the basis of what we are going to use in the next article. I hope it gives you a good flavour of the contributing factors to building scalable software. Making the application design resilient to changes is key to building a successful solution \u2014 when the design process is rushed there is a fine to pay at the end of the project when errors are uncovered.", "Good design is obvious. Great design is transparent.", "Thanks for reading! Part 2 is coming soon\u2026", "I regularly write about Technology & Data on Medium \u2014 if you would like to read my future posts then please \u2018Follow\u2019 me!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Passionate about creating elegant software. Fuelled by iced coffees & witty words. Currently in Japan. Opinions are my own; often flawed"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fc64081526372&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbeing-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbeing-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbeing-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbeing-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----c64081526372--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c64081526372--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://semika.medium.com/?source=post_page-----c64081526372--------------------------------", "anchor_text": ""}, {"url": "https://semika.medium.com/?source=post_page-----c64081526372--------------------------------", "anchor_text": "Semi Koen"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Faabf98f9b9a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbeing-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372&user=Semi+Koen&userId=aabf98f9b9a&source=post_page-aabf98f9b9a----c64081526372---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc64081526372&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbeing-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc64081526372&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbeing-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://medium.com/towards-data-science/data-science-in-the-real-world/home", "anchor_text": "Data Science in the Real World"}, {"url": "https://towardsdatascience.com/being-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372?source=friends_link&sk=fd1e5ace8c5bfdaa6e1b1ace201dbff1", "anchor_text": "Part 1"}, {"url": "https://towardsdatascience.com/architecting-a-machine-learning-pipeline-a847f094d1c7?source=friends_link&sk=f934e209896d28b1f3a11f081cb18cb3", "anchor_text": "Part 2"}, {"url": "https://towardsdatascience.com/not-yet-another-article-on-machine-learning-e67f8812ba86", "anchor_text": "As we have seen before"}, {"url": "https://towardsdatascience.com/not-yet-another-article-on-machine-learning-e67f8812ba86", "anchor_text": ""}, {"url": "https://www.reactivemanifesto.org", "anchor_text": "Reactive Manifesto"}, {"url": "https://www.amazon.co.uk/dp/0201633612", "anchor_text": "Design patterns: elements of reusable object-oriented software"}, {"url": "https://www.amazon.co.uk/dp/0201633612", "anchor_text": "Design Patterns: Elements of Reusable Object-Oriented Software"}, {"url": "https://en.wikipedia.org/wiki/Robert_C._Martin", "anchor_text": "Uncle Bob"}, {"url": "https://sites.google.com/site/unclebobconsultingllc/getting-a-solid-start", "anchor_text": "They are not laws. They are not perfect truths. The are statements on the order of: An apple a day keeps the doctor away"}, {"url": "https://blogs.msdn.microsoft.com/cdndevs/2009/07/15/the-solid-principles-explained-with-motivational-posters/", "anchor_text": "The SOLID Principles, Explained with Motivational Posters"}, {"url": "https://towardsdatascience.com/architecting-a-machine-learning-pipeline-a847f094d1c7?source=friends_link&sk=f934e209896d28b1f3a11f081cb18cb3", "anchor_text": "Part 2"}, {"url": "https://medium.com/@semika", "anchor_text": "Medium"}, {"url": "https://medium.com/tag/data-science?source=post_page-----c64081526372---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----c64081526372---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/programming?source=post_page-----c64081526372---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/technology?source=post_page-----c64081526372---------------technology-----------------", "anchor_text": "Technology"}, {"url": "https://medium.com/tag/women-in-tech?source=post_page-----c64081526372---------------women_in_tech-----------------", "anchor_text": "Women In Tech"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc64081526372&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbeing-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372&user=Semi+Koen&userId=aabf98f9b9a&source=-----c64081526372---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc64081526372&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbeing-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372&user=Semi+Koen&userId=aabf98f9b9a&source=-----c64081526372---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc64081526372&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbeing-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----c64081526372--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fc64081526372&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbeing-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----c64081526372---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----c64081526372--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----c64081526372--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----c64081526372--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----c64081526372--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----c64081526372--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----c64081526372--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----c64081526372--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----c64081526372--------------------------------", "anchor_text": ""}, {"url": "https://semika.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://semika.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Semi Koen"}, {"url": "https://semika.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "7.7K Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Faabf98f9b9a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbeing-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372&user=Semi+Koen&userId=aabf98f9b9a&source=post_page-aabf98f9b9a--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F31f7468ed9ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbeing-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372&newsletterV3=aabf98f9b9a&newsletterV3Id=31f7468ed9ff&user=Semi+Koen&userId=aabf98f9b9a&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}