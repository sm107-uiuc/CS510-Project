{"url": "https://towardsdatascience.com/turn-julia-into-python-and-duck-type-in-a-statically-typed-language-119f708936ff", "time": 1683006928.141881, "path": "towardsdatascience.com/turn-julia-into-python-and-duck-type-in-a-statically-typed-language-119f708936ff/", "webpage": {"metadata": {"title": "Turn Julia Into Python and Duck-Type In a Functional Language | by Emma Boudreau | Towards Data Science", "h1": "Turn Julia Into Python and Duck-Type In a Functional Language", "description": "Julia is an incredible language in a lot of ways and has a surprising amount of support for mutability for being a primarily functional programming language that is functional. Furthermore, Julia\u2026"}, "outgoing_paragraph_urls": [{"url": "http://twitter.com/time", "anchor_text": "@time", "paragraph_index": 22}], "all_paragraphs": ["(There is a video you can watch with this one! Hope you enjoy!)", "Julia is an incredible language in a lot of ways and has a surprising amount of support for mutability for being a primarily functional programming language that is functional. Furthermore, Julia includes its dispatch out of the box which is an amazing tool for easy and efficient polymorphism. Most Julia users tend to be well-aware of Julia\u2019s dispatch, but something they might not know about Julia is the ability to manipulate the language to duck-type. Using this methodology, we can make Julia look and feel incredibly similar to Python when using our types and their respective methods.", "It\u2019s very likely that if you\u2019ve spent any time with Julia, you are familiar with Julia\u2019s Dispatch. Julia\u2019s Dispatch can be used to apply different methods to handle different types with parametric polymorphism. Though Julia is very dynamic in this way, despite this (along with mutable declarations), it\u2019s important to remember that we still retain the benefits of Julia being a functional programming language. Consider these first two example functions:", "A DataFrame is a type that cannot be iterated element-wise in the same way that we typically would with an array. In order to iterate a DataFrame we need to use the eachcol() method. We could use two entirely separate functions to handle these two types, but alternatively and much more intelligently, we could just use Julia\u2019s dispatch to handle these two types with the same method.", "Now whenever a DataFrame is passed through the handle() method, we get the return we were expecting:", "And likewise, we get the exact same result when we pass an array:", "Though we do get a funny oversight array printed out for us. Julia does this because it gives a return anytime an array is looped through like this:", "But of course, each call of println() does not modify the existing values or provide a return, so Julia returns nothing because nothing was returned. It\u2019s an interesting and somewhat funny oversight that I have never noticed before because of course", "I don\u2019t often print arrays element-wise.", "Using some interesting type construction tricks in Julia, we can effectively \u201c duck-type\u201d in Julia like we would in some object-oriented programming languages like Python and C++. This is incredibly useful for creating objects with mutable data and child methods to manipulate that data. Another massive benefit of this is that we can have an initialization function that is run whenever our type is created. This, of course, is a staple of Python as an example, where the __init__ function is called nearly every-time a new type is created. Consider this function:", "creates a new type containing all of the data and functions that we put into the creation of that type. This can be both data; in the Int64 example of number, or it can be functions; in the example of double() or add5(). Now we can call our functions as children whenever we create this type.", "However, there are a few issues that stand with using this methodology. The first issue that you might encounter is that when using this method, the type will not have a value. So if we were to try to call typeof() for example:", "Another disadvantage to this method is accessing the data that we asserted as children of our new type, in this example that data is the Int64 \u201c number.\u201d Whenever we call on this data, we get a type of Core.Box:", "And if we were to try and add this integer with another integer, it wouldn\u2019t work!", "However, we can mitigate this by adding a new method that returns the data \u201c number.\u201d Consider this example:", "And then we can use the number from that return as we would a normal Int64. As you would expect in Python, when the data is manipulated with our functions inside of our type, it does actually apply that manipulation to the data that is a child of the type.", "While these are certainly great methods of using functions with structs separately, they also work incredibly well together. A great example of this is how I used both of them put together in my modular graphing library for Julia,", "For this example, we have two methods that are both used to plot coordinates, however, one of them specifically needs to take a DataFrame, that being _dfscatter:", "Our other function will require an array type, and it is called _arrayscatter:", "While these both use the duck-type method to use methods for their specific type, similar to how a class would in Python, having to call a different function depending on your data-type certainly isn\u2019t optimal. So with that in mind, we can combine the two concepts by initially creating our objects with a dispatched function, and then creating our variables with methods as children. First, of course, we\u2019ll set up the dispatch:", "Create our plots as objects, and", "And if you\u2019d like to read more about this, I wrote an article on it as well!", "With any good demonstration in machine learning or computer science, it\u2019s always important to consider performance. For these performance metrics, we\u2019re going to be using @time, a function exported from IJulia to replace %timeit for IPython.", "Firstly, I created a DataFrame that will actually give us enough of a challenge to be worthy of timing, with 1,000,000 values. Though this is certainly a high amount, it might not be high enough \u2014 but we\u2019ll definitely get a great idea of where the metrics stand between Julia\u2019s dispatch and duck-typing in Julia.", "Here is our duck-typed linear regression function:", "And here is our regular function, along with its dispatch and a struct to hold our data:", "Of course, using these functions we are going to need to make a train X and train y, along with a test X and test y. I did this using Lathe.preprocess: TrainTestSplit.", "Now we can simply plug them into our methods and compare the times!", "Julia certainly has a lot of cool and interesting ways to handle types going through functions. Not only can we use Julia\u2019s dispatch, but we can also take advantage of the language\u2019s expressive syntax to create our own temporary types to hold both data and functions. Not only is this incredibly convenient, but it also has a particular performance gain associated with it. There are some disadvantages, like not being able to read types or access data without writing functions to do so, but I think that trade-off is certainly worth it. This was my first time ever putting a video into a full-blown video editor, and I really hope the result was worth it \u2014 because wow, Kden-live eats up memory like it\u2019s nothing, and I was pinned at 80-plus percent memory usage the whole time! My computer didn\u2019t enjoy rendering it, either, that\u2019s for sure!", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F119f708936ff&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-julia-into-python-and-duck-type-in-a-statically-typed-language-119f708936ff&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-julia-into-python-and-duck-type-in-a-statically-typed-language-119f708936ff&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-julia-into-python-and-duck-type-in-a-statically-typed-language-119f708936ff&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-julia-into-python-and-duck-type-in-a-statically-typed-language-119f708936ff&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----119f708936ff--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----119f708936ff--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://emmettgb.medium.com/?source=post_page-----119f708936ff--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=post_page-----119f708936ff--------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-julia-into-python-and-duck-type-in-a-statically-typed-language-119f708936ff&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c----119f708936ff---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F119f708936ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-julia-into-python-and-duck-type-in-a-statically-typed-language-119f708936ff&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F119f708936ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-julia-into-python-and-duck-type-in-a-statically-typed-language-119f708936ff&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "http://python.org", "anchor_text": "python logo src"}, {"url": "http://julialang.org", "anchor_text": "julia logo src"}, {"url": "https://github.com/emmettgb/Emmetts-DS-NoteBooks/blob/master/Julia/How%20to%20duck%20type%20in%20Julia.ipynb", "anchor_text": "Notebook"}, {"url": "https://github.com/emmettgb/Hone.jl", "anchor_text": "Hone.jl"}, {"url": "https://towardsdatascience.com/adding-julias-polymorphic-dispatch-to-my-plotting-library-part-4-1446e924774f", "anchor_text": "Adding Julia\u2019s Polymorphic Dispatch To My Plotting Library (Part 4)The methodology struggle!towardsdatascience.com"}, {"url": "http://twitter.com/time", "anchor_text": "@time"}, {"url": "https://medium.com/tag/programming?source=post_page-----119f708936ff---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/julia?source=post_page-----119f708936ff---------------julia-----------------", "anchor_text": "Julia"}, {"url": "https://medium.com/tag/python?source=post_page-----119f708936ff---------------python-----------------", "anchor_text": "Python"}, {"url": "https://medium.com/tag/data-science?source=post_page-----119f708936ff---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/computer-science?source=post_page-----119f708936ff---------------computer_science-----------------", "anchor_text": "Computer Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F119f708936ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-julia-into-python-and-duck-type-in-a-statically-typed-language-119f708936ff&user=Emma+Boudreau&userId=ea170050148c&source=-----119f708936ff---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F119f708936ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-julia-into-python-and-duck-type-in-a-statically-typed-language-119f708936ff&user=Emma+Boudreau&userId=ea170050148c&source=-----119f708936ff---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F119f708936ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-julia-into-python-and-duck-type-in-a-statically-typed-language-119f708936ff&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----119f708936ff--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F119f708936ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-julia-into-python-and-duck-type-in-a-statically-typed-language-119f708936ff&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----119f708936ff---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----119f708936ff--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----119f708936ff--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----119f708936ff--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----119f708936ff--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----119f708936ff--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----119f708936ff--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----119f708936ff--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----119f708936ff--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://emmettgb.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "4.6K Followers"}, {"url": "https://twitter.com/emmettboudgie", "anchor_text": "https://twitter.com/emmettboudgie"}, {"url": "https://github.com/emmettgb", "anchor_text": "https://github.com/emmettgb"}, {"url": "https://ems.computer/", "anchor_text": "https://ems.computer/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-julia-into-python-and-duck-type-in-a-statically-typed-language-119f708936ff&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff16bf42bb45f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fturn-julia-into-python-and-duck-type-in-a-statically-typed-language-119f708936ff&newsletterV3=ea170050148c&newsletterV3Id=f16bf42bb45f&user=Emma+Boudreau&userId=ea170050148c&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}