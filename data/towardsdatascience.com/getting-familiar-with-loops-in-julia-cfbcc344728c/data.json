{"url": "https://towardsdatascience.com/getting-familiar-with-loops-in-julia-cfbcc344728c", "time": 1683014993.583678, "path": "towardsdatascience.com/getting-familiar-with-loops-in-julia-cfbcc344728c/", "webpage": {"metadata": {"title": "Getting Familiar With Loops In Julia | by Emma Boudreau | Towards Data Science", "h1": "Getting Familiar With Loops In Julia", "description": "If one seeks to further their skills in software engineering, it can be rather difficult to learn just by viewing. Even if all of the concepts within literature or multimedia are well-understood, it\u2026"}, "outgoing_paragraph_urls": [], "all_paragraphs": ["If one seeks to further their skills in software engineering, it can be rather difficult to learn just by viewing. Even if all of the concepts within literature or multimedia are well-understood, it could be quite difficult to learn without actually creating the code and seeing how the code interacts with the data. Around fifteen years ago, I dove into the beautiful language of C++. In order to learn C++, I would spend hours researching and copy-pasting code in order to find out what it does. The problem is that I wasn\u2019t writing the code myself, even if it was copied directly.", "To be clear \u2014 I am not saying that copy and pasting code is a bad thing, I copy and paste snippets all the time from my previous notebooks, my current project, or even the world wide web. However, a lot of engineering is about learning how to learn. Part of this is knowing when to copy and paste as opposed to when you need to study the material further. In my C++ example, I can remember using things like the STD library and using operators like <<, but not realizing that those were operators and thinking they were just random symbols because I didn\u2019t know what they did put a significant hole in the approach-ability of C++.", "Interestingly, with all of the languages on Earth, I had never really had an interest in Python until about three years ago. While yes \u2014 it certainly was a lot easier to learn than C++, I found a lot of the differences to be appalling. Regardless of how easy the language might be compared to its ancestor, I found myself falling into a trap of moving huge blocks of code from Google that I didn\u2019t really understand, and that hindered my learning ability in this new language.", "All of this evidence is presented to back up a single claim:", "If you want to learn programming, you need to write code.", "I had a mentor who referenced a book called \u201c Learn Python The Hard Way\u201d by Zed Shaw. The ideas in this book reflect the importance of what I discussed, and really opened my eyes to how much easier education is whenever interaction is involved. I consider myself a visual learner, as well, so to me, this could apply across the board with anyone trying to learn in terms of computer programming.", "With these ideas in mind, I thought that if I was going to provide concrete and adequate tutorials that will take one from an absolute beginner to an absolute professional, then I should certainly include resources for the students to learn with themselves. An empty copy of the notebook is now provided in the Github repo, and I insist that newer programmers type the code themselves!", "Within the world of programming, there a few different operations that a developer can use to work with data. The two operations that are most commonly used are looping and conditionals. Looping is a programming technique that allows for not only the examination, comparison, and computation of elements inside of types, but also is the base of a program itself.", "There are three main types of loops used in programming, with some unique applications pertaining to specific languages, such as syntactical looping for Julia. In Julia, we have the following loop applications at our disposal:", "That being said, syntactical looping still uses an iterator, only using syntactical expressions alongside it to make a faster loop with more expression \u2014 so is still iteration.", "Let\u2019s take a look at an iterative loop. Iterative loops are different from recursive and while loops in that they need dims to loop over. An example of a type that will contain such dims is an array. In the example of an array, we can loop through each element continuously one by one using an iterative loop. This can also be done using a generator type, which is just a type that is able to create types out of itself. A basic example of this is a range, where the range type generates an array of dims found in between the given bounds of the range. In this example, we will loop through a generated array of all integers between 10 and 20:", "A while loop will take a bool type, which is a conditional that will read either true or false, and use it as a break for the loop. Whenever the provided condition is not met, the loop will stop. While loops are actually the basis for most applications that are ran on a machine. This is because they can perform tasks at every tick consistently so long as you want those tasks performed. To create a while loop, we will, of course, use the key-word \u201c while,\u201d followed by a condition.", "Another thing to look at is the ability to break a loop. This is usually done with conditions, but it done using the key-word \u201c break.\u201d For example, while the loop above will print each number between 1 and 6, if we were to break it, we would get no prints at all.", "Finally, there are recursive loops. Recursion and when to use it is an entirely different discussion. In general, recursion kills performance, however, there are a lot of functional algorithms that are the foundation of modern computing that utilize recursion. That being said, there are some great uses for recursion where iteration and while looping cannot get the job done. The calculation of a factorial is a perfect example of a reasonable application of recursion for scientific, high-level computing. Most recursive algorithms are going to use a condition to determine as to whether or not a loop should be broken with a return. The first thing we are going to do in our factorial function is check if the number we want the factorial of is 1. If this were to be the case, the factorial of 1 is of course just one, so we will return 1.", "This will break our loop. A great way to think about recursive looping is to imagine that the function itself is both the loop and the initialization of the loop. Next, we are going to multiply the number by the factorial of itself minus one. This is by nature mathematically very recursive, so it makes sense that an application in computing would be recursive, as well.", "This function is going to be calling itself whenever this else condition is met. If n-1 is not equal to 1, then it will be calling itself again \u2014 and that is what recursion is. Here is our final result:", "Julia\u2019s base factorial function, factorial() actually does not use recursion to calculate factorials. Instead, it uses a lookup table to match values to corresponding factorial. This means that values above a number, which is 22 in Julia\u2019s example aren\u2019t able to be calculated. While that might be a negative, it also means that operations with numbers less than 22 are a lot faster than they would be otherwise.", "A zip loop is a great tool that can be whenever you want to loop through multiple arrays at the same time. This is useful for both thresholds and comparing or manipulating values across arrays. The zip syntax in Julia is a little different to most languages, so it is important to ensure that you put apply the proper syntax, using zip as a method and your two dims as a pair.", "Now that we have a solid foundational knowledge of loops, conditionals, and functions, let\u2019s combine all of those skills together.", "In this example, we loop through an array. If it meets the condition of being equal to ten, then we will append it to our new empty array. We will also do the same if the number is both not equal to ten and equal to twenty. However, if it were to be equal to 10 and 20, then it would only run the initial if.", "Can you create a function that will go through every letter in the string \u201c Hello World\u201d and only print a letter if it is an H, W, l, r, o, or D?", "The first thing we are going to do is of course define our hello world string variable.", "The next step in the approach is going to be looping through each individual char inside of the string. To do this, we can just call the string with a for loop.", "Next, we need to check if the value is in our list of values that we want to print. Anytime we want to check something, we are likely going to be using a conditional. So for this example, you could use to approaches. One of these will be the rookie approach, and the other will be far simpler. Either create a list of the values that are acceptable and check if the looped element is in that list, or create a condition for each individual char. Either way, the same result is produced, one is just a lot simpler and easier, frankly.", "Congratulations! You are on your way to being a great Julia developer. Though things certainly could seem complicated very early on, the bulk of the knowledge you are going to need to obtain, at least initially, is going to be learning more ways to work with data using operators, conditions, types, and loops. While there might be a lot more to learn, the foundational basics of programming in the Julia language have already been gone through in these tutorials.", "Your home for data science. A Medium publication sharing concepts, ideas and codes."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fcfbcc344728c&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-familiar-with-loops-in-julia-cfbcc344728c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-familiar-with-loops-in-julia-cfbcc344728c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-familiar-with-loops-in-julia-cfbcc344728c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-familiar-with-loops-in-julia-cfbcc344728c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----cfbcc344728c--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----cfbcc344728c--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://emmettgb.medium.com/?source=post_page-----cfbcc344728c--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=post_page-----cfbcc344728c--------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-familiar-with-loops-in-julia-cfbcc344728c&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c----cfbcc344728c---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcfbcc344728c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-familiar-with-loops-in-julia-cfbcc344728c&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcfbcc344728c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-familiar-with-loops-in-julia-cfbcc344728c&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://github.com/emmettgb/JuliaLessons", "anchor_text": "Github repo"}, {"url": "https://github.com/emmettgb/JuliaLessons/blob/master/3/Comprehensive%20Julia%20Tutorial%203(%20Completed%20NB%20).ipynb", "anchor_text": "Notebook"}, {"url": "https://medium.com/tag/programming?source=post_page-----cfbcc344728c---------------programming-----------------", "anchor_text": "Programming"}, {"url": "https://medium.com/tag/julia?source=post_page-----cfbcc344728c---------------julia-----------------", "anchor_text": "Julia"}, {"url": "https://medium.com/tag/tutorial?source=post_page-----cfbcc344728c---------------tutorial-----------------", "anchor_text": "Tutorial"}, {"url": "https://medium.com/tag/statistics?source=post_page-----cfbcc344728c---------------statistics-----------------", "anchor_text": "Statistics"}, {"url": "https://medium.com/tag/data-science?source=post_page-----cfbcc344728c---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fcfbcc344728c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-familiar-with-loops-in-julia-cfbcc344728c&user=Emma+Boudreau&userId=ea170050148c&source=-----cfbcc344728c---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fcfbcc344728c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-familiar-with-loops-in-julia-cfbcc344728c&user=Emma+Boudreau&userId=ea170050148c&source=-----cfbcc344728c---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcfbcc344728c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-familiar-with-loops-in-julia-cfbcc344728c&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----cfbcc344728c--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fcfbcc344728c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-familiar-with-loops-in-julia-cfbcc344728c&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----cfbcc344728c---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----cfbcc344728c--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----cfbcc344728c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----cfbcc344728c--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----cfbcc344728c--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----cfbcc344728c--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----cfbcc344728c--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----cfbcc344728c--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----cfbcc344728c--------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://emmettgb.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Emma Boudreau"}, {"url": "https://emmettgb.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "4.6K Followers"}, {"url": "https://twitter.com/emmettboudgie", "anchor_text": "https://twitter.com/emmettboudgie"}, {"url": "https://github.com/emmettgb", "anchor_text": "https://github.com/emmettgb"}, {"url": "https://ems.computer/", "anchor_text": "https://ems.computer/"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea170050148c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-familiar-with-loops-in-julia-cfbcc344728c&user=Emma+Boudreau&userId=ea170050148c&source=post_page-ea170050148c--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Ff16bf42bb45f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-familiar-with-loops-in-julia-cfbcc344728c&newsletterV3=ea170050148c&newsletterV3Id=f16bf42bb45f&user=Emma+Boudreau&userId=ea170050148c&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}