{"url": "https://towardsdatascience.com/using-predefined-and-pretrained-cnns-in-pytorch-e3447cbe9e3c", "time": 1683017458.354251, "path": "towardsdatascience.com/using-predefined-and-pretrained-cnns-in-pytorch-e3447cbe9e3c/", "webpage": {"metadata": {"title": "Using Predefined and Pretrained CNNs in PyTorch | by Rachel Draelos, MD, PhD | Towards Data Science", "h1": "Using Predefined and Pretrained CNNs in PyTorch", "description": "This use of the constructor produces a model that has the predefined architecture, but randomly-initialized parameters. Any model with randomly-initialized parameters will need to be trained on a\u2026"}, "outgoing_paragraph_urls": [{"url": "https://pytorch.org/docs/stable/torchvision/models.html", "anchor_text": "torchvision.models", "paragraph_index": 2}, {"url": "https://openaccess.thecvf.com/content_ICCV_2019/papers/He_Rethinking_ImageNet_Pre-Training_ICCV_2019_paper.pdf", "anchor_text": "Pre-training might not lead to better performance", "paragraph_index": 8}, {"url": "https://papers.nips.cc/paper/2019/file/eb1e78328c46506b46a4ac4a1e378b91-Paper.pdf", "anchor_text": "accelerate convergence", "paragraph_index": 8}, {"url": "https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html", "anchor_text": "PyTorch 2d convolutional layer", "paragraph_index": 25}, {"url": "https://pypi.org/project/torchsummary/", "anchor_text": "torchsummary", "paragraph_index": 32}, {"url": "https://github.com/rachellea/pytorch-computer-vision", "anchor_text": "pytorch-computer-vision", "paragraph_index": 38}, {"url": "https://glassboxmedicine.com/2020/12/08/using-predefined-and-pretrained-cnns-in-pytorch-tutorial-with-code/", "anchor_text": "http://glassboxmedicine.com", "paragraph_index": 39}], "all_paragraphs": ["At the end of this tutorial you should be able to:", "There are many pre-defined CNN models provided in PyTorch, including:", "It is easy to use existing models via torchvision.models.", "You can construct a model with randomly-initialized parameters by calling its constructor:", "This use of the constructor produces a model that has the predefined architecture, but randomly-initialized parameters. Any model with randomly-initialized parameters will need to be trained on a particular task in order to perform well.", "You can also load pre-trained models. In torchvision.models, all pre-trained models are pre-trained on ImageNet, meaning that their parameters have been optimized to perform well on the ImageNet 1000-class natural image classification task.", "Notice that the only difference between loading a randomly-initialized model and a pretrained model is whether you set pretrained=True or not.", "Models pre-trained on ImageNet will output predictions for the 1,000 ImageNet classes. What if you want to take advantage of pre-training, but you don\u2019t want to make predictions on those exact ImageNet classes? In that case, you can chop off the parts of the pre-trained model that you don\u2019t want to use, and keep only the parts you do want to use.", "(Side note: pre-training on ImageNet is popular even though the exact advantages of pre-training are debated. Pre-training might not lead to better performance but it probably does accelerate convergence due to nice scaling of the pretrained parameters.)", "Conceptually, CNN models often look like this:", "It is common to chop off the final fully connected layers (yellow) and keep only the convolutional feature extractor (orange). Then, you can tack on your own fully connected layers that have the right number of outputs for whatever task you are solving.", "If you already know the structure of the model, it\u2019s literally one line of code to pick out the feature extractor:", "In this case, we already knew the PyTorch structure of the ResNet18 \u2014 we knew that the first 8 \u201cchildren\u201d composed the feature extractor part of the model that we wanted to keep. (That is, childen 0, 1, 2, 3, 4, 5, 6, and 7, because in Python indexing the last number you index is not included.) I say you need to know the \u201cPyTorch structure\u201d of the model because often, PyTorch groups together different layers into one \u201cchild\u201d so knowing the number of layers in a model\u2019s architecture (e.g., 18 in a ResNet-18) does not tell you the PyTorch structure that you need to know in order to select out the part of the model that you want.", "Luckily, it is easy to figure out a model\u2019s PyTorch structure if you don\u2019t know it already. All you need to do is print out the model:", "That last line says only \u201cresnet18\u201d (the variable name); this line will cause PyTorch to print out the definition of the ResNet18 model so you can look at it, assuming you\u2019re working in an interactive environment.", "Here\u2019s what gets printed out, with the indexable \u201cchildren\u201d highlighted so you can see how we end up with indexing [0:8] to pick out the convolutional feature extractor of this particular model:", "From looking at the image above, you can see that indexing [0:8] goes through all the convolutional layers and excludes only children 8 and 9, which are the AdaptiveAvgPool2d and Linear (i.e. classification) layers.", "The last two lines above, indexing [0:-2] (all but the last two children) or [0:8] (all children up to but not including child 8) are equivalent for this model.", "If you want to double check that you\u2019ve selected out the right part of the model, all you need to do is get PyTorch to print out the piece of the model you\u2019ve selected by typing in the name of the variable in which you\u2019ve stored that piece (again assuming you\u2019re in an interactive environment):", "A common choice is to select out all the convolutional layers of a pretrained model, as shown in the ReNet18 example above. But you don\u2019t have to select out all the convolutional layers if you don\u2019t want to. You could select out only some of them:", "By default, the feature extractor\u2019s parameters will be refined on your data during training. However, you might want to keep the feature extractor\u2019s parameters fixed \u2014 for example because you believe the performance will be approximately equivalent and you want to reduce memory usage by preventing calculation of gradients through the feature extractor.", "If you want to keep the feature extractor\u2019s parameters fixed, then you can tell PyTorch that no parts of the feature extractor need gradients, and then the feature extractor won\u2019t be updated during training:", "Every time you select pretrained=True, by default PyTorch will download the parameters of a pretrained model and save those parameters locally on your machine. All of the parameters for a particular pretrained model are saved in the same file. PyTorch tells you the path to that file when it downloads the model for the first time:", "You can transfer this parameters file to other machines. This is useful if you are working in a restricted computing environment that prevents downloads from the Internet but allows file transfers. You can transfer the model parameters file to .cache/torch/checkpoints/ on the remote machine, and everything should work seamlessly assuming you are using the same version of PyTorch on the remote machine.", "You may be working in a memory-limited environment, and so you may want to calculate the number of parameters in different models to figure out which one has the fewest parameters. Or, you may be trying to demonstrate that Model A is awesome because Model A gets the same performance as Model B but Model A has half as many parameters. This section describes how to calculate the number of parameters in a convolutional layer manually.", "A PyTorch 2d convolutional layer is defined with the following format:", "For example, the following line of code defines a convolutional layer with 64 in-channels, 128 out-channels, a 3\u00d73 kernel, and 3\u00d73 stride:", "To calculate the number of parameters in one 2D convolutional layer, use the formula:", "For the example layer above, the calculation is:", "The formula is similar for a 3D convolutional layer:", "Here are a couple examples of 3D convolutional layer parameter calculations:", "This can obviously get tedious if you\u2019re trying to calculate all the parameters in a CNN with many layers. Luckily, we can calculate the number of parameters automatically using torchsummary.", "The Python package torchsummary can automatically calculate the number of parameters as well as the memory requirements of a particular model.", "Here is an example of using torchsummary:", "The output of the call to summary() looks like this:", "The (3,300,300) in the call to summary() is an example input size, and is required when using torchsummary because the size of the input data affects the memory requirements. For a ResNet18, which assumes 3-channel (RGB) input images, you can choose any input size that has 3 channels. For example, (3,251,458) would also be a valid input size.", "Here are three examples of using torchsummary to calculate total parameters and memory:", "PyTorch provides many CNN architectures pre-trained on ImageNet, which can be used from their pre-training initialization or from a random initialization. These models can be used in their entirety (i.e. 1000-class classification, following the ImageNet classes) or in partiality (e.g. selecting out only the convolutional feature extractor for use with a new set of fully connected layers). torchsummary enables automatic calculation of total parameters and memory requirements.", "Stay tuned for future posts about building custom CNNs and custom PyTorch data sets, based on my pytorch-computer-vision repository of PyTorch code for training and evaluating custom models on custom data.", "Originally published at http://glassboxmedicine.com on December 8, 2020.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "I am a physician with a PhD in Computer Science. My research focuses on machine learning methods development for medical data. I am the CEO of Cydoc."], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2Fe3447cbe9e3c&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-predefined-and-pretrained-cnns-in-pytorch-e3447cbe9e3c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-predefined-and-pretrained-cnns-in-pytorch-e3447cbe9e3c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-predefined-and-pretrained-cnns-in-pytorch-e3447cbe9e3c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-predefined-and-pretrained-cnns-in-pytorch-e3447cbe9e3c&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----e3447cbe9e3c--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----e3447cbe9e3c--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://rachel-draelos.medium.com/?source=post_page-----e3447cbe9e3c--------------------------------", "anchor_text": ""}, {"url": "https://rachel-draelos.medium.com/?source=post_page-----e3447cbe9e3c--------------------------------", "anchor_text": "Rachel Draelos, MD, PhD"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F209c0f742bcf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-predefined-and-pretrained-cnns-in-pytorch-e3447cbe9e3c&user=Rachel+Draelos%2C+MD%2C+PhD&userId=209c0f742bcf&source=post_page-209c0f742bcf----e3447cbe9e3c---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe3447cbe9e3c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-predefined-and-pretrained-cnns-in-pytorch-e3447cbe9e3c&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe3447cbe9e3c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-predefined-and-pretrained-cnns-in-pytorch-e3447cbe9e3c&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://en.wikipedia.org/wiki/File:Habitat_67,_southwest_view.jpg", "anchor_text": "a photo of Habitat 67 from Wikimedia Commons"}, {"url": "https://www.robots.ox.ac.uk/~vgg/research/very_deep/", "anchor_text": "VGG models won first and second place in the localization and classification tasks, respectively, in the ImageNet ILSVRC-2014 competition."}, {"url": "https://en.wikipedia.org/wiki/Batch_normalization", "anchor_text": "batch normalization"}, {"url": "https://towardsdatascience.com/residual-blocks-building-blocks-of-resnet-fd90ca15d6ec", "anchor_text": "residual blocks"}, {"url": "https://papers.nips.cc/paper/2018/file/a41b3bb3e6b050b6c9067c67f663b915-Paper.pdf", "anchor_text": "smoothing out the loss landscape"}, {"url": "https://pytorch.org/docs/stable/torchvision/models.html", "anchor_text": "a whole bunch of other models"}, {"url": "https://www.researchgate.net/figure/An-overview-of-the-VGG-16-model-architecture-this-model-uses-simple-convolutional-blocks_fig2_328966158", "anchor_text": "VGG-16 model architecture"}, {"url": "https://arxiv.org/pdf/1512.03385.pdf", "anchor_text": "ResNet \u2014 Deep Residual Learning for Image Recognition"}, {"url": "https://arxiv.org/pdf/1409.4842.pdf", "anchor_text": "GoogLeNet \u2014 Going deeper with convolutions"}, {"url": "https://pytorch.org/docs/stable/torchvision/models.html", "anchor_text": "torchvision.models"}, {"url": "https://openaccess.thecvf.com/content_ICCV_2019/papers/He_Rethinking_ImageNet_Pre-Training_ICCV_2019_paper.pdf", "anchor_text": "Pre-training might not lead to better performance"}, {"url": "https://papers.nips.cc/paper/2019/file/eb1e78328c46506b46a4ac4a1e378b91-Paper.pdf", "anchor_text": "accelerate convergence"}, {"url": "https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html", "anchor_text": "PyTorch 2d convolutional layer"}, {"url": "https://pypi.org/project/torchsummary/", "anchor_text": "torchsummary"}, {"url": "https://github.com/rachellea/pytorch-computer-vision", "anchor_text": "pytorch-computer-vision"}, {"url": "https://glassboxmedicine.com/2020/12/08/using-predefined-and-pretrained-cnns-in-pytorch-tutorial-with-code/", "anchor_text": "http://glassboxmedicine.com"}, {"url": "https://medium.com/tag/artificial-intelligence?source=post_page-----e3447cbe9e3c---------------artificial_intelligence-----------------", "anchor_text": "Artificial Intelligence"}, {"url": "https://medium.com/tag/neural-networks?source=post_page-----e3447cbe9e3c---------------neural_networks-----------------", "anchor_text": "Neural Networks"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----e3447cbe9e3c---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/pytorch?source=post_page-----e3447cbe9e3c---------------pytorch-----------------", "anchor_text": "Pytorch"}, {"url": "https://medium.com/tag/code?source=post_page-----e3447cbe9e3c---------------code-----------------", "anchor_text": "Code"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe3447cbe9e3c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-predefined-and-pretrained-cnns-in-pytorch-e3447cbe9e3c&user=Rachel+Draelos%2C+MD%2C+PhD&userId=209c0f742bcf&source=-----e3447cbe9e3c---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe3447cbe9e3c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-predefined-and-pretrained-cnns-in-pytorch-e3447cbe9e3c&user=Rachel+Draelos%2C+MD%2C+PhD&userId=209c0f742bcf&source=-----e3447cbe9e3c---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe3447cbe9e3c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-predefined-and-pretrained-cnns-in-pytorch-e3447cbe9e3c&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----e3447cbe9e3c--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2Fe3447cbe9e3c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-predefined-and-pretrained-cnns-in-pytorch-e3447cbe9e3c&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----e3447cbe9e3c---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----e3447cbe9e3c--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----e3447cbe9e3c--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----e3447cbe9e3c--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----e3447cbe9e3c--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----e3447cbe9e3c--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----e3447cbe9e3c--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----e3447cbe9e3c--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----e3447cbe9e3c--------------------------------", "anchor_text": ""}, {"url": "https://rachel-draelos.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://rachel-draelos.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Rachel Draelos, MD, PhD"}, {"url": "https://rachel-draelos.medium.com/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "576 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F209c0f742bcf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-predefined-and-pretrained-cnns-in-pytorch-e3447cbe9e3c&user=Rachel+Draelos%2C+MD%2C+PhD&userId=209c0f742bcf&source=post_page-209c0f742bcf--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fa0377bd1bf3d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-predefined-and-pretrained-cnns-in-pytorch-e3447cbe9e3c&newsletterV3=209c0f742bcf&newsletterV3Id=a0377bd1bf3d&user=Rachel+Draelos%2C+MD%2C+PhD&userId=209c0f742bcf&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}