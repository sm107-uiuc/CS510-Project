{"url": "https://towardsdatascience.com/tree-algorithms-explained-ball-tree-algorithm-vs-kd-tree-vs-brute-force-9746debcd940", "time": 1683009249.872426, "path": "towardsdatascience.com/tree-algorithms-explained-ball-tree-algorithm-vs-kd-tree-vs-brute-force-9746debcd940/", "webpage": {"metadata": {"title": "Tree algorithms explained: Ball Tree Algorithm vs. KD Tree vs. Brute Force | by Hucker Marius | Towards Data Science", "h1": "Tree algorithms explained: Ball Tree Algorithm vs. KD Tree vs. Brute Force", "description": "All three are algorithms used for the Nearest Neighbour search. The Ball Tree and the KD Tree algorithm are tree algorithms used for spatial division of data points and their allocation into certain\u2026"}, "outgoing_paragraph_urls": [{"url": "https://en.wikipedia.org/wiki/Hypersphere", "anchor_text": "Wikipedia", "paragraph_index": 12}, {"url": "https://medium.com/@hucker.marius/membership", "anchor_text": "https://medium.com/@hucker.marius/membership", "paragraph_index": 29}], "all_paragraphs": ["All three are algorithms used for the Nearest Neighbour search. The Ball Tree and the KD Tree algorithm are tree algorithms used for spatial division of data points and their allocation into certain regions. In other words, they are used to structure data in a multidimensional space.", "But first, let\u2019s start at the bottom: Why is it called a tree algorithm? What is a tree? \u2014 Skip, if you know it already!", "A tree is a hierarchical way to structure data. As there exist linear data structures such as queues, where data is allocated one after another, trees are a common type of data structure. Trees are applied in many diverse fields of computer science, from graphics, over databases to operating systems. They do not only have the name in common with their botanical friends in nature, but also some characteristics. As botanical trees, the trees in computer science have roots, leaves, and branches. However, the allocation of these parts is bottom-up compared to normal trees. The roots are at the top of the tree and the leaves are at the lower end.", "Parent Node = Is the node above another node, e.g. the root node is the parent node for the inner nodes below", "Child node = As the name states, the children of a parent node and followingly, the nodes below a parent node. A child node can be again the parent node for the nodes below.", "Root Node = The uppermost node, the origin of the tree", "Leaf Node = Is also called an external node and can be seen as a \u201cdead-end\u201d, it is the last node and has no child nodes below", "Inner Node = Also called an internal node or branch node. It is a node that has a connection above and below (a child and parent node)", "For a better understanding of how this can look like in a computer science topic, you can find below an HTML-code. A tree helps to structure a website and websites can normally be depicted using a tree.", "KD-Tree algorithm and the Ball algorithm are both binary algorithms to build such a tree. Binary means in this context, that each parent node only has two child nodes. Typically the algorithms are applied in Nearest Neighbour Search.", "The Ball Tree Algorithm can be contemplated as a metric tree. Metric trees organize and structure data points considering the metric space in which the points are located. Using metrics the points do not need to be finite-dimensional or in vectors (Kumar, Zhang & Nayar, 2008).", "The algorithm divides the data points into two clusters. Each cluster is encompassed by a circle(2D) or a sphere(3D). The sphere is often called a hypersphere.", "\u201cA hypersphere is the set of points at a constant distance from a given point called its center.\u201d \u2014 Wikipedia", "From the sphere form of the cluster, the name Ball tree algorithm is derived. Each cluster represents a node of the tree. Let\u2019s see how the algorithm is executed.", "The children are chosen to have maximum distance between them, typically using the following construction at each level of the tree.", "First, the centroid of the whole cloud of data points is set. The point with the maximum distance to the centroid is selected as the center of the first cluster and child node. The point furthest away from the center of the first cluster is chosen as the center point of the second cluster. All other data points are then assigned to the node and cluster to the closest center, either being cluster 1 or cluster 2. Any point can only be a member of one cluster. The sphere lines can intersect each other, but the points must be clearly assigned to one cluster. If a point is exactly in the middle of both centers and has followingly the same distance to both sides, it has to be assigned to one cluster. The clusters can be unbalanced. That is basically the concept behind the Ball Tree Algorithm. The process of dividing the data points into two clusters/spheres is repeated within each cluster until a defined depth is reached. This leads to a nested cluster containing more and more circles.", "As can be seen in the graphic above the Tree has a depth of 2. Centroid 1 is the start of the algorithm. A Sphere (2D) is laid around all data points (grey color). From the center, the furthest distant point of a cluster is selected, which is here number 3 or number 9. This is the new center of Cluster 1, here number 3 for the purple cluster. The furthest distant point from point number three is the center of cluster 2. This is number 9 for the orange cluster. All data points comprised of the purple sphere are then considered for the calculation of the new Centroid 2. The same is done for all data points lying in the orange sphere, resulting in Centroid 3. The furthest distant points are then again the center of their new cluster. Datapoint number 3 is the furthest distant point from Centroid 2 and the center for the new cluster.", "On the other side of Centroid 2, the greatest distance ist between it and data point number 1. It is the center of the second Cluster. This step is then also executed for the orange side, resulting again in two clusters. However, the orange side is unbalanced. The resulting tree can be seen below (M is the sphere of Centroid 1 and the starting sphere encompassing all data points). From there the clusters are divided with depth 2:", "The KD Tree Algorithm is one of the most commonly used Nearest Neighbor Algorithms. The data points are split at each node into two sets. Like the previous algorithm, the KD Tree is also a binary tree algorithm always ending in a maximum of two nodes. The split criteria chosen are often the median. On the right side of the image below, you can see the exact position of the data points, on the left side the spatial position of them.", "The KD-Tree Algorithm uses first the median of the first axis and then, in the second layer, the median of the second axis. We\u2019ll start with axis X. The in ascending order sorted x-values are: 1,2,3,4,4,6,7,8,9,9. Followingly, the median is 6.", "Now we\u2019re going to use the Y-Axis. We have already two clusters, so we need to take a look at them separately. On the left side, we got the sorted y-values: 2,3,4,5,6. The median is then 4. This leads to a separation line at value 4 and the coordinate system looks like:", "The values are followingly separated at 4 and the first cluster contains (2,3) (1,2). The second cluster contains the points (4,6) (3,4) (4,5).On the other side of the x-median of 4 are currently 5 points (including the point (5,6)). In sorted order, the y-values are 6,7,8,9,9. This leads to a median of 8 and the first cluster contains (9,1) and (6,5). The second cluster contains (8,7)(7,9)(9,6).The resulting final coordinate system can be seen below. The data points have been divided into 4 clusters with a depth of 2 (X and Y).", "But, how does the tree look like? Let\u2019s see how the resulting tree is divided.", "Brute Force may be the most accurate method due to the consideration of all data points. Hence, no data point is assigned to a false cluster. For small data sets, Brute Force is justifiable, however, for increasing data the KD or Ball Tree is better alternatives due to their speed and efficiency.", "The KD-tree and its variants can be termed \u201cprojective trees,\u201d meaning that they categorize points based on their projection into some lower-dimensional space. (Kumar, Zhang & Nayar, 2008)", "For low-dimensional data, the KD Tree Algorithm might be the best solution. As seen above, the node divisions of the KD Tree are axis-aligned and cannot take a different shape. So the distribution might not be correctly mapped, leading to poor performance.", "For a high-dimensional space, the Ball Tree Algorithm might be the best solution. Its performance depends on the amount of training data, the dimensionality, and the structure of the data. Having many data points that are noise can also lead to a bad performance due to no clear structure.", "Thanks for reading, I hope you enjoyed it!", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Data Scientist @Atruvia | Tech & Marketing Enthusiast from Karlsruhe, Germany https://medium.com/@hucker.marius/membership"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F9746debcd940&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftree-algorithms-explained-ball-tree-algorithm-vs-kd-tree-vs-brute-force-9746debcd940&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftree-algorithms-explained-ball-tree-algorithm-vs-kd-tree-vs-brute-force-9746debcd940&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftree-algorithms-explained-ball-tree-algorithm-vs-kd-tree-vs-brute-force-9746debcd940&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftree-algorithms-explained-ball-tree-algorithm-vs-kd-tree-vs-brute-force-9746debcd940&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----9746debcd940--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9746debcd940--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@hucker.marius?source=post_page-----9746debcd940--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@hucker.marius?source=post_page-----9746debcd940--------------------------------", "anchor_text": "Hucker Marius"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F979676b8abe8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftree-algorithms-explained-ball-tree-algorithm-vs-kd-tree-vs-brute-force-9746debcd940&user=Hucker+Marius&userId=979676b8abe8&source=post_page-979676b8abe8----9746debcd940---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9746debcd940&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftree-algorithms-explained-ball-tree-algorithm-vs-kd-tree-vs-brute-force-9746debcd940&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9746debcd940&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftree-algorithms-explained-ball-tree-algorithm-vs-kd-tree-vs-brute-force-9746debcd940&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.pexels.com/photo/flight-landscape-nature-sky-36717/", "anchor_text": "pixabay"}, {"url": "https://medium.com/@hucker.marius/membership", "anchor_text": "Get started"}, {"url": "https://en.wikipedia.org/wiki/Hypersphere", "anchor_text": "Wikipedia"}, {"url": "https://medium.com/subscribe/@hucker.marius", "anchor_text": "Stay tuned on new articles of Marius HuckerStay tuned on new articles of Marius Hucker By signing up, you will create a Medium account if you don't already have\u2026medium.com"}, {"url": "https://github.com/JKnighten/k-nearest-neighbors/wiki/KNN-and-BallTree-Overview", "anchor_text": "JKnighten/k-nearest-neighborsK Nearest Neighbors(KNN) is a simple machine learning algorithm that can be used for both classification and\u2026github.com"}, {"url": "https://ashokharnal.wordpress.com/tag/ball-tree-explained-in-simple-manner/", "anchor_text": "Ball tree explained in simple manner - Linux UncleJanuary 20, 2015 In this blog and next few blogs, I will discuss implementation of k-nearest neighbor (k-NN) algorithm\u2026ashokharnal.wordpress.com"}, {"url": "https://jakevdp.github.io/blog/2013/04/29/benchmarking-nearest-neighbor-searches-in-python/", "anchor_text": "Benchmarking Nearest Neighbor Searches in PythonI recently submitted a scikit-learn pull request containing a brand new ball tree and kd-tree for fast nearest neighbor\u2026jakevdp.github.io"}, {"url": "https://medium.com/tag/data-science?source=post_page-----9746debcd940---------------data_science-----------------", "anchor_text": "Data Science"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----9746debcd940---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/knn?source=post_page-----9746debcd940---------------knn-----------------", "anchor_text": "Knn"}, {"url": "https://medium.com/tag/kd-tree?source=post_page-----9746debcd940---------------kd_tree-----------------", "anchor_text": "Kd Tree"}, {"url": "https://medium.com/tag/ball-tree?source=post_page-----9746debcd940---------------ball_tree-----------------", "anchor_text": "Ball Tree"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9746debcd940&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftree-algorithms-explained-ball-tree-algorithm-vs-kd-tree-vs-brute-force-9746debcd940&user=Hucker+Marius&userId=979676b8abe8&source=-----9746debcd940---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9746debcd940&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftree-algorithms-explained-ball-tree-algorithm-vs-kd-tree-vs-brute-force-9746debcd940&user=Hucker+Marius&userId=979676b8abe8&source=-----9746debcd940---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9746debcd940&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftree-algorithms-explained-ball-tree-algorithm-vs-kd-tree-vs-brute-force-9746debcd940&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----9746debcd940--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F9746debcd940&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftree-algorithms-explained-ball-tree-algorithm-vs-kd-tree-vs-brute-force-9746debcd940&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----9746debcd940---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----9746debcd940--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----9746debcd940--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----9746debcd940--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----9746debcd940--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----9746debcd940--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----9746debcd940--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----9746debcd940--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----9746debcd940--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@hucker.marius?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@hucker.marius?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Hucker Marius"}, {"url": "https://medium.com/@hucker.marius/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "1.6K Followers"}, {"url": "https://medium.com/@hucker.marius/membership", "anchor_text": "https://medium.com/@hucker.marius/membership"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F979676b8abe8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftree-algorithms-explained-ball-tree-algorithm-vs-kd-tree-vs-brute-force-9746debcd940&user=Hucker+Marius&userId=979676b8abe8&source=post_page-979676b8abe8--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2Fa76517c2b81d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftree-algorithms-explained-ball-tree-algorithm-vs-kd-tree-vs-brute-force-9746debcd940&newsletterV3=979676b8abe8&newsletterV3Id=a76517c2b81d&user=Hucker+Marius&userId=979676b8abe8&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}