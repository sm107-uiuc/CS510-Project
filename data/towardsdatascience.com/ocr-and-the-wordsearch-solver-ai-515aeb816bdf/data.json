{"url": "https://towardsdatascience.com/ocr-and-the-wordsearch-solver-ai-515aeb816bdf", "time": 1683014862.274956, "path": "towardsdatascience.com/ocr-and-the-wordsearch-solver-ai-515aeb816bdf/", "webpage": {"metadata": {"title": "OCR and the WordSearch solver AI. Using a custom OCR model, Pytesseract\u2026 | by Robin T. White, PhD | Towards Data Science", "h1": "OCR and the WordSearch solver AI", "description": "Recently, I have seen a lot of posts on Sodoku solvers. The algorithm for it is quite simple, usually a backtracking recursion algorithm in only a few lines of code in Python. My favorite video is\u2026"}, "outgoing_paragraph_urls": [{"url": "https://www.youtube.com/watch?v=G_UYXzGuqvM", "anchor_text": "video", "paragraph_index": 0}, {"url": "https://www.youtube.com/watch?v=cOC-ad0BsY0", "anchor_text": "here", "paragraph_index": 0}, {"url": "https://thewordsearch.com/", "anchor_text": "WordSearch.com", "paragraph_index": 1}, {"url": "https://medium.com/@0xcaff/word-search-solver-e8c5854c888", "anchor_text": "Martin Charles", "paragraph_index": 2}, {"url": "https://medium.com/analytics-vidhya/how-to-apply-data-augmentation-to-deal-with-unbalanced-datasets-in-20-lines-of-code-ada8521320c9", "anchor_text": "here", "paragraph_index": 8}, {"url": "https://www.reddit.com/r/learnpython/comments/j2u6ea/return_paths_in_2d_array_from_list_of_sequences/", "anchor_text": "link", "paragraph_index": 12}, {"url": "https://bit.ly/3T8fQIK", "anchor_text": "another", "paragraph_index": 16}, {"url": "https://github.com/robintwhite", "anchor_text": "github", "paragraph_index": 18}], "all_paragraphs": ["Recently, I have seen a lot of posts on Sodoku solvers. The algorithm for it is quite simple, usually a backtracking recursion algorithm in only a few lines of code in Python. My favorite video is from Computerphile and Professor Thorsten Altenkirch, who I could watch all day. If using a computer vision approach, a simple model already trained on MNIST is all you need, or something equivalent. A really great video explaining all the steps can be found here.", "So where does that leave us with Wordsearch. Well, I was getting bored with seeing multiple versions and videos of Sodoku puzzle solvers. So I instead thought of seeing if anyone had done a Wordsearch solver. To my surprise there wasn\u2019t something quite what I was looking for. Now, that is not to say it people haven\u2019t done this, but I felt like it would be a good project to practice and so decided to not look further into it as I wanted to solve this myself. For this I am using WordSearch.com", "After completing this project I did stumble across a nice post from Martin Charles, which is typical to most I have seen where the text needs to be entered by hand.", "This was a good project because it touched on the following topics:", "* Custom OCR \u2014 Training (including getting images) while handling small and imbalanced data, Testing, Deploying * Image Processing \u2014 Finding the grid etc. * Path finding \u2014 The brain. This lead me down a long and interesting path although I stuck with my original simple solution in the end * Automated control \u2014 Getting the computer to solve the puzzle", "For the sake of brevity, I will refrain my discussion to the OCR, Path finding and automated control. After all, finding the grid was easy and the same conditions used in the Sodoku solvers, for which there are many, can be used. Here is the result of the image processing which finds the grid box (outlined in red), the words box (outlined in yellow) and each letter bounding box outlined in green.", "The first option before training my own model was to use Pytesseract. Unfortunately, however, right off the bat, this didn\u2019t find the letters in a useable manner even after cropping the grid. If I instead cropped each letter, it still wasn\u2019t super accurate and also incredibly slow. However, I did use Pytesseract to obtain the words to search for by passing the words box (outlined in yellow above). This left me with the relatively simple task of making a single letter OCR.", "I first started by creating a dataset by gathering images of individual letters and manually creating my dataset. I used a simple script that gathered each letter bounding box, displayed on screen and took as input a letter to label my training data. Since I am using a specific font and images obtained from screenshots, I could get away with a small amount of training data. However, it was incredibly unbalanced. After going through about 5 grids worth of letters, which is about 1000, I only had seen about 3 \u2018Q\u2019s, 3 \u2018Z\u2019s, 3 \u2018F\u2019s and surprisingly a few other small amount of certain letters. On the other hand, I had a pretty high number of a, e, o\u2019s etc. So much so I actually started skipping them.", "To solve this, I used a Balanced Data Generator when applying data augmentation such that there would always be the same number of examples for each letter. This used imblearn to generate a random oversampler combined with augmentation in Tensorflow Keras. I found this from another medium post here. This means, a higher number of augmentations would be applied to Q over N to balance out the data. These augmentations were simple; slight rotation, shift, zoom and in the end obtained a high accuracy for validation data and essentially perfect on the test data which is each new Wordsearch. Of course this is only tested on my computer etc. but it does the trick at the moment.", "For the model itself, I used just a simple LeNet architecture. This proved to be accurate and sufficient so hey, don\u2019t fix what isn\u2019t broken. This wasn\u2019t real time fast on my GTX 1060 GPU, it took about 10s to classify all 196 letters. I\u2019m not sure though what was the bottleneck; if it was the image processing to get each letter or the classification itself. I did do a resizing to the classic 28x28 image. I could perhaps get away with a smaller image and maybe it would be quicker. I wasn\u2019t too concerned for the time, but maybe a consideration if you want this as a real time app. Here is a final result showing the letter bounding boxes using OpenCV and the found representative letter as a string written on the image.", "The grid was then represented as a 2D numpy array of letters, just as if you would have typed it yourself. Also, each word to find was saved as a list. Now we know what to find, we just need to find it.", "As I mentioned this led me down an interesting research path, and I probably learned the most here. I started with using Networks to find all paths with start and end points of the 1st and last letter in each word. I then parsed these results into valid moves (up/down, diagonal, horizontal). However, it was very slow from the many many possible combinations when I went full scale. I took a step back and instead made a very simple solution which simply checks the neighbors at each position of the first letter in each word. Then there is a neighbor of the next letter, it then checks each letter in that direction for the length of the word. If it matches the word, we have a solution, and if not we keep looking. A more general approach which I came to find could be to use recursion again keeping only neighbors of subsequent letters in the word. This also allows for non-valid moves, and is a more general path finder. As I said, I kept with my first usable solution. Here is a schematic of the algorithm I used. It is simple and fast.", "If you are interested in seeing a really nice general solution, I started a reddit discussion which someone posted a really terrific solution in. Here is the link to it.", "I also added some parser to remove things like \u2018.\u2019 or \u2018-\u2019 which are sometimes present in words.", "For this, we can thank our good friend PyAutoGui. The \u2018hard part\u2019 was just getting the screen pixel coordinates from the numpy array of letters which we were using to define our grid. I created another array that stored the centroid positions of the letters when we first defined our bounding box before doing the OCR for each letter. I also kept the grid position offset from the screenshot. Simple math will tell us the location, after accounting for differences between OpenCV coords and numpy array position. A single dictionary could have been used for each letter and the corresponding pixel position instead of two separate arrays, but I mean, either way\u2026To simplify the automation in wordsearch.com you can choose either a \u2018drag\u2019 action to find the word, or you can use \u2018tap\u2019 at the start and end of the word. This was simpler although honestly the same. So if you want to try it out for yourself, I did implement \u2018tap\u2019 word selection method. This is in the settings on the wordsearch page. I purposefully added a delay of 1 second and a sleep time of 0.2s between each word just to make sure any internet connection lag or other wouldn\u2019t cause it to go crazy.", "All-in-all, this is a pretty satisfying result to watch all the words be found. I certainly learned a lot and got to practice some useful techniques. I am quite happy with the performance.", "I recently found another great article on OCR from neptune.ai that goes into more detail about building\u00a0your\u00a0own\u00a0OCR\u00a0engines\u00a0and\u00a0each\u00a0step\u00a0of\u00a0the\u00a0process. I encourage you to check it out if you are interested in learning more.", "If any part of this post provided some useful information or just a bit of inspiration please follow me for more.", "You can find the source code on my github.", "Your home for data science. A Medium publication sharing concepts, ideas and codes.", "Computer Vision and Machine Learning. Applications Development Scientist"], "all_outgoing_urls": [{"url": "https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F515aeb816bdf&%7Efeature=LoOpenInAppButton&%7Echannel=ShowPostUnderCollection&source=---two_column_layout_nav----------------------------------", "anchor_text": "Open in app"}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Focr-and-the-wordsearch-solver-ai-515aeb816bdf&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Focr-and-the-wordsearch-solver-ai-515aeb816bdf&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://medium.com/?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Fmedium.com%2Fnew-story&source=---two_column_layout_nav-----------------------new_post_sidenav-----------", "anchor_text": "Write"}, {"url": "https://medium.com/search?source=---two_column_layout_nav----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Focr-and-the-wordsearch-solver-ai-515aeb816bdf&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign up"}, {"url": "https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Ftowardsdatascience.com%2Focr-and-the-wordsearch-solver-ai-515aeb816bdf&source=post_page---two_column_layout_nav-----------------------global_nav-----------", "anchor_text": "Sign In"}, {"url": "https://towardsdatascience.com/?source=post_page-----515aeb816bdf--------------------------------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----515aeb816bdf--------------------------------", "anchor_text": "Towards Data Science"}, {"url": "https://medium.com/@robint.white90?source=post_page-----515aeb816bdf--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@robint.white90?source=post_page-----515aeb816bdf--------------------------------", "anchor_text": "Robin T. White, PhD"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc5eb85d3a614&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Focr-and-the-wordsearch-solver-ai-515aeb816bdf&user=Robin+T.+White%2C+PhD&userId=c5eb85d3a614&source=post_page-c5eb85d3a614----515aeb816bdf---------------------follow_byline-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F515aeb816bdf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Focr-and-the-wordsearch-solver-ai-515aeb816bdf&source=--------------------------bookmark_header-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F515aeb816bdf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Focr-and-the-wordsearch-solver-ai-515aeb816bdf&source=--------------------------bookmark_header-----------", "anchor_text": "Save"}, {"url": "https://www.youtube.com/watch?v=G_UYXzGuqvM", "anchor_text": "video"}, {"url": "https://www.youtube.com/watch?v=cOC-ad0BsY0", "anchor_text": "here"}, {"url": "https://thewordsearch.com/", "anchor_text": "WordSearch.com"}, {"url": "https://medium.com/@0xcaff/word-search-solver-e8c5854c888", "anchor_text": "Martin Charles"}, {"url": "https://medium.com/analytics-vidhya/how-to-apply-data-augmentation-to-deal-with-unbalanced-datasets-in-20-lines-of-code-ada8521320c9", "anchor_text": "here"}, {"url": "https://www.reddit.com/r/learnpython/comments/j2u6ea/return_paths_in_2d_array_from_list_of_sequences/", "anchor_text": "link"}, {"url": "https://bit.ly/3T8fQIK", "anchor_text": "another"}, {"url": "https://github.com/robintwhite", "anchor_text": "github"}, {"url": "https://towardsdatascience.com/computer-vision-and-the-ultimate-pong-ai-e6d70153fc45", "anchor_text": "Ultimate Pong AI"}, {"url": "https://medium.com/analytics-vidhya/minecraft-mapper-ab4478e98297", "anchor_text": "Minecraft Mapper"}, {"url": "https://medium.com/tag/computer-vision?source=post_page-----515aeb816bdf---------------computer_vision-----------------", "anchor_text": "Computer Vision"}, {"url": "https://medium.com/tag/machine-learning?source=post_page-----515aeb816bdf---------------machine_learning-----------------", "anchor_text": "Machine Learning"}, {"url": "https://medium.com/tag/gaming?source=post_page-----515aeb816bdf---------------gaming-----------------", "anchor_text": "Gaming"}, {"url": "https://medium.com/tag/editors-pick?source=post_page-----515aeb816bdf---------------editors_pick-----------------", "anchor_text": "Editors Pick"}, {"url": "https://medium.com/tag/hands-on-tutorials?source=post_page-----515aeb816bdf---------------hands_on_tutorials-----------------", "anchor_text": "Hands On Tutorials"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F515aeb816bdf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Focr-and-the-wordsearch-solver-ai-515aeb816bdf&user=Robin+T.+White%2C+PhD&userId=c5eb85d3a614&source=-----515aeb816bdf---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F515aeb816bdf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Focr-and-the-wordsearch-solver-ai-515aeb816bdf&user=Robin+T.+White%2C+PhD&userId=c5eb85d3a614&source=-----515aeb816bdf---------------------clap_footer-----------", "anchor_text": ""}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F515aeb816bdf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Focr-and-the-wordsearch-solver-ai-515aeb816bdf&source=--------------------------bookmark_footer-----------", "anchor_text": ""}, {"url": "https://towardsdatascience.com/?source=post_page-----515aeb816bdf--------------------------------", "anchor_text": "More from Towards Data Science"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fcollection%2Ftowards-data-science%2F515aeb816bdf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Focr-and-the-wordsearch-solver-ai-515aeb816bdf&collection=Towards+Data+Science&collectionId=7f60cf5620c9&source=post_page-----515aeb816bdf---------------------follow_footer-----------", "anchor_text": "Follow"}, {"url": "https://towardsdatascience.com/?source=post_page-----515aeb816bdf--------------------------------", "anchor_text": "Read more from Towards Data Science"}, {"url": "https://medium.com/?source=post_page-----515aeb816bdf--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/about?autoplay=1&source=post_page-----515aeb816bdf--------------------------------", "anchor_text": "About"}, {"url": "https://help.medium.com/hc/en-us?source=post_page-----515aeb816bdf--------------------------------", "anchor_text": "Help"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----515aeb816bdf--------------------------------", "anchor_text": "Terms"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----515aeb816bdf--------------------------------", "anchor_text": "Privacy"}, {"url": "https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8&ct=post_page&source=post_page-----515aeb816bdf--------------------------------", "anchor_text": ""}, {"url": "https://play.google.com/store/apps/details?id=com.medium.reader&source=post_page-----515aeb816bdf--------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@robint.white90?source=---two_column_layout_sidebar----------------------------------", "anchor_text": ""}, {"url": "https://medium.com/@robint.white90?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Robin T. White, PhD"}, {"url": "https://medium.com/@robint.white90/followers?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "93 Followers"}, {"url": "https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc5eb85d3a614&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Focr-and-the-wordsearch-solver-ai-515aeb816bdf&user=Robin+T.+White%2C+PhD&userId=c5eb85d3a614&source=post_page-c5eb85d3a614--two_column_layout_sidebar-----------------------follow_profile-----------", "anchor_text": "Follow"}, {"url": "https://medium.com/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F3f1d8826832f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Focr-and-the-wordsearch-solver-ai-515aeb816bdf&newsletterV3=c5eb85d3a614&newsletterV3Id=3f1d8826832f&user=Robin+T.+White%2C+PhD&userId=c5eb85d3a614&source=---two_column_layout_sidebar-----------------------subscribe_user-----------", "anchor_text": ""}, {"url": "https://help.medium.com/hc/en-us?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Help"}, {"url": "https://medium.statuspage.io/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Status"}, {"url": "https://about.medium.com/creators/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Writers"}, {"url": "https://blog.medium.com/?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Blog"}, {"url": "https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Careers"}, {"url": "https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Privacy"}, {"url": "https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Terms"}, {"url": "https://medium.com/about?autoplay=1&source=---two_column_layout_sidebar----------------------------------", "anchor_text": "About"}, {"url": "https://speechify.com/medium?source=---two_column_layout_sidebar----------------------------------", "anchor_text": "Text to speech"}]}, "scrape_status": {"code": "1"}}