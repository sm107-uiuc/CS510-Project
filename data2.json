{    "url": "https://medium.com/towards-data-science/topic-modeling-and-latent-dirichlet-allocation-in-python-9bf156893c24",                        "title": "Topic Modeling and Latent Dirichlet Allocation (LDA) in Python | by Susan Li | Towards Data Science",            "h1": "Topic Modeling and Latent Dirichlet Allocation (LDA) in Python",            "description": "Topic modeling is a type of statistical modeling for discovering the abstract “topics” that occur in a collection of documents. Latent Dirichlet Allocation (LDA) is an example of topic model and is…",        "all_paragraphs": "Topic modeling is a type of statistical modeling for discovering the abstract “topics” that occur in a collection of documents. Latent Dirichlet Allocation (LDA) is an example of topic model and is used to classify text in a document to a particular topic. It builds a topic per document model and words per topic model, modeled as Dirichlet distributions.,Here we are going to apply LDA to a set of documents and split them into topics. Let’s get started!,The data set we’ll use is a list of over one million news headlines published over a period of 15 years and can be downloaded from Kaggle.,Take a peek of the data.,We will perform the following steps:,Write a function to perform lemmatize and stem preprocessing steps on the data set.,Select a document to preview after preprocessing.,Preprocess the headline text, saving the results as ‘processed_docs’,Create a dictionary from ‘processed_docs’ containing the number of times a word appears in the training set.,Filter out tokens that appear in,For each document we create a dictionary reporting how manywords and how many times those words appear. Save this to ‘bow_corpus’, then check our selected document earlier.,Preview Bag Of Words for our sample preprocessed document.,Create tf-idf model object using models.TfidfModel on ‘bow_corpus’ and save it to ‘tfidf’, then apply transformation to the entire corpus and call it ‘corpus_tfidf’. Finally we preview TF-IDF scores for our first document.,Train our lda model using gensim.models.LdaMulticore and save it to ‘lda_model’,For each topic, we will explore the words occuring in that topic and its relative weight.,Can you distinguish different topics using the words in each topic and their corresponding weights?,Again, can you distinguish different topics using the words in each topic and their corresponding weights?,We will check where our test document would be classified.,Our test document has the highest probability to be part of the topic that our model assigned, which is the accurate classification.,Our test document has the highest probability to be part of the topic that our model assigned, which is the accurate classification.,Source code can be found on Github. I look forward to hearing any feedback or questions.,Changing the world, one post at a time. Sr Data Scientist, Toronto Canada. https://www.linkedin.com/in/susanli/"    }